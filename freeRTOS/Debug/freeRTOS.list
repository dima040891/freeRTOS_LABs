
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000992c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08009a3c  08009a3c  00019a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bf0  08009bf0  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009bf0  08009bf0  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bf0  08009bf0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bf0  08009bf0  00019bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bf4  08009bf4  00019bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000381c  20000184  08009d7c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200039a0  08009d7c  000239a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e343  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004085  00000000  00000000  0003e4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001258  00000000  00000000  00042578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001070  00000000  00000000  000437d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ba98  00000000  00000000  00044840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013d43  00000000  00000000  000602d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e5a4  00000000  00000000  0007401b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001025bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000486c  00000000  00000000  0010263c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000184 	.word	0x20000184
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a24 	.word	0x08009a24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000188 	.word	0x20000188
 800014c:	08009a24 	.word	0x08009a24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <PCB_Init>:

#include "PCB_BluePill.h"
#include "main.h"

void PCB_Init()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016a:	4802      	ldr	r0, [pc, #8]	; (8000174 <PCB_Init+0x14>)
 800016c:	f000 fdb4 	bl	8000cd8 <HAL_GPIO_WritePin>
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}
 8000174:	40011000 	.word	0x40011000

08000178 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800017c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000180:	4802      	ldr	r0, [pc, #8]	; (800018c <PCB_LED_Toggle+0x14>)
 8000182:	f000 fdc1 	bl	8000d08 <HAL_GPIO_TogglePin>
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40011000 	.word	0x40011000

08000190 <freeRTOS_Tasks_Ini>:


// Внимание! QueueHandle_t является более современным аналогом xQueueHandle. Разобраться с этим позже

void freeRTOS_Tasks_Ini (void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af02      	add	r7, sp, #8
	xQueue1 = xQueueCreate(4, sizeof(char)); // Создание очереди из 4 элементов размерностью 8 бит
 8000196:	2200      	movs	r2, #0
 8000198:	2101      	movs	r1, #1
 800019a:	2004      	movs	r0, #4
 800019c:	f006 fcfc 	bl	8006b98 <xQueueGenericCreate>
 80001a0:	4602      	mov	r2, r0
 80001a2:	4b2e      	ldr	r3, [pc, #184]	; (800025c <freeRTOS_Tasks_Ini+0xcc>)
 80001a4:	601a      	str	r2, [r3, #0]

	xTaskCreate(vTask_USB_Init, "Task_USB_Init", 100, NULL, 2, NULL); // З-а сброса лнии D+ после каждого запуска МК. Необхадимо для определения устройсва на шине USB.
 80001a6:	2300      	movs	r3, #0
 80001a8:	9301      	str	r3, [sp, #4]
 80001aa:	2302      	movs	r3, #2
 80001ac:	9300      	str	r3, [sp, #0]
 80001ae:	2300      	movs	r3, #0
 80001b0:	2264      	movs	r2, #100	; 0x64
 80001b2:	492b      	ldr	r1, [pc, #172]	; (8000260 <freeRTOS_Tasks_Ini+0xd0>)
 80001b4:	482b      	ldr	r0, [pc, #172]	; (8000264 <freeRTOS_Tasks_Ini+0xd4>)
 80001b6:	f007 f97e 	bl	80074b6 <xTaskCreate>
	xTaskCreate(vTask_Transmit_VCP, "Task_Transmit_VCP", 120, NULL, 1, NULL); // З-а переиодческой отправки сообщения в VCP. Задача должна быть запущена после удаления vTask_USB_Init.
 80001ba:	2300      	movs	r3, #0
 80001bc:	9301      	str	r3, [sp, #4]
 80001be:	2301      	movs	r3, #1
 80001c0:	9300      	str	r3, [sp, #0]
 80001c2:	2300      	movs	r3, #0
 80001c4:	2278      	movs	r2, #120	; 0x78
 80001c6:	4928      	ldr	r1, [pc, #160]	; (8000268 <freeRTOS_Tasks_Ini+0xd8>)
 80001c8:	4828      	ldr	r0, [pc, #160]	; (800026c <freeRTOS_Tasks_Ini+0xdc>)
 80001ca:	f007 f974 	bl	80074b6 <xTaskCreate>
	xTaskCreate(vTask_Transmit_VCP_2, "Task_Transmit_VCP_2", 120, (void*) USB_Tx_Buf_Task2, 1, NULL); // Вывод второго тестового сообщения
 80001ce:	4b28      	ldr	r3, [pc, #160]	; (8000270 <freeRTOS_Tasks_Ini+0xe0>)
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	2300      	movs	r3, #0
 80001d4:	9301      	str	r3, [sp, #4]
 80001d6:	2301      	movs	r3, #1
 80001d8:	9300      	str	r3, [sp, #0]
 80001da:	4613      	mov	r3, r2
 80001dc:	2278      	movs	r2, #120	; 0x78
 80001de:	4925      	ldr	r1, [pc, #148]	; (8000274 <freeRTOS_Tasks_Ini+0xe4>)
 80001e0:	4825      	ldr	r0, [pc, #148]	; (8000278 <freeRTOS_Tasks_Ini+0xe8>)
 80001e2:	f007 f968 	bl	80074b6 <xTaskCreate>

	Delay_LED = 500;
 80001e6:	4b25      	ldr	r3, [pc, #148]	; (800027c <freeRTOS_Tasks_Ini+0xec>)
 80001e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001ec:	801a      	strh	r2, [r3, #0]
	pDelay_LED = &Delay_LED;
 80001ee:	4b24      	ldr	r3, [pc, #144]	; (8000280 <freeRTOS_Tasks_Ini+0xf0>)
 80001f0:	4a22      	ldr	r2, [pc, #136]	; (800027c <freeRTOS_Tasks_Ini+0xec>)
 80001f2:	601a      	str	r2, [r3, #0]


	if(xQueue1 != NULL) // Если очередь создалась успешно (хватило место в куче), то создать задачи отправки получения данных
 80001f4:	4b19      	ldr	r3, [pc, #100]	; (800025c <freeRTOS_Tasks_Ini+0xcc>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d029      	beq.n	8000250 <freeRTOS_Tasks_Ini+0xc0>
	{
		xTaskCreate(vTask_Queue_Data_Send, "Task_Queue_Data_Send", 200, NULL, 1, NULL); // З-а отправки данных в очередь
 80001fc:	2300      	movs	r3, #0
 80001fe:	9301      	str	r3, [sp, #4]
 8000200:	2301      	movs	r3, #1
 8000202:	9300      	str	r3, [sp, #0]
 8000204:	2300      	movs	r3, #0
 8000206:	22c8      	movs	r2, #200	; 0xc8
 8000208:	491e      	ldr	r1, [pc, #120]	; (8000284 <freeRTOS_Tasks_Ini+0xf4>)
 800020a:	481f      	ldr	r0, [pc, #124]	; (8000288 <freeRTOS_Tasks_Ini+0xf8>)
 800020c:	f007 f953 	bl	80074b6 <xTaskCreate>
		xTaskCreate(vTask_Queue_Data_Recieve, "Task_Queue_Data_Recieve", 200, NULL, 1, NULL); // З-а которая получает данные из очереди и отправляет тестовое сообщение.
 8000210:	2300      	movs	r3, #0
 8000212:	9301      	str	r3, [sp, #4]
 8000214:	2301      	movs	r3, #1
 8000216:	9300      	str	r3, [sp, #0]
 8000218:	2300      	movs	r3, #0
 800021a:	22c8      	movs	r2, #200	; 0xc8
 800021c:	491b      	ldr	r1, [pc, #108]	; (800028c <freeRTOS_Tasks_Ini+0xfc>)
 800021e:	481c      	ldr	r0, [pc, #112]	; (8000290 <freeRTOS_Tasks_Ini+0x100>)
 8000220:	f007 f949 	bl	80074b6 <xTaskCreate>

		if (xTaskCreate(vTask_PCB_LED_Blink, "Task_PCB_LED_Blink", 40, (void*) pDelay_LED, 1, NULL) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY) // З-а мигания LED
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <freeRTOS_Tasks_Ini+0xf0>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	2300      	movs	r3, #0
 800022a:	9301      	str	r3, [sp, #4]
 800022c:	2301      	movs	r3, #1
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	4613      	mov	r3, r2
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	4917      	ldr	r1, [pc, #92]	; (8000294 <freeRTOS_Tasks_Ini+0x104>)
 8000236:	4818      	ldr	r0, [pc, #96]	; (8000298 <freeRTOS_Tasks_Ini+0x108>)
 8000238:	f007 f93d 	bl	80074b6 <xTaskCreate>
 800023c:	4603      	mov	r3, r0
 800023e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000242:	d105      	bne.n	8000250 <freeRTOS_Tasks_Ini+0xc0>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	4814      	ldr	r0, [pc, #80]	; (800029c <freeRTOS_Tasks_Ini+0x10c>)
 800024c:	f000 fd44 	bl	8000cd8 <HAL_GPIO_WritePin>
	{
		//Если все хорошо то ветка else не исполнится, что означает что очередь создана.

	}

	osKernelStart();
 8000250:	f006 f9da 	bl	8006608 <osKernelStart>

}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20003120 	.word	0x20003120
 8000260:	08009a4c 	.word	0x08009a4c
 8000264:	080003e1 	.word	0x080003e1
 8000268:	08009a5c 	.word	0x08009a5c
 800026c:	08000399 	.word	0x08000399
 8000270:	20000000 	.word	0x20000000
 8000274:	08009a70 	.word	0x08009a70
 8000278:	08000369 	.word	0x08000369
 800027c:	20003124 	.word	0x20003124
 8000280:	2000311c 	.word	0x2000311c
 8000284:	08009a84 	.word	0x08009a84
 8000288:	080002a1 	.word	0x080002a1
 800028c:	08009a9c 	.word	0x08009a9c
 8000290:	080002e9 	.word	0x080002e9
 8000294:	08009ab4 	.word	0x08009ab4
 8000298:	08000441 	.word	0x08000441
 800029c:	40011000 	.word	0x40011000

080002a0 <vTask_Queue_Data_Send>:



void vTask_Queue_Data_Send(void *pvParameters)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	char Queue_Data_Send = 'Q'; // Передаваемы данные
 80002a8:	2351      	movs	r3, #81	; 0x51
 80002aa:	72fb      	strb	r3, [r7, #11]
	{
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

		// Отправка данных в очередь xQueue1, данные - Queue_Data, время ожидания появления свободного места в очереди 0, т.е. в очереди должны быть хотя бы одно свободное место

		xStatus = xQueueSendToBack(xQueue1, &Queue_Data_Send, 0);
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <vTask_Queue_Data_Send+0x40>)
 80002ae:	6818      	ldr	r0, [r3, #0]
 80002b0:	f107 010b 	add.w	r1, r7, #11
 80002b4:	2300      	movs	r3, #0
 80002b6:	2200      	movs	r2, #0
 80002b8:	f006 fcce 	bl	8006c58 <xQueueGenericSend>
 80002bc:	60f8      	str	r0, [r7, #12]

		if (xStatus != pdPASS)
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d007      	beq.n	80002d4 <vTask_Queue_Data_Send+0x34>
		{
			while (CDC_Transmit_FS((unsigned char*)"Could not send to the queue.\r\n", strlen("Could not send to the queue.\r\n"))); // Если не было свободного места в очереди
 80002c4:	bf00      	nop
 80002c6:	211e      	movs	r1, #30
 80002c8:	4806      	ldr	r0, [pc, #24]	; (80002e4 <vTask_Queue_Data_Send+0x44>)
 80002ca:	f008 ff95 	bl	80091f8 <CDC_Transmit_FS>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d1f8      	bne.n	80002c6 <vTask_Queue_Data_Send+0x26>
		/*Вызов taskYIELD() информирует шедулер, что сейчас сразу
        нужно переключиться к другой задаче, а не поддерживать эту задачу в
        состоянии Running до окончания текущего слайса времени*/

		//taskYIELD();
		vTaskDelay(500 / portTICK_RATE_MS );
 80002d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d8:	f007 faa0 	bl	800781c <vTaskDelay>
		xStatus = xQueueSendToBack(xQueue1, &Queue_Data_Send, 0);
 80002dc:	e7e6      	b.n	80002ac <vTask_Queue_Data_Send+0xc>
 80002de:	bf00      	nop
 80002e0:	20003120 	.word	0x20003120
 80002e4:	08009ac8 	.word	0x08009ac8

080002e8 <vTask_Queue_Data_Recieve>:
	}
	vTaskDelete(NULL);
}

void vTask_Queue_Data_Recieve(void *pvParameters)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	{
		// Попытаться (если очередь не пуста) получить данные из очереди



		xStatus = xQueueReceive(xQueue1, &Queue_Data_Recieve, 150); // Очередь откуда брать данные, переменная куда сохраняются данные, время ожидания появления данных в очереди
 80002f0:	4b19      	ldr	r3, [pc, #100]	; (8000358 <vTask_Queue_Data_Recieve+0x70>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f107 010b 	add.w	r1, r7, #11
 80002f8:	2296      	movs	r2, #150	; 0x96
 80002fa:	4618      	mov	r0, r3
 80002fc:	f006 fe3a 	bl	8006f74 <xQueueReceive>
 8000300:	60f8      	str	r0, [r7, #12]

		if(xStatus == pdPASS)
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d11a      	bne.n	800033e <vTask_Queue_Data_Recieve+0x56>
		{
			while (CDC_Transmit_FS((unsigned char*)"Received from xQueue1 = ", strlen("Received from xQueue1 = ")));
 8000308:	bf00      	nop
 800030a:	2118      	movs	r1, #24
 800030c:	4813      	ldr	r0, [pc, #76]	; (800035c <vTask_Queue_Data_Recieve+0x74>)
 800030e:	f008 ff73 	bl	80091f8 <CDC_Transmit_FS>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d1f8      	bne.n	800030a <vTask_Queue_Data_Recieve+0x22>
			while (CDC_Transmit_FS((unsigned char*) &Queue_Data_Recieve, 1));
 8000318:	bf00      	nop
 800031a:	f107 030b 	add.w	r3, r7, #11
 800031e:	2101      	movs	r1, #1
 8000320:	4618      	mov	r0, r3
 8000322:	f008 ff69 	bl	80091f8 <CDC_Transmit_FS>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d1f6      	bne.n	800031a <vTask_Queue_Data_Recieve+0x32>
			while (CDC_Transmit_FS((unsigned char*)"\r\n", strlen("\r\n")));
 800032c:	bf00      	nop
 800032e:	2102      	movs	r1, #2
 8000330:	480b      	ldr	r0, [pc, #44]	; (8000360 <vTask_Queue_Data_Recieve+0x78>)
 8000332:	f008 ff61 	bl	80091f8 <CDC_Transmit_FS>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d1f8      	bne.n	800032e <vTask_Queue_Data_Recieve+0x46>
 800033c:	e007      	b.n	800034e <vTask_Queue_Data_Recieve+0x66>
		}
		else
		{
			while (CDC_Transmit_FS((unsigned char*)"Could not receive from the queue.\r\n", strlen("Could not receive from the queue.\r\n")));
 800033e:	bf00      	nop
 8000340:	2123      	movs	r1, #35	; 0x23
 8000342:	4808      	ldr	r0, [pc, #32]	; (8000364 <vTask_Queue_Data_Recieve+0x7c>)
 8000344:	f008 ff58 	bl	80091f8 <CDC_Transmit_FS>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d1f8      	bne.n	8000340 <vTask_Queue_Data_Recieve+0x58>
		}
		vTaskDelay(500 / portTICK_RATE_MS );
 800034e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000352:	f007 fa63 	bl	800781c <vTaskDelay>
		xStatus = xQueueReceive(xQueue1, &Queue_Data_Recieve, 150); // Очередь откуда брать данные, переменная куда сохраняются данные, время ожидания появления данных в очереди
 8000356:	e7cb      	b.n	80002f0 <vTask_Queue_Data_Recieve+0x8>
 8000358:	20003120 	.word	0x20003120
 800035c:	08009ae8 	.word	0x08009ae8
 8000360:	08009b04 	.word	0x08009b04
 8000364:	08009b08 	.word	0x08009b08

08000368 <vTask_Transmit_VCP_2>:
}



void vTask_Transmit_VCP_2(void *pvParameters)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	char *vTask2_Name;

	vTask2_Name = (char*) pvParameters;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		while(CDC_Transmit_FS((unsigned char*)vTask2_Name, strlen(vTask2_Name))); // Пытаться послать данные до тех пор USB не будет готов к передаче очерендной посылки.
 8000374:	bf00      	nop
 8000376:	68f8      	ldr	r0, [r7, #12]
 8000378:	f7ff feea 	bl	8000150 <strlen>
 800037c:	4603      	mov	r3, r0
 800037e:	b29b      	uxth	r3, r3
 8000380:	4619      	mov	r1, r3
 8000382:	68f8      	ldr	r0, [r7, #12]
 8000384:	f008 ff38 	bl	80091f8 <CDC_Transmit_FS>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d1f3      	bne.n	8000376 <vTask_Transmit_VCP_2+0xe>
			//скорее всего ф-я CDC_Transmit_FS() проверяет свобдны ли аппаратные ресурсы МК к передаче по USB. Если нет, то сразу выходит из функции с ошибкой.
		vTaskDelay(500 / portTICK_RATE_MS );
 800038e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000392:	f007 fa43 	bl	800781c <vTaskDelay>
		while(CDC_Transmit_FS((unsigned char*)vTask2_Name, strlen(vTask2_Name))); // Пытаться послать данные до тех пор USB не будет готов к передаче очерендной посылки.
 8000396:	e7ed      	b.n	8000374 <vTask_Transmit_VCP_2+0xc>

08000398 <vTask_Transmit_VCP>:
	}
	vTaskDelete(NULL);
}

void vTask_Transmit_VCP(void *pvParameters)
{
 8000398:	b590      	push	{r4, r7, lr}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	sprintf(USB_Tx_Buf_Task1, "Task1 send\r\n");
 80003a0:	4a0d      	ldr	r2, [pc, #52]	; (80003d8 <vTask_Transmit_VCP+0x40>)
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <vTask_Transmit_VCP+0x44>)
 80003a4:	4614      	mov	r4, r2
 80003a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80003a8:	6020      	str	r0, [r4, #0]
 80003aa:	6061      	str	r1, [r4, #4]
 80003ac:	60a2      	str	r2, [r4, #8]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	7323      	strb	r3, [r4, #12]

	for(;;)
	{
		while(CDC_Transmit_FS((unsigned char*)USB_Tx_Buf_Task1, strlen(USB_Tx_Buf_Task1))); // // Пытаться послать данные до тех пор USB не будет готов к передаче очерендной посылки.
 80003b2:	bf00      	nop
 80003b4:	4808      	ldr	r0, [pc, #32]	; (80003d8 <vTask_Transmit_VCP+0x40>)
 80003b6:	f7ff fecb 	bl	8000150 <strlen>
 80003ba:	4603      	mov	r3, r0
 80003bc:	b29b      	uxth	r3, r3
 80003be:	4619      	mov	r1, r3
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <vTask_Transmit_VCP+0x40>)
 80003c2:	f008 ff19 	bl	80091f8 <CDC_Transmit_FS>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d1f3      	bne.n	80003b4 <vTask_Transmit_VCP+0x1c>
		vTaskDelay(500 / portTICK_RATE_MS );
 80003cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d0:	f007 fa24 	bl	800781c <vTaskDelay>
		while(CDC_Transmit_FS((unsigned char*)USB_Tx_Buf_Task1, strlen(USB_Tx_Buf_Task1))); // // Пытаться послать данные до тех пор USB не будет готов к передаче очерендной посылки.
 80003d4:	e7ed      	b.n	80003b2 <vTask_Transmit_VCP+0x1a>
 80003d6:	bf00      	nop
 80003d8:	20003104 	.word	0x20003104
 80003dc:	08009b2c 	.word	0x08009b2c

080003e0 <vTask_USB_Init>:
	vTaskDelete(NULL);

}

void vTask_USB_Init(void *pvParameters)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	// НЕ ЗАБЫТЬ ЗАКОММЕНТИТЬ ВЫЗОВ MX_USB_DEVICE_Init(); ИЗ ЗАДАЧИ StartDefaultTask (main.c) ПОСЛЕ КАЖДОЙ ГЕНЕРАЦИИ ПРОЕКТА!!!

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e8:	f107 0308 	add.w	r3, r7, #8
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003fa:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	2302      	movs	r3, #2
 8000406:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	4619      	mov	r1, r3
 800040e:	480b      	ldr	r0, [pc, #44]	; (800043c <vTask_USB_Init+0x5c>)
 8000410:	f000 fb08 	bl	8000a24 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041a:	4808      	ldr	r0, [pc, #32]	; (800043c <vTask_USB_Init+0x5c>)
 800041c:	f000 fc5c 	bl	8000cd8 <HAL_GPIO_WritePin>

	  vTaskDelay(2000 / portTICK_RATE_MS );
 8000420:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000424:	f007 f9fa 	bl	800781c <vTaskDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 8000428:	f008 fe28 	bl	800907c <MX_USB_DEVICE_Init>

	  vTaskDelete(NULL); // Удаленеи задачи самой себя
 800042c:	2000      	movs	r0, #0
 800042e:	f007 f983 	bl	8007738 <vTaskDelete>

	for(;;)
	{
		vTaskDelay(1000 / portTICK_RATE_MS );
 8000432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000436:	f007 f9f1 	bl	800781c <vTaskDelay>
 800043a:	e7fa      	b.n	8000432 <vTask_USB_Init+0x52>
 800043c:	40010800 	.word	0x40010800

08000440 <vTask_PCB_LED_Blink>:
	}
	vTaskDelete(NULL);
}

void vTask_PCB_LED_Blink(void *pvParameters)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]

	uint16_t *pDelay_LED = (uint16_t*) pvParameters; // Получение параметра с привденем к иходному типу данных - uint16_t
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
	PCB_LED_Toggle();
 800044c:	f7ff fe94 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(*pDelay_LED / portTICK_RATE_MS ); // Разыменование т.е. передача значения задержки
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	4618      	mov	r0, r3
 8000456:	f007 f9e1 	bl	800781c <vTaskDelay>
	PCB_LED_Toggle();
 800045a:	f7ff fe8d 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(*(uint16_t*)pvParameters / portTICK_RATE_MS ); // Можно и без промежуточных переменных, привести pvParameters к указателю uint16_t "(uint16_t*)pvParameters", а затем разименовать
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f007 f9da 	bl	800781c <vTaskDelay>
	PCB_LED_Toggle();
 8000468:	e7f0      	b.n	800044c <vTask_PCB_LED_Blink+0xc>

0800046a <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0

}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr

08000476 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
return 0;
 800047a:	2300      	movs	r3, #0
}
 800047c:	4618      	mov	r0, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 f95c 	bl	8000744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f818 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 f870 	bl	8000574 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000494:	f006 f886 	bl	80065a4 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000498:	4a06      	ldr	r2, [pc, #24]	; (80004b4 <main+0x30>)
 800049a:	2100      	movs	r1, #0
 800049c:	4806      	ldr	r0, [pc, #24]	; (80004b8 <main+0x34>)
 800049e:	f006 f8e7 	bl	8006670 <osThreadNew>
 80004a2:	4602      	mov	r2, r0
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <main+0x38>)
 80004a6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  PCB_Init();
 80004a8:	f7ff fe5a 	bl	8000160 <PCB_Init>
  freeRTOS_Tasks_Ini();
 80004ac:	f7ff fe70 	bl	8000190 <freeRTOS_Tasks_Ini>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <main+0x2c>
 80004b2:	bf00      	nop
 80004b4:	08009bbc 	.word	0x08009bbc
 80004b8:	0800060d 	.word	0x0800060d
 80004bc:	20003128 	.word	0x20003128

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b094      	sub	sp, #80	; 0x50
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ca:	2228      	movs	r2, #40	; 0x28
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f009 fa9f 	bl	8009a12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004f0:	2301      	movs	r3, #1
 80004f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fe:	2301      	movs	r3, #1
 8000500:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000502:	2302      	movs	r3, #2
 8000504:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800050a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800050c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000510:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000516:	4618      	mov	r0, r3
 8000518:	f001 ff92 	bl	8002440 <HAL_RCC_OscConfig>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000522:	f000 f87b 	bl	800061c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000526:	230f      	movs	r3, #15
 8000528:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052a:	2302      	movs	r3, #2
 800052c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000536:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	2102      	movs	r1, #2
 8000542:	4618      	mov	r0, r3
 8000544:	f002 f9fc 	bl	8002940 <HAL_RCC_ClockConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800054e:	f000 f865 	bl	800061c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000552:	2310      	movs	r3, #16
 8000554:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4618      	mov	r0, r3
 800055e:	f002 fb59 	bl	8002c14 <HAL_RCCEx_PeriphCLKConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000568:	f000 f858 	bl	800061c <Error_Handler>
  }
}
 800056c:	bf00      	nop
 800056e:	3750      	adds	r7, #80	; 0x50
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <MX_GPIO_Init+0x90>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <MX_GPIO_Init+0x90>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_GPIO_Init+0x90>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_GPIO_Init+0x90>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a17      	ldr	r2, [pc, #92]	; (8000604 <MX_GPIO_Init+0x90>)
 80005a6:	f043 0320 	orr.w	r3, r3, #32
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_GPIO_Init+0x90>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0320 	and.w	r3, r3, #32
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_GPIO_Init+0x90>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a11      	ldr	r2, [pc, #68]	; (8000604 <MX_GPIO_Init+0x90>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_GPIO_Init+0x90>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	480c      	ldr	r0, [pc, #48]	; (8000608 <MX_GPIO_Init+0x94>)
 80005d8:	f000 fb7e 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2302      	movs	r3, #2
 80005ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	4619      	mov	r1, r3
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <MX_GPIO_Init+0x94>)
 80005f6:	f000 fa15 	bl	8000a24 <HAL_GPIO_Init>

}
 80005fa:	bf00      	nop
 80005fc:	3720      	adds	r7, #32
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000
 8000608:	40011000 	.word	0x40011000

0800060c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
osDelay(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f006 f8d5 	bl	80067c4 <osDelay>
 800061a:	e7fb      	b.n	8000614 <StartDefaultTask+0x8>

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000622:	e7fe      	b.n	8000622 <Error_Handler+0x6>

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <HAL_MspInit+0x68>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <HAL_MspInit+0x68>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_MspInit+0x68>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_MspInit+0x68>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a11      	ldr	r2, [pc, #68]	; (800068c <HAL_MspInit+0x68>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <HAL_MspInit+0x68>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	210f      	movs	r1, #15
 800065e:	f06f 0001 	mvn.w	r0, #1
 8000662:	f000 f9a8 	bl	80009b6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_MspInit+0x6c>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_MspInit+0x6c>)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000
 8000690:	40010000 	.word	0x40010000

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler+0x4>

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <MemManage_Handler+0x4>

080006a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c2:	f000 f885 	bl	80007d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80006c6:	f007 fd39 	bl	800813c <xTaskGetSchedulerState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d001      	beq.n	80006d4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80006d0:	f008 fa82 	bl	8008bd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006de:	f000 fc5d 	bl	8000f9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200036b4 	.word	0x200036b4

080006ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006fa:	e003      	b.n	8000704 <LoopCopyDataInit>

080006fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000700:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000702:	3104      	adds	r1, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000704:	480a      	ldr	r0, [pc, #40]	; (8000730 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000708:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800070a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800070c:	d3f6      	bcc.n	80006fc <CopyDataInit>
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000710:	e002      	b.n	8000718 <LoopFillZerobss>

08000712 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000714:	f842 3b04 	str.w	r3, [r2], #4

08000718 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800071a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800071c:	d3f9      	bcc.n	8000712 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800071e:	f7ff ffe5 	bl	80006ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000722:	f009 f947 	bl	80099b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000726:	f7ff fead 	bl	8000484 <main>
  bx lr
 800072a:	4770      	bx	lr
  ldr r3, =_sidata
 800072c:	08009bf8 	.word	0x08009bf8
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000734:	20000184 	.word	0x20000184
  ldr r2, =_sbss
 8000738:	20000184 	.word	0x20000184
  ldr r3, = _ebss
 800073c:	200039a0 	.word	0x200039a0

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>
	...

08000744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_Init+0x28>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_Init+0x28>)
 800074e:	f043 0310 	orr.w	r3, r3, #16
 8000752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 f923 	bl	80009a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075a:	200f      	movs	r0, #15
 800075c:	f000 f808 	bl	8000770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000760:	f7ff ff60 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40022000 	.word	0x40022000

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_InitTick+0x54>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_InitTick+0x58>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	fbb3 f3f1 	udiv	r3, r3, r1
 800078a:	fbb2 f3f3 	udiv	r3, r2, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f93b 	bl	8000a0a <HAL_SYSTICK_Config>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e00e      	b.n	80007bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d80a      	bhi.n	80007ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a4:	2200      	movs	r2, #0
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f000 f903 	bl	80009b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b0:	4a06      	ldr	r2, [pc, #24]	; (80007cc <HAL_InitTick+0x5c>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e000      	b.n	80007bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000004 	.word	0x20000004
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	20000008 	.word	0x20000008

080007d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x1c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x20>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <HAL_IncTick+0x20>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	2000000c 	.word	0x2000000c
 80007f0:	2000312c 	.word	0x2000312c

080007f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <HAL_GetTick+0x10>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	2000312c 	.word	0x2000312c

08000808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083a:	4a04      	ldr	r2, [pc, #16]	; (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	60d3      	str	r3, [r2, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <__NVIC_GetPriorityGrouping+0x18>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	f003 0307 	and.w	r3, r3, #7
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	2b00      	cmp	r3, #0
 800087c:	db0b      	blt.n	8000896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	f003 021f 	and.w	r2, r3, #31
 8000884:	4906      	ldr	r1, [pc, #24]	; (80008a0 <__NVIC_EnableIRQ+0x34>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	2001      	movs	r0, #1
 800088e:	fa00 f202 	lsl.w	r2, r0, r2
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	e000e100 	.word	0xe000e100

080008a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db0a      	blt.n	80008ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	490c      	ldr	r1, [pc, #48]	; (80008f0 <__NVIC_SetPriority+0x4c>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	0112      	lsls	r2, r2, #4
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	440b      	add	r3, r1
 80008c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008cc:	e00a      	b.n	80008e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4908      	ldr	r1, [pc, #32]	; (80008f4 <__NVIC_SetPriority+0x50>)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	3b04      	subs	r3, #4
 80008dc:	0112      	lsls	r2, r2, #4
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	440b      	add	r3, r1
 80008e2:	761a      	strb	r2, [r3, #24]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e100 	.word	0xe000e100
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	f1c3 0307 	rsb	r3, r3, #7
 8000912:	2b04      	cmp	r3, #4
 8000914:	bf28      	it	cs
 8000916:	2304      	movcs	r3, #4
 8000918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3304      	adds	r3, #4
 800091e:	2b06      	cmp	r3, #6
 8000920:	d902      	bls.n	8000928 <NVIC_EncodePriority+0x30>
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3b03      	subs	r3, #3
 8000926:	e000      	b.n	800092a <NVIC_EncodePriority+0x32>
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	f04f 32ff 	mov.w	r2, #4294967295
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43da      	mvns	r2, r3
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	401a      	ands	r2, r3
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000940:	f04f 31ff 	mov.w	r1, #4294967295
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	43d9      	mvns	r1, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	4313      	orrs	r3, r2
         );
}
 8000952:	4618      	mov	r0, r3
 8000954:	3724      	adds	r7, #36	; 0x24
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800096c:	d301      	bcc.n	8000972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096e:	2301      	movs	r3, #1
 8000970:	e00f      	b.n	8000992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <SysTick_Config+0x40>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097a:	210f      	movs	r1, #15
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f7ff ff90 	bl	80008a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <SysTick_Config+0x40>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <SysTick_Config+0x40>)
 800098c:	2207      	movs	r2, #7
 800098e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	e000e010 	.word	0xe000e010

080009a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff ff2d 	bl	8000808 <__NVIC_SetPriorityGrouping>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c8:	f7ff ff42 	bl	8000850 <__NVIC_GetPriorityGrouping>
 80009cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	6978      	ldr	r0, [r7, #20]
 80009d4:	f7ff ff90 	bl	80008f8 <NVIC_EncodePriority>
 80009d8:	4602      	mov	r2, r0
 80009da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff5f 	bl	80008a4 <__NVIC_SetPriority>
}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff35 	bl	800086c <__NVIC_EnableIRQ>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffa2 	bl	800095c <SysTick_Config>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b08b      	sub	sp, #44	; 0x2c
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a36:	e127      	b.n	8000c88 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	69fa      	ldr	r2, [r7, #28]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	f040 8116 	bne.w	8000c82 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2b12      	cmp	r3, #18
 8000a5c:	d034      	beq.n	8000ac8 <HAL_GPIO_Init+0xa4>
 8000a5e:	2b12      	cmp	r3, #18
 8000a60:	d80d      	bhi.n	8000a7e <HAL_GPIO_Init+0x5a>
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d02b      	beq.n	8000abe <HAL_GPIO_Init+0x9a>
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d804      	bhi.n	8000a74 <HAL_GPIO_Init+0x50>
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d031      	beq.n	8000ad2 <HAL_GPIO_Init+0xae>
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d01c      	beq.n	8000aac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a72:	e048      	b.n	8000b06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	d043      	beq.n	8000b00 <HAL_GPIO_Init+0xdc>
 8000a78:	2b11      	cmp	r3, #17
 8000a7a:	d01b      	beq.n	8000ab4 <HAL_GPIO_Init+0x90>
          break;
 8000a7c:	e043      	b.n	8000b06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a7e:	4a89      	ldr	r2, [pc, #548]	; (8000ca4 <HAL_GPIO_Init+0x280>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d026      	beq.n	8000ad2 <HAL_GPIO_Init+0xae>
 8000a84:	4a87      	ldr	r2, [pc, #540]	; (8000ca4 <HAL_GPIO_Init+0x280>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d806      	bhi.n	8000a98 <HAL_GPIO_Init+0x74>
 8000a8a:	4a87      	ldr	r2, [pc, #540]	; (8000ca8 <HAL_GPIO_Init+0x284>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d020      	beq.n	8000ad2 <HAL_GPIO_Init+0xae>
 8000a90:	4a86      	ldr	r2, [pc, #536]	; (8000cac <HAL_GPIO_Init+0x288>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d01d      	beq.n	8000ad2 <HAL_GPIO_Init+0xae>
          break;
 8000a96:	e036      	b.n	8000b06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a98:	4a85      	ldr	r2, [pc, #532]	; (8000cb0 <HAL_GPIO_Init+0x28c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d019      	beq.n	8000ad2 <HAL_GPIO_Init+0xae>
 8000a9e:	4a85      	ldr	r2, [pc, #532]	; (8000cb4 <HAL_GPIO_Init+0x290>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d016      	beq.n	8000ad2 <HAL_GPIO_Init+0xae>
 8000aa4:	4a84      	ldr	r2, [pc, #528]	; (8000cb8 <HAL_GPIO_Init+0x294>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d013      	beq.n	8000ad2 <HAL_GPIO_Init+0xae>
          break;
 8000aaa:	e02c      	b.n	8000b06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	623b      	str	r3, [r7, #32]
          break;
 8000ab2:	e028      	b.n	8000b06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	623b      	str	r3, [r7, #32]
          break;
 8000abc:	e023      	b.n	8000b06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	3308      	adds	r3, #8
 8000ac4:	623b      	str	r3, [r7, #32]
          break;
 8000ac6:	e01e      	b.n	8000b06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	330c      	adds	r3, #12
 8000ace:	623b      	str	r3, [r7, #32]
          break;
 8000ad0:	e019      	b.n	8000b06 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d102      	bne.n	8000ae0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ada:	2304      	movs	r3, #4
 8000adc:	623b      	str	r3, [r7, #32]
          break;
 8000ade:	e012      	b.n	8000b06 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d105      	bne.n	8000af4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	611a      	str	r2, [r3, #16]
          break;
 8000af2:	e008      	b.n	8000b06 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af4:	2308      	movs	r3, #8
 8000af6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	69fa      	ldr	r2, [r7, #28]
 8000afc:	615a      	str	r2, [r3, #20]
          break;
 8000afe:	e002      	b.n	8000b06 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
          break;
 8000b04:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	2bff      	cmp	r3, #255	; 0xff
 8000b0a:	d801      	bhi.n	8000b10 <HAL_GPIO_Init+0xec>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	e001      	b.n	8000b14 <HAL_GPIO_Init+0xf0>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3304      	adds	r3, #4
 8000b14:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	2bff      	cmp	r3, #255	; 0xff
 8000b1a:	d802      	bhi.n	8000b22 <HAL_GPIO_Init+0xfe>
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	e002      	b.n	8000b28 <HAL_GPIO_Init+0x104>
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	3b08      	subs	r3, #8
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	210f      	movs	r1, #15
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	401a      	ands	r2, r3
 8000b3a:	6a39      	ldr	r1, [r7, #32]
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	431a      	orrs	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f000 8096 	beq.w	8000c82 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b56:	4b59      	ldr	r3, [pc, #356]	; (8000cbc <HAL_GPIO_Init+0x298>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	4a58      	ldr	r2, [pc, #352]	; (8000cbc <HAL_GPIO_Init+0x298>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6193      	str	r3, [r2, #24]
 8000b62:	4b56      	ldr	r3, [pc, #344]	; (8000cbc <HAL_GPIO_Init+0x298>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b6e:	4a54      	ldr	r2, [pc, #336]	; (8000cc0 <HAL_GPIO_Init+0x29c>)
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	3302      	adds	r3, #2
 8000b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7e:	f003 0303 	and.w	r3, r3, #3
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	220f      	movs	r2, #15
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a4b      	ldr	r2, [pc, #300]	; (8000cc4 <HAL_GPIO_Init+0x2a0>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d013      	beq.n	8000bc2 <HAL_GPIO_Init+0x19e>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a4a      	ldr	r2, [pc, #296]	; (8000cc8 <HAL_GPIO_Init+0x2a4>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d00d      	beq.n	8000bbe <HAL_GPIO_Init+0x19a>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a49      	ldr	r2, [pc, #292]	; (8000ccc <HAL_GPIO_Init+0x2a8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d007      	beq.n	8000bba <HAL_GPIO_Init+0x196>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a48      	ldr	r2, [pc, #288]	; (8000cd0 <HAL_GPIO_Init+0x2ac>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d101      	bne.n	8000bb6 <HAL_GPIO_Init+0x192>
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	e006      	b.n	8000bc4 <HAL_GPIO_Init+0x1a0>
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	e004      	b.n	8000bc4 <HAL_GPIO_Init+0x1a0>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	e002      	b.n	8000bc4 <HAL_GPIO_Init+0x1a0>
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <HAL_GPIO_Init+0x1a0>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bc6:	f002 0203 	and.w	r2, r2, #3
 8000bca:	0092      	lsls	r2, r2, #2
 8000bcc:	4093      	lsls	r3, r2
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bd4:	493a      	ldr	r1, [pc, #232]	; (8000cc0 <HAL_GPIO_Init+0x29c>)
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3302      	adds	r3, #2
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d006      	beq.n	8000bfc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bee:	4b39      	ldr	r3, [pc, #228]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	4938      	ldr	r1, [pc, #224]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	600b      	str	r3, [r1, #0]
 8000bfa:	e006      	b.n	8000c0a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bfc:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	4933      	ldr	r1, [pc, #204]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000c06:	4013      	ands	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d006      	beq.n	8000c24 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c16:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	492e      	ldr	r1, [pc, #184]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	604b      	str	r3, [r1, #4]
 8000c22:	e006      	b.n	8000c32 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c24:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	4929      	ldr	r1, [pc, #164]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d006      	beq.n	8000c4c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	4924      	ldr	r1, [pc, #144]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	608b      	str	r3, [r1, #8]
 8000c4a:	e006      	b.n	8000c5a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	491f      	ldr	r1, [pc, #124]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000c56:	4013      	ands	r3, r2
 8000c58:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d006      	beq.n	8000c74 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	491a      	ldr	r1, [pc, #104]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60cb      	str	r3, [r1, #12]
 8000c72:	e006      	b.n	8000c82 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	4915      	ldr	r1, [pc, #84]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000c7e:	4013      	ands	r3, r2
 8000c80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	3301      	adds	r3, #1
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f47f aed0 	bne.w	8000a38 <HAL_GPIO_Init+0x14>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	372c      	adds	r7, #44	; 0x2c
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	10210000 	.word	0x10210000
 8000ca8:	10110000 	.word	0x10110000
 8000cac:	10120000 	.word	0x10120000
 8000cb0:	10310000 	.word	0x10310000
 8000cb4:	10320000 	.word	0x10320000
 8000cb8:	10220000 	.word	0x10220000
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010000 	.word	0x40010000
 8000cc4:	40010800 	.word	0x40010800
 8000cc8:	40010c00 	.word	0x40010c00
 8000ccc:	40011000 	.word	0x40011000
 8000cd0:	40011400 	.word	0x40011400
 8000cd4:	40010400 	.word	0x40010400

08000cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ce8:	787b      	ldrb	r3, [r7, #1]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cee:	887a      	ldrh	r2, [r7, #2]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cf4:	e003      	b.n	8000cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	041a      	lsls	r2, r3, #16
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	611a      	str	r2, [r3, #16]
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d1a:	887a      	ldrh	r2, [r7, #2]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	041a      	lsls	r2, r3, #16
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43d9      	mvns	r1, r3
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	400b      	ands	r3, r1
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	611a      	str	r2, [r3, #16]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3c:	b08b      	sub	sp, #44	; 0x2c
 8000d3e:	af06      	add	r7, sp, #24
 8000d40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e0fd      	b.n	8000f48 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d106      	bne.n	8000d66 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f008 fb7d 	bl	8009460 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 f82a 	bl	8002dcc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	687e      	ldr	r6, [r7, #4]
 8000d80:	466d      	mov	r5, sp
 8000d82:	f106 0410 	add.w	r4, r6, #16
 8000d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	602b      	str	r3, [r5, #0]
 8000d8e:	1d33      	adds	r3, r6, #4
 8000d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d92:	6838      	ldr	r0, [r7, #0]
 8000d94:	f001 fff4 	bl	8002d80 <USB_CoreInit>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2202      	movs	r2, #2
 8000da2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e0ce      	b.n	8000f48 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 f825 	bl	8002e00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	e04c      	b.n	8000e56 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	440b      	add	r3, r1
 8000dcc:	3301      	adds	r3, #1
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	7bfa      	ldrb	r2, [r7, #15]
 8000de4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000de6:	7bfa      	ldrb	r2, [r7, #15]
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	b298      	uxth	r0, r3
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	440b      	add	r3, r1
 8000df8:	3336      	adds	r3, #54	; 0x36
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	440b      	add	r3, r1
 8000e0e:	3303      	adds	r3, #3
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e14:	7bfa      	ldrb	r2, [r7, #15]
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	440b      	add	r3, r1
 8000e22:	3338      	adds	r3, #56	; 0x38
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e28:	7bfa      	ldrb	r2, [r7, #15]
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	440b      	add	r3, r1
 8000e36:	333c      	adds	r3, #60	; 0x3c
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e3c:	7bfa      	ldrb	r2, [r7, #15]
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	440b      	add	r3, r1
 8000e4a:	3340      	adds	r3, #64	; 0x40
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	3301      	adds	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	7bfa      	ldrb	r2, [r7, #15]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d3ad      	bcc.n	8000dbc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e044      	b.n	8000ef0 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e66:	7bfa      	ldrb	r2, [r7, #15]
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	440b      	add	r3, r1
 8000e74:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e7c:	7bfa      	ldrb	r2, [r7, #15]
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	440b      	add	r3, r1
 8000e8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e92:	7bfa      	ldrb	r2, [r7, #15]
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ea8:	7bfa      	ldrb	r2, [r7, #15]
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	440b      	add	r3, r1
 8000eb6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	440b      	add	r3, r1
 8000ecc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ed4:	7bfa      	ldrb	r2, [r7, #15]
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	440b      	add	r3, r1
 8000ee2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	3301      	adds	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d3b5      	bcc.n	8000e66 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	687e      	ldr	r6, [r7, #4]
 8000f02:	466d      	mov	r5, sp
 8000f04:	f106 0410 	add.w	r4, r6, #16
 8000f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f0c:	6823      	ldr	r3, [r4, #0]
 8000f0e:	602b      	str	r3, [r5, #0]
 8000f10:	1d33      	adds	r3, r6, #4
 8000f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f14:	6838      	ldr	r0, [r7, #0]
 8000f16:	f001 ff7f 	bl	8002e18 <USB_DevInit>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d005      	beq.n	8000f2c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2202      	movs	r2, #2
 8000f24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e00d      	b.n	8000f48 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 ff19 	bl	8004d78 <USB_DevDisconnect>

  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d101      	bne.n	8000f66 <HAL_PCD_Start+0x16>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e016      	b.n	8000f94 <HAL_PCD_Start+0x44>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 ff14 	bl	8002da0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000f78:	2101      	movs	r1, #1
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f008 fce3 	bl	8009946 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 feed 	bl	8004d64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 feef 	bl	8004d8c <USB_ReadInterrupts>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fb8:	d102      	bne.n	8000fc0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 fb61 	bl	8001682 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f003 fee1 	bl	8004d8c <USB_ReadInterrupts>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fd4:	d112      	bne.n	8000ffc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fe8:	b292      	uxth	r2, r2
 8000fea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f008 fab1 	bl	8009556 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f925 	bl	8001246 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f003 fec3 	bl	8004d8c <USB_ReadInterrupts>
 8001006:	4603      	mov	r3, r0
 8001008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001010:	d10b      	bne.n	800102a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001024:	b292      	uxth	r2, r2
 8001026:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f003 feac 	bl	8004d8c <USB_ReadInterrupts>
 8001034:	4603      	mov	r3, r0
 8001036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800103a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800103e:	d10b      	bne.n	8001058 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001048:	b29a      	uxth	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001052:	b292      	uxth	r2, r2
 8001054:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f003 fe95 	bl	8004d8c <USB_ReadInterrupts>
 8001062:	4603      	mov	r3, r0
 8001064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800106c:	d126      	bne.n	80010bc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001076:	b29a      	uxth	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 0204 	bic.w	r2, r2, #4
 8001080:	b292      	uxth	r2, r2
 8001082:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800108e:	b29a      	uxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0208 	bic.w	r2, r2, #8
 8001098:	b292      	uxth	r2, r2
 800109a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f008 fa92 	bl	80095c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010b6:	b292      	uxth	r2, r2
 80010b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 fe63 	bl	8004d8c <USB_ReadInterrupts>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010d0:	f040 8084 	bne.w	80011dc <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	77fb      	strb	r3, [r7, #31]
 80010d8:	e011      	b.n	80010fe <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	7ffb      	ldrb	r3, [r7, #31]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	441a      	add	r2, r3
 80010e6:	7ffb      	ldrb	r3, [r7, #31]
 80010e8:	8812      	ldrh	r2, [r2, #0]
 80010ea:	b292      	uxth	r2, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	f107 0120 	add.w	r1, r7, #32
 80010f2:	440b      	add	r3, r1
 80010f4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80010f8:	7ffb      	ldrb	r3, [r7, #31]
 80010fa:	3301      	adds	r3, #1
 80010fc:	77fb      	strb	r3, [r7, #31]
 80010fe:	7ffb      	ldrb	r3, [r7, #31]
 8001100:	2b07      	cmp	r3, #7
 8001102:	d9ea      	bls.n	80010da <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800110c:	b29a      	uxth	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0201 	orr.w	r2, r2, #1
 8001116:	b292      	uxth	r2, r2
 8001118:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001124:	b29a      	uxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0201 	bic.w	r2, r2, #1
 800112e:	b292      	uxth	r2, r2
 8001130:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001134:	bf00      	nop
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800113e:	b29b      	uxth	r3, r3
 8001140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f6      	beq.n	8001136 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800115a:	b292      	uxth	r2, r2
 800115c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	77fb      	strb	r3, [r7, #31]
 8001164:	e010      	b.n	8001188 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001166:	7ffb      	ldrb	r3, [r7, #31]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	4611      	mov	r1, r2
 800116e:	7ffa      	ldrb	r2, [r7, #31]
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	440a      	add	r2, r1
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	f107 0120 	add.w	r1, r7, #32
 800117a:	440b      	add	r3, r1
 800117c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001180:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001182:	7ffb      	ldrb	r3, [r7, #31]
 8001184:	3301      	adds	r3, #1
 8001186:	77fb      	strb	r3, [r7, #31]
 8001188:	7ffb      	ldrb	r3, [r7, #31]
 800118a:	2b07      	cmp	r3, #7
 800118c:	d9eb      	bls.n	8001166 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001196:	b29a      	uxth	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0208 	orr.w	r2, r2, #8
 80011a0:	b292      	uxth	r2, r2
 80011a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011b8:	b292      	uxth	r2, r2
 80011ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0204 	orr.w	r2, r2, #4
 80011d0:	b292      	uxth	r2, r2
 80011d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f008 f9dc 	bl	8009594 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 fdd3 	bl	8004d8c <USB_ReadInterrupts>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011f0:	d10e      	bne.n	8001210 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001204:	b292      	uxth	r2, r2
 8001206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f008 f995 	bl	800953a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fdb9 	bl	8004d8c <USB_ReadInterrupts>
 800121a:	4603      	mov	r3, r0
 800121c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001224:	d10b      	bne.n	800123e <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800122e:	b29a      	uxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001238:	b292      	uxth	r2, r2
 800123a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800123e:	bf00      	nop
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	460b      	mov	r3, r1
 8001250:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_PCD_SetAddress+0x1a>
 800125c:	2302      	movs	r3, #2
 800125e:	e013      	b.n	8001288 <HAL_PCD_SetAddress+0x42>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	78fa      	ldrb	r2, [r7, #3]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fd60 	bl	8004d3e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	4608      	mov	r0, r1
 800129a:	4611      	mov	r1, r2
 800129c:	461a      	mov	r2, r3
 800129e:	4603      	mov	r3, r0
 80012a0:	70fb      	strb	r3, [r7, #3]
 80012a2:	460b      	mov	r3, r1
 80012a4:	803b      	strh	r3, [r7, #0]
 80012a6:	4613      	mov	r3, r2
 80012a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da0e      	bge.n	80012d4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012b6:	78fb      	ldrb	r3, [r7, #3]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2201      	movs	r2, #1
 80012d0:	705a      	strb	r2, [r3, #1]
 80012d2:	e00e      	b.n	80012f2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	f003 0207 	and.w	r2, r3, #7
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80012fe:	883a      	ldrh	r2, [r7, #0]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	78ba      	ldrb	r2, [r7, #2]
 8001308:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	785b      	ldrb	r3, [r3, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d004      	beq.n	800131c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b29a      	uxth	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800131c:	78bb      	ldrb	r3, [r7, #2]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d102      	bne.n	8001328 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_PCD_EP_Open+0xa6>
 8001332:	2302      	movs	r3, #2
 8001334:	e00e      	b.n	8001354 <HAL_PCD_EP_Open+0xc4>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68f9      	ldr	r1, [r7, #12]
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fd87 	bl	8002e58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001352:	7afb      	ldrb	r3, [r7, #11]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800136c:	2b00      	cmp	r3, #0
 800136e:	da0e      	bge.n	800138e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2201      	movs	r2, #1
 800138a:	705a      	strb	r2, [r3, #1]
 800138c:	e00e      	b.n	80013ac <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	f003 0207 	and.w	r2, r3, #7
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d101      	bne.n	80013c6 <HAL_PCD_EP_Close+0x6a>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e00e      	b.n	80013e4 <HAL_PCD_EP_Close+0x88>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68f9      	ldr	r1, [r7, #12]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 f8a9 	bl	800352c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	460b      	mov	r3, r1
 80013fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013fc:	7afb      	ldrb	r3, [r7, #11]
 80013fe:	f003 0207 	and.w	r2, r3, #7
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2200      	movs	r2, #0
 800142a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800142c:	7afb      	ldrb	r3, [r7, #11]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	b2da      	uxtb	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6979      	ldr	r1, [r7, #20]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 fa5b 	bl	8003904 <USB_EPStartXfer>
 800144e:	e005      	b.n	800145c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6979      	ldr	r1, [r7, #20]
 8001456:	4618      	mov	r0, r3
 8001458:	f002 fa54 	bl	8003904 <USB_EPStartXfer>
  }

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	f003 0207 	and.w	r2, r3, #7
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001488:	681b      	ldr	r3, [r3, #0]
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	460b      	mov	r3, r1
 80014a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014a4:	7afb      	ldrb	r3, [r7, #11]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2201      	movs	r2, #1
 80014de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014e0:	7afb      	ldrb	r3, [r7, #11]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014ec:	7afb      	ldrb	r3, [r7, #11]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6979      	ldr	r1, [r7, #20]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 fa01 	bl	8003904 <USB_EPStartXfer>
 8001502:	e005      	b.n	8001510 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6979      	ldr	r1, [r7, #20]
 800150a:	4618      	mov	r0, r3
 800150c:	f002 f9fa 	bl	8003904 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	f003 0207 	and.w	r2, r3, #7
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	d901      	bls.n	8001538 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e04c      	b.n	80015d2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800153c:	2b00      	cmp	r3, #0
 800153e:	da0e      	bge.n	800155e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2201      	movs	r2, #1
 800155a:	705a      	strb	r2, [r3, #1]
 800155c:	e00c      	b.n	8001578 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2201      	movs	r2, #1
 800157c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	b2da      	uxtb	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_PCD_EP_SetStall+0x7e>
 8001594:	2302      	movs	r3, #2
 8001596:	e01c      	b.n	80015d2 <HAL_PCD_EP_SetStall+0xb8>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68f9      	ldr	r1, [r7, #12]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 facc 	bl	8004b44 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d108      	bne.n	80015c8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4610      	mov	r0, r2
 80015c4:	f003 fbf1 	bl	8004daa <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b084      	sub	sp, #16
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	f003 020f 	and.w	r2, r3, #15
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d901      	bls.n	80015f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e040      	b.n	800167a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	da0e      	bge.n	800161e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	705a      	strb	r2, [r3, #1]
 800161c:	e00e      	b.n	800163c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	f003 0207 	and.w	r2, r3, #7
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	b2da      	uxtb	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_PCD_EP_ClrStall+0x82>
 8001658:	2302      	movs	r3, #2
 800165a:	e00e      	b.n	800167a <HAL_PCD_EP_ClrStall+0xa0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68f9      	ldr	r1, [r7, #12]
 800166a:	4618      	mov	r0, r3
 800166c:	f003 faba 	bl	8004be4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b08e      	sub	sp, #56	; 0x38
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800168a:	e2df      	b.n	8001c4c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001694:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001696:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80016a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f040 8158 	bne.w	800195c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d152      	bne.n	800175c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80016c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016c6:	81fb      	strh	r3, [r7, #14]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	89fb      	ldrh	r3, [r7, #14]
 80016ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3328      	adds	r3, #40	; 0x28
 80016de:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	3302      	adds	r3, #2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	441a      	add	r2, r3
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800171a:	2100      	movs	r1, #0
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f007 fef2 	bl	8009506 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 828e 	beq.w	8001c4c <PCD_EP_ISR_Handler+0x5ca>
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f040 8289 	bne.w	8001c4c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001746:	b2da      	uxtb	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	b292      	uxth	r2, r2
 800174e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800175a:	e277      	b.n	8001c4c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800176c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800176e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001772:	2b00      	cmp	r3, #0
 8001774:	d034      	beq.n	80017e0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800177e:	b29b      	uxth	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4413      	add	r3, r2
 800178a:	3306      	adds	r3, #6
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	4413      	add	r3, r2
 8001794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	f003 fb47 	bl	8004e48 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017c6:	4013      	ands	r3, r2
 80017c8:	823b      	strh	r3, [r7, #16]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	8a3a      	ldrh	r2, [r7, #16]
 80017d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017d4:	b292      	uxth	r2, r2
 80017d6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f007 fe67 	bl	80094ac <HAL_PCD_SetupStageCallback>
 80017de:	e235      	b.n	8001c4c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017e0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f280 8231 	bge.w	8001c4c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017f6:	4013      	ands	r3, r2
 80017f8:	83bb      	strh	r3, [r7, #28]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	8bba      	ldrh	r2, [r7, #28]
 8001800:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001804:	b292      	uxth	r2, r2
 8001806:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001810:	b29b      	uxth	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4413      	add	r3, r2
 800181c:	3306      	adds	r3, #6
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	4413      	add	r3, r2
 8001826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d019      	beq.n	8001870 <PCD_EP_ISR_Handler+0x1ee>
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d015      	beq.n	8001870 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	6959      	ldr	r1, [r3, #20]
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001854:	b29b      	uxth	r3, r3
 8001856:	f003 faf7 	bl	8004e48 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	441a      	add	r2, r3
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001868:	2100      	movs	r1, #0
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f007 fe30 	bl	80094d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800187e:	b29b      	uxth	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4413      	add	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d112      	bne.n	80018be <PCD_EP_ISR_Handler+0x23c>
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	b29b      	uxth	r3, r3
 800189e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	801a      	strh	r2, [r3, #0]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	801a      	strh	r2, [r3, #0]
 80018bc:	e02f      	b.n	800191e <PCD_EP_ISR_Handler+0x29c>
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2b3e      	cmp	r3, #62	; 0x3e
 80018c4:	d813      	bhi.n	80018ee <PCD_EP_ISR_Handler+0x26c>
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	085b      	lsrs	r3, r3, #1
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <PCD_EP_ISR_Handler+0x25e>
 80018da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018dc:	3301      	adds	r3, #1
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
 80018e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	029b      	lsls	r3, r3, #10
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	801a      	strh	r2, [r3, #0]
 80018ec:	e017      	b.n	800191e <PCD_EP_ISR_Handler+0x29c>
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	633b      	str	r3, [r7, #48]	; 0x30
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f003 031f 	and.w	r3, r3, #31
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <PCD_EP_ISR_Handler+0x286>
 8001902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001904:	3b01      	subs	r3, #1
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
 8001908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190a:	b29b      	uxth	r3, r3
 800190c:	029b      	lsls	r3, r3, #10
 800190e:	b29b      	uxth	r3, r3
 8001910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001918:	b29a      	uxth	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800192a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800192e:	827b      	strh	r3, [r7, #18]
 8001930:	8a7b      	ldrh	r3, [r7, #18]
 8001932:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001936:	827b      	strh	r3, [r7, #18]
 8001938:	8a7b      	ldrh	r3, [r7, #18]
 800193a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800193e:	827b      	strh	r3, [r7, #18]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	8a7b      	ldrh	r3, [r7, #18]
 8001946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800194a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800194e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001956:	b29b      	uxth	r3, r3
 8001958:	8013      	strh	r3, [r2, #0]
 800195a:	e177      	b.n	8001c4c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800196e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001972:	2b00      	cmp	r3, #0
 8001974:	f280 80ea 	bge.w	8001b4c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	b29a      	uxth	r2, r3
 800198a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800198e:	4013      	ands	r3, r2
 8001990:	853b      	strh	r3, [r7, #40]	; 0x28
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019a6:	b292      	uxth	r2, r2
 80019a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	7b1b      	ldrb	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d122      	bne.n	8001a0e <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4413      	add	r3, r2
 80019dc:	3306      	adds	r3, #6
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80019f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8087 	beq.w	8001b08 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	6959      	ldr	r1, [r3, #20]
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	88da      	ldrh	r2, [r3, #6]
 8001a06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a08:	f003 fa1e 	bl	8004e48 <USB_ReadPMA>
 8001a0c:	e07c      	b.n	8001b08 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	78db      	ldrb	r3, [r3, #3]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d108      	bne.n	8001a28 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a18:	461a      	mov	r2, r3
 8001a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f923 	bl	8001c68 <HAL_PCD_EP_DB_Receive>
 8001a22:	4603      	mov	r3, r0
 8001a24:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001a26:	e06f      	b.n	8001b08 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a42:	847b      	strh	r3, [r7, #34]	; 0x22
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	441a      	add	r2, r3
 8001a52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d021      	beq.n	8001ac6 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	3302      	adds	r3, #2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aaa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001aac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d02a      	beq.n	8001b08 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	6959      	ldr	r1, [r3, #20]
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	891a      	ldrh	r2, [r3, #8]
 8001abe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ac0:	f003 f9c2 	bl	8004e48 <USB_ReadPMA>
 8001ac4:	e020      	b.n	8001b08 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	3306      	adds	r3, #6
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aee:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001af0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d008      	beq.n	8001b08 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	6959      	ldr	r1, [r3, #20]
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	895a      	ldrh	r2, [r3, #10]
 8001b02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b04:	f003 f9a0 	bl	8004e48 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	69da      	ldr	r2, [r3, #28]
 8001b0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b0e:	441a      	add	r2, r3
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b1a:	441a      	add	r2, r3
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <PCD_EP_ISR_Handler+0x4b0>
 8001b28:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d206      	bcs.n	8001b40 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	4619      	mov	r1, r3
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f007 fcc9 	bl	80094d0 <HAL_PCD_DataOutStageCallback>
 8001b3e:	e005      	b.n	8001b4c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 fedc 	bl	8003904 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d07a      	beq.n	8001c4c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b84:	843b      	strh	r3, [r7, #32]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	441a      	add	r2, r3
 8001b94:	8c3b      	ldrh	r3, [r7, #32]
 8001b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	78db      	ldrb	r3, [r3, #3]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d108      	bne.n	8001bbc <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d146      	bne.n	8001c40 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001bb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d141      	bne.n	8001c40 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001be4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	8bfb      	ldrh	r3, [r7, #30]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d906      	bls.n	8001bfe <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	699a      	ldr	r2, [r3, #24]
 8001bf4:	8bfb      	ldrh	r3, [r7, #30]
 8001bf6:	1ad2      	subs	r2, r2, r3
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	619a      	str	r2, [r3, #24]
 8001bfc:	e002      	b.n	8001c04 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d106      	bne.n	8001c1a <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f007 fc77 	bl	8009506 <HAL_PCD_DataInStageCallback>
 8001c18:	e018      	b.n	8001c4c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	8bfb      	ldrh	r3, [r7, #30]
 8001c20:	441a      	add	r2, r3
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	69da      	ldr	r2, [r3, #28]
 8001c2a:	8bfb      	ldrh	r3, [r7, #30]
 8001c2c:	441a      	add	r2, r3
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 fe63 	bl	8003904 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001c3e:	e005      	b.n	8001c4c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001c40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c42:	461a      	mov	r2, r3
 8001c44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f91b 	bl	8001e82 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f6ff ad17 	blt.w	800168c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3738      	adds	r7, #56	; 0x38
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d07e      	beq.n	8001d7e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	3302      	adds	r3, #2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ca8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	8b7b      	ldrh	r3, [r7, #26]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d306      	bcc.n	8001cc2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	8b7b      	ldrh	r3, [r7, #26]
 8001cba:	1ad2      	subs	r2, r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	619a      	str	r2, [r3, #24]
 8001cc0:	e002      	b.n	8001cc8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d123      	bne.n	8001d18 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cea:	833b      	strh	r3, [r7, #24]
 8001cec:	8b3b      	ldrh	r3, [r7, #24]
 8001cee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cf2:	833b      	strh	r3, [r7, #24]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	441a      	add	r2, r3
 8001d02:	8b3b      	ldrh	r3, [r7, #24]
 8001d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d01f      	beq.n	8001d62 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d3c:	82fb      	strh	r3, [r7, #22]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	441a      	add	r2, r3
 8001d4c:	8afb      	ldrh	r3, [r7, #22]
 8001d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d62:	8b7b      	ldrh	r3, [r7, #26]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8087 	beq.w	8001e78 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	6959      	ldr	r1, [r3, #20]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	891a      	ldrh	r2, [r3, #8]
 8001d76:	8b7b      	ldrh	r3, [r7, #26]
 8001d78:	f003 f866 	bl	8004e48 <USB_ReadPMA>
 8001d7c:	e07c      	b.n	8001e78 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	3306      	adds	r3, #6
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	699a      	ldr	r2, [r3, #24]
 8001dac:	8b7b      	ldrh	r3, [r7, #26]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d306      	bcc.n	8001dc0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	8b7b      	ldrh	r3, [r7, #26]
 8001db8:	1ad2      	subs	r2, r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	619a      	str	r2, [r3, #24]
 8001dbe:	e002      	b.n	8001dc6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d123      	bne.n	8001e16 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de8:	83fb      	strh	r3, [r7, #30]
 8001dea:	8bfb      	ldrh	r3, [r7, #30]
 8001dec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001df0:	83fb      	strh	r3, [r7, #30]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	441a      	add	r2, r3
 8001e00:	8bfb      	ldrh	r3, [r7, #30]
 8001e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d11f      	bne.n	8001e60 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3a:	83bb      	strh	r3, [r7, #28]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	441a      	add	r2, r3
 8001e4a:	8bbb      	ldrh	r3, [r7, #28]
 8001e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e60:	8b7b      	ldrh	r3, [r7, #26]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	6959      	ldr	r1, [r3, #20]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	895a      	ldrh	r2, [r3, #10]
 8001e72:	8b7b      	ldrh	r3, [r7, #26]
 8001e74:	f002 ffe8 	bl	8004e48 <USB_ReadPMA>
    }
  }

  return count;
 8001e78:	8b7b      	ldrh	r3, [r7, #26]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b092      	sub	sp, #72	; 0x48
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8132 	beq.w	8002100 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ec4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d906      	bls.n	8001ede <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	699a      	ldr	r2, [r3, #24]
 8001ed4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ed6:	1ad2      	subs	r2, r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	619a      	str	r2, [r3, #24]
 8001edc:	e002      	b.n	8001ee4 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d12c      	bne.n	8001f46 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f007 fb07 	bl	8009506 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 822f 	beq.w	8002362 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1e:	827b      	strh	r3, [r7, #18]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	441a      	add	r2, r3
 8001f2e:	8a7b      	ldrh	r3, [r7, #18]
 8001f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	8013      	strh	r3, [r2, #0]
 8001f44:	e20d      	b.n	8002362 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01f      	beq.n	8001f90 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	441a      	add	r2, r3
 8001f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	f040 81e3 	bne.w	8002362 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fa2:	441a      	add	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	69da      	ldr	r2, [r3, #28]
 8001fac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fae:	441a      	add	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d309      	bcc.n	8001fd4 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	6a1a      	ldr	r2, [r3, #32]
 8001fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fcc:	1ad2      	subs	r2, r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	621a      	str	r2, [r3, #32]
 8001fd2:	e014      	b.n	8001ffe <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d106      	bne.n	8001fea <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001fdc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fde:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fe8:	e009      	b.n	8001ffe <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	785b      	ldrb	r3, [r3, #1]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d155      	bne.n	80020b2 <HAL_PCD_EP_DB_Transmit+0x230>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002014:	b29b      	uxth	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	4413      	add	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	011a      	lsls	r2, r3, #4
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	4413      	add	r3, r2
 8002028:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002030:	2b00      	cmp	r3, #0
 8002032:	d112      	bne.n	800205a <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	b29b      	uxth	r3, r3
 800203a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800203e:	b29a      	uxth	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	801a      	strh	r2, [r3, #0]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800204e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002052:	b29a      	uxth	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	801a      	strh	r2, [r3, #0]
 8002058:	e047      	b.n	80020ea <HAL_PCD_EP_DB_Transmit+0x268>
 800205a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205c:	2b3e      	cmp	r3, #62	; 0x3e
 800205e:	d811      	bhi.n	8002084 <HAL_PCD_EP_DB_Transmit+0x202>
 8002060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002062:	085b      	lsrs	r3, r3, #1
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
 8002066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	3301      	adds	r3, #1
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	b29b      	uxth	r3, r3
 800207a:	029b      	lsls	r3, r3, #10
 800207c:	b29a      	uxth	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	801a      	strh	r2, [r3, #0]
 8002082:	e032      	b.n	80020ea <HAL_PCD_EP_DB_Transmit+0x268>
 8002084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
 800208a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <HAL_PCD_EP_DB_Transmit+0x218>
 8002094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002096:	3b01      	subs	r3, #1
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
 800209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209c:	b29b      	uxth	r3, r3
 800209e:	029b      	lsls	r3, r3, #10
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	801a      	strh	r2, [r3, #0]
 80020b0:	e01b      	b.n	80020ea <HAL_PCD_EP_DB_Transmit+0x268>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	785b      	ldrb	r3, [r3, #1]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d117      	bne.n	80020ea <HAL_PCD_EP_DB_Transmit+0x268>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	623b      	str	r3, [r7, #32]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	4413      	add	r3, r2
 80020d0:	623b      	str	r3, [r7, #32]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	011a      	lsls	r2, r3, #4
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	4413      	add	r3, r2
 80020dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	6959      	ldr	r1, [r3, #20]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	891a      	ldrh	r2, [r3, #8]
 80020f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	f002 fe61 	bl	8004dc0 <USB_WritePMA>
 80020fe:	e130      	b.n	8002362 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002108:	b29b      	uxth	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	3306      	adds	r3, #6
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	4413      	add	r3, r2
 800211e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002128:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002130:	429a      	cmp	r2, r3
 8002132:	d306      	bcc.n	8002142 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800213a:	1ad2      	subs	r2, r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	619a      	str	r2, [r3, #24]
 8002140:	e002      	b.n	8002148 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d12c      	bne.n	80021aa <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f007 f9d5 	bl	8009506 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 80fd 	bne.w	8002362 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	b29b      	uxth	r3, r3
 800217a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800217e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002182:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	441a      	add	r2, r3
 8002192:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800219c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	8013      	strh	r3, [r2, #0]
 80021a8:	e0db      	b.n	8002362 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d11f      	bne.n	80021f4 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	441a      	add	r2, r3
 80021de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80021e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	f040 80b1 	bne.w	8002362 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002206:	441a      	add	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002212:	441a      	add	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	6a1a      	ldr	r2, [r3, #32]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	429a      	cmp	r2, r3
 8002222:	d309      	bcc.n	8002238 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	6a1a      	ldr	r2, [r3, #32]
 800222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002230:	1ad2      	subs	r2, r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	621a      	str	r2, [r3, #32]
 8002236:	e014      	b.n	8002262 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002240:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800224c:	e009      	b.n	8002262 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2200      	movs	r2, #0
 8002258:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	637b      	str	r3, [r7, #52]	; 0x34
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	785b      	ldrb	r3, [r3, #1]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d155      	bne.n	800231c <HAL_PCD_EP_DB_Transmit+0x49a>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	647b      	str	r3, [r7, #68]	; 0x44
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002284:	4413      	add	r3, r2
 8002286:	647b      	str	r3, [r7, #68]	; 0x44
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	011a      	lsls	r2, r3, #4
 800228e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002290:	4413      	add	r3, r2
 8002292:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002296:	643b      	str	r3, [r7, #64]	; 0x40
 8002298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229a:	2b00      	cmp	r3, #0
 800229c:	d112      	bne.n	80022c4 <HAL_PCD_EP_DB_Transmit+0x442>
 800229e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ac:	801a      	strh	r2, [r3, #0]
 80022ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022bc:	b29a      	uxth	r2, r3
 80022be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022c0:	801a      	strh	r2, [r3, #0]
 80022c2:	e044      	b.n	800234e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80022c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c6:	2b3e      	cmp	r3, #62	; 0x3e
 80022c8:	d811      	bhi.n	80022ee <HAL_PCD_EP_DB_Transmit+0x46c>
 80022ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_PCD_EP_DB_Transmit+0x45e>
 80022da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022dc:	3301      	adds	r3, #1
 80022de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	029b      	lsls	r3, r3, #10
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ea:	801a      	strh	r2, [r3, #0]
 80022ec:	e02f      	b.n	800234e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80022ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <HAL_PCD_EP_DB_Transmit+0x482>
 80022fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002300:	3b01      	subs	r3, #1
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002306:	b29b      	uxth	r3, r3
 8002308:	029b      	lsls	r3, r3, #10
 800230a:	b29b      	uxth	r3, r3
 800230c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002314:	b29a      	uxth	r2, r3
 8002316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	e018      	b.n	800234e <HAL_PCD_EP_DB_Transmit+0x4cc>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	785b      	ldrb	r3, [r3, #1]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d114      	bne.n	800234e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232c:	b29b      	uxth	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002332:	4413      	add	r3, r2
 8002334:	637b      	str	r3, [r7, #52]	; 0x34
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	011a      	lsls	r2, r3, #4
 800233c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233e:	4413      	add	r3, r2
 8002340:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
 8002346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002348:	b29a      	uxth	r2, r3
 800234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	6959      	ldr	r1, [r3, #20]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	895a      	ldrh	r2, [r3, #10]
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235c:	b29b      	uxth	r3, r3
 800235e:	f002 fd2f 	bl	8004dc0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800237c:	823b      	strh	r3, [r7, #16]
 800237e:	8a3b      	ldrh	r3, [r7, #16]
 8002380:	f083 0310 	eor.w	r3, r3, #16
 8002384:	823b      	strh	r3, [r7, #16]
 8002386:	8a3b      	ldrh	r3, [r7, #16]
 8002388:	f083 0320 	eor.w	r3, r3, #32
 800238c:	823b      	strh	r3, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	441a      	add	r2, r3
 800239c:	8a3b      	ldrh	r3, [r7, #16]
 800239e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3748      	adds	r7, #72	; 0x48
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	817b      	strh	r3, [r7, #10]
 80023ca:	4613      	mov	r3, r2
 80023cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80023ce:	897b      	ldrh	r3, [r7, #10]
 80023d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00b      	beq.n	80023f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023da:	897b      	ldrh	r3, [r7, #10]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4413      	add	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	e009      	b.n	8002406 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023f2:	897a      	ldrh	r2, [r7, #10]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002406:	893b      	ldrh	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2200      	movs	r2, #0
 8002410:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	b29a      	uxth	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	80da      	strh	r2, [r3, #6]
 800241a:	e00b      	b.n	8002434 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2201      	movs	r2, #1
 8002420:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	b29a      	uxth	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	b29a      	uxth	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e26c      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8087 	beq.w	800256e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002460:	4b92      	ldr	r3, [pc, #584]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b04      	cmp	r3, #4
 800246a:	d00c      	beq.n	8002486 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800246c:	4b8f      	ldr	r3, [pc, #572]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b08      	cmp	r3, #8
 8002476:	d112      	bne.n	800249e <HAL_RCC_OscConfig+0x5e>
 8002478:	4b8c      	ldr	r3, [pc, #560]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002484:	d10b      	bne.n	800249e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002486:	4b89      	ldr	r3, [pc, #548]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d06c      	beq.n	800256c <HAL_RCC_OscConfig+0x12c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d168      	bne.n	800256c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e246      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x76>
 80024a8:	4b80      	ldr	r3, [pc, #512]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a7f      	ldr	r2, [pc, #508]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e02e      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x98>
 80024be:	4b7b      	ldr	r3, [pc, #492]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a7a      	ldr	r2, [pc, #488]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b78      	ldr	r3, [pc, #480]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a77      	ldr	r2, [pc, #476]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e01d      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0xbc>
 80024e2:	4b72      	ldr	r3, [pc, #456]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a71      	ldr	r2, [pc, #452]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b6f      	ldr	r3, [pc, #444]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6e      	ldr	r2, [pc, #440]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024fc:	4b6b      	ldr	r3, [pc, #428]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a6a      	ldr	r2, [pc, #424]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b68      	ldr	r3, [pc, #416]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a67      	ldr	r2, [pc, #412]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 800250e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002512:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe f96a 	bl	80007f4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7fe f966 	bl	80007f4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	; 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e1fa      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b5d      	ldr	r3, [pc, #372]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0xe4>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe f956 	bl	80007f4 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7fe f952 	bl	80007f4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	; 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1e6      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x10c>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d063      	beq.n	8002642 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800257a:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002586:	4b49      	ldr	r3, [pc, #292]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b08      	cmp	r3, #8
 8002590:	d11c      	bne.n	80025cc <HAL_RCC_OscConfig+0x18c>
 8002592:	4b46      	ldr	r3, [pc, #280]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d116      	bne.n	80025cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	4b43      	ldr	r3, [pc, #268]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_RCC_OscConfig+0x176>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1ba      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4939      	ldr	r1, [pc, #228]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	e03a      	b.n	8002642 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d4:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7fe f90b 	bl	80007f4 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7fe f907 	bl	80007f4 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e19b      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4927      	ldr	r1, [pc, #156]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
 8002614:	e015      	b.n	8002642 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe f8ea 	bl	80007f4 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002624:	f7fe f8e6 	bl	80007f4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e17a      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d03a      	beq.n	80026c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d019      	beq.n	800268a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002656:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <HAL_RCC_OscConfig+0x274>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265c:	f7fe f8ca 	bl	80007f4 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7fe f8c6 	bl	80007f4 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e15a      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002682:	2001      	movs	r0, #1
 8002684:	f000 faa8 	bl	8002bd8 <RCC_Delay>
 8002688:	e01c      	b.n	80026c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_RCC_OscConfig+0x274>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7fe f8b0 	bl	80007f4 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002696:	e00f      	b.n	80026b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002698:	f7fe f8ac 	bl	80007f4 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d908      	bls.n	80026b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e140      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	42420000 	.word	0x42420000
 80026b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	4b9e      	ldr	r3, [pc, #632]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1e9      	bne.n	8002698 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80a6 	beq.w	800281e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d6:	4b97      	ldr	r3, [pc, #604]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10d      	bne.n	80026fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4b94      	ldr	r3, [pc, #592]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a93      	ldr	r2, [pc, #588]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]
 80026ee:	4b91      	ldr	r3, [pc, #580]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b8e      	ldr	r3, [pc, #568]	; (8002938 <HAL_RCC_OscConfig+0x4f8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270a:	4b8b      	ldr	r3, [pc, #556]	; (8002938 <HAL_RCC_OscConfig+0x4f8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a8a      	ldr	r2, [pc, #552]	; (8002938 <HAL_RCC_OscConfig+0x4f8>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002716:	f7fe f86d 	bl	80007f4 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7fe f869 	bl	80007f4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	; 0x64
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0fd      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b81      	ldr	r3, [pc, #516]	; (8002938 <HAL_RCC_OscConfig+0x4f8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x312>
 8002744:	4b7b      	ldr	r3, [pc, #492]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4a7a      	ldr	r2, [pc, #488]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	e02d      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x334>
 800275a:	4b76      	ldr	r3, [pc, #472]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4a75      	ldr	r2, [pc, #468]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6213      	str	r3, [r2, #32]
 8002766:	4b73      	ldr	r3, [pc, #460]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a72      	ldr	r2, [pc, #456]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	e01c      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b05      	cmp	r3, #5
 800277a:	d10c      	bne.n	8002796 <HAL_RCC_OscConfig+0x356>
 800277c:	4b6d      	ldr	r3, [pc, #436]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4a6c      	ldr	r2, [pc, #432]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6213      	str	r3, [r2, #32]
 8002788:	4b6a      	ldr	r3, [pc, #424]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a69      	ldr	r2, [pc, #420]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	e00b      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002796:	4b67      	ldr	r3, [pc, #412]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a66      	ldr	r2, [pc, #408]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	4b64      	ldr	r3, [pc, #400]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a63      	ldr	r2, [pc, #396]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d015      	beq.n	80027e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7fe f81d 	bl	80007f4 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fe f819 	bl	80007f4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e0ab      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	4b57      	ldr	r3, [pc, #348]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ee      	beq.n	80027be <HAL_RCC_OscConfig+0x37e>
 80027e0:	e014      	b.n	800280c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e2:	f7fe f807 	bl	80007f4 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe f803 	bl	80007f4 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e095      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	4b4c      	ldr	r3, [pc, #304]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ee      	bne.n	80027ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002812:	4b48      	ldr	r3, [pc, #288]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	4a47      	ldr	r2, [pc, #284]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8081 	beq.w	800292a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002828:	4b42      	ldr	r3, [pc, #264]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b08      	cmp	r3, #8
 8002832:	d061      	beq.n	80028f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d146      	bne.n	80028ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283c:	4b3f      	ldr	r3, [pc, #252]	; (800293c <HAL_RCC_OscConfig+0x4fc>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7fd ffd7 	bl	80007f4 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284a:	f7fd ffd3 	bl	80007f4 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e067      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	4b35      	ldr	r3, [pc, #212]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f0      	bne.n	800284a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002870:	d108      	bne.n	8002884 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002872:	4b30      	ldr	r3, [pc, #192]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	492d      	ldr	r1, [pc, #180]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002884:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a19      	ldr	r1, [r3, #32]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	430b      	orrs	r3, r1
 8002896:	4927      	ldr	r1, [pc, #156]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289c:	4b27      	ldr	r3, [pc, #156]	; (800293c <HAL_RCC_OscConfig+0x4fc>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fd ffa7 	bl	80007f4 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fd ffa3 	bl	80007f4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e037      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028bc:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x46a>
 80028c8:	e02f      	b.n	800292a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	4b1c      	ldr	r3, [pc, #112]	; (800293c <HAL_RCC_OscConfig+0x4fc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7fd ff90 	bl	80007f4 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7fd ff8c 	bl	80007f4 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e020      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x498>
 80028f6:	e018      	b.n	800292a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e013      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_OscConfig+0x4f4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	429a      	cmp	r2, r3
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
 800293c:	42420060 	.word	0x42420060

08002940 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0d0      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d910      	bls.n	8002984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b67      	ldr	r3, [pc, #412]	; (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0207 	bic.w	r2, r3, #7
 800296a:	4965      	ldr	r1, [pc, #404]	; (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b63      	ldr	r3, [pc, #396]	; (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0b8      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d020      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800299c:	4b59      	ldr	r3, [pc, #356]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a58      	ldr	r2, [pc, #352]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b4:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c0:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	494d      	ldr	r1, [pc, #308]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d040      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	4b47      	ldr	r3, [pc, #284]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d115      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e07f      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fe:	4b41      	ldr	r3, [pc, #260]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e073      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e06b      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1e:	4b39      	ldr	r3, [pc, #228]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f023 0203 	bic.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4936      	ldr	r1, [pc, #216]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a30:	f7fd fee0 	bl	80007f4 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7fd fedc 	bl	80007f4 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e053      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 020c 	and.w	r2, r3, #12
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d1eb      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d210      	bcs.n	8002a90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 0207 	bic.w	r2, r3, #7
 8002a76:	4922      	ldr	r1, [pc, #136]	; (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e032      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a9c:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4916      	ldr	r1, [pc, #88]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	490e      	ldr	r1, [pc, #56]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ace:	f000 f821 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002ad2:	4601      	mov	r1, r0
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae0:	5cd3      	ldrb	r3, [r2, r3]
 8002ae2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ae6:	4a09      	ldr	r2, [pc, #36]	; (8002b0c <HAL_RCC_ClockConfig+0x1cc>)
 8002ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <HAL_RCC_ClockConfig+0x1d0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fe3e 	bl	8000770 <HAL_InitTick>

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40022000 	.word	0x40022000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	08009be0 	.word	0x08009be0
 8002b0c:	20000004 	.word	0x20000004
 8002b10:	20000008 	.word	0x20000008

08002b14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	b490      	push	{r4, r7}
 8002b16:	b08a      	sub	sp, #40	; 0x28
 8002b18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b1c:	1d3c      	adds	r4, r7, #4
 8002b1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	2300      	movs	r3, #0
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d002      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x40>
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d003      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x46>
 8002b52:	e02d      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b54:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b56:	623b      	str	r3, [r7, #32]
      break;
 8002b58:	e02d      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	0c9b      	lsrs	r3, r3, #18
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b66:	4413      	add	r3, r2
 8002b68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b6c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	0c5b      	lsrs	r3, r3, #17
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b86:	4413      	add	r3, r2
 8002b88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	4a0f      	ldr	r2, [pc, #60]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b92:	fb02 f203 	mul.w	r2, r2, r3
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9e:	e004      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ba4:	fb02 f303 	mul.w	r3, r2, r3
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	623b      	str	r3, [r7, #32]
      break;
 8002bae:	e002      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bb0:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bb2:	623b      	str	r3, [r7, #32]
      break;
 8002bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3728      	adds	r7, #40	; 0x28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc90      	pop	{r4, r7}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	08009b48 	.word	0x08009b48
 8002bc8:	08009b58 	.word	0x08009b58
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	007a1200 	.word	0x007a1200
 8002bd4:	003d0900 	.word	0x003d0900

08002bd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <RCC_Delay+0x34>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <RCC_Delay+0x38>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	0a5b      	lsrs	r3, r3, #9
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bf4:	bf00      	nop
  }
  while (Delay --);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1e5a      	subs	r2, r3, #1
 8002bfa:	60fa      	str	r2, [r7, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f9      	bne.n	8002bf4 <RCC_Delay+0x1c>
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000004 	.word	0x20000004
 8002c10:	10624dd3 	.word	0x10624dd3

08002c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d07d      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002c30:	2300      	movs	r3, #0
 8002c32:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c34:	4b4f      	ldr	r3, [pc, #316]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10d      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c40:	4b4c      	ldr	r3, [pc, #304]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	4a4b      	ldr	r2, [pc, #300]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	61d3      	str	r3, [r2, #28]
 8002c4c:	4b49      	ldr	r3, [pc, #292]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	4b46      	ldr	r3, [pc, #280]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d118      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c68:	4b43      	ldr	r3, [pc, #268]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a42      	ldr	r2, [pc, #264]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c74:	f7fd fdbe 	bl	80007f4 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	e008      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7c:	f7fd fdba 	bl	80007f4 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e06d      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8e:	4b3a      	ldr	r3, [pc, #232]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c9a:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d02e      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d027      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cb8:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cc8:	4b2c      	ldr	r3, [pc, #176]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cce:	4a29      	ldr	r2, [pc, #164]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d014      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cde:	f7fd fd89 	bl	80007f4 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fd fd85 	bl	80007f4 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e036      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ee      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4917      	ldr	r1, [pc, #92]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d105      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d38:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	490b      	ldr	r1, [pc, #44]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	4904      	ldr	r1, [pc, #16]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	42420440 	.word	0x42420440

08002d80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d80:	b084      	sub	sp, #16
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	f107 0014 	add.w	r0, r7, #20
 8002d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	b004      	add	sp, #16
 8002d9e:	4770      	bx	lr

08002da0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002db0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002db4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002dd4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002dd8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4013      	ands	r3, r2
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e18:	b084      	sub	sp, #16
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	f107 0014 	add.w	r0, r7, #20
 8002e26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	b004      	add	sp, #16
 8002e56:	4770      	bx	lr

08002e58 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b09b      	sub	sp, #108	; 0x6c
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	78db      	ldrb	r3, [r3, #3]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d81f      	bhi.n	8002eca <USB_ActivateEndpoint+0x72>
 8002e8a:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <USB_ActivateEndpoint+0x38>)
 8002e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e90:	08002ea1 	.word	0x08002ea1
 8002e94:	08002ebd 	.word	0x08002ebd
 8002e98:	08002ed3 	.word	0x08002ed3
 8002e9c:	08002eaf 	.word	0x08002eaf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ea0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ea4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002eac:	e012      	b.n	8002ed4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002eae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002eb2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002eb6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002eba:	e00b      	b.n	8002ed4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002ebc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002ec8:	e004      	b.n	8002ed4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002ed0:	e000      	b.n	8002ed4 <USB_ActivateEndpoint+0x7c>
      break;
 8002ed2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	441a      	add	r2, r3
 8002ede:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	441a      	add	r2, r3
 8002f24:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	7b1b      	ldrb	r3, [r3, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f040 8149 	bne.w	80031d8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	785b      	ldrb	r3, [r3, #1]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 8084 	beq.w	8003058 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	4413      	add	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	011a      	lsls	r2, r3, #4
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	88db      	ldrh	r3, [r3, #6]
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	81fb      	strh	r3, [r7, #14]
 8002f92:	89fb      	ldrh	r3, [r7, #14]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01b      	beq.n	8002fd4 <USB_ActivateEndpoint+0x17c>
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb2:	81bb      	strh	r3, [r7, #12]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	441a      	add	r2, r3
 8002fbe:	89bb      	ldrh	r3, [r7, #12]
 8002fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	78db      	ldrb	r3, [r3, #3]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d020      	beq.n	800301e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ff2:	813b      	strh	r3, [r7, #8]
 8002ff4:	893b      	ldrh	r3, [r7, #8]
 8002ff6:	f083 0320 	eor.w	r3, r3, #32
 8002ffa:	813b      	strh	r3, [r7, #8]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	441a      	add	r2, r3
 8003006:	893b      	ldrh	r3, [r7, #8]
 8003008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800300c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003018:	b29b      	uxth	r3, r3
 800301a:	8013      	strh	r3, [r2, #0]
 800301c:	e27f      	b.n	800351e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003034:	817b      	strh	r3, [r7, #10]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	441a      	add	r2, r3
 8003040:	897b      	ldrh	r3, [r7, #10]
 8003042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800304a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800304e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003052:	b29b      	uxth	r3, r3
 8003054:	8013      	strh	r3, [r2, #0]
 8003056:	e262      	b.n	800351e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003068:	4413      	add	r3, r2
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	011a      	lsls	r2, r3, #4
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	4413      	add	r3, r2
 8003076:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	88db      	ldrh	r3, [r3, #6]
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	b29b      	uxth	r3, r3
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003096:	b29b      	uxth	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	4413      	add	r3, r2
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	011a      	lsls	r2, r3, #4
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	4413      	add	r3, r2
 80030aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030ae:	623b      	str	r3, [r7, #32]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d112      	bne.n	80030de <USB_ActivateEndpoint+0x286>
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	801a      	strh	r2, [r3, #0]
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	801a      	strh	r2, [r3, #0]
 80030dc:	e02f      	b.n	800313e <USB_ActivateEndpoint+0x2e6>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b3e      	cmp	r3, #62	; 0x3e
 80030e4:	d813      	bhi.n	800310e <USB_ActivateEndpoint+0x2b6>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	663b      	str	r3, [r7, #96]	; 0x60
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <USB_ActivateEndpoint+0x2a8>
 80030fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030fc:	3301      	adds	r3, #1
 80030fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003102:	b29b      	uxth	r3, r3
 8003104:	029b      	lsls	r3, r3, #10
 8003106:	b29a      	uxth	r2, r3
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	801a      	strh	r2, [r3, #0]
 800310c:	e017      	b.n	800313e <USB_ActivateEndpoint+0x2e6>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	663b      	str	r3, [r7, #96]	; 0x60
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <USB_ActivateEndpoint+0x2d0>
 8003122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003124:	3b01      	subs	r3, #1
 8003126:	663b      	str	r3, [r7, #96]	; 0x60
 8003128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800312a:	b29b      	uxth	r3, r3
 800312c:	029b      	lsls	r3, r3, #10
 800312e:	b29b      	uxth	r3, r3
 8003130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003138:	b29a      	uxth	r2, r3
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	83fb      	strh	r3, [r7, #30]
 800314c:	8bfb      	ldrh	r3, [r7, #30]
 800314e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d01b      	beq.n	800318e <USB_ActivateEndpoint+0x336>
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316c:	83bb      	strh	r3, [r7, #28]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	441a      	add	r2, r3
 8003178:	8bbb      	ldrh	r3, [r7, #28]
 800317a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800317e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003182:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318a:	b29b      	uxth	r3, r3
 800318c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a4:	837b      	strh	r3, [r7, #26]
 80031a6:	8b7b      	ldrh	r3, [r7, #26]
 80031a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031ac:	837b      	strh	r3, [r7, #26]
 80031ae:	8b7b      	ldrh	r3, [r7, #26]
 80031b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031b4:	837b      	strh	r3, [r7, #26]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	441a      	add	r2, r3
 80031c0:	8b7b      	ldrh	r3, [r7, #26]
 80031c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	8013      	strh	r3, [r2, #0]
 80031d6:	e1a2      	b.n	800351e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	441a      	add	r2, r3
 80031fc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003208:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800320c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003210:	b29b      	uxth	r3, r3
 8003212:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	65bb      	str	r3, [r7, #88]	; 0x58
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003224:	4413      	add	r3, r2
 8003226:	65bb      	str	r3, [r7, #88]	; 0x58
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	011a      	lsls	r2, r3, #4
 800322e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003230:	4413      	add	r3, r2
 8003232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003236:	657b      	str	r3, [r7, #84]	; 0x54
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	891b      	ldrh	r3, [r3, #8]
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	b29b      	uxth	r3, r3
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003246:	801a      	strh	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	653b      	str	r3, [r7, #80]	; 0x50
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003252:	b29b      	uxth	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003258:	4413      	add	r3, r2
 800325a:	653b      	str	r3, [r7, #80]	; 0x50
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	011a      	lsls	r2, r3, #4
 8003262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003264:	4413      	add	r3, r2
 8003266:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800326a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	895b      	ldrh	r3, [r3, #10]
 8003270:	085b      	lsrs	r3, r3, #1
 8003272:	b29b      	uxth	r3, r3
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	785b      	ldrb	r3, [r3, #1]
 8003280:	2b00      	cmp	r3, #0
 8003282:	f040 8091 	bne.w	80033a8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003294:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01b      	beq.n	80032d6 <USB_ActivateEndpoint+0x47e>
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	441a      	add	r2, r3
 80032c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80032c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	873b      	strh	r3, [r7, #56]	; 0x38
 80032e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01b      	beq.n	8003326 <USB_ActivateEndpoint+0x4ce>
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003304:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	441a      	add	r2, r3
 8003310:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800331a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003322:	b29b      	uxth	r3, r3
 8003324:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800333e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003340:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003344:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003346:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003348:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800334c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	441a      	add	r2, r3
 8003358:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800335a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800335e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336a:	b29b      	uxth	r3, r3
 800336c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003384:	867b      	strh	r3, [r7, #50]	; 0x32
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	441a      	add	r2, r3
 8003390:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800339a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800339e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	8013      	strh	r3, [r2, #0]
 80033a6:	e0ba      	b.n	800351e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80033b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01d      	beq.n	8003400 <USB_ActivateEndpoint+0x5a8>
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	441a      	add	r2, r3
 80033e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003410:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01d      	beq.n	8003458 <USB_ActivateEndpoint+0x600>
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003432:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	441a      	add	r2, r3
 8003440:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800344c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003450:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003454:	b29b      	uxth	r3, r3
 8003456:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	78db      	ldrb	r3, [r3, #3]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d024      	beq.n	80034aa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003476:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800347a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800347e:	f083 0320 	eor.w	r3, r3, #32
 8003482:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	441a      	add	r2, r3
 8003490:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800349c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	8013      	strh	r3, [r2, #0]
 80034a8:	e01d      	b.n	80034e6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80034d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	441a      	add	r2, r3
 8003508:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800350a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800350e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800351a:	b29b      	uxth	r3, r3
 800351c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800351e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003522:	4618      	mov	r0, r3
 8003524:	376c      	adds	r7, #108	; 0x6c
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800352c:	b480      	push	{r7}
 800352e:	b08d      	sub	sp, #52	; 0x34
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	7b1b      	ldrb	r3, [r3, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 808e 	bne.w	800365c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	785b      	ldrb	r3, [r3, #1]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d044      	beq.n	80035d2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	81bb      	strh	r3, [r7, #12]
 8003556:	89bb      	ldrh	r3, [r7, #12]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01b      	beq.n	8003598 <USB_DeactivateEndpoint+0x6c>
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	817b      	strh	r3, [r7, #10]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	441a      	add	r2, r3
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800358c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003590:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003594:	b29b      	uxth	r3, r3
 8003596:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ae:	813b      	strh	r3, [r7, #8]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	441a      	add	r2, r3
 80035ba:	893b      	ldrh	r3, [r7, #8]
 80035bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	8013      	strh	r3, [r2, #0]
 80035d0:	e192      	b.n	80038f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	827b      	strh	r3, [r7, #18]
 80035e0:	8a7b      	ldrh	r3, [r7, #18]
 80035e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01b      	beq.n	8003622 <USB_DeactivateEndpoint+0xf6>
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003600:	823b      	strh	r3, [r7, #16]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	441a      	add	r2, r3
 800360c:	8a3b      	ldrh	r3, [r7, #16]
 800360e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800361a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800361e:	b29b      	uxth	r3, r3
 8003620:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003638:	81fb      	strh	r3, [r7, #14]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	441a      	add	r2, r3
 8003644:	89fb      	ldrh	r3, [r7, #14]
 8003646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800364a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800364e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003656:	b29b      	uxth	r3, r3
 8003658:	8013      	strh	r3, [r2, #0]
 800365a:	e14d      	b.n	80038f8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	785b      	ldrb	r3, [r3, #1]
 8003660:	2b00      	cmp	r3, #0
 8003662:	f040 80a5 	bne.w	80037b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	843b      	strh	r3, [r7, #32]
 8003674:	8c3b      	ldrh	r3, [r7, #32]
 8003676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01b      	beq.n	80036b6 <USB_DeactivateEndpoint+0x18a>
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003694:	83fb      	strh	r3, [r7, #30]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	441a      	add	r2, r3
 80036a0:	8bfb      	ldrh	r3, [r7, #30]
 80036a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	83bb      	strh	r3, [r7, #28]
 80036c4:	8bbb      	ldrh	r3, [r7, #28]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01b      	beq.n	8003706 <USB_DeactivateEndpoint+0x1da>
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e4:	837b      	strh	r3, [r7, #26]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	441a      	add	r2, r3
 80036f0:	8b7b      	ldrh	r3, [r7, #26]
 80036f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003702:	b29b      	uxth	r3, r3
 8003704:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371c:	833b      	strh	r3, [r7, #24]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	441a      	add	r2, r3
 8003728:	8b3b      	ldrh	r3, [r7, #24]
 800372a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800372e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003736:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800373a:	b29b      	uxth	r3, r3
 800373c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003754:	82fb      	strh	r3, [r7, #22]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	441a      	add	r2, r3
 8003760:	8afb      	ldrh	r3, [r7, #22]
 8003762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800376a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003772:	b29b      	uxth	r3, r3
 8003774:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800378c:	82bb      	strh	r3, [r7, #20]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	441a      	add	r2, r3
 8003798:	8abb      	ldrh	r3, [r7, #20]
 800379a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	8013      	strh	r3, [r2, #0]
 80037ae:	e0a3      	b.n	80038f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80037be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01b      	beq.n	8003800 <USB_DeactivateEndpoint+0x2d4>
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	441a      	add	r2, r3
 80037ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80037ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800380e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01b      	beq.n	8003850 <USB_DeactivateEndpoint+0x324>
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	441a      	add	r2, r3
 800383a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800383c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003848:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800384c:	b29b      	uxth	r3, r3
 800384e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b29b      	uxth	r3, r3
 800385e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003866:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	441a      	add	r2, r3
 8003872:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800387c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003884:	b29b      	uxth	r3, r3
 8003886:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b29b      	uxth	r3, r3
 8003896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800389a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800389e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	441a      	add	r2, r3
 80038aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038bc:	b29b      	uxth	r3, r3
 80038be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3734      	adds	r7, #52	; 0x34
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b0c4      	sub	sp, #272	; 0x110
 8003908:	af00      	add	r7, sp, #0
 800390a:	1d3b      	adds	r3, r7, #4
 800390c:	6018      	str	r0, [r3, #0]
 800390e:	463b      	mov	r3, r7
 8003910:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003912:	463b      	mov	r3, r7
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	785b      	ldrb	r3, [r3, #1]
 8003918:	2b01      	cmp	r3, #1
 800391a:	f040 8557 	bne.w	80043cc <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800391e:	463b      	mov	r3, r7
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	463b      	mov	r3, r7
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	429a      	cmp	r2, r3
 800392c:	d905      	bls.n	800393a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800392e:	463b      	mov	r3, r7
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003938:	e004      	b.n	8003944 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800393a:	463b      	mov	r3, r7
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003944:	463b      	mov	r3, r7
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	7b1b      	ldrb	r3, [r3, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d12c      	bne.n	80039a8 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800394e:	463b      	mov	r3, r7
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6959      	ldr	r1, [r3, #20]
 8003954:	463b      	mov	r3, r7
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	88da      	ldrh	r2, [r3, #6]
 800395a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800395e:	b29b      	uxth	r3, r3
 8003960:	1d38      	adds	r0, r7, #4
 8003962:	6800      	ldr	r0, [r0, #0]
 8003964:	f001 fa2c 	bl	8004dc0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003976:	b29b      	uxth	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	4413      	add	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	463b      	mov	r3, r7
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	011a      	lsls	r2, r3, #4
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	4413      	add	r3, r2
 800398c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003990:	f107 0310 	add.w	r3, r7, #16
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800399a:	b29a      	uxth	r2, r3
 800399c:	f107 0310 	add.w	r3, r7, #16
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	801a      	strh	r2, [r3, #0]
 80039a4:	f000 bcdd 	b.w	8004362 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80039a8:	463b      	mov	r3, r7
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	78db      	ldrb	r3, [r3, #3]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	f040 8347 	bne.w	8004042 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80039b4:	463b      	mov	r3, r7
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6a1a      	ldr	r2, [r3, #32]
 80039ba:	463b      	mov	r3, r7
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	f240 82eb 	bls.w	8003f9c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80039c6:	1d3b      	adds	r3, r7, #4
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	463b      	mov	r3, r7
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80039e4:	1d3b      	adds	r3, r7, #4
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	463b      	mov	r3, r7
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80039f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6a1a      	ldr	r2, [r3, #32]
 8003a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a14:	1ad2      	subs	r2, r2, r3
 8003a16:	463b      	mov	r3, r7
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a1c:	1d3b      	adds	r3, r7, #4
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	463b      	mov	r3, r7
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8159 	beq.w	8003cea <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a3e:	463b      	mov	r3, r7
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	785b      	ldrb	r3, [r3, #1]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d164      	bne.n	8003b12 <USB_EPStartXfer+0x20e>
 8003a48:	1d3b      	adds	r3, r7, #4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	461a      	mov	r2, r3
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	4413      	add	r3, r2
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a60:	463b      	mov	r3, r7
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	011a      	lsls	r2, r3, #4
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d112      	bne.n	8003aa0 <USB_EPStartXfer+0x19c>
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	801a      	strh	r2, [r3, #0]
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	801a      	strh	r2, [r3, #0]
 8003a9e:	e054      	b.n	8003b4a <USB_EPStartXfer+0x246>
 8003aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa4:	2b3e      	cmp	r3, #62	; 0x3e
 8003aa6:	d817      	bhi.n	8003ad8 <USB_EPStartXfer+0x1d4>
 8003aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d004      	beq.n	8003ac8 <USB_EPStartXfer+0x1c4>
 8003abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	029b      	lsls	r3, r3, #10
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	801a      	strh	r2, [r3, #0]
 8003ad6:	e038      	b.n	8003b4a <USB_EPStartXfer+0x246>
 8003ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <USB_EPStartXfer+0x1f4>
 8003aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003af2:	3b01      	subs	r3, #1
 8003af4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	029b      	lsls	r3, r3, #10
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	e01b      	b.n	8003b4a <USB_EPStartXfer+0x246>
 8003b12:	463b      	mov	r3, r7
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	785b      	ldrb	r3, [r3, #1]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d116      	bne.n	8003b4a <USB_EPStartXfer+0x246>
 8003b1c:	1d3b      	adds	r3, r7, #4
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2a:	4413      	add	r3, r2
 8003b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b2e:	463b      	mov	r3, r7
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	011a      	lsls	r2, r3, #4
 8003b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b38:	4413      	add	r3, r2
 8003b3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	895b      	ldrh	r3, [r3, #10]
 8003b50:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b54:	463b      	mov	r3, r7
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6959      	ldr	r1, [r3, #20]
 8003b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003b64:	1d38      	adds	r0, r7, #4
 8003b66:	6800      	ldr	r0, [r0, #0]
 8003b68:	f001 f92a 	bl	8004dc0 <USB_WritePMA>
            ep->xfer_buff += len;
 8003b6c:	463b      	mov	r3, r7
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b76:	441a      	add	r2, r3
 8003b78:	463b      	mov	r3, r7
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003b7e:	463b      	mov	r3, r7
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6a1a      	ldr	r2, [r3, #32]
 8003b84:	463b      	mov	r3, r7
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d909      	bls.n	8003ba2 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003b8e:	463b      	mov	r3, r7
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a1a      	ldr	r2, [r3, #32]
 8003b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b98:	1ad2      	subs	r2, r2, r3
 8003b9a:	463b      	mov	r3, r7
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	621a      	str	r2, [r3, #32]
 8003ba0:	e008      	b.n	8003bb4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003bac:	463b      	mov	r3, r7
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d164      	bne.n	8003c88 <USB_EPStartXfer+0x384>
 8003bbe:	1d3b      	adds	r3, r7, #4
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	463b      	mov	r3, r7
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	011a      	lsls	r2, r3, #4
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	4413      	add	r3, r2
 8003be2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d112      	bne.n	8003c16 <USB_EPStartXfer+0x312>
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	801a      	strh	r2, [r3, #0]
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	801a      	strh	r2, [r3, #0]
 8003c14:	e057      	b.n	8003cc6 <USB_EPStartXfer+0x3c2>
 8003c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c1a:	2b3e      	cmp	r3, #62	; 0x3e
 8003c1c:	d817      	bhi.n	8003c4e <USB_EPStartXfer+0x34a>
 8003c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <USB_EPStartXfer+0x33a>
 8003c34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c38:	3301      	adds	r3, #1
 8003c3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	029b      	lsls	r3, r3, #10
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	801a      	strh	r2, [r3, #0]
 8003c4c:	e03b      	b.n	8003cc6 <USB_EPStartXfer+0x3c2>
 8003c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d104      	bne.n	8003c6e <USB_EPStartXfer+0x36a>
 8003c64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	029b      	lsls	r3, r3, #10
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	e01e      	b.n	8003cc6 <USB_EPStartXfer+0x3c2>
 8003c88:	463b      	mov	r3, r7
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d119      	bne.n	8003cc6 <USB_EPStartXfer+0x3c2>
 8003c92:	1d3b      	adds	r3, r7, #4
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	4413      	add	r3, r2
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	463b      	mov	r3, r7
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	011a      	lsls	r2, r3, #4
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cba:	623b      	str	r3, [r7, #32]
 8003cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	891b      	ldrh	r3, [r3, #8]
 8003ccc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cd0:	463b      	mov	r3, r7
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6959      	ldr	r1, [r3, #20]
 8003cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003ce0:	1d38      	adds	r0, r7, #4
 8003ce2:	6800      	ldr	r0, [r0, #0]
 8003ce4:	f001 f86c 	bl	8004dc0 <USB_WritePMA>
 8003ce8:	e33b      	b.n	8004362 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cea:	463b      	mov	r3, r7
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	785b      	ldrb	r3, [r3, #1]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d164      	bne.n	8003dbe <USB_EPStartXfer+0x4ba>
 8003cf4:	1d3b      	adds	r3, r7, #4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfa:	1d3b      	adds	r3, r7, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d08:	4413      	add	r3, r2
 8003d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d0c:	463b      	mov	r3, r7
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	011a      	lsls	r2, r3, #4
 8003d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d16:	4413      	add	r3, r2
 8003d18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d112      	bne.n	8003d4c <USB_EPStartXfer+0x448>
 8003d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	e057      	b.n	8003dfc <USB_EPStartXfer+0x4f8>
 8003d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d50:	2b3e      	cmp	r3, #62	; 0x3e
 8003d52:	d817      	bhi.n	8003d84 <USB_EPStartXfer+0x480>
 8003d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d004      	beq.n	8003d74 <USB_EPStartXfer+0x470>
 8003d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	029b      	lsls	r3, r3, #10
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d80:	801a      	strh	r2, [r3, #0]
 8003d82:	e03b      	b.n	8003dfc <USB_EPStartXfer+0x4f8>
 8003d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d104      	bne.n	8003da4 <USB_EPStartXfer+0x4a0>
 8003d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	029b      	lsls	r3, r3, #10
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dba:	801a      	strh	r2, [r3, #0]
 8003dbc:	e01e      	b.n	8003dfc <USB_EPStartXfer+0x4f8>
 8003dbe:	463b      	mov	r3, r7
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	785b      	ldrb	r3, [r3, #1]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d119      	bne.n	8003dfc <USB_EPStartXfer+0x4f8>
 8003dc8:	1d3b      	adds	r3, r7, #4
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	657b      	str	r3, [r7, #84]	; 0x54
 8003dce:	1d3b      	adds	r3, r7, #4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ddc:	4413      	add	r3, r2
 8003dde:	657b      	str	r3, [r7, #84]	; 0x54
 8003de0:	463b      	mov	r3, r7
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	011a      	lsls	r2, r3, #4
 8003de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dea:	4413      	add	r3, r2
 8003dec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003df0:	653b      	str	r3, [r7, #80]	; 0x50
 8003df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dfa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	891b      	ldrh	r3, [r3, #8]
 8003e02:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e06:	463b      	mov	r3, r7
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6959      	ldr	r1, [r3, #20]
 8003e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e16:	1d38      	adds	r0, r7, #4
 8003e18:	6800      	ldr	r0, [r0, #0]
 8003e1a:	f000 ffd1 	bl	8004dc0 <USB_WritePMA>
            ep->xfer_buff += len;
 8003e1e:	463b      	mov	r3, r7
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e28:	441a      	add	r2, r3
 8003e2a:	463b      	mov	r3, r7
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003e30:	463b      	mov	r3, r7
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	463b      	mov	r3, r7
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d909      	bls.n	8003e54 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003e40:	463b      	mov	r3, r7
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a1a      	ldr	r2, [r3, #32]
 8003e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e4a:	1ad2      	subs	r2, r2, r3
 8003e4c:	463b      	mov	r3, r7
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	621a      	str	r2, [r3, #32]
 8003e52:	e008      	b.n	8003e66 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003e54:	463b      	mov	r3, r7
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003e5e:	463b      	mov	r3, r7
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e6c:	463b      	mov	r3, r7
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	785b      	ldrb	r3, [r3, #1]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d164      	bne.n	8003f40 <USB_EPStartXfer+0x63c>
 8003e76:	1d3b      	adds	r3, r7, #4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e7c:	1d3b      	adds	r3, r7, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8a:	4413      	add	r3, r2
 8003e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e8e:	463b      	mov	r3, r7
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	011a      	lsls	r2, r3, #4
 8003e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e98:	4413      	add	r3, r2
 8003e9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d112      	bne.n	8003ece <USB_EPStartXfer+0x5ca>
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	801a      	strh	r2, [r3, #0]
 8003ecc:	e054      	b.n	8003f78 <USB_EPStartXfer+0x674>
 8003ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ed4:	d817      	bhi.n	8003f06 <USB_EPStartXfer+0x602>
 8003ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d004      	beq.n	8003ef6 <USB_EPStartXfer+0x5f2>
 8003eec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	029b      	lsls	r3, r3, #10
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	801a      	strh	r2, [r3, #0]
 8003f04:	e038      	b.n	8003f78 <USB_EPStartXfer+0x674>
 8003f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d104      	bne.n	8003f26 <USB_EPStartXfer+0x622>
 8003f1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f20:	3b01      	subs	r3, #1
 8003f22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	029b      	lsls	r3, r3, #10
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	e01b      	b.n	8003f78 <USB_EPStartXfer+0x674>
 8003f40:	463b      	mov	r3, r7
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	785b      	ldrb	r3, [r3, #1]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d116      	bne.n	8003f78 <USB_EPStartXfer+0x674>
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f58:	4413      	add	r3, r2
 8003f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5c:	463b      	mov	r3, r7
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	011a      	lsls	r2, r3, #4
 8003f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f66:	4413      	add	r3, r2
 8003f68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f78:	463b      	mov	r3, r7
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	895b      	ldrh	r3, [r3, #10]
 8003f7e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f82:	463b      	mov	r3, r7
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6959      	ldr	r1, [r3, #20]
 8003f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003f92:	1d38      	adds	r0, r7, #4
 8003f94:	6800      	ldr	r0, [r0, #0]
 8003f96:	f000 ff13 	bl	8004dc0 <USB_WritePMA>
 8003f9a:	e1e2      	b.n	8004362 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003f9c:	463b      	mov	r3, r7
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	463b      	mov	r3, r7
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	463b      	mov	r3, r7
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003fea:	1d3b      	adds	r3, r7, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ffe:	4413      	add	r3, r2
 8004000:	663b      	str	r3, [r7, #96]	; 0x60
 8004002:	463b      	mov	r3, r7
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	011a      	lsls	r2, r3, #4
 800400a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400c:	4413      	add	r3, r2
 800400e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004012:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004018:	b29a      	uxth	r2, r3
 800401a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800401e:	463b      	mov	r3, r7
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	891b      	ldrh	r3, [r3, #8]
 8004024:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004028:	463b      	mov	r3, r7
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6959      	ldr	r1, [r3, #20]
 800402e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004032:	b29b      	uxth	r3, r3
 8004034:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004038:	1d38      	adds	r0, r7, #4
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	f000 fec0 	bl	8004dc0 <USB_WritePMA>
 8004040:	e18f      	b.n	8004362 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004042:	1d3b      	adds	r3, r7, #4
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	463b      	mov	r3, r7
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 808f 	beq.w	800417c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	67bb      	str	r3, [r7, #120]	; 0x78
 8004064:	463b      	mov	r3, r7
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	785b      	ldrb	r3, [r3, #1]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d164      	bne.n	8004138 <USB_EPStartXfer+0x834>
 800406e:	1d3b      	adds	r3, r7, #4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	673b      	str	r3, [r7, #112]	; 0x70
 8004074:	1d3b      	adds	r3, r7, #4
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800407c:	b29b      	uxth	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004082:	4413      	add	r3, r2
 8004084:	673b      	str	r3, [r7, #112]	; 0x70
 8004086:	463b      	mov	r3, r7
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	011a      	lsls	r2, r3, #4
 800408e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004090:	4413      	add	r3, r2
 8004092:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004096:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d112      	bne.n	80040c6 <USB_EPStartXfer+0x7c2>
 80040a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040be:	b29a      	uxth	r2, r3
 80040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c2:	801a      	strh	r2, [r3, #0]
 80040c4:	e054      	b.n	8004170 <USB_EPStartXfer+0x86c>
 80040c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ca:	2b3e      	cmp	r3, #62	; 0x3e
 80040cc:	d817      	bhi.n	80040fe <USB_EPStartXfer+0x7fa>
 80040ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80040d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d004      	beq.n	80040ee <USB_EPStartXfer+0x7ea>
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e8:	3301      	adds	r3, #1
 80040ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80040ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	029b      	lsls	r3, r3, #10
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	e038      	b.n	8004170 <USB_EPStartXfer+0x86c>
 80040fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <USB_EPStartXfer+0x81a>
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	3b01      	subs	r3, #1
 800411a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800411e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004122:	b29b      	uxth	r3, r3
 8004124:	029b      	lsls	r3, r3, #10
 8004126:	b29b      	uxth	r3, r3
 8004128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800412c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004130:	b29a      	uxth	r2, r3
 8004132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004134:	801a      	strh	r2, [r3, #0]
 8004136:	e01b      	b.n	8004170 <USB_EPStartXfer+0x86c>
 8004138:	463b      	mov	r3, r7
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d116      	bne.n	8004170 <USB_EPStartXfer+0x86c>
 8004142:	1d3b      	adds	r3, r7, #4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414a:	b29b      	uxth	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004150:	4413      	add	r3, r2
 8004152:	67bb      	str	r3, [r7, #120]	; 0x78
 8004154:	463b      	mov	r3, r7
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	011a      	lsls	r2, r3, #4
 800415c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800415e:	4413      	add	r3, r2
 8004160:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004164:	677b      	str	r3, [r7, #116]	; 0x74
 8004166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800416a:	b29a      	uxth	r2, r3
 800416c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800416e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004170:	463b      	mov	r3, r7
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	895b      	ldrh	r3, [r3, #10]
 8004176:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800417a:	e097      	b.n	80042ac <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800417c:	463b      	mov	r3, r7
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d168      	bne.n	8004258 <USB_EPStartXfer+0x954>
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800418e:	1d3b      	adds	r3, r7, #4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004196:	b29b      	uxth	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800419e:	4413      	add	r3, r2
 80041a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041a4:	463b      	mov	r3, r7
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	011a      	lsls	r2, r3, #4
 80041ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041b0:	4413      	add	r3, r2
 80041b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d112      	bne.n	80041e6 <USB_EPStartXfer+0x8e2>
 80041c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041ce:	801a      	strh	r2, [r3, #0]
 80041d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041de:	b29a      	uxth	r2, r3
 80041e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041e2:	801a      	strh	r2, [r3, #0]
 80041e4:	e05d      	b.n	80042a2 <USB_EPStartXfer+0x99e>
 80041e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ea:	2b3e      	cmp	r3, #62	; 0x3e
 80041ec:	d817      	bhi.n	800421e <USB_EPStartXfer+0x91a>
 80041ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <USB_EPStartXfer+0x90a>
 8004204:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004208:	3301      	adds	r3, #1
 800420a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800420e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004212:	b29b      	uxth	r3, r3
 8004214:	029b      	lsls	r3, r3, #10
 8004216:	b29a      	uxth	r2, r3
 8004218:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	e041      	b.n	80042a2 <USB_EPStartXfer+0x99e>
 800421e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	2b00      	cmp	r3, #0
 8004232:	d104      	bne.n	800423e <USB_EPStartXfer+0x93a>
 8004234:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004238:	3b01      	subs	r3, #1
 800423a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800423e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004242:	b29b      	uxth	r3, r3
 8004244:	029b      	lsls	r3, r3, #10
 8004246:	b29b      	uxth	r3, r3
 8004248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800424c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004250:	b29a      	uxth	r2, r3
 8004252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	e024      	b.n	80042a2 <USB_EPStartXfer+0x99e>
 8004258:	463b      	mov	r3, r7
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	785b      	ldrb	r3, [r3, #1]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d11f      	bne.n	80042a2 <USB_EPStartXfer+0x99e>
 8004262:	1d3b      	adds	r3, r7, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800426a:	1d3b      	adds	r3, r7, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004272:	b29b      	uxth	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800427a:	4413      	add	r3, r2
 800427c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004280:	463b      	mov	r3, r7
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	011a      	lsls	r2, r3, #4
 8004288:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800428c:	4413      	add	r3, r2
 800428e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429a:	b29a      	uxth	r2, r3
 800429c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80042a2:	463b      	mov	r3, r7
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	891b      	ldrh	r3, [r3, #8]
 80042a8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042ac:	463b      	mov	r3, r7
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6959      	ldr	r1, [r3, #20]
 80042b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80042bc:	1d38      	adds	r0, r7, #4
 80042be:	6800      	ldr	r0, [r0, #0]
 80042c0:	f000 fd7e 	bl	8004dc0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80042c4:	463b      	mov	r3, r7
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	785b      	ldrb	r3, [r3, #1]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d122      	bne.n	8004314 <USB_EPStartXfer+0xa10>
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	463b      	mov	r3, r7
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80042ec:	1d3b      	adds	r3, r7, #4
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	463b      	mov	r3, r7
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	441a      	add	r2, r3
 80042fa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80042fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800430e:	b29b      	uxth	r3, r3
 8004310:	8013      	strh	r3, [r2, #0]
 8004312:	e026      	b.n	8004362 <USB_EPStartXfer+0xa5e>
 8004314:	463b      	mov	r3, r7
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	785b      	ldrb	r3, [r3, #1]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d121      	bne.n	8004362 <USB_EPStartXfer+0xa5e>
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	463b      	mov	r3, r7
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004338:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800433c:	1d3b      	adds	r3, r7, #4
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	463b      	mov	r3, r7
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	441a      	add	r2, r3
 800434a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800434e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800435a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435e:	b29b      	uxth	r3, r3
 8004360:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004362:	1d3b      	adds	r3, r7, #4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	463b      	mov	r3, r7
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f107 020e 	add.w	r2, r7, #14
 8004378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800437c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004380:	8013      	strh	r3, [r2, #0]
 8004382:	f107 030e 	add.w	r3, r7, #14
 8004386:	f107 020e 	add.w	r2, r7, #14
 800438a:	8812      	ldrh	r2, [r2, #0]
 800438c:	f082 0210 	eor.w	r2, r2, #16
 8004390:	801a      	strh	r2, [r3, #0]
 8004392:	f107 030e 	add.w	r3, r7, #14
 8004396:	f107 020e 	add.w	r2, r7, #14
 800439a:	8812      	ldrh	r2, [r2, #0]
 800439c:	f082 0220 	eor.w	r2, r2, #32
 80043a0:	801a      	strh	r2, [r3, #0]
 80043a2:	1d3b      	adds	r3, r7, #4
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	463b      	mov	r3, r7
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	441a      	add	r2, r3
 80043b0:	f107 030e 	add.w	r3, r7, #14
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	8013      	strh	r3, [r2, #0]
 80043ca:	e3b5      	b.n	8004b38 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80043cc:	463b      	mov	r3, r7
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	7b1b      	ldrb	r3, [r3, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f040 8090 	bne.w	80044f8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80043d8:	463b      	mov	r3, r7
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	463b      	mov	r3, r7
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d90e      	bls.n	8004406 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80043e8:	463b      	mov	r3, r7
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80043f2:	463b      	mov	r3, r7
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043fc:	1ad2      	subs	r2, r2, r3
 80043fe:	463b      	mov	r3, r7
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	619a      	str	r2, [r3, #24]
 8004404:	e008      	b.n	8004418 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004406:	463b      	mov	r3, r7
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004410:	463b      	mov	r3, r7
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2200      	movs	r2, #0
 8004416:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004418:	1d3b      	adds	r3, r7, #4
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004420:	1d3b      	adds	r3, r7, #4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004428:	b29b      	uxth	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004430:	4413      	add	r3, r2
 8004432:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004436:	463b      	mov	r3, r7
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	011a      	lsls	r2, r3, #4
 800443e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004442:	4413      	add	r3, r2
 8004444:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004448:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800444c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d116      	bne.n	8004482 <USB_EPStartXfer+0xb7e>
 8004454:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004460:	b29a      	uxth	r2, r3
 8004462:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004466:	801a      	strh	r2, [r3, #0]
 8004468:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004478:	b29a      	uxth	r2, r3
 800447a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	e32c      	b.n	8004adc <USB_EPStartXfer+0x11d8>
 8004482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004486:	2b3e      	cmp	r3, #62	; 0x3e
 8004488:	d818      	bhi.n	80044bc <USB_EPStartXfer+0xbb8>
 800448a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <USB_EPStartXfer+0xba6>
 80044a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044a4:	3301      	adds	r3, #1
 80044a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80044aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	029b      	lsls	r3, r3, #10
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044b8:	801a      	strh	r2, [r3, #0]
 80044ba:	e30f      	b.n	8004adc <USB_EPStartXfer+0x11d8>
 80044bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80044c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d104      	bne.n	80044dc <USB_EPStartXfer+0xbd8>
 80044d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044d6:	3b01      	subs	r3, #1
 80044d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80044dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	029b      	lsls	r3, r3, #10
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	e2f1      	b.n	8004adc <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80044f8:	463b      	mov	r3, r7
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	78db      	ldrb	r3, [r3, #3]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	f040 818f 	bne.w	8004822 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004504:	463b      	mov	r3, r7
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	785b      	ldrb	r3, [r3, #1]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d175      	bne.n	80045fa <USB_EPStartXfer+0xcf6>
 800450e:	1d3b      	adds	r3, r7, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004526:	4413      	add	r3, r2
 8004528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800452c:	463b      	mov	r3, r7
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	011a      	lsls	r2, r3, #4
 8004534:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004538:	4413      	add	r3, r2
 800453a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800453e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004542:	463b      	mov	r3, r7
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d116      	bne.n	800457a <USB_EPStartXfer+0xc76>
 800454c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004558:	b29a      	uxth	r2, r3
 800455a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800455e:	801a      	strh	r2, [r3, #0]
 8004560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800456c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004570:	b29a      	uxth	r2, r3
 8004572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004576:	801a      	strh	r2, [r3, #0]
 8004578:	e065      	b.n	8004646 <USB_EPStartXfer+0xd42>
 800457a:	463b      	mov	r3, r7
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2b3e      	cmp	r3, #62	; 0x3e
 8004582:	d81a      	bhi.n	80045ba <USB_EPStartXfer+0xcb6>
 8004584:	463b      	mov	r3, r7
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004590:	463b      	mov	r3, r7
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <USB_EPStartXfer+0xca4>
 800459e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045a2:	3301      	adds	r3, #1
 80045a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	029b      	lsls	r3, r3, #10
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045b6:	801a      	strh	r2, [r3, #0]
 80045b8:	e045      	b.n	8004646 <USB_EPStartXfer+0xd42>
 80045ba:	463b      	mov	r3, r7
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045c6:	463b      	mov	r3, r7
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d104      	bne.n	80045de <USB_EPStartXfer+0xcda>
 80045d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045d8:	3b01      	subs	r3, #1
 80045da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	029b      	lsls	r3, r3, #10
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045f6:	801a      	strh	r2, [r3, #0]
 80045f8:	e025      	b.n	8004646 <USB_EPStartXfer+0xd42>
 80045fa:	463b      	mov	r3, r7
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d120      	bne.n	8004646 <USB_EPStartXfer+0xd42>
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004614:	b29b      	uxth	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800461c:	4413      	add	r3, r2
 800461e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004622:	463b      	mov	r3, r7
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	011a      	lsls	r2, r3, #4
 800462a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800462e:	4413      	add	r3, r2
 8004630:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004638:	463b      	mov	r3, r7
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	b29a      	uxth	r2, r3
 8004640:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004644:	801a      	strh	r2, [r3, #0]
 8004646:	1d3b      	adds	r3, r7, #4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800464e:	463b      	mov	r3, r7
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d175      	bne.n	8004744 <USB_EPStartXfer+0xe40>
 8004658:	1d3b      	adds	r3, r7, #4
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004668:	b29b      	uxth	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004670:	4413      	add	r3, r2
 8004672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004676:	463b      	mov	r3, r7
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	011a      	lsls	r2, r3, #4
 800467e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004682:	4413      	add	r3, r2
 8004684:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004688:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800468c:	463b      	mov	r3, r7
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d116      	bne.n	80046c4 <USB_EPStartXfer+0xdc0>
 8004696:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046a8:	801a      	strh	r2, [r3, #0]
 80046aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046c0:	801a      	strh	r2, [r3, #0]
 80046c2:	e061      	b.n	8004788 <USB_EPStartXfer+0xe84>
 80046c4:	463b      	mov	r3, r7
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b3e      	cmp	r3, #62	; 0x3e
 80046cc:	d81a      	bhi.n	8004704 <USB_EPStartXfer+0xe00>
 80046ce:	463b      	mov	r3, r7
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	085b      	lsrs	r3, r3, #1
 80046d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046da:	463b      	mov	r3, r7
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d004      	beq.n	80046f2 <USB_EPStartXfer+0xdee>
 80046e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ec:	3301      	adds	r3, #1
 80046ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	029b      	lsls	r3, r3, #10
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004700:	801a      	strh	r2, [r3, #0]
 8004702:	e041      	b.n	8004788 <USB_EPStartXfer+0xe84>
 8004704:	463b      	mov	r3, r7
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004710:	463b      	mov	r3, r7
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	2b00      	cmp	r3, #0
 800471c:	d104      	bne.n	8004728 <USB_EPStartXfer+0xe24>
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004722:	3b01      	subs	r3, #1
 8004724:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472c:	b29b      	uxth	r3, r3
 800472e:	029b      	lsls	r3, r3, #10
 8004730:	b29b      	uxth	r3, r3
 8004732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800473a:	b29a      	uxth	r2, r3
 800473c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004740:	801a      	strh	r2, [r3, #0]
 8004742:	e021      	b.n	8004788 <USB_EPStartXfer+0xe84>
 8004744:	463b      	mov	r3, r7
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	785b      	ldrb	r3, [r3, #1]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d11c      	bne.n	8004788 <USB_EPStartXfer+0xe84>
 800474e:	1d3b      	adds	r3, r7, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004756:	b29b      	uxth	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800475e:	4413      	add	r3, r2
 8004760:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004764:	463b      	mov	r3, r7
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	011a      	lsls	r2, r3, #4
 800476c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004770:	4413      	add	r3, r2
 8004772:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800477a:	463b      	mov	r3, r7
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	b29a      	uxth	r2, r3
 8004782:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004786:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004788:	463b      	mov	r3, r7
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 81a4 	beq.w	8004adc <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004794:	1d3b      	adds	r3, r7, #4
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	463b      	mov	r3, r7
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80047a8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80047ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <USB_EPStartXfer+0xebc>
 80047b4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047c0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80047c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f040 8187 	bne.w	8004adc <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047ce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f040 8180 	bne.w	8004adc <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80047dc:	1d3b      	adds	r3, r7, #4
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	463b      	mov	r3, r7
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80047fa:	1d3b      	adds	r3, r7, #4
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	463b      	mov	r3, r7
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800480c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800481c:	b29b      	uxth	r3, r3
 800481e:	8013      	strh	r3, [r2, #0]
 8004820:	e15c      	b.n	8004adc <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004822:	463b      	mov	r3, r7
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	78db      	ldrb	r3, [r3, #3]
 8004828:	2b01      	cmp	r3, #1
 800482a:	f040 8155 	bne.w	8004ad8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800482e:	463b      	mov	r3, r7
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	463b      	mov	r3, r7
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	429a      	cmp	r2, r3
 800483c:	d90e      	bls.n	800485c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800483e:	463b      	mov	r3, r7
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004848:	463b      	mov	r3, r7
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004852:	1ad2      	subs	r2, r2, r3
 8004854:	463b      	mov	r3, r7
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	619a      	str	r2, [r3, #24]
 800485a:	e008      	b.n	800486e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800485c:	463b      	mov	r3, r7
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004866:	463b      	mov	r3, r7
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2200      	movs	r2, #0
 800486c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800486e:	463b      	mov	r3, r7
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	785b      	ldrb	r3, [r3, #1]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d16f      	bne.n	8004958 <USB_EPStartXfer+0x1054>
 8004878:	1d3b      	adds	r3, r7, #4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004880:	1d3b      	adds	r3, r7, #4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004888:	b29b      	uxth	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004890:	4413      	add	r3, r2
 8004892:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004896:	463b      	mov	r3, r7
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	011a      	lsls	r2, r3, #4
 800489e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048a2:	4413      	add	r3, r2
 80048a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d116      	bne.n	80048e2 <USB_EPStartXfer+0xfde>
 80048b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048c6:	801a      	strh	r2, [r3, #0]
 80048c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d8:	b29a      	uxth	r2, r3
 80048da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	e05f      	b.n	80049a2 <USB_EPStartXfer+0x109e>
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e6:	2b3e      	cmp	r3, #62	; 0x3e
 80048e8:	d818      	bhi.n	800491c <USB_EPStartXfer+0x1018>
 80048ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <USB_EPStartXfer+0x1006>
 8004900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004904:	3301      	adds	r3, #1
 8004906:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800490a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800490e:	b29b      	uxth	r3, r3
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	b29a      	uxth	r2, r3
 8004914:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004918:	801a      	strh	r2, [r3, #0]
 800491a:	e042      	b.n	80049a2 <USB_EPStartXfer+0x109e>
 800491c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	2b00      	cmp	r3, #0
 8004930:	d104      	bne.n	800493c <USB_EPStartXfer+0x1038>
 8004932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004936:	3b01      	subs	r3, #1
 8004938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004940:	b29b      	uxth	r3, r3
 8004942:	029b      	lsls	r3, r3, #10
 8004944:	b29b      	uxth	r3, r3
 8004946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800494a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800494e:	b29a      	uxth	r2, r3
 8004950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004954:	801a      	strh	r2, [r3, #0]
 8004956:	e024      	b.n	80049a2 <USB_EPStartXfer+0x109e>
 8004958:	463b      	mov	r3, r7
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	785b      	ldrb	r3, [r3, #1]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d11f      	bne.n	80049a2 <USB_EPStartXfer+0x109e>
 8004962:	1d3b      	adds	r3, r7, #4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800497a:	4413      	add	r3, r2
 800497c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004980:	463b      	mov	r3, r7
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	011a      	lsls	r2, r3, #4
 8004988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800498c:	4413      	add	r3, r2
 800498e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499a:	b29a      	uxth	r2, r3
 800499c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049a0:	801a      	strh	r2, [r3, #0]
 80049a2:	1d3b      	adds	r3, r7, #4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049aa:	463b      	mov	r3, r7
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	785b      	ldrb	r3, [r3, #1]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d16f      	bne.n	8004a94 <USB_EPStartXfer+0x1190>
 80049b4:	1d3b      	adds	r3, r7, #4
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049bc:	1d3b      	adds	r3, r7, #4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049cc:	4413      	add	r3, r2
 80049ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049d2:	463b      	mov	r3, r7
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	011a      	lsls	r2, r3, #4
 80049da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049de:	4413      	add	r3, r2
 80049e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80049e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d116      	bne.n	8004a1e <USB_EPStartXfer+0x111a>
 80049f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a1a:	801a      	strh	r2, [r3, #0]
 8004a1c:	e05e      	b.n	8004adc <USB_EPStartXfer+0x11d8>
 8004a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a22:	2b3e      	cmp	r3, #62	; 0x3e
 8004a24:	d818      	bhi.n	8004a58 <USB_EPStartXfer+0x1154>
 8004a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <USB_EPStartXfer+0x1142>
 8004a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a40:	3301      	adds	r3, #1
 8004a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	029b      	lsls	r3, r3, #10
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a54:	801a      	strh	r2, [r3, #0]
 8004a56:	e041      	b.n	8004adc <USB_EPStartXfer+0x11d8>
 8004a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d104      	bne.n	8004a78 <USB_EPStartXfer+0x1174>
 8004a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a72:	3b01      	subs	r3, #1
 8004a74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	029b      	lsls	r3, r3, #10
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a90:	801a      	strh	r2, [r3, #0]
 8004a92:	e023      	b.n	8004adc <USB_EPStartXfer+0x11d8>
 8004a94:	463b      	mov	r3, r7
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	785b      	ldrb	r3, [r3, #1]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d11e      	bne.n	8004adc <USB_EPStartXfer+0x11d8>
 8004a9e:	1d3b      	adds	r3, r7, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004aae:	4413      	add	r3, r2
 8004ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	011a      	lsls	r2, r3, #4
 8004abc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ac6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ad4:	801a      	strh	r2, [r3, #0]
 8004ad6:	e001      	b.n	8004adc <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e02e      	b.n	8004b3a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	463b      	mov	r3, r7
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004afa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004afe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b02:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004b06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004b0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b0e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004b12:	1d3b      	adds	r3, r7, #4
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	463b      	mov	r3, r7
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d020      	beq.n	8004b98 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b6c:	81bb      	strh	r3, [r7, #12]
 8004b6e:	89bb      	ldrh	r3, [r7, #12]
 8004b70:	f083 0310 	eor.w	r3, r3, #16
 8004b74:	81bb      	strh	r3, [r7, #12]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	441a      	add	r2, r3
 8004b80:	89bb      	ldrh	r3, [r7, #12]
 8004b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	8013      	strh	r3, [r2, #0]
 8004b96:	e01f      	b.n	8004bd8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bae:	81fb      	strh	r3, [r7, #14]
 8004bb0:	89fb      	ldrh	r3, [r7, #14]
 8004bb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bb6:	81fb      	strh	r3, [r7, #14]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	89fb      	ldrh	r3, [r7, #14]
 8004bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	7b1b      	ldrb	r3, [r3, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 809d 	bne.w	8004d32 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	785b      	ldrb	r3, [r3, #1]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d04c      	beq.n	8004c9a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	823b      	strh	r3, [r7, #16]
 8004c0e:	8a3b      	ldrh	r3, [r7, #16]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <USB_EPClearStall+0x6c>
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	81fb      	strh	r3, [r7, #14]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	89fb      	ldrh	r3, [r7, #14]
 8004c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	78db      	ldrb	r3, [r3, #3]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d06c      	beq.n	8004d32 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6e:	81bb      	strh	r3, [r7, #12]
 8004c70:	89bb      	ldrh	r3, [r7, #12]
 8004c72:	f083 0320 	eor.w	r3, r3, #32
 8004c76:	81bb      	strh	r3, [r7, #12]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	89bb      	ldrh	r3, [r7, #12]
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]
 8004c98:	e04b      	b.n	8004d32 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	82fb      	strh	r3, [r7, #22]
 8004ca8:	8afb      	ldrh	r3, [r7, #22]
 8004caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01b      	beq.n	8004cea <USB_EPClearStall+0x106>
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc8:	82bb      	strh	r3, [r7, #20]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	441a      	add	r2, r3
 8004cd4:	8abb      	ldrh	r3, [r7, #20]
 8004cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d00:	827b      	strh	r3, [r7, #18]
 8004d02:	8a7b      	ldrh	r3, [r7, #18]
 8004d04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d08:	827b      	strh	r3, [r7, #18]
 8004d0a:	8a7b      	ldrh	r3, [r7, #18]
 8004d0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d10:	827b      	strh	r3, [r7, #18]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	441a      	add	r2, r3
 8004d1c:	8a7b      	ldrh	r3, [r7, #18]
 8004d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	460b      	mov	r3, r1
 8004d48:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d103      	bne.n	8004d58 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2280      	movs	r2, #128	; 0x80
 8004d54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr

08004d8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr

08004daa <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr

08004dc0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b08d      	sub	sp, #52	; 0x34
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	4611      	mov	r1, r2
 8004dcc:	461a      	mov	r2, r3
 8004dce:	460b      	mov	r3, r1
 8004dd0:	80fb      	strh	r3, [r7, #6]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004dd6:	88bb      	ldrh	r3, [r7, #4]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	085b      	lsrs	r3, r3, #1
 8004ddc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004de6:	88fb      	ldrh	r3, [r7, #6]
 8004de8:	005a      	lsls	r2, r3, #1
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df8:	e01e      	b.n	8004e38 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	3301      	adds	r3, #1
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e22:	3302      	adds	r3, #2
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	3302      	adds	r3, #2
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	3301      	adds	r3, #1
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	3b01      	subs	r3, #1
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1dd      	bne.n	8004dfa <USB_WritePMA+0x3a>
  }
}
 8004e3e:	bf00      	nop
 8004e40:	3734      	adds	r7, #52	; 0x34
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b08b      	sub	sp, #44	; 0x2c
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	4611      	mov	r1, r2
 8004e54:	461a      	mov	r2, r3
 8004e56:	460b      	mov	r3, r1
 8004e58:	80fb      	strh	r3, [r7, #6]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004e5e:	88bb      	ldrh	r3, [r7, #4]
 8004e60:	085b      	lsrs	r3, r3, #1
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	005a      	lsls	r2, r3, #1
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e7a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e80:	e01b      	b.n	8004eba <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	0a1b      	lsrs	r3, r3, #8
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e0      	bne.n	8004e82 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004ec0:	88bb      	ldrh	r3, [r7, #4]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d007      	beq.n	8004edc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	701a      	strb	r2, [r3, #0]
  }
}
 8004edc:	bf00      	nop
 8004ede:	372c      	adds	r7, #44	; 0x2c
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr

08004ee6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	7c1b      	ldrb	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d115      	bne.n	8004f2a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f02:	2202      	movs	r2, #2
 8004f04:	2181      	movs	r1, #129	; 0x81
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f004 fbe1 	bl	80096ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f16:	2202      	movs	r2, #2
 8004f18:	2101      	movs	r1, #1
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f004 fbd7 	bl	80096ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004f28:	e012      	b.n	8004f50 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f2a:	2340      	movs	r3, #64	; 0x40
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	2181      	movs	r1, #129	; 0x81
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f004 fbcc 	bl	80096ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f3c:	2340      	movs	r3, #64	; 0x40
 8004f3e:	2202      	movs	r2, #2
 8004f40:	2101      	movs	r1, #1
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f004 fbc3 	bl	80096ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f50:	2308      	movs	r3, #8
 8004f52:	2203      	movs	r2, #3
 8004f54:	2182      	movs	r1, #130	; 0x82
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f004 fbb9 	bl	80096ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f62:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f66:	f004 fcd9 	bl	800991c <USBD_static_malloc>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d102      	bne.n	8004f82 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
 8004f80:	e026      	b.n	8004fd0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f88:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	7c1b      	ldrb	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f004 fc79 	bl	80098b0 <USBD_LL_PrepareReceive>
 8004fbe:	e007      	b.n	8004fd0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fc6:	2340      	movs	r3, #64	; 0x40
 8004fc8:	2101      	movs	r1, #1
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f004 fc70 	bl	80098b0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004fea:	2181      	movs	r1, #129	; 0x81
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f004 fb94 	bl	800971a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f004 fb8d 	bl	800971a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005008:	2182      	movs	r1, #130	; 0x82
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f004 fb85 	bl	800971a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00e      	beq.n	800503e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005030:	4618      	mov	r0, r3
 8005032:	f004 fc7f 	bl	8009934 <USBD_static_free>
    pdev->pClassData = NULL;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800503e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005058:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800506e:	2b00      	cmp	r3, #0
 8005070:	d039      	beq.n	80050e6 <USBD_CDC_Setup+0x9e>
 8005072:	2b20      	cmp	r3, #32
 8005074:	d17c      	bne.n	8005170 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	88db      	ldrh	r3, [r3, #6]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d029      	beq.n	80050d2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	b25b      	sxtb	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	da11      	bge.n	80050ac <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005094:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	88d2      	ldrh	r2, [r2, #6]
 800509a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800509c:	6939      	ldr	r1, [r7, #16]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	88db      	ldrh	r3, [r3, #6]
 80050a2:	461a      	mov	r2, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f001 f9f9 	bl	800649c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80050aa:	e068      	b.n	800517e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	785a      	ldrb	r2, [r3, #1]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	88db      	ldrh	r3, [r3, #6]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80050c2:	6939      	ldr	r1, [r7, #16]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	88db      	ldrh	r3, [r3, #6]
 80050c8:	461a      	mov	r2, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f001 fa14 	bl	80064f8 <USBD_CtlPrepareRx>
      break;
 80050d0:	e055      	b.n	800517e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	7850      	ldrb	r0, [r2, #1]
 80050de:	2200      	movs	r2, #0
 80050e0:	6839      	ldr	r1, [r7, #0]
 80050e2:	4798      	blx	r3
      break;
 80050e4:	e04b      	b.n	800517e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	2b0a      	cmp	r3, #10
 80050ec:	d017      	beq.n	800511e <USBD_CDC_Setup+0xd6>
 80050ee:	2b0b      	cmp	r3, #11
 80050f0:	d029      	beq.n	8005146 <USBD_CDC_Setup+0xfe>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d133      	bne.n	800515e <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d107      	bne.n	8005110 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005100:	f107 030c 	add.w	r3, r7, #12
 8005104:	2202      	movs	r2, #2
 8005106:	4619      	mov	r1, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f001 f9c7 	bl	800649c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800510e:	e02e      	b.n	800516e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005110:	6839      	ldr	r1, [r7, #0]
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f001 f958 	bl	80063c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005118:	2302      	movs	r3, #2
 800511a:	75fb      	strb	r3, [r7, #23]
          break;
 800511c:	e027      	b.n	800516e <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005124:	2b03      	cmp	r3, #3
 8005126:	d107      	bne.n	8005138 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005128:	f107 030f 	add.w	r3, r7, #15
 800512c:	2201      	movs	r2, #1
 800512e:	4619      	mov	r1, r3
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f001 f9b3 	bl	800649c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005136:	e01a      	b.n	800516e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f001 f944 	bl	80063c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005140:	2302      	movs	r3, #2
 8005142:	75fb      	strb	r3, [r7, #23]
          break;
 8005144:	e013      	b.n	800516e <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800514c:	2b03      	cmp	r3, #3
 800514e:	d00d      	beq.n	800516c <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005150:	6839      	ldr	r1, [r7, #0]
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 f938 	bl	80063c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005158:	2302      	movs	r3, #2
 800515a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800515c:	e006      	b.n	800516c <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800515e:	6839      	ldr	r1, [r7, #0]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f001 f931 	bl	80063c8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005166:	2302      	movs	r3, #2
 8005168:	75fb      	strb	r3, [r7, #23]
          break;
 800516a:	e000      	b.n	800516e <USBD_CDC_Setup+0x126>
          break;
 800516c:	bf00      	nop
      }
      break;
 800516e:	e006      	b.n	800517e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f001 f928 	bl	80063c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005178:	2302      	movs	r3, #2
 800517a:	75fb      	strb	r3, [r7, #23]
      break;
 800517c:	bf00      	nop
  }

  return ret;
 800517e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800519a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051a2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d03a      	beq.n	8005224 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	331c      	adds	r3, #28
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d029      	beq.n	8005218 <USBD_CDC_DataIn+0x90>
 80051c4:	78fa      	ldrb	r2, [r7, #3]
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	331c      	adds	r3, #28
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	78f9      	ldrb	r1, [r7, #3]
 80051d8:	68b8      	ldr	r0, [r7, #8]
 80051da:	460b      	mov	r3, r1
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4403      	add	r3, r0
 80051e4:	3338      	adds	r3, #56	; 0x38
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80051ec:	fb03 f301 	mul.w	r3, r3, r1
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d110      	bne.n	8005218 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80051f6:	78fa      	ldrb	r2, [r7, #3]
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	331c      	adds	r3, #28
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800520a:	78f9      	ldrb	r1, [r7, #3]
 800520c:	2300      	movs	r3, #0
 800520e:	2200      	movs	r2, #0
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f004 fb2a 	bl	800986a <USBD_LL_Transmit>
 8005216:	e003      	b.n	8005220 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	e000      	b.n	8005226 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005224:	2302      	movs	r3, #2
  }
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	460b      	mov	r3, r1
 8005238:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005240:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	4619      	mov	r1, r3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f004 fb55 	bl	80098f6 <USBD_LL_GetRxDataSize>
 800524c:	4602      	mov	r2, r0
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00d      	beq.n	800527a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005272:	4611      	mov	r1, r2
 8005274:	4798      	blx	r3

    return USBD_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e000      	b.n	800527c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800527a:	2302      	movs	r3, #2
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005292:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800529a:	2b00      	cmp	r3, #0
 800529c:	d015      	beq.n	80052ca <USBD_CDC_EP0_RxReady+0x46>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80052a4:	2bff      	cmp	r3, #255	; 0xff
 80052a6:	d010      	beq.n	80052ca <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80052b6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80052be:	b292      	uxth	r2, r2
 80052c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	22ff      	movs	r2, #255	; 0xff
 80052c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2243      	movs	r2, #67	; 0x43
 80052e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80052e2:	4b03      	ldr	r3, [pc, #12]	; (80052f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000098 	.word	0x20000098

080052f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2243      	movs	r2, #67	; 0x43
 8005300:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005302:	4b03      	ldr	r3, [pc, #12]	; (8005310 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000054 	.word	0x20000054

08005314 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2243      	movs	r2, #67	; 0x43
 8005320:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005322:	4b03      	ldr	r3, [pc, #12]	; (8005330 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	200000dc 	.word	0x200000dc

08005334 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	220a      	movs	r2, #10
 8005340:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005342:	4b03      	ldr	r3, [pc, #12]	; (8005350 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20000010 	.word	0x20000010

08005354 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800535e:	2302      	movs	r3, #2
 8005360:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005374:	7bfb      	ldrb	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005394:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800539e:	88fa      	ldrh	r2, [r7, #6]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr

080053b2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053c2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01c      	beq.n	800542c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d115      	bne.n	8005428 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2201      	movs	r2, #1
 8005400:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800541a:	b29b      	uxth	r3, r3
 800541c:	2181      	movs	r1, #129	; 0x81
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f004 fa23 	bl	800986a <USBD_LL_Transmit>

      return USBD_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	e002      	b.n	800542e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800542c:	2302      	movs	r3, #2
  }
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005444:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d017      	beq.n	8005480 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	7c1b      	ldrb	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d109      	bne.n	800546c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800545e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005462:	2101      	movs	r1, #1
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f004 fa23 	bl	80098b0 <USBD_LL_PrepareReceive>
 800546a:	e007      	b.n	800547c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005472:	2340      	movs	r3, #64	; 0x40
 8005474:	2101      	movs	r1, #1
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f004 fa1a 	bl	80098b0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	e000      	b.n	8005482 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005480:	2302      	movs	r3, #2
  }
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	4613      	mov	r3, r2
 8005496:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800549e:	2302      	movs	r3, #2
 80054a0:	e01a      	b.n	80054d8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	79fa      	ldrb	r2, [r7, #7]
 80054ce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f004 f887 	bl	80095e4 <USBD_LL_Init>

  return USBD_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d006      	beq.n	8005502 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	73fb      	strb	r3, [r7, #15]
 8005500:	e001      	b.n	8005506 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005502:	2302      	movs	r3, #2
 8005504:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005506:	7bfb      	ldrb	r3, [r7, #15]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr

08005512 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f004 f8bc 	bl	8009698 <USBD_LL_Start>

  return USBD_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr

0800553e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	460b      	mov	r3, r1
 8005548:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800554a:	2302      	movs	r3, #2
 800554c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00c      	beq.n	8005572 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	78fa      	ldrb	r2, [r7, #3]
 8005562:	4611      	mov	r1, r2
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	4798      	blx	r3
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	78fa      	ldrb	r2, [r7, #3]
 8005592:	4611      	mov	r1, r2
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	4798      	blx	r3

  return USBD_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fecb 	bl	8006350 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80055c8:	461a      	mov	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80055d6:	f003 031f 	and.w	r3, r3, #31
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d00c      	beq.n	80055f8 <USBD_LL_SetupStage+0x56>
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d302      	bcc.n	80055e8 <USBD_LL_SetupStage+0x46>
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d010      	beq.n	8005608 <USBD_LL_SetupStage+0x66>
 80055e6:	e017      	b.n	8005618 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f9cb 	bl	800598c <USBD_StdDevReq>
      break;
 80055f6:	e01a      	b.n	800562e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fa2d 	bl	8005a60 <USBD_StdItfReq>
      break;
 8005606:	e012      	b.n	800562e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fa6b 	bl	8005aec <USBD_StdEPReq>
      break;
 8005616:	e00a      	b.n	800562e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800561e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005622:	b2db      	uxtb	r3, r3
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f004 f896 	bl	8009758 <USBD_LL_StallEP>
      break;
 800562c:	bf00      	nop
  }

  return USBD_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	460b      	mov	r3, r1
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005646:	7afb      	ldrb	r3, [r7, #11]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d14b      	bne.n	80056e4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005652:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800565a:	2b03      	cmp	r3, #3
 800565c:	d134      	bne.n	80056c8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	d919      	bls.n	800569e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	1ad2      	subs	r2, r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005680:	429a      	cmp	r2, r3
 8005682:	d203      	bcs.n	800568c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005688:	b29b      	uxth	r3, r3
 800568a:	e002      	b.n	8005692 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005690:	b29b      	uxth	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 ff4c 	bl	8006534 <USBD_CtlContinueRx>
 800569c:	e038      	b.n	8005710 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d105      	bne.n	80056c0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 ff49 	bl	8006558 <USBD_CtlSendStatus>
 80056c6:	e023      	b.n	8005710 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056ce:	2b05      	cmp	r3, #5
 80056d0:	d11e      	bne.n	8005710 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80056da:	2100      	movs	r1, #0
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f004 f83b 	bl	8009758 <USBD_LL_StallEP>
 80056e2:	e015      	b.n	8005710 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00d      	beq.n	800570c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d108      	bne.n	800570c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	7afa      	ldrb	r2, [r7, #11]
 8005704:	4611      	mov	r1, r2
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	4798      	blx	r3
 800570a:	e001      	b.n	8005710 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800570c:	2302      	movs	r3, #2
 800570e:	e000      	b.n	8005712 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b086      	sub	sp, #24
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	460b      	mov	r3, r1
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005728:	7afb      	ldrb	r3, [r7, #11]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d17f      	bne.n	800582e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3314      	adds	r3, #20
 8005732:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800573a:	2b02      	cmp	r3, #2
 800573c:	d15c      	bne.n	80057f8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	429a      	cmp	r2, r3
 8005748:	d915      	bls.n	8005776 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	1ad2      	subs	r2, r2, r3
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	b29b      	uxth	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 feb6 	bl	80064d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005768:	2300      	movs	r3, #0
 800576a:	2200      	movs	r2, #0
 800576c:	2100      	movs	r1, #0
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f004 f89e 	bl	80098b0 <USBD_LL_PrepareReceive>
 8005774:	e04e      	b.n	8005814 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	6912      	ldr	r2, [r2, #16]
 800577e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005782:	fb02 f201 	mul.w	r2, r2, r1
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d11c      	bne.n	80057c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005794:	429a      	cmp	r2, r3
 8005796:	d316      	bcc.n	80057c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d20f      	bcs.n	80057c6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80057a6:	2200      	movs	r2, #0
 80057a8:	2100      	movs	r1, #0
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fe92 	bl	80064d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057b8:	2300      	movs	r3, #0
 80057ba:	2200      	movs	r2, #0
 80057bc:	2100      	movs	r1, #0
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f004 f876 	bl	80098b0 <USBD_LL_PrepareReceive>
 80057c4:	e026      	b.n	8005814 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d105      	bne.n	80057e8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80057e8:	2180      	movs	r1, #128	; 0x80
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f003 ffb4 	bl	8009758 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 fec4 	bl	800657e <USBD_CtlReceiveStatus>
 80057f6:	e00d      	b.n	8005814 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d004      	beq.n	800580c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800580c:	2180      	movs	r1, #128	; 0x80
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f003 ffa2 	bl	8009758 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800581a:	2b01      	cmp	r3, #1
 800581c:	d11d      	bne.n	800585a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f7ff fe83 	bl	800552a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800582c:	e015      	b.n	800585a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00d      	beq.n	8005856 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005840:	2b03      	cmp	r3, #3
 8005842:	d108      	bne.n	8005856 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	7afa      	ldrb	r2, [r7, #11]
 800584e:	4611      	mov	r1, r2
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	4798      	blx	r3
 8005854:	e001      	b.n	800585a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005856:	2302      	movs	r3, #2
 8005858:	e000      	b.n	800585c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800586c:	2340      	movs	r3, #64	; 0x40
 800586e:	2200      	movs	r2, #0
 8005870:	2100      	movs	r1, #0
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f003 ff2b 	bl	80096ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2240      	movs	r2, #64	; 0x40
 8005884:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005888:	2340      	movs	r3, #64	; 0x40
 800588a:	2200      	movs	r2, #0
 800588c:	2180      	movs	r1, #128	; 0x80
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f003 ff1d 	bl	80096ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2240      	movs	r2, #64	; 0x40
 800589e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6852      	ldr	r2, [r2, #4]
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	4611      	mov	r1, r2
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	4798      	blx	r3
  }

  return USBD_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	460b      	mov	r3, r1
 80058f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	78fa      	ldrb	r2, [r7, #3]
 80058f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr

08005904 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2204      	movs	r2, #4
 800591c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr

0800592c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800593a:	2b04      	cmp	r3, #4
 800593c:	d105      	bne.n	800594a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr

08005956 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005964:	2b03      	cmp	r3, #3
 8005966:	d10b      	bne.n	8005980 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d004      	beq.n	80059b0 <USBD_StdDevReq+0x24>
 80059a6:	2b40      	cmp	r3, #64	; 0x40
 80059a8:	d002      	beq.n	80059b0 <USBD_StdDevReq+0x24>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d008      	beq.n	80059c0 <USBD_StdDevReq+0x34>
 80059ae:	e04c      	b.n	8005a4a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
      break;
 80059be:	e049      	b.n	8005a54 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	2b09      	cmp	r3, #9
 80059c6:	d83a      	bhi.n	8005a3e <USBD_StdDevReq+0xb2>
 80059c8:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <USBD_StdDevReq+0x44>)
 80059ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ce:	bf00      	nop
 80059d0:	08005a21 	.word	0x08005a21
 80059d4:	08005a35 	.word	0x08005a35
 80059d8:	08005a3f 	.word	0x08005a3f
 80059dc:	08005a2b 	.word	0x08005a2b
 80059e0:	08005a3f 	.word	0x08005a3f
 80059e4:	08005a03 	.word	0x08005a03
 80059e8:	080059f9 	.word	0x080059f9
 80059ec:	08005a3f 	.word	0x08005a3f
 80059f0:	08005a17 	.word	0x08005a17
 80059f4:	08005a0d 	.word	0x08005a0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f9d4 	bl	8005da8 <USBD_GetDescriptor>
          break;
 8005a00:	e022      	b.n	8005a48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fb37 	bl	8006078 <USBD_SetAddress>
          break;
 8005a0a:	e01d      	b.n	8005a48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fb74 	bl	80060fc <USBD_SetConfig>
          break;
 8005a14:	e018      	b.n	8005a48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fbfd 	bl	8006218 <USBD_GetConfig>
          break;
 8005a1e:	e013      	b.n	8005a48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fc2c 	bl	8006280 <USBD_GetStatus>
          break;
 8005a28:	e00e      	b.n	8005a48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fc5a 	bl	80062e6 <USBD_SetFeature>
          break;
 8005a32:	e009      	b.n	8005a48 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a34:	6839      	ldr	r1, [r7, #0]
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fc69 	bl	800630e <USBD_ClrFeature>
          break;
 8005a3c:	e004      	b.n	8005a48 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fcc1 	bl	80063c8 <USBD_CtlError>
          break;
 8005a46:	bf00      	nop
      }
      break;
 8005a48:	e004      	b.n	8005a54 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fcbb 	bl	80063c8 <USBD_CtlError>
      break;
 8005a52:	bf00      	nop
  }

  return ret;
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop

08005a60 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d003      	beq.n	8005a82 <USBD_StdItfReq+0x22>
 8005a7a:	2b40      	cmp	r3, #64	; 0x40
 8005a7c:	d001      	beq.n	8005a82 <USBD_StdItfReq+0x22>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d12a      	bne.n	8005ad8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d81d      	bhi.n	8005aca <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	889b      	ldrh	r3, [r3, #4]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d813      	bhi.n	8005ac0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	4798      	blx	r3
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	88db      	ldrh	r3, [r3, #6]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d110      	bne.n	8005ad4 <USBD_StdItfReq+0x74>
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10d      	bne.n	8005ad4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fd4d 	bl	8006558 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005abe:	e009      	b.n	8005ad4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fc80 	bl	80063c8 <USBD_CtlError>
          break;
 8005ac8:	e004      	b.n	8005ad4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fc7b 	bl	80063c8 <USBD_CtlError>
          break;
 8005ad2:	e000      	b.n	8005ad6 <USBD_StdItfReq+0x76>
          break;
 8005ad4:	bf00      	nop
      }
      break;
 8005ad6:	e004      	b.n	8005ae2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fc74 	bl	80063c8 <USBD_CtlError>
      break;
 8005ae0:	bf00      	nop
  }

  return USBD_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	889b      	ldrh	r3, [r3, #4]
 8005afe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d004      	beq.n	8005b16 <USBD_StdEPReq+0x2a>
 8005b0c:	2b40      	cmp	r3, #64	; 0x40
 8005b0e:	d002      	beq.n	8005b16 <USBD_StdEPReq+0x2a>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <USBD_StdEPReq+0x3a>
 8005b14:	e13d      	b.n	8005d92 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	4798      	blx	r3
      break;
 8005b24:	e13a      	b.n	8005d9c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d10a      	bne.n	8005b48 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
 8005b40:	4603      	mov	r3, r0
 8005b42:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	e12a      	b.n	8005d9e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d03e      	beq.n	8005bce <USBD_StdEPReq+0xe2>
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d002      	beq.n	8005b5a <USBD_StdEPReq+0x6e>
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d070      	beq.n	8005c3a <USBD_StdEPReq+0x14e>
 8005b58:	e115      	b.n	8005d86 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d002      	beq.n	8005b6a <USBD_StdEPReq+0x7e>
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d015      	beq.n	8005b94 <USBD_StdEPReq+0xa8>
 8005b68:	e02b      	b.n	8005bc2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00c      	beq.n	8005b8a <USBD_StdEPReq+0x9e>
 8005b70:	7bbb      	ldrb	r3, [r7, #14]
 8005b72:	2b80      	cmp	r3, #128	; 0x80
 8005b74:	d009      	beq.n	8005b8a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005b76:	7bbb      	ldrb	r3, [r7, #14]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f003 fdec 	bl	8009758 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005b80:	2180      	movs	r1, #128	; 0x80
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f003 fde8 	bl	8009758 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b88:	e020      	b.n	8005bcc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fc1b 	bl	80063c8 <USBD_CtlError>
              break;
 8005b92:	e01b      	b.n	8005bcc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	885b      	ldrh	r3, [r3, #2]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10e      	bne.n	8005bba <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005b9c:	7bbb      	ldrb	r3, [r7, #14]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00b      	beq.n	8005bba <USBD_StdEPReq+0xce>
 8005ba2:	7bbb      	ldrb	r3, [r7, #14]
 8005ba4:	2b80      	cmp	r3, #128	; 0x80
 8005ba6:	d008      	beq.n	8005bba <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	88db      	ldrh	r3, [r3, #6]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d104      	bne.n	8005bba <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005bb0:	7bbb      	ldrb	r3, [r7, #14]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f003 fdcf 	bl	8009758 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fccc 	bl	8006558 <USBD_CtlSendStatus>

              break;
 8005bc0:	e004      	b.n	8005bcc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fbff 	bl	80063c8 <USBD_CtlError>
              break;
 8005bca:	bf00      	nop
          }
          break;
 8005bcc:	e0e0      	b.n	8005d90 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d002      	beq.n	8005bde <USBD_StdEPReq+0xf2>
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d015      	beq.n	8005c08 <USBD_StdEPReq+0x11c>
 8005bdc:	e026      	b.n	8005c2c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bde:	7bbb      	ldrb	r3, [r7, #14]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00c      	beq.n	8005bfe <USBD_StdEPReq+0x112>
 8005be4:	7bbb      	ldrb	r3, [r7, #14]
 8005be6:	2b80      	cmp	r3, #128	; 0x80
 8005be8:	d009      	beq.n	8005bfe <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005bea:	7bbb      	ldrb	r3, [r7, #14]
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f003 fdb2 	bl	8009758 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005bf4:	2180      	movs	r1, #128	; 0x80
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f003 fdae 	bl	8009758 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bfc:	e01c      	b.n	8005c38 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fbe1 	bl	80063c8 <USBD_CtlError>
              break;
 8005c06:	e017      	b.n	8005c38 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	885b      	ldrh	r3, [r3, #2]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d112      	bne.n	8005c36 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c10:	7bbb      	ldrb	r3, [r7, #14]
 8005c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d004      	beq.n	8005c24 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f003 fdb9 	bl	8009796 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fc97 	bl	8006558 <USBD_CtlSendStatus>
              }
              break;
 8005c2a:	e004      	b.n	8005c36 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fbca 	bl	80063c8 <USBD_CtlError>
              break;
 8005c34:	e000      	b.n	8005c38 <USBD_StdEPReq+0x14c>
              break;
 8005c36:	bf00      	nop
          }
          break;
 8005c38:	e0aa      	b.n	8005d90 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d002      	beq.n	8005c4a <USBD_StdEPReq+0x15e>
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d032      	beq.n	8005cae <USBD_StdEPReq+0x1c2>
 8005c48:	e097      	b.n	8005d7a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c4a:	7bbb      	ldrb	r3, [r7, #14]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d007      	beq.n	8005c60 <USBD_StdEPReq+0x174>
 8005c50:	7bbb      	ldrb	r3, [r7, #14]
 8005c52:	2b80      	cmp	r3, #128	; 0x80
 8005c54:	d004      	beq.n	8005c60 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005c56:	6839      	ldr	r1, [r7, #0]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fbb5 	bl	80063c8 <USBD_CtlError>
                break;
 8005c5e:	e091      	b.n	8005d84 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	da0b      	bge.n	8005c80 <USBD_StdEPReq+0x194>
 8005c68:	7bbb      	ldrb	r3, [r7, #14]
 8005c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	3310      	adds	r3, #16
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	e00b      	b.n	8005c98 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c80:	7bbb      	ldrb	r3, [r7, #14]
 8005c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4413      	add	r3, r2
 8005c96:	3304      	adds	r3, #4
 8005c98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fbf8 	bl	800649c <USBD_CtlSendData>
              break;
 8005cac:	e06a      	b.n	8005d84 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005cae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	da11      	bge.n	8005cda <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cb6:	7bbb      	ldrb	r3, [r7, #14]
 8005cb8:	f003 020f 	and.w	r2, r3, #15
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	3318      	adds	r3, #24
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d117      	bne.n	8005d00 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fb78 	bl	80063c8 <USBD_CtlError>
                  break;
 8005cd8:	e054      	b.n	8005d84 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005cda:	7bbb      	ldrb	r3, [r7, #14]
 8005cdc:	f003 020f 	and.w	r2, r3, #15
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	440b      	add	r3, r1
 8005cec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d104      	bne.n	8005d00 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fb65 	bl	80063c8 <USBD_CtlError>
                  break;
 8005cfe:	e041      	b.n	8005d84 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	da0b      	bge.n	8005d20 <USBD_StdEPReq+0x234>
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	3310      	adds	r3, #16
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	e00b      	b.n	8005d38 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d26:	4613      	mov	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	4413      	add	r3, r2
 8005d36:	3304      	adds	r3, #4
 8005d38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d3a:	7bbb      	ldrb	r3, [r7, #14]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <USBD_StdEPReq+0x25a>
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
 8005d42:	2b80      	cmp	r3, #128	; 0x80
 8005d44:	d103      	bne.n	8005d4e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	e00e      	b.n	8005d6c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005d4e:	7bbb      	ldrb	r3, [r7, #14]
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f003 fd3e 	bl	80097d4 <USBD_LL_IsStallEP>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2201      	movs	r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e002      	b.n	8005d6c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	4619      	mov	r1, r3
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fb92 	bl	800649c <USBD_CtlSendData>
              break;
 8005d78:	e004      	b.n	8005d84 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fb23 	bl	80063c8 <USBD_CtlError>
              break;
 8005d82:	bf00      	nop
          }
          break;
 8005d84:	e004      	b.n	8005d90 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fb1d 	bl	80063c8 <USBD_CtlError>
          break;
 8005d8e:	bf00      	nop
      }
      break;
 8005d90:	e004      	b.n	8005d9c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fb17 	bl	80063c8 <USBD_CtlError>
      break;
 8005d9a:	bf00      	nop
  }

  return ret;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	885b      	ldrh	r3, [r3, #2]
 8005dc2:	0a1b      	lsrs	r3, r3, #8
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	2b06      	cmp	r3, #6
 8005dca:	f200 8128 	bhi.w	800601e <USBD_GetDescriptor+0x276>
 8005dce:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <USBD_GetDescriptor+0x2c>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005df1 	.word	0x08005df1
 8005dd8:	08005e09 	.word	0x08005e09
 8005ddc:	08005e49 	.word	0x08005e49
 8005de0:	0800601f 	.word	0x0800601f
 8005de4:	0800601f 	.word	0x0800601f
 8005de8:	08005fbf 	.word	0x08005fbf
 8005dec:	08005feb 	.word	0x08005feb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	7c12      	ldrb	r2, [r2, #16]
 8005dfc:	f107 0108 	add.w	r1, r7, #8
 8005e00:	4610      	mov	r0, r2
 8005e02:	4798      	blx	r3
 8005e04:	60f8      	str	r0, [r7, #12]
      break;
 8005e06:	e112      	b.n	800602e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	7c1b      	ldrb	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10d      	bne.n	8005e2c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	f107 0208 	add.w	r2, r7, #8
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	4798      	blx	r3
 8005e20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3301      	adds	r3, #1
 8005e26:	2202      	movs	r2, #2
 8005e28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e2a:	e100      	b.n	800602e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	f107 0208 	add.w	r2, r7, #8
 8005e38:	4610      	mov	r0, r2
 8005e3a:	4798      	blx	r3
 8005e3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	2202      	movs	r2, #2
 8005e44:	701a      	strb	r2, [r3, #0]
      break;
 8005e46:	e0f2      	b.n	800602e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	885b      	ldrh	r3, [r3, #2]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	f200 80ac 	bhi.w	8005fac <USBD_GetDescriptor+0x204>
 8005e54:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <USBD_GetDescriptor+0xb4>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	08005e75 	.word	0x08005e75
 8005e60:	08005ea9 	.word	0x08005ea9
 8005e64:	08005edd 	.word	0x08005edd
 8005e68:	08005f11 	.word	0x08005f11
 8005e6c:	08005f45 	.word	0x08005f45
 8005e70:	08005f79 	.word	0x08005f79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00b      	beq.n	8005e98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	7c12      	ldrb	r2, [r2, #16]
 8005e8c:	f107 0108 	add.w	r1, r7, #8
 8005e90:	4610      	mov	r0, r2
 8005e92:	4798      	blx	r3
 8005e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e96:	e091      	b.n	8005fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa94 	bl	80063c8 <USBD_CtlError>
            err++;
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ea6:	e089      	b.n	8005fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	7c12      	ldrb	r2, [r2, #16]
 8005ec0:	f107 0108 	add.w	r1, r7, #8
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4798      	blx	r3
 8005ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005eca:	e077      	b.n	8005fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ecc:	6839      	ldr	r1, [r7, #0]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fa7a 	bl	80063c8 <USBD_CtlError>
            err++;
 8005ed4:	7afb      	ldrb	r3, [r7, #11]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8005eda:	e06f      	b.n	8005fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00b      	beq.n	8005f00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	7c12      	ldrb	r2, [r2, #16]
 8005ef4:	f107 0108 	add.w	r1, r7, #8
 8005ef8:	4610      	mov	r0, r2
 8005efa:	4798      	blx	r3
 8005efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005efe:	e05d      	b.n	8005fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa60 	bl	80063c8 <USBD_CtlError>
            err++;
 8005f08:	7afb      	ldrb	r3, [r7, #11]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f0e:	e055      	b.n	8005fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00b      	beq.n	8005f34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	7c12      	ldrb	r2, [r2, #16]
 8005f28:	f107 0108 	add.w	r1, r7, #8
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4798      	blx	r3
 8005f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f32:	e043      	b.n	8005fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f34:	6839      	ldr	r1, [r7, #0]
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa46 	bl	80063c8 <USBD_CtlError>
            err++;
 8005f3c:	7afb      	ldrb	r3, [r7, #11]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	72fb      	strb	r3, [r7, #11]
          break;
 8005f42:	e03b      	b.n	8005fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	7c12      	ldrb	r2, [r2, #16]
 8005f5c:	f107 0108 	add.w	r1, r7, #8
 8005f60:	4610      	mov	r0, r2
 8005f62:	4798      	blx	r3
 8005f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f66:	e029      	b.n	8005fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fa2c 	bl	80063c8 <USBD_CtlError>
            err++;
 8005f70:	7afb      	ldrb	r3, [r7, #11]
 8005f72:	3301      	adds	r3, #1
 8005f74:	72fb      	strb	r3, [r7, #11]
          break;
 8005f76:	e021      	b.n	8005fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	7c12      	ldrb	r2, [r2, #16]
 8005f90:	f107 0108 	add.w	r1, r7, #8
 8005f94:	4610      	mov	r0, r2
 8005f96:	4798      	blx	r3
 8005f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f9a:	e00f      	b.n	8005fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fa12 	bl	80063c8 <USBD_CtlError>
            err++;
 8005fa4:	7afb      	ldrb	r3, [r7, #11]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8005faa:	e007      	b.n	8005fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa0a 	bl	80063c8 <USBD_CtlError>
          err++;
 8005fb4:	7afb      	ldrb	r3, [r7, #11]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005fba:	e038      	b.n	800602e <USBD_GetDescriptor+0x286>
 8005fbc:	e037      	b.n	800602e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	7c1b      	ldrb	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d109      	bne.n	8005fda <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fce:	f107 0208 	add.w	r2, r7, #8
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	4798      	blx	r3
 8005fd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fd8:	e029      	b.n	800602e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f9f3 	bl	80063c8 <USBD_CtlError>
        err++;
 8005fe2:	7afb      	ldrb	r3, [r7, #11]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	72fb      	strb	r3, [r7, #11]
      break;
 8005fe8:	e021      	b.n	800602e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	7c1b      	ldrb	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10d      	bne.n	800600e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	f107 0208 	add.w	r2, r7, #8
 8005ffe:	4610      	mov	r0, r2
 8006000:	4798      	blx	r3
 8006002:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	3301      	adds	r3, #1
 8006008:	2207      	movs	r2, #7
 800600a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800600c:	e00f      	b.n	800602e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f9d9 	bl	80063c8 <USBD_CtlError>
        err++;
 8006016:	7afb      	ldrb	r3, [r7, #11]
 8006018:	3301      	adds	r3, #1
 800601a:	72fb      	strb	r3, [r7, #11]
      break;
 800601c:	e007      	b.n	800602e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f9d1 	bl	80063c8 <USBD_CtlError>
      err++;
 8006026:	7afb      	ldrb	r3, [r7, #11]
 8006028:	3301      	adds	r3, #1
 800602a:	72fb      	strb	r3, [r7, #11]
      break;
 800602c:	bf00      	nop
  }

  if (err != 0U)
 800602e:	7afb      	ldrb	r3, [r7, #11]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d11c      	bne.n	800606e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006034:	893b      	ldrh	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d011      	beq.n	800605e <USBD_GetDescriptor+0x2b6>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	88db      	ldrh	r3, [r3, #6]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00d      	beq.n	800605e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	88da      	ldrh	r2, [r3, #6]
 8006046:	893b      	ldrh	r3, [r7, #8]
 8006048:	4293      	cmp	r3, r2
 800604a:	bf28      	it	cs
 800604c:	4613      	movcs	r3, r2
 800604e:	b29b      	uxth	r3, r3
 8006050:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006052:	893b      	ldrh	r3, [r7, #8]
 8006054:	461a      	mov	r2, r3
 8006056:	68f9      	ldr	r1, [r7, #12]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fa1f 	bl	800649c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	88db      	ldrh	r3, [r3, #6]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d104      	bne.n	8006070 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fa76 	bl	8006558 <USBD_CtlSendStatus>
 800606c:	e000      	b.n	8006070 <USBD_GetDescriptor+0x2c8>
    return;
 800606e:	bf00      	nop
    }
  }
}
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop

08006078 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	889b      	ldrh	r3, [r3, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d130      	bne.n	80060ec <USBD_SetAddress+0x74>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	88db      	ldrh	r3, [r3, #6]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d12c      	bne.n	80060ec <USBD_SetAddress+0x74>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	885b      	ldrh	r3, [r3, #2]
 8006096:	2b7f      	cmp	r3, #127	; 0x7f
 8006098:	d828      	bhi.n	80060ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	885b      	ldrh	r3, [r3, #2]
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d104      	bne.n	80060ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f988 	bl	80063c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b8:	e01c      	b.n	80060f4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	7bfa      	ldrb	r2, [r7, #15]
 80060be:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f003 fbb0 	bl	800982c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fa43 	bl	8006558 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d004      	beq.n	80060e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e0:	e008      	b.n	80060f4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ea:	e003      	b.n	80060f4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f96a 	bl	80063c8 <USBD_CtlError>
  }
}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	885b      	ldrh	r3, [r3, #2]
 800610a:	b2da      	uxtb	r2, r3
 800610c:	4b41      	ldr	r3, [pc, #260]	; (8006214 <USBD_SetConfig+0x118>)
 800610e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006110:	4b40      	ldr	r3, [pc, #256]	; (8006214 <USBD_SetConfig+0x118>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d904      	bls.n	8006122 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f954 	bl	80063c8 <USBD_CtlError>
 8006120:	e075      	b.n	800620e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006128:	2b02      	cmp	r3, #2
 800612a:	d002      	beq.n	8006132 <USBD_SetConfig+0x36>
 800612c:	2b03      	cmp	r3, #3
 800612e:	d023      	beq.n	8006178 <USBD_SetConfig+0x7c>
 8006130:	e062      	b.n	80061f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006132:	4b38      	ldr	r3, [pc, #224]	; (8006214 <USBD_SetConfig+0x118>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01a      	beq.n	8006170 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800613a:	4b36      	ldr	r3, [pc, #216]	; (8006214 <USBD_SetConfig+0x118>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2203      	movs	r2, #3
 8006148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800614c:	4b31      	ldr	r3, [pc, #196]	; (8006214 <USBD_SetConfig+0x118>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff f9f3 	bl	800553e <USBD_SetClassConfig>
 8006158:	4603      	mov	r3, r0
 800615a:	2b02      	cmp	r3, #2
 800615c:	d104      	bne.n	8006168 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f931 	bl	80063c8 <USBD_CtlError>
            return;
 8006166:	e052      	b.n	800620e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f9f5 	bl	8006558 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800616e:	e04e      	b.n	800620e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f9f1 	bl	8006558 <USBD_CtlSendStatus>
        break;
 8006176:	e04a      	b.n	800620e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006178:	4b26      	ldr	r3, [pc, #152]	; (8006214 <USBD_SetConfig+0x118>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d112      	bne.n	80061a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006188:	4b22      	ldr	r3, [pc, #136]	; (8006214 <USBD_SetConfig+0x118>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006192:	4b20      	ldr	r3, [pc, #128]	; (8006214 <USBD_SetConfig+0x118>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff f9ef 	bl	800557c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f9da 	bl	8006558 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80061a4:	e033      	b.n	800620e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80061a6:	4b1b      	ldr	r3, [pc, #108]	; (8006214 <USBD_SetConfig+0x118>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d01d      	beq.n	80061f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff f9dd 	bl	800557c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80061c2:	4b14      	ldr	r3, [pc, #80]	; (8006214 <USBD_SetConfig+0x118>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80061cc:	4b11      	ldr	r3, [pc, #68]	; (8006214 <USBD_SetConfig+0x118>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff f9b3 	bl	800553e <USBD_SetClassConfig>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d104      	bne.n	80061e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80061de:	6839      	ldr	r1, [r7, #0]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f8f1 	bl	80063c8 <USBD_CtlError>
            return;
 80061e6:	e012      	b.n	800620e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f9b5 	bl	8006558 <USBD_CtlSendStatus>
        break;
 80061ee:	e00e      	b.n	800620e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f9b1 	bl	8006558 <USBD_CtlSendStatus>
        break;
 80061f6:	e00a      	b.n	800620e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f8e4 	bl	80063c8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006200:	4b04      	ldr	r3, [pc, #16]	; (8006214 <USBD_SetConfig+0x118>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff f9b8 	bl	800557c <USBD_ClrClassConfig>
        break;
 800620c:	bf00      	nop
    }
  }
}
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	200001a0 	.word	0x200001a0

08006218 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	88db      	ldrh	r3, [r3, #6]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d004      	beq.n	8006234 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f8cb 	bl	80063c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006232:	e021      	b.n	8006278 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800623a:	2b01      	cmp	r3, #1
 800623c:	db17      	blt.n	800626e <USBD_GetConfig+0x56>
 800623e:	2b02      	cmp	r3, #2
 8006240:	dd02      	ble.n	8006248 <USBD_GetConfig+0x30>
 8006242:	2b03      	cmp	r3, #3
 8006244:	d00b      	beq.n	800625e <USBD_GetConfig+0x46>
 8006246:	e012      	b.n	800626e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3308      	adds	r3, #8
 8006252:	2201      	movs	r2, #1
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f920 	bl	800649c <USBD_CtlSendData>
        break;
 800625c:	e00c      	b.n	8006278 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	3304      	adds	r3, #4
 8006262:	2201      	movs	r2, #1
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f918 	bl	800649c <USBD_CtlSendData>
        break;
 800626c:	e004      	b.n	8006278 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f8a9 	bl	80063c8 <USBD_CtlError>
        break;
 8006276:	bf00      	nop
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006290:	3b01      	subs	r3, #1
 8006292:	2b02      	cmp	r3, #2
 8006294:	d81e      	bhi.n	80062d4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	88db      	ldrh	r3, [r3, #6]
 800629a:	2b02      	cmp	r3, #2
 800629c:	d004      	beq.n	80062a8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f891 	bl	80063c8 <USBD_CtlError>
        break;
 80062a6:	e01a      	b.n	80062de <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f043 0202 	orr.w	r2, r3, #2
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	330c      	adds	r3, #12
 80062c8:	2202      	movs	r2, #2
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f8e5 	bl	800649c <USBD_CtlSendData>
      break;
 80062d2:	e004      	b.n	80062de <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f876 	bl	80063c8 <USBD_CtlError>
      break;
 80062dc:	bf00      	nop
  }
}
 80062de:	bf00      	nop
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	885b      	ldrh	r3, [r3, #2]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d106      	bne.n	8006306 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f929 	bl	8006558 <USBD_CtlSendStatus>
  }
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631e:	3b01      	subs	r3, #1
 8006320:	2b02      	cmp	r3, #2
 8006322:	d80b      	bhi.n	800633c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	885b      	ldrh	r3, [r3, #2]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d10c      	bne.n	8006346 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f90f 	bl	8006558 <USBD_CtlSendStatus>
      }
      break;
 800633a:	e004      	b.n	8006346 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f842 	bl	80063c8 <USBD_CtlError>
      break;
 8006344:	e000      	b.n	8006348 <USBD_ClrFeature+0x3a>
      break;
 8006346:	bf00      	nop
  }
}
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781a      	ldrb	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	785a      	ldrb	r2, [r3, #1]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	3302      	adds	r3, #2
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	b29a      	uxth	r2, r3
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	3303      	adds	r3, #3
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	b29b      	uxth	r3, r3
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	b29b      	uxth	r3, r3
 800637e:	4413      	add	r3, r2
 8006380:	b29a      	uxth	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	3304      	adds	r3, #4
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	b29a      	uxth	r2, r3
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	3305      	adds	r3, #5
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	b29b      	uxth	r3, r3
 800639a:	4413      	add	r3, r2
 800639c:	b29a      	uxth	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	3306      	adds	r3, #6
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	3307      	adds	r3, #7
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	4413      	add	r3, r2
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	80da      	strh	r2, [r3, #6]

}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr

080063c8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80063d2:	2180      	movs	r1, #128	; 0x80
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f003 f9bf 	bl	8009758 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80063da:	2100      	movs	r1, #0
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f003 f9bb 	bl	8009758 <USBD_LL_StallEP>
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b086      	sub	sp, #24
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d032      	beq.n	8006466 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 f834 	bl	800646e <USBD_GetLen>
 8006406:	4603      	mov	r3, r0
 8006408:	3301      	adds	r3, #1
 800640a:	b29b      	uxth	r3, r3
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	75fa      	strb	r2, [r7, #23]
 800641a:	461a      	mov	r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	4413      	add	r3, r2
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	7812      	ldrb	r2, [r2, #0]
 8006424:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006426:	7dfb      	ldrb	r3, [r7, #23]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	75fa      	strb	r2, [r7, #23]
 800642c:	461a      	mov	r2, r3
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4413      	add	r3, r2
 8006432:	2203      	movs	r2, #3
 8006434:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006436:	e012      	b.n	800645e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	60fa      	str	r2, [r7, #12]
 800643e:	7dfa      	ldrb	r2, [r7, #23]
 8006440:	1c51      	adds	r1, r2, #1
 8006442:	75f9      	strb	r1, [r7, #23]
 8006444:	4611      	mov	r1, r2
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	440a      	add	r2, r1
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	75fa      	strb	r2, [r7, #23]
 8006454:	461a      	mov	r2, r3
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4413      	add	r3, r2
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e8      	bne.n	8006438 <USBD_GetString+0x4e>
    }
  }
}
 8006466:	bf00      	nop
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800646e:	b480      	push	{r7}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800647a:	e005      	b.n	8006488 <USBD_GetLen+0x1a>
  {
    len++;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	3301      	adds	r3, #1
 8006480:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3301      	adds	r3, #1
 8006486:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1f5      	bne.n	800647c <USBD_GetLen+0xe>
  }

  return len;
 8006490:	7bfb      	ldrb	r3, [r7, #15]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	bc80      	pop	{r7}
 800649a:	4770      	bx	lr

0800649c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	4613      	mov	r3, r2
 80064a8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2202      	movs	r2, #2
 80064ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80064b2:	88fa      	ldrh	r2, [r7, #6]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80064b8:	88fa      	ldrh	r2, [r7, #6]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	2100      	movs	r1, #0
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f003 f9d0 	bl	800986a <USBD_LL_Transmit>

  return USBD_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064e2:	88fb      	ldrh	r3, [r7, #6]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	2100      	movs	r1, #0
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f003 f9be 	bl	800986a <USBD_LL_Transmit>

  return USBD_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	4613      	mov	r3, r2
 8006504:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2203      	movs	r2, #3
 800650a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800650e:	88fa      	ldrh	r2, [r7, #6]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006516:	88fa      	ldrh	r2, [r7, #6]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800651e:	88fb      	ldrh	r3, [r7, #6]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	2100      	movs	r1, #0
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f003 f9c3 	bl	80098b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	4613      	mov	r3, r2
 8006540:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	2100      	movs	r1, #0
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f003 f9b1 	bl	80098b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2204      	movs	r2, #4
 8006564:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006568:	2300      	movs	r3, #0
 800656a:	2200      	movs	r2, #0
 800656c:	2100      	movs	r1, #0
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f003 f97b 	bl	800986a <USBD_LL_Transmit>

  return USBD_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b082      	sub	sp, #8
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2205      	movs	r2, #5
 800658a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800658e:	2300      	movs	r3, #0
 8006590:	2200      	movs	r2, #0
 8006592:	2100      	movs	r1, #0
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f003 f98b 	bl	80098b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065aa:	f3ef 8305 	mrs	r3, IPSR
 80065ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80065b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10f      	bne.n	80065d6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b6:	f3ef 8310 	mrs	r3, PRIMASK
 80065ba:	607b      	str	r3, [r7, #4]
  return(result);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <osKernelInitialize+0x32>
 80065c2:	4b10      	ldr	r3, [pc, #64]	; (8006604 <osKernelInitialize+0x60>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d109      	bne.n	80065de <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065ca:	f3ef 8311 	mrs	r3, BASEPRI
 80065ce:	603b      	str	r3, [r7, #0]
  return(result);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80065d6:	f06f 0305 	mvn.w	r3, #5
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	e00c      	b.n	80065f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80065de:	4b09      	ldr	r3, [pc, #36]	; (8006604 <osKernelInitialize+0x60>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d105      	bne.n	80065f2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80065e6:	4b07      	ldr	r3, [pc, #28]	; (8006604 <osKernelInitialize+0x60>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	e002      	b.n	80065f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295
 80065f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80065f8:	68fb      	ldr	r3, [r7, #12]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	bc80      	pop	{r7}
 8006602:	4770      	bx	lr
 8006604:	200001a4 	.word	0x200001a4

08006608 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800660e:	f3ef 8305 	mrs	r3, IPSR
 8006612:	60bb      	str	r3, [r7, #8]
  return(result);
 8006614:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10f      	bne.n	800663a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800661a:	f3ef 8310 	mrs	r3, PRIMASK
 800661e:	607b      	str	r3, [r7, #4]
  return(result);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d109      	bne.n	800663a <osKernelStart+0x32>
 8006626:	4b11      	ldr	r3, [pc, #68]	; (800666c <osKernelStart+0x64>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b02      	cmp	r3, #2
 800662c:	d109      	bne.n	8006642 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800662e:	f3ef 8311 	mrs	r3, BASEPRI
 8006632:	603b      	str	r3, [r7, #0]
  return(result);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <osKernelStart+0x3a>
    stat = osErrorISR;
 800663a:	f06f 0305 	mvn.w	r3, #5
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e00e      	b.n	8006660 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006642:	4b0a      	ldr	r3, [pc, #40]	; (800666c <osKernelStart+0x64>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d107      	bne.n	800665a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800664a:	4b08      	ldr	r3, [pc, #32]	; (800666c <osKernelStart+0x64>)
 800664c:	2202      	movs	r2, #2
 800664e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006650:	f001 f918 	bl	8007884 <vTaskStartScheduler>
      stat = osOK;
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e002      	b.n	8006660 <osKernelStart+0x58>
    } else {
      stat = osError;
 800665a:	f04f 33ff 	mov.w	r3, #4294967295
 800665e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006660:	68fb      	ldr	r3, [r7, #12]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	200001a4 	.word	0x200001a4

08006670 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006670:	b580      	push	{r7, lr}
 8006672:	b092      	sub	sp, #72	; 0x48
 8006674:	af04      	add	r7, sp, #16
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006680:	f3ef 8305 	mrs	r3, IPSR
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006688:	2b00      	cmp	r3, #0
 800668a:	f040 8094 	bne.w	80067b6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800668e:	f3ef 8310 	mrs	r3, PRIMASK
 8006692:	623b      	str	r3, [r7, #32]
  return(result);
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	2b00      	cmp	r3, #0
 8006698:	f040 808d 	bne.w	80067b6 <osThreadNew+0x146>
 800669c:	4b48      	ldr	r3, [pc, #288]	; (80067c0 <osThreadNew+0x150>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d106      	bne.n	80066b2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066a4:	f3ef 8311 	mrs	r3, BASEPRI
 80066a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f040 8082 	bne.w	80067b6 <osThreadNew+0x146>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d07e      	beq.n	80067b6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80066b8:	2380      	movs	r3, #128	; 0x80
 80066ba:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80066bc:	2318      	movs	r3, #24
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80066c0:	2300      	movs	r3, #0
 80066c2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80066c4:	f107 031b 	add.w	r3, r7, #27
 80066c8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80066ca:	f04f 33ff 	mov.w	r3, #4294967295
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d045      	beq.n	8006762 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <osThreadNew+0x74>
        name = attr->name;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d008      	beq.n	800670a <osThreadNew+0x9a>
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	2b38      	cmp	r3, #56	; 0x38
 80066fc:	d805      	bhi.n	800670a <osThreadNew+0x9a>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <osThreadNew+0x9e>
        return (NULL);
 800670a:	2300      	movs	r3, #0
 800670c:	e054      	b.n	80067b8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	089b      	lsrs	r3, r3, #2
 800671c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00e      	beq.n	8006744 <osThreadNew+0xd4>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	2b73      	cmp	r3, #115	; 0x73
 800672c:	d90a      	bls.n	8006744 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006732:	2b00      	cmp	r3, #0
 8006734:	d006      	beq.n	8006744 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <osThreadNew+0xd4>
        mem = 1;
 800673e:	2301      	movs	r3, #1
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
 8006742:	e010      	b.n	8006766 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10c      	bne.n	8006766 <osThreadNew+0xf6>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d108      	bne.n	8006766 <osThreadNew+0xf6>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d104      	bne.n	8006766 <osThreadNew+0xf6>
          mem = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006760:	e001      	b.n	8006766 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	2b01      	cmp	r3, #1
 800676a:	d110      	bne.n	800678e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006774:	9202      	str	r2, [sp, #8]
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 fe3e 	bl	8007404 <xTaskCreateStatic>
 8006788:	4603      	mov	r3, r0
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	e013      	b.n	80067b6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	2b00      	cmp	r3, #0
 8006792:	d110      	bne.n	80067b6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	b29a      	uxth	r2, r3
 8006798:	f107 0314 	add.w	r3, r7, #20
 800679c:	9301      	str	r3, [sp, #4]
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 fe85 	bl	80074b6 <xTaskCreate>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d001      	beq.n	80067b6 <osThreadNew+0x146>
          hTask = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80067b6:	697b      	ldr	r3, [r7, #20]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3738      	adds	r7, #56	; 0x38
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	200001a4 	.word	0x200001a4

080067c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067cc:	f3ef 8305 	mrs	r3, IPSR
 80067d0:	613b      	str	r3, [r7, #16]
  return(result);
 80067d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10f      	bne.n	80067f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d8:	f3ef 8310 	mrs	r3, PRIMASK
 80067dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d109      	bne.n	80067f8 <osDelay+0x34>
 80067e4:	4b0d      	ldr	r3, [pc, #52]	; (800681c <osDelay+0x58>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d109      	bne.n	8006800 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067ec:	f3ef 8311 	mrs	r3, BASEPRI
 80067f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d003      	beq.n	8006800 <osDelay+0x3c>
    stat = osErrorISR;
 80067f8:	f06f 0305 	mvn.w	r3, #5
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	e007      	b.n	8006810 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006800:	2300      	movs	r3, #0
 8006802:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <osDelay+0x4c>
      vTaskDelay(ticks);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 f806 	bl	800781c <vTaskDelay>
    }
  }

  return (stat);
 8006810:	697b      	ldr	r3, [r7, #20]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	200001a4 	.word	0x200001a4

08006820 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4a06      	ldr	r2, [pc, #24]	; (8006848 <vApplicationGetIdleTaskMemory+0x28>)
 8006830:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	4a05      	ldr	r2, [pc, #20]	; (800684c <vApplicationGetIdleTaskMemory+0x2c>)
 8006836:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2280      	movs	r2, #128	; 0x80
 800683c:	601a      	str	r2, [r3, #0]
}
 800683e:	bf00      	nop
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	bc80      	pop	{r7}
 8006846:	4770      	bx	lr
 8006848:	200001a8 	.word	0x200001a8
 800684c:	2000021c 	.word	0x2000021c

08006850 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4a07      	ldr	r2, [pc, #28]	; (800687c <vApplicationGetTimerTaskMemory+0x2c>)
 8006860:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	4a06      	ldr	r2, [pc, #24]	; (8006880 <vApplicationGetTimerTaskMemory+0x30>)
 8006866:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800686e:	601a      	str	r2, [r3, #0]
}
 8006870:	bf00      	nop
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	2000041c 	.word	0x2000041c
 8006880:	20000490 	.word	0x20000490

08006884 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f103 0208 	add.w	r2, r3, #8
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f04f 32ff 	mov.w	r2, #4294967295
 800689c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f103 0208 	add.w	r2, r3, #8
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f103 0208 	add.w	r2, r3, #8
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	bc80      	pop	{r7}
 80068c0:	4770      	bx	lr

080068c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr

080068da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068da:	b480      	push	{r7}
 80068dc:	b085      	sub	sp, #20
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	601a      	str	r2, [r3, #0]
}
 8006916:	bf00      	nop
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr

08006920 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	d103      	bne.n	8006940 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	60fb      	str	r3, [r7, #12]
 800693e:	e00c      	b.n	800695a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3308      	adds	r3, #8
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	e002      	b.n	800694e <vListInsert+0x2e>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	429a      	cmp	r2, r3
 8006958:	d2f6      	bcs.n	8006948 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	601a      	str	r2, [r3, #0]
}
 8006986:	bf00      	nop
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	bc80      	pop	{r7}
 800698e:	4770      	bx	lr

08006990 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6892      	ldr	r2, [r2, #8]
 80069a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6852      	ldr	r2, [r2, #4]
 80069b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d103      	bne.n	80069c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	1e5a      	subs	r2, r3, #1
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	bc80      	pop	{r7}
 80069e0:	4770      	bx	lr
	...

080069e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d109      	bne.n	8006a0c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	60bb      	str	r3, [r7, #8]
 8006a0a:	e7fe      	b.n	8006a0a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006a0c:	f002 f86c 	bl	8008ae8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a18:	68f9      	ldr	r1, [r7, #12]
 8006a1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	441a      	add	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	68f9      	ldr	r1, [r7, #12]
 8006a40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a42:	fb01 f303 	mul.w	r3, r1, r3
 8006a46:	441a      	add	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	22ff      	movs	r2, #255	; 0xff
 8006a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	22ff      	movs	r2, #255	; 0xff
 8006a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d114      	bne.n	8006a8c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d01a      	beq.n	8006aa0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3310      	adds	r3, #16
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 f9aa 	bl	8007dc8 <xTaskRemoveFromEventList>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d012      	beq.n	8006aa0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	; (8006ab0 <xQueueGenericReset+0xcc>)
 8006a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	e009      	b.n	8006aa0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3310      	adds	r3, #16
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff fef7 	bl	8006884 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3324      	adds	r3, #36	; 0x24
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff fef2 	bl	8006884 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006aa0:	f002 f850 	bl	8008b44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006aa4:	2301      	movs	r3, #1
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	e000ed04 	.word	0xe000ed04

08006ab4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08e      	sub	sp, #56	; 0x38
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d109      	bne.n	8006adc <xQueueGenericCreateStatic+0x28>
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ada:	e7fe      	b.n	8006ada <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d109      	bne.n	8006af6 <xQueueGenericCreateStatic+0x42>
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
 8006af4:	e7fe      	b.n	8006af4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <xQueueGenericCreateStatic+0x4e>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <xQueueGenericCreateStatic+0x52>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <xQueueGenericCreateStatic+0x54>
 8006b06:	2300      	movs	r3, #0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <xQueueGenericCreateStatic+0x6c>
 8006b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	623b      	str	r3, [r7, #32]
 8006b1e:	e7fe      	b.n	8006b1e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d102      	bne.n	8006b2c <xQueueGenericCreateStatic+0x78>
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <xQueueGenericCreateStatic+0x7c>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e000      	b.n	8006b32 <xQueueGenericCreateStatic+0x7e>
 8006b30:	2300      	movs	r3, #0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d109      	bne.n	8006b4a <xQueueGenericCreateStatic+0x96>
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	61fb      	str	r3, [r7, #28]
 8006b48:	e7fe      	b.n	8006b48 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b4a:	2350      	movs	r3, #80	; 0x50
 8006b4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b50      	cmp	r3, #80	; 0x50
 8006b52:	d009      	beq.n	8006b68 <xQueueGenericCreateStatic+0xb4>
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	61bb      	str	r3, [r7, #24]
 8006b66:	e7fe      	b.n	8006b66 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00d      	beq.n	8006b8e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	4613      	mov	r3, r2
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	68b9      	ldr	r1, [r7, #8]
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 f842 	bl	8006c12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3730      	adds	r7, #48	; 0x30
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08a      	sub	sp, #40	; 0x28
 8006b9c:	af02      	add	r7, sp, #8
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d109      	bne.n	8006bc0 <xQueueGenericCreate+0x28>
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	613b      	str	r3, [r7, #16]
 8006bbe:	e7fe      	b.n	8006bbe <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61fb      	str	r3, [r7, #28]
 8006bca:	e004      	b.n	8006bd6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	fb02 f303 	mul.w	r3, r2, r3
 8006bd4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	3350      	adds	r3, #80	; 0x50
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f002 f87a 	bl	8008cd4 <pvPortMalloc>
 8006be0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00f      	beq.n	8006c08 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	3350      	adds	r3, #80	; 0x50
 8006bec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bf6:	79fa      	ldrb	r2, [r7, #7]
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 f805 	bl	8006c12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006c08:	69bb      	ldr	r3, [r7, #24]
	}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b084      	sub	sp, #16
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	607a      	str	r2, [r7, #4]
 8006c1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d103      	bne.n	8006c2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e002      	b.n	8006c34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c40:	2101      	movs	r1, #1
 8006c42:	69b8      	ldr	r0, [r7, #24]
 8006c44:	f7ff fece 	bl	80069e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	78fa      	ldrb	r2, [r7, #3]
 8006c4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c50:	bf00      	nop
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08e      	sub	sp, #56	; 0x38
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c66:	2300      	movs	r3, #0
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d109      	bne.n	8006c88 <xQueueGenericSend+0x30>
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c86:	e7fe      	b.n	8006c86 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d103      	bne.n	8006c96 <xQueueGenericSend+0x3e>
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <xQueueGenericSend+0x42>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e000      	b.n	8006c9c <xQueueGenericSend+0x44>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d109      	bne.n	8006cb4 <xQueueGenericSend+0x5c>
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb2:	e7fe      	b.n	8006cb2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d103      	bne.n	8006cc2 <xQueueGenericSend+0x6a>
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <xQueueGenericSend+0x6e>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e000      	b.n	8006cc8 <xQueueGenericSend+0x70>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d109      	bne.n	8006ce0 <xQueueGenericSend+0x88>
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	623b      	str	r3, [r7, #32]
 8006cde:	e7fe      	b.n	8006cde <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ce0:	f001 fa2c 	bl	800813c <xTaskGetSchedulerState>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d102      	bne.n	8006cf0 <xQueueGenericSend+0x98>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <xQueueGenericSend+0x9c>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <xQueueGenericSend+0x9e>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d109      	bne.n	8006d0e <xQueueGenericSend+0xb6>
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	e7fe      	b.n	8006d0c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d0e:	f001 feeb 	bl	8008ae8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d302      	bcc.n	8006d24 <xQueueGenericSend+0xcc>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d129      	bne.n	8006d78 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d2a:	f000 f9ff 	bl	800712c <prvCopyDataToQueue>
 8006d2e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d010      	beq.n	8006d5a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	3324      	adds	r3, #36	; 0x24
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f001 f843 	bl	8007dc8 <xTaskRemoveFromEventList>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d013      	beq.n	8006d70 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d48:	4b3f      	ldr	r3, [pc, #252]	; (8006e48 <xQueueGenericSend+0x1f0>)
 8006d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	e00a      	b.n	8006d70 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d60:	4b39      	ldr	r3, [pc, #228]	; (8006e48 <xQueueGenericSend+0x1f0>)
 8006d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d70:	f001 fee8 	bl	8008b44 <vPortExitCritical>
				return pdPASS;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e063      	b.n	8006e40 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d7e:	f001 fee1 	bl	8008b44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	e05c      	b.n	8006e40 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d8c:	f107 0314 	add.w	r3, r7, #20
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 f87b 	bl	8007e8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d96:	2301      	movs	r3, #1
 8006d98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d9a:	f001 fed3 	bl	8008b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d9e:	f000 fdd7 	bl	8007950 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006da2:	f001 fea1 	bl	8008ae8 <vPortEnterCritical>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dac:	b25b      	sxtb	r3, r3
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	d103      	bne.n	8006dbc <xQueueGenericSend+0x164>
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dc2:	b25b      	sxtb	r3, r3
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc8:	d103      	bne.n	8006dd2 <xQueueGenericSend+0x17a>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dd2:	f001 feb7 	bl	8008b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dd6:	1d3a      	adds	r2, r7, #4
 8006dd8:	f107 0314 	add.w	r3, r7, #20
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 f86a 	bl	8007eb8 <xTaskCheckForTimeOut>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d124      	bne.n	8006e34 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dec:	f000 fa96 	bl	800731c <prvIsQueueFull>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d018      	beq.n	8006e28 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	3310      	adds	r3, #16
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 ff94 	bl	8007d2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e06:	f000 fa21 	bl	800724c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e0a:	f000 fdaf 	bl	800796c <xTaskResumeAll>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f47f af7c 	bne.w	8006d0e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006e16:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <xQueueGenericSend+0x1f0>)
 8006e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	e772      	b.n	8006d0e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e2a:	f000 fa0f 	bl	800724c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e2e:	f000 fd9d 	bl	800796c <xTaskResumeAll>
 8006e32:	e76c      	b.n	8006d0e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e36:	f000 fa09 	bl	800724c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e3a:	f000 fd97 	bl	800796c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e3e:	2300      	movs	r3, #0
		}
	}
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3738      	adds	r7, #56	; 0x38
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08e      	sub	sp, #56	; 0x38
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d109      	bne.n	8006e78 <xQueueGenericSendFromISR+0x2c>
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24
 8006e76:	e7fe      	b.n	8006e76 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d103      	bne.n	8006e86 <xQueueGenericSendFromISR+0x3a>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <xQueueGenericSendFromISR+0x3e>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <xQueueGenericSendFromISR+0x40>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d109      	bne.n	8006ea4 <xQueueGenericSendFromISR+0x58>
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	623b      	str	r3, [r7, #32]
 8006ea2:	e7fe      	b.n	8006ea2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d103      	bne.n	8006eb2 <xQueueGenericSendFromISR+0x66>
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d101      	bne.n	8006eb6 <xQueueGenericSendFromISR+0x6a>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <xQueueGenericSendFromISR+0x6c>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d109      	bne.n	8006ed0 <xQueueGenericSendFromISR+0x84>
 8006ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	61fb      	str	r3, [r7, #28]
 8006ece:	e7fe      	b.n	8006ece <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ed0:	f001 fec4 	bl	8008c5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ed4:	f3ef 8211 	mrs	r2, BASEPRI
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	61ba      	str	r2, [r7, #24]
 8006eea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006eec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d302      	bcc.n	8006f02 <xQueueGenericSendFromISR+0xb6>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d12c      	bne.n	8006f5c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	68b9      	ldr	r1, [r7, #8]
 8006f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f12:	f000 f90b 	bl	800712c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f16:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1e:	d112      	bne.n	8006f46 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d016      	beq.n	8006f56 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	3324      	adds	r3, #36	; 0x24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 ff4b 	bl	8007dc8 <xTaskRemoveFromEventList>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00e      	beq.n	8006f56 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	e007      	b.n	8006f56 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	b25a      	sxtb	r2, r3
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f56:	2301      	movs	r3, #1
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006f5a:	e001      	b.n	8006f60 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3738      	adds	r7, #56	; 0x38
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08c      	sub	sp, #48	; 0x30
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f80:	2300      	movs	r3, #0
 8006f82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <xQueueReceive+0x2e>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	623b      	str	r3, [r7, #32]
 8006fa0:	e7fe      	b.n	8006fa0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d103      	bne.n	8006fb0 <xQueueReceive+0x3c>
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <xQueueReceive+0x40>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e000      	b.n	8006fb6 <xQueueReceive+0x42>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d109      	bne.n	8006fce <xQueueReceive+0x5a>
 8006fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	e7fe      	b.n	8006fcc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fce:	f001 f8b5 	bl	800813c <xTaskGetSchedulerState>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d102      	bne.n	8006fde <xQueueReceive+0x6a>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <xQueueReceive+0x6e>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <xQueueReceive+0x70>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d109      	bne.n	8006ffc <xQueueReceive+0x88>
 8006fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	61bb      	str	r3, [r7, #24]
 8006ffa:	e7fe      	b.n	8006ffa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ffc:	f001 fd74 	bl	8008ae8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007004:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01f      	beq.n	800704c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800700c:	68b9      	ldr	r1, [r7, #8]
 800700e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007010:	f000 f8f6 	bl	8007200 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	1e5a      	subs	r2, r3, #1
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00f      	beq.n	8007044 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	3310      	adds	r3, #16
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fecd 	bl	8007dc8 <xTaskRemoveFromEventList>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d007      	beq.n	8007044 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007034:	4b3c      	ldr	r3, [pc, #240]	; (8007128 <xQueueReceive+0x1b4>)
 8007036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007044:	f001 fd7e 	bl	8008b44 <vPortExitCritical>
				return pdPASS;
 8007048:	2301      	movs	r3, #1
 800704a:	e069      	b.n	8007120 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d103      	bne.n	800705a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007052:	f001 fd77 	bl	8008b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007056:	2300      	movs	r3, #0
 8007058:	e062      	b.n	8007120 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d106      	bne.n	800706e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007060:	f107 0310 	add.w	r3, r7, #16
 8007064:	4618      	mov	r0, r3
 8007066:	f000 ff11 	bl	8007e8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800706a:	2301      	movs	r3, #1
 800706c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800706e:	f001 fd69 	bl	8008b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007072:	f000 fc6d 	bl	8007950 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007076:	f001 fd37 	bl	8008ae8 <vPortEnterCritical>
 800707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007080:	b25b      	sxtb	r3, r3
 8007082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007086:	d103      	bne.n	8007090 <xQueueReceive+0x11c>
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007096:	b25b      	sxtb	r3, r3
 8007098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709c:	d103      	bne.n	80070a6 <xQueueReceive+0x132>
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070a6:	f001 fd4d 	bl	8008b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070aa:	1d3a      	adds	r2, r7, #4
 80070ac:	f107 0310 	add.w	r3, r7, #16
 80070b0:	4611      	mov	r1, r2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 ff00 	bl	8007eb8 <xTaskCheckForTimeOut>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d123      	bne.n	8007106 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070c0:	f000 f916 	bl	80072f0 <prvIsQueueEmpty>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d017      	beq.n	80070fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	3324      	adds	r3, #36	; 0x24
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	4611      	mov	r1, r2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fe2a 	bl	8007d2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070da:	f000 f8b7 	bl	800724c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070de:	f000 fc45 	bl	800796c <xTaskResumeAll>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d189      	bne.n	8006ffc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80070e8:	4b0f      	ldr	r3, [pc, #60]	; (8007128 <xQueueReceive+0x1b4>)
 80070ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	e780      	b.n	8006ffc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070fc:	f000 f8a6 	bl	800724c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007100:	f000 fc34 	bl	800796c <xTaskResumeAll>
 8007104:	e77a      	b.n	8006ffc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007108:	f000 f8a0 	bl	800724c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800710c:	f000 fc2e 	bl	800796c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007112:	f000 f8ed 	bl	80072f0 <prvIsQueueEmpty>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	f43f af6f 	beq.w	8006ffc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800711e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007120:	4618      	mov	r0, r3
 8007122:	3730      	adds	r7, #48	; 0x30
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	e000ed04 	.word	0xe000ed04

0800712c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007138:	2300      	movs	r3, #0
 800713a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007140:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10d      	bne.n	8007166 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d14d      	bne.n	80071ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	4618      	mov	r0, r3
 8007158:	f001 f80e 	bl	8008178 <xTaskPriorityDisinherit>
 800715c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	605a      	str	r2, [r3, #4]
 8007164:	e043      	b.n	80071ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d119      	bne.n	80071a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6898      	ldr	r0, [r3, #8]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007174:	461a      	mov	r2, r3
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	f002 fc40 	bl	80099fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	441a      	add	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	429a      	cmp	r2, r3
 8007194:	d32b      	bcc.n	80071ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	609a      	str	r2, [r3, #8]
 800719e:	e026      	b.n	80071ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	68d8      	ldr	r0, [r3, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	461a      	mov	r2, r3
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	f002 fc26 	bl	80099fc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	425b      	negs	r3, r3
 80071ba:	441a      	add	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d207      	bcs.n	80071dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	425b      	negs	r3, r3
 80071d6:	441a      	add	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d105      	bne.n	80071ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071f6:	697b      	ldr	r3, [r7, #20]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	2b00      	cmp	r3, #0
 8007210:	d018      	beq.n	8007244 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68da      	ldr	r2, [r3, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721a:	441a      	add	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68da      	ldr	r2, [r3, #12]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	429a      	cmp	r2, r3
 800722a:	d303      	bcc.n	8007234 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68d9      	ldr	r1, [r3, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	461a      	mov	r2, r3
 800723e:	6838      	ldr	r0, [r7, #0]
 8007240:	f002 fbdc 	bl	80099fc <memcpy>
	}
}
 8007244:	bf00      	nop
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007254:	f001 fc48 	bl	8008ae8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800725e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007260:	e011      	b.n	8007286 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	2b00      	cmp	r3, #0
 8007268:	d012      	beq.n	8007290 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3324      	adds	r3, #36	; 0x24
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fdaa 	bl	8007dc8 <xTaskRemoveFromEventList>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800727a:	f000 fe7d 	bl	8007f78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	3b01      	subs	r3, #1
 8007282:	b2db      	uxtb	r3, r3
 8007284:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800728a:	2b00      	cmp	r3, #0
 800728c:	dce9      	bgt.n	8007262 <prvUnlockQueue+0x16>
 800728e:	e000      	b.n	8007292 <prvUnlockQueue+0x46>
					break;
 8007290:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	22ff      	movs	r2, #255	; 0xff
 8007296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800729a:	f001 fc53 	bl	8008b44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800729e:	f001 fc23 	bl	8008ae8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072aa:	e011      	b.n	80072d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d012      	beq.n	80072da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3310      	adds	r3, #16
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fd85 	bl	8007dc8 <xTaskRemoveFromEventList>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072c4:	f000 fe58 	bl	8007f78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	dce9      	bgt.n	80072ac <prvUnlockQueue+0x60>
 80072d8:	e000      	b.n	80072dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	22ff      	movs	r2, #255	; 0xff
 80072e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072e4:	f001 fc2e 	bl	8008b44 <vPortExitCritical>
}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072f8:	f001 fbf6 	bl	8008ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	2b00      	cmp	r3, #0
 8007302:	d102      	bne.n	800730a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007304:	2301      	movs	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	e001      	b.n	800730e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800730a:	2300      	movs	r3, #0
 800730c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800730e:	f001 fc19 	bl	8008b44 <vPortExitCritical>

	return xReturn;
 8007312:	68fb      	ldr	r3, [r7, #12]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007324:	f001 fbe0 	bl	8008ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007330:	429a      	cmp	r2, r3
 8007332:	d102      	bne.n	800733a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007334:	2301      	movs	r3, #1
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	e001      	b.n	800733e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800733a:	2300      	movs	r3, #0
 800733c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800733e:	f001 fc01 	bl	8008b44 <vPortExitCritical>

	return xReturn;
 8007342:	68fb      	ldr	r3, [r7, #12]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007356:	2300      	movs	r3, #0
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	e014      	b.n	8007386 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800735c:	4a0e      	ldr	r2, [pc, #56]	; (8007398 <vQueueAddToRegistry+0x4c>)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10b      	bne.n	8007380 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007368:	490b      	ldr	r1, [pc, #44]	; (8007398 <vQueueAddToRegistry+0x4c>)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007372:	4a09      	ldr	r2, [pc, #36]	; (8007398 <vQueueAddToRegistry+0x4c>)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	4413      	add	r3, r2
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800737e:	e005      	b.n	800738c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	3301      	adds	r3, #1
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b07      	cmp	r3, #7
 800738a:	d9e7      	bls.n	800735c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800738c:	bf00      	nop
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	bc80      	pop	{r7}
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	20003130 	.word	0x20003130

0800739c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073ac:	f001 fb9c 	bl	8008ae8 <vPortEnterCritical>
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073b6:	b25b      	sxtb	r3, r3
 80073b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073bc:	d103      	bne.n	80073c6 <vQueueWaitForMessageRestricted+0x2a>
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073cc:	b25b      	sxtb	r3, r3
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d2:	d103      	bne.n	80073dc <vQueueWaitForMessageRestricted+0x40>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073dc:	f001 fbb2 	bl	8008b44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d106      	bne.n	80073f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	3324      	adds	r3, #36	; 0x24
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fcbf 	bl	8007d74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80073f6:	6978      	ldr	r0, [r7, #20]
 80073f8:	f7ff ff28 	bl	800724c <prvUnlockQueue>
	}
 80073fc:	bf00      	nop
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08e      	sub	sp, #56	; 0x38
 8007408:	af04      	add	r7, sp, #16
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007414:	2b00      	cmp	r3, #0
 8007416:	d109      	bne.n	800742c <xTaskCreateStatic+0x28>
 8007418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	623b      	str	r3, [r7, #32]
 800742a:	e7fe      	b.n	800742a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800742c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742e:	2b00      	cmp	r3, #0
 8007430:	d109      	bne.n	8007446 <xTaskCreateStatic+0x42>
 8007432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	61fb      	str	r3, [r7, #28]
 8007444:	e7fe      	b.n	8007444 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007446:	2374      	movs	r3, #116	; 0x74
 8007448:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	2b74      	cmp	r3, #116	; 0x74
 800744e:	d009      	beq.n	8007464 <xTaskCreateStatic+0x60>
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	e7fe      	b.n	8007462 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01e      	beq.n	80074a8 <xTaskCreateStatic+0xa4>
 800746a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01b      	beq.n	80074a8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007478:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	2202      	movs	r2, #2
 800747e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007482:	2300      	movs	r3, #0
 8007484:	9303      	str	r3, [sp, #12]
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	9302      	str	r3, [sp, #8]
 800748a:	f107 0314 	add.w	r3, r7, #20
 800748e:	9301      	str	r3, [sp, #4]
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 f850 	bl	8007540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074a2:	f000 f8d9 	bl	8007658 <prvAddNewTaskToReadyList>
 80074a6:	e001      	b.n	80074ac <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074ac:	697b      	ldr	r3, [r7, #20]
	}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3728      	adds	r7, #40	; 0x28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b08c      	sub	sp, #48	; 0x30
 80074ba:	af04      	add	r7, sp, #16
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	603b      	str	r3, [r7, #0]
 80074c2:	4613      	mov	r3, r2
 80074c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 fc02 	bl	8008cd4 <pvPortMalloc>
 80074d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00e      	beq.n	80074f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80074d8:	2074      	movs	r0, #116	; 0x74
 80074da:	f001 fbfb 	bl	8008cd4 <pvPortMalloc>
 80074de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	631a      	str	r2, [r3, #48]	; 0x30
 80074ec:	e005      	b.n	80074fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074ee:	6978      	ldr	r0, [r7, #20]
 80074f0:	f001 fcb2 	bl	8008e58 <vPortFree>
 80074f4:	e001      	b.n	80074fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d017      	beq.n	8007530 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007508:	88fa      	ldrh	r2, [r7, #6]
 800750a:	2300      	movs	r3, #0
 800750c:	9303      	str	r3, [sp, #12]
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	9302      	str	r3, [sp, #8]
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 f80e 	bl	8007540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007524:	69f8      	ldr	r0, [r7, #28]
 8007526:	f000 f897 	bl	8007658 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800752a:	2301      	movs	r3, #1
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	e002      	b.n	8007536 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007530:	f04f 33ff 	mov.w	r3, #4294967295
 8007534:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007536:	69bb      	ldr	r3, [r7, #24]
	}
 8007538:	4618      	mov	r0, r3
 800753a:	3720      	adds	r7, #32
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	461a      	mov	r2, r3
 8007558:	21a5      	movs	r1, #165	; 0xa5
 800755a:	f002 fa5a 	bl	8009a12 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007568:	3b01      	subs	r3, #1
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	f023 0307 	bic.w	r3, r3, #7
 8007576:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <prvInitialiseNewTask+0x56>
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	e7fe      	b.n	8007594 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800759c:	2300      	movs	r3, #0
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	e012      	b.n	80075c8 <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	4413      	add	r3, r2
 80075a8:	7819      	ldrb	r1, [r3, #0]
 80075aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	4413      	add	r3, r2
 80075b0:	3334      	adds	r3, #52	; 0x34
 80075b2:	460a      	mov	r2, r1
 80075b4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	4413      	add	r3, r2
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d006      	beq.n	80075d0 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	3301      	adds	r3, #1
 80075c6:	61fb      	str	r3, [r7, #28]
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	2b1f      	cmp	r3, #31
 80075cc:	d9e9      	bls.n	80075a2 <prvInitialiseNewTask+0x62>
 80075ce:	e000      	b.n	80075d2 <prvInitialiseNewTask+0x92>
		{
			break;
 80075d0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	2b37      	cmp	r3, #55	; 0x37
 80075de:	d901      	bls.n	80075e4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075e0:	2337      	movs	r3, #55	; 0x37
 80075e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ee:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->uxMutexesHeld = 0;
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	2200      	movs	r2, #0
 80075f4:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	3304      	adds	r3, #4
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff f961 	bl	80068c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	3318      	adds	r3, #24
 8007604:	4618      	mov	r0, r3
 8007606:	f7ff f95c 	bl	80068c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800760e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800761e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	2200      	movs	r2, #0
 8007624:	669a      	str	r2, [r3, #104]	; 0x68
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	2200      	movs	r2, #0
 800762a:	66da      	str	r2, [r3, #108]	; 0x6c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	68f9      	ldr	r1, [r7, #12]
 8007638:	69b8      	ldr	r0, [r7, #24]
 800763a:	f001 f967 	bl	800890c <pxPortInitialiseStack>
 800763e:	4602      	mov	r2, r0
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800764a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800764e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007650:	bf00      	nop
 8007652:	3720      	adds	r7, #32
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007660:	f001 fa42 	bl	8008ae8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007664:	4b2d      	ldr	r3, [pc, #180]	; (800771c <prvAddNewTaskToReadyList+0xc4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	4a2c      	ldr	r2, [pc, #176]	; (800771c <prvAddNewTaskToReadyList+0xc4>)
 800766c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800766e:	4b2c      	ldr	r3, [pc, #176]	; (8007720 <prvAddNewTaskToReadyList+0xc8>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007676:	4a2a      	ldr	r2, [pc, #168]	; (8007720 <prvAddNewTaskToReadyList+0xc8>)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800767c:	4b27      	ldr	r3, [pc, #156]	; (800771c <prvAddNewTaskToReadyList+0xc4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d110      	bne.n	80076a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007684:	f000 fc9c 	bl	8007fc0 <prvInitialiseTaskLists>
 8007688:	e00d      	b.n	80076a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800768a:	4b26      	ldr	r3, [pc, #152]	; (8007724 <prvAddNewTaskToReadyList+0xcc>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d109      	bne.n	80076a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007692:	4b23      	ldr	r3, [pc, #140]	; (8007720 <prvAddNewTaskToReadyList+0xc8>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	429a      	cmp	r2, r3
 800769e:	d802      	bhi.n	80076a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076a0:	4a1f      	ldr	r2, [pc, #124]	; (8007720 <prvAddNewTaskToReadyList+0xc8>)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076a6:	4b20      	ldr	r3, [pc, #128]	; (8007728 <prvAddNewTaskToReadyList+0xd0>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3301      	adds	r3, #1
 80076ac:	4a1e      	ldr	r2, [pc, #120]	; (8007728 <prvAddNewTaskToReadyList+0xd0>)
 80076ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076b0:	4b1d      	ldr	r3, [pc, #116]	; (8007728 <prvAddNewTaskToReadyList+0xd0>)
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	659a      	str	r2, [r3, #88]	; 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076bc:	4b1b      	ldr	r3, [pc, #108]	; (800772c <prvAddNewTaskToReadyList+0xd4>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d903      	bls.n	80076cc <prvAddNewTaskToReadyList+0x74>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	4a18      	ldr	r2, [pc, #96]	; (800772c <prvAddNewTaskToReadyList+0xd4>)
 80076ca:	6013      	str	r3, [r2, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4a15      	ldr	r2, [pc, #84]	; (8007730 <prvAddNewTaskToReadyList+0xd8>)
 80076da:	441a      	add	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3304      	adds	r3, #4
 80076e0:	4619      	mov	r1, r3
 80076e2:	4610      	mov	r0, r2
 80076e4:	f7ff f8f9 	bl	80068da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076e8:	f001 fa2c 	bl	8008b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076ec:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <prvAddNewTaskToReadyList+0xcc>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00e      	beq.n	8007712 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076f4:	4b0a      	ldr	r3, [pc, #40]	; (8007720 <prvAddNewTaskToReadyList+0xc8>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fe:	429a      	cmp	r2, r3
 8007700:	d207      	bcs.n	8007712 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007702:	4b0c      	ldr	r3, [pc, #48]	; (8007734 <prvAddNewTaskToReadyList+0xdc>)
 8007704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20000d64 	.word	0x20000d64
 8007720:	20000890 	.word	0x20000890
 8007724:	20000d70 	.word	0x20000d70
 8007728:	20000d80 	.word	0x20000d80
 800772c:	20000d6c 	.word	0x20000d6c
 8007730:	20000894 	.word	0x20000894
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007740:	f001 f9d2 	bl	8008ae8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d102      	bne.n	8007750 <vTaskDelete+0x18>
 800774a:	4b2c      	ldr	r3, [pc, #176]	; (80077fc <vTaskDelete+0xc4>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	e000      	b.n	8007752 <vTaskDelete+0x1a>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3304      	adds	r3, #4
 8007758:	4618      	mov	r0, r3
 800775a:	f7ff f919 	bl	8006990 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007762:	2b00      	cmp	r3, #0
 8007764:	d004      	beq.n	8007770 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3318      	adds	r3, #24
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff f910 	bl	8006990 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007770:	4b23      	ldr	r3, [pc, #140]	; (8007800 <vTaskDelete+0xc8>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3301      	adds	r3, #1
 8007776:	4a22      	ldr	r2, [pc, #136]	; (8007800 <vTaskDelete+0xc8>)
 8007778:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800777a:	4b20      	ldr	r3, [pc, #128]	; (80077fc <vTaskDelete+0xc4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	429a      	cmp	r2, r3
 8007782:	d10b      	bne.n	800779c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3304      	adds	r3, #4
 8007788:	4619      	mov	r1, r3
 800778a:	481e      	ldr	r0, [pc, #120]	; (8007804 <vTaskDelete+0xcc>)
 800778c:	f7ff f8a5 	bl	80068da <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007790:	4b1d      	ldr	r3, [pc, #116]	; (8007808 <vTaskDelete+0xd0>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3301      	adds	r3, #1
 8007796:	4a1c      	ldr	r2, [pc, #112]	; (8007808 <vTaskDelete+0xd0>)
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	e009      	b.n	80077b0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800779c:	4b1b      	ldr	r3, [pc, #108]	; (800780c <vTaskDelete+0xd4>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	4a1a      	ldr	r2, [pc, #104]	; (800780c <vTaskDelete+0xd4>)
 80077a4:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 fc76 	bl	8008098 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80077ac:	f000 fca2 	bl	80080f4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80077b0:	f001 f9c8 	bl	8008b44 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80077b4:	4b16      	ldr	r3, [pc, #88]	; (8007810 <vTaskDelete+0xd8>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d01a      	beq.n	80077f2 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 80077bc:	4b0f      	ldr	r3, [pc, #60]	; (80077fc <vTaskDelete+0xc4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d115      	bne.n	80077f2 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80077c6:	4b13      	ldr	r3, [pc, #76]	; (8007814 <vTaskDelete+0xdc>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <vTaskDelete+0xaa>
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	60bb      	str	r3, [r7, #8]
 80077e0:	e7fe      	b.n	80077e0 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 80077e2:	4b0d      	ldr	r3, [pc, #52]	; (8007818 <vTaskDelete+0xe0>)
 80077e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077f2:	bf00      	nop
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000890 	.word	0x20000890
 8007800:	20000d80 	.word	0x20000d80
 8007804:	20000d38 	.word	0x20000d38
 8007808:	20000d4c 	.word	0x20000d4c
 800780c:	20000d64 	.word	0x20000d64
 8007810:	20000d70 	.word	0x20000d70
 8007814:	20000d8c 	.word	0x20000d8c
 8007818:	e000ed04 	.word	0xe000ed04

0800781c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d016      	beq.n	800785c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800782e:	4b13      	ldr	r3, [pc, #76]	; (800787c <vTaskDelay+0x60>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d009      	beq.n	800784a <vTaskDelay+0x2e>
 8007836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	60bb      	str	r3, [r7, #8]
 8007848:	e7fe      	b.n	8007848 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800784a:	f000 f881 	bl	8007950 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800784e:	2100      	movs	r1, #0
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fcfd 	bl	8008250 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007856:	f000 f889 	bl	800796c <xTaskResumeAll>
 800785a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d107      	bne.n	8007872 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007862:	4b07      	ldr	r3, [pc, #28]	; (8007880 <vTaskDelay+0x64>)
 8007864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007872:	bf00      	nop
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20000d8c 	.word	0x20000d8c
 8007880:	e000ed04 	.word	0xe000ed04

08007884 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b08a      	sub	sp, #40	; 0x28
 8007888:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800788a:	2300      	movs	r3, #0
 800788c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800788e:	2300      	movs	r3, #0
 8007890:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007892:	463a      	mov	r2, r7
 8007894:	1d39      	adds	r1, r7, #4
 8007896:	f107 0308 	add.w	r3, r7, #8
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe ffc0 	bl	8006820 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	9202      	str	r2, [sp, #8]
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	2300      	movs	r3, #0
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	2300      	movs	r3, #0
 80078b0:	460a      	mov	r2, r1
 80078b2:	4921      	ldr	r1, [pc, #132]	; (8007938 <vTaskStartScheduler+0xb4>)
 80078b4:	4821      	ldr	r0, [pc, #132]	; (800793c <vTaskStartScheduler+0xb8>)
 80078b6:	f7ff fda5 	bl	8007404 <xTaskCreateStatic>
 80078ba:	4602      	mov	r2, r0
 80078bc:	4b20      	ldr	r3, [pc, #128]	; (8007940 <vTaskStartScheduler+0xbc>)
 80078be:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078c0:	4b1f      	ldr	r3, [pc, #124]	; (8007940 <vTaskStartScheduler+0xbc>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078c8:	2301      	movs	r3, #1
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	e001      	b.n	80078d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d102      	bne.n	80078de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078d8:	f000 fd0e 	bl	80082f8 <xTimerCreateTimerTask>
 80078dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d117      	bne.n	8007914 <vTaskStartScheduler+0x90>
 80078e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078f6:	4b13      	ldr	r3, [pc, #76]	; (8007944 <vTaskStartScheduler+0xc0>)
 80078f8:	f04f 32ff 	mov.w	r2, #4294967295
 80078fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078fe:	4b12      	ldr	r3, [pc, #72]	; (8007948 <vTaskStartScheduler+0xc4>)
 8007900:	2201      	movs	r2, #1
 8007902:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007904:	4b11      	ldr	r3, [pc, #68]	; (800794c <vTaskStartScheduler+0xc8>)
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800790a:	f7f8 fdae 	bl	800046a <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800790e:	f001 f87b 	bl	8008a08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007912:	e00d      	b.n	8007930 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791a:	d109      	bne.n	8007930 <vTaskStartScheduler+0xac>
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	60fb      	str	r3, [r7, #12]
 800792e:	e7fe      	b.n	800792e <vTaskStartScheduler+0xaa>
}
 8007930:	bf00      	nop
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	08009b5c 	.word	0x08009b5c
 800793c:	08007f91 	.word	0x08007f91
 8007940:	20000d88 	.word	0x20000d88
 8007944:	20000d84 	.word	0x20000d84
 8007948:	20000d70 	.word	0x20000d70
 800794c:	20000d68 	.word	0x20000d68

08007950 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007950:	b480      	push	{r7}
 8007952:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007954:	4b04      	ldr	r3, [pc, #16]	; (8007968 <vTaskSuspendAll+0x18>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3301      	adds	r3, #1
 800795a:	4a03      	ldr	r2, [pc, #12]	; (8007968 <vTaskSuspendAll+0x18>)
 800795c:	6013      	str	r3, [r2, #0]
}
 800795e:	bf00      	nop
 8007960:	46bd      	mov	sp, r7
 8007962:	bc80      	pop	{r7}
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	20000d8c 	.word	0x20000d8c

0800796c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007976:	2300      	movs	r3, #0
 8007978:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800797a:	4b41      	ldr	r3, [pc, #260]	; (8007a80 <xTaskResumeAll+0x114>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d109      	bne.n	8007996 <xTaskResumeAll+0x2a>
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	e7fe      	b.n	8007994 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007996:	f001 f8a7 	bl	8008ae8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800799a:	4b39      	ldr	r3, [pc, #228]	; (8007a80 <xTaskResumeAll+0x114>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3b01      	subs	r3, #1
 80079a0:	4a37      	ldr	r2, [pc, #220]	; (8007a80 <xTaskResumeAll+0x114>)
 80079a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079a4:	4b36      	ldr	r3, [pc, #216]	; (8007a80 <xTaskResumeAll+0x114>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d162      	bne.n	8007a72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079ac:	4b35      	ldr	r3, [pc, #212]	; (8007a84 <xTaskResumeAll+0x118>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d05e      	beq.n	8007a72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079b4:	e02f      	b.n	8007a16 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80079b6:	4b34      	ldr	r3, [pc, #208]	; (8007a88 <xTaskResumeAll+0x11c>)
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3318      	adds	r3, #24
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fe ffe4 	bl	8006990 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3304      	adds	r3, #4
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fe ffdf 	bl	8006990 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d6:	4b2d      	ldr	r3, [pc, #180]	; (8007a8c <xTaskResumeAll+0x120>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d903      	bls.n	80079e6 <xTaskResumeAll+0x7a>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e2:	4a2a      	ldr	r2, [pc, #168]	; (8007a8c <xTaskResumeAll+0x120>)
 80079e4:	6013      	str	r3, [r2, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4a27      	ldr	r2, [pc, #156]	; (8007a90 <xTaskResumeAll+0x124>)
 80079f4:	441a      	add	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3304      	adds	r3, #4
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f7fe ff6c 	bl	80068da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a06:	4b23      	ldr	r3, [pc, #140]	; (8007a94 <xTaskResumeAll+0x128>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d302      	bcc.n	8007a16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007a10:	4b21      	ldr	r3, [pc, #132]	; (8007a98 <xTaskResumeAll+0x12c>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a16:	4b1c      	ldr	r3, [pc, #112]	; (8007a88 <xTaskResumeAll+0x11c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1cb      	bne.n	80079b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a24:	f000 fb66 	bl	80080f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a28:	4b1c      	ldr	r3, [pc, #112]	; (8007a9c <xTaskResumeAll+0x130>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d010      	beq.n	8007a56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a34:	f000 f844 	bl	8007ac0 <xTaskIncrementTick>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007a3e:	4b16      	ldr	r3, [pc, #88]	; (8007a98 <xTaskResumeAll+0x12c>)
 8007a40:	2201      	movs	r2, #1
 8007a42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1f1      	bne.n	8007a34 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007a50:	4b12      	ldr	r3, [pc, #72]	; (8007a9c <xTaskResumeAll+0x130>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a56:	4b10      	ldr	r3, [pc, #64]	; (8007a98 <xTaskResumeAll+0x12c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d009      	beq.n	8007a72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a62:	4b0f      	ldr	r3, [pc, #60]	; (8007aa0 <xTaskResumeAll+0x134>)
 8007a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a72:	f001 f867 	bl	8008b44 <vPortExitCritical>

	return xAlreadyYielded;
 8007a76:	68bb      	ldr	r3, [r7, #8]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	20000d8c 	.word	0x20000d8c
 8007a84:	20000d64 	.word	0x20000d64
 8007a88:	20000d24 	.word	0x20000d24
 8007a8c:	20000d6c 	.word	0x20000d6c
 8007a90:	20000894 	.word	0x20000894
 8007a94:	20000890 	.word	0x20000890
 8007a98:	20000d78 	.word	0x20000d78
 8007a9c:	20000d74 	.word	0x20000d74
 8007aa0:	e000ed04 	.word	0xe000ed04

08007aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007aaa:	4b04      	ldr	r3, [pc, #16]	; (8007abc <xTaskGetTickCount+0x18>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ab0:	687b      	ldr	r3, [r7, #4]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bc80      	pop	{r7}
 8007aba:	4770      	bx	lr
 8007abc:	20000d68 	.word	0x20000d68

08007ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aca:	4b51      	ldr	r3, [pc, #324]	; (8007c10 <xTaskIncrementTick+0x150>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f040 808d 	bne.w	8007bee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ad4:	4b4f      	ldr	r3, [pc, #316]	; (8007c14 <xTaskIncrementTick+0x154>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007adc:	4a4d      	ldr	r2, [pc, #308]	; (8007c14 <xTaskIncrementTick+0x154>)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d11f      	bne.n	8007b28 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ae8:	4b4b      	ldr	r3, [pc, #300]	; (8007c18 <xTaskIncrementTick+0x158>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d009      	beq.n	8007b06 <xTaskIncrementTick+0x46>
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	e7fe      	b.n	8007b04 <xTaskIncrementTick+0x44>
 8007b06:	4b44      	ldr	r3, [pc, #272]	; (8007c18 <xTaskIncrementTick+0x158>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	4b43      	ldr	r3, [pc, #268]	; (8007c1c <xTaskIncrementTick+0x15c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a41      	ldr	r2, [pc, #260]	; (8007c18 <xTaskIncrementTick+0x158>)
 8007b12:	6013      	str	r3, [r2, #0]
 8007b14:	4a41      	ldr	r2, [pc, #260]	; (8007c1c <xTaskIncrementTick+0x15c>)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	4b41      	ldr	r3, [pc, #260]	; (8007c20 <xTaskIncrementTick+0x160>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	4a3f      	ldr	r2, [pc, #252]	; (8007c20 <xTaskIncrementTick+0x160>)
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	f000 fae6 	bl	80080f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b28:	4b3e      	ldr	r3, [pc, #248]	; (8007c24 <xTaskIncrementTick+0x164>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d34e      	bcc.n	8007bd0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b32:	4b39      	ldr	r3, [pc, #228]	; (8007c18 <xTaskIncrementTick+0x158>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <xTaskIncrementTick+0x80>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e000      	b.n	8007b42 <xTaskIncrementTick+0x82>
 8007b40:	2300      	movs	r3, #0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d004      	beq.n	8007b50 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b46:	4b37      	ldr	r3, [pc, #220]	; (8007c24 <xTaskIncrementTick+0x164>)
 8007b48:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4c:	601a      	str	r2, [r3, #0]
					break;
 8007b4e:	e03f      	b.n	8007bd0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b50:	4b31      	ldr	r3, [pc, #196]	; (8007c18 <xTaskIncrementTick+0x158>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d203      	bcs.n	8007b70 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b68:	4a2e      	ldr	r2, [pc, #184]	; (8007c24 <xTaskIncrementTick+0x164>)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6013      	str	r3, [r2, #0]
						break;
 8007b6e:	e02f      	b.n	8007bd0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fe ff0b 	bl	8006990 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	3318      	adds	r3, #24
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe ff02 	bl	8006990 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b90:	4b25      	ldr	r3, [pc, #148]	; (8007c28 <xTaskIncrementTick+0x168>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d903      	bls.n	8007ba0 <xTaskIncrementTick+0xe0>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	4a22      	ldr	r2, [pc, #136]	; (8007c28 <xTaskIncrementTick+0x168>)
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4a1f      	ldr	r2, [pc, #124]	; (8007c2c <xTaskIncrementTick+0x16c>)
 8007bae:	441a      	add	r2, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f7fe fe8f 	bl	80068da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc0:	4b1b      	ldr	r3, [pc, #108]	; (8007c30 <xTaskIncrementTick+0x170>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d3b3      	bcc.n	8007b32 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bce:	e7b0      	b.n	8007b32 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bd0:	4b17      	ldr	r3, [pc, #92]	; (8007c30 <xTaskIncrementTick+0x170>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd6:	4915      	ldr	r1, [pc, #84]	; (8007c2c <xTaskIncrementTick+0x16c>)
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	440b      	add	r3, r1
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d907      	bls.n	8007bf8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007be8:	2301      	movs	r3, #1
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	e004      	b.n	8007bf8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007bee:	4b11      	ldr	r3, [pc, #68]	; (8007c34 <xTaskIncrementTick+0x174>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	4a0f      	ldr	r2, [pc, #60]	; (8007c34 <xTaskIncrementTick+0x174>)
 8007bf6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007bf8:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <xTaskIncrementTick+0x178>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007c00:	2301      	movs	r3, #1
 8007c02:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007c04:	697b      	ldr	r3, [r7, #20]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20000d8c 	.word	0x20000d8c
 8007c14:	20000d68 	.word	0x20000d68
 8007c18:	20000d1c 	.word	0x20000d1c
 8007c1c:	20000d20 	.word	0x20000d20
 8007c20:	20000d7c 	.word	0x20000d7c
 8007c24:	20000d84 	.word	0x20000d84
 8007c28:	20000d6c 	.word	0x20000d6c
 8007c2c:	20000894 	.word	0x20000894
 8007c30:	20000890 	.word	0x20000890
 8007c34:	20000d74 	.word	0x20000d74
 8007c38:	20000d78 	.word	0x20000d78

08007c3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c42:	4b33      	ldr	r3, [pc, #204]	; (8007d10 <vTaskSwitchContext+0xd4>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c4a:	4b32      	ldr	r3, [pc, #200]	; (8007d14 <vTaskSwitchContext+0xd8>)
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c50:	e059      	b.n	8007d06 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8007c52:	4b30      	ldr	r3, [pc, #192]	; (8007d14 <vTaskSwitchContext+0xd8>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007c58:	f7f8 fc0d 	bl	8000476 <getRunTimeCounterValue>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	4b2e      	ldr	r3, [pc, #184]	; (8007d18 <vTaskSwitchContext+0xdc>)
 8007c60:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007c62:	4b2d      	ldr	r3, [pc, #180]	; (8007d18 <vTaskSwitchContext+0xdc>)
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	4b2d      	ldr	r3, [pc, #180]	; (8007d1c <vTaskSwitchContext+0xe0>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d909      	bls.n	8007c82 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007c6e:	4b2c      	ldr	r3, [pc, #176]	; (8007d20 <vTaskSwitchContext+0xe4>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8007c74:	4a28      	ldr	r2, [pc, #160]	; (8007d18 <vTaskSwitchContext+0xdc>)
 8007c76:	6810      	ldr	r0, [r2, #0]
 8007c78:	4a28      	ldr	r2, [pc, #160]	; (8007d1c <vTaskSwitchContext+0xe0>)
 8007c7a:	6812      	ldr	r2, [r2, #0]
 8007c7c:	1a82      	subs	r2, r0, r2
 8007c7e:	440a      	add	r2, r1
 8007c80:	669a      	str	r2, [r3, #104]	; 0x68
				ulTaskSwitchedInTime = ulTotalRunTime;
 8007c82:	4b25      	ldr	r3, [pc, #148]	; (8007d18 <vTaskSwitchContext+0xdc>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a25      	ldr	r2, [pc, #148]	; (8007d1c <vTaskSwitchContext+0xe0>)
 8007c88:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007c8a:	4b26      	ldr	r3, [pc, #152]	; (8007d24 <vTaskSwitchContext+0xe8>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	e00f      	b.n	8007cb2 <vTaskSwitchContext+0x76>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d109      	bne.n	8007cac <vTaskSwitchContext+0x70>
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	607b      	str	r3, [r7, #4]
 8007caa:	e7fe      	b.n	8007caa <vTaskSwitchContext+0x6e>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	491d      	ldr	r1, [pc, #116]	; (8007d28 <vTaskSwitchContext+0xec>)
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	440b      	add	r3, r1
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0e5      	beq.n	8007c92 <vTaskSwitchContext+0x56>
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4a15      	ldr	r2, [pc, #84]	; (8007d28 <vTaskSwitchContext+0xec>)
 8007cd2:	4413      	add	r3, r2
 8007cd4:	60bb      	str	r3, [r7, #8]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	605a      	str	r2, [r3, #4]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d104      	bne.n	8007cf6 <vTaskSwitchContext+0xba>
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	605a      	str	r2, [r3, #4]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	4a08      	ldr	r2, [pc, #32]	; (8007d20 <vTaskSwitchContext+0xe4>)
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	4a08      	ldr	r2, [pc, #32]	; (8007d24 <vTaskSwitchContext+0xe8>)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6013      	str	r3, [r2, #0]
}
 8007d06:	bf00      	nop
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	20000d8c 	.word	0x20000d8c
 8007d14:	20000d78 	.word	0x20000d78
 8007d18:	20000d94 	.word	0x20000d94
 8007d1c:	20000d90 	.word	0x20000d90
 8007d20:	20000890 	.word	0x20000890
 8007d24:	20000d6c 	.word	0x20000d6c
 8007d28:	20000894 	.word	0x20000894

08007d2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d109      	bne.n	8007d50 <vTaskPlaceOnEventList+0x24>
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	60fb      	str	r3, [r7, #12]
 8007d4e:	e7fe      	b.n	8007d4e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <vTaskPlaceOnEventList+0x44>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3318      	adds	r3, #24
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7fe fde1 	bl	8006920 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d5e:	2101      	movs	r1, #1
 8007d60:	6838      	ldr	r0, [r7, #0]
 8007d62:	f000 fa75 	bl	8008250 <prvAddCurrentTaskToDelayedList>
}
 8007d66:	bf00      	nop
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000890 	.word	0x20000890

08007d74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d109      	bne.n	8007d9a <vTaskPlaceOnEventListRestricted+0x26>
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e7fe      	b.n	8007d98 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d9a:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <vTaskPlaceOnEventListRestricted+0x50>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3318      	adds	r3, #24
 8007da0:	4619      	mov	r1, r3
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7fe fd99 	bl	80068da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007dae:	f04f 33ff 	mov.w	r3, #4294967295
 8007db2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	68b8      	ldr	r0, [r7, #8]
 8007db8:	f000 fa4a 	bl	8008250 <prvAddCurrentTaskToDelayedList>
	}
 8007dbc:	bf00      	nop
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20000890 	.word	0x20000890

08007dc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d109      	bne.n	8007df2 <xTaskRemoveFromEventList+0x2a>
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	e7fe      	b.n	8007df0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	3318      	adds	r3, #24
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe fdca 	bl	8006990 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dfc:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <xTaskRemoveFromEventList+0xac>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d11d      	bne.n	8007e40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fe fdc1 	bl	8006990 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e12:	4b19      	ldr	r3, [pc, #100]	; (8007e78 <xTaskRemoveFromEventList+0xb0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d903      	bls.n	8007e22 <xTaskRemoveFromEventList+0x5a>
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	4a16      	ldr	r2, [pc, #88]	; (8007e78 <xTaskRemoveFromEventList+0xb0>)
 8007e20:	6013      	str	r3, [r2, #0]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4a13      	ldr	r2, [pc, #76]	; (8007e7c <xTaskRemoveFromEventList+0xb4>)
 8007e30:	441a      	add	r2, r3
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3304      	adds	r3, #4
 8007e36:	4619      	mov	r1, r3
 8007e38:	4610      	mov	r0, r2
 8007e3a:	f7fe fd4e 	bl	80068da <vListInsertEnd>
 8007e3e:	e005      	b.n	8007e4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	3318      	adds	r3, #24
 8007e44:	4619      	mov	r1, r3
 8007e46:	480e      	ldr	r0, [pc, #56]	; (8007e80 <xTaskRemoveFromEventList+0xb8>)
 8007e48:	f7fe fd47 	bl	80068da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e50:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <xTaskRemoveFromEventList+0xbc>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d905      	bls.n	8007e66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e5e:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <xTaskRemoveFromEventList+0xc0>)
 8007e60:	2201      	movs	r2, #1
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	e001      	b.n	8007e6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007e66:	2300      	movs	r3, #0
 8007e68:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007e6a:	697b      	ldr	r3, [r7, #20]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	20000d8c 	.word	0x20000d8c
 8007e78:	20000d6c 	.word	0x20000d6c
 8007e7c:	20000894 	.word	0x20000894
 8007e80:	20000d24 	.word	0x20000d24
 8007e84:	20000890 	.word	0x20000890
 8007e88:	20000d78 	.word	0x20000d78

08007e8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e94:	4b06      	ldr	r3, [pc, #24]	; (8007eb0 <vTaskInternalSetTimeOutState+0x24>)
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e9c:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <vTaskInternalSetTimeOutState+0x28>)
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	605a      	str	r2, [r3, #4]
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bc80      	pop	{r7}
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	20000d7c 	.word	0x20000d7c
 8007eb4:	20000d68 	.word	0x20000d68

08007eb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d109      	bne.n	8007edc <xTaskCheckForTimeOut+0x24>
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	613b      	str	r3, [r7, #16]
 8007eda:	e7fe      	b.n	8007eda <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d109      	bne.n	8007ef6 <xTaskCheckForTimeOut+0x3e>
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e7fe      	b.n	8007ef4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007ef6:	f000 fdf7 	bl	8008ae8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007efa:	4b1d      	ldr	r3, [pc, #116]	; (8007f70 <xTaskCheckForTimeOut+0xb8>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f12:	d102      	bne.n	8007f1a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f14:	2300      	movs	r3, #0
 8007f16:	61fb      	str	r3, [r7, #28]
 8007f18:	e023      	b.n	8007f62 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	4b15      	ldr	r3, [pc, #84]	; (8007f74 <xTaskCheckForTimeOut+0xbc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d007      	beq.n	8007f36 <xTaskCheckForTimeOut+0x7e>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d302      	bcc.n	8007f36 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f30:	2301      	movs	r3, #1
 8007f32:	61fb      	str	r3, [r7, #28]
 8007f34:	e015      	b.n	8007f62 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d20b      	bcs.n	8007f58 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	1ad2      	subs	r2, r2, r3
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff ff9d 	bl	8007e8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f52:	2300      	movs	r3, #0
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	e004      	b.n	8007f62 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f62:	f000 fdef 	bl	8008b44 <vPortExitCritical>

	return xReturn;
 8007f66:	69fb      	ldr	r3, [r7, #28]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3720      	adds	r7, #32
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20000d68 	.word	0x20000d68
 8007f74:	20000d7c 	.word	0x20000d7c

08007f78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f7c:	4b03      	ldr	r3, [pc, #12]	; (8007f8c <vTaskMissedYield+0x14>)
 8007f7e:	2201      	movs	r2, #1
 8007f80:	601a      	str	r2, [r3, #0]
}
 8007f82:	bf00      	nop
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bc80      	pop	{r7}
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	20000d78 	.word	0x20000d78

08007f90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f98:	f000 f852 	bl	8008040 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f9c:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <prvIdleTask+0x28>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d9f9      	bls.n	8007f98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fa4:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <prvIdleTask+0x2c>)
 8007fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007fb4:	e7f0      	b.n	8007f98 <prvIdleTask+0x8>
 8007fb6:	bf00      	nop
 8007fb8:	20000894 	.word	0x20000894
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	607b      	str	r3, [r7, #4]
 8007fca:	e00c      	b.n	8007fe6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4a12      	ldr	r2, [pc, #72]	; (8008020 <prvInitialiseTaskLists+0x60>)
 8007fd8:	4413      	add	r3, r2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fe fc52 	bl	8006884 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	607b      	str	r3, [r7, #4]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b37      	cmp	r3, #55	; 0x37
 8007fea:	d9ef      	bls.n	8007fcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fec:	480d      	ldr	r0, [pc, #52]	; (8008024 <prvInitialiseTaskLists+0x64>)
 8007fee:	f7fe fc49 	bl	8006884 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ff2:	480d      	ldr	r0, [pc, #52]	; (8008028 <prvInitialiseTaskLists+0x68>)
 8007ff4:	f7fe fc46 	bl	8006884 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ff8:	480c      	ldr	r0, [pc, #48]	; (800802c <prvInitialiseTaskLists+0x6c>)
 8007ffa:	f7fe fc43 	bl	8006884 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ffe:	480c      	ldr	r0, [pc, #48]	; (8008030 <prvInitialiseTaskLists+0x70>)
 8008000:	f7fe fc40 	bl	8006884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008004:	480b      	ldr	r0, [pc, #44]	; (8008034 <prvInitialiseTaskLists+0x74>)
 8008006:	f7fe fc3d 	bl	8006884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800800a:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <prvInitialiseTaskLists+0x78>)
 800800c:	4a05      	ldr	r2, [pc, #20]	; (8008024 <prvInitialiseTaskLists+0x64>)
 800800e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008010:	4b0a      	ldr	r3, [pc, #40]	; (800803c <prvInitialiseTaskLists+0x7c>)
 8008012:	4a05      	ldr	r2, [pc, #20]	; (8008028 <prvInitialiseTaskLists+0x68>)
 8008014:	601a      	str	r2, [r3, #0]
}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000894 	.word	0x20000894
 8008024:	20000cf4 	.word	0x20000cf4
 8008028:	20000d08 	.word	0x20000d08
 800802c:	20000d24 	.word	0x20000d24
 8008030:	20000d38 	.word	0x20000d38
 8008034:	20000d50 	.word	0x20000d50
 8008038:	20000d1c 	.word	0x20000d1c
 800803c:	20000d20 	.word	0x20000d20

08008040 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008046:	e019      	b.n	800807c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008048:	f000 fd4e 	bl	8008ae8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800804c:	4b0f      	ldr	r3, [pc, #60]	; (800808c <prvCheckTasksWaitingTermination+0x4c>)
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3304      	adds	r3, #4
 8008058:	4618      	mov	r0, r3
 800805a:	f7fe fc99 	bl	8006990 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800805e:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <prvCheckTasksWaitingTermination+0x50>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3b01      	subs	r3, #1
 8008064:	4a0a      	ldr	r2, [pc, #40]	; (8008090 <prvCheckTasksWaitingTermination+0x50>)
 8008066:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008068:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <prvCheckTasksWaitingTermination+0x54>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3b01      	subs	r3, #1
 800806e:	4a09      	ldr	r2, [pc, #36]	; (8008094 <prvCheckTasksWaitingTermination+0x54>)
 8008070:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008072:	f000 fd67 	bl	8008b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f80e 	bl	8008098 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800807c:	4b05      	ldr	r3, [pc, #20]	; (8008094 <prvCheckTasksWaitingTermination+0x54>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e1      	bne.n	8008048 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008084:	bf00      	nop
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20000d38 	.word	0x20000d38
 8008090:	20000d64 	.word	0x20000d64
 8008094:	20000d4c 	.word	0x20000d4c

08008098 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d108      	bne.n	80080bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fed2 	bl	8008e58 <vPortFree>
				vPortFree( pxTCB );
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fecf 	bl	8008e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080ba:	e017      	b.n	80080ec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d103      	bne.n	80080ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fec6 	bl	8008e58 <vPortFree>
	}
 80080cc:	e00e      	b.n	80080ec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d009      	beq.n	80080ec <prvDeleteTCB+0x54>
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	e7fe      	b.n	80080ea <prvDeleteTCB+0x52>
	}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080fa:	4b0e      	ldr	r3, [pc, #56]	; (8008134 <prvResetNextTaskUnblockTime+0x40>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <prvResetNextTaskUnblockTime+0x14>
 8008104:	2301      	movs	r3, #1
 8008106:	e000      	b.n	800810a <prvResetNextTaskUnblockTime+0x16>
 8008108:	2300      	movs	r3, #0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d004      	beq.n	8008118 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800810e:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <prvResetNextTaskUnblockTime+0x44>)
 8008110:	f04f 32ff 	mov.w	r2, #4294967295
 8008114:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008116:	e008      	b.n	800812a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008118:	4b06      	ldr	r3, [pc, #24]	; (8008134 <prvResetNextTaskUnblockTime+0x40>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	4a04      	ldr	r2, [pc, #16]	; (8008138 <prvResetNextTaskUnblockTime+0x44>)
 8008128:	6013      	str	r3, [r2, #0]
}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	bc80      	pop	{r7}
 8008132:	4770      	bx	lr
 8008134:	20000d1c 	.word	0x20000d1c
 8008138:	20000d84 	.word	0x20000d84

0800813c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008142:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <xTaskGetSchedulerState+0x34>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d102      	bne.n	8008150 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800814a:	2301      	movs	r3, #1
 800814c:	607b      	str	r3, [r7, #4]
 800814e:	e008      	b.n	8008162 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008150:	4b08      	ldr	r3, [pc, #32]	; (8008174 <xTaskGetSchedulerState+0x38>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d102      	bne.n	800815e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008158:	2302      	movs	r3, #2
 800815a:	607b      	str	r3, [r7, #4]
 800815c:	e001      	b.n	8008162 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800815e:	2300      	movs	r3, #0
 8008160:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008162:	687b      	ldr	r3, [r7, #4]
	}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	20000d70 	.word	0x20000d70
 8008174:	20000d8c 	.word	0x20000d8c

08008178 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008184:	2300      	movs	r3, #0
 8008186:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d054      	beq.n	8008238 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800818e:	4b2d      	ldr	r3, [pc, #180]	; (8008244 <xTaskPriorityDisinherit+0xcc>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	429a      	cmp	r2, r3
 8008196:	d009      	beq.n	80081ac <xTaskPriorityDisinherit+0x34>
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	e7fe      	b.n	80081aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d109      	bne.n	80081c8 <xTaskPriorityDisinherit+0x50>
 80081b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	e7fe      	b.n	80081c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081cc:	1e5a      	subs	r2, r3, #1
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	665a      	str	r2, [r3, #100]	; 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081da:	429a      	cmp	r2, r3
 80081dc:	d02c      	beq.n	8008238 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d128      	bne.n	8008238 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	3304      	adds	r3, #4
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fe fbd0 	bl	8006990 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008208:	4b0f      	ldr	r3, [pc, #60]	; (8008248 <xTaskPriorityDisinherit+0xd0>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d903      	bls.n	8008218 <xTaskPriorityDisinherit+0xa0>
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	4a0c      	ldr	r2, [pc, #48]	; (8008248 <xTaskPriorityDisinherit+0xd0>)
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821c:	4613      	mov	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4a09      	ldr	r2, [pc, #36]	; (800824c <xTaskPriorityDisinherit+0xd4>)
 8008226:	441a      	add	r2, r3
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	3304      	adds	r3, #4
 800822c:	4619      	mov	r1, r3
 800822e:	4610      	mov	r0, r2
 8008230:	f7fe fb53 	bl	80068da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008234:	2301      	movs	r3, #1
 8008236:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008238:	697b      	ldr	r3, [r7, #20]
	}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000890 	.word	0x20000890
 8008248:	20000d6c 	.word	0x20000d6c
 800824c:	20000894 	.word	0x20000894

08008250 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800825a:	4b21      	ldr	r3, [pc, #132]	; (80082e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008260:	4b20      	ldr	r3, [pc, #128]	; (80082e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3304      	adds	r3, #4
 8008266:	4618      	mov	r0, r3
 8008268:	f7fe fb92 	bl	8006990 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008272:	d10a      	bne.n	800828a <prvAddCurrentTaskToDelayedList+0x3a>
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d007      	beq.n	800828a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800827a:	4b1a      	ldr	r3, [pc, #104]	; (80082e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3304      	adds	r3, #4
 8008280:	4619      	mov	r1, r3
 8008282:	4819      	ldr	r0, [pc, #100]	; (80082e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008284:	f7fe fb29 	bl	80068da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008288:	e026      	b.n	80082d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4413      	add	r3, r2
 8008290:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008292:	4b14      	ldr	r3, [pc, #80]	; (80082e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d209      	bcs.n	80082b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a2:	4b12      	ldr	r3, [pc, #72]	; (80082ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	3304      	adds	r3, #4
 80082ac:	4619      	mov	r1, r3
 80082ae:	4610      	mov	r0, r2
 80082b0:	f7fe fb36 	bl	8006920 <vListInsert>
}
 80082b4:	e010      	b.n	80082d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082b6:	4b0e      	ldr	r3, [pc, #56]	; (80082f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3304      	adds	r3, #4
 80082c0:	4619      	mov	r1, r3
 80082c2:	4610      	mov	r0, r2
 80082c4:	f7fe fb2c 	bl	8006920 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082c8:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d202      	bcs.n	80082d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082d2:	4a08      	ldr	r2, [pc, #32]	; (80082f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	6013      	str	r3, [r2, #0]
}
 80082d8:	bf00      	nop
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20000d68 	.word	0x20000d68
 80082e4:	20000890 	.word	0x20000890
 80082e8:	20000d50 	.word	0x20000d50
 80082ec:	20000d20 	.word	0x20000d20
 80082f0:	20000d1c 	.word	0x20000d1c
 80082f4:	20000d84 	.word	0x20000d84

080082f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08a      	sub	sp, #40	; 0x28
 80082fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082fe:	2300      	movs	r3, #0
 8008300:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008302:	f000 fac3 	bl	800888c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008306:	4b1c      	ldr	r3, [pc, #112]	; (8008378 <xTimerCreateTimerTask+0x80>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d021      	beq.n	8008352 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008312:	2300      	movs	r3, #0
 8008314:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008316:	1d3a      	adds	r2, r7, #4
 8008318:	f107 0108 	add.w	r1, r7, #8
 800831c:	f107 030c 	add.w	r3, r7, #12
 8008320:	4618      	mov	r0, r3
 8008322:	f7fe fa95 	bl	8006850 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	9202      	str	r2, [sp, #8]
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	2302      	movs	r3, #2
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	2300      	movs	r3, #0
 8008336:	460a      	mov	r2, r1
 8008338:	4910      	ldr	r1, [pc, #64]	; (800837c <xTimerCreateTimerTask+0x84>)
 800833a:	4811      	ldr	r0, [pc, #68]	; (8008380 <xTimerCreateTimerTask+0x88>)
 800833c:	f7ff f862 	bl	8007404 <xTaskCreateStatic>
 8008340:	4602      	mov	r2, r0
 8008342:	4b10      	ldr	r3, [pc, #64]	; (8008384 <xTimerCreateTimerTask+0x8c>)
 8008344:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008346:	4b0f      	ldr	r3, [pc, #60]	; (8008384 <xTimerCreateTimerTask+0x8c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800834e:	2301      	movs	r3, #1
 8008350:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d109      	bne.n	800836c <xTimerCreateTimerTask+0x74>
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	613b      	str	r3, [r7, #16]
 800836a:	e7fe      	b.n	800836a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800836c:	697b      	ldr	r3, [r7, #20]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000dc8 	.word	0x20000dc8
 800837c:	08009b64 	.word	0x08009b64
 8008380:	080084a1 	.word	0x080084a1
 8008384:	20000dcc 	.word	0x20000dcc

08008388 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	; 0x28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008396:	2300      	movs	r3, #0
 8008398:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d109      	bne.n	80083b4 <xTimerGenericCommand+0x2c>
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	623b      	str	r3, [r7, #32]
 80083b2:	e7fe      	b.n	80083b2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083b4:	4b19      	ldr	r3, [pc, #100]	; (800841c <xTimerGenericCommand+0x94>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d02a      	beq.n	8008412 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2b05      	cmp	r3, #5
 80083cc:	dc18      	bgt.n	8008400 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083ce:	f7ff feb5 	bl	800813c <xTaskGetSchedulerState>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d109      	bne.n	80083ec <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083d8:	4b10      	ldr	r3, [pc, #64]	; (800841c <xTimerGenericCommand+0x94>)
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	f107 0110 	add.w	r1, r7, #16
 80083e0:	2300      	movs	r3, #0
 80083e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083e4:	f7fe fc38 	bl	8006c58 <xQueueGenericSend>
 80083e8:	6278      	str	r0, [r7, #36]	; 0x24
 80083ea:	e012      	b.n	8008412 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083ec:	4b0b      	ldr	r3, [pc, #44]	; (800841c <xTimerGenericCommand+0x94>)
 80083ee:	6818      	ldr	r0, [r3, #0]
 80083f0:	f107 0110 	add.w	r1, r7, #16
 80083f4:	2300      	movs	r3, #0
 80083f6:	2200      	movs	r2, #0
 80083f8:	f7fe fc2e 	bl	8006c58 <xQueueGenericSend>
 80083fc:	6278      	str	r0, [r7, #36]	; 0x24
 80083fe:	e008      	b.n	8008412 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008400:	4b06      	ldr	r3, [pc, #24]	; (800841c <xTimerGenericCommand+0x94>)
 8008402:	6818      	ldr	r0, [r3, #0]
 8008404:	f107 0110 	add.w	r1, r7, #16
 8008408:	2300      	movs	r3, #0
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	f7fe fd1e 	bl	8006e4c <xQueueGenericSendFromISR>
 8008410:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008414:	4618      	mov	r0, r3
 8008416:	3728      	adds	r7, #40	; 0x28
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20000dc8 	.word	0x20000dc8

08008420 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b088      	sub	sp, #32
 8008424:	af02      	add	r7, sp, #8
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800842a:	4b1c      	ldr	r3, [pc, #112]	; (800849c <prvProcessExpiredTimer+0x7c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	3304      	adds	r3, #4
 8008438:	4618      	mov	r0, r3
 800843a:	f7fe faa9 	bl	8006990 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d121      	bne.n	800848a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	699a      	ldr	r2, [r3, #24]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	18d1      	adds	r1, r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	6978      	ldr	r0, [r7, #20]
 8008454:	f000 f8c8 	bl	80085e8 <prvInsertTimerInActiveList>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d015      	beq.n	800848a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800845e:	2300      	movs	r3, #0
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	2300      	movs	r3, #0
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	2100      	movs	r1, #0
 8008468:	6978      	ldr	r0, [r7, #20]
 800846a:	f7ff ff8d 	bl	8008388 <xTimerGenericCommand>
 800846e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d109      	bne.n	800848a <prvProcessExpiredTimer+0x6a>
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	e7fe      	b.n	8008488 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	6978      	ldr	r0, [r7, #20]
 8008490:	4798      	blx	r3
}
 8008492:	bf00      	nop
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	20000dc0 	.word	0x20000dc0

080084a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084a8:	f107 0308 	add.w	r3, r7, #8
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 f857 	bl	8008560 <prvGetNextExpireTime>
 80084b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	4619      	mov	r1, r3
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 f803 	bl	80084c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084be:	f000 f8d5 	bl	800866c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084c2:	e7f1      	b.n	80084a8 <prvTimerTask+0x8>

080084c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084ce:	f7ff fa3f 	bl	8007950 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084d2:	f107 0308 	add.w	r3, r7, #8
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 f866 	bl	80085a8 <prvSampleTimeNow>
 80084dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d130      	bne.n	8008546 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10a      	bne.n	8008500 <prvProcessTimerOrBlockTask+0x3c>
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d806      	bhi.n	8008500 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084f2:	f7ff fa3b 	bl	800796c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084f6:	68f9      	ldr	r1, [r7, #12]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff ff91 	bl	8008420 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084fe:	e024      	b.n	800854a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d008      	beq.n	8008518 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008506:	4b13      	ldr	r3, [pc, #76]	; (8008554 <prvProcessTimerOrBlockTask+0x90>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	bf0c      	ite	eq
 8008510:	2301      	moveq	r3, #1
 8008512:	2300      	movne	r3, #0
 8008514:	b2db      	uxtb	r3, r3
 8008516:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008518:	4b0f      	ldr	r3, [pc, #60]	; (8008558 <prvProcessTimerOrBlockTask+0x94>)
 800851a:	6818      	ldr	r0, [r3, #0]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	4619      	mov	r1, r3
 8008526:	f7fe ff39 	bl	800739c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800852a:	f7ff fa1f 	bl	800796c <xTaskResumeAll>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008534:	4b09      	ldr	r3, [pc, #36]	; (800855c <prvProcessTimerOrBlockTask+0x98>)
 8008536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	f3bf 8f6f 	isb	sy
}
 8008544:	e001      	b.n	800854a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008546:	f7ff fa11 	bl	800796c <xTaskResumeAll>
}
 800854a:	bf00      	nop
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	20000dc4 	.word	0x20000dc4
 8008558:	20000dc8 	.word	0x20000dc8
 800855c:	e000ed04 	.word	0xe000ed04

08008560 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008568:	4b0e      	ldr	r3, [pc, #56]	; (80085a4 <prvGetNextExpireTime+0x44>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	bf0c      	ite	eq
 8008572:	2301      	moveq	r3, #1
 8008574:	2300      	movne	r3, #0
 8008576:	b2db      	uxtb	r3, r3
 8008578:	461a      	mov	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d105      	bne.n	8008592 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008586:	4b07      	ldr	r3, [pc, #28]	; (80085a4 <prvGetNextExpireTime+0x44>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	e001      	b.n	8008596 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008592:	2300      	movs	r3, #0
 8008594:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008596:	68fb      	ldr	r3, [r7, #12]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	20000dc0 	.word	0x20000dc0

080085a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085b0:	f7ff fa78 	bl	8007aa4 <xTaskGetTickCount>
 80085b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085b6:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <prvSampleTimeNow+0x3c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d205      	bcs.n	80085cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085c0:	f000 f904 	bl	80087cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	e002      	b.n	80085d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085d2:	4a04      	ldr	r2, [pc, #16]	; (80085e4 <prvSampleTimeNow+0x3c>)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085d8:	68fb      	ldr	r3, [r7, #12]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000dd0 	.word	0x20000dd0

080085e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085f6:	2300      	movs	r3, #0
 80085f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	429a      	cmp	r2, r3
 800860c:	d812      	bhi.n	8008634 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	1ad2      	subs	r2, r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	429a      	cmp	r2, r3
 800861a:	d302      	bcc.n	8008622 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800861c:	2301      	movs	r3, #1
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	e01b      	b.n	800865a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008622:	4b10      	ldr	r3, [pc, #64]	; (8008664 <prvInsertTimerInActiveList+0x7c>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3304      	adds	r3, #4
 800862a:	4619      	mov	r1, r3
 800862c:	4610      	mov	r0, r2
 800862e:	f7fe f977 	bl	8006920 <vListInsert>
 8008632:	e012      	b.n	800865a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	429a      	cmp	r2, r3
 800863a:	d206      	bcs.n	800864a <prvInsertTimerInActiveList+0x62>
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d302      	bcc.n	800864a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008644:	2301      	movs	r3, #1
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	e007      	b.n	800865a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800864a:	4b07      	ldr	r3, [pc, #28]	; (8008668 <prvInsertTimerInActiveList+0x80>)
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3304      	adds	r3, #4
 8008652:	4619      	mov	r1, r3
 8008654:	4610      	mov	r0, r2
 8008656:	f7fe f963 	bl	8006920 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800865a:	697b      	ldr	r3, [r7, #20]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	20000dc4 	.word	0x20000dc4
 8008668:	20000dc0 	.word	0x20000dc0

0800866c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08e      	sub	sp, #56	; 0x38
 8008670:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008672:	e099      	b.n	80087a8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	da17      	bge.n	80086aa <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800867a:	1d3b      	adds	r3, r7, #4
 800867c:	3304      	adds	r3, #4
 800867e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	2b00      	cmp	r3, #0
 8008684:	d109      	bne.n	800869a <prvProcessReceivedCommands+0x2e>
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	61fb      	str	r3, [r7, #28]
 8008698:	e7fe      	b.n	8008698 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086a0:	6850      	ldr	r0, [r2, #4]
 80086a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086a4:	6892      	ldr	r2, [r2, #8]
 80086a6:	4611      	mov	r1, r2
 80086a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	db7a      	blt.n	80087a6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d004      	beq.n	80086c6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	3304      	adds	r3, #4
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fe f965 	bl	8006990 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086c6:	463b      	mov	r3, r7
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff ff6d 	bl	80085a8 <prvSampleTimeNow>
 80086ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b09      	cmp	r3, #9
 80086d4:	d868      	bhi.n	80087a8 <prvProcessReceivedCommands+0x13c>
 80086d6:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <prvProcessReceivedCommands+0x70>)
 80086d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086dc:	08008705 	.word	0x08008705
 80086e0:	08008705 	.word	0x08008705
 80086e4:	08008705 	.word	0x08008705
 80086e8:	080087a9 	.word	0x080087a9
 80086ec:	0800875f 	.word	0x0800875f
 80086f0:	08008795 	.word	0x08008795
 80086f4:	08008705 	.word	0x08008705
 80086f8:	08008705 	.word	0x08008705
 80086fc:	080087a9 	.word	0x080087a9
 8008700:	0800875f 	.word	0x0800875f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	18d1      	adds	r1, r2, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008712:	f7ff ff69 	bl	80085e8 <prvInsertTimerInActiveList>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d045      	beq.n	80087a8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008722:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d13d      	bne.n	80087a8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	441a      	add	r2, r3
 8008734:	2300      	movs	r3, #0
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	2300      	movs	r3, #0
 800873a:	2100      	movs	r1, #0
 800873c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873e:	f7ff fe23 	bl	8008388 <xTimerGenericCommand>
 8008742:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d12e      	bne.n	80087a8 <prvProcessReceivedCommands+0x13c>
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	61bb      	str	r3, [r7, #24]
 800875c:	e7fe      	b.n	800875c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d109      	bne.n	8008780 <prvProcessReceivedCommands+0x114>
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	617b      	str	r3, [r7, #20]
 800877e:	e7fe      	b.n	800877e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	699a      	ldr	r2, [r3, #24]
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	18d1      	adds	r1, r2, r3
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800878c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800878e:	f7ff ff2b 	bl	80085e8 <prvInsertTimerInActiveList>
					break;
 8008792:	e009      	b.n	80087a8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800879a:	2b00      	cmp	r3, #0
 800879c:	d104      	bne.n	80087a8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800879e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087a0:	f000 fb5a 	bl	8008e58 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087a4:	e000      	b.n	80087a8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80087a6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087a8:	4b07      	ldr	r3, [pc, #28]	; (80087c8 <prvProcessReceivedCommands+0x15c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	1d39      	adds	r1, r7, #4
 80087ae:	2200      	movs	r2, #0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fe fbdf 	bl	8006f74 <xQueueReceive>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f47f af5b 	bne.w	8008674 <prvProcessReceivedCommands+0x8>
	}
}
 80087be:	bf00      	nop
 80087c0:	3730      	adds	r7, #48	; 0x30
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20000dc8 	.word	0x20000dc8

080087cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b088      	sub	sp, #32
 80087d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087d2:	e044      	b.n	800885e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087d4:	4b2b      	ldr	r3, [pc, #172]	; (8008884 <prvSwitchTimerLists+0xb8>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087de:	4b29      	ldr	r3, [pc, #164]	; (8008884 <prvSwitchTimerLists+0xb8>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe f8cf 	bl	8006990 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d12d      	bne.n	800885e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	4413      	add	r3, r2
 800880a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	429a      	cmp	r2, r3
 8008812:	d90e      	bls.n	8008832 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008820:	4b18      	ldr	r3, [pc, #96]	; (8008884 <prvSwitchTimerLists+0xb8>)
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	3304      	adds	r3, #4
 8008828:	4619      	mov	r1, r3
 800882a:	4610      	mov	r0, r2
 800882c:	f7fe f878 	bl	8006920 <vListInsert>
 8008830:	e015      	b.n	800885e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008832:	2300      	movs	r3, #0
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	2300      	movs	r3, #0
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	2100      	movs	r1, #0
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7ff fda3 	bl	8008388 <xTimerGenericCommand>
 8008842:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d109      	bne.n	800885e <prvSwitchTimerLists+0x92>
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	e7fe      	b.n	800885c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800885e:	4b09      	ldr	r3, [pc, #36]	; (8008884 <prvSwitchTimerLists+0xb8>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1b5      	bne.n	80087d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008868:	4b06      	ldr	r3, [pc, #24]	; (8008884 <prvSwitchTimerLists+0xb8>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800886e:	4b06      	ldr	r3, [pc, #24]	; (8008888 <prvSwitchTimerLists+0xbc>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a04      	ldr	r2, [pc, #16]	; (8008884 <prvSwitchTimerLists+0xb8>)
 8008874:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008876:	4a04      	ldr	r2, [pc, #16]	; (8008888 <prvSwitchTimerLists+0xbc>)
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	6013      	str	r3, [r2, #0]
}
 800887c:	bf00      	nop
 800887e:	3718      	adds	r7, #24
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	20000dc0 	.word	0x20000dc0
 8008888:	20000dc4 	.word	0x20000dc4

0800888c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008892:	f000 f929 	bl	8008ae8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008896:	4b15      	ldr	r3, [pc, #84]	; (80088ec <prvCheckForValidListAndQueue+0x60>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d120      	bne.n	80088e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800889e:	4814      	ldr	r0, [pc, #80]	; (80088f0 <prvCheckForValidListAndQueue+0x64>)
 80088a0:	f7fd fff0 	bl	8006884 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088a4:	4813      	ldr	r0, [pc, #76]	; (80088f4 <prvCheckForValidListAndQueue+0x68>)
 80088a6:	f7fd ffed 	bl	8006884 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088aa:	4b13      	ldr	r3, [pc, #76]	; (80088f8 <prvCheckForValidListAndQueue+0x6c>)
 80088ac:	4a10      	ldr	r2, [pc, #64]	; (80088f0 <prvCheckForValidListAndQueue+0x64>)
 80088ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088b0:	4b12      	ldr	r3, [pc, #72]	; (80088fc <prvCheckForValidListAndQueue+0x70>)
 80088b2:	4a10      	ldr	r2, [pc, #64]	; (80088f4 <prvCheckForValidListAndQueue+0x68>)
 80088b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088b6:	2300      	movs	r3, #0
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	4b11      	ldr	r3, [pc, #68]	; (8008900 <prvCheckForValidListAndQueue+0x74>)
 80088bc:	4a11      	ldr	r2, [pc, #68]	; (8008904 <prvCheckForValidListAndQueue+0x78>)
 80088be:	2110      	movs	r1, #16
 80088c0:	200a      	movs	r0, #10
 80088c2:	f7fe f8f7 	bl	8006ab4 <xQueueGenericCreateStatic>
 80088c6:	4602      	mov	r2, r0
 80088c8:	4b08      	ldr	r3, [pc, #32]	; (80088ec <prvCheckForValidListAndQueue+0x60>)
 80088ca:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088cc:	4b07      	ldr	r3, [pc, #28]	; (80088ec <prvCheckForValidListAndQueue+0x60>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088d4:	4b05      	ldr	r3, [pc, #20]	; (80088ec <prvCheckForValidListAndQueue+0x60>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	490b      	ldr	r1, [pc, #44]	; (8008908 <prvCheckForValidListAndQueue+0x7c>)
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe fd36 	bl	800734c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088e0:	f000 f930 	bl	8008b44 <vPortExitCritical>
}
 80088e4:	bf00      	nop
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	20000dc8 	.word	0x20000dc8
 80088f0:	20000d98 	.word	0x20000d98
 80088f4:	20000dac 	.word	0x20000dac
 80088f8:	20000dc0 	.word	0x20000dc0
 80088fc:	20000dc4 	.word	0x20000dc4
 8008900:	20000e74 	.word	0x20000e74
 8008904:	20000dd4 	.word	0x20000dd4
 8008908:	08009b6c 	.word	0x08009b6c

0800890c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3b04      	subs	r3, #4
 800891c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	3b04      	subs	r3, #4
 800892a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f023 0201 	bic.w	r2, r3, #1
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3b04      	subs	r3, #4
 800893a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800893c:	4a08      	ldr	r2, [pc, #32]	; (8008960 <pxPortInitialiseStack+0x54>)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3b14      	subs	r3, #20
 8008946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3b20      	subs	r3, #32
 8008952:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008954:	68fb      	ldr	r3, [r7, #12]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	bc80      	pop	{r7}
 800895e:	4770      	bx	lr
 8008960:	08008965 	.word	0x08008965

08008964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800896a:	2300      	movs	r3, #0
 800896c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800896e:	4b10      	ldr	r3, [pc, #64]	; (80089b0 <prvTaskExitError+0x4c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008976:	d009      	beq.n	800898c <prvTaskExitError+0x28>
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	e7fe      	b.n	800898a <prvTaskExitError+0x26>
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800899e:	bf00      	nop
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0fc      	beq.n	80089a0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089a6:	bf00      	nop
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr
 80089b0:	20000120 	.word	0x20000120
	...

080089c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089c0:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <pxCurrentTCBConst2>)
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	6808      	ldr	r0, [r1, #0]
 80089c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80089ca:	f380 8809 	msr	PSP, r0
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f04f 0000 	mov.w	r0, #0
 80089d6:	f380 8811 	msr	BASEPRI, r0
 80089da:	f04e 0e0d 	orr.w	lr, lr, #13
 80089de:	4770      	bx	lr

080089e0 <pxCurrentTCBConst2>:
 80089e0:	20000890 	.word	0x20000890
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop

080089e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80089e8:	4806      	ldr	r0, [pc, #24]	; (8008a04 <prvPortStartFirstTask+0x1c>)
 80089ea:	6800      	ldr	r0, [r0, #0]
 80089ec:	6800      	ldr	r0, [r0, #0]
 80089ee:	f380 8808 	msr	MSP, r0
 80089f2:	b662      	cpsie	i
 80089f4:	b661      	cpsie	f
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	df00      	svc	0
 8008a00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a02:	bf00      	nop
 8008a04:	e000ed08 	.word	0xe000ed08

08008a08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a0e:	4b31      	ldr	r3, [pc, #196]	; (8008ad4 <xPortStartScheduler+0xcc>)
 8008a10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	22ff      	movs	r2, #255	; 0xff
 8008a1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a28:	78fb      	ldrb	r3, [r7, #3]
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	4b29      	ldr	r3, [pc, #164]	; (8008ad8 <xPortStartScheduler+0xd0>)
 8008a34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a36:	4b29      	ldr	r3, [pc, #164]	; (8008adc <xPortStartScheduler+0xd4>)
 8008a38:	2207      	movs	r2, #7
 8008a3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a3c:	e009      	b.n	8008a52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a3e:	4b27      	ldr	r3, [pc, #156]	; (8008adc <xPortStartScheduler+0xd4>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	4a25      	ldr	r2, [pc, #148]	; (8008adc <xPortStartScheduler+0xd4>)
 8008a46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a52:	78fb      	ldrb	r3, [r7, #3]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a5a:	2b80      	cmp	r3, #128	; 0x80
 8008a5c:	d0ef      	beq.n	8008a3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a5e:	4b1f      	ldr	r3, [pc, #124]	; (8008adc <xPortStartScheduler+0xd4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f1c3 0307 	rsb	r3, r3, #7
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	d009      	beq.n	8008a7e <xPortStartScheduler+0x76>
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	60bb      	str	r3, [r7, #8]
 8008a7c:	e7fe      	b.n	8008a7c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a7e:	4b17      	ldr	r3, [pc, #92]	; (8008adc <xPortStartScheduler+0xd4>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	4a15      	ldr	r2, [pc, #84]	; (8008adc <xPortStartScheduler+0xd4>)
 8008a86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a88:	4b14      	ldr	r3, [pc, #80]	; (8008adc <xPortStartScheduler+0xd4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a90:	4a12      	ldr	r2, [pc, #72]	; (8008adc <xPortStartScheduler+0xd4>)
 8008a92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a9c:	4b10      	ldr	r3, [pc, #64]	; (8008ae0 <xPortStartScheduler+0xd8>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a0f      	ldr	r2, [pc, #60]	; (8008ae0 <xPortStartScheduler+0xd8>)
 8008aa2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008aa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008aa8:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <xPortStartScheduler+0xd8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a0c      	ldr	r2, [pc, #48]	; (8008ae0 <xPortStartScheduler+0xd8>)
 8008aae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ab2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ab4:	f000 f8b0 	bl	8008c18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ab8:	4b0a      	ldr	r3, [pc, #40]	; (8008ae4 <xPortStartScheduler+0xdc>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008abe:	f7ff ff93 	bl	80089e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ac2:	f7ff f8bb 	bl	8007c3c <vTaskSwitchContext>
	prvTaskExitError();
 8008ac6:	f7ff ff4d 	bl	8008964 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	e000e400 	.word	0xe000e400
 8008ad8:	20000ec4 	.word	0x20000ec4
 8008adc:	20000ec8 	.word	0x20000ec8
 8008ae0:	e000ed20 	.word	0xe000ed20
 8008ae4:	20000120 	.word	0x20000120

08008ae8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b00:	4b0e      	ldr	r3, [pc, #56]	; (8008b3c <vPortEnterCritical+0x54>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3301      	adds	r3, #1
 8008b06:	4a0d      	ldr	r2, [pc, #52]	; (8008b3c <vPortEnterCritical+0x54>)
 8008b08:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b0a:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <vPortEnterCritical+0x54>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d10e      	bne.n	8008b30 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b12:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <vPortEnterCritical+0x58>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d009      	beq.n	8008b30 <vPortEnterCritical+0x48>
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	603b      	str	r3, [r7, #0]
 8008b2e:	e7fe      	b.n	8008b2e <vPortEnterCritical+0x46>
	}
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bc80      	pop	{r7}
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	20000120 	.word	0x20000120
 8008b40:	e000ed04 	.word	0xe000ed04

08008b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b4a:	4b10      	ldr	r3, [pc, #64]	; (8008b8c <vPortExitCritical+0x48>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d109      	bne.n	8008b66 <vPortExitCritical+0x22>
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	607b      	str	r3, [r7, #4]
 8008b64:	e7fe      	b.n	8008b64 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008b66:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <vPortExitCritical+0x48>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	4a07      	ldr	r2, [pc, #28]	; (8008b8c <vPortExitCritical+0x48>)
 8008b6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b70:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <vPortExitCritical+0x48>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d104      	bne.n	8008b82 <vPortExitCritical+0x3e>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b82:	bf00      	nop
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bc80      	pop	{r7}
 8008b8a:	4770      	bx	lr
 8008b8c:	20000120 	.word	0x20000120

08008b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b90:	f3ef 8009 	mrs	r0, PSP
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	4b0d      	ldr	r3, [pc, #52]	; (8008bd0 <pxCurrentTCBConst>)
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008ba0:	6010      	str	r0, [r2, #0]
 8008ba2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008ba6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008baa:	f380 8811 	msr	BASEPRI, r0
 8008bae:	f7ff f845 	bl	8007c3c <vTaskSwitchContext>
 8008bb2:	f04f 0000 	mov.w	r0, #0
 8008bb6:	f380 8811 	msr	BASEPRI, r0
 8008bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008bbe:	6819      	ldr	r1, [r3, #0]
 8008bc0:	6808      	ldr	r0, [r1, #0]
 8008bc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008bc6:	f380 8809 	msr	PSP, r0
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	4770      	bx	lr

08008bd0 <pxCurrentTCBConst>:
 8008bd0:	20000890 	.word	0x20000890
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop

08008bd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008bf0:	f7fe ff66 	bl	8007ac0 <xTaskIncrementTick>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bfa:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <xPortSysTickHandler+0x3c>)
 8008bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	2300      	movs	r3, #0
 8008c04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	e000ed04 	.word	0xe000ed04

08008c18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <vPortSetupTimerInterrupt+0x30>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c22:	4b0a      	ldr	r3, [pc, #40]	; (8008c4c <vPortSetupTimerInterrupt+0x34>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c28:	4b09      	ldr	r3, [pc, #36]	; (8008c50 <vPortSetupTimerInterrupt+0x38>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a09      	ldr	r2, [pc, #36]	; (8008c54 <vPortSetupTimerInterrupt+0x3c>)
 8008c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c32:	099b      	lsrs	r3, r3, #6
 8008c34:	4a08      	ldr	r2, [pc, #32]	; (8008c58 <vPortSetupTimerInterrupt+0x40>)
 8008c36:	3b01      	subs	r3, #1
 8008c38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c3a:	4b03      	ldr	r3, [pc, #12]	; (8008c48 <vPortSetupTimerInterrupt+0x30>)
 8008c3c:	2207      	movs	r2, #7
 8008c3e:	601a      	str	r2, [r3, #0]
}
 8008c40:	bf00      	nop
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bc80      	pop	{r7}
 8008c46:	4770      	bx	lr
 8008c48:	e000e010 	.word	0xe000e010
 8008c4c:	e000e018 	.word	0xe000e018
 8008c50:	20000004 	.word	0x20000004
 8008c54:	10624dd3 	.word	0x10624dd3
 8008c58:	e000e014 	.word	0xe000e014

08008c5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c62:	f3ef 8305 	mrs	r3, IPSR
 8008c66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b0f      	cmp	r3, #15
 8008c6c:	d913      	bls.n	8008c96 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c6e:	4a15      	ldr	r2, [pc, #84]	; (8008cc4 <vPortValidateInterruptPriority+0x68>)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4413      	add	r3, r2
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c78:	4b13      	ldr	r3, [pc, #76]	; (8008cc8 <vPortValidateInterruptPriority+0x6c>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	7afa      	ldrb	r2, [r7, #11]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d209      	bcs.n	8008c96 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	607b      	str	r3, [r7, #4]
 8008c94:	e7fe      	b.n	8008c94 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c96:	4b0d      	ldr	r3, [pc, #52]	; (8008ccc <vPortValidateInterruptPriority+0x70>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c9e:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <vPortValidateInterruptPriority+0x74>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d909      	bls.n	8008cba <vPortValidateInterruptPriority+0x5e>
 8008ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	e7fe      	b.n	8008cb8 <vPortValidateInterruptPriority+0x5c>
	}
 8008cba:	bf00      	nop
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bc80      	pop	{r7}
 8008cc2:	4770      	bx	lr
 8008cc4:	e000e3f0 	.word	0xe000e3f0
 8008cc8:	20000ec4 	.word	0x20000ec4
 8008ccc:	e000ed0c 	.word	0xe000ed0c
 8008cd0:	20000ec8 	.word	0x20000ec8

08008cd4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08a      	sub	sp, #40	; 0x28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ce0:	f7fe fe36 	bl	8007950 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ce4:	4b57      	ldr	r3, [pc, #348]	; (8008e44 <pvPortMalloc+0x170>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008cec:	f000 f90c 	bl	8008f08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cf0:	4b55      	ldr	r3, [pc, #340]	; (8008e48 <pvPortMalloc+0x174>)
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f040 808c 	bne.w	8008e16 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d01c      	beq.n	8008d3e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008d04:	2208      	movs	r2, #8
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4413      	add	r3, r2
 8008d0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f003 0307 	and.w	r3, r3, #7
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d013      	beq.n	8008d3e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f023 0307 	bic.w	r3, r3, #7
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f003 0307 	and.w	r3, r3, #7
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d009      	beq.n	8008d3e <pvPortMalloc+0x6a>
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	617b      	str	r3, [r7, #20]
 8008d3c:	e7fe      	b.n	8008d3c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d068      	beq.n	8008e16 <pvPortMalloc+0x142>
 8008d44:	4b41      	ldr	r3, [pc, #260]	; (8008e4c <pvPortMalloc+0x178>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d863      	bhi.n	8008e16 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d4e:	4b40      	ldr	r3, [pc, #256]	; (8008e50 <pvPortMalloc+0x17c>)
 8008d50:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d52:	4b3f      	ldr	r3, [pc, #252]	; (8008e50 <pvPortMalloc+0x17c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d58:	e004      	b.n	8008d64 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d903      	bls.n	8008d76 <pvPortMalloc+0xa2>
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1f1      	bne.n	8008d5a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d76:	4b33      	ldr	r3, [pc, #204]	; (8008e44 <pvPortMalloc+0x170>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d04a      	beq.n	8008e16 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2208      	movs	r2, #8
 8008d86:	4413      	add	r3, r2
 8008d88:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	1ad2      	subs	r2, r2, r3
 8008d9a:	2308      	movs	r3, #8
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d91e      	bls.n	8008de0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4413      	add	r3, r2
 8008da8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	f003 0307 	and.w	r3, r3, #7
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d009      	beq.n	8008dc8 <pvPortMalloc+0xf4>
 8008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	613b      	str	r3, [r7, #16]
 8008dc6:	e7fe      	b.n	8008dc6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	1ad2      	subs	r2, r2, r3
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dda:	69b8      	ldr	r0, [r7, #24]
 8008ddc:	f000 f8f6 	bl	8008fcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008de0:	4b1a      	ldr	r3, [pc, #104]	; (8008e4c <pvPortMalloc+0x178>)
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	4a18      	ldr	r2, [pc, #96]	; (8008e4c <pvPortMalloc+0x178>)
 8008dec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dee:	4b17      	ldr	r3, [pc, #92]	; (8008e4c <pvPortMalloc+0x178>)
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	4b18      	ldr	r3, [pc, #96]	; (8008e54 <pvPortMalloc+0x180>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d203      	bcs.n	8008e02 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dfa:	4b14      	ldr	r3, [pc, #80]	; (8008e4c <pvPortMalloc+0x178>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a15      	ldr	r2, [pc, #84]	; (8008e54 <pvPortMalloc+0x180>)
 8008e00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	4b10      	ldr	r3, [pc, #64]	; (8008e48 <pvPortMalloc+0x174>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e16:	f7fe fda9 	bl	800796c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d009      	beq.n	8008e38 <pvPortMalloc+0x164>
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	e7fe      	b.n	8008e36 <pvPortMalloc+0x162>
	return pvReturn;
 8008e38:	69fb      	ldr	r3, [r7, #28]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3728      	adds	r7, #40	; 0x28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20002ed4 	.word	0x20002ed4
 8008e48:	20002ee0 	.word	0x20002ee0
 8008e4c:	20002ed8 	.word	0x20002ed8
 8008e50:	20002ecc 	.word	0x20002ecc
 8008e54:	20002edc 	.word	0x20002edc

08008e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d046      	beq.n	8008ef8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e6a:	2308      	movs	r3, #8
 8008e6c:	425b      	negs	r3, r3
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	4413      	add	r3, r2
 8008e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	4b20      	ldr	r3, [pc, #128]	; (8008f00 <vPortFree+0xa8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4013      	ands	r3, r2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d109      	bne.n	8008e9a <vPortFree+0x42>
 8008e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	e7fe      	b.n	8008e98 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d009      	beq.n	8008eb6 <vPortFree+0x5e>
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	60bb      	str	r3, [r7, #8]
 8008eb4:	e7fe      	b.n	8008eb4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	4b11      	ldr	r3, [pc, #68]	; (8008f00 <vPortFree+0xa8>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d019      	beq.n	8008ef8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d115      	bne.n	8008ef8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	4b0b      	ldr	r3, [pc, #44]	; (8008f00 <vPortFree+0xa8>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	43db      	mvns	r3, r3
 8008ed6:	401a      	ands	r2, r3
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008edc:	f7fe fd38 	bl	8007950 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <vPortFree+0xac>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4413      	add	r3, r2
 8008eea:	4a06      	ldr	r2, [pc, #24]	; (8008f04 <vPortFree+0xac>)
 8008eec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008eee:	6938      	ldr	r0, [r7, #16]
 8008ef0:	f000 f86c 	bl	8008fcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ef4:	f7fe fd3a 	bl	800796c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ef8:	bf00      	nop
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	20002ee0 	.word	0x20002ee0
 8008f04:	20002ed8 	.word	0x20002ed8

08008f08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f14:	4b27      	ldr	r3, [pc, #156]	; (8008fb4 <prvHeapInit+0xac>)
 8008f16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00c      	beq.n	8008f3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3307      	adds	r3, #7
 8008f26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 0307 	bic.w	r3, r3, #7
 8008f2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	4a1f      	ldr	r2, [pc, #124]	; (8008fb4 <prvHeapInit+0xac>)
 8008f38:	4413      	add	r3, r2
 8008f3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f40:	4a1d      	ldr	r2, [pc, #116]	; (8008fb8 <prvHeapInit+0xb0>)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f46:	4b1c      	ldr	r3, [pc, #112]	; (8008fb8 <prvHeapInit+0xb0>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	4413      	add	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f54:	2208      	movs	r2, #8
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	1a9b      	subs	r3, r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f023 0307 	bic.w	r3, r3, #7
 8008f62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4a15      	ldr	r2, [pc, #84]	; (8008fbc <prvHeapInit+0xb4>)
 8008f68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f6a:	4b14      	ldr	r3, [pc, #80]	; (8008fbc <prvHeapInit+0xb4>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f72:	4b12      	ldr	r3, [pc, #72]	; (8008fbc <prvHeapInit+0xb4>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	1ad2      	subs	r2, r2, r3
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f88:	4b0c      	ldr	r3, [pc, #48]	; (8008fbc <prvHeapInit+0xb4>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	4a0a      	ldr	r2, [pc, #40]	; (8008fc0 <prvHeapInit+0xb8>)
 8008f96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	4a09      	ldr	r2, [pc, #36]	; (8008fc4 <prvHeapInit+0xbc>)
 8008f9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fa0:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <prvHeapInit+0xc0>)
 8008fa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fa6:	601a      	str	r2, [r3, #0]
}
 8008fa8:	bf00      	nop
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bc80      	pop	{r7}
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	20000ecc 	.word	0x20000ecc
 8008fb8:	20002ecc 	.word	0x20002ecc
 8008fbc:	20002ed4 	.word	0x20002ed4
 8008fc0:	20002edc 	.word	0x20002edc
 8008fc4:	20002ed8 	.word	0x20002ed8
 8008fc8:	20002ee0 	.word	0x20002ee0

08008fcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fd4:	4b27      	ldr	r3, [pc, #156]	; (8009074 <prvInsertBlockIntoFreeList+0xa8>)
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	e002      	b.n	8008fe0 <prvInsertBlockIntoFreeList+0x14>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d8f7      	bhi.n	8008fda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d108      	bne.n	800900e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	441a      	add	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	441a      	add	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	429a      	cmp	r2, r3
 8009020:	d118      	bne.n	8009054 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <prvInsertBlockIntoFreeList+0xac>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	429a      	cmp	r2, r3
 800902c:	d00d      	beq.n	800904a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	441a      	add	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	e008      	b.n	800905c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800904a:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <prvInsertBlockIntoFreeList+0xac>)
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	e003      	b.n	800905c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d002      	beq.n	800906a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800906a:	bf00      	nop
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	bc80      	pop	{r7}
 8009072:	4770      	bx	lr
 8009074:	20002ecc 	.word	0x20002ecc
 8009078:	20002ed4 	.word	0x20002ed4

0800907c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009080:	2200      	movs	r2, #0
 8009082:	4912      	ldr	r1, [pc, #72]	; (80090cc <MX_USB_DEVICE_Init+0x50>)
 8009084:	4812      	ldr	r0, [pc, #72]	; (80090d0 <MX_USB_DEVICE_Init+0x54>)
 8009086:	f7fc fa00 	bl	800548a <USBD_Init>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009090:	f7f7 fac4 	bl	800061c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009094:	490f      	ldr	r1, [pc, #60]	; (80090d4 <MX_USB_DEVICE_Init+0x58>)
 8009096:	480e      	ldr	r0, [pc, #56]	; (80090d0 <MX_USB_DEVICE_Init+0x54>)
 8009098:	f7fc fa22 	bl	80054e0 <USBD_RegisterClass>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090a2:	f7f7 fabb 	bl	800061c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090a6:	490c      	ldr	r1, [pc, #48]	; (80090d8 <MX_USB_DEVICE_Init+0x5c>)
 80090a8:	4809      	ldr	r0, [pc, #36]	; (80090d0 <MX_USB_DEVICE_Init+0x54>)
 80090aa:	f7fc f953 	bl	8005354 <USBD_CDC_RegisterInterface>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090b4:	f7f7 fab2 	bl	800061c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090b8:	4805      	ldr	r0, [pc, #20]	; (80090d0 <MX_USB_DEVICE_Init+0x54>)
 80090ba:	f7fc fa2a 	bl	8005512 <USBD_Start>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090c4:	f7f7 faaa 	bl	800061c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090c8:	bf00      	nop
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	20000134 	.word	0x20000134
 80090d0:	20003170 	.word	0x20003170
 80090d4:	2000001c 	.word	0x2000001c
 80090d8:	20000124 	.word	0x20000124

080090dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090e0:	2200      	movs	r2, #0
 80090e2:	4905      	ldr	r1, [pc, #20]	; (80090f8 <CDC_Init_FS+0x1c>)
 80090e4:	4805      	ldr	r0, [pc, #20]	; (80090fc <CDC_Init_FS+0x20>)
 80090e6:	f7fc f94b 	bl	8005380 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090ea:	4905      	ldr	r1, [pc, #20]	; (8009100 <CDC_Init_FS+0x24>)
 80090ec:	4803      	ldr	r0, [pc, #12]	; (80090fc <CDC_Init_FS+0x20>)
 80090ee:	f7fc f960 	bl	80053b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	20003474 	.word	0x20003474
 80090fc:	20003170 	.word	0x20003170
 8009100:	20003434 	.word	0x20003434

08009104 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009104:	b480      	push	{r7}
 8009106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009108:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800910a:	4618      	mov	r0, r3
 800910c:	46bd      	mov	sp, r7
 800910e:	bc80      	pop	{r7}
 8009110:	4770      	bx	lr
	...

08009114 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	4603      	mov	r3, r0
 800911c:	6039      	str	r1, [r7, #0]
 800911e:	71fb      	strb	r3, [r7, #7]
 8009120:	4613      	mov	r3, r2
 8009122:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	2b23      	cmp	r3, #35	; 0x23
 8009128:	d84a      	bhi.n	80091c0 <CDC_Control_FS+0xac>
 800912a:	a201      	add	r2, pc, #4	; (adr r2, 8009130 <CDC_Control_FS+0x1c>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	080091c1 	.word	0x080091c1
 8009134:	080091c1 	.word	0x080091c1
 8009138:	080091c1 	.word	0x080091c1
 800913c:	080091c1 	.word	0x080091c1
 8009140:	080091c1 	.word	0x080091c1
 8009144:	080091c1 	.word	0x080091c1
 8009148:	080091c1 	.word	0x080091c1
 800914c:	080091c1 	.word	0x080091c1
 8009150:	080091c1 	.word	0x080091c1
 8009154:	080091c1 	.word	0x080091c1
 8009158:	080091c1 	.word	0x080091c1
 800915c:	080091c1 	.word	0x080091c1
 8009160:	080091c1 	.word	0x080091c1
 8009164:	080091c1 	.word	0x080091c1
 8009168:	080091c1 	.word	0x080091c1
 800916c:	080091c1 	.word	0x080091c1
 8009170:	080091c1 	.word	0x080091c1
 8009174:	080091c1 	.word	0x080091c1
 8009178:	080091c1 	.word	0x080091c1
 800917c:	080091c1 	.word	0x080091c1
 8009180:	080091c1 	.word	0x080091c1
 8009184:	080091c1 	.word	0x080091c1
 8009188:	080091c1 	.word	0x080091c1
 800918c:	080091c1 	.word	0x080091c1
 8009190:	080091c1 	.word	0x080091c1
 8009194:	080091c1 	.word	0x080091c1
 8009198:	080091c1 	.word	0x080091c1
 800919c:	080091c1 	.word	0x080091c1
 80091a0:	080091c1 	.word	0x080091c1
 80091a4:	080091c1 	.word	0x080091c1
 80091a8:	080091c1 	.word	0x080091c1
 80091ac:	080091c1 	.word	0x080091c1
 80091b0:	080091c1 	.word	0x080091c1
 80091b4:	080091c1 	.word	0x080091c1
 80091b8:	080091c1 	.word	0x080091c1
 80091bc:	080091c1 	.word	0x080091c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091c0:	bf00      	nop
  }

  return (USBD_OK);
 80091c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bc80      	pop	{r7}
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop

080091d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	4805      	ldr	r0, [pc, #20]	; (80091f4 <CDC_Receive_FS+0x24>)
 80091de:	f7fc f8e8 	bl	80053b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091e2:	4804      	ldr	r0, [pc, #16]	; (80091f4 <CDC_Receive_FS+0x24>)
 80091e4:	f7fc f927 	bl	8005436 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80091e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	20003170 	.word	0x20003170

080091f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009208:	4b0d      	ldr	r3, [pc, #52]	; (8009240 <CDC_Transmit_FS+0x48>)
 800920a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800921a:	2301      	movs	r3, #1
 800921c:	e00b      	b.n	8009236 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800921e:	887b      	ldrh	r3, [r7, #2]
 8009220:	461a      	mov	r2, r3
 8009222:	6879      	ldr	r1, [r7, #4]
 8009224:	4806      	ldr	r0, [pc, #24]	; (8009240 <CDC_Transmit_FS+0x48>)
 8009226:	f7fc f8ab 	bl	8005380 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800922a:	4805      	ldr	r0, [pc, #20]	; (8009240 <CDC_Transmit_FS+0x48>)
 800922c:	f7fc f8d4 	bl	80053d8 <USBD_CDC_TransmitPacket>
 8009230:	4603      	mov	r3, r0
 8009232:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009234:	7bfb      	ldrb	r3, [r7, #15]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	20003170 	.word	0x20003170

08009244 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	6039      	str	r1, [r7, #0]
 800924e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2212      	movs	r2, #18
 8009254:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009256:	4b03      	ldr	r3, [pc, #12]	; (8009264 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009258:	4618      	mov	r0, r3
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	bc80      	pop	{r7}
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20000150 	.word	0x20000150

08009268 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2204      	movs	r2, #4
 8009278:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800927a:	4b03      	ldr	r3, [pc, #12]	; (8009288 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800927c:	4618      	mov	r0, r3
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	bc80      	pop	{r7}
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	20000164 	.word	0x20000164

0800928c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	6039      	str	r1, [r7, #0]
 8009296:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d105      	bne.n	80092aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	4907      	ldr	r1, [pc, #28]	; (80092c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80092a2:	4808      	ldr	r0, [pc, #32]	; (80092c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80092a4:	f7fd f8a1 	bl	80063ea <USBD_GetString>
 80092a8:	e004      	b.n	80092b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	4904      	ldr	r1, [pc, #16]	; (80092c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80092ae:	4805      	ldr	r0, [pc, #20]	; (80092c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80092b0:	f7fd f89b 	bl	80063ea <USBD_GetString>
  }
  return USBD_StrDesc;
 80092b4:	4b02      	ldr	r3, [pc, #8]	; (80092c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	200034b4 	.word	0x200034b4
 80092c4:	08009b74 	.word	0x08009b74

080092c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	6039      	str	r1, [r7, #0]
 80092d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	4904      	ldr	r1, [pc, #16]	; (80092e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092d8:	4804      	ldr	r0, [pc, #16]	; (80092ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092da:	f7fd f886 	bl	80063ea <USBD_GetString>
  return USBD_StrDesc;
 80092de:	4b02      	ldr	r3, [pc, #8]	; (80092e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	200034b4 	.word	0x200034b4
 80092ec:	08009b8c 	.word	0x08009b8c

080092f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	221a      	movs	r2, #26
 8009300:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009302:	f000 f843 	bl	800938c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009306:	4b02      	ldr	r3, [pc, #8]	; (8009310 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009308:	4618      	mov	r0, r3
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	20000168 	.word	0x20000168

08009314 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	4603      	mov	r3, r0
 800931c:	6039      	str	r1, [r7, #0]
 800931e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009320:	79fb      	ldrb	r3, [r7, #7]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d105      	bne.n	8009332 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	4907      	ldr	r1, [pc, #28]	; (8009348 <USBD_FS_ConfigStrDescriptor+0x34>)
 800932a:	4808      	ldr	r0, [pc, #32]	; (800934c <USBD_FS_ConfigStrDescriptor+0x38>)
 800932c:	f7fd f85d 	bl	80063ea <USBD_GetString>
 8009330:	e004      	b.n	800933c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	4904      	ldr	r1, [pc, #16]	; (8009348 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009336:	4805      	ldr	r0, [pc, #20]	; (800934c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009338:	f7fd f857 	bl	80063ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800933c:	4b02      	ldr	r3, [pc, #8]	; (8009348 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	200034b4 	.word	0x200034b4
 800934c:	08009ba0 	.word	0x08009ba0

08009350 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	4603      	mov	r3, r0
 8009358:	6039      	str	r1, [r7, #0]
 800935a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800935c:	79fb      	ldrb	r3, [r7, #7]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d105      	bne.n	800936e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	4907      	ldr	r1, [pc, #28]	; (8009384 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009366:	4808      	ldr	r0, [pc, #32]	; (8009388 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009368:	f7fd f83f 	bl	80063ea <USBD_GetString>
 800936c:	e004      	b.n	8009378 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	4904      	ldr	r1, [pc, #16]	; (8009384 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009372:	4805      	ldr	r0, [pc, #20]	; (8009388 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009374:	f7fd f839 	bl	80063ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009378:	4b02      	ldr	r3, [pc, #8]	; (8009384 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800937a:	4618      	mov	r0, r3
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	200034b4 	.word	0x200034b4
 8009388:	08009bac 	.word	0x08009bac

0800938c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009392:	4b0f      	ldr	r3, [pc, #60]	; (80093d0 <Get_SerialNum+0x44>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009398:	4b0e      	ldr	r3, [pc, #56]	; (80093d4 <Get_SerialNum+0x48>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800939e:	4b0e      	ldr	r3, [pc, #56]	; (80093d8 <Get_SerialNum+0x4c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4413      	add	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d009      	beq.n	80093c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093b2:	2208      	movs	r2, #8
 80093b4:	4909      	ldr	r1, [pc, #36]	; (80093dc <Get_SerialNum+0x50>)
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 f814 	bl	80093e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093bc:	2204      	movs	r2, #4
 80093be:	4908      	ldr	r1, [pc, #32]	; (80093e0 <Get_SerialNum+0x54>)
 80093c0:	68b8      	ldr	r0, [r7, #8]
 80093c2:	f000 f80f 	bl	80093e4 <IntToUnicode>
  }
}
 80093c6:	bf00      	nop
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	1ffff7e8 	.word	0x1ffff7e8
 80093d4:	1ffff7ec 	.word	0x1ffff7ec
 80093d8:	1ffff7f0 	.word	0x1ffff7f0
 80093dc:	2000016a 	.word	0x2000016a
 80093e0:	2000017a 	.word	0x2000017a

080093e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	4613      	mov	r3, r2
 80093f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093f6:	2300      	movs	r3, #0
 80093f8:	75fb      	strb	r3, [r7, #23]
 80093fa:	e027      	b.n	800944c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	0f1b      	lsrs	r3, r3, #28
 8009400:	2b09      	cmp	r3, #9
 8009402:	d80b      	bhi.n	800941c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	0f1b      	lsrs	r3, r3, #28
 8009408:	b2da      	uxtb	r2, r3
 800940a:	7dfb      	ldrb	r3, [r7, #23]
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	4619      	mov	r1, r3
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	440b      	add	r3, r1
 8009414:	3230      	adds	r2, #48	; 0x30
 8009416:	b2d2      	uxtb	r2, r2
 8009418:	701a      	strb	r2, [r3, #0]
 800941a:	e00a      	b.n	8009432 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	0f1b      	lsrs	r3, r3, #28
 8009420:	b2da      	uxtb	r2, r3
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	005b      	lsls	r3, r3, #1
 8009426:	4619      	mov	r1, r3
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	440b      	add	r3, r1
 800942c:	3237      	adds	r2, #55	; 0x37
 800942e:	b2d2      	uxtb	r2, r2
 8009430:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	011b      	lsls	r3, r3, #4
 8009436:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009438:	7dfb      	ldrb	r3, [r7, #23]
 800943a:	005b      	lsls	r3, r3, #1
 800943c:	3301      	adds	r3, #1
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	4413      	add	r3, r2
 8009442:	2200      	movs	r2, #0
 8009444:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009446:	7dfb      	ldrb	r3, [r7, #23]
 8009448:	3301      	adds	r3, #1
 800944a:	75fb      	strb	r3, [r7, #23]
 800944c:	7dfa      	ldrb	r2, [r7, #23]
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	429a      	cmp	r2, r3
 8009452:	d3d3      	bcc.n	80093fc <IntToUnicode+0x18>
  }
}
 8009454:	bf00      	nop
 8009456:	371c      	adds	r7, #28
 8009458:	46bd      	mov	sp, r7
 800945a:	bc80      	pop	{r7}
 800945c:	4770      	bx	lr
	...

08009460 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a0d      	ldr	r2, [pc, #52]	; (80094a4 <HAL_PCD_MspInit+0x44>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d113      	bne.n	800949a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009472:	4b0d      	ldr	r3, [pc, #52]	; (80094a8 <HAL_PCD_MspInit+0x48>)
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	4a0c      	ldr	r2, [pc, #48]	; (80094a8 <HAL_PCD_MspInit+0x48>)
 8009478:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800947c:	61d3      	str	r3, [r2, #28]
 800947e:	4b0a      	ldr	r3, [pc, #40]	; (80094a8 <HAL_PCD_MspInit+0x48>)
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800948a:	2200      	movs	r2, #0
 800948c:	2105      	movs	r1, #5
 800948e:	2014      	movs	r0, #20
 8009490:	f7f7 fa91 	bl	80009b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009494:	2014      	movs	r0, #20
 8009496:	f7f7 faaa 	bl	80009ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800949a:	bf00      	nop
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	40005c00 	.word	0x40005c00
 80094a8:	40021000 	.word	0x40021000

080094ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80094c0:	4619      	mov	r1, r3
 80094c2:	4610      	mov	r0, r2
 80094c4:	f7fc f86d 	bl	80055a2 <USBD_LL_SetupStage>
}
 80094c8:	bf00      	nop
 80094ca:	3708      	adds	r7, #8
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80094e2:	78fa      	ldrb	r2, [r7, #3]
 80094e4:	6879      	ldr	r1, [r7, #4]
 80094e6:	4613      	mov	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	00db      	lsls	r3, r3, #3
 80094ee:	440b      	add	r3, r1
 80094f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	78fb      	ldrb	r3, [r7, #3]
 80094f8:	4619      	mov	r1, r3
 80094fa:	f7fc f89d 	bl	8005638 <USBD_LL_DataOutStage>
}
 80094fe:	bf00      	nop
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	460b      	mov	r3, r1
 8009510:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009518:	78fa      	ldrb	r2, [r7, #3]
 800951a:	6879      	ldr	r1, [r7, #4]
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	440b      	add	r3, r1
 8009526:	333c      	adds	r3, #60	; 0x3c
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	4619      	mov	r1, r3
 800952e:	f7fc f8f4 	bl	800571a <USBD_LL_DataInStage>
}
 8009532:	bf00      	nop
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009548:	4618      	mov	r0, r3
 800954a:	f7fc fa04 	bl	8005956 <USBD_LL_SOF>
}
 800954e:	bf00      	nop
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b084      	sub	sp, #16
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800955e:	2301      	movs	r3, #1
 8009560:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	2b02      	cmp	r3, #2
 8009568:	d001      	beq.n	800956e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800956a:	f7f7 f857 	bl	800061c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009574:	7bfa      	ldrb	r2, [r7, #15]
 8009576:	4611      	mov	r1, r2
 8009578:	4618      	mov	r0, r3
 800957a:	f7fc f9b4 	bl	80058e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009584:	4618      	mov	r0, r3
 8009586:	f7fc f96d 	bl	8005864 <USBD_LL_Reset>
}
 800958a:	bf00      	nop
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fc f9ae 	bl	8005904 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d005      	beq.n	80095bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095b0:	4b04      	ldr	r3, [pc, #16]	; (80095c4 <HAL_PCD_SuspendCallback+0x30>)
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	4a03      	ldr	r2, [pc, #12]	; (80095c4 <HAL_PCD_SuspendCallback+0x30>)
 80095b6:	f043 0306 	orr.w	r3, r3, #6
 80095ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	e000ed00 	.word	0xe000ed00

080095c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fc f9a8 	bl	800592c <USBD_LL_Resume>
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80095ec:	4a28      	ldr	r2, [pc, #160]	; (8009690 <USBD_LL_Init+0xac>)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a26      	ldr	r2, [pc, #152]	; (8009690 <USBD_LL_Init+0xac>)
 80095f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80095fc:	4b24      	ldr	r3, [pc, #144]	; (8009690 <USBD_LL_Init+0xac>)
 80095fe:	4a25      	ldr	r2, [pc, #148]	; (8009694 <USBD_LL_Init+0xb0>)
 8009600:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009602:	4b23      	ldr	r3, [pc, #140]	; (8009690 <USBD_LL_Init+0xac>)
 8009604:	2208      	movs	r2, #8
 8009606:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009608:	4b21      	ldr	r3, [pc, #132]	; (8009690 <USBD_LL_Init+0xac>)
 800960a:	2202      	movs	r2, #2
 800960c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800960e:	4b20      	ldr	r3, [pc, #128]	; (8009690 <USBD_LL_Init+0xac>)
 8009610:	2200      	movs	r2, #0
 8009612:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009614:	4b1e      	ldr	r3, [pc, #120]	; (8009690 <USBD_LL_Init+0xac>)
 8009616:	2200      	movs	r2, #0
 8009618:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800961a:	4b1d      	ldr	r3, [pc, #116]	; (8009690 <USBD_LL_Init+0xac>)
 800961c:	2200      	movs	r2, #0
 800961e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009620:	481b      	ldr	r0, [pc, #108]	; (8009690 <USBD_LL_Init+0xac>)
 8009622:	f7f7 fb8a 	bl	8000d3a <HAL_PCD_Init>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800962c:	f7f6 fff6 	bl	800061c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009636:	2318      	movs	r3, #24
 8009638:	2200      	movs	r2, #0
 800963a:	2100      	movs	r1, #0
 800963c:	f7f8 febe 	bl	80023bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009646:	2358      	movs	r3, #88	; 0x58
 8009648:	2200      	movs	r2, #0
 800964a:	2180      	movs	r1, #128	; 0x80
 800964c:	f7f8 feb6 	bl	80023bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009656:	23c0      	movs	r3, #192	; 0xc0
 8009658:	2200      	movs	r2, #0
 800965a:	2181      	movs	r1, #129	; 0x81
 800965c:	f7f8 feae 	bl	80023bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009666:	f44f 7388 	mov.w	r3, #272	; 0x110
 800966a:	2200      	movs	r2, #0
 800966c:	2101      	movs	r1, #1
 800966e:	f7f8 fea5 	bl	80023bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800967c:	2200      	movs	r2, #0
 800967e:	2182      	movs	r1, #130	; 0x82
 8009680:	f7f8 fe9c 	bl	80023bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	200036b4 	.word	0x200036b4
 8009694:	40005c00 	.word	0x40005c00

08009698 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7f7 fc4e 	bl	8000f50 <HAL_PCD_Start>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 f94e 	bl	800995c <USBD_Get_USB_Status>
 80096c0:	4603      	mov	r3, r0
 80096c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b084      	sub	sp, #16
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	4608      	mov	r0, r1
 80096d8:	4611      	mov	r1, r2
 80096da:	461a      	mov	r2, r3
 80096dc:	4603      	mov	r3, r0
 80096de:	70fb      	strb	r3, [r7, #3]
 80096e0:	460b      	mov	r3, r1
 80096e2:	70bb      	strb	r3, [r7, #2]
 80096e4:	4613      	mov	r3, r2
 80096e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096f6:	78bb      	ldrb	r3, [r7, #2]
 80096f8:	883a      	ldrh	r2, [r7, #0]
 80096fa:	78f9      	ldrb	r1, [r7, #3]
 80096fc:	f7f7 fdc8 	bl	8001290 <HAL_PCD_EP_Open>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	4618      	mov	r0, r3
 8009708:	f000 f928 	bl	800995c <USBD_Get_USB_Status>
 800970c:	4603      	mov	r3, r0
 800970e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009710:	7bbb      	ldrb	r3, [r7, #14]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009734:	78fa      	ldrb	r2, [r7, #3]
 8009736:	4611      	mov	r1, r2
 8009738:	4618      	mov	r0, r3
 800973a:	f7f7 fe0f 	bl	800135c <HAL_PCD_EP_Close>
 800973e:	4603      	mov	r3, r0
 8009740:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	4618      	mov	r0, r3
 8009746:	f000 f909 	bl	800995c <USBD_Get_USB_Status>
 800974a:	4603      	mov	r3, r0
 800974c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800974e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009772:	78fa      	ldrb	r2, [r7, #3]
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f7f7 fecf 	bl	800151a <HAL_PCD_EP_SetStall>
 800977c:	4603      	mov	r3, r0
 800977e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009780:	7bfb      	ldrb	r3, [r7, #15]
 8009782:	4618      	mov	r0, r3
 8009784:	f000 f8ea 	bl	800995c <USBD_Get_USB_Status>
 8009788:	4603      	mov	r3, r0
 800978a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800978c:	7bbb      	ldrb	r3, [r7, #14]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	460b      	mov	r3, r1
 80097a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097b0:	78fa      	ldrb	r2, [r7, #3]
 80097b2:	4611      	mov	r1, r2
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7f7 ff10 	bl	80015da <HAL_PCD_EP_ClrStall>
 80097ba:	4603      	mov	r3, r0
 80097bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 f8cb 	bl	800995c <USBD_Get_USB_Status>
 80097c6:	4603      	mov	r3, r0
 80097c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	460b      	mov	r3, r1
 80097de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	da0c      	bge.n	800980a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f6:	68f9      	ldr	r1, [r7, #12]
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	4613      	mov	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	440b      	add	r3, r1
 8009804:	3302      	adds	r3, #2
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	e00b      	b.n	8009822 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800980a:	78fb      	ldrb	r3, [r7, #3]
 800980c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009810:	68f9      	ldr	r1, [r7, #12]
 8009812:	4613      	mov	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	00db      	lsls	r3, r3, #3
 800981a:	440b      	add	r3, r1
 800981c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009820:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009822:	4618      	mov	r0, r3
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	bc80      	pop	{r7}
 800982a:	4770      	bx	lr

0800982c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009846:	78fa      	ldrb	r2, [r7, #3]
 8009848:	4611      	mov	r1, r2
 800984a:	4618      	mov	r0, r3
 800984c:	f7f7 fcfb 	bl	8001246 <HAL_PCD_SetAddress>
 8009850:	4603      	mov	r3, r0
 8009852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009854:	7bfb      	ldrb	r3, [r7, #15]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 f880 	bl	800995c <USBD_Get_USB_Status>
 800985c:	4603      	mov	r3, r0
 800985e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009860:	7bbb      	ldrb	r3, [r7, #14]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b086      	sub	sp, #24
 800986e:	af00      	add	r7, sp, #0
 8009870:	60f8      	str	r0, [r7, #12]
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	461a      	mov	r2, r3
 8009876:	460b      	mov	r3, r1
 8009878:	72fb      	strb	r3, [r7, #11]
 800987a:	4613      	mov	r3, r2
 800987c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800988c:	893b      	ldrh	r3, [r7, #8]
 800988e:	7af9      	ldrb	r1, [r7, #11]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	f7f7 fdff 	bl	8001494 <HAL_PCD_EP_Transmit>
 8009896:	4603      	mov	r3, r0
 8009898:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	4618      	mov	r0, r3
 800989e:	f000 f85d 	bl	800995c <USBD_Get_USB_Status>
 80098a2:	4603      	mov	r3, r0
 80098a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	607a      	str	r2, [r7, #4]
 80098ba:	461a      	mov	r2, r3
 80098bc:	460b      	mov	r3, r1
 80098be:	72fb      	strb	r3, [r7, #11]
 80098c0:	4613      	mov	r3, r2
 80098c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098d2:	893b      	ldrh	r3, [r7, #8]
 80098d4:	7af9      	ldrb	r1, [r7, #11]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	f7f7 fd88 	bl	80013ec <HAL_PCD_EP_Receive>
 80098dc:	4603      	mov	r3, r0
 80098de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 f83a 	bl	800995c <USBD_Get_USB_Status>
 80098e8:	4603      	mov	r3, r0
 80098ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b082      	sub	sp, #8
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	460b      	mov	r3, r1
 8009900:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	4611      	mov	r1, r2
 800990c:	4618      	mov	r0, r3
 800990e:	f7f7 fdaa 	bl	8001466 <HAL_PCD_EP_GetRxCount>
 8009912:	4603      	mov	r3, r0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009924:	4b02      	ldr	r3, [pc, #8]	; (8009930 <USBD_static_malloc+0x14>)
}
 8009926:	4618      	mov	r0, r3
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	bc80      	pop	{r7}
 800992e:	4770      	bx	lr
 8009930:	20002ee4 	.word	0x20002ee4

08009934 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]

}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	bc80      	pop	{r7}
 8009944:	4770      	bx	lr

08009946 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009946:	b480      	push	{r7}
 8009948:	b083      	sub	sp, #12
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	460b      	mov	r3, r1
 8009950:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009952:	bf00      	nop
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	bc80      	pop	{r7}
 800995a:	4770      	bx	lr

0800995c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	2b03      	cmp	r3, #3
 800996e:	d817      	bhi.n	80099a0 <USBD_Get_USB_Status+0x44>
 8009970:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <USBD_Get_USB_Status+0x1c>)
 8009972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009976:	bf00      	nop
 8009978:	08009989 	.word	0x08009989
 800997c:	0800998f 	.word	0x0800998f
 8009980:	08009995 	.word	0x08009995
 8009984:	0800999b 	.word	0x0800999b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]
    break;
 800998c:	e00b      	b.n	80099a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800998e:	2302      	movs	r3, #2
 8009990:	73fb      	strb	r3, [r7, #15]
    break;
 8009992:	e008      	b.n	80099a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009994:	2301      	movs	r3, #1
 8009996:	73fb      	strb	r3, [r7, #15]
    break;
 8009998:	e005      	b.n	80099a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800999a:	2302      	movs	r3, #2
 800999c:	73fb      	strb	r3, [r7, #15]
    break;
 800999e:	e002      	b.n	80099a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099a0:	2302      	movs	r3, #2
 80099a2:	73fb      	strb	r3, [r7, #15]
    break;
 80099a4:	bf00      	nop
  }
  return usb_status;
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bc80      	pop	{r7}
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop

080099b4 <__libc_init_array>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	2500      	movs	r5, #0
 80099b8:	4e0c      	ldr	r6, [pc, #48]	; (80099ec <__libc_init_array+0x38>)
 80099ba:	4c0d      	ldr	r4, [pc, #52]	; (80099f0 <__libc_init_array+0x3c>)
 80099bc:	1ba4      	subs	r4, r4, r6
 80099be:	10a4      	asrs	r4, r4, #2
 80099c0:	42a5      	cmp	r5, r4
 80099c2:	d109      	bne.n	80099d8 <__libc_init_array+0x24>
 80099c4:	f000 f82e 	bl	8009a24 <_init>
 80099c8:	2500      	movs	r5, #0
 80099ca:	4e0a      	ldr	r6, [pc, #40]	; (80099f4 <__libc_init_array+0x40>)
 80099cc:	4c0a      	ldr	r4, [pc, #40]	; (80099f8 <__libc_init_array+0x44>)
 80099ce:	1ba4      	subs	r4, r4, r6
 80099d0:	10a4      	asrs	r4, r4, #2
 80099d2:	42a5      	cmp	r5, r4
 80099d4:	d105      	bne.n	80099e2 <__libc_init_array+0x2e>
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099dc:	4798      	blx	r3
 80099de:	3501      	adds	r5, #1
 80099e0:	e7ee      	b.n	80099c0 <__libc_init_array+0xc>
 80099e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099e6:	4798      	blx	r3
 80099e8:	3501      	adds	r5, #1
 80099ea:	e7f2      	b.n	80099d2 <__libc_init_array+0x1e>
 80099ec:	08009bf0 	.word	0x08009bf0
 80099f0:	08009bf0 	.word	0x08009bf0
 80099f4:	08009bf0 	.word	0x08009bf0
 80099f8:	08009bf4 	.word	0x08009bf4

080099fc <memcpy>:
 80099fc:	b510      	push	{r4, lr}
 80099fe:	1e43      	subs	r3, r0, #1
 8009a00:	440a      	add	r2, r1
 8009a02:	4291      	cmp	r1, r2
 8009a04:	d100      	bne.n	8009a08 <memcpy+0xc>
 8009a06:	bd10      	pop	{r4, pc}
 8009a08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a10:	e7f7      	b.n	8009a02 <memcpy+0x6>

08009a12 <memset>:
 8009a12:	4603      	mov	r3, r0
 8009a14:	4402      	add	r2, r0
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d100      	bne.n	8009a1c <memset+0xa>
 8009a1a:	4770      	bx	lr
 8009a1c:	f803 1b01 	strb.w	r1, [r3], #1
 8009a20:	e7f9      	b.n	8009a16 <memset+0x4>
	...

08009a24 <_init>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	bf00      	nop
 8009a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2a:	bc08      	pop	{r3}
 8009a2c:	469e      	mov	lr, r3
 8009a2e:	4770      	bx	lr

08009a30 <_fini>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	bf00      	nop
 8009a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a36:	bc08      	pop	{r3}
 8009a38:	469e      	mov	lr, r3
 8009a3a:	4770      	bx	lr
