
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a08  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08009b18  08009b18  00019b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cb0  08009cb0  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009cb0  08009cb0  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009cb0  08009cb0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cb0  08009cb0  00019cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cb4  08009cb4  00019cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003864  20000180  08009e38  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039e4  08009e38  000239e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f1f9  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000041da  00000000  00000000  0003f3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001278  00000000  00000000  00043580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001090  00000000  00000000  000447f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bd85  00000000  00000000  00045888  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014269  00000000  00000000  0006160d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e630  00000000  00000000  00075876  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103ea6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004920  00000000  00000000  00103f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08009b00 	.word	0x08009b00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08009b00 	.word	0x08009b00

08000150 <PCB_Init>:

#include "usb_device.h"
#include "usbd_cdc_if.h"

void PCB_Init()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000154:	2201      	movs	r2, #1
 8000156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015a:	4802      	ldr	r0, [pc, #8]	; (8000164 <PCB_Init+0x14>)
 800015c:	f000 fd32 	bl	8000bc4 <HAL_GPIO_WritePin>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	40011000 	.word	0x40011000

08000168 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	4802      	ldr	r0, [pc, #8]	; (800017c <PCB_LED_Toggle+0x14>)
 8000172:	f000 fd3f 	bl	8000bf4 <HAL_GPIO_TogglePin>
}
 8000176:	bf00      	nop
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	40011000 	.word	0x40011000

08000180 <freeRTOS_Tasks_Ini>:


// Внимание! QueueHandle_t является более современным аналогом xQueueHandle. Разобраться с этим позже

void freeRTOS_Tasks_Ini (void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8
	xQueue1 = xQueueCreate(10, sizeof(char)); // Создание очереди из 4 элементов размерностью 8 бит
 8000186:	2200      	movs	r2, #0
 8000188:	2101      	movs	r1, #1
 800018a:	200a      	movs	r0, #10
 800018c:	f006 fc7a 	bl	8006a84 <xQueueGenericCreate>
 8000190:	4602      	mov	r2, r0
 8000192:	4b22      	ldr	r3, [pc, #136]	; (800021c <freeRTOS_Tasks_Ini+0x9c>)
 8000194:	601a      	str	r2, [r3, #0]

	//vSemaphoreCreateBinary(xSemaphoreBinary1); // Создание двоичного семафора

	// Создание счетного семафора
	xSemaphoreBinary1 = xQueueCreateCountingSemaphore(10, 0); // Первый аргмент - это максимальное количество счета, второй - начальное значение счетчика
 8000196:	2100      	movs	r1, #0
 8000198:	200a      	movs	r0, #10
 800019a:	f006 fcd3 	bl	8006b44 <xQueueCreateCountingSemaphore>
 800019e:	4602      	mov	r2, r0
 80001a0:	4b1f      	ldr	r3, [pc, #124]	; (8000220 <freeRTOS_Tasks_Ini+0xa0>)
 80001a2:	601a      	str	r2, [r3, #0]



	xTaskCreate(vTask_USB_Init, "Task_USB_Init", 100, NULL, 2, NULL); // З-а сброса лнии D+ после каждого запуска МК. Необхадимо для определения устройсва на шине USB.
 80001a4:	2300      	movs	r3, #0
 80001a6:	9301      	str	r3, [sp, #4]
 80001a8:	2302      	movs	r3, #2
 80001aa:	9300      	str	r3, [sp, #0]
 80001ac:	2300      	movs	r3, #0
 80001ae:	2264      	movs	r2, #100	; 0x64
 80001b0:	491c      	ldr	r1, [pc, #112]	; (8000224 <freeRTOS_Tasks_Ini+0xa4>)
 80001b2:	481d      	ldr	r0, [pc, #116]	; (8000228 <freeRTOS_Tasks_Ini+0xa8>)
 80001b4:	f007 f9b1 	bl	800751a <xTaskCreate>
	//xTaskCreate(vTask_Transmit_VCP, "Task_Transmit_VCP", 120, NULL, 1, NULL); // З-а переиодческой отправки сообщения в VCP. Задача должна быть запущена после удаления vTask_USB_Init.
	//xTaskCreate(vTask_Transmit_VCP_2, "Task_Transmit_VCP_2", 120, (void*) USB_Tx_Buf_Task2, 1, NULL); // Вывод второго тестового сообщения
	//xTaskCreate(vTask_Sync_Recieve_VCP, "Task_Sync_Recieve_VCP", 120, NULL, 2, NULL);
	xTaskCreate(vTask_SyncQueueISR_Data_Recieve, "vTask_SyncQueueISR_Data_Recieve", 500, NULL, 2, NULL);
 80001b8:	2300      	movs	r3, #0
 80001ba:	9301      	str	r3, [sp, #4]
 80001bc:	2302      	movs	r3, #2
 80001be:	9300      	str	r3, [sp, #0]
 80001c0:	2300      	movs	r3, #0
 80001c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001c6:	4919      	ldr	r1, [pc, #100]	; (800022c <freeRTOS_Tasks_Ini+0xac>)
 80001c8:	4819      	ldr	r0, [pc, #100]	; (8000230 <freeRTOS_Tasks_Ini+0xb0>)
 80001ca:	f007 f9a6 	bl	800751a <xTaskCreate>

	Delay_LED = 500;
 80001ce:	4b19      	ldr	r3, [pc, #100]	; (8000234 <freeRTOS_Tasks_Ini+0xb4>)
 80001d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001d4:	801a      	strh	r2, [r3, #0]
	pDelay_LED = &Delay_LED;
 80001d6:	4b18      	ldr	r3, [pc, #96]	; (8000238 <freeRTOS_Tasks_Ini+0xb8>)
 80001d8:	4a16      	ldr	r2, [pc, #88]	; (8000234 <freeRTOS_Tasks_Ini+0xb4>)
 80001da:	601a      	str	r2, [r3, #0]


	if(xQueue1 != NULL) // Если очередь создалась успешно (хватило место в куче), то создать задачи отправки получения данных
 80001dc:	4b0f      	ldr	r3, [pc, #60]	; (800021c <freeRTOS_Tasks_Ini+0x9c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d015      	beq.n	8000210 <freeRTOS_Tasks_Ini+0x90>
	{
		//xTaskCreate(vTask_Queue_Data_Send, "Task_Queue_Data_Send", 90, NULL, 1, NULL); // З-а отправки данных в очередь
		//xTaskCreate(vTask_Queue_Data_Recieve, "Task_Queue_Data_Recieve", 90, NULL, 1, NULL); // З-а которая получает данные из очереди и отправляет тестовое сообщение.

		if (xTaskCreate(vTask_PCB_LED_Blink, "Task_PCB_LED_Blink", 40, (void*) pDelay_LED, 1, NULL) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY) // З-а мигания LED
 80001e4:	4b14      	ldr	r3, [pc, #80]	; (8000238 <freeRTOS_Tasks_Ini+0xb8>)
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	2300      	movs	r3, #0
 80001ea:	9301      	str	r3, [sp, #4]
 80001ec:	2301      	movs	r3, #1
 80001ee:	9300      	str	r3, [sp, #0]
 80001f0:	4613      	mov	r3, r2
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	4911      	ldr	r1, [pc, #68]	; (800023c <freeRTOS_Tasks_Ini+0xbc>)
 80001f6:	4812      	ldr	r0, [pc, #72]	; (8000240 <freeRTOS_Tasks_Ini+0xc0>)
 80001f8:	f007 f98f 	bl	800751a <xTaskCreate>
 80001fc:	4603      	mov	r3, r0
 80001fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000202:	d105      	bne.n	8000210 <freeRTOS_Tasks_Ini+0x90>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020a:	480e      	ldr	r0, [pc, #56]	; (8000244 <freeRTOS_Tasks_Ini+0xc4>)
 800020c:	f000 fcda 	bl	8000bc4 <HAL_GPIO_WritePin>
	{
		//Если все хорошо то ветка else не исполнится, что означает что очередь создана.

	}

	osKernelStart();
 8000210:	f006 f970 	bl	80064f4 <osKernelStart>

}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20003164 	.word	0x20003164
 8000220:	20003160 	.word	0x20003160
 8000224:	08009b28 	.word	0x08009b28
 8000228:	080002cd 	.word	0x080002cd
 800022c:	08009b38 	.word	0x08009b38
 8000230:	08000249 	.word	0x08000249
 8000234:	20003168 	.word	0x20003168
 8000238:	2000315c 	.word	0x2000315c
 800023c:	08009b58 	.word	0x08009b58
 8000240:	0800032d 	.word	0x0800032d
 8000244:	40011000 	.word	0x40011000

08000248 <vTask_SyncQueueISR_Data_Recieve>:

void vTask_SyncQueueISR_Data_Recieve(void *pvParameters)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]



		// Очередь откуда брать данные, переменная куда сохраняются данные, время ожидания появления данных в очереди

		xStatus = xQueueReceive(xQueue1, data_from_VCP, portMAX_DELAY);
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <vTask_SyncQueueISR_Data_Recieve+0x74>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f107 0108 	add.w	r1, r7, #8
 8000258:	f04f 32ff 	mov.w	r2, #4294967295
 800025c:	4618      	mov	r0, r3
 800025e:	f006 febb 	bl	8006fd8 <xQueueReceive>
 8000262:	6178      	str	r0, [r7, #20]

		if(xStatus == pdPASS)
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d11a      	bne.n	80002a0 <vTask_SyncQueueISR_Data_Recieve+0x58>
		{
			while (CDC_Transmit_FS((unsigned char*)"Received from xQueue1 = ", strlen("Received from xQueue1 = ")));
 800026a:	bf00      	nop
 800026c:	2118      	movs	r1, #24
 800026e:	4814      	ldr	r0, [pc, #80]	; (80002c0 <vTask_SyncQueueISR_Data_Recieve+0x78>)
 8000270:	f009 f81c 	bl	80092ac <CDC_Transmit_FS>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d1f8      	bne.n	800026c <vTask_SyncQueueISR_Data_Recieve+0x24>
			while (CDC_Transmit_FS((unsigned char*) &data_from_VCP, 10));
 800027a:	bf00      	nop
 800027c:	f107 0308 	add.w	r3, r7, #8
 8000280:	210a      	movs	r1, #10
 8000282:	4618      	mov	r0, r3
 8000284:	f009 f812 	bl	80092ac <CDC_Transmit_FS>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1f6      	bne.n	800027c <vTask_SyncQueueISR_Data_Recieve+0x34>
			while (CDC_Transmit_FS((unsigned char*)"\r\n", strlen("\r\n")));
 800028e:	bf00      	nop
 8000290:	2102      	movs	r1, #2
 8000292:	480c      	ldr	r0, [pc, #48]	; (80002c4 <vTask_SyncQueueISR_Data_Recieve+0x7c>)
 8000294:	f009 f80a 	bl	80092ac <CDC_Transmit_FS>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d1f8      	bne.n	8000290 <vTask_SyncQueueISR_Data_Recieve+0x48>
 800029e:	e007      	b.n	80002b0 <vTask_SyncQueueISR_Data_Recieve+0x68>
		}
		else
		{
			while (CDC_Transmit_FS((unsigned char*)"Could not receive from the queue.\r\n", strlen("Could not receive from the queue.\r\n")));
 80002a0:	bf00      	nop
 80002a2:	2123      	movs	r1, #35	; 0x23
 80002a4:	4808      	ldr	r0, [pc, #32]	; (80002c8 <vTask_SyncQueueISR_Data_Recieve+0x80>)
 80002a6:	f009 f801 	bl	80092ac <CDC_Transmit_FS>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d1f8      	bne.n	80002a2 <vTask_SyncQueueISR_Data_Recieve+0x5a>
		}
		vTaskDelay(1000 / portTICK_RATE_MS );
 80002b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b4:	f007 fae4 	bl	8007880 <vTaskDelay>
		xStatus = xQueueReceive(xQueue1, data_from_VCP, portMAX_DELAY);
 80002b8:	e7ca      	b.n	8000250 <vTask_SyncQueueISR_Data_Recieve+0x8>
 80002ba:	bf00      	nop
 80002bc:	20003164 	.word	0x20003164
 80002c0:	08009b6c 	.word	0x08009b6c
 80002c4:	08009b88 	.word	0x08009b88
 80002c8:	08009b8c 	.word	0x08009b8c

080002cc <vTask_USB_Init>:
	vTaskDelete(NULL);

}

void vTask_USB_Init(void *pvParameters)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	// НЕ ЗАБЫТЬ ЗАКОММЕНТИТЬ ВЫЗОВ MX_USB_DEVICE_Init(); ИЗ ЗАДАЧИ StartDefaultTask (main.c) ПОСЛЕ КАЖДОЙ ГЕНЕРАЦИИ ПРОЕКТА!!!

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d4:	f107 0308 	add.w	r3, r7, #8
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e8:	2301      	movs	r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	2300      	movs	r3, #0
 80002ee:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f0:	2302      	movs	r3, #2
 80002f2:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f4:	f107 0308 	add.w	r3, r7, #8
 80002f8:	4619      	mov	r1, r3
 80002fa:	480b      	ldr	r0, [pc, #44]	; (8000328 <vTask_USB_Init+0x5c>)
 80002fc:	f000 fb08 	bl	8000910 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 8000300:	2200      	movs	r2, #0
 8000302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000306:	4808      	ldr	r0, [pc, #32]	; (8000328 <vTask_USB_Init+0x5c>)
 8000308:	f000 fc5c 	bl	8000bc4 <HAL_GPIO_WritePin>

	  vTaskDelay(2000 / portTICK_RATE_MS );
 800030c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000310:	f007 fab6 	bl	8007880 <vTaskDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 8000314:	f008 fee2 	bl	80090dc <MX_USB_DEVICE_Init>

	  vTaskDelete(NULL); // Удаленеи задачи самой себя
 8000318:	2000      	movs	r0, #0
 800031a:	f007 fa3f 	bl	800779c <vTaskDelete>

	for(;;)
	{
		vTaskDelay(1000 / portTICK_RATE_MS );
 800031e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000322:	f007 faad 	bl	8007880 <vTaskDelay>
 8000326:	e7fa      	b.n	800031e <vTask_USB_Init+0x52>
 8000328:	40010800 	.word	0x40010800

0800032c <vTask_PCB_LED_Blink>:
	}
	vTaskDelete(NULL);
}

void vTask_PCB_LED_Blink(void *pvParameters)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]

	uint16_t *pDelay_LED = (uint16_t*) pvParameters; // Получение параметра с привденем к иходному типу данных - uint16_t
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
	PCB_LED_Toggle();
 8000338:	f7ff ff16 	bl	8000168 <PCB_LED_Toggle>
	vTaskDelay(*pDelay_LED / portTICK_RATE_MS ); // Разыменование т.е. передача значения задержки
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	4618      	mov	r0, r3
 8000342:	f007 fa9d 	bl	8007880 <vTaskDelay>
	PCB_LED_Toggle();
 8000346:	f7ff ff0f 	bl	8000168 <PCB_LED_Toggle>
	vTaskDelay(*(uint16_t*)pvParameters / portTICK_RATE_MS ); // Можно и без промежуточных переменных, привести pvParameters к указателю uint16_t "(uint16_t*)pvParameters", а затем разименовать
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	4618      	mov	r0, r3
 8000350:	f007 fa96 	bl	8007880 <vTaskDelay>
	PCB_LED_Toggle();
 8000354:	e7f0      	b.n	8000338 <vTask_PCB_LED_Blink+0xc>

08000356 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0

}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr

08000362 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
return 0;
 8000366:	2300      	movs	r3, #0
}
 8000368:	4618      	mov	r0, r3
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000374:	f000 f95c 	bl	8000630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000378:	f000 f818 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037c:	f000 f870 	bl	8000460 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000380:	f006 f886 	bl	8006490 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000384:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <main+0x30>)
 8000386:	2100      	movs	r1, #0
 8000388:	4806      	ldr	r0, [pc, #24]	; (80003a4 <main+0x34>)
 800038a:	f006 f8e7 	bl	800655c <osThreadNew>
 800038e:	4602      	mov	r2, r0
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <main+0x38>)
 8000392:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  PCB_Init();
 8000394:	f7ff fedc 	bl	8000150 <PCB_Init>
  freeRTOS_Tasks_Ini();
 8000398:	f7ff fef2 	bl	8000180 <freeRTOS_Tasks_Ini>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800039c:	e7fe      	b.n	800039c <main+0x2c>
 800039e:	bf00      	nop
 80003a0:	08009c7c 	.word	0x08009c7c
 80003a4:	080004f9 	.word	0x080004f9
 80003a8:	2000316c 	.word	0x2000316c

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b094      	sub	sp, #80	; 0x50
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b6:	2228      	movs	r2, #40	; 0x28
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f009 fb83 	bl	8009ac6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003dc:	2301      	movs	r3, #1
 80003de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ea:	2301      	movs	r3, #1
 80003ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ee:	2302      	movs	r3, #2
 80003f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000402:	4618      	mov	r0, r3
 8000404:	f001 ff92 	bl	800232c <HAL_RCC_OscConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800040e:	f000 f87b 	bl	8000508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	230f      	movs	r3, #15
 8000414:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000416:	2302      	movs	r3, #2
 8000418:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800041e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000422:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000428:	f107 0314 	add.w	r3, r7, #20
 800042c:	2102      	movs	r1, #2
 800042e:	4618      	mov	r0, r3
 8000430:	f002 f9fc 	bl	800282c <HAL_RCC_ClockConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800043a:	f000 f865 	bl	8000508 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800043e:	2310      	movs	r3, #16
 8000440:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	4618      	mov	r0, r3
 800044a:	f002 fb59 	bl	8002b00 <HAL_RCCEx_PeriphCLKConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000454:	f000 f858 	bl	8000508 <Error_Handler>
  }
}
 8000458:	bf00      	nop
 800045a:	3750      	adds	r7, #80	; 0x50
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000474:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <MX_GPIO_Init+0x90>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a1d      	ldr	r2, [pc, #116]	; (80004f0 <MX_GPIO_Init+0x90>)
 800047a:	f043 0310 	orr.w	r3, r3, #16
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_GPIO_Init+0x90>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0310 	and.w	r3, r3, #16
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <MX_GPIO_Init+0x90>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a17      	ldr	r2, [pc, #92]	; (80004f0 <MX_GPIO_Init+0x90>)
 8000492:	f043 0320 	orr.w	r3, r3, #32
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_GPIO_Init+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0320 	and.w	r3, r3, #32
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <MX_GPIO_Init+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a11      	ldr	r2, [pc, #68]	; (80004f0 <MX_GPIO_Init+0x90>)
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_GPIO_Init+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0304 	and.w	r3, r3, #4
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c2:	480c      	ldr	r0, [pc, #48]	; (80004f4 <MX_GPIO_Init+0x94>)
 80004c4:	f000 fb7e 	bl	8000bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2302      	movs	r3, #2
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <MX_GPIO_Init+0x94>)
 80004e2:	f000 fa15 	bl	8000910 <HAL_GPIO_Init>

}
 80004e6:	bf00      	nop
 80004e8:	3720      	adds	r7, #32
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40011000 	.word	0x40011000

080004f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
osDelay(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f006 f8d5 	bl	80066b0 <osDelay>
 8000506:	e7fb      	b.n	8000500 <StartDefaultTask+0x8>

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050e:	e7fe      	b.n	800050e <Error_Handler+0x6>

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <HAL_MspInit+0x68>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a17      	ldr	r2, [pc, #92]	; (8000578 <HAL_MspInit+0x68>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <HAL_MspInit+0x68>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_MspInit+0x68>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a11      	ldr	r2, [pc, #68]	; (8000578 <HAL_MspInit+0x68>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_MspInit+0x68>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	210f      	movs	r1, #15
 800054a:	f06f 0001 	mvn.w	r0, #1
 800054e:	f000 f9a8 	bl	80008a2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <HAL_MspInit+0x6c>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <HAL_MspInit+0x6c>)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	40010000 	.word	0x40010000

08000580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <NMI_Handler+0x4>

08000586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <MemManage_Handler+0x4>

08000592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <BusFault_Handler+0x4>

08000598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <UsageFault_Handler+0x4>

0800059e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ae:	f000 f885 	bl	80006bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80005b2:	f007 fdf5 	bl	80081a0 <xTaskGetSchedulerState>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d001      	beq.n	80005c0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80005bc:	f008 fb3c 	bl	8008c38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005ca:	f000 fc5d 	bl	8000e88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200036f8 	.word	0x200036f8

080005d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005e6:	e003      	b.n	80005f0 <LoopCopyDataInit>

080005e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005ee:	3104      	adds	r1, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005f0:	480a      	ldr	r0, [pc, #40]	; (800061c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005f8:	d3f6      	bcc.n	80005e8 <CopyDataInit>
  ldr r2, =_sbss
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005fc:	e002      	b.n	8000604 <LoopFillZerobss>

080005fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000600:	f842 3b04 	str.w	r3, [r2], #4

08000604 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000606:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000608:	d3f9      	bcc.n	80005fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800060a:	f7ff ffe5 	bl	80005d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800060e:	f009 fa2b 	bl	8009a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000612:	f7ff fead 	bl	8000370 <main>
  bx lr
 8000616:	4770      	bx	lr
  ldr r3, =_sidata
 8000618:	08009cb8 	.word	0x08009cb8
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000620:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000624:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8000628:	200039e4 	.word	0x200039e4

0800062c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_2_IRQHandler>
	...

08000630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_Init+0x28>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <HAL_Init+0x28>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f923 	bl	800088c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000646:	200f      	movs	r0, #15
 8000648:	f000 f808 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800064c:	f7ff ff60 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000650:	2300      	movs	r3, #0
}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40022000 	.word	0x40022000

0800065c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_InitTick+0x54>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_InitTick+0x58>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	fbb3 f3f1 	udiv	r3, r3, r1
 8000676:	fbb2 f3f3 	udiv	r3, r2, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f93b 	bl	80008f6 <HAL_SYSTICK_Config>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e00e      	b.n	80006a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d80a      	bhi.n	80006a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f000 f903 	bl	80008a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <HAL_InitTick+0x5c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e000      	b.n	80006a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000004 	.word	0x20000004

080006bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_IncTick+0x1c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_IncTick+0x20>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	4a03      	ldr	r2, [pc, #12]	; (80006dc <HAL_IncTick+0x20>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20003170 	.word	0x20003170

080006e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return uwTick;
 80006e4:	4b02      	ldr	r3, [pc, #8]	; (80006f0 <HAL_GetTick+0x10>)
 80006e6:	681b      	ldr	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20003170 	.word	0x20003170

080006f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <__NVIC_SetPriorityGrouping+0x44>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000710:	4013      	ands	r3, r2
 8000712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800071c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000726:	4a04      	ldr	r2, [pc, #16]	; (8000738 <__NVIC_SetPriorityGrouping+0x44>)
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	60d3      	str	r3, [r2, #12]
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <__NVIC_GetPriorityGrouping+0x18>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	f003 0307 	and.w	r3, r3, #7
}
 800074a:	4618      	mov	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	db0b      	blt.n	8000782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f003 021f 	and.w	r2, r3, #31
 8000770:	4906      	ldr	r1, [pc, #24]	; (800078c <__NVIC_EnableIRQ+0x34>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	095b      	lsrs	r3, r3, #5
 8000778:	2001      	movs	r0, #1
 800077a:	fa00 f202 	lsl.w	r2, r0, r2
 800077e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100

08000790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db0a      	blt.n	80007ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	490c      	ldr	r1, [pc, #48]	; (80007dc <__NVIC_SetPriority+0x4c>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	0112      	lsls	r2, r2, #4
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	440b      	add	r3, r1
 80007b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b8:	e00a      	b.n	80007d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4908      	ldr	r1, [pc, #32]	; (80007e0 <__NVIC_SetPriority+0x50>)
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	3b04      	subs	r3, #4
 80007c8:	0112      	lsls	r2, r2, #4
 80007ca:	b2d2      	uxtb	r2, r2
 80007cc:	440b      	add	r3, r1
 80007ce:	761a      	strb	r2, [r3, #24]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000e100 	.word	0xe000e100
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b089      	sub	sp, #36	; 0x24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	f1c3 0307 	rsb	r3, r3, #7
 80007fe:	2b04      	cmp	r3, #4
 8000800:	bf28      	it	cs
 8000802:	2304      	movcs	r3, #4
 8000804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3304      	adds	r3, #4
 800080a:	2b06      	cmp	r3, #6
 800080c:	d902      	bls.n	8000814 <NVIC_EncodePriority+0x30>
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3b03      	subs	r3, #3
 8000812:	e000      	b.n	8000816 <NVIC_EncodePriority+0x32>
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000818:	f04f 32ff 	mov.w	r2, #4294967295
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43da      	mvns	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	401a      	ands	r2, r3
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800082c:	f04f 31ff 	mov.w	r1, #4294967295
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	fa01 f303 	lsl.w	r3, r1, r3
 8000836:	43d9      	mvns	r1, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083c:	4313      	orrs	r3, r2
         );
}
 800083e:	4618      	mov	r0, r3
 8000840:	3724      	adds	r7, #36	; 0x24
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000858:	d301      	bcc.n	800085e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800085a:	2301      	movs	r3, #1
 800085c:	e00f      	b.n	800087e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <SysTick_Config+0x40>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000866:	210f      	movs	r1, #15
 8000868:	f04f 30ff 	mov.w	r0, #4294967295
 800086c:	f7ff ff90 	bl	8000790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <SysTick_Config+0x40>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <SysTick_Config+0x40>)
 8000878:	2207      	movs	r2, #7
 800087a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	e000e010 	.word	0xe000e010

0800088c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff ff2d 	bl	80006f4 <__NVIC_SetPriorityGrouping>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b086      	sub	sp, #24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008b4:	f7ff ff42 	bl	800073c <__NVIC_GetPriorityGrouping>
 80008b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	6978      	ldr	r0, [r7, #20]
 80008c0:	f7ff ff90 	bl	80007e4 <NVIC_EncodePriority>
 80008c4:	4602      	mov	r2, r0
 80008c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff5f 	bl	8000790 <__NVIC_SetPriority>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff35 	bl	8000758 <__NVIC_EnableIRQ>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff ffa2 	bl	8000848 <SysTick_Config>
 8000904:	4603      	mov	r3, r0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	b480      	push	{r7}
 8000912:	b08b      	sub	sp, #44	; 0x2c
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000922:	e127      	b.n	8000b74 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000924:	2201      	movs	r2, #1
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	429a      	cmp	r2, r3
 800093e:	f040 8116 	bne.w	8000b6e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b12      	cmp	r3, #18
 8000948:	d034      	beq.n	80009b4 <HAL_GPIO_Init+0xa4>
 800094a:	2b12      	cmp	r3, #18
 800094c:	d80d      	bhi.n	800096a <HAL_GPIO_Init+0x5a>
 800094e:	2b02      	cmp	r3, #2
 8000950:	d02b      	beq.n	80009aa <HAL_GPIO_Init+0x9a>
 8000952:	2b02      	cmp	r3, #2
 8000954:	d804      	bhi.n	8000960 <HAL_GPIO_Init+0x50>
 8000956:	2b00      	cmp	r3, #0
 8000958:	d031      	beq.n	80009be <HAL_GPIO_Init+0xae>
 800095a:	2b01      	cmp	r3, #1
 800095c:	d01c      	beq.n	8000998 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800095e:	e048      	b.n	80009f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000960:	2b03      	cmp	r3, #3
 8000962:	d043      	beq.n	80009ec <HAL_GPIO_Init+0xdc>
 8000964:	2b11      	cmp	r3, #17
 8000966:	d01b      	beq.n	80009a0 <HAL_GPIO_Init+0x90>
          break;
 8000968:	e043      	b.n	80009f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800096a:	4a89      	ldr	r2, [pc, #548]	; (8000b90 <HAL_GPIO_Init+0x280>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d026      	beq.n	80009be <HAL_GPIO_Init+0xae>
 8000970:	4a87      	ldr	r2, [pc, #540]	; (8000b90 <HAL_GPIO_Init+0x280>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d806      	bhi.n	8000984 <HAL_GPIO_Init+0x74>
 8000976:	4a87      	ldr	r2, [pc, #540]	; (8000b94 <HAL_GPIO_Init+0x284>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d020      	beq.n	80009be <HAL_GPIO_Init+0xae>
 800097c:	4a86      	ldr	r2, [pc, #536]	; (8000b98 <HAL_GPIO_Init+0x288>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d01d      	beq.n	80009be <HAL_GPIO_Init+0xae>
          break;
 8000982:	e036      	b.n	80009f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000984:	4a85      	ldr	r2, [pc, #532]	; (8000b9c <HAL_GPIO_Init+0x28c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d019      	beq.n	80009be <HAL_GPIO_Init+0xae>
 800098a:	4a85      	ldr	r2, [pc, #532]	; (8000ba0 <HAL_GPIO_Init+0x290>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d016      	beq.n	80009be <HAL_GPIO_Init+0xae>
 8000990:	4a84      	ldr	r2, [pc, #528]	; (8000ba4 <HAL_GPIO_Init+0x294>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d013      	beq.n	80009be <HAL_GPIO_Init+0xae>
          break;
 8000996:	e02c      	b.n	80009f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	623b      	str	r3, [r7, #32]
          break;
 800099e:	e028      	b.n	80009f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	3304      	adds	r3, #4
 80009a6:	623b      	str	r3, [r7, #32]
          break;
 80009a8:	e023      	b.n	80009f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	3308      	adds	r3, #8
 80009b0:	623b      	str	r3, [r7, #32]
          break;
 80009b2:	e01e      	b.n	80009f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	330c      	adds	r3, #12
 80009ba:	623b      	str	r3, [r7, #32]
          break;
 80009bc:	e019      	b.n	80009f2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009c6:	2304      	movs	r3, #4
 80009c8:	623b      	str	r3, [r7, #32]
          break;
 80009ca:	e012      	b.n	80009f2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d105      	bne.n	80009e0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009d4:	2308      	movs	r3, #8
 80009d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	69fa      	ldr	r2, [r7, #28]
 80009dc:	611a      	str	r2, [r3, #16]
          break;
 80009de:	e008      	b.n	80009f2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009e0:	2308      	movs	r3, #8
 80009e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	69fa      	ldr	r2, [r7, #28]
 80009e8:	615a      	str	r2, [r3, #20]
          break;
 80009ea:	e002      	b.n	80009f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
          break;
 80009f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	2bff      	cmp	r3, #255	; 0xff
 80009f6:	d801      	bhi.n	80009fc <HAL_GPIO_Init+0xec>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	e001      	b.n	8000a00 <HAL_GPIO_Init+0xf0>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3304      	adds	r3, #4
 8000a00:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	2bff      	cmp	r3, #255	; 0xff
 8000a06:	d802      	bhi.n	8000a0e <HAL_GPIO_Init+0xfe>
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	e002      	b.n	8000a14 <HAL_GPIO_Init+0x104>
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	3b08      	subs	r3, #8
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	401a      	ands	r2, r3
 8000a26:	6a39      	ldr	r1, [r7, #32]
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 8096 	beq.w	8000b6e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a42:	4b59      	ldr	r3, [pc, #356]	; (8000ba8 <HAL_GPIO_Init+0x298>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	4a58      	ldr	r2, [pc, #352]	; (8000ba8 <HAL_GPIO_Init+0x298>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6193      	str	r3, [r2, #24]
 8000a4e:	4b56      	ldr	r3, [pc, #344]	; (8000ba8 <HAL_GPIO_Init+0x298>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a5a:	4a54      	ldr	r2, [pc, #336]	; (8000bac <HAL_GPIO_Init+0x29c>)
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	3302      	adds	r3, #2
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	f003 0303 	and.w	r3, r3, #3
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	220f      	movs	r2, #15
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43db      	mvns	r3, r3
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a4b      	ldr	r2, [pc, #300]	; (8000bb0 <HAL_GPIO_Init+0x2a0>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d013      	beq.n	8000aae <HAL_GPIO_Init+0x19e>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a4a      	ldr	r2, [pc, #296]	; (8000bb4 <HAL_GPIO_Init+0x2a4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d00d      	beq.n	8000aaa <HAL_GPIO_Init+0x19a>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a49      	ldr	r2, [pc, #292]	; (8000bb8 <HAL_GPIO_Init+0x2a8>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d007      	beq.n	8000aa6 <HAL_GPIO_Init+0x196>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a48      	ldr	r2, [pc, #288]	; (8000bbc <HAL_GPIO_Init+0x2ac>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d101      	bne.n	8000aa2 <HAL_GPIO_Init+0x192>
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	e006      	b.n	8000ab0 <HAL_GPIO_Init+0x1a0>
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	e004      	b.n	8000ab0 <HAL_GPIO_Init+0x1a0>
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	e002      	b.n	8000ab0 <HAL_GPIO_Init+0x1a0>
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e000      	b.n	8000ab0 <HAL_GPIO_Init+0x1a0>
 8000aae:	2300      	movs	r3, #0
 8000ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ab2:	f002 0203 	and.w	r2, r2, #3
 8000ab6:	0092      	lsls	r2, r2, #2
 8000ab8:	4093      	lsls	r3, r2
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ac0:	493a      	ldr	r1, [pc, #232]	; (8000bac <HAL_GPIO_Init+0x29c>)
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	089b      	lsrs	r3, r3, #2
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d006      	beq.n	8000ae8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ada:	4b39      	ldr	r3, [pc, #228]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4938      	ldr	r1, [pc, #224]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	600b      	str	r3, [r1, #0]
 8000ae6:	e006      	b.n	8000af6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ae8:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	4933      	ldr	r1, [pc, #204]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000af2:	4013      	ands	r3, r2
 8000af4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b02:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	492e      	ldr	r1, [pc, #184]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	604b      	str	r3, [r1, #4]
 8000b0e:	e006      	b.n	8000b1e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b10:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	4929      	ldr	r1, [pc, #164]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d006      	beq.n	8000b38 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b2a:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	4924      	ldr	r1, [pc, #144]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	608b      	str	r3, [r1, #8]
 8000b36:	e006      	b.n	8000b46 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	491f      	ldr	r1, [pc, #124]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000b42:	4013      	ands	r3, r2
 8000b44:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d006      	beq.n	8000b60 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000b54:	68da      	ldr	r2, [r3, #12]
 8000b56:	491a      	ldr	r1, [pc, #104]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	60cb      	str	r3, [r1, #12]
 8000b5e:	e006      	b.n	8000b6e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	4915      	ldr	r1, [pc, #84]	; (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	3301      	adds	r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f47f aed0 	bne.w	8000924 <HAL_GPIO_Init+0x14>
  }
}
 8000b84:	bf00      	nop
 8000b86:	372c      	adds	r7, #44	; 0x2c
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	10210000 	.word	0x10210000
 8000b94:	10110000 	.word	0x10110000
 8000b98:	10120000 	.word	0x10120000
 8000b9c:	10310000 	.word	0x10310000
 8000ba0:	10320000 	.word	0x10320000
 8000ba4:	10220000 	.word	0x10220000
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010000 	.word	0x40010000
 8000bb0:	40010800 	.word	0x40010800
 8000bb4:	40010c00 	.word	0x40010c00
 8000bb8:	40011000 	.word	0x40011000
 8000bbc:	40011400 	.word	0x40011400
 8000bc0:	40010400 	.word	0x40010400

08000bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	807b      	strh	r3, [r7, #2]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bd4:	787b      	ldrb	r3, [r7, #1]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bda:	887a      	ldrh	r2, [r7, #2]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000be0:	e003      	b.n	8000bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	041a      	lsls	r2, r3, #16
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	611a      	str	r2, [r3, #16]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c06:	887a      	ldrh	r2, [r7, #2]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	041a      	lsls	r2, r3, #16
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43d9      	mvns	r1, r3
 8000c12:	887b      	ldrh	r3, [r7, #2]
 8000c14:	400b      	ands	r3, r1
 8000c16:	431a      	orrs	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	611a      	str	r2, [r3, #16]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr

08000c26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c28:	b08b      	sub	sp, #44	; 0x2c
 8000c2a:	af06      	add	r7, sp, #24
 8000c2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e0fd      	b.n	8000e34 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d106      	bne.n	8000c52 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f008 fc61 	bl	8009514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2203      	movs	r2, #3
 8000c56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 f82a 	bl	8002cb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	687e      	ldr	r6, [r7, #4]
 8000c6c:	466d      	mov	r5, sp
 8000c6e:	f106 0410 	add.w	r4, r6, #16
 8000c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	602b      	str	r3, [r5, #0]
 8000c7a:	1d33      	adds	r3, r6, #4
 8000c7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c7e:	6838      	ldr	r0, [r7, #0]
 8000c80:	f001 fff4 	bl	8002c6c <USB_CoreInit>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d005      	beq.n	8000c96 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e0ce      	b.n	8000e34 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 f825 	bl	8002cec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e04c      	b.n	8000d42 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	1c5a      	adds	r2, r3, #1
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	440b      	add	r3, r1
 8000cb8:	3301      	adds	r3, #1
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	440b      	add	r3, r1
 8000cce:	7bfa      	ldrb	r2, [r7, #15]
 8000cd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	b298      	uxth	r0, r3
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	440b      	add	r3, r1
 8000ce4:	3336      	adds	r3, #54	; 0x36
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	440b      	add	r3, r1
 8000cfa:	3303      	adds	r3, #3
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	440b      	add	r3, r1
 8000d0e:	3338      	adds	r3, #56	; 0x38
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d14:	7bfa      	ldrb	r2, [r7, #15]
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	440b      	add	r3, r1
 8000d22:	333c      	adds	r3, #60	; 0x3c
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d28:	7bfa      	ldrb	r2, [r7, #15]
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	440b      	add	r3, r1
 8000d36:	3340      	adds	r3, #64	; 0x40
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	7bfa      	ldrb	r2, [r7, #15]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d3ad      	bcc.n	8000ca8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]
 8000d50:	e044      	b.n	8000ddc <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	440b      	add	r3, r1
 8000d60:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	440b      	add	r3, r1
 8000d76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d7a:	7bfa      	ldrb	r2, [r7, #15]
 8000d7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	440b      	add	r3, r1
 8000da2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000daa:	7bfa      	ldrb	r2, [r7, #15]
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	440b      	add	r3, r1
 8000db8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	440b      	add	r3, r1
 8000dce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	7bfa      	ldrb	r2, [r7, #15]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d3b5      	bcc.n	8000d52 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	687e      	ldr	r6, [r7, #4]
 8000dee:	466d      	mov	r5, sp
 8000df0:	f106 0410 	add.w	r4, r6, #16
 8000df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df8:	6823      	ldr	r3, [r4, #0]
 8000dfa:	602b      	str	r3, [r5, #0]
 8000dfc:	1d33      	adds	r3, r6, #4
 8000dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e00:	6838      	ldr	r0, [r7, #0]
 8000e02:	f001 ff7f 	bl	8002d04 <USB_DevInit>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d005      	beq.n	8000e18 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2202      	movs	r2, #2
 8000e10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e00d      	b.n	8000e34 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 ff19 	bl	8004c64 <USB_DevDisconnect>

  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d101      	bne.n	8000e52 <HAL_PCD_Start+0x16>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e016      	b.n	8000e80 <HAL_PCD_Start+0x44>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2201      	movs	r2, #1
 8000e56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 ff14 	bl	8002c8c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e64:	2101      	movs	r1, #1
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f008 fdc7 	bl	80099fa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 feed 	bl	8004c50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f003 feef 	bl	8004c78 <USB_ReadInterrupts>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ea4:	d102      	bne.n	8000eac <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 fb61 	bl	800156e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 fee1 	bl	8004c78 <USB_ReadInterrupts>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec0:	d112      	bne.n	8000ee8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ed4:	b292      	uxth	r2, r2
 8000ed6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f008 fb95 	bl	800960a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f925 	bl	8001132 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 fec3 	bl	8004c78 <USB_ReadInterrupts>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000efc:	d10b      	bne.n	8000f16 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f10:	b292      	uxth	r2, r2
 8000f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 feac 	bl	8004c78 <USB_ReadInterrupts>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f2a:	d10b      	bne.n	8000f44 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f003 fe95 	bl	8004c78 <USB_ReadInterrupts>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f58:	d126      	bne.n	8000fa8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0204 	bic.w	r2, r2, #4
 8000f6c:	b292      	uxth	r2, r2
 8000f6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0208 	bic.w	r2, r2, #8
 8000f84:	b292      	uxth	r2, r2
 8000f86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f008 fb76 	bl	800967c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fa2:	b292      	uxth	r2, r2
 8000fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 fe63 	bl	8004c78 <USB_ReadInterrupts>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fbc:	f040 8084 	bne.w	80010c8 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	77fb      	strb	r3, [r7, #31]
 8000fc4:	e011      	b.n	8000fea <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	7ffb      	ldrb	r3, [r7, #31]
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	441a      	add	r2, r3
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	8812      	ldrh	r2, [r2, #0]
 8000fd6:	b292      	uxth	r2, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	f107 0120 	add.w	r1, r7, #32
 8000fde:	440b      	add	r3, r1
 8000fe0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000fe4:	7ffb      	ldrb	r3, [r7, #31]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	77fb      	strb	r3, [r7, #31]
 8000fea:	7ffb      	ldrb	r3, [r7, #31]
 8000fec:	2b07      	cmp	r3, #7
 8000fee:	d9ea      	bls.n	8000fc6 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0201 	orr.w	r2, r2, #1
 8001002:	b292      	uxth	r2, r2
 8001004:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001010:	b29a      	uxth	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0201 	bic.w	r2, r2, #1
 800101a:	b292      	uxth	r2, r2
 800101c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001020:	bf00      	nop
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800102a:	b29b      	uxth	r3, r3
 800102c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f6      	beq.n	8001022 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800103c:	b29a      	uxth	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001046:	b292      	uxth	r2, r2
 8001048:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800104c:	2300      	movs	r3, #0
 800104e:	77fb      	strb	r3, [r7, #31]
 8001050:	e010      	b.n	8001074 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001052:	7ffb      	ldrb	r3, [r7, #31]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	4611      	mov	r1, r2
 800105a:	7ffa      	ldrb	r2, [r7, #31]
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	440a      	add	r2, r1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	f107 0120 	add.w	r1, r7, #32
 8001066:	440b      	add	r3, r1
 8001068:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800106c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800106e:	7ffb      	ldrb	r3, [r7, #31]
 8001070:	3301      	adds	r3, #1
 8001072:	77fb      	strb	r3, [r7, #31]
 8001074:	7ffb      	ldrb	r3, [r7, #31]
 8001076:	2b07      	cmp	r3, #7
 8001078:	d9eb      	bls.n	8001052 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001082:	b29a      	uxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0208 	orr.w	r2, r2, #8
 800108c:	b292      	uxth	r2, r2
 800108e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800109a:	b29a      	uxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010a4:	b292      	uxth	r2, r2
 80010a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 0204 	orr.w	r2, r2, #4
 80010bc:	b292      	uxth	r2, r2
 80010be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f008 fac0 	bl	8009648 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f003 fdd3 	bl	8004c78 <USB_ReadInterrupts>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010dc:	d10e      	bne.n	80010fc <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010f0:	b292      	uxth	r2, r2
 80010f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f008 fa79 	bl	80095ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f003 fdb9 	bl	8004c78 <USB_ReadInterrupts>
 8001106:	4603      	mov	r3, r0
 8001108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001110:	d10b      	bne.n	800112a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001124:	b292      	uxth	r2, r2
 8001126:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800112a:	bf00      	nop
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	460b      	mov	r3, r1
 800113c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_PCD_SetAddress+0x1a>
 8001148:	2302      	movs	r3, #2
 800114a:	e013      	b.n	8001174 <HAL_PCD_SetAddress+0x42>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	78fa      	ldrb	r2, [r7, #3]
 8001158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	78fa      	ldrb	r2, [r7, #3]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f003 fd60 	bl	8004c2a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	4608      	mov	r0, r1
 8001186:	4611      	mov	r1, r2
 8001188:	461a      	mov	r2, r3
 800118a:	4603      	mov	r3, r0
 800118c:	70fb      	strb	r3, [r7, #3]
 800118e:	460b      	mov	r3, r1
 8001190:	803b      	strh	r3, [r7, #0]
 8001192:	4613      	mov	r3, r2
 8001194:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800119a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	da0e      	bge.n	80011c0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2201      	movs	r2, #1
 80011bc:	705a      	strb	r2, [r3, #1]
 80011be:	e00e      	b.n	80011de <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	f003 0207 	and.w	r2, r3, #7
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80011de:	78fb      	ldrb	r3, [r7, #3]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80011ea:	883a      	ldrh	r2, [r7, #0]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	78ba      	ldrb	r2, [r7, #2]
 80011f4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d004      	beq.n	8001208 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b29a      	uxth	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001208:	78bb      	ldrb	r3, [r7, #2]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d102      	bne.n	8001214 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_PCD_EP_Open+0xa6>
 800121e:	2302      	movs	r3, #2
 8001220:	e00e      	b.n	8001240 <HAL_PCD_EP_Open+0xc4>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68f9      	ldr	r1, [r7, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	f001 fd87 	bl	8002d44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800123e:	7afb      	ldrb	r3, [r7, #11]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001258:	2b00      	cmp	r3, #0
 800125a:	da0e      	bge.n	800127a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2201      	movs	r2, #1
 8001276:	705a      	strb	r2, [r3, #1]
 8001278:	e00e      	b.n	8001298 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	f003 0207 	and.w	r2, r3, #7
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_PCD_EP_Close+0x6a>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e00e      	b.n	80012d0 <HAL_PCD_EP_Close+0x88>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68f9      	ldr	r1, [r7, #12]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 f8a9 	bl	8003418 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	460b      	mov	r3, r1
 80012e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012e8:	7afb      	ldrb	r3, [r7, #11]
 80012ea:	f003 0207 	and.w	r2, r3, #7
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	2200      	movs	r2, #0
 8001316:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001318:	7afb      	ldrb	r3, [r7, #11]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	b2da      	uxtb	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001324:	7afb      	ldrb	r3, [r7, #11]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	2b00      	cmp	r3, #0
 800132c:	d106      	bne.n	800133c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6979      	ldr	r1, [r7, #20]
 8001334:	4618      	mov	r0, r3
 8001336:	f002 fa5b 	bl	80037f0 <USB_EPStartXfer>
 800133a:	e005      	b.n	8001348 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6979      	ldr	r1, [r7, #20]
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fa54 	bl	80037f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800135e:	78fb      	ldrb	r3, [r7, #3]
 8001360:	f003 0207 	and.w	r2, r3, #7
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001374:	681b      	ldr	r3, [r3, #0]
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	460b      	mov	r3, r1
 800138e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001390:	7afb      	ldrb	r3, [r7, #11]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2201      	movs	r2, #1
 80013ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013cc:	7afb      	ldrb	r3, [r7, #11]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013d8:	7afb      	ldrb	r3, [r7, #11]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d106      	bne.n	80013f0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6979      	ldr	r1, [r7, #20]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 fa01 	bl	80037f0 <USB_EPStartXfer>
 80013ee:	e005      	b.n	80013fc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6979      	ldr	r1, [r7, #20]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 f9fa 	bl	80037f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	460b      	mov	r3, r1
 8001410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	f003 0207 	and.w	r2, r3, #7
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	d901      	bls.n	8001424 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e04c      	b.n	80014be <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001428:	2b00      	cmp	r3, #0
 800142a:	da0e      	bge.n	800144a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2201      	movs	r2, #1
 8001446:	705a      	strb	r2, [r3, #1]
 8001448:	e00c      	b.n	8001464 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800144a:	78fa      	ldrb	r2, [r7, #3]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2201      	movs	r2, #1
 8001468:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800146a:	78fb      	ldrb	r3, [r7, #3]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	b2da      	uxtb	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_PCD_EP_SetStall+0x7e>
 8001480:	2302      	movs	r3, #2
 8001482:	e01c      	b.n	80014be <HAL_PCD_EP_SetStall+0xb8>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68f9      	ldr	r1, [r7, #12]
 8001492:	4618      	mov	r0, r3
 8001494:	f003 facc 	bl	8004a30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d108      	bne.n	80014b4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80014ac:	4619      	mov	r1, r3
 80014ae:	4610      	mov	r0, r2
 80014b0:	f003 fbf1 	bl	8004c96 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	460b      	mov	r3, r1
 80014d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	f003 020f 	and.w	r2, r3, #15
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d901      	bls.n	80014e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e040      	b.n	8001566 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	da0e      	bge.n	800150a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2201      	movs	r2, #1
 8001506:	705a      	strb	r2, [r3, #1]
 8001508:	e00e      	b.n	8001528 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	f003 0207 	and.w	r2, r3, #7
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	b2da      	uxtb	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_PCD_EP_ClrStall+0x82>
 8001544:	2302      	movs	r3, #2
 8001546:	e00e      	b.n	8001566 <HAL_PCD_EP_ClrStall+0xa0>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68f9      	ldr	r1, [r7, #12]
 8001556:	4618      	mov	r0, r3
 8001558:	f003 faba 	bl	8004ad0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b08e      	sub	sp, #56	; 0x38
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001576:	e2df      	b.n	8001b38 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001580:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001582:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001584:	b2db      	uxtb	r3, r3
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800158e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 8158 	bne.w	8001848 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001598:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d152      	bne.n	8001648 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80015ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015b2:	81fb      	strh	r3, [r7, #14]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	89fb      	ldrh	r3, [r7, #14]
 80015ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3328      	adds	r3, #40	; 0x28
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	3302      	adds	r3, #2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	441a      	add	r2, r3
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001606:	2100      	movs	r1, #0
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f007 ffd6 	bl	80095ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 828e 	beq.w	8001b38 <PCD_EP_ISR_Handler+0x5ca>
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f040 8289 	bne.w	8001b38 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800162c:	b2db      	uxtb	r3, r3
 800162e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001632:	b2da      	uxtb	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	b292      	uxth	r2, r2
 800163a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001646:	e277      	b.n	8001b38 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001658:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800165a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165e:	2b00      	cmp	r3, #0
 8001660:	d034      	beq.n	80016cc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800166a:	b29b      	uxth	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	3306      	adds	r3, #6
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	4413      	add	r3, r2
 8001680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	f003 fb47 	bl	8004d34 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016b2:	4013      	ands	r3, r2
 80016b4:	823b      	strh	r3, [r7, #16]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	8a3a      	ldrh	r2, [r7, #16]
 80016bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016c0:	b292      	uxth	r2, r2
 80016c2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f007 ff4b 	bl	8009560 <HAL_PCD_SetupStageCallback>
 80016ca:	e235      	b.n	8001b38 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016cc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f280 8231 	bge.w	8001b38 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016e2:	4013      	ands	r3, r2
 80016e4:	83bb      	strh	r3, [r7, #28]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	8bba      	ldrh	r2, [r7, #28]
 80016ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016f0:	b292      	uxth	r2, r2
 80016f2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	3306      	adds	r3, #6
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	4413      	add	r3, r2
 8001712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d019      	beq.n	800175c <PCD_EP_ISR_Handler+0x1ee>
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d015      	beq.n	800175c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6818      	ldr	r0, [r3, #0]
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	6959      	ldr	r1, [r3, #20]
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001740:	b29b      	uxth	r3, r3
 8001742:	f003 faf7 	bl	8004d34 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	441a      	add	r2, r3
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001754:	2100      	movs	r1, #0
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f007 ff14 	bl	8009584 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800176a:	b29b      	uxth	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4413      	add	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d112      	bne.n	80017aa <PCD_EP_ISR_Handler+0x23c>
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800178e:	b29a      	uxth	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	801a      	strh	r2, [r3, #0]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	b29b      	uxth	r3, r3
 800179a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800179e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	801a      	strh	r2, [r3, #0]
 80017a8:	e02f      	b.n	800180a <PCD_EP_ISR_Handler+0x29c>
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	2b3e      	cmp	r3, #62	; 0x3e
 80017b0:	d813      	bhi.n	80017da <PCD_EP_ISR_Handler+0x26c>
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <PCD_EP_ISR_Handler+0x25e>
 80017c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c8:	3301      	adds	r3, #1
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
 80017cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	029b      	lsls	r3, r3, #10
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	801a      	strh	r2, [r3, #0]
 80017d8:	e017      	b.n	800180a <PCD_EP_ISR_Handler+0x29c>
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	f003 031f 	and.w	r3, r3, #31
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <PCD_EP_ISR_Handler+0x286>
 80017ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f0:	3b01      	subs	r3, #1
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
 80017f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	029b      	lsls	r3, r3, #10
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001804:	b29a      	uxth	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800181a:	827b      	strh	r3, [r7, #18]
 800181c:	8a7b      	ldrh	r3, [r7, #18]
 800181e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001822:	827b      	strh	r3, [r7, #18]
 8001824:	8a7b      	ldrh	r3, [r7, #18]
 8001826:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800182a:	827b      	strh	r3, [r7, #18]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	8a7b      	ldrh	r3, [r7, #18]
 8001832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800183a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001842:	b29b      	uxth	r3, r3
 8001844:	8013      	strh	r3, [r2, #0]
 8001846:	e177      	b.n	8001b38 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800185a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800185e:	2b00      	cmp	r3, #0
 8001860:	f280 80ea 	bge.w	8001a38 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	b29a      	uxth	r2, r3
 8001876:	f640 738f 	movw	r3, #3983	; 0xf8f
 800187a:	4013      	ands	r3, r2
 800187c:	853b      	strh	r3, [r7, #40]	; 0x28
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800188e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001892:	b292      	uxth	r2, r2
 8001894:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001896:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	7b1b      	ldrb	r3, [r3, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d122      	bne.n	80018fa <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018bc:	b29b      	uxth	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	3306      	adds	r3, #6
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018dc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80018de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 8087 	beq.w	80019f4 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	6959      	ldr	r1, [r3, #20]
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	88da      	ldrh	r2, [r3, #6]
 80018f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018f4:	f003 fa1e 	bl	8004d34 <USB_ReadPMA>
 80018f8:	e07c      	b.n	80019f4 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	78db      	ldrb	r3, [r3, #3]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d108      	bne.n	8001914 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001902:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001904:	461a      	mov	r2, r3
 8001906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f923 	bl	8001b54 <HAL_PCD_EP_DB_Receive>
 800190e:	4603      	mov	r3, r0
 8001910:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001912:	e06f      	b.n	80019f4 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800192a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800192e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	441a      	add	r2, r3
 800193e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800194c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001950:	b29b      	uxth	r3, r3
 8001952:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	b29b      	uxth	r3, r3
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d021      	beq.n	80019b2 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	3302      	adds	r3, #2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001996:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001998:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800199a:	2b00      	cmp	r3, #0
 800199c:	d02a      	beq.n	80019f4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	6959      	ldr	r1, [r3, #20]
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	891a      	ldrh	r2, [r3, #8]
 80019aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019ac:	f003 f9c2 	bl	8004d34 <USB_ReadPMA>
 80019b0:	e020      	b.n	80019f4 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4413      	add	r3, r2
 80019c6:	3306      	adds	r3, #6
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019da:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80019dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	6959      	ldr	r1, [r3, #20]
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	895a      	ldrh	r2, [r3, #10]
 80019ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019f0:	f003 f9a0 	bl	8004d34 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	69da      	ldr	r2, [r3, #28]
 80019f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019fa:	441a      	add	r2, r3
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a06:	441a      	add	r2, r3
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <PCD_EP_ISR_Handler+0x4b0>
 8001a14:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d206      	bcs.n	8001a2c <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4619      	mov	r1, r3
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f007 fdad 	bl	8009584 <HAL_PCD_DataOutStageCallback>
 8001a2a:	e005      	b.n	8001a38 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 fedc 	bl	80037f0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d07a      	beq.n	8001b38 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a70:	843b      	strh	r3, [r7, #32]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	441a      	add	r2, r3
 8001a80:	8c3b      	ldrh	r3, [r7, #32]
 8001a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	78db      	ldrb	r3, [r3, #3]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d108      	bne.n	8001aa8 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d146      	bne.n	8001b2c <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d141      	bne.n	8001b2c <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	3302      	adds	r3, #2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ad0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	699a      	ldr	r2, [r3, #24]
 8001ad6:	8bfb      	ldrh	r3, [r7, #30]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d906      	bls.n	8001aea <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	8bfb      	ldrh	r3, [r7, #30]
 8001ae2:	1ad2      	subs	r2, r2, r3
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	619a      	str	r2, [r3, #24]
 8001ae8:	e002      	b.n	8001af0 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d106      	bne.n	8001b06 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f007 fd5b 	bl	80095ba <HAL_PCD_DataInStageCallback>
 8001b04:	e018      	b.n	8001b38 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	8bfb      	ldrh	r3, [r7, #30]
 8001b0c:	441a      	add	r2, r3
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	8bfb      	ldrh	r3, [r7, #30]
 8001b18:	441a      	add	r2, r3
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 fe63 	bl	80037f0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001b2a:	e005      	b.n	8001b38 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b2e:	461a      	mov	r2, r3
 8001b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f91b 	bl	8001d6e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f6ff ad17 	blt.w	8001578 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3738      	adds	r7, #56	; 0x38
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d07e      	beq.n	8001c6a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	3302      	adds	r3, #2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	8b7b      	ldrh	r3, [r7, #26]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d306      	bcc.n	8001bae <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	699a      	ldr	r2, [r3, #24]
 8001ba4:	8b7b      	ldrh	r3, [r7, #26]
 8001ba6:	1ad2      	subs	r2, r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	619a      	str	r2, [r3, #24]
 8001bac:	e002      	b.n	8001bb4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d123      	bne.n	8001c04 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bd6:	833b      	strh	r3, [r7, #24]
 8001bd8:	8b3b      	ldrh	r3, [r7, #24]
 8001bda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bde:	833b      	strh	r3, [r7, #24]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	441a      	add	r2, r3
 8001bee:	8b3b      	ldrh	r3, [r7, #24]
 8001bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d01f      	beq.n	8001c4e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c28:	82fb      	strh	r3, [r7, #22]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	441a      	add	r2, r3
 8001c38:	8afb      	ldrh	r3, [r7, #22]
 8001c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c4e:	8b7b      	ldrh	r3, [r7, #26]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8087 	beq.w	8001d64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6818      	ldr	r0, [r3, #0]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	6959      	ldr	r1, [r3, #20]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	891a      	ldrh	r2, [r3, #8]
 8001c62:	8b7b      	ldrh	r3, [r7, #26]
 8001c64:	f003 f866 	bl	8004d34 <USB_ReadPMA>
 8001c68:	e07c      	b.n	8001d64 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3306      	adds	r3, #6
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c92:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	8b7b      	ldrh	r3, [r7, #26]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d306      	bcc.n	8001cac <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	8b7b      	ldrh	r3, [r7, #26]
 8001ca4:	1ad2      	subs	r2, r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	619a      	str	r2, [r3, #24]
 8001caa:	e002      	b.n	8001cb2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d123      	bne.n	8001d02 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd4:	83fb      	strh	r3, [r7, #30]
 8001cd6:	8bfb      	ldrh	r3, [r7, #30]
 8001cd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cdc:	83fb      	strh	r3, [r7, #30]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	441a      	add	r2, r3
 8001cec:	8bfb      	ldrh	r3, [r7, #30]
 8001cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d11f      	bne.n	8001d4c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d26:	83bb      	strh	r3, [r7, #28]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	441a      	add	r2, r3
 8001d36:	8bbb      	ldrh	r3, [r7, #28]
 8001d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d4c:	8b7b      	ldrh	r3, [r7, #26]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d008      	beq.n	8001d64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	6959      	ldr	r1, [r3, #20]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	895a      	ldrh	r2, [r3, #10]
 8001d5e:	8b7b      	ldrh	r3, [r7, #26]
 8001d60:	f002 ffe8 	bl	8004d34 <USB_ReadPMA>
    }
  }

  return count;
 8001d64:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b092      	sub	sp, #72	; 0x48
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8132 	beq.w	8001fec <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d906      	bls.n	8001dca <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	699a      	ldr	r2, [r3, #24]
 8001dc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dc2:	1ad2      	subs	r2, r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	619a      	str	r2, [r3, #24]
 8001dc8:	e002      	b.n	8001dd0 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d12c      	bne.n	8001e32 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f007 fbeb 	bl	80095ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 822f 	beq.w	800224e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0a:	827b      	strh	r3, [r7, #18]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	441a      	add	r2, r3
 8001e1a:	8a7b      	ldrh	r3, [r7, #18]
 8001e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	8013      	strh	r3, [r2, #0]
 8001e30:	e20d      	b.n	800224e <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d01f      	beq.n	8001e7c <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	441a      	add	r2, r3
 8001e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	f040 81e3 	bne.w	800224e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e8e:	441a      	add	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	69da      	ldr	r2, [r3, #28]
 8001e98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e9a:	441a      	add	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	6a1a      	ldr	r2, [r3, #32]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d309      	bcc.n	8001ec0 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	6a1a      	ldr	r2, [r3, #32]
 8001eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb8:	1ad2      	subs	r2, r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	621a      	str	r2, [r3, #32]
 8001ebe:	e014      	b.n	8001eea <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001ec8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001eca:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ed4:	e009      	b.n	8001eea <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	785b      	ldrb	r3, [r3, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d155      	bne.n	8001f9e <HAL_PCD_EP_DB_Transmit+0x230>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	4413      	add	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	011a      	lsls	r2, r3, #4
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	4413      	add	r3, r2
 8001f14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d112      	bne.n	8001f46 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	801a      	strh	r2, [r3, #0]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	801a      	strh	r2, [r3, #0]
 8001f44:	e047      	b.n	8001fd6 <HAL_PCD_EP_DB_Transmit+0x268>
 8001f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f48:	2b3e      	cmp	r3, #62	; 0x3e
 8001f4a:	d811      	bhi.n	8001f70 <HAL_PCD_EP_DB_Transmit+0x202>
 8001f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f4e:	085b      	lsrs	r3, r3, #1
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5e:	3301      	adds	r3, #1
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	029b      	lsls	r3, r3, #10
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	e032      	b.n	8001fd6 <HAL_PCD_EP_DB_Transmit+0x268>
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <HAL_PCD_EP_DB_Transmit+0x218>
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	3b01      	subs	r3, #1
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	029b      	lsls	r3, r3, #10
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	801a      	strh	r2, [r3, #0]
 8001f9c:	e01b      	b.n	8001fd6 <HAL_PCD_EP_DB_Transmit+0x268>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	785b      	ldrb	r3, [r3, #1]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d117      	bne.n	8001fd6 <HAL_PCD_EP_DB_Transmit+0x268>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	4413      	add	r3, r2
 8001fbc:	623b      	str	r3, [r7, #32]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	011a      	lsls	r2, r3, #4
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	6959      	ldr	r1, [r3, #20]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	891a      	ldrh	r2, [r3, #8]
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	f002 fe61 	bl	8004cac <USB_WritePMA>
 8001fea:	e130      	b.n	800224e <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	3306      	adds	r3, #6
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002014:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800201c:	429a      	cmp	r2, r3
 800201e:	d306      	bcc.n	800202e <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002026:	1ad2      	subs	r2, r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	619a      	str	r2, [r3, #24]
 800202c:	e002      	b.n	8002034 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d12c      	bne.n	8002096 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f007 fab9 	bl	80095ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 80fd 	bne.w	800224e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800206a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	441a      	add	r2, r3
 800207e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002090:	b29b      	uxth	r3, r3
 8002092:	8013      	strh	r3, [r2, #0]
 8002094:	e0db      	b.n	800224e <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d11f      	bne.n	80020e0 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	441a      	add	r2, r3
 80020ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80020cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020dc:	b29b      	uxth	r3, r3
 80020de:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	f040 80b1 	bne.w	800224e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020f2:	441a      	add	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020fe:	441a      	add	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	d309      	bcc.n	8002124 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	6a1a      	ldr	r2, [r3, #32]
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	1ad2      	subs	r2, r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	621a      	str	r2, [r3, #32]
 8002122:	e014      	b.n	800214e <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d106      	bne.n	800213a <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800212c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002138:	e009      	b.n	800214e <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	785b      	ldrb	r3, [r3, #1]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d155      	bne.n	8002208 <HAL_PCD_EP_DB_Transmit+0x49a>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	647b      	str	r3, [r7, #68]	; 0x44
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216a:	b29b      	uxth	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002170:	4413      	add	r3, r2
 8002172:	647b      	str	r3, [r7, #68]	; 0x44
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	011a      	lsls	r2, r3, #4
 800217a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800217c:	4413      	add	r3, r2
 800217e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002182:	643b      	str	r3, [r7, #64]	; 0x40
 8002184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002186:	2b00      	cmp	r3, #0
 8002188:	d112      	bne.n	80021b0 <HAL_PCD_EP_DB_Transmit+0x442>
 800218a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002194:	b29a      	uxth	r2, r3
 8002196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ac:	801a      	strh	r2, [r3, #0]
 80021ae:	e044      	b.n	800223a <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b2:	2b3e      	cmp	r3, #62	; 0x3e
 80021b4:	d811      	bhi.n	80021da <HAL_PCD_EP_DB_Transmit+0x46c>
 80021b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <HAL_PCD_EP_DB_Transmit+0x45e>
 80021c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c8:	3301      	adds	r3, #1
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	029b      	lsls	r3, r3, #10
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d6:	801a      	strh	r2, [r3, #0]
 80021d8:	e02f      	b.n	800223a <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d102      	bne.n	80021f0 <HAL_PCD_EP_DB_Transmit+0x482>
 80021ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ec:	3b01      	subs	r3, #1
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	029b      	lsls	r3, r3, #10
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002200:	b29a      	uxth	r2, r3
 8002202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	e018      	b.n	800223a <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	785b      	ldrb	r3, [r3, #1]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d114      	bne.n	800223a <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002218:	b29b      	uxth	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	4413      	add	r3, r2
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	011a      	lsls	r2, r3, #4
 8002228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222a:	4413      	add	r3, r2
 800222c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002234:	b29a      	uxth	r2, r3
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002238:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	6959      	ldr	r1, [r3, #20]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	895a      	ldrh	r2, [r3, #10]
 8002246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002248:	b29b      	uxth	r3, r3
 800224a:	f002 fd2f 	bl	8004cac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002268:	823b      	strh	r3, [r7, #16]
 800226a:	8a3b      	ldrh	r3, [r7, #16]
 800226c:	f083 0310 	eor.w	r3, r3, #16
 8002270:	823b      	strh	r3, [r7, #16]
 8002272:	8a3b      	ldrh	r3, [r7, #16]
 8002274:	f083 0320 	eor.w	r3, r3, #32
 8002278:	823b      	strh	r3, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	441a      	add	r2, r3
 8002288:	8a3b      	ldrh	r3, [r7, #16]
 800228a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800228e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229a:	b29b      	uxth	r3, r3
 800229c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3748      	adds	r7, #72	; 0x48
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	817b      	strh	r3, [r7, #10]
 80022b6:	4613      	mov	r3, r2
 80022b8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80022ba:	897b      	ldrh	r3, [r7, #10]
 80022bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00b      	beq.n	80022de <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c6:	897b      	ldrh	r3, [r7, #10]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4413      	add	r3, r2
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e009      	b.n	80022f2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022de:	897a      	ldrh	r2, [r7, #10]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80022f2:	893b      	ldrh	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2200      	movs	r2, #0
 80022fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	b29a      	uxth	r2, r3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	80da      	strh	r2, [r3, #6]
 8002306:	e00b      	b.n	8002320 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2201      	movs	r2, #1
 800230c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	b29a      	uxth	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	b29a      	uxth	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e26c      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8087 	beq.w	800245a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800234c:	4b92      	ldr	r3, [pc, #584]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b04      	cmp	r3, #4
 8002356:	d00c      	beq.n	8002372 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002358:	4b8f      	ldr	r3, [pc, #572]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d112      	bne.n	800238a <HAL_RCC_OscConfig+0x5e>
 8002364:	4b8c      	ldr	r3, [pc, #560]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002370:	d10b      	bne.n	800238a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002372:	4b89      	ldr	r3, [pc, #548]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d06c      	beq.n	8002458 <HAL_RCC_OscConfig+0x12c>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d168      	bne.n	8002458 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e246      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x76>
 8002394:	4b80      	ldr	r3, [pc, #512]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a7f      	ldr	r2, [pc, #508]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 800239a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	e02e      	b.n	8002400 <HAL_RCC_OscConfig+0xd4>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x98>
 80023aa:	4b7b      	ldr	r3, [pc, #492]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7a      	ldr	r2, [pc, #488]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b78      	ldr	r3, [pc, #480]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a77      	ldr	r2, [pc, #476]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e01d      	b.n	8002400 <HAL_RCC_OscConfig+0xd4>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0xbc>
 80023ce:	4b72      	ldr	r3, [pc, #456]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a71      	ldr	r2, [pc, #452]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b6f      	ldr	r3, [pc, #444]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a6e      	ldr	r2, [pc, #440]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e00b      	b.n	8002400 <HAL_RCC_OscConfig+0xd4>
 80023e8:	4b6b      	ldr	r3, [pc, #428]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a6a      	ldr	r2, [pc, #424]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b68      	ldr	r3, [pc, #416]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a67      	ldr	r2, [pc, #412]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d013      	beq.n	8002430 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe f96a 	bl	80006e0 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7fe f966 	bl	80006e0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1fa      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b5d      	ldr	r3, [pc, #372]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0xe4>
 800242e:	e014      	b.n	800245a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7fe f956 	bl	80006e0 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002438:	f7fe f952 	bl	80006e0 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e1e6      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x10c>
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d063      	beq.n	800252e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002466:	4b4c      	ldr	r3, [pc, #304]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002472:	4b49      	ldr	r3, [pc, #292]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b08      	cmp	r3, #8
 800247c:	d11c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x18c>
 800247e:	4b46      	ldr	r3, [pc, #280]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d116      	bne.n	80024b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	4b43      	ldr	r3, [pc, #268]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_RCC_OscConfig+0x176>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e1ba      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4939      	ldr	r1, [pc, #228]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b6:	e03a      	b.n	800252e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c0:	4b36      	ldr	r3, [pc, #216]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7fe f90b 	bl	80006e0 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ce:	f7fe f907 	bl	80006e0 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e19b      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4927      	ldr	r1, [pc, #156]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	600b      	str	r3, [r1, #0]
 8002500:	e015      	b.n	800252e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002502:	4b26      	ldr	r3, [pc, #152]	; (800259c <HAL_RCC_OscConfig+0x270>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe f8ea 	bl	80006e0 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002510:	f7fe f8e6 	bl	80006e0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e17a      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d03a      	beq.n	80025b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d019      	beq.n	8002576 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <HAL_RCC_OscConfig+0x274>)
 8002544:	2201      	movs	r2, #1
 8002546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002548:	f7fe f8ca 	bl	80006e0 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002550:	f7fe f8c6 	bl	80006e0 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e15a      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800256e:	2001      	movs	r0, #1
 8002570:	f000 faa8 	bl	8002ac4 <RCC_Delay>
 8002574:	e01c      	b.n	80025b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_RCC_OscConfig+0x274>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257c:	f7fe f8b0 	bl	80006e0 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002582:	e00f      	b.n	80025a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002584:	f7fe f8ac 	bl	80006e0 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d908      	bls.n	80025a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e140      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	42420000 	.word	0x42420000
 80025a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a4:	4b9e      	ldr	r3, [pc, #632]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e9      	bne.n	8002584 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80a6 	beq.w	800270a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c2:	4b97      	ldr	r3, [pc, #604]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4b94      	ldr	r3, [pc, #592]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	4a93      	ldr	r2, [pc, #588]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	61d3      	str	r3, [r2, #28]
 80025da:	4b91      	ldr	r3, [pc, #580]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e6:	2301      	movs	r3, #1
 80025e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	4b8e      	ldr	r3, [pc, #568]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d118      	bne.n	8002628 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f6:	4b8b      	ldr	r3, [pc, #556]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a8a      	ldr	r2, [pc, #552]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002602:	f7fe f86d 	bl	80006e0 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260a:	f7fe f869 	bl	80006e0 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b64      	cmp	r3, #100	; 0x64
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0fd      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	4b81      	ldr	r3, [pc, #516]	; (8002824 <HAL_RCC_OscConfig+0x4f8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x312>
 8002630:	4b7b      	ldr	r3, [pc, #492]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4a7a      	ldr	r2, [pc, #488]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6213      	str	r3, [r2, #32]
 800263c:	e02d      	b.n	800269a <HAL_RCC_OscConfig+0x36e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x334>
 8002646:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4a75      	ldr	r2, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	6213      	str	r3, [r2, #32]
 8002652:	4b73      	ldr	r3, [pc, #460]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	4a72      	ldr	r2, [pc, #456]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	f023 0304 	bic.w	r3, r3, #4
 800265c:	6213      	str	r3, [r2, #32]
 800265e:	e01c      	b.n	800269a <HAL_RCC_OscConfig+0x36e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b05      	cmp	r3, #5
 8002666:	d10c      	bne.n	8002682 <HAL_RCC_OscConfig+0x356>
 8002668:	4b6d      	ldr	r3, [pc, #436]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4a6c      	ldr	r2, [pc, #432]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	6213      	str	r3, [r2, #32]
 8002674:	4b6a      	ldr	r3, [pc, #424]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4a69      	ldr	r2, [pc, #420]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6213      	str	r3, [r2, #32]
 8002680:	e00b      	b.n	800269a <HAL_RCC_OscConfig+0x36e>
 8002682:	4b67      	ldr	r3, [pc, #412]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	4a66      	ldr	r2, [pc, #408]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	6213      	str	r3, [r2, #32]
 800268e:	4b64      	ldr	r3, [pc, #400]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	4a63      	ldr	r2, [pc, #396]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002694:	f023 0304 	bic.w	r3, r3, #4
 8002698:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d015      	beq.n	80026ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7fe f81d 	bl	80006e0 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7fe f819 	bl	80006e0 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0ab      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c0:	4b57      	ldr	r3, [pc, #348]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0ee      	beq.n	80026aa <HAL_RCC_OscConfig+0x37e>
 80026cc:	e014      	b.n	80026f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7fe f807 	bl	80006e0 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d4:	e00a      	b.n	80026ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe f803 	bl	80006e0 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e095      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ec:	4b4c      	ldr	r3, [pc, #304]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1ee      	bne.n	80026d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d105      	bne.n	800270a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fe:	4b48      	ldr	r3, [pc, #288]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4a47      	ldr	r2, [pc, #284]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002708:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8081 	beq.w	8002816 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002714:	4b42      	ldr	r3, [pc, #264]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b08      	cmp	r3, #8
 800271e:	d061      	beq.n	80027e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d146      	bne.n	80027b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002728:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <HAL_RCC_OscConfig+0x4fc>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7fd ffd7 	bl	80006e0 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002736:	f7fd ffd3 	bl	80006e0 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e067      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002748:	4b35      	ldr	r3, [pc, #212]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f0      	bne.n	8002736 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275c:	d108      	bne.n	8002770 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800275e:	4b30      	ldr	r3, [pc, #192]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	492d      	ldr	r1, [pc, #180]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a19      	ldr	r1, [r3, #32]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	430b      	orrs	r3, r1
 8002782:	4927      	ldr	r1, [pc, #156]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_RCC_OscConfig+0x4fc>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7fd ffa7 	bl	80006e0 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7fd ffa3 	bl	80006e0 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e037      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a8:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x46a>
 80027b4:	e02f      	b.n	8002816 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b6:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <HAL_RCC_OscConfig+0x4fc>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fd ff90 	bl	80006e0 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c4:	f7fd ff8c 	bl	80006e0 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e020      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x498>
 80027e2:	e018      	b.n	8002816 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e013      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	429a      	cmp	r2, r3
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d001      	beq.n	8002816 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	40007000 	.word	0x40007000
 8002828:	42420060 	.word	0x42420060

0800282c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0d0      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002840:	4b6a      	ldr	r3, [pc, #424]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d910      	bls.n	8002870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b67      	ldr	r3, [pc, #412]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 0207 	bic.w	r2, r3, #7
 8002856:	4965      	ldr	r1, [pc, #404]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b63      	ldr	r3, [pc, #396]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0b8      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d020      	beq.n	80028be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002888:	4b59      	ldr	r3, [pc, #356]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4a58      	ldr	r2, [pc, #352]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002892:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a0:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a52      	ldr	r2, [pc, #328]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ac:	4b50      	ldr	r3, [pc, #320]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	494d      	ldr	r1, [pc, #308]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d040      	beq.n	800294c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	4b47      	ldr	r3, [pc, #284]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d115      	bne.n	800290a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e07f      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ea:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e073      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e06b      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800290a:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f023 0203 	bic.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4936      	ldr	r1, [pc, #216]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800291c:	f7fd fee0 	bl	80006e0 <HAL_GetTick>
 8002920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	e00a      	b.n	800293a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002924:	f7fd fedc 	bl	80006e0 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e053      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 020c 	and.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	429a      	cmp	r2, r3
 800294a:	d1eb      	bne.n	8002924 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d210      	bcs.n	800297c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b24      	ldr	r3, [pc, #144]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 0207 	bic.w	r2, r3, #7
 8002962:	4922      	ldr	r1, [pc, #136]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e032      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002988:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4916      	ldr	r1, [pc, #88]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	490e      	ldr	r1, [pc, #56]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ba:	f000 f821 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 80029be:	4601      	mov	r1, r0
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	5cd3      	ldrb	r3, [r2, r3]
 80029ce:	fa21 f303 	lsr.w	r3, r1, r3
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <HAL_RCC_ClockConfig+0x1cc>)
 80029d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_RCC_ClockConfig+0x1d0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fe3e 	bl	800065c <HAL_InitTick>

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40022000 	.word	0x40022000
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08009ca0 	.word	0x08009ca0
 80029f8:	20000000 	.word	0x20000000
 80029fc:	20000004 	.word	0x20000004

08002a00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a00:	b490      	push	{r4, r7}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a06:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a08:	1d3c      	adds	r4, r7, #4
 8002a0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a10:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a2a:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d002      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x40>
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x46>
 8002a3e:	e02d      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a40:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a42:	623b      	str	r3, [r7, #32]
      break;
 8002a44:	e02d      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	0c9b      	lsrs	r3, r3, #18
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a52:	4413      	add	r3, r2
 8002a54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	0c5b      	lsrs	r3, r3, #17
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a72:	4413      	add	r3, r2
 8002a74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	4a0f      	ldr	r2, [pc, #60]	; (8002abc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a7e:	fb02 f203 	mul.w	r2, r2, r3
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8a:	e004      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a90:	fb02 f303 	mul.w	r3, r2, r3
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	623b      	str	r3, [r7, #32]
      break;
 8002a9a:	e002      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a9c:	4b07      	ldr	r3, [pc, #28]	; (8002abc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a9e:	623b      	str	r3, [r7, #32]
      break;
 8002aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3728      	adds	r7, #40	; 0x28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc90      	pop	{r4, r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	08009c08 	.word	0x08009c08
 8002ab4:	08009c18 	.word	0x08009c18
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	007a1200 	.word	0x007a1200
 8002ac0:	003d0900 	.word	0x003d0900

08002ac4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <RCC_Delay+0x34>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <RCC_Delay+0x38>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0a5b      	lsrs	r3, r3, #9
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ae0:	bf00      	nop
  }
  while (Delay --);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	60fa      	str	r2, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f9      	bne.n	8002ae0 <RCC_Delay+0x1c>
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000000 	.word	0x20000000
 8002afc:	10624dd3 	.word	0x10624dd3

08002b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d07d      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b20:	4b4f      	ldr	r3, [pc, #316]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10d      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2c:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	4a4b      	ldr	r2, [pc, #300]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b36:	61d3      	str	r3, [r2, #28]
 8002b38:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b44:	2301      	movs	r3, #1
 8002b46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d118      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b54:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a42      	ldr	r2, [pc, #264]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b60:	f7fd fdbe 	bl	80006e0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b66:	e008      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b68:	f7fd fdba 	bl	80006e0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e06d      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7a:	4b3a      	ldr	r3, [pc, #232]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b86:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d02e      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d027      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bae:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb4:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bba:	4a29      	ldr	r2, [pc, #164]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d014      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7fd fd89 	bl	80006e0 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fd fd85 	bl	80006e0 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e036      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0ee      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4917      	ldr	r1, [pc, #92]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	490b      	ldr	r1, [pc, #44]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	4904      	ldr	r1, [pc, #16]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40007000 	.word	0x40007000
 8002c68:	42420440 	.word	0x42420440

08002c6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	f107 0014 	add.w	r0, r7, #20
 8002c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	b004      	add	sp, #16
 8002c8a:	4770      	bx	lr

08002c8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c9c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002ca0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cc0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002cc4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d04:	b084      	sub	sp, #16
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	f107 0014 	add.w	r0, r7, #20
 8002d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	b004      	add	sp, #16
 8002d42:	4770      	bx	lr

08002d44 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b09b      	sub	sp, #108	; 0x6c
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	78db      	ldrb	r3, [r3, #3]
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d81f      	bhi.n	8002db6 <USB_ActivateEndpoint+0x72>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <USB_ActivateEndpoint+0x38>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002d8d 	.word	0x08002d8d
 8002d80:	08002da9 	.word	0x08002da9
 8002d84:	08002dbf 	.word	0x08002dbf
 8002d88:	08002d9b 	.word	0x08002d9b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002d8c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d94:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d98:	e012      	b.n	8002dc0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002d9a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d9e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002da2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002da6:	e00b      	b.n	8002dc0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002da8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002db0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002db4:	e004      	b.n	8002dc0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002dbc:	e000      	b.n	8002dc0 <USB_ActivateEndpoint+0x7c>
      break;
 8002dbe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	441a      	add	r2, r3
 8002dca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	441a      	add	r2, r3
 8002e10:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	7b1b      	ldrb	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f040 8149 	bne.w	80030c4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	785b      	ldrb	r3, [r3, #1]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8084 	beq.w	8002f44 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	011a      	lsls	r2, r3, #4
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	88db      	ldrh	r3, [r3, #6]
 8002e64:	085b      	lsrs	r3, r3, #1
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	81fb      	strh	r3, [r7, #14]
 8002e7e:	89fb      	ldrh	r3, [r7, #14]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01b      	beq.n	8002ec0 <USB_ActivateEndpoint+0x17c>
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	81bb      	strh	r3, [r7, #12]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	441a      	add	r2, r3
 8002eaa:	89bb      	ldrh	r3, [r7, #12]
 8002eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	78db      	ldrb	r3, [r3, #3]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d020      	beq.n	8002f0a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ede:	813b      	strh	r3, [r7, #8]
 8002ee0:	893b      	ldrh	r3, [r7, #8]
 8002ee2:	f083 0320 	eor.w	r3, r3, #32
 8002ee6:	813b      	strh	r3, [r7, #8]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	893b      	ldrh	r3, [r7, #8]
 8002ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	8013      	strh	r3, [r2, #0]
 8002f08:	e27f      	b.n	800340a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f20:	817b      	strh	r3, [r7, #10]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	441a      	add	r2, r3
 8002f2c:	897b      	ldrh	r3, [r7, #10]
 8002f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	8013      	strh	r3, [r2, #0]
 8002f42:	e262      	b.n	800340a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	4413      	add	r3, r2
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	011a      	lsls	r2, r3, #4
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	88db      	ldrh	r3, [r3, #6]
 8002f6c:	085b      	lsrs	r3, r3, #1
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	4413      	add	r3, r2
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	011a      	lsls	r2, r3, #4
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	4413      	add	r3, r2
 8002f96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f9a:	623b      	str	r3, [r7, #32]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d112      	bne.n	8002fca <USB_ActivateEndpoint+0x286>
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	801a      	strh	r2, [r3, #0]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	801a      	strh	r2, [r3, #0]
 8002fc8:	e02f      	b.n	800302a <USB_ActivateEndpoint+0x2e6>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b3e      	cmp	r3, #62	; 0x3e
 8002fd0:	d813      	bhi.n	8002ffa <USB_ActivateEndpoint+0x2b6>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	663b      	str	r3, [r7, #96]	; 0x60
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <USB_ActivateEndpoint+0x2a8>
 8002fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fe8:	3301      	adds	r3, #1
 8002fea:	663b      	str	r3, [r7, #96]	; 0x60
 8002fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	029b      	lsls	r3, r3, #10
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	801a      	strh	r2, [r3, #0]
 8002ff8:	e017      	b.n	800302a <USB_ActivateEndpoint+0x2e6>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	663b      	str	r3, [r7, #96]	; 0x60
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <USB_ActivateEndpoint+0x2d0>
 800300e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003010:	3b01      	subs	r3, #1
 8003012:	663b      	str	r3, [r7, #96]	; 0x60
 8003014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003016:	b29b      	uxth	r3, r3
 8003018:	029b      	lsls	r3, r3, #10
 800301a:	b29b      	uxth	r3, r3
 800301c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003024:	b29a      	uxth	r2, r3
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	83fb      	strh	r3, [r7, #30]
 8003038:	8bfb      	ldrh	r3, [r7, #30]
 800303a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01b      	beq.n	800307a <USB_ActivateEndpoint+0x336>
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003058:	83bb      	strh	r3, [r7, #28]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	441a      	add	r2, r3
 8003064:	8bbb      	ldrh	r3, [r7, #28]
 8003066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800306a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800306e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003076:	b29b      	uxth	r3, r3
 8003078:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800308c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003090:	837b      	strh	r3, [r7, #26]
 8003092:	8b7b      	ldrh	r3, [r7, #26]
 8003094:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003098:	837b      	strh	r3, [r7, #26]
 800309a:	8b7b      	ldrh	r3, [r7, #26]
 800309c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030a0:	837b      	strh	r3, [r7, #26]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	441a      	add	r2, r3
 80030ac:	8b7b      	ldrh	r3, [r7, #26]
 80030ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030be:	b29b      	uxth	r3, r3
 80030c0:	8013      	strh	r3, [r2, #0]
 80030c2:	e1a2      	b.n	800340a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	441a      	add	r2, r3
 80030e8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80030ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030f4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80030f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	65bb      	str	r3, [r7, #88]	; 0x58
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003110:	4413      	add	r3, r2
 8003112:	65bb      	str	r3, [r7, #88]	; 0x58
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	011a      	lsls	r2, r3, #4
 800311a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800311c:	4413      	add	r3, r2
 800311e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003122:	657b      	str	r3, [r7, #84]	; 0x54
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	891b      	ldrh	r3, [r3, #8]
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	b29b      	uxth	r3, r3
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003132:	801a      	strh	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	653b      	str	r3, [r7, #80]	; 0x50
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003144:	4413      	add	r3, r2
 8003146:	653b      	str	r3, [r7, #80]	; 0x50
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	011a      	lsls	r2, r3, #4
 800314e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003150:	4413      	add	r3, r2
 8003152:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	895b      	ldrh	r3, [r3, #10]
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	b29b      	uxth	r3, r3
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003166:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	785b      	ldrb	r3, [r3, #1]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f040 8091 	bne.w	8003294 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003180:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01b      	beq.n	80031c2 <USB_ActivateEndpoint+0x47e>
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	441a      	add	r2, r3
 80031ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031be:	b29b      	uxth	r3, r3
 80031c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	873b      	strh	r3, [r7, #56]	; 0x38
 80031d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80031d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01b      	beq.n	8003212 <USB_ActivateEndpoint+0x4ce>
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	441a      	add	r2, r3
 80031fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800320e:	b29b      	uxth	r3, r3
 8003210:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003228:	86bb      	strh	r3, [r7, #52]	; 0x34
 800322a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800322c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003230:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003232:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003234:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003238:	86bb      	strh	r3, [r7, #52]	; 0x34
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	441a      	add	r2, r3
 8003244:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800324a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800324e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003256:	b29b      	uxth	r3, r3
 8003258:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003270:	867b      	strh	r3, [r7, #50]	; 0x32
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	441a      	add	r2, r3
 800327c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800327e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328e:	b29b      	uxth	r3, r3
 8003290:	8013      	strh	r3, [r2, #0]
 8003292:	e0ba      	b.n	800340a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80032a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01d      	beq.n	80032ec <USB_ActivateEndpoint+0x5a8>
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	441a      	add	r2, r3
 80032d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80032fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01d      	beq.n	8003344 <USB_ActivateEndpoint+0x600>
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	441a      	add	r2, r3
 800332c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003340:	b29b      	uxth	r3, r3
 8003342:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	78db      	ldrb	r3, [r3, #3]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d024      	beq.n	8003396 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003362:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003366:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800336a:	f083 0320 	eor.w	r3, r3, #32
 800336e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	441a      	add	r2, r3
 800337c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800338c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003390:	b29b      	uxth	r3, r3
 8003392:	8013      	strh	r3, [r2, #0]
 8003394:	e01d      	b.n	80033d2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	441a      	add	r2, r3
 80033ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80033be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	441a      	add	r2, r3
 80033f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003406:	b29b      	uxth	r3, r3
 8003408:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800340a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800340e:	4618      	mov	r0, r3
 8003410:	376c      	adds	r7, #108	; 0x6c
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003418:	b480      	push	{r7}
 800341a:	b08d      	sub	sp, #52	; 0x34
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	7b1b      	ldrb	r3, [r3, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f040 808e 	bne.w	8003548 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	785b      	ldrb	r3, [r3, #1]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d044      	beq.n	80034be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	81bb      	strh	r3, [r7, #12]
 8003442:	89bb      	ldrh	r3, [r7, #12]
 8003444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01b      	beq.n	8003484 <USB_DeactivateEndpoint+0x6c>
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800345e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003462:	817b      	strh	r3, [r7, #10]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	441a      	add	r2, r3
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800347c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003480:	b29b      	uxth	r3, r3
 8003482:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800349a:	813b      	strh	r3, [r7, #8]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	893b      	ldrh	r3, [r7, #8]
 80034a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	8013      	strh	r3, [r2, #0]
 80034bc:	e192      	b.n	80037e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	827b      	strh	r3, [r7, #18]
 80034cc:	8a7b      	ldrh	r3, [r7, #18]
 80034ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01b      	beq.n	800350e <USB_DeactivateEndpoint+0xf6>
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ec:	823b      	strh	r3, [r7, #16]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	441a      	add	r2, r3
 80034f8:	8a3b      	ldrh	r3, [r7, #16]
 80034fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350a:	b29b      	uxth	r3, r3
 800350c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003524:	81fb      	strh	r3, [r7, #14]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	441a      	add	r2, r3
 8003530:	89fb      	ldrh	r3, [r7, #14]
 8003532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800353a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003542:	b29b      	uxth	r3, r3
 8003544:	8013      	strh	r3, [r2, #0]
 8003546:	e14d      	b.n	80037e4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	785b      	ldrb	r3, [r3, #1]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f040 80a5 	bne.w	800369c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	843b      	strh	r3, [r7, #32]
 8003560:	8c3b      	ldrh	r3, [r7, #32]
 8003562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01b      	beq.n	80035a2 <USB_DeactivateEndpoint+0x18a>
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800357c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003580:	83fb      	strh	r3, [r7, #30]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	441a      	add	r2, r3
 800358c:	8bfb      	ldrh	r3, [r7, #30]
 800358e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800359a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359e:	b29b      	uxth	r3, r3
 80035a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	83bb      	strh	r3, [r7, #28]
 80035b0:	8bbb      	ldrh	r3, [r7, #28]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d01b      	beq.n	80035f2 <USB_DeactivateEndpoint+0x1da>
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d0:	837b      	strh	r3, [r7, #26]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	441a      	add	r2, r3
 80035dc:	8b7b      	ldrh	r3, [r7, #26]
 80035de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003608:	833b      	strh	r3, [r7, #24]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	441a      	add	r2, r3
 8003614:	8b3b      	ldrh	r3, [r7, #24]
 8003616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800361a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800361e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003622:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003626:	b29b      	uxth	r3, r3
 8003628:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800363c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003640:	82fb      	strh	r3, [r7, #22]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	441a      	add	r2, r3
 800364c:	8afb      	ldrh	r3, [r7, #22]
 800364e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800365a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365e:	b29b      	uxth	r3, r3
 8003660:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003678:	82bb      	strh	r3, [r7, #20]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	441a      	add	r2, r3
 8003684:	8abb      	ldrh	r3, [r7, #20]
 8003686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800368a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800368e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003696:	b29b      	uxth	r3, r3
 8003698:	8013      	strh	r3, [r2, #0]
 800369a:	e0a3      	b.n	80037e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80036aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01b      	beq.n	80036ec <USB_DeactivateEndpoint+0x2d4>
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	441a      	add	r2, r3
 80036d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80036fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01b      	beq.n	800373c <USB_DeactivateEndpoint+0x324>
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	853b      	strh	r3, [r7, #40]	; 0x28
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	441a      	add	r2, r3
 8003726:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800372c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003734:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003738:	b29b      	uxth	r3, r3
 800373a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003752:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003768:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800376c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003770:	b29b      	uxth	r3, r3
 8003772:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800378a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	441a      	add	r2, r3
 8003796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	441a      	add	r2, r3
 80037ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3734      	adds	r7, #52	; 0x34
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b0c4      	sub	sp, #272	; 0x110
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	1d3b      	adds	r3, r7, #4
 80037f8:	6018      	str	r0, [r3, #0]
 80037fa:	463b      	mov	r3, r7
 80037fc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037fe:	463b      	mov	r3, r7
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	2b01      	cmp	r3, #1
 8003806:	f040 8557 	bne.w	80042b8 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800380a:	463b      	mov	r3, r7
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699a      	ldr	r2, [r3, #24]
 8003810:	463b      	mov	r3, r7
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	429a      	cmp	r2, r3
 8003818:	d905      	bls.n	8003826 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800381a:	463b      	mov	r3, r7
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003824:	e004      	b.n	8003830 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003826:	463b      	mov	r3, r7
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003830:	463b      	mov	r3, r7
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	7b1b      	ldrb	r3, [r3, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d12c      	bne.n	8003894 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800383a:	463b      	mov	r3, r7
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6959      	ldr	r1, [r3, #20]
 8003840:	463b      	mov	r3, r7
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	88da      	ldrh	r2, [r3, #6]
 8003846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800384a:	b29b      	uxth	r3, r3
 800384c:	1d38      	adds	r0, r7, #4
 800384e:	6800      	ldr	r0, [r0, #0]
 8003850:	f001 fa2c 	bl	8004cac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003854:	1d3b      	adds	r3, r7, #4
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	1d3b      	adds	r3, r7, #4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003862:	b29b      	uxth	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	4413      	add	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	463b      	mov	r3, r7
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	011a      	lsls	r2, r3, #4
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	4413      	add	r3, r2
 8003878:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800387c:	f107 0310 	add.w	r3, r7, #16
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003886:	b29a      	uxth	r2, r3
 8003888:	f107 0310 	add.w	r3, r7, #16
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	801a      	strh	r2, [r3, #0]
 8003890:	f000 bcdd 	b.w	800424e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003894:	463b      	mov	r3, r7
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	78db      	ldrb	r3, [r3, #3]
 800389a:	2b02      	cmp	r3, #2
 800389c:	f040 8347 	bne.w	8003f2e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80038a0:	463b      	mov	r3, r7
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6a1a      	ldr	r2, [r3, #32]
 80038a6:	463b      	mov	r3, r7
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	f240 82eb 	bls.w	8003e88 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80038b2:	1d3b      	adds	r3, r7, #4
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	463b      	mov	r3, r7
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038cc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80038d0:	1d3b      	adds	r3, r7, #4
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	463b      	mov	r3, r7
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	441a      	add	r2, r3
 80038de:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80038e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80038ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80038f6:	463b      	mov	r3, r7
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a1a      	ldr	r2, [r3, #32]
 80038fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003900:	1ad2      	subs	r2, r2, r3
 8003902:	463b      	mov	r3, r7
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003908:	1d3b      	adds	r3, r7, #4
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	463b      	mov	r3, r7
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 8159 	beq.w	8003bd6 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
 800392a:	463b      	mov	r3, r7
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	785b      	ldrb	r3, [r3, #1]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d164      	bne.n	80039fe <USB_EPStartXfer+0x20e>
 8003934:	1d3b      	adds	r3, r7, #4
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800393a:	1d3b      	adds	r3, r7, #4
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003942:	b29b      	uxth	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	4413      	add	r3, r2
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800394c:	463b      	mov	r3, r7
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	011a      	lsls	r2, r3, #4
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003956:	4413      	add	r3, r2
 8003958:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
 800395e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d112      	bne.n	800398c <USB_EPStartXfer+0x19c>
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	b29b      	uxth	r3, r3
 800396c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003970:	b29a      	uxth	r2, r3
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	801a      	strh	r2, [r3, #0]
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003984:	b29a      	uxth	r2, r3
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	e054      	b.n	8003a36 <USB_EPStartXfer+0x246>
 800398c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003990:	2b3e      	cmp	r3, #62	; 0x3e
 8003992:	d817      	bhi.n	80039c4 <USB_EPStartXfer+0x1d4>
 8003994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003998:	085b      	lsrs	r3, r3, #1
 800399a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800399e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d004      	beq.n	80039b4 <USB_EPStartXfer+0x1c4>
 80039aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ae:	3301      	adds	r3, #1
 80039b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	029b      	lsls	r3, r3, #10
 80039bc:	b29a      	uxth	r2, r3
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	801a      	strh	r2, [r3, #0]
 80039c2:	e038      	b.n	8003a36 <USB_EPStartXfer+0x246>
 80039c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d104      	bne.n	80039e4 <USB_EPStartXfer+0x1f4>
 80039da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039de:	3b01      	subs	r3, #1
 80039e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	029b      	lsls	r3, r3, #10
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	801a      	strh	r2, [r3, #0]
 80039fc:	e01b      	b.n	8003a36 <USB_EPStartXfer+0x246>
 80039fe:	463b      	mov	r3, r7
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d116      	bne.n	8003a36 <USB_EPStartXfer+0x246>
 8003a08:	1d3b      	adds	r3, r7, #4
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a16:	4413      	add	r3, r2
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	011a      	lsls	r2, r3, #4
 8003a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a24:	4413      	add	r3, r2
 8003a26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8003a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003a36:	463b      	mov	r3, r7
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	895b      	ldrh	r3, [r3, #10]
 8003a3c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a40:	463b      	mov	r3, r7
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6959      	ldr	r1, [r3, #20]
 8003a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003a50:	1d38      	adds	r0, r7, #4
 8003a52:	6800      	ldr	r0, [r0, #0]
 8003a54:	f001 f92a 	bl	8004cac <USB_WritePMA>
            ep->xfer_buff += len;
 8003a58:	463b      	mov	r3, r7
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a62:	441a      	add	r2, r3
 8003a64:	463b      	mov	r3, r7
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6a1a      	ldr	r2, [r3, #32]
 8003a70:	463b      	mov	r3, r7
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d909      	bls.n	8003a8e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003a7a:	463b      	mov	r3, r7
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6a1a      	ldr	r2, [r3, #32]
 8003a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a84:	1ad2      	subs	r2, r2, r3
 8003a86:	463b      	mov	r3, r7
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	621a      	str	r2, [r3, #32]
 8003a8c:	e008      	b.n	8003aa0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003a8e:	463b      	mov	r3, r7
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003a98:	463b      	mov	r3, r7
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003aa0:	463b      	mov	r3, r7
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	785b      	ldrb	r3, [r3, #1]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d164      	bne.n	8003b74 <USB_EPStartXfer+0x384>
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	4413      	add	r3, r2
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	463b      	mov	r3, r7
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	011a      	lsls	r2, r3, #4
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d112      	bne.n	8003b02 <USB_EPStartXfer+0x312>
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	801a      	strh	r2, [r3, #0]
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	801a      	strh	r2, [r3, #0]
 8003b00:	e057      	b.n	8003bb2 <USB_EPStartXfer+0x3c2>
 8003b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b06:	2b3e      	cmp	r3, #62	; 0x3e
 8003b08:	d817      	bhi.n	8003b3a <USB_EPStartXfer+0x34a>
 8003b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d004      	beq.n	8003b2a <USB_EPStartXfer+0x33a>
 8003b20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b24:	3301      	adds	r3, #1
 8003b26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	029b      	lsls	r3, r3, #10
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	801a      	strh	r2, [r3, #0]
 8003b38:	e03b      	b.n	8003bb2 <USB_EPStartXfer+0x3c2>
 8003b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d104      	bne.n	8003b5a <USB_EPStartXfer+0x36a>
 8003b50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b54:	3b01      	subs	r3, #1
 8003b56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	029b      	lsls	r3, r3, #10
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	801a      	strh	r2, [r3, #0]
 8003b72:	e01e      	b.n	8003bb2 <USB_EPStartXfer+0x3c2>
 8003b74:	463b      	mov	r3, r7
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	785b      	ldrb	r3, [r3, #1]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d119      	bne.n	8003bb2 <USB_EPStartXfer+0x3c2>
 8003b7e:	1d3b      	adds	r3, r7, #4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
 8003b84:	1d3b      	adds	r3, r7, #4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	4413      	add	r3, r2
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
 8003b96:	463b      	mov	r3, r7
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	011a      	lsls	r2, r3, #4
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ba6:	623b      	str	r3, [r7, #32]
 8003ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	891b      	ldrh	r3, [r3, #8]
 8003bb8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bbc:	463b      	mov	r3, r7
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6959      	ldr	r1, [r3, #20]
 8003bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003bcc:	1d38      	adds	r0, r7, #4
 8003bce:	6800      	ldr	r0, [r0, #0]
 8003bd0:	f001 f86c 	bl	8004cac <USB_WritePMA>
 8003bd4:	e33b      	b.n	800424e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003bd6:	463b      	mov	r3, r7
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	785b      	ldrb	r3, [r3, #1]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d164      	bne.n	8003caa <USB_EPStartXfer+0x4ba>
 8003be0:	1d3b      	adds	r3, r7, #4
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf4:	4413      	add	r3, r2
 8003bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bf8:	463b      	mov	r3, r7
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	011a      	lsls	r2, r3, #4
 8003c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c02:	4413      	add	r3, r2
 8003c04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d112      	bne.n	8003c38 <USB_EPStartXfer+0x448>
 8003c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	e057      	b.n	8003ce8 <USB_EPStartXfer+0x4f8>
 8003c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3c:	2b3e      	cmp	r3, #62	; 0x3e
 8003c3e:	d817      	bhi.n	8003c70 <USB_EPStartXfer+0x480>
 8003c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <USB_EPStartXfer+0x470>
 8003c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	029b      	lsls	r3, r3, #10
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6c:	801a      	strh	r2, [r3, #0]
 8003c6e:	e03b      	b.n	8003ce8 <USB_EPStartXfer+0x4f8>
 8003c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d104      	bne.n	8003c90 <USB_EPStartXfer+0x4a0>
 8003c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	029b      	lsls	r3, r3, #10
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca6:	801a      	strh	r2, [r3, #0]
 8003ca8:	e01e      	b.n	8003ce8 <USB_EPStartXfer+0x4f8>
 8003caa:	463b      	mov	r3, r7
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	785b      	ldrb	r3, [r3, #1]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d119      	bne.n	8003ce8 <USB_EPStartXfer+0x4f8>
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	657b      	str	r3, [r7, #84]	; 0x54
 8003cba:	1d3b      	adds	r3, r7, #4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cc8:	4413      	add	r3, r2
 8003cca:	657b      	str	r3, [r7, #84]	; 0x54
 8003ccc:	463b      	mov	r3, r7
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	011a      	lsls	r2, r3, #4
 8003cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8003cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003ce8:	463b      	mov	r3, r7
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	891b      	ldrh	r3, [r3, #8]
 8003cee:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cf2:	463b      	mov	r3, r7
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6959      	ldr	r1, [r3, #20]
 8003cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003d02:	1d38      	adds	r0, r7, #4
 8003d04:	6800      	ldr	r0, [r0, #0]
 8003d06:	f000 ffd1 	bl	8004cac <USB_WritePMA>
            ep->xfer_buff += len;
 8003d0a:	463b      	mov	r3, r7
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d14:	441a      	add	r2, r3
 8003d16:	463b      	mov	r3, r7
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003d1c:	463b      	mov	r3, r7
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6a1a      	ldr	r2, [r3, #32]
 8003d22:	463b      	mov	r3, r7
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d909      	bls.n	8003d40 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6a1a      	ldr	r2, [r3, #32]
 8003d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d36:	1ad2      	subs	r2, r2, r3
 8003d38:	463b      	mov	r3, r7
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	621a      	str	r2, [r3, #32]
 8003d3e:	e008      	b.n	8003d52 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003d40:	463b      	mov	r3, r7
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003d4a:	463b      	mov	r3, r7
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	647b      	str	r3, [r7, #68]	; 0x44
 8003d58:	463b      	mov	r3, r7
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	785b      	ldrb	r3, [r3, #1]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d164      	bne.n	8003e2c <USB_EPStartXfer+0x63c>
 8003d62:	1d3b      	adds	r3, r7, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d76:	4413      	add	r3, r2
 8003d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	011a      	lsls	r2, r3, #4
 8003d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d84:	4413      	add	r3, r2
 8003d86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d112      	bne.n	8003dba <USB_EPStartXfer+0x5ca>
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	801a      	strh	r2, [r3, #0]
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	801a      	strh	r2, [r3, #0]
 8003db8:	e054      	b.n	8003e64 <USB_EPStartXfer+0x674>
 8003dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dbe:	2b3e      	cmp	r3, #62	; 0x3e
 8003dc0:	d817      	bhi.n	8003df2 <USB_EPStartXfer+0x602>
 8003dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <USB_EPStartXfer+0x5f2>
 8003dd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ddc:	3301      	adds	r3, #1
 8003dde:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	029b      	lsls	r3, r3, #10
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dee:	801a      	strh	r2, [r3, #0]
 8003df0:	e038      	b.n	8003e64 <USB_EPStartXfer+0x674>
 8003df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d104      	bne.n	8003e12 <USB_EPStartXfer+0x622>
 8003e08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	029b      	lsls	r3, r3, #10
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	801a      	strh	r2, [r3, #0]
 8003e2a:	e01b      	b.n	8003e64 <USB_EPStartXfer+0x674>
 8003e2c:	463b      	mov	r3, r7
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	785b      	ldrb	r3, [r3, #1]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d116      	bne.n	8003e64 <USB_EPStartXfer+0x674>
 8003e36:	1d3b      	adds	r3, r7, #4
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e44:	4413      	add	r3, r2
 8003e46:	647b      	str	r3, [r7, #68]	; 0x44
 8003e48:	463b      	mov	r3, r7
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	011a      	lsls	r2, r3, #4
 8003e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e52:	4413      	add	r3, r2
 8003e54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e58:	643b      	str	r3, [r7, #64]	; 0x40
 8003e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003e64:	463b      	mov	r3, r7
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	895b      	ldrh	r3, [r3, #10]
 8003e6a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e6e:	463b      	mov	r3, r7
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6959      	ldr	r1, [r3, #20]
 8003e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e7e:	1d38      	adds	r0, r7, #4
 8003e80:	6800      	ldr	r0, [r0, #0]
 8003e82:	f000 ff13 	bl	8004cac <USB_WritePMA>
 8003e86:	e1e2      	b.n	800424e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003e88:	463b      	mov	r3, r7
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003e92:	1d3b      	adds	r3, r7, #4
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	463b      	mov	r3, r7
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eac:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	463b      	mov	r3, r7
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	441a      	add	r2, r3
 8003ebe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	663b      	str	r3, [r7, #96]	; 0x60
 8003edc:	1d3b      	adds	r3, r7, #4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eea:	4413      	add	r3, r2
 8003eec:	663b      	str	r3, [r7, #96]	; 0x60
 8003eee:	463b      	mov	r3, r7
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	011a      	lsls	r2, r3, #4
 8003ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef8:	4413      	add	r3, r2
 8003efa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003f0a:	463b      	mov	r3, r7
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	891b      	ldrh	r3, [r3, #8]
 8003f10:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f14:	463b      	mov	r3, r7
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6959      	ldr	r1, [r3, #20]
 8003f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003f24:	1d38      	adds	r0, r7, #4
 8003f26:	6800      	ldr	r0, [r0, #0]
 8003f28:	f000 fec0 	bl	8004cac <USB_WritePMA>
 8003f2c:	e18f      	b.n	800424e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	463b      	mov	r3, r7
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 808f 	beq.w	8004068 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f50:	463b      	mov	r3, r7
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	785b      	ldrb	r3, [r3, #1]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d164      	bne.n	8004024 <USB_EPStartXfer+0x834>
 8003f5a:	1d3b      	adds	r3, r7, #4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f60:	1d3b      	adds	r3, r7, #4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f6e:	4413      	add	r3, r2
 8003f70:	673b      	str	r3, [r7, #112]	; 0x70
 8003f72:	463b      	mov	r3, r7
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	011a      	lsls	r2, r3, #4
 8003f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d112      	bne.n	8003fb2 <USB_EPStartXfer+0x7c2>
 8003f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9a:	801a      	strh	r2, [r3, #0]
 8003f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	e054      	b.n	800405c <USB_EPStartXfer+0x86c>
 8003fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8003fb8:	d817      	bhi.n	8003fea <USB_EPStartXfer+0x7fa>
 8003fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <USB_EPStartXfer+0x7ea>
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	029b      	lsls	r3, r3, #10
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe6:	801a      	strh	r2, [r3, #0]
 8003fe8:	e038      	b.n	800405c <USB_EPStartXfer+0x86c>
 8003fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d104      	bne.n	800400a <USB_EPStartXfer+0x81a>
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	3b01      	subs	r3, #1
 8004006:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400e:	b29b      	uxth	r3, r3
 8004010:	029b      	lsls	r3, r3, #10
 8004012:	b29b      	uxth	r3, r3
 8004014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800401c:	b29a      	uxth	r2, r3
 800401e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004020:	801a      	strh	r2, [r3, #0]
 8004022:	e01b      	b.n	800405c <USB_EPStartXfer+0x86c>
 8004024:	463b      	mov	r3, r7
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	785b      	ldrb	r3, [r3, #1]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d116      	bne.n	800405c <USB_EPStartXfer+0x86c>
 800402e:	1d3b      	adds	r3, r7, #4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800403c:	4413      	add	r3, r2
 800403e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004040:	463b      	mov	r3, r7
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	011a      	lsls	r2, r3, #4
 8004048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800404a:	4413      	add	r3, r2
 800404c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004050:	677b      	str	r3, [r7, #116]	; 0x74
 8004052:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004056:	b29a      	uxth	r2, r3
 8004058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800405c:	463b      	mov	r3, r7
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	895b      	ldrh	r3, [r3, #10]
 8004062:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004066:	e097      	b.n	8004198 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004068:	463b      	mov	r3, r7
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	785b      	ldrb	r3, [r3, #1]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d168      	bne.n	8004144 <USB_EPStartXfer+0x954>
 8004072:	1d3b      	adds	r3, r7, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800407a:	1d3b      	adds	r3, r7, #4
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004082:	b29b      	uxth	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800408a:	4413      	add	r3, r2
 800408c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004090:	463b      	mov	r3, r7
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	011a      	lsls	r2, r3, #4
 8004098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800409c:	4413      	add	r3, r2
 800409e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d112      	bne.n	80040d2 <USB_EPStartXfer+0x8e2>
 80040ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ba:	801a      	strh	r2, [r3, #0]
 80040bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ce:	801a      	strh	r2, [r3, #0]
 80040d0:	e05d      	b.n	800418e <USB_EPStartXfer+0x99e>
 80040d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d6:	2b3e      	cmp	r3, #62	; 0x3e
 80040d8:	d817      	bhi.n	800410a <USB_EPStartXfer+0x91a>
 80040da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <USB_EPStartXfer+0x90a>
 80040f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040f4:	3301      	adds	r3, #1
 80040f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040fe:	b29b      	uxth	r3, r3
 8004100:	029b      	lsls	r3, r3, #10
 8004102:	b29a      	uxth	r2, r3
 8004104:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004106:	801a      	strh	r2, [r3, #0]
 8004108:	e041      	b.n	800418e <USB_EPStartXfer+0x99e>
 800410a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <USB_EPStartXfer+0x93a>
 8004120:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004124:	3b01      	subs	r3, #1
 8004126:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800412a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800412e:	b29b      	uxth	r3, r3
 8004130:	029b      	lsls	r3, r3, #10
 8004132:	b29b      	uxth	r3, r3
 8004134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800413c:	b29a      	uxth	r2, r3
 800413e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004140:	801a      	strh	r2, [r3, #0]
 8004142:	e024      	b.n	800418e <USB_EPStartXfer+0x99e>
 8004144:	463b      	mov	r3, r7
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	785b      	ldrb	r3, [r3, #1]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d11f      	bne.n	800418e <USB_EPStartXfer+0x99e>
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415e:	b29b      	uxth	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004166:	4413      	add	r3, r2
 8004168:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800416c:	463b      	mov	r3, r7
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	011a      	lsls	r2, r3, #4
 8004174:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004178:	4413      	add	r3, r2
 800417a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800417e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004186:	b29a      	uxth	r2, r3
 8004188:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800418c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800418e:	463b      	mov	r3, r7
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	891b      	ldrh	r3, [r3, #8]
 8004194:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004198:	463b      	mov	r3, r7
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6959      	ldr	r1, [r3, #20]
 800419e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80041a8:	1d38      	adds	r0, r7, #4
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	f000 fd7e 	bl	8004cac <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80041b0:	463b      	mov	r3, r7
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	785b      	ldrb	r3, [r3, #1]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d122      	bne.n	8004200 <USB_EPStartXfer+0xa10>
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	463b      	mov	r3, r7
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80041d8:	1d3b      	adds	r3, r7, #4
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	463b      	mov	r3, r7
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	441a      	add	r2, r3
 80041e6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80041ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	8013      	strh	r3, [r2, #0]
 80041fe:	e026      	b.n	800424e <USB_EPStartXfer+0xa5e>
 8004200:	463b      	mov	r3, r7
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	785b      	ldrb	r3, [r3, #1]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d121      	bne.n	800424e <USB_EPStartXfer+0xa5e>
 800420a:	1d3b      	adds	r3, r7, #4
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	463b      	mov	r3, r7
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004228:	1d3b      	adds	r3, r7, #4
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	463b      	mov	r3, r7
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	441a      	add	r2, r3
 8004236:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800423a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004242:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424a:	b29b      	uxth	r3, r3
 800424c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800424e:	1d3b      	adds	r3, r7, #4
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	463b      	mov	r3, r7
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f107 020e 	add.w	r2, r7, #14
 8004264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426c:	8013      	strh	r3, [r2, #0]
 800426e:	f107 030e 	add.w	r3, r7, #14
 8004272:	f107 020e 	add.w	r2, r7, #14
 8004276:	8812      	ldrh	r2, [r2, #0]
 8004278:	f082 0210 	eor.w	r2, r2, #16
 800427c:	801a      	strh	r2, [r3, #0]
 800427e:	f107 030e 	add.w	r3, r7, #14
 8004282:	f107 020e 	add.w	r2, r7, #14
 8004286:	8812      	ldrh	r2, [r2, #0]
 8004288:	f082 0220 	eor.w	r2, r2, #32
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	1d3b      	adds	r3, r7, #4
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	463b      	mov	r3, r7
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	441a      	add	r2, r3
 800429c:	f107 030e 	add.w	r3, r7, #14
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	8013      	strh	r3, [r2, #0]
 80042b6:	e3b5      	b.n	8004a24 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80042b8:	463b      	mov	r3, r7
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	7b1b      	ldrb	r3, [r3, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f040 8090 	bne.w	80043e4 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80042c4:	463b      	mov	r3, r7
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	463b      	mov	r3, r7
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d90e      	bls.n	80042f2 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80042d4:	463b      	mov	r3, r7
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80042de:	463b      	mov	r3, r7
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699a      	ldr	r2, [r3, #24]
 80042e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e8:	1ad2      	subs	r2, r2, r3
 80042ea:	463b      	mov	r3, r7
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	619a      	str	r2, [r3, #24]
 80042f0:	e008      	b.n	8004304 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80042f2:	463b      	mov	r3, r7
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80042fc:	463b      	mov	r3, r7
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2200      	movs	r2, #0
 8004302:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004304:	1d3b      	adds	r3, r7, #4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800430c:	1d3b      	adds	r3, r7, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004314:	b29b      	uxth	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800431c:	4413      	add	r3, r2
 800431e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004322:	463b      	mov	r3, r7
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	011a      	lsls	r2, r3, #4
 800432a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800432e:	4413      	add	r3, r2
 8004330:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004334:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d116      	bne.n	800436e <USB_EPStartXfer+0xb7e>
 8004340:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800434c:	b29a      	uxth	r2, r3
 800434e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004352:	801a      	strh	r2, [r3, #0]
 8004354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29b      	uxth	r3, r3
 800435c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004364:	b29a      	uxth	r2, r3
 8004366:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	e32c      	b.n	80049c8 <USB_EPStartXfer+0x11d8>
 800436e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004372:	2b3e      	cmp	r3, #62	; 0x3e
 8004374:	d818      	bhi.n	80043a8 <USB_EPStartXfer+0xbb8>
 8004376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d004      	beq.n	8004396 <USB_EPStartXfer+0xba6>
 800438c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004390:	3301      	adds	r3, #1
 8004392:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004396:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800439a:	b29b      	uxth	r3, r3
 800439c:	029b      	lsls	r3, r3, #10
 800439e:	b29a      	uxth	r2, r3
 80043a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043a4:	801a      	strh	r2, [r3, #0]
 80043a6:	e30f      	b.n	80049c8 <USB_EPStartXfer+0x11d8>
 80043a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d104      	bne.n	80043c8 <USB_EPStartXfer+0xbd8>
 80043be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043c2:	3b01      	subs	r3, #1
 80043c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	029b      	lsls	r3, r3, #10
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043da:	b29a      	uxth	r2, r3
 80043dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043e0:	801a      	strh	r2, [r3, #0]
 80043e2:	e2f1      	b.n	80049c8 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80043e4:	463b      	mov	r3, r7
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	78db      	ldrb	r3, [r3, #3]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	f040 818f 	bne.w	800470e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80043f0:	463b      	mov	r3, r7
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d175      	bne.n	80044e6 <USB_EPStartXfer+0xcf6>
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004402:	1d3b      	adds	r3, r7, #4
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800440a:	b29b      	uxth	r3, r3
 800440c:	461a      	mov	r2, r3
 800440e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004412:	4413      	add	r3, r2
 8004414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004418:	463b      	mov	r3, r7
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	011a      	lsls	r2, r3, #4
 8004420:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004424:	4413      	add	r3, r2
 8004426:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800442a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800442e:	463b      	mov	r3, r7
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d116      	bne.n	8004466 <USB_EPStartXfer+0xc76>
 8004438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004444:	b29a      	uxth	r2, r3
 8004446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800444a:	801a      	strh	r2, [r3, #0]
 800444c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800445c:	b29a      	uxth	r2, r3
 800445e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004462:	801a      	strh	r2, [r3, #0]
 8004464:	e065      	b.n	8004532 <USB_EPStartXfer+0xd42>
 8004466:	463b      	mov	r3, r7
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b3e      	cmp	r3, #62	; 0x3e
 800446e:	d81a      	bhi.n	80044a6 <USB_EPStartXfer+0xcb6>
 8004470:	463b      	mov	r3, r7
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800447c:	463b      	mov	r3, r7
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <USB_EPStartXfer+0xca4>
 800448a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800448e:	3301      	adds	r3, #1
 8004490:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004494:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004498:	b29b      	uxth	r3, r3
 800449a:	029b      	lsls	r3, r3, #10
 800449c:	b29a      	uxth	r2, r3
 800449e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	e045      	b.n	8004532 <USB_EPStartXfer+0xd42>
 80044a6:	463b      	mov	r3, r7
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044b2:	463b      	mov	r3, r7
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d104      	bne.n	80044ca <USB_EPStartXfer+0xcda>
 80044c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044c4:	3b01      	subs	r3, #1
 80044c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	029b      	lsls	r3, r3, #10
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044dc:	b29a      	uxth	r2, r3
 80044de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	e025      	b.n	8004532 <USB_EPStartXfer+0xd42>
 80044e6:	463b      	mov	r3, r7
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d120      	bne.n	8004532 <USB_EPStartXfer+0xd42>
 80044f0:	1d3b      	adds	r3, r7, #4
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044f8:	1d3b      	adds	r3, r7, #4
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004500:	b29b      	uxth	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004508:	4413      	add	r3, r2
 800450a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800450e:	463b      	mov	r3, r7
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	011a      	lsls	r2, r3, #4
 8004516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800451a:	4413      	add	r3, r2
 800451c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004524:	463b      	mov	r3, r7
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	b29a      	uxth	r2, r3
 800452c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004530:	801a      	strh	r2, [r3, #0]
 8004532:	1d3b      	adds	r3, r7, #4
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800453a:	463b      	mov	r3, r7
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d175      	bne.n	8004630 <USB_EPStartXfer+0xe40>
 8004544:	1d3b      	adds	r3, r7, #4
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800454c:	1d3b      	adds	r3, r7, #4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004554:	b29b      	uxth	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800455c:	4413      	add	r3, r2
 800455e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004562:	463b      	mov	r3, r7
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	011a      	lsls	r2, r3, #4
 800456a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800456e:	4413      	add	r3, r2
 8004570:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004578:	463b      	mov	r3, r7
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d116      	bne.n	80045b0 <USB_EPStartXfer+0xdc0>
 8004582:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800458e:	b29a      	uxth	r2, r3
 8004590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004594:	801a      	strh	r2, [r3, #0]
 8004596:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b29b      	uxth	r3, r3
 800459e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045ac:	801a      	strh	r2, [r3, #0]
 80045ae:	e061      	b.n	8004674 <USB_EPStartXfer+0xe84>
 80045b0:	463b      	mov	r3, r7
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b3e      	cmp	r3, #62	; 0x3e
 80045b8:	d81a      	bhi.n	80045f0 <USB_EPStartXfer+0xe00>
 80045ba:	463b      	mov	r3, r7
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045c6:	463b      	mov	r3, r7
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d004      	beq.n	80045de <USB_EPStartXfer+0xdee>
 80045d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d8:	3301      	adds	r3, #1
 80045da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	029b      	lsls	r3, r3, #10
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045ec:	801a      	strh	r2, [r3, #0]
 80045ee:	e041      	b.n	8004674 <USB_EPStartXfer+0xe84>
 80045f0:	463b      	mov	r3, r7
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045fc:	463b      	mov	r3, r7
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	2b00      	cmp	r3, #0
 8004608:	d104      	bne.n	8004614 <USB_EPStartXfer+0xe24>
 800460a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460e:	3b01      	subs	r3, #1
 8004610:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004618:	b29b      	uxth	r3, r3
 800461a:	029b      	lsls	r3, r3, #10
 800461c:	b29b      	uxth	r3, r3
 800461e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004626:	b29a      	uxth	r2, r3
 8004628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800462c:	801a      	strh	r2, [r3, #0]
 800462e:	e021      	b.n	8004674 <USB_EPStartXfer+0xe84>
 8004630:	463b      	mov	r3, r7
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d11c      	bne.n	8004674 <USB_EPStartXfer+0xe84>
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004642:	b29b      	uxth	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800464a:	4413      	add	r3, r2
 800464c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004650:	463b      	mov	r3, r7
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	011a      	lsls	r2, r3, #4
 8004658:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800465c:	4413      	add	r3, r2
 800465e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004666:	463b      	mov	r3, r7
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	b29a      	uxth	r2, r3
 800466e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004672:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004674:	463b      	mov	r3, r7
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 81a4 	beq.w	80049c8 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004680:	1d3b      	adds	r3, r7, #4
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	463b      	mov	r3, r7
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004694:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <USB_EPStartXfer+0xebc>
 80046a0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10d      	bne.n	80046c8 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80046ac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f040 8187 	bne.w	80049c8 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80046ba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f040 8180 	bne.w	80049c8 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80046c8:	1d3b      	adds	r3, r7, #4
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	463b      	mov	r3, r7
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80046e6:	1d3b      	adds	r3, r7, #4
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	463b      	mov	r3, r7
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	441a      	add	r2, r3
 80046f4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80046f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004704:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004708:	b29b      	uxth	r3, r3
 800470a:	8013      	strh	r3, [r2, #0]
 800470c:	e15c      	b.n	80049c8 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800470e:	463b      	mov	r3, r7
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	78db      	ldrb	r3, [r3, #3]
 8004714:	2b01      	cmp	r3, #1
 8004716:	f040 8155 	bne.w	80049c4 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800471a:	463b      	mov	r3, r7
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	463b      	mov	r3, r7
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	429a      	cmp	r2, r3
 8004728:	d90e      	bls.n	8004748 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800472a:	463b      	mov	r3, r7
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004734:	463b      	mov	r3, r7
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800473e:	1ad2      	subs	r2, r2, r3
 8004740:	463b      	mov	r3, r7
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	619a      	str	r2, [r3, #24]
 8004746:	e008      	b.n	800475a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004748:	463b      	mov	r3, r7
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004752:	463b      	mov	r3, r7
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2200      	movs	r2, #0
 8004758:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800475a:	463b      	mov	r3, r7
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	785b      	ldrb	r3, [r3, #1]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d16f      	bne.n	8004844 <USB_EPStartXfer+0x1054>
 8004764:	1d3b      	adds	r3, r7, #4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800476c:	1d3b      	adds	r3, r7, #4
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004774:	b29b      	uxth	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800477c:	4413      	add	r3, r2
 800477e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004782:	463b      	mov	r3, r7
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	011a      	lsls	r2, r3, #4
 800478a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800478e:	4413      	add	r3, r2
 8004790:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d116      	bne.n	80047ce <USB_EPStartXfer+0xfde>
 80047a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047b2:	801a      	strh	r2, [r3, #0]
 80047b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047ca:	801a      	strh	r2, [r3, #0]
 80047cc:	e05f      	b.n	800488e <USB_EPStartXfer+0x109e>
 80047ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d2:	2b3e      	cmp	r3, #62	; 0x3e
 80047d4:	d818      	bhi.n	8004808 <USB_EPStartXfer+0x1018>
 80047d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <USB_EPStartXfer+0x1006>
 80047ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f0:	3301      	adds	r3, #1
 80047f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	029b      	lsls	r3, r3, #10
 80047fe:	b29a      	uxth	r2, r3
 8004800:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004804:	801a      	strh	r2, [r3, #0]
 8004806:	e042      	b.n	800488e <USB_EPStartXfer+0x109e>
 8004808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2b00      	cmp	r3, #0
 800481c:	d104      	bne.n	8004828 <USB_EPStartXfer+0x1038>
 800481e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004822:	3b01      	subs	r3, #1
 8004824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482c:	b29b      	uxth	r3, r3
 800482e:	029b      	lsls	r3, r3, #10
 8004830:	b29b      	uxth	r3, r3
 8004832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800483a:	b29a      	uxth	r2, r3
 800483c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004840:	801a      	strh	r2, [r3, #0]
 8004842:	e024      	b.n	800488e <USB_EPStartXfer+0x109e>
 8004844:	463b      	mov	r3, r7
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	785b      	ldrb	r3, [r3, #1]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d11f      	bne.n	800488e <USB_EPStartXfer+0x109e>
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004856:	1d3b      	adds	r3, r7, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485e:	b29b      	uxth	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004866:	4413      	add	r3, r2
 8004868:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800486c:	463b      	mov	r3, r7
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	011a      	lsls	r2, r3, #4
 8004874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004878:	4413      	add	r3, r2
 800487a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800487e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004886:	b29a      	uxth	r2, r3
 8004888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	1d3b      	adds	r3, r7, #4
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004896:	463b      	mov	r3, r7
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	785b      	ldrb	r3, [r3, #1]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d16f      	bne.n	8004980 <USB_EPStartXfer+0x1190>
 80048a0:	1d3b      	adds	r3, r7, #4
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048a8:	1d3b      	adds	r3, r7, #4
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048b8:	4413      	add	r3, r2
 80048ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048be:	463b      	mov	r3, r7
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	011a      	lsls	r2, r3, #4
 80048c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048ca:	4413      	add	r3, r2
 80048cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80048d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d116      	bne.n	800490a <USB_EPStartXfer+0x111a>
 80048dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048ee:	801a      	strh	r2, [r3, #0]
 80048f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004900:	b29a      	uxth	r2, r3
 8004902:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004906:	801a      	strh	r2, [r3, #0]
 8004908:	e05e      	b.n	80049c8 <USB_EPStartXfer+0x11d8>
 800490a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490e:	2b3e      	cmp	r3, #62	; 0x3e
 8004910:	d818      	bhi.n	8004944 <USB_EPStartXfer+0x1154>
 8004912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800491c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <USB_EPStartXfer+0x1142>
 8004928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800492c:	3301      	adds	r3, #1
 800492e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004936:	b29b      	uxth	r3, r3
 8004938:	029b      	lsls	r3, r3, #10
 800493a:	b29a      	uxth	r2, r3
 800493c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004940:	801a      	strh	r2, [r3, #0]
 8004942:	e041      	b.n	80049c8 <USB_EPStartXfer+0x11d8>
 8004944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800494e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <USB_EPStartXfer+0x1174>
 800495a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800495e:	3b01      	subs	r3, #1
 8004960:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004968:	b29b      	uxth	r3, r3
 800496a:	029b      	lsls	r3, r3, #10
 800496c:	b29b      	uxth	r3, r3
 800496e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004976:	b29a      	uxth	r2, r3
 8004978:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800497c:	801a      	strh	r2, [r3, #0]
 800497e:	e023      	b.n	80049c8 <USB_EPStartXfer+0x11d8>
 8004980:	463b      	mov	r3, r7
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d11e      	bne.n	80049c8 <USB_EPStartXfer+0x11d8>
 800498a:	1d3b      	adds	r3, r7, #4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004992:	b29b      	uxth	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800499a:	4413      	add	r3, r2
 800499c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049a0:	463b      	mov	r3, r7
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	011a      	lsls	r2, r3, #4
 80049a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049ac:	4413      	add	r3, r2
 80049ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	e001      	b.n	80049c8 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e02e      	b.n	8004a26 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049c8:	1d3b      	adds	r3, r7, #4
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	463b      	mov	r3, r7
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80049e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049ee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80049f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	463b      	mov	r3, r7
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d020      	beq.n	8004a84 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a58:	81bb      	strh	r3, [r7, #12]
 8004a5a:	89bb      	ldrh	r3, [r7, #12]
 8004a5c:	f083 0310 	eor.w	r3, r3, #16
 8004a60:	81bb      	strh	r3, [r7, #12]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	441a      	add	r2, r3
 8004a6c:	89bb      	ldrh	r3, [r7, #12]
 8004a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	8013      	strh	r3, [r2, #0]
 8004a82:	e01f      	b.n	8004ac4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9a:	81fb      	strh	r3, [r7, #14]
 8004a9c:	89fb      	ldrh	r3, [r7, #14]
 8004a9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004aa2:	81fb      	strh	r3, [r7, #14]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	441a      	add	r2, r3
 8004aae:	89fb      	ldrh	r3, [r7, #14]
 8004ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr

08004ad0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	7b1b      	ldrb	r3, [r3, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f040 809d 	bne.w	8004c1e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	785b      	ldrb	r3, [r3, #1]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d04c      	beq.n	8004b86 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	823b      	strh	r3, [r7, #16]
 8004afa:	8a3b      	ldrh	r3, [r7, #16]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01b      	beq.n	8004b3c <USB_EPClearStall+0x6c>
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	81fb      	strh	r3, [r7, #14]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	78db      	ldrb	r3, [r3, #3]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d06c      	beq.n	8004c1e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5a:	81bb      	strh	r3, [r7, #12]
 8004b5c:	89bb      	ldrh	r3, [r7, #12]
 8004b5e:	f083 0320 	eor.w	r3, r3, #32
 8004b62:	81bb      	strh	r3, [r7, #12]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	441a      	add	r2, r3
 8004b6e:	89bb      	ldrh	r3, [r7, #12]
 8004b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	8013      	strh	r3, [r2, #0]
 8004b84:	e04b      	b.n	8004c1e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	82fb      	strh	r3, [r7, #22]
 8004b94:	8afb      	ldrh	r3, [r7, #22]
 8004b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01b      	beq.n	8004bd6 <USB_EPClearStall+0x106>
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb4:	82bb      	strh	r3, [r7, #20]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	441a      	add	r2, r3
 8004bc0:	8abb      	ldrh	r3, [r7, #20]
 8004bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	827b      	strh	r3, [r7, #18]
 8004bee:	8a7b      	ldrh	r3, [r7, #18]
 8004bf0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bf4:	827b      	strh	r3, [r7, #18]
 8004bf6:	8a7b      	ldrh	r3, [r7, #18]
 8004bf8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bfc:	827b      	strh	r3, [r7, #18]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	8a7b      	ldrh	r3, [r7, #18]
 8004c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr

08004c2a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d103      	bne.n	8004c44 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2280      	movs	r2, #128	; 0x80
 8004c40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr

08004c50 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr

08004c64 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr

08004c78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b08d      	sub	sp, #52	; 0x34
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	461a      	mov	r2, r3
 8004cba:	460b      	mov	r3, r1
 8004cbc:	80fb      	strh	r3, [r7, #6]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004cc2:	88bb      	ldrh	r3, [r7, #4]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	085b      	lsrs	r3, r3, #1
 8004cc8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	005a      	lsls	r2, r3, #1
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cde:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce4:	e01e      	b.n	8004d24 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	3301      	adds	r3, #1
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	3302      	adds	r3, #2
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	3302      	adds	r3, #2
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	3b01      	subs	r3, #1
 8004d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1dd      	bne.n	8004ce6 <USB_WritePMA+0x3a>
  }
}
 8004d2a:	bf00      	nop
 8004d2c:	3734      	adds	r7, #52	; 0x34
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b08b      	sub	sp, #44	; 0x2c
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	4611      	mov	r1, r2
 8004d40:	461a      	mov	r2, r3
 8004d42:	460b      	mov	r3, r1
 8004d44:	80fb      	strh	r3, [r7, #6]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004d4a:	88bb      	ldrh	r3, [r7, #4]
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	005a      	lsls	r2, r3, #1
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d66:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6c:	e01b      	b.n	8004da6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	3302      	adds	r3, #2
 8004d7a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	3301      	adds	r3, #1
 8004d88:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	0a1b      	lsrs	r3, r3, #8
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	3301      	adds	r3, #1
 8004d98:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	3b01      	subs	r3, #1
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e0      	bne.n	8004d6e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004dac:	88bb      	ldrh	r3, [r7, #4]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	701a      	strb	r2, [r3, #0]
  }
}
 8004dc8:	bf00      	nop
 8004dca:	372c      	adds	r7, #44	; 0x2c
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	4770      	bx	lr

08004dd2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	7c1b      	ldrb	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d115      	bne.n	8004e16 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dee:	2202      	movs	r2, #2
 8004df0:	2181      	movs	r1, #129	; 0x81
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f004 fcc5 	bl	8009782 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e02:	2202      	movs	r2, #2
 8004e04:	2101      	movs	r1, #1
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f004 fcbb 	bl	8009782 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004e14:	e012      	b.n	8004e3c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e16:	2340      	movs	r3, #64	; 0x40
 8004e18:	2202      	movs	r2, #2
 8004e1a:	2181      	movs	r1, #129	; 0x81
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f004 fcb0 	bl	8009782 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e28:	2340      	movs	r3, #64	; 0x40
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f004 fca7 	bl	8009782 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e3c:	2308      	movs	r3, #8
 8004e3e:	2203      	movs	r2, #3
 8004e40:	2182      	movs	r1, #130	; 0x82
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f004 fc9d 	bl	8009782 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e4e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e52:	f004 fdbd 	bl	80099d0 <USBD_static_malloc>
 8004e56:	4602      	mov	r2, r0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d102      	bne.n	8004e6e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
 8004e6c:	e026      	b.n	8004ebc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e74:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	7c1b      	ldrb	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d109      	bne.n	8004eac <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f004 fd5d 	bl	8009964 <USBD_LL_PrepareReceive>
 8004eaa:	e007      	b.n	8004ebc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004eb2:	2340      	movs	r3, #64	; 0x40
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f004 fd54 	bl	8009964 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004ed6:	2181      	movs	r1, #129	; 0x81
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f004 fc78 	bl	80097ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f004 fc71 	bl	80097ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004ef4:	2182      	movs	r1, #130	; 0x82
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f004 fc69 	bl	80097ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00e      	beq.n	8004f2a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f004 fd63 	bl	80099e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f44:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d039      	beq.n	8004fd2 <USBD_CDC_Setup+0x9e>
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	d17c      	bne.n	800505c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	88db      	ldrh	r3, [r3, #6]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d029      	beq.n	8004fbe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b25b      	sxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	da11      	bge.n	8004f98 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004f80:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	88d2      	ldrh	r2, [r2, #6]
 8004f86:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f88:	6939      	ldr	r1, [r7, #16]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	88db      	ldrh	r3, [r3, #6]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f001 f9f9 	bl	8006388 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004f96:	e068      	b.n	800506a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	785a      	ldrb	r2, [r3, #1]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	88db      	ldrh	r3, [r3, #6]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004fae:	6939      	ldr	r1, [r7, #16]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	88db      	ldrh	r3, [r3, #6]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f001 fa14 	bl	80063e4 <USBD_CtlPrepareRx>
      break;
 8004fbc:	e055      	b.n	800506a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	7850      	ldrb	r0, [r2, #1]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	4798      	blx	r3
      break;
 8004fd0:	e04b      	b.n	800506a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	785b      	ldrb	r3, [r3, #1]
 8004fd6:	2b0a      	cmp	r3, #10
 8004fd8:	d017      	beq.n	800500a <USBD_CDC_Setup+0xd6>
 8004fda:	2b0b      	cmp	r3, #11
 8004fdc:	d029      	beq.n	8005032 <USBD_CDC_Setup+0xfe>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d133      	bne.n	800504a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d107      	bne.n	8004ffc <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004fec:	f107 030c 	add.w	r3, r7, #12
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f001 f9c7 	bl	8006388 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ffa:	e02e      	b.n	800505a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004ffc:	6839      	ldr	r1, [r7, #0]
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f001 f958 	bl	80062b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005004:	2302      	movs	r3, #2
 8005006:	75fb      	strb	r3, [r7, #23]
          break;
 8005008:	e027      	b.n	800505a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005010:	2b03      	cmp	r3, #3
 8005012:	d107      	bne.n	8005024 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005014:	f107 030f 	add.w	r3, r7, #15
 8005018:	2201      	movs	r2, #1
 800501a:	4619      	mov	r1, r3
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f001 f9b3 	bl	8006388 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005022:	e01a      	b.n	800505a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 f944 	bl	80062b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800502c:	2302      	movs	r3, #2
 800502e:	75fb      	strb	r3, [r7, #23]
          break;
 8005030:	e013      	b.n	800505a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005038:	2b03      	cmp	r3, #3
 800503a:	d00d      	beq.n	8005058 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f001 f938 	bl	80062b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005044:	2302      	movs	r3, #2
 8005046:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005048:	e006      	b.n	8005058 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800504a:	6839      	ldr	r1, [r7, #0]
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 f931 	bl	80062b4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005052:	2302      	movs	r3, #2
 8005054:	75fb      	strb	r3, [r7, #23]
          break;
 8005056:	e000      	b.n	800505a <USBD_CDC_Setup+0x126>
          break;
 8005058:	bf00      	nop
      }
      break;
 800505a:	e006      	b.n	800506a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800505c:	6839      	ldr	r1, [r7, #0]
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f001 f928 	bl	80062b4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005064:	2302      	movs	r3, #2
 8005066:	75fb      	strb	r3, [r7, #23]
      break;
 8005068:	bf00      	nop
  }

  return ret;
 800506a:	7dfb      	ldrb	r3, [r7, #23]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005086:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800508e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d03a      	beq.n	8005110 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800509a:	78fa      	ldrb	r2, [r7, #3]
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	331c      	adds	r3, #28
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d029      	beq.n	8005104 <USBD_CDC_DataIn+0x90>
 80050b0:	78fa      	ldrb	r2, [r7, #3]
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	331c      	adds	r3, #28
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	78f9      	ldrb	r1, [r7, #3]
 80050c4:	68b8      	ldr	r0, [r7, #8]
 80050c6:	460b      	mov	r3, r1
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	4403      	add	r3, r0
 80050d0:	3338      	adds	r3, #56	; 0x38
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80050d8:	fb03 f301 	mul.w	r3, r3, r1
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d110      	bne.n	8005104 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80050e2:	78fa      	ldrb	r2, [r7, #3]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	331c      	adds	r3, #28
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050f6:	78f9      	ldrb	r1, [r7, #3]
 80050f8:	2300      	movs	r3, #0
 80050fa:	2200      	movs	r2, #0
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f004 fc0e 	bl	800991e <USBD_LL_Transmit>
 8005102:	e003      	b.n	800510c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	e000      	b.n	8005112 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005110:	2302      	movs	r3, #2
  }
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	460b      	mov	r3, r1
 8005124:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800512c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f004 fc39 	bl	80099aa <USBD_LL_GetRxDataSize>
 8005138:	4602      	mov	r2, r0
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00d      	beq.n	8005166 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800515e:	4611      	mov	r1, r2
 8005160:	4798      	blx	r3

    return USBD_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	e000      	b.n	8005168 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005166:	2302      	movs	r3, #2
  }
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800517e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005186:	2b00      	cmp	r3, #0
 8005188:	d015      	beq.n	80051b6 <USBD_CDC_EP0_RxReady+0x46>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005190:	2bff      	cmp	r3, #255	; 0xff
 8005192:	d010      	beq.n	80051b6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80051a2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051aa:	b292      	uxth	r2, r2
 80051ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	22ff      	movs	r2, #255	; 0xff
 80051b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2243      	movs	r2, #67	; 0x43
 80051cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80051ce:	4b03      	ldr	r3, [pc, #12]	; (80051dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000094 	.word	0x20000094

080051e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2243      	movs	r2, #67	; 0x43
 80051ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80051ee:	4b03      	ldr	r3, [pc, #12]	; (80051fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000050 	.word	0x20000050

08005200 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2243      	movs	r2, #67	; 0x43
 800520c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800520e:	4b03      	ldr	r3, [pc, #12]	; (800521c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005210:	4618      	mov	r0, r3
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	200000d8 	.word	0x200000d8

08005220 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	220a      	movs	r2, #10
 800522c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800522e:	4b03      	ldr	r3, [pc, #12]	; (800523c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	2000000c 	.word	0x2000000c

08005240 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800524a:	2302      	movs	r3, #2
 800524c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr

0800526c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005280:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01c      	beq.n	8005318 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d115      	bne.n	8005314 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005306:	b29b      	uxth	r3, r3
 8005308:	2181      	movs	r1, #129	; 0x81
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f004 fb07 	bl	800991e <USBD_LL_Transmit>

      return USBD_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	e002      	b.n	800531a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005314:	2301      	movs	r3, #1
 8005316:	e000      	b.n	800531a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005318:	2302      	movs	r3, #2
  }
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005330:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d017      	beq.n	800536c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	7c1b      	ldrb	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d109      	bne.n	8005358 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800534a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800534e:	2101      	movs	r1, #1
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f004 fb07 	bl	8009964 <USBD_LL_PrepareReceive>
 8005356:	e007      	b.n	8005368 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800535e:	2340      	movs	r3, #64	; 0x40
 8005360:	2101      	movs	r1, #1
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f004 fafe 	bl	8009964 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	e000      	b.n	800536e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800536c:	2302      	movs	r3, #2
  }
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	4613      	mov	r3, r2
 8005382:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800538a:	2302      	movs	r3, #2
 800538c:	e01a      	b.n	80053c4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	79fa      	ldrb	r2, [r7, #7]
 80053ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f004 f96b 	bl	8009698 <USBD_LL_Init>

  return USBD_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d006      	beq.n	80053ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	73fb      	strb	r3, [r7, #15]
 80053ec:	e001      	b.n	80053f2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80053ee:	2302      	movs	r3, #2
 80053f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr

080053fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f004 f9a0 	bl	800974c <USBD_LL_Start>

  return USBD_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr

0800542a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	460b      	mov	r3, r1
 8005434:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005436:	2302      	movs	r3, #2
 8005438:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00c      	beq.n	800545e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	78fa      	ldrb	r2, [r7, #3]
 800544e:	4611      	mov	r1, r2
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	4798      	blx	r3
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800545e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	78fa      	ldrb	r2, [r7, #3]
 800547e:	4611      	mov	r1, r2
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	4798      	blx	r3

  return USBD_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b082      	sub	sp, #8
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800549e:	6839      	ldr	r1, [r7, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fecb 	bl	800623c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054b4:	461a      	mov	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d00c      	beq.n	80054e4 <USBD_LL_SetupStage+0x56>
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d302      	bcc.n	80054d4 <USBD_LL_SetupStage+0x46>
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d010      	beq.n	80054f4 <USBD_LL_SetupStage+0x66>
 80054d2:	e017      	b.n	8005504 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054da:	4619      	mov	r1, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f9cb 	bl	8005878 <USBD_StdDevReq>
      break;
 80054e2:	e01a      	b.n	800551a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054ea:	4619      	mov	r1, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa2d 	bl	800594c <USBD_StdItfReq>
      break;
 80054f2:	e012      	b.n	800551a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fa6b 	bl	80059d8 <USBD_StdEPReq>
      break;
 8005502:	e00a      	b.n	800551a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800550a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800550e:	b2db      	uxtb	r3, r3
 8005510:	4619      	mov	r1, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f004 f97a 	bl	800980c <USBD_LL_StallEP>
      break;
 8005518:	bf00      	nop
  }

  return USBD_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	460b      	mov	r3, r1
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005532:	7afb      	ldrb	r3, [r7, #11]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d14b      	bne.n	80055d0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800553e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005546:	2b03      	cmp	r3, #3
 8005548:	d134      	bne.n	80055b4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	429a      	cmp	r2, r3
 8005554:	d919      	bls.n	800558a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	1ad2      	subs	r2, r2, r3
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800556c:	429a      	cmp	r2, r3
 800556e:	d203      	bcs.n	8005578 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005574:	b29b      	uxth	r3, r3
 8005576:	e002      	b.n	800557e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800557c:	b29b      	uxth	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 ff4c 	bl	8006420 <USBD_CtlContinueRx>
 8005588:	e038      	b.n	80055fc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800559c:	2b03      	cmp	r3, #3
 800559e:	d105      	bne.n	80055ac <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 ff49 	bl	8006444 <USBD_CtlSendStatus>
 80055b2:	e023      	b.n	80055fc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055ba:	2b05      	cmp	r3, #5
 80055bc:	d11e      	bne.n	80055fc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80055c6:	2100      	movs	r1, #0
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f004 f91f 	bl	800980c <USBD_LL_StallEP>
 80055ce:	e015      	b.n	80055fc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00d      	beq.n	80055f8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d108      	bne.n	80055f8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	7afa      	ldrb	r2, [r7, #11]
 80055f0:	4611      	mov	r1, r2
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	4798      	blx	r3
 80055f6:	e001      	b.n	80055fc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80055f8:	2302      	movs	r3, #2
 80055fa:	e000      	b.n	80055fe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	460b      	mov	r3, r1
 8005610:	607a      	str	r2, [r7, #4]
 8005612:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005614:	7afb      	ldrb	r3, [r7, #11]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d17f      	bne.n	800571a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3314      	adds	r3, #20
 800561e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005626:	2b02      	cmp	r3, #2
 8005628:	d15c      	bne.n	80056e4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	429a      	cmp	r2, r3
 8005634:	d915      	bls.n	8005662 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	1ad2      	subs	r2, r2, r3
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	b29b      	uxth	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 feb6 	bl	80063c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005654:	2300      	movs	r3, #0
 8005656:	2200      	movs	r2, #0
 8005658:	2100      	movs	r1, #0
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f004 f982 	bl	8009964 <USBD_LL_PrepareReceive>
 8005660:	e04e      	b.n	8005700 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	6912      	ldr	r2, [r2, #16]
 800566a:	fbb3 f1f2 	udiv	r1, r3, r2
 800566e:	fb02 f201 	mul.w	r2, r2, r1
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d11c      	bne.n	80056b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005680:	429a      	cmp	r2, r3
 8005682:	d316      	bcc.n	80056b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800568e:	429a      	cmp	r2, r3
 8005690:	d20f      	bcs.n	80056b2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005692:	2200      	movs	r2, #0
 8005694:	2100      	movs	r1, #0
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fe92 	bl	80063c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056a4:	2300      	movs	r3, #0
 80056a6:	2200      	movs	r2, #0
 80056a8:	2100      	movs	r1, #0
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f004 f95a 	bl	8009964 <USBD_LL_PrepareReceive>
 80056b0:	e026      	b.n	8005700 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d105      	bne.n	80056d4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80056d4:	2180      	movs	r1, #128	; 0x80
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f004 f898 	bl	800980c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 fec4 	bl	800646a <USBD_CtlReceiveStatus>
 80056e2:	e00d      	b.n	8005700 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d004      	beq.n	80056f8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d103      	bne.n	8005700 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80056f8:	2180      	movs	r1, #128	; 0x80
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f004 f886 	bl	800980c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005706:	2b01      	cmp	r3, #1
 8005708:	d11d      	bne.n	8005746 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f7ff fe83 	bl	8005416 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005718:	e015      	b.n	8005746 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00d      	beq.n	8005742 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800572c:	2b03      	cmp	r3, #3
 800572e:	d108      	bne.n	8005742 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	7afa      	ldrb	r2, [r7, #11]
 800573a:	4611      	mov	r1, r2
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	4798      	blx	r3
 8005740:	e001      	b.n	8005746 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005742:	2302      	movs	r3, #2
 8005744:	e000      	b.n	8005748 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005758:	2340      	movs	r3, #64	; 0x40
 800575a:	2200      	movs	r2, #0
 800575c:	2100      	movs	r1, #0
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f004 f80f 	bl	8009782 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2240      	movs	r2, #64	; 0x40
 8005770:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005774:	2340      	movs	r3, #64	; 0x40
 8005776:	2200      	movs	r2, #0
 8005778:	2180      	movs	r1, #128	; 0x80
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f004 f801 	bl	8009782 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2240      	movs	r2, #64	; 0x40
 800578a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d009      	beq.n	80057c8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6852      	ldr	r2, [r2, #4]
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	4611      	mov	r1, r2
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	4798      	blx	r3
  }

  return USBD_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	460b      	mov	r3, r1
 80057dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	78fa      	ldrb	r2, [r7, #3]
 80057e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2204      	movs	r2, #4
 8005808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr

08005818 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005826:	2b04      	cmp	r3, #4
 8005828:	d105      	bne.n	8005836 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005850:	2b03      	cmp	r3, #3
 8005852:	d10b      	bne.n	800586c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800588e:	2b20      	cmp	r3, #32
 8005890:	d004      	beq.n	800589c <USBD_StdDevReq+0x24>
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d002      	beq.n	800589c <USBD_StdDevReq+0x24>
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <USBD_StdDevReq+0x34>
 800589a:	e04c      	b.n	8005936 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
      break;
 80058aa:	e049      	b.n	8005940 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b09      	cmp	r3, #9
 80058b2:	d83a      	bhi.n	800592a <USBD_StdDevReq+0xb2>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <USBD_StdDevReq+0x44>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	0800590d 	.word	0x0800590d
 80058c0:	08005921 	.word	0x08005921
 80058c4:	0800592b 	.word	0x0800592b
 80058c8:	08005917 	.word	0x08005917
 80058cc:	0800592b 	.word	0x0800592b
 80058d0:	080058ef 	.word	0x080058ef
 80058d4:	080058e5 	.word	0x080058e5
 80058d8:	0800592b 	.word	0x0800592b
 80058dc:	08005903 	.word	0x08005903
 80058e0:	080058f9 	.word	0x080058f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f9d4 	bl	8005c94 <USBD_GetDescriptor>
          break;
 80058ec:	e022      	b.n	8005934 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fb37 	bl	8005f64 <USBD_SetAddress>
          break;
 80058f6:	e01d      	b.n	8005934 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fb74 	bl	8005fe8 <USBD_SetConfig>
          break;
 8005900:	e018      	b.n	8005934 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fbfd 	bl	8006104 <USBD_GetConfig>
          break;
 800590a:	e013      	b.n	8005934 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fc2c 	bl	800616c <USBD_GetStatus>
          break;
 8005914:	e00e      	b.n	8005934 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fc5a 	bl	80061d2 <USBD_SetFeature>
          break;
 800591e:	e009      	b.n	8005934 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fc69 	bl	80061fa <USBD_ClrFeature>
          break;
 8005928:	e004      	b.n	8005934 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fcc1 	bl	80062b4 <USBD_CtlError>
          break;
 8005932:	bf00      	nop
      }
      break;
 8005934:	e004      	b.n	8005940 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fcbb 	bl	80062b4 <USBD_CtlError>
      break;
 800593e:	bf00      	nop
  }

  return ret;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop

0800594c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005962:	2b20      	cmp	r3, #32
 8005964:	d003      	beq.n	800596e <USBD_StdItfReq+0x22>
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	d001      	beq.n	800596e <USBD_StdItfReq+0x22>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d12a      	bne.n	80059c4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005974:	3b01      	subs	r3, #1
 8005976:	2b02      	cmp	r3, #2
 8005978:	d81d      	bhi.n	80059b6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	889b      	ldrh	r3, [r3, #4]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	d813      	bhi.n	80059ac <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	4798      	blx	r3
 8005992:	4603      	mov	r3, r0
 8005994:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	88db      	ldrh	r3, [r3, #6]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d110      	bne.n	80059c0 <USBD_StdItfReq+0x74>
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10d      	bne.n	80059c0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fd4d 	bl	8006444 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80059aa:	e009      	b.n	80059c0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80059ac:	6839      	ldr	r1, [r7, #0]
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fc80 	bl	80062b4 <USBD_CtlError>
          break;
 80059b4:	e004      	b.n	80059c0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fc7b 	bl	80062b4 <USBD_CtlError>
          break;
 80059be:	e000      	b.n	80059c2 <USBD_StdItfReq+0x76>
          break;
 80059c0:	bf00      	nop
      }
      break;
 80059c2:	e004      	b.n	80059ce <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fc74 	bl	80062b4 <USBD_CtlError>
      break;
 80059cc:	bf00      	nop
  }

  return USBD_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	889b      	ldrh	r3, [r3, #4]
 80059ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d004      	beq.n	8005a02 <USBD_StdEPReq+0x2a>
 80059f8:	2b40      	cmp	r3, #64	; 0x40
 80059fa:	d002      	beq.n	8005a02 <USBD_StdEPReq+0x2a>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <USBD_StdEPReq+0x3a>
 8005a00:	e13d      	b.n	8005c7e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	4798      	blx	r3
      break;
 8005a10:	e13a      	b.n	8005c88 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d10a      	bne.n	8005a34 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4798      	blx	r3
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	e12a      	b.n	8005c8a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d03e      	beq.n	8005aba <USBD_StdEPReq+0xe2>
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d002      	beq.n	8005a46 <USBD_StdEPReq+0x6e>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d070      	beq.n	8005b26 <USBD_StdEPReq+0x14e>
 8005a44:	e115      	b.n	8005c72 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d002      	beq.n	8005a56 <USBD_StdEPReq+0x7e>
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d015      	beq.n	8005a80 <USBD_StdEPReq+0xa8>
 8005a54:	e02b      	b.n	8005aae <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a56:	7bbb      	ldrb	r3, [r7, #14]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00c      	beq.n	8005a76 <USBD_StdEPReq+0x9e>
 8005a5c:	7bbb      	ldrb	r3, [r7, #14]
 8005a5e:	2b80      	cmp	r3, #128	; 0x80
 8005a60:	d009      	beq.n	8005a76 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a62:	7bbb      	ldrb	r3, [r7, #14]
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f003 fed0 	bl	800980c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a6c:	2180      	movs	r1, #128	; 0x80
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f003 fecc 	bl	800980c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a74:	e020      	b.n	8005ab8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fc1b 	bl	80062b4 <USBD_CtlError>
              break;
 8005a7e:	e01b      	b.n	8005ab8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	885b      	ldrh	r3, [r3, #2]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10e      	bne.n	8005aa6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005a88:	7bbb      	ldrb	r3, [r7, #14]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00b      	beq.n	8005aa6 <USBD_StdEPReq+0xce>
 8005a8e:	7bbb      	ldrb	r3, [r7, #14]
 8005a90:	2b80      	cmp	r3, #128	; 0x80
 8005a92:	d008      	beq.n	8005aa6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	88db      	ldrh	r3, [r3, #6]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005a9c:	7bbb      	ldrb	r3, [r7, #14]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f003 feb3 	bl	800980c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fccc 	bl	8006444 <USBD_CtlSendStatus>

              break;
 8005aac:	e004      	b.n	8005ab8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fbff 	bl	80062b4 <USBD_CtlError>
              break;
 8005ab6:	bf00      	nop
          }
          break;
 8005ab8:	e0e0      	b.n	8005c7c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d002      	beq.n	8005aca <USBD_StdEPReq+0xf2>
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d015      	beq.n	8005af4 <USBD_StdEPReq+0x11c>
 8005ac8:	e026      	b.n	8005b18 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005aca:	7bbb      	ldrb	r3, [r7, #14]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00c      	beq.n	8005aea <USBD_StdEPReq+0x112>
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	2b80      	cmp	r3, #128	; 0x80
 8005ad4:	d009      	beq.n	8005aea <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005ad6:	7bbb      	ldrb	r3, [r7, #14]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f003 fe96 	bl	800980c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ae0:	2180      	movs	r1, #128	; 0x80
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f003 fe92 	bl	800980c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ae8:	e01c      	b.n	8005b24 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fbe1 	bl	80062b4 <USBD_CtlError>
              break;
 8005af2:	e017      	b.n	8005b24 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	885b      	ldrh	r3, [r3, #2]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d112      	bne.n	8005b22 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005afc:	7bbb      	ldrb	r3, [r7, #14]
 8005afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d004      	beq.n	8005b10 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005b06:	7bbb      	ldrb	r3, [r7, #14]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f003 fe9d 	bl	800984a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fc97 	bl	8006444 <USBD_CtlSendStatus>
              }
              break;
 8005b16:	e004      	b.n	8005b22 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fbca 	bl	80062b4 <USBD_CtlError>
              break;
 8005b20:	e000      	b.n	8005b24 <USBD_StdEPReq+0x14c>
              break;
 8005b22:	bf00      	nop
          }
          break;
 8005b24:	e0aa      	b.n	8005c7c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d002      	beq.n	8005b36 <USBD_StdEPReq+0x15e>
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d032      	beq.n	8005b9a <USBD_StdEPReq+0x1c2>
 8005b34:	e097      	b.n	8005c66 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b36:	7bbb      	ldrb	r3, [r7, #14]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <USBD_StdEPReq+0x174>
 8005b3c:	7bbb      	ldrb	r3, [r7, #14]
 8005b3e:	2b80      	cmp	r3, #128	; 0x80
 8005b40:	d004      	beq.n	8005b4c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005b42:	6839      	ldr	r1, [r7, #0]
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fbb5 	bl	80062b4 <USBD_CtlError>
                break;
 8005b4a:	e091      	b.n	8005c70 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	da0b      	bge.n	8005b6c <USBD_StdEPReq+0x194>
 8005b54:	7bbb      	ldrb	r3, [r7, #14]
 8005b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	3310      	adds	r3, #16
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	4413      	add	r3, r2
 8005b68:	3304      	adds	r3, #4
 8005b6a:	e00b      	b.n	8005b84 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b6c:	7bbb      	ldrb	r3, [r7, #14]
 8005b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	4413      	add	r3, r2
 8005b82:	3304      	adds	r3, #4
 8005b84:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fbf8 	bl	8006388 <USBD_CtlSendData>
              break;
 8005b98:	e06a      	b.n	8005c70 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	da11      	bge.n	8005bc6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ba2:	7bbb      	ldrb	r3, [r7, #14]
 8005ba4:	f003 020f 	and.w	r2, r3, #15
 8005ba8:	6879      	ldr	r1, [r7, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	3318      	adds	r3, #24
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d117      	bne.n	8005bec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fb78 	bl	80062b4 <USBD_CtlError>
                  break;
 8005bc4:	e054      	b.n	8005c70 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005bc6:	7bbb      	ldrb	r3, [r7, #14]
 8005bc8:	f003 020f 	and.w	r2, r3, #15
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d104      	bne.n	8005bec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005be2:	6839      	ldr	r1, [r7, #0]
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fb65 	bl	80062b4 <USBD_CtlError>
                  break;
 8005bea:	e041      	b.n	8005c70 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	da0b      	bge.n	8005c0c <USBD_StdEPReq+0x234>
 8005bf4:	7bbb      	ldrb	r3, [r7, #14]
 8005bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	3310      	adds	r3, #16
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	4413      	add	r3, r2
 8005c08:	3304      	adds	r3, #4
 8005c0a:	e00b      	b.n	8005c24 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c0c:	7bbb      	ldrb	r3, [r7, #14]
 8005c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	4413      	add	r3, r2
 8005c22:	3304      	adds	r3, #4
 8005c24:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c26:	7bbb      	ldrb	r3, [r7, #14]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <USBD_StdEPReq+0x25a>
 8005c2c:	7bbb      	ldrb	r3, [r7, #14]
 8005c2e:	2b80      	cmp	r3, #128	; 0x80
 8005c30:	d103      	bne.n	8005c3a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	e00e      	b.n	8005c58 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005c3a:	7bbb      	ldrb	r3, [r7, #14]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f003 fe22 	bl	8009888 <USBD_LL_IsStallEP>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	e002      	b.n	8005c58 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fb92 	bl	8006388 <USBD_CtlSendData>
              break;
 8005c64:	e004      	b.n	8005c70 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fb23 	bl	80062b4 <USBD_CtlError>
              break;
 8005c6e:	bf00      	nop
          }
          break;
 8005c70:	e004      	b.n	8005c7c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fb1d 	bl	80062b4 <USBD_CtlError>
          break;
 8005c7a:	bf00      	nop
      }
      break;
 8005c7c:	e004      	b.n	8005c88 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005c7e:	6839      	ldr	r1, [r7, #0]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fb17 	bl	80062b4 <USBD_CtlError>
      break;
 8005c86:	bf00      	nop
  }

  return ret;
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	885b      	ldrh	r3, [r3, #2]
 8005cae:	0a1b      	lsrs	r3, r3, #8
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	2b06      	cmp	r3, #6
 8005cb6:	f200 8128 	bhi.w	8005f0a <USBD_GetDescriptor+0x276>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <USBD_GetDescriptor+0x2c>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cdd 	.word	0x08005cdd
 8005cc4:	08005cf5 	.word	0x08005cf5
 8005cc8:	08005d35 	.word	0x08005d35
 8005ccc:	08005f0b 	.word	0x08005f0b
 8005cd0:	08005f0b 	.word	0x08005f0b
 8005cd4:	08005eab 	.word	0x08005eab
 8005cd8:	08005ed7 	.word	0x08005ed7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	7c12      	ldrb	r2, [r2, #16]
 8005ce8:	f107 0108 	add.w	r1, r7, #8
 8005cec:	4610      	mov	r0, r2
 8005cee:	4798      	blx	r3
 8005cf0:	60f8      	str	r0, [r7, #12]
      break;
 8005cf2:	e112      	b.n	8005f1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	7c1b      	ldrb	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10d      	bne.n	8005d18 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d04:	f107 0208 	add.w	r2, r7, #8
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4798      	blx	r3
 8005d0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3301      	adds	r3, #1
 8005d12:	2202      	movs	r2, #2
 8005d14:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005d16:	e100      	b.n	8005f1a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	f107 0208 	add.w	r2, r7, #8
 8005d24:	4610      	mov	r0, r2
 8005d26:	4798      	blx	r3
 8005d28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	2202      	movs	r2, #2
 8005d30:	701a      	strb	r2, [r3, #0]
      break;
 8005d32:	e0f2      	b.n	8005f1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	885b      	ldrh	r3, [r3, #2]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	f200 80ac 	bhi.w	8005e98 <USBD_GetDescriptor+0x204>
 8005d40:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <USBD_GetDescriptor+0xb4>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005d61 	.word	0x08005d61
 8005d4c:	08005d95 	.word	0x08005d95
 8005d50:	08005dc9 	.word	0x08005dc9
 8005d54:	08005dfd 	.word	0x08005dfd
 8005d58:	08005e31 	.word	0x08005e31
 8005d5c:	08005e65 	.word	0x08005e65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	7c12      	ldrb	r2, [r2, #16]
 8005d78:	f107 0108 	add.w	r1, r7, #8
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	4798      	blx	r3
 8005d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d82:	e091      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fa94 	bl	80062b4 <USBD_CtlError>
            err++;
 8005d8c:	7afb      	ldrb	r3, [r7, #11]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	72fb      	strb	r3, [r7, #11]
          break;
 8005d92:	e089      	b.n	8005ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00b      	beq.n	8005db8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	7c12      	ldrb	r2, [r2, #16]
 8005dac:	f107 0108 	add.w	r1, r7, #8
 8005db0:	4610      	mov	r0, r2
 8005db2:	4798      	blx	r3
 8005db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005db6:	e077      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fa7a 	bl	80062b4 <USBD_CtlError>
            err++;
 8005dc0:	7afb      	ldrb	r3, [r7, #11]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8005dc6:	e06f      	b.n	8005ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	7c12      	ldrb	r2, [r2, #16]
 8005de0:	f107 0108 	add.w	r1, r7, #8
 8005de4:	4610      	mov	r0, r2
 8005de6:	4798      	blx	r3
 8005de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dea:	e05d      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa60 	bl	80062b4 <USBD_CtlError>
            err++;
 8005df4:	7afb      	ldrb	r3, [r7, #11]
 8005df6:	3301      	adds	r3, #1
 8005df8:	72fb      	strb	r3, [r7, #11]
          break;
 8005dfa:	e055      	b.n	8005ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	7c12      	ldrb	r2, [r2, #16]
 8005e14:	f107 0108 	add.w	r1, r7, #8
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4798      	blx	r3
 8005e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e1e:	e043      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fa46 	bl	80062b4 <USBD_CtlError>
            err++;
 8005e28:	7afb      	ldrb	r3, [r7, #11]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e2e:	e03b      	b.n	8005ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00b      	beq.n	8005e54 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	7c12      	ldrb	r2, [r2, #16]
 8005e48:	f107 0108 	add.w	r1, r7, #8
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4798      	blx	r3
 8005e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e52:	e029      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa2c 	bl	80062b4 <USBD_CtlError>
            err++;
 8005e5c:	7afb      	ldrb	r3, [r7, #11]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	72fb      	strb	r3, [r7, #11]
          break;
 8005e62:	e021      	b.n	8005ea8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00b      	beq.n	8005e88 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	7c12      	ldrb	r2, [r2, #16]
 8005e7c:	f107 0108 	add.w	r1, r7, #8
 8005e80:	4610      	mov	r0, r2
 8005e82:	4798      	blx	r3
 8005e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e86:	e00f      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa12 	bl	80062b4 <USBD_CtlError>
            err++;
 8005e90:	7afb      	ldrb	r3, [r7, #11]
 8005e92:	3301      	adds	r3, #1
 8005e94:	72fb      	strb	r3, [r7, #11]
          break;
 8005e96:	e007      	b.n	8005ea8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa0a 	bl	80062b4 <USBD_CtlError>
          err++;
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005ea6:	e038      	b.n	8005f1a <USBD_GetDescriptor+0x286>
 8005ea8:	e037      	b.n	8005f1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	7c1b      	ldrb	r3, [r3, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eba:	f107 0208 	add.w	r2, r7, #8
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	4798      	blx	r3
 8005ec2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ec4:	e029      	b.n	8005f1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f9f3 	bl	80062b4 <USBD_CtlError>
        err++;
 8005ece:	7afb      	ldrb	r3, [r7, #11]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	72fb      	strb	r3, [r7, #11]
      break;
 8005ed4:	e021      	b.n	8005f1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	7c1b      	ldrb	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10d      	bne.n	8005efa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee6:	f107 0208 	add.w	r2, r7, #8
 8005eea:	4610      	mov	r0, r2
 8005eec:	4798      	blx	r3
 8005eee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	2207      	movs	r2, #7
 8005ef6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ef8:	e00f      	b.n	8005f1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f9d9 	bl	80062b4 <USBD_CtlError>
        err++;
 8005f02:	7afb      	ldrb	r3, [r7, #11]
 8005f04:	3301      	adds	r3, #1
 8005f06:	72fb      	strb	r3, [r7, #11]
      break;
 8005f08:	e007      	b.n	8005f1a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f9d1 	bl	80062b4 <USBD_CtlError>
      err++;
 8005f12:	7afb      	ldrb	r3, [r7, #11]
 8005f14:	3301      	adds	r3, #1
 8005f16:	72fb      	strb	r3, [r7, #11]
      break;
 8005f18:	bf00      	nop
  }

  if (err != 0U)
 8005f1a:	7afb      	ldrb	r3, [r7, #11]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d11c      	bne.n	8005f5a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005f20:	893b      	ldrh	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d011      	beq.n	8005f4a <USBD_GetDescriptor+0x2b6>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	88db      	ldrh	r3, [r3, #6]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	88da      	ldrh	r2, [r3, #6]
 8005f32:	893b      	ldrh	r3, [r7, #8]
 8005f34:	4293      	cmp	r3, r2
 8005f36:	bf28      	it	cs
 8005f38:	4613      	movcs	r3, r2
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f3e:	893b      	ldrh	r3, [r7, #8]
 8005f40:	461a      	mov	r2, r3
 8005f42:	68f9      	ldr	r1, [r7, #12]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fa1f 	bl	8006388 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	88db      	ldrh	r3, [r3, #6]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d104      	bne.n	8005f5c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa76 	bl	8006444 <USBD_CtlSendStatus>
 8005f58:	e000      	b.n	8005f5c <USBD_GetDescriptor+0x2c8>
    return;
 8005f5a:	bf00      	nop
    }
  }
}
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop

08005f64 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	889b      	ldrh	r3, [r3, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d130      	bne.n	8005fd8 <USBD_SetAddress+0x74>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	88db      	ldrh	r3, [r3, #6]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d12c      	bne.n	8005fd8 <USBD_SetAddress+0x74>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	885b      	ldrh	r3, [r3, #2]
 8005f82:	2b7f      	cmp	r3, #127	; 0x7f
 8005f84:	d828      	bhi.n	8005fd8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	885b      	ldrh	r3, [r3, #2]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d104      	bne.n	8005fa6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f988 	bl	80062b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa4:	e01c      	b.n	8005fe0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	7bfa      	ldrb	r2, [r7, #15]
 8005faa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f003 fc94 	bl	80098e0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fa43 	bl	8006444 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d004      	beq.n	8005fce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fcc:	e008      	b.n	8005fe0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd6:	e003      	b.n	8005fe0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f96a 	bl	80062b4 <USBD_CtlError>
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	885b      	ldrh	r3, [r3, #2]
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	4b41      	ldr	r3, [pc, #260]	; (8006100 <USBD_SetConfig+0x118>)
 8005ffa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ffc:	4b40      	ldr	r3, [pc, #256]	; (8006100 <USBD_SetConfig+0x118>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d904      	bls.n	800600e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f954 	bl	80062b4 <USBD_CtlError>
 800600c:	e075      	b.n	80060fa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006014:	2b02      	cmp	r3, #2
 8006016:	d002      	beq.n	800601e <USBD_SetConfig+0x36>
 8006018:	2b03      	cmp	r3, #3
 800601a:	d023      	beq.n	8006064 <USBD_SetConfig+0x7c>
 800601c:	e062      	b.n	80060e4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800601e:	4b38      	ldr	r3, [pc, #224]	; (8006100 <USBD_SetConfig+0x118>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d01a      	beq.n	800605c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006026:	4b36      	ldr	r3, [pc, #216]	; (8006100 <USBD_SetConfig+0x118>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2203      	movs	r2, #3
 8006034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006038:	4b31      	ldr	r3, [pc, #196]	; (8006100 <USBD_SetConfig+0x118>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff f9f3 	bl	800542a <USBD_SetClassConfig>
 8006044:	4603      	mov	r3, r0
 8006046:	2b02      	cmp	r3, #2
 8006048:	d104      	bne.n	8006054 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f931 	bl	80062b4 <USBD_CtlError>
            return;
 8006052:	e052      	b.n	80060fa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f9f5 	bl	8006444 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800605a:	e04e      	b.n	80060fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f9f1 	bl	8006444 <USBD_CtlSendStatus>
        break;
 8006062:	e04a      	b.n	80060fa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006064:	4b26      	ldr	r3, [pc, #152]	; (8006100 <USBD_SetConfig+0x118>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d112      	bne.n	8006092 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006074:	4b22      	ldr	r3, [pc, #136]	; (8006100 <USBD_SetConfig+0x118>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800607e:	4b20      	ldr	r3, [pc, #128]	; (8006100 <USBD_SetConfig+0x118>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff f9ef 	bl	8005468 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f9da 	bl	8006444 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006090:	e033      	b.n	80060fa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006092:	4b1b      	ldr	r3, [pc, #108]	; (8006100 <USBD_SetConfig+0x118>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	d01d      	beq.n	80060dc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff f9dd 	bl	8005468 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80060ae:	4b14      	ldr	r3, [pc, #80]	; (8006100 <USBD_SetConfig+0x118>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80060b8:	4b11      	ldr	r3, [pc, #68]	; (8006100 <USBD_SetConfig+0x118>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff f9b3 	bl	800542a <USBD_SetClassConfig>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d104      	bne.n	80060d4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f8f1 	bl	80062b4 <USBD_CtlError>
            return;
 80060d2:	e012      	b.n	80060fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f9b5 	bl	8006444 <USBD_CtlSendStatus>
        break;
 80060da:	e00e      	b.n	80060fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f9b1 	bl	8006444 <USBD_CtlSendStatus>
        break;
 80060e2:	e00a      	b.n	80060fa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f8e4 	bl	80062b4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80060ec:	4b04      	ldr	r3, [pc, #16]	; (8006100 <USBD_SetConfig+0x118>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff f9b8 	bl	8005468 <USBD_ClrClassConfig>
        break;
 80060f8:	bf00      	nop
    }
  }
}
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	2000019c 	.word	0x2000019c

08006104 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	88db      	ldrh	r3, [r3, #6]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d004      	beq.n	8006120 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f8cb 	bl	80062b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800611e:	e021      	b.n	8006164 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006126:	2b01      	cmp	r3, #1
 8006128:	db17      	blt.n	800615a <USBD_GetConfig+0x56>
 800612a:	2b02      	cmp	r3, #2
 800612c:	dd02      	ble.n	8006134 <USBD_GetConfig+0x30>
 800612e:	2b03      	cmp	r3, #3
 8006130:	d00b      	beq.n	800614a <USBD_GetConfig+0x46>
 8006132:	e012      	b.n	800615a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3308      	adds	r3, #8
 800613e:	2201      	movs	r2, #1
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f920 	bl	8006388 <USBD_CtlSendData>
        break;
 8006148:	e00c      	b.n	8006164 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3304      	adds	r3, #4
 800614e:	2201      	movs	r2, #1
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f918 	bl	8006388 <USBD_CtlSendData>
        break;
 8006158:	e004      	b.n	8006164 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f8a9 	bl	80062b4 <USBD_CtlError>
        break;
 8006162:	bf00      	nop
}
 8006164:	bf00      	nop
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800617c:	3b01      	subs	r3, #1
 800617e:	2b02      	cmp	r3, #2
 8006180:	d81e      	bhi.n	80061c0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	88db      	ldrh	r3, [r3, #6]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d004      	beq.n	8006194 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f891 	bl	80062b4 <USBD_CtlError>
        break;
 8006192:	e01a      	b.n	80061ca <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f043 0202 	orr.w	r2, r3, #2
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	330c      	adds	r3, #12
 80061b4:	2202      	movs	r2, #2
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f8e5 	bl	8006388 <USBD_CtlSendData>
      break;
 80061be:	e004      	b.n	80061ca <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f876 	bl	80062b4 <USBD_CtlError>
      break;
 80061c8:	bf00      	nop
  }
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	885b      	ldrh	r3, [r3, #2]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d106      	bne.n	80061f2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f929 	bl	8006444 <USBD_CtlSendStatus>
  }
}
 80061f2:	bf00      	nop
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800620a:	3b01      	subs	r3, #1
 800620c:	2b02      	cmp	r3, #2
 800620e:	d80b      	bhi.n	8006228 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	885b      	ldrh	r3, [r3, #2]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d10c      	bne.n	8006232 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f90f 	bl	8006444 <USBD_CtlSendStatus>
      }
      break;
 8006226:	e004      	b.n	8006232 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f842 	bl	80062b4 <USBD_CtlError>
      break;
 8006230:	e000      	b.n	8006234 <USBD_ClrFeature+0x3a>
      break;
 8006232:	bf00      	nop
  }
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	785a      	ldrb	r2, [r3, #1]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	3302      	adds	r3, #2
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b29a      	uxth	r2, r3
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	3303      	adds	r3, #3
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	021b      	lsls	r3, r3, #8
 8006268:	b29b      	uxth	r3, r3
 800626a:	4413      	add	r3, r2
 800626c:	b29a      	uxth	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	3304      	adds	r3, #4
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	b29a      	uxth	r2, r3
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	3305      	adds	r3, #5
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	b29b      	uxth	r3, r3
 8006286:	4413      	add	r3, r2
 8006288:	b29a      	uxth	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	3306      	adds	r3, #6
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	b29a      	uxth	r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	3307      	adds	r3, #7
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	b29b      	uxth	r3, r3
 800629e:	021b      	lsls	r3, r3, #8
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	4413      	add	r3, r2
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	80da      	strh	r2, [r3, #6]

}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bc80      	pop	{r7}
 80062b2:	4770      	bx	lr

080062b4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80062be:	2180      	movs	r1, #128	; 0x80
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f003 faa3 	bl	800980c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80062c6:	2100      	movs	r1, #0
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f003 fa9f 	bl	800980c <USBD_LL_StallEP>
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b086      	sub	sp, #24
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d032      	beq.n	8006352 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f834 	bl	800635a <USBD_GetLen>
 80062f2:	4603      	mov	r3, r0
 80062f4:	3301      	adds	r3, #1
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	75fa      	strb	r2, [r7, #23]
 8006306:	461a      	mov	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4413      	add	r3, r2
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	7812      	ldrb	r2, [r2, #0]
 8006310:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	75fa      	strb	r2, [r7, #23]
 8006318:	461a      	mov	r2, r3
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	4413      	add	r3, r2
 800631e:	2203      	movs	r2, #3
 8006320:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006322:	e012      	b.n	800634a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	60fa      	str	r2, [r7, #12]
 800632a:	7dfa      	ldrb	r2, [r7, #23]
 800632c:	1c51      	adds	r1, r2, #1
 800632e:	75f9      	strb	r1, [r7, #23]
 8006330:	4611      	mov	r1, r2
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	440a      	add	r2, r1
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	75fa      	strb	r2, [r7, #23]
 8006340:	461a      	mov	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4413      	add	r3, r2
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e8      	bne.n	8006324 <USBD_GetString+0x4e>
    }
  }
}
 8006352:	bf00      	nop
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800635a:	b480      	push	{r7}
 800635c:	b085      	sub	sp, #20
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006366:	e005      	b.n	8006374 <USBD_GetLen+0x1a>
  {
    len++;
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	3301      	adds	r3, #1
 800636c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	3301      	adds	r3, #1
 8006372:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f5      	bne.n	8006368 <USBD_GetLen+0xe>
  }

  return len;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	bc80      	pop	{r7}
 8006386:	4770      	bx	lr

08006388 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	4613      	mov	r3, r2
 8006394:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2202      	movs	r2, #2
 800639a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80063a4:	88fa      	ldrh	r2, [r7, #6]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063aa:	88fb      	ldrh	r3, [r7, #6]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	2100      	movs	r1, #0
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f003 fab4 	bl	800991e <USBD_LL_Transmit>

  return USBD_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	2100      	movs	r1, #0
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f003 faa2 	bl	800991e <USBD_LL_Transmit>

  return USBD_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2203      	movs	r2, #3
 80063f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80063fa:	88fa      	ldrh	r2, [r7, #6]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	2100      	movs	r1, #0
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f003 faa7 	bl	8009964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800642e:	88fb      	ldrh	r3, [r7, #6]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	2100      	movs	r1, #0
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f003 fa95 	bl	8009964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2204      	movs	r2, #4
 8006450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006454:	2300      	movs	r3, #0
 8006456:	2200      	movs	r2, #0
 8006458:	2100      	movs	r1, #0
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f003 fa5f 	bl	800991e <USBD_LL_Transmit>

  return USBD_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2205      	movs	r2, #5
 8006476:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800647a:	2300      	movs	r3, #0
 800647c:	2200      	movs	r2, #0
 800647e:	2100      	movs	r1, #0
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f003 fa6f 	bl	8009964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006496:	f3ef 8305 	mrs	r3, IPSR
 800649a:	60bb      	str	r3, [r7, #8]
  return(result);
 800649c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10f      	bne.n	80064c2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064a2:	f3ef 8310 	mrs	r3, PRIMASK
 80064a6:	607b      	str	r3, [r7, #4]
  return(result);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <osKernelInitialize+0x32>
 80064ae:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <osKernelInitialize+0x60>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d109      	bne.n	80064ca <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064b6:	f3ef 8311 	mrs	r3, BASEPRI
 80064ba:	603b      	str	r3, [r7, #0]
  return(result);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80064c2:	f06f 0305 	mvn.w	r3, #5
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	e00c      	b.n	80064e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064ca:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <osKernelInitialize+0x60>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d105      	bne.n	80064de <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80064d2:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <osKernelInitialize+0x60>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e002      	b.n	80064e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80064de:	f04f 33ff 	mov.w	r3, #4294967295
 80064e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064e4:	68fb      	ldr	r3, [r7, #12]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr
 80064f0:	200001a0 	.word	0x200001a0

080064f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064fa:	f3ef 8305 	mrs	r3, IPSR
 80064fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006500:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10f      	bne.n	8006526 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006506:	f3ef 8310 	mrs	r3, PRIMASK
 800650a:	607b      	str	r3, [r7, #4]
  return(result);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d109      	bne.n	8006526 <osKernelStart+0x32>
 8006512:	4b11      	ldr	r3, [pc, #68]	; (8006558 <osKernelStart+0x64>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d109      	bne.n	800652e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800651a:	f3ef 8311 	mrs	r3, BASEPRI
 800651e:	603b      	str	r3, [r7, #0]
  return(result);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006526:	f06f 0305 	mvn.w	r3, #5
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	e00e      	b.n	800654c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800652e:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <osKernelStart+0x64>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d107      	bne.n	8006546 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006536:	4b08      	ldr	r3, [pc, #32]	; (8006558 <osKernelStart+0x64>)
 8006538:	2202      	movs	r2, #2
 800653a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800653c:	f001 f9d4 	bl	80078e8 <vTaskStartScheduler>
      stat = osOK;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e002      	b.n	800654c <osKernelStart+0x58>
    } else {
      stat = osError;
 8006546:	f04f 33ff 	mov.w	r3, #4294967295
 800654a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800654c:	68fb      	ldr	r3, [r7, #12]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	200001a0 	.word	0x200001a0

0800655c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b092      	sub	sp, #72	; 0x48
 8006560:	af04      	add	r7, sp, #16
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800656c:	f3ef 8305 	mrs	r3, IPSR
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006574:	2b00      	cmp	r3, #0
 8006576:	f040 8094 	bne.w	80066a2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800657a:	f3ef 8310 	mrs	r3, PRIMASK
 800657e:	623b      	str	r3, [r7, #32]
  return(result);
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	2b00      	cmp	r3, #0
 8006584:	f040 808d 	bne.w	80066a2 <osThreadNew+0x146>
 8006588:	4b48      	ldr	r3, [pc, #288]	; (80066ac <osThreadNew+0x150>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d106      	bne.n	800659e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006590:	f3ef 8311 	mrs	r3, BASEPRI
 8006594:	61fb      	str	r3, [r7, #28]
  return(result);
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f040 8082 	bne.w	80066a2 <osThreadNew+0x146>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d07e      	beq.n	80066a2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80065a4:	2380      	movs	r3, #128	; 0x80
 80065a6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80065a8:	2318      	movs	r3, #24
 80065aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80065ac:	2300      	movs	r3, #0
 80065ae:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80065b0:	f107 031b 	add.w	r3, r7, #27
 80065b4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80065b6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ba:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d045      	beq.n	800664e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <osThreadNew+0x74>
        name = attr->name;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d008      	beq.n	80065f6 <osThreadNew+0x9a>
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	2b38      	cmp	r3, #56	; 0x38
 80065e8:	d805      	bhi.n	80065f6 <osThreadNew+0x9a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <osThreadNew+0x9e>
        return (NULL);
 80065f6:	2300      	movs	r3, #0
 80065f8:	e054      	b.n	80066a4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	089b      	lsrs	r3, r3, #2
 8006608:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00e      	beq.n	8006630 <osThreadNew+0xd4>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	2b73      	cmp	r3, #115	; 0x73
 8006618:	d90a      	bls.n	8006630 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800661e:	2b00      	cmp	r3, #0
 8006620:	d006      	beq.n	8006630 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <osThreadNew+0xd4>
        mem = 1;
 800662a:	2301      	movs	r3, #1
 800662c:	62bb      	str	r3, [r7, #40]	; 0x28
 800662e:	e010      	b.n	8006652 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10c      	bne.n	8006652 <osThreadNew+0xf6>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d108      	bne.n	8006652 <osThreadNew+0xf6>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d104      	bne.n	8006652 <osThreadNew+0xf6>
          mem = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	62bb      	str	r3, [r7, #40]	; 0x28
 800664c:	e001      	b.n	8006652 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	2b01      	cmp	r3, #1
 8006656:	d110      	bne.n	800667a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006660:	9202      	str	r2, [sp, #8]
 8006662:	9301      	str	r3, [sp, #4]
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 fefa 	bl	8007468 <xTaskCreateStatic>
 8006674:	4603      	mov	r3, r0
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	e013      	b.n	80066a2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	2b00      	cmp	r3, #0
 800667e:	d110      	bne.n	80066a2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	b29a      	uxth	r2, r3
 8006684:	f107 0314 	add.w	r3, r7, #20
 8006688:	9301      	str	r3, [sp, #4]
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 ff41 	bl	800751a <xTaskCreate>
 8006698:	4603      	mov	r3, r0
 800669a:	2b01      	cmp	r3, #1
 800669c:	d001      	beq.n	80066a2 <osThreadNew+0x146>
          hTask = NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066a2:	697b      	ldr	r3, [r7, #20]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3738      	adds	r7, #56	; 0x38
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	200001a0 	.word	0x200001a0

080066b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066b8:	f3ef 8305 	mrs	r3, IPSR
 80066bc:	613b      	str	r3, [r7, #16]
  return(result);
 80066be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10f      	bne.n	80066e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066c4:	f3ef 8310 	mrs	r3, PRIMASK
 80066c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <osDelay+0x34>
 80066d0:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <osDelay+0x58>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d109      	bne.n	80066ec <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066d8:	f3ef 8311 	mrs	r3, BASEPRI
 80066dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <osDelay+0x3c>
    stat = osErrorISR;
 80066e4:	f06f 0305 	mvn.w	r3, #5
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	e007      	b.n	80066fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f001 f8c2 	bl	8007880 <vTaskDelay>
    }
  }

  return (stat);
 80066fc:	697b      	ldr	r3, [r7, #20]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	200001a0 	.word	0x200001a0

0800670c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a06      	ldr	r2, [pc, #24]	; (8006734 <vApplicationGetIdleTaskMemory+0x28>)
 800671c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4a05      	ldr	r2, [pc, #20]	; (8006738 <vApplicationGetIdleTaskMemory+0x2c>)
 8006722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2280      	movs	r2, #128	; 0x80
 8006728:	601a      	str	r2, [r3, #0]
}
 800672a:	bf00      	nop
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr
 8006734:	200001a4 	.word	0x200001a4
 8006738:	20000218 	.word	0x20000218

0800673c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4a07      	ldr	r2, [pc, #28]	; (8006768 <vApplicationGetTimerTaskMemory+0x2c>)
 800674c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	4a06      	ldr	r2, [pc, #24]	; (800676c <vApplicationGetTimerTaskMemory+0x30>)
 8006752:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800675a:	601a      	str	r2, [r3, #0]
}
 800675c:	bf00      	nop
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000418 	.word	0x20000418
 800676c:	2000048c 	.word	0x2000048c

08006770 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f103 0208 	add.w	r2, r3, #8
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f04f 32ff 	mov.w	r2, #4294967295
 8006788:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f103 0208 	add.w	r2, r3, #8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f103 0208 	add.w	r2, r3, #8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bc80      	pop	{r7}
 80067ac:	4770      	bx	lr

080067ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr

080067c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	601a      	str	r2, [r3, #0]
}
 8006802:	bf00      	nop
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006822:	d103      	bne.n	800682c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	60fb      	str	r3, [r7, #12]
 800682a:	e00c      	b.n	8006846 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3308      	adds	r3, #8
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	e002      	b.n	800683a <vListInsert+0x2e>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	d2f6      	bcs.n	8006834 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	601a      	str	r2, [r3, #0]
}
 8006872:	bf00      	nop
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6892      	ldr	r2, [r2, #8]
 8006892:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6852      	ldr	r2, [r2, #4]
 800689c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d103      	bne.n	80068b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	1e5a      	subs	r2, r3, #1
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bc80      	pop	{r7}
 80068cc:	4770      	bx	lr
	...

080068d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d109      	bne.n	80068f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	60bb      	str	r3, [r7, #8]
 80068f6:	e7fe      	b.n	80068f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80068f8:	f002 f926 	bl	8008b48 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006904:	68f9      	ldr	r1, [r7, #12]
 8006906:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006908:	fb01 f303 	mul.w	r3, r1, r3
 800690c:	441a      	add	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006928:	3b01      	subs	r3, #1
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800692e:	fb01 f303 	mul.w	r3, r1, r3
 8006932:	441a      	add	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	22ff      	movs	r2, #255	; 0xff
 800693c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	22ff      	movs	r2, #255	; 0xff
 8006944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d114      	bne.n	8006978 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01a      	beq.n	800698c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3310      	adds	r3, #16
 800695a:	4618      	mov	r0, r3
 800695c:	f001 fa66 	bl	8007e2c <xTaskRemoveFromEventList>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d012      	beq.n	800698c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006966:	4b0d      	ldr	r3, [pc, #52]	; (800699c <xQueueGenericReset+0xcc>)
 8006968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	e009      	b.n	800698c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3310      	adds	r3, #16
 800697c:	4618      	mov	r0, r3
 800697e:	f7ff fef7 	bl	8006770 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3324      	adds	r3, #36	; 0x24
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff fef2 	bl	8006770 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800698c:	f002 f90a 	bl	8008ba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006990:	2301      	movs	r3, #1
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	e000ed04 	.word	0xe000ed04

080069a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08e      	sub	sp, #56	; 0x38
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <xQueueGenericCreateStatic+0x28>
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c6:	e7fe      	b.n	80069c6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <xQueueGenericCreateStatic+0x42>
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
 80069e0:	e7fe      	b.n	80069e0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <xQueueGenericCreateStatic+0x4e>
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <xQueueGenericCreateStatic+0x52>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <xQueueGenericCreateStatic+0x54>
 80069f2:	2300      	movs	r3, #0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d109      	bne.n	8006a0c <xQueueGenericCreateStatic+0x6c>
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	623b      	str	r3, [r7, #32]
 8006a0a:	e7fe      	b.n	8006a0a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d102      	bne.n	8006a18 <xQueueGenericCreateStatic+0x78>
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <xQueueGenericCreateStatic+0x7c>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <xQueueGenericCreateStatic+0x7e>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d109      	bne.n	8006a36 <xQueueGenericCreateStatic+0x96>
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	61fb      	str	r3, [r7, #28]
 8006a34:	e7fe      	b.n	8006a34 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a36:	2350      	movs	r3, #80	; 0x50
 8006a38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b50      	cmp	r3, #80	; 0x50
 8006a3e:	d009      	beq.n	8006a54 <xQueueGenericCreateStatic+0xb4>
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	e7fe      	b.n	8006a52 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00d      	beq.n	8006a7a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	68b9      	ldr	r1, [r7, #8]
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f842 	bl	8006afe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3730      	adds	r7, #48	; 0x30
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	; 0x28
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <xQueueGenericCreate+0x28>
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	613b      	str	r3, [r7, #16]
 8006aaa:	e7fe      	b.n	8006aaa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d102      	bne.n	8006ab8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	e004      	b.n	8006ac2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	fb02 f303 	mul.w	r3, r2, r3
 8006ac0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	3350      	adds	r3, #80	; 0x50
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f002 f934 	bl	8008d34 <pvPortMalloc>
 8006acc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00f      	beq.n	8006af4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	3350      	adds	r3, #80	; 0x50
 8006ad8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ae2:	79fa      	ldrb	r2, [r7, #7]
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	68b9      	ldr	r1, [r7, #8]
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 f805 	bl	8006afe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006af4:	69bb      	ldr	r3, [r7, #24]
	}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3720      	adds	r7, #32
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b084      	sub	sp, #16
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	607a      	str	r2, [r7, #4]
 8006b0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d103      	bne.n	8006b1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	e002      	b.n	8006b20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	69b8      	ldr	r0, [r7, #24]
 8006b30:	f7ff fece 	bl	80068d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	78fa      	ldrb	r2, [r7, #3]
 8006b38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d109      	bne.n	8006b68 <xQueueCreateCountingSemaphore+0x24>
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	613b      	str	r3, [r7, #16]
 8006b66:	e7fe      	b.n	8006b66 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d909      	bls.n	8006b84 <xQueueCreateCountingSemaphore+0x40>
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	e7fe      	b.n	8006b82 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006b84:	2202      	movs	r2, #2
 8006b86:	2100      	movs	r1, #0
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff ff7b 	bl	8006a84 <xQueueGenericCreate>
 8006b8e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006b9c:	697b      	ldr	r3, [r7, #20]
	}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08e      	sub	sp, #56	; 0x38
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d109      	bne.n	8006bd8 <xQueueGenericSend+0x30>
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd6:	e7fe      	b.n	8006bd6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d103      	bne.n	8006be6 <xQueueGenericSend+0x3e>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <xQueueGenericSend+0x42>
 8006be6:	2301      	movs	r3, #1
 8006be8:	e000      	b.n	8006bec <xQueueGenericSend+0x44>
 8006bea:	2300      	movs	r3, #0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d109      	bne.n	8006c04 <xQueueGenericSend+0x5c>
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
 8006c02:	e7fe      	b.n	8006c02 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d103      	bne.n	8006c12 <xQueueGenericSend+0x6a>
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <xQueueGenericSend+0x6e>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <xQueueGenericSend+0x70>
 8006c16:	2300      	movs	r3, #0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d109      	bne.n	8006c30 <xQueueGenericSend+0x88>
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	623b      	str	r3, [r7, #32]
 8006c2e:	e7fe      	b.n	8006c2e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c30:	f001 fab6 	bl	80081a0 <xTaskGetSchedulerState>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d102      	bne.n	8006c40 <xQueueGenericSend+0x98>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <xQueueGenericSend+0x9c>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <xQueueGenericSend+0x9e>
 8006c44:	2300      	movs	r3, #0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d109      	bne.n	8006c5e <xQueueGenericSend+0xb6>
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	e7fe      	b.n	8006c5c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c5e:	f001 ff73 	bl	8008b48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d302      	bcc.n	8006c74 <xQueueGenericSend+0xcc>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d129      	bne.n	8006cc8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	68b9      	ldr	r1, [r7, #8]
 8006c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c7a:	f000 fa89 	bl	8007190 <prvCopyDataToQueue>
 8006c7e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d010      	beq.n	8006caa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	3324      	adds	r3, #36	; 0x24
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 f8cd 	bl	8007e2c <xTaskRemoveFromEventList>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d013      	beq.n	8006cc0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c98:	4b3f      	ldr	r3, [pc, #252]	; (8006d98 <xQueueGenericSend+0x1f0>)
 8006c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	e00a      	b.n	8006cc0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d007      	beq.n	8006cc0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006cb0:	4b39      	ldr	r3, [pc, #228]	; (8006d98 <xQueueGenericSend+0x1f0>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006cc0:	f001 ff70 	bl	8008ba4 <vPortExitCritical>
				return pdPASS;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e063      	b.n	8006d90 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d103      	bne.n	8006cd6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cce:	f001 ff69 	bl	8008ba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e05c      	b.n	8006d90 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d106      	bne.n	8006cea <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cdc:	f107 0314 	add.w	r3, r7, #20
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f001 f905 	bl	8007ef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cea:	f001 ff5b 	bl	8008ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cee:	f000 fe61 	bl	80079b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cf2:	f001 ff29 	bl	8008b48 <vPortEnterCritical>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cfc:	b25b      	sxtb	r3, r3
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d02:	d103      	bne.n	8006d0c <xQueueGenericSend+0x164>
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d12:	b25b      	sxtb	r3, r3
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d103      	bne.n	8006d22 <xQueueGenericSend+0x17a>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d22:	f001 ff3f 	bl	8008ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d26:	1d3a      	adds	r2, r7, #4
 8006d28:	f107 0314 	add.w	r3, r7, #20
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 f8f4 	bl	8007f1c <xTaskCheckForTimeOut>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d124      	bne.n	8006d84 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d3c:	f000 fb20 	bl	8007380 <prvIsQueueFull>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d018      	beq.n	8006d78 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	3310      	adds	r3, #16
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f001 f81e 	bl	8007d90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d56:	f000 faab 	bl	80072b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d5a:	f000 fe39 	bl	80079d0 <xTaskResumeAll>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f47f af7c 	bne.w	8006c5e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006d66:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <xQueueGenericSend+0x1f0>)
 8006d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	e772      	b.n	8006c5e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d7a:	f000 fa99 	bl	80072b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d7e:	f000 fe27 	bl	80079d0 <xTaskResumeAll>
 8006d82:	e76c      	b.n	8006c5e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d86:	f000 fa93 	bl	80072b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d8a:	f000 fe21 	bl	80079d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d8e:	2300      	movs	r3, #0
		}
	}
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3738      	adds	r7, #56	; 0x38
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08e      	sub	sp, #56	; 0x38
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d109      	bne.n	8006dc8 <xQueueGenericSendFromISR+0x2c>
 8006db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc6:	e7fe      	b.n	8006dc6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d103      	bne.n	8006dd6 <xQueueGenericSendFromISR+0x3a>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <xQueueGenericSendFromISR+0x3e>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <xQueueGenericSendFromISR+0x40>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <xQueueGenericSendFromISR+0x58>
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	623b      	str	r3, [r7, #32]
 8006df2:	e7fe      	b.n	8006df2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d103      	bne.n	8006e02 <xQueueGenericSendFromISR+0x66>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d101      	bne.n	8006e06 <xQueueGenericSendFromISR+0x6a>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e000      	b.n	8006e08 <xQueueGenericSendFromISR+0x6c>
 8006e06:	2300      	movs	r3, #0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d109      	bne.n	8006e20 <xQueueGenericSendFromISR+0x84>
 8006e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	61fb      	str	r3, [r7, #28]
 8006e1e:	e7fe      	b.n	8006e1e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e20:	f001 ff4c 	bl	8008cbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e24:	f3ef 8211 	mrs	r2, BASEPRI
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	61ba      	str	r2, [r7, #24]
 8006e3a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d302      	bcc.n	8006e52 <xQueueGenericSendFromISR+0xb6>
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d12c      	bne.n	8006eac <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e62:	f000 f995 	bl	8007190 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e66:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6e:	d112      	bne.n	8006e96 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d016      	beq.n	8006ea6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	3324      	adds	r3, #36	; 0x24
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 ffd5 	bl	8007e2c <xTaskRemoveFromEventList>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00e      	beq.n	8006ea6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00b      	beq.n	8006ea6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	e007      	b.n	8006ea6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	b25a      	sxtb	r2, r3
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006eaa:	e001      	b.n	8006eb0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006eac:	2300      	movs	r3, #0
 8006eae:	637b      	str	r3, [r7, #52]	; 0x34
 8006eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3738      	adds	r7, #56	; 0x38
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08e      	sub	sp, #56	; 0x38
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d109      	bne.n	8006eec <xQueueGiveFromISR+0x28>
	__asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	623b      	str	r3, [r7, #32]
 8006eea:	e7fe      	b.n	8006eea <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <xQueueGiveFromISR+0x44>
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	61fb      	str	r3, [r7, #28]
 8006f06:	e7fe      	b.n	8006f06 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d103      	bne.n	8006f18 <xQueueGiveFromISR+0x54>
 8006f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <xQueueGiveFromISR+0x58>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <xQueueGiveFromISR+0x5a>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d109      	bne.n	8006f36 <xQueueGiveFromISR+0x72>
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	61bb      	str	r3, [r7, #24]
 8006f34:	e7fe      	b.n	8006f34 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f36:	f001 fec1 	bl	8008cbc <vPortValidateInterruptPriority>
	__asm volatile
 8006f3a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	617a      	str	r2, [r7, #20]
 8006f50:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006f52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d22b      	bcs.n	8006fbe <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f80:	d112      	bne.n	8006fa8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d016      	beq.n	8006fb8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	3324      	adds	r3, #36	; 0x24
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 ff4c 	bl	8007e2c <xTaskRemoveFromEventList>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00e      	beq.n	8006fb8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00b      	beq.n	8006fb8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	e007      	b.n	8006fb8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fac:	3301      	adds	r3, #1
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	b25a      	sxtb	r2, r3
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	637b      	str	r3, [r7, #52]	; 0x34
 8006fbc:	e001      	b.n	8006fc2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3738      	adds	r7, #56	; 0x38
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08c      	sub	sp, #48	; 0x30
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d109      	bne.n	8007006 <xQueueReceive+0x2e>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	623b      	str	r3, [r7, #32]
 8007004:	e7fe      	b.n	8007004 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d103      	bne.n	8007014 <xQueueReceive+0x3c>
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <xQueueReceive+0x40>
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <xQueueReceive+0x42>
 8007018:	2300      	movs	r3, #0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d109      	bne.n	8007032 <xQueueReceive+0x5a>
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	e7fe      	b.n	8007030 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007032:	f001 f8b5 	bl	80081a0 <xTaskGetSchedulerState>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d102      	bne.n	8007042 <xQueueReceive+0x6a>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <xQueueReceive+0x6e>
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <xQueueReceive+0x70>
 8007046:	2300      	movs	r3, #0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d109      	bne.n	8007060 <xQueueReceive+0x88>
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e7fe      	b.n	800705e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007060:	f001 fd72 	bl	8008b48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01f      	beq.n	80070b0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007070:	68b9      	ldr	r1, [r7, #8]
 8007072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007074:	f000 f8f6 	bl	8007264 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	1e5a      	subs	r2, r3, #1
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00f      	beq.n	80070a8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	3310      	adds	r3, #16
 800708c:	4618      	mov	r0, r3
 800708e:	f000 fecd 	bl	8007e2c <xTaskRemoveFromEventList>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d007      	beq.n	80070a8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007098:	4b3c      	ldr	r3, [pc, #240]	; (800718c <xQueueReceive+0x1b4>)
 800709a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070a8:	f001 fd7c 	bl	8008ba4 <vPortExitCritical>
				return pdPASS;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e069      	b.n	8007184 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d103      	bne.n	80070be <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070b6:	f001 fd75 	bl	8008ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070ba:	2300      	movs	r3, #0
 80070bc:	e062      	b.n	8007184 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070c4:	f107 0310 	add.w	r3, r7, #16
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 ff11 	bl	8007ef0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070ce:	2301      	movs	r3, #1
 80070d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070d2:	f001 fd67 	bl	8008ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070d6:	f000 fc6d 	bl	80079b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070da:	f001 fd35 	bl	8008b48 <vPortEnterCritical>
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070e4:	b25b      	sxtb	r3, r3
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ea:	d103      	bne.n	80070f4 <xQueueReceive+0x11c>
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070fa:	b25b      	sxtb	r3, r3
 80070fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007100:	d103      	bne.n	800710a <xQueueReceive+0x132>
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800710a:	f001 fd4b 	bl	8008ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800710e:	1d3a      	adds	r2, r7, #4
 8007110:	f107 0310 	add.w	r3, r7, #16
 8007114:	4611      	mov	r1, r2
 8007116:	4618      	mov	r0, r3
 8007118:	f000 ff00 	bl	8007f1c <xTaskCheckForTimeOut>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d123      	bne.n	800716a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007124:	f000 f916 	bl	8007354 <prvIsQueueEmpty>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d017      	beq.n	800715e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	3324      	adds	r3, #36	; 0x24
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	4611      	mov	r1, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fe2a 	bl	8007d90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800713c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800713e:	f000 f8b7 	bl	80072b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007142:	f000 fc45 	bl	80079d0 <xTaskResumeAll>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d189      	bne.n	8007060 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <xQueueReceive+0x1b4>)
 800714e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	e780      	b.n	8007060 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800715e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007160:	f000 f8a6 	bl	80072b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007164:	f000 fc34 	bl	80079d0 <xTaskResumeAll>
 8007168:	e77a      	b.n	8007060 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800716a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800716c:	f000 f8a0 	bl	80072b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007170:	f000 fc2e 	bl	80079d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007176:	f000 f8ed 	bl	8007354 <prvIsQueueEmpty>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	f43f af6f 	beq.w	8007060 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007182:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007184:	4618      	mov	r0, r3
 8007186:	3730      	adds	r7, #48	; 0x30
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	e000ed04 	.word	0xe000ed04

08007190 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800719c:	2300      	movs	r3, #0
 800719e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10d      	bne.n	80071ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d14d      	bne.n	8007252 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f001 f80e 	bl	80081dc <xTaskPriorityDisinherit>
 80071c0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	605a      	str	r2, [r3, #4]
 80071c8:	e043      	b.n	8007252 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d119      	bne.n	8007204 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6898      	ldr	r0, [r3, #8]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	461a      	mov	r2, r3
 80071da:	68b9      	ldr	r1, [r7, #8]
 80071dc:	f002 fc68 	bl	8009ab0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e8:	441a      	add	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689a      	ldr	r2, [r3, #8]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d32b      	bcc.n	8007252 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	609a      	str	r2, [r3, #8]
 8007202:	e026      	b.n	8007252 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	68d8      	ldr	r0, [r3, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	461a      	mov	r2, r3
 800720e:	68b9      	ldr	r1, [r7, #8]
 8007210:	f002 fc4e 	bl	8009ab0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	68da      	ldr	r2, [r3, #12]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	425b      	negs	r3, r3
 800721e:	441a      	add	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	68da      	ldr	r2, [r3, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d207      	bcs.n	8007240 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007238:	425b      	negs	r3, r3
 800723a:	441a      	add	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b02      	cmp	r3, #2
 8007244:	d105      	bne.n	8007252 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	3b01      	subs	r3, #1
 8007250:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800725a:	697b      	ldr	r3, [r7, #20]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	2b00      	cmp	r3, #0
 8007274:	d018      	beq.n	80072a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	441a      	add	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	429a      	cmp	r2, r3
 800728e:	d303      	bcc.n	8007298 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68d9      	ldr	r1, [r3, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	461a      	mov	r2, r3
 80072a2:	6838      	ldr	r0, [r7, #0]
 80072a4:	f002 fc04 	bl	8009ab0 <memcpy>
	}
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072b8:	f001 fc46 	bl	8008b48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072c4:	e011      	b.n	80072ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d012      	beq.n	80072f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3324      	adds	r3, #36	; 0x24
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fdaa 	bl	8007e2c <xTaskRemoveFromEventList>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80072de:	f000 fe7d 	bl	8007fdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	dce9      	bgt.n	80072c6 <prvUnlockQueue+0x16>
 80072f2:	e000      	b.n	80072f6 <prvUnlockQueue+0x46>
					break;
 80072f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	22ff      	movs	r2, #255	; 0xff
 80072fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80072fe:	f001 fc51 	bl	8008ba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007302:	f001 fc21 	bl	8008b48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800730c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800730e:	e011      	b.n	8007334 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d012      	beq.n	800733e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3310      	adds	r3, #16
 800731c:	4618      	mov	r0, r3
 800731e:	f000 fd85 	bl	8007e2c <xTaskRemoveFromEventList>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007328:	f000 fe58 	bl	8007fdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	3b01      	subs	r3, #1
 8007330:	b2db      	uxtb	r3, r3
 8007332:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007338:	2b00      	cmp	r3, #0
 800733a:	dce9      	bgt.n	8007310 <prvUnlockQueue+0x60>
 800733c:	e000      	b.n	8007340 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800733e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	22ff      	movs	r2, #255	; 0xff
 8007344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007348:	f001 fc2c 	bl	8008ba4 <vPortExitCritical>
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800735c:	f001 fbf4 	bl	8008b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007368:	2301      	movs	r3, #1
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	e001      	b.n	8007372 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007372:	f001 fc17 	bl	8008ba4 <vPortExitCritical>

	return xReturn;
 8007376:	68fb      	ldr	r3, [r7, #12]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007388:	f001 fbde 	bl	8008b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007394:	429a      	cmp	r2, r3
 8007396:	d102      	bne.n	800739e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007398:	2301      	movs	r3, #1
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	e001      	b.n	80073a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073a2:	f001 fbff 	bl	8008ba4 <vPortExitCritical>

	return xReturn;
 80073a6:	68fb      	ldr	r3, [r7, #12]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	e014      	b.n	80073ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073c0:	4a0e      	ldr	r2, [pc, #56]	; (80073fc <vQueueAddToRegistry+0x4c>)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10b      	bne.n	80073e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80073cc:	490b      	ldr	r1, [pc, #44]	; (80073fc <vQueueAddToRegistry+0x4c>)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80073d6:	4a09      	ldr	r2, [pc, #36]	; (80073fc <vQueueAddToRegistry+0x4c>)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	4413      	add	r3, r2
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80073e2:	e005      	b.n	80073f0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3301      	adds	r3, #1
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b07      	cmp	r3, #7
 80073ee:	d9e7      	bls.n	80073c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073f0:	bf00      	nop
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20003174 	.word	0x20003174

08007400 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007410:	f001 fb9a 	bl	8008b48 <vPortEnterCritical>
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800741a:	b25b      	sxtb	r3, r3
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007420:	d103      	bne.n	800742a <vQueueWaitForMessageRestricted+0x2a>
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007430:	b25b      	sxtb	r3, r3
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d103      	bne.n	8007440 <vQueueWaitForMessageRestricted+0x40>
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007440:	f001 fbb0 	bl	8008ba4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	2b00      	cmp	r3, #0
 800744a:	d106      	bne.n	800745a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	3324      	adds	r3, #36	; 0x24
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	4618      	mov	r0, r3
 8007456:	f000 fcbf 	bl	8007dd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800745a:	6978      	ldr	r0, [r7, #20]
 800745c:	f7ff ff28 	bl	80072b0 <prvUnlockQueue>
	}
 8007460:	bf00      	nop
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08e      	sub	sp, #56	; 0x38
 800746c:	af04      	add	r7, sp, #16
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007478:	2b00      	cmp	r3, #0
 800747a:	d109      	bne.n	8007490 <xTaskCreateStatic+0x28>
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	623b      	str	r3, [r7, #32]
 800748e:	e7fe      	b.n	800748e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	2b00      	cmp	r3, #0
 8007494:	d109      	bne.n	80074aa <xTaskCreateStatic+0x42>
 8007496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	61fb      	str	r3, [r7, #28]
 80074a8:	e7fe      	b.n	80074a8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074aa:	2374      	movs	r3, #116	; 0x74
 80074ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	2b74      	cmp	r3, #116	; 0x74
 80074b2:	d009      	beq.n	80074c8 <xTaskCreateStatic+0x60>
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	61bb      	str	r3, [r7, #24]
 80074c6:	e7fe      	b.n	80074c6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d01e      	beq.n	800750c <xTaskCreateStatic+0xa4>
 80074ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d01b      	beq.n	800750c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	2202      	movs	r2, #2
 80074e2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074e6:	2300      	movs	r3, #0
 80074e8:	9303      	str	r3, [sp, #12]
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	9302      	str	r3, [sp, #8]
 80074ee:	f107 0314 	add.w	r3, r7, #20
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 f850 	bl	80075a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007506:	f000 f8d9 	bl	80076bc <prvAddNewTaskToReadyList>
 800750a:	e001      	b.n	8007510 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007510:	697b      	ldr	r3, [r7, #20]
	}
 8007512:	4618      	mov	r0, r3
 8007514:	3728      	adds	r7, #40	; 0x28
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800751a:	b580      	push	{r7, lr}
 800751c:	b08c      	sub	sp, #48	; 0x30
 800751e:	af04      	add	r7, sp, #16
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	603b      	str	r3, [r7, #0]
 8007526:	4613      	mov	r3, r2
 8007528:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800752a:	88fb      	ldrh	r3, [r7, #6]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4618      	mov	r0, r3
 8007530:	f001 fc00 	bl	8008d34 <pvPortMalloc>
 8007534:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00e      	beq.n	800755a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800753c:	2074      	movs	r0, #116	; 0x74
 800753e:	f001 fbf9 	bl	8008d34 <pvPortMalloc>
 8007542:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	631a      	str	r2, [r3, #48]	; 0x30
 8007550:	e005      	b.n	800755e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007552:	6978      	ldr	r0, [r7, #20]
 8007554:	f001 fcb0 	bl	8008eb8 <vPortFree>
 8007558:	e001      	b.n	800755e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d017      	beq.n	8007594 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800756c:	88fa      	ldrh	r2, [r7, #6]
 800756e:	2300      	movs	r3, #0
 8007570:	9303      	str	r3, [sp, #12]
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	9302      	str	r3, [sp, #8]
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 f80e 	bl	80075a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007588:	69f8      	ldr	r0, [r7, #28]
 800758a:	f000 f897 	bl	80076bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800758e:	2301      	movs	r3, #1
 8007590:	61bb      	str	r3, [r7, #24]
 8007592:	e002      	b.n	800759a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007594:	f04f 33ff 	mov.w	r3, #4294967295
 8007598:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800759a:	69bb      	ldr	r3, [r7, #24]
	}
 800759c:	4618      	mov	r0, r3
 800759e:	3720      	adds	r7, #32
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	461a      	mov	r2, r3
 80075bc:	21a5      	movs	r1, #165	; 0xa5
 80075be:	f002 fa82 	bl	8009ac6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075cc:	3b01      	subs	r3, #1
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	f023 0307 	bic.w	r3, r3, #7
 80075da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	f003 0307 	and.w	r3, r3, #7
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <prvInitialiseNewTask+0x56>
 80075e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	e7fe      	b.n	80075f8 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007600:	2300      	movs	r3, #0
 8007602:	61fb      	str	r3, [r7, #28]
 8007604:	e012      	b.n	800762c <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	4413      	add	r3, r2
 800760c:	7819      	ldrb	r1, [r3, #0]
 800760e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	4413      	add	r3, r2
 8007614:	3334      	adds	r3, #52	; 0x34
 8007616:	460a      	mov	r2, r1
 8007618:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	4413      	add	r3, r2
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d006      	beq.n	8007634 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	3301      	adds	r3, #1
 800762a:	61fb      	str	r3, [r7, #28]
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	2b1f      	cmp	r3, #31
 8007630:	d9e9      	bls.n	8007606 <prvInitialiseNewTask+0x62>
 8007632:	e000      	b.n	8007636 <prvInitialiseNewTask+0x92>
		{
			break;
 8007634:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	2b37      	cmp	r3, #55	; 0x37
 8007642:	d901      	bls.n	8007648 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007644:	2337      	movs	r3, #55	; 0x37
 8007646:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800764c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007652:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->uxMutexesHeld = 0;
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	2200      	movs	r2, #0
 8007658:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	3304      	adds	r3, #4
 800765e:	4618      	mov	r0, r3
 8007660:	f7ff f8a5 	bl	80067ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007666:	3318      	adds	r3, #24
 8007668:	4618      	mov	r0, r3
 800766a:	f7ff f8a0 	bl	80067ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007672:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007676:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007682:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	2200      	movs	r2, #0
 8007688:	669a      	str	r2, [r3, #104]	; 0x68
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	2200      	movs	r2, #0
 800768e:	66da      	str	r2, [r3, #108]	; 0x6c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	68f9      	ldr	r1, [r7, #12]
 800769c:	69b8      	ldr	r0, [r7, #24]
 800769e:	f001 f967 	bl	8008970 <pxPortInitialiseStack>
 80076a2:	4602      	mov	r2, r0
 80076a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80076a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076b4:	bf00      	nop
 80076b6:	3720      	adds	r7, #32
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076c4:	f001 fa40 	bl	8008b48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076c8:	4b2d      	ldr	r3, [pc, #180]	; (8007780 <prvAddNewTaskToReadyList+0xc4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3301      	adds	r3, #1
 80076ce:	4a2c      	ldr	r2, [pc, #176]	; (8007780 <prvAddNewTaskToReadyList+0xc4>)
 80076d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076d2:	4b2c      	ldr	r3, [pc, #176]	; (8007784 <prvAddNewTaskToReadyList+0xc8>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d109      	bne.n	80076ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076da:	4a2a      	ldr	r2, [pc, #168]	; (8007784 <prvAddNewTaskToReadyList+0xc8>)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076e0:	4b27      	ldr	r3, [pc, #156]	; (8007780 <prvAddNewTaskToReadyList+0xc4>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d110      	bne.n	800770a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076e8:	f000 fc9c 	bl	8008024 <prvInitialiseTaskLists>
 80076ec:	e00d      	b.n	800770a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076ee:	4b26      	ldr	r3, [pc, #152]	; (8007788 <prvAddNewTaskToReadyList+0xcc>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076f6:	4b23      	ldr	r3, [pc, #140]	; (8007784 <prvAddNewTaskToReadyList+0xc8>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007700:	429a      	cmp	r2, r3
 8007702:	d802      	bhi.n	800770a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007704:	4a1f      	ldr	r2, [pc, #124]	; (8007784 <prvAddNewTaskToReadyList+0xc8>)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800770a:	4b20      	ldr	r3, [pc, #128]	; (800778c <prvAddNewTaskToReadyList+0xd0>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3301      	adds	r3, #1
 8007710:	4a1e      	ldr	r2, [pc, #120]	; (800778c <prvAddNewTaskToReadyList+0xd0>)
 8007712:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007714:	4b1d      	ldr	r3, [pc, #116]	; (800778c <prvAddNewTaskToReadyList+0xd0>)
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	659a      	str	r2, [r3, #88]	; 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007720:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <prvAddNewTaskToReadyList+0xd4>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	429a      	cmp	r2, r3
 8007726:	d903      	bls.n	8007730 <prvAddNewTaskToReadyList+0x74>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	4a18      	ldr	r2, [pc, #96]	; (8007790 <prvAddNewTaskToReadyList+0xd4>)
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007734:	4613      	mov	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4a15      	ldr	r2, [pc, #84]	; (8007794 <prvAddNewTaskToReadyList+0xd8>)
 800773e:	441a      	add	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3304      	adds	r3, #4
 8007744:	4619      	mov	r1, r3
 8007746:	4610      	mov	r0, r2
 8007748:	f7ff f83d 	bl	80067c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800774c:	f001 fa2a 	bl	8008ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007750:	4b0d      	ldr	r3, [pc, #52]	; (8007788 <prvAddNewTaskToReadyList+0xcc>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00e      	beq.n	8007776 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007758:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <prvAddNewTaskToReadyList+0xc8>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	429a      	cmp	r2, r3
 8007764:	d207      	bcs.n	8007776 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007766:	4b0c      	ldr	r3, [pc, #48]	; (8007798 <prvAddNewTaskToReadyList+0xdc>)
 8007768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20000d60 	.word	0x20000d60
 8007784:	2000088c 	.word	0x2000088c
 8007788:	20000d6c 	.word	0x20000d6c
 800778c:	20000d7c 	.word	0x20000d7c
 8007790:	20000d68 	.word	0x20000d68
 8007794:	20000890 	.word	0x20000890
 8007798:	e000ed04 	.word	0xe000ed04

0800779c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80077a4:	f001 f9d0 	bl	8008b48 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d102      	bne.n	80077b4 <vTaskDelete+0x18>
 80077ae:	4b2c      	ldr	r3, [pc, #176]	; (8007860 <vTaskDelete+0xc4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	e000      	b.n	80077b6 <vTaskDelete+0x1a>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4618      	mov	r0, r3
 80077be:	f7ff f85d 	bl	800687c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d004      	beq.n	80077d4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3318      	adds	r3, #24
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff f854 	bl	800687c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80077d4:	4b23      	ldr	r3, [pc, #140]	; (8007864 <vTaskDelete+0xc8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3301      	adds	r3, #1
 80077da:	4a22      	ldr	r2, [pc, #136]	; (8007864 <vTaskDelete+0xc8>)
 80077dc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80077de:	4b20      	ldr	r3, [pc, #128]	; (8007860 <vTaskDelete+0xc4>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d10b      	bne.n	8007800 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3304      	adds	r3, #4
 80077ec:	4619      	mov	r1, r3
 80077ee:	481e      	ldr	r0, [pc, #120]	; (8007868 <vTaskDelete+0xcc>)
 80077f0:	f7fe ffe9 	bl	80067c6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80077f4:	4b1d      	ldr	r3, [pc, #116]	; (800786c <vTaskDelete+0xd0>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3301      	adds	r3, #1
 80077fa:	4a1c      	ldr	r2, [pc, #112]	; (800786c <vTaskDelete+0xd0>)
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	e009      	b.n	8007814 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007800:	4b1b      	ldr	r3, [pc, #108]	; (8007870 <vTaskDelete+0xd4>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3b01      	subs	r3, #1
 8007806:	4a1a      	ldr	r2, [pc, #104]	; (8007870 <vTaskDelete+0xd4>)
 8007808:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 fc76 	bl	80080fc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007810:	f000 fca2 	bl	8008158 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007814:	f001 f9c6 	bl	8008ba4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007818:	4b16      	ldr	r3, [pc, #88]	; (8007874 <vTaskDelete+0xd8>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01a      	beq.n	8007856 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <vTaskDelete+0xc4>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	429a      	cmp	r2, r3
 8007828:	d115      	bne.n	8007856 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800782a:	4b13      	ldr	r3, [pc, #76]	; (8007878 <vTaskDelete+0xdc>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d009      	beq.n	8007846 <vTaskDelete+0xaa>
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60bb      	str	r3, [r7, #8]
 8007844:	e7fe      	b.n	8007844 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8007846:	4b0d      	ldr	r3, [pc, #52]	; (800787c <vTaskDelete+0xe0>)
 8007848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	2000088c 	.word	0x2000088c
 8007864:	20000d7c 	.word	0x20000d7c
 8007868:	20000d34 	.word	0x20000d34
 800786c:	20000d48 	.word	0x20000d48
 8007870:	20000d60 	.word	0x20000d60
 8007874:	20000d6c 	.word	0x20000d6c
 8007878:	20000d88 	.word	0x20000d88
 800787c:	e000ed04 	.word	0xe000ed04

08007880 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007888:	2300      	movs	r3, #0
 800788a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d016      	beq.n	80078c0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007892:	4b13      	ldr	r3, [pc, #76]	; (80078e0 <vTaskDelay+0x60>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <vTaskDelay+0x2e>
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	60bb      	str	r3, [r7, #8]
 80078ac:	e7fe      	b.n	80078ac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80078ae:	f000 f881 	bl	80079b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078b2:	2100      	movs	r1, #0
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fcfd 	bl	80082b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078ba:	f000 f889 	bl	80079d0 <xTaskResumeAll>
 80078be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d107      	bne.n	80078d6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80078c6:	4b07      	ldr	r3, [pc, #28]	; (80078e4 <vTaskDelay+0x64>)
 80078c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078d6:	bf00      	nop
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20000d88 	.word	0x20000d88
 80078e4:	e000ed04 	.word	0xe000ed04

080078e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08a      	sub	sp, #40	; 0x28
 80078ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078f6:	463a      	mov	r2, r7
 80078f8:	1d39      	adds	r1, r7, #4
 80078fa:	f107 0308 	add.w	r3, r7, #8
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fe ff04 	bl	800670c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	9202      	str	r2, [sp, #8]
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	2300      	movs	r3, #0
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	2300      	movs	r3, #0
 8007914:	460a      	mov	r2, r1
 8007916:	4921      	ldr	r1, [pc, #132]	; (800799c <vTaskStartScheduler+0xb4>)
 8007918:	4821      	ldr	r0, [pc, #132]	; (80079a0 <vTaskStartScheduler+0xb8>)
 800791a:	f7ff fda5 	bl	8007468 <xTaskCreateStatic>
 800791e:	4602      	mov	r2, r0
 8007920:	4b20      	ldr	r3, [pc, #128]	; (80079a4 <vTaskStartScheduler+0xbc>)
 8007922:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007924:	4b1f      	ldr	r3, [pc, #124]	; (80079a4 <vTaskStartScheduler+0xbc>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800792c:	2301      	movs	r3, #1
 800792e:	617b      	str	r3, [r7, #20]
 8007930:	e001      	b.n	8007936 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007932:	2300      	movs	r3, #0
 8007934:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d102      	bne.n	8007942 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800793c:	f000 fd0e 	bl	800835c <xTimerCreateTimerTask>
 8007940:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d117      	bne.n	8007978 <vTaskStartScheduler+0x90>
 8007948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800795a:	4b13      	ldr	r3, [pc, #76]	; (80079a8 <vTaskStartScheduler+0xc0>)
 800795c:	f04f 32ff 	mov.w	r2, #4294967295
 8007960:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007962:	4b12      	ldr	r3, [pc, #72]	; (80079ac <vTaskStartScheduler+0xc4>)
 8007964:	2201      	movs	r2, #1
 8007966:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007968:	4b11      	ldr	r3, [pc, #68]	; (80079b0 <vTaskStartScheduler+0xc8>)
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800796e:	f7f8 fcf2 	bl	8000356 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007972:	f001 f879 	bl	8008a68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007976:	e00d      	b.n	8007994 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	d109      	bne.n	8007994 <vTaskStartScheduler+0xac>
 8007980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	e7fe      	b.n	8007992 <vTaskStartScheduler+0xaa>
}
 8007994:	bf00      	nop
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	08009c1c 	.word	0x08009c1c
 80079a0:	08007ff5 	.word	0x08007ff5
 80079a4:	20000d84 	.word	0x20000d84
 80079a8:	20000d80 	.word	0x20000d80
 80079ac:	20000d6c 	.word	0x20000d6c
 80079b0:	20000d64 	.word	0x20000d64

080079b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80079b8:	4b04      	ldr	r3, [pc, #16]	; (80079cc <vTaskSuspendAll+0x18>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3301      	adds	r3, #1
 80079be:	4a03      	ldr	r2, [pc, #12]	; (80079cc <vTaskSuspendAll+0x18>)
 80079c0:	6013      	str	r3, [r2, #0]
}
 80079c2:	bf00      	nop
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	20000d88 	.word	0x20000d88

080079d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079de:	4b41      	ldr	r3, [pc, #260]	; (8007ae4 <xTaskResumeAll+0x114>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d109      	bne.n	80079fa <xTaskResumeAll+0x2a>
 80079e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	603b      	str	r3, [r7, #0]
 80079f8:	e7fe      	b.n	80079f8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079fa:	f001 f8a5 	bl	8008b48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079fe:	4b39      	ldr	r3, [pc, #228]	; (8007ae4 <xTaskResumeAll+0x114>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	4a37      	ldr	r2, [pc, #220]	; (8007ae4 <xTaskResumeAll+0x114>)
 8007a06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a08:	4b36      	ldr	r3, [pc, #216]	; (8007ae4 <xTaskResumeAll+0x114>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d162      	bne.n	8007ad6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a10:	4b35      	ldr	r3, [pc, #212]	; (8007ae8 <xTaskResumeAll+0x118>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d05e      	beq.n	8007ad6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a18:	e02f      	b.n	8007a7a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007a1a:	4b34      	ldr	r3, [pc, #208]	; (8007aec <xTaskResumeAll+0x11c>)
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3318      	adds	r3, #24
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe ff28 	bl	800687c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe ff23 	bl	800687c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3a:	4b2d      	ldr	r3, [pc, #180]	; (8007af0 <xTaskResumeAll+0x120>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d903      	bls.n	8007a4a <xTaskResumeAll+0x7a>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	4a2a      	ldr	r2, [pc, #168]	; (8007af0 <xTaskResumeAll+0x120>)
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4a27      	ldr	r2, [pc, #156]	; (8007af4 <xTaskResumeAll+0x124>)
 8007a58:	441a      	add	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4610      	mov	r0, r2
 8007a62:	f7fe feb0 	bl	80067c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a6a:	4b23      	ldr	r3, [pc, #140]	; (8007af8 <xTaskResumeAll+0x128>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d302      	bcc.n	8007a7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007a74:	4b21      	ldr	r3, [pc, #132]	; (8007afc <xTaskResumeAll+0x12c>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a7a:	4b1c      	ldr	r3, [pc, #112]	; (8007aec <xTaskResumeAll+0x11c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1cb      	bne.n	8007a1a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a88:	f000 fb66 	bl	8008158 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a8c:	4b1c      	ldr	r3, [pc, #112]	; (8007b00 <xTaskResumeAll+0x130>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d010      	beq.n	8007aba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a98:	f000 f844 	bl	8007b24 <xTaskIncrementTick>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007aa2:	4b16      	ldr	r3, [pc, #88]	; (8007afc <xTaskResumeAll+0x12c>)
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1f1      	bne.n	8007a98 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007ab4:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <xTaskResumeAll+0x130>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007aba:	4b10      	ldr	r3, [pc, #64]	; (8007afc <xTaskResumeAll+0x12c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d009      	beq.n	8007ad6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ac6:	4b0f      	ldr	r3, [pc, #60]	; (8007b04 <xTaskResumeAll+0x134>)
 8007ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ad6:	f001 f865 	bl	8008ba4 <vPortExitCritical>

	return xAlreadyYielded;
 8007ada:	68bb      	ldr	r3, [r7, #8]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20000d88 	.word	0x20000d88
 8007ae8:	20000d60 	.word	0x20000d60
 8007aec:	20000d20 	.word	0x20000d20
 8007af0:	20000d68 	.word	0x20000d68
 8007af4:	20000890 	.word	0x20000890
 8007af8:	2000088c 	.word	0x2000088c
 8007afc:	20000d74 	.word	0x20000d74
 8007b00:	20000d70 	.word	0x20000d70
 8007b04:	e000ed04 	.word	0xe000ed04

08007b08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b0e:	4b04      	ldr	r3, [pc, #16]	; (8007b20 <xTaskGetTickCount+0x18>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b14:	687b      	ldr	r3, [r7, #4]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bc80      	pop	{r7}
 8007b1e:	4770      	bx	lr
 8007b20:	20000d64 	.word	0x20000d64

08007b24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b2e:	4b51      	ldr	r3, [pc, #324]	; (8007c74 <xTaskIncrementTick+0x150>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f040 808d 	bne.w	8007c52 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b38:	4b4f      	ldr	r3, [pc, #316]	; (8007c78 <xTaskIncrementTick+0x154>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b40:	4a4d      	ldr	r2, [pc, #308]	; (8007c78 <xTaskIncrementTick+0x154>)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d11f      	bne.n	8007b8c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b4c:	4b4b      	ldr	r3, [pc, #300]	; (8007c7c <xTaskIncrementTick+0x158>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d009      	beq.n	8007b6a <xTaskIncrementTick+0x46>
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	603b      	str	r3, [r7, #0]
 8007b68:	e7fe      	b.n	8007b68 <xTaskIncrementTick+0x44>
 8007b6a:	4b44      	ldr	r3, [pc, #272]	; (8007c7c <xTaskIncrementTick+0x158>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	4b43      	ldr	r3, [pc, #268]	; (8007c80 <xTaskIncrementTick+0x15c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a41      	ldr	r2, [pc, #260]	; (8007c7c <xTaskIncrementTick+0x158>)
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	4a41      	ldr	r2, [pc, #260]	; (8007c80 <xTaskIncrementTick+0x15c>)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	4b41      	ldr	r3, [pc, #260]	; (8007c84 <xTaskIncrementTick+0x160>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	4a3f      	ldr	r2, [pc, #252]	; (8007c84 <xTaskIncrementTick+0x160>)
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	f000 fae6 	bl	8008158 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b8c:	4b3e      	ldr	r3, [pc, #248]	; (8007c88 <xTaskIncrementTick+0x164>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d34e      	bcc.n	8007c34 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b96:	4b39      	ldr	r3, [pc, #228]	; (8007c7c <xTaskIncrementTick+0x158>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <xTaskIncrementTick+0x80>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e000      	b.n	8007ba6 <xTaskIncrementTick+0x82>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d004      	beq.n	8007bb4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007baa:	4b37      	ldr	r3, [pc, #220]	; (8007c88 <xTaskIncrementTick+0x164>)
 8007bac:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb0:	601a      	str	r2, [r3, #0]
					break;
 8007bb2:	e03f      	b.n	8007c34 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007bb4:	4b31      	ldr	r3, [pc, #196]	; (8007c7c <xTaskIncrementTick+0x158>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d203      	bcs.n	8007bd4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bcc:	4a2e      	ldr	r2, [pc, #184]	; (8007c88 <xTaskIncrementTick+0x164>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6013      	str	r3, [r2, #0]
						break;
 8007bd2:	e02f      	b.n	8007c34 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe fe4f 	bl	800687c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	3318      	adds	r3, #24
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fe46 	bl	800687c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <xTaskIncrementTick+0x168>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d903      	bls.n	8007c04 <xTaskIncrementTick+0xe0>
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	4a22      	ldr	r2, [pc, #136]	; (8007c8c <xTaskIncrementTick+0x168>)
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4a1f      	ldr	r2, [pc, #124]	; (8007c90 <xTaskIncrementTick+0x16c>)
 8007c12:	441a      	add	r2, r3
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	3304      	adds	r3, #4
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f7fe fdd3 	bl	80067c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c24:	4b1b      	ldr	r3, [pc, #108]	; (8007c94 <xTaskIncrementTick+0x170>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d3b3      	bcc.n	8007b96 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c32:	e7b0      	b.n	8007b96 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c34:	4b17      	ldr	r3, [pc, #92]	; (8007c94 <xTaskIncrementTick+0x170>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3a:	4915      	ldr	r1, [pc, #84]	; (8007c90 <xTaskIncrementTick+0x16c>)
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d907      	bls.n	8007c5c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	e004      	b.n	8007c5c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007c52:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <xTaskIncrementTick+0x174>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3301      	adds	r3, #1
 8007c58:	4a0f      	ldr	r2, [pc, #60]	; (8007c98 <xTaskIncrementTick+0x174>)
 8007c5a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c5c:	4b0f      	ldr	r3, [pc, #60]	; (8007c9c <xTaskIncrementTick+0x178>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007c64:	2301      	movs	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007c68:	697b      	ldr	r3, [r7, #20]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20000d88 	.word	0x20000d88
 8007c78:	20000d64 	.word	0x20000d64
 8007c7c:	20000d18 	.word	0x20000d18
 8007c80:	20000d1c 	.word	0x20000d1c
 8007c84:	20000d78 	.word	0x20000d78
 8007c88:	20000d80 	.word	0x20000d80
 8007c8c:	20000d68 	.word	0x20000d68
 8007c90:	20000890 	.word	0x20000890
 8007c94:	2000088c 	.word	0x2000088c
 8007c98:	20000d70 	.word	0x20000d70
 8007c9c:	20000d74 	.word	0x20000d74

08007ca0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ca6:	4b33      	ldr	r3, [pc, #204]	; (8007d74 <vTaskSwitchContext+0xd4>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cae:	4b32      	ldr	r3, [pc, #200]	; (8007d78 <vTaskSwitchContext+0xd8>)
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cb4:	e059      	b.n	8007d6a <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8007cb6:	4b30      	ldr	r3, [pc, #192]	; (8007d78 <vTaskSwitchContext+0xd8>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007cbc:	f7f8 fb51 	bl	8000362 <getRunTimeCounterValue>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	4b2e      	ldr	r3, [pc, #184]	; (8007d7c <vTaskSwitchContext+0xdc>)
 8007cc4:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007cc6:	4b2d      	ldr	r3, [pc, #180]	; (8007d7c <vTaskSwitchContext+0xdc>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	4b2d      	ldr	r3, [pc, #180]	; (8007d80 <vTaskSwitchContext+0xe0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d909      	bls.n	8007ce6 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007cd2:	4b2c      	ldr	r3, [pc, #176]	; (8007d84 <vTaskSwitchContext+0xe4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8007cd8:	4a28      	ldr	r2, [pc, #160]	; (8007d7c <vTaskSwitchContext+0xdc>)
 8007cda:	6810      	ldr	r0, [r2, #0]
 8007cdc:	4a28      	ldr	r2, [pc, #160]	; (8007d80 <vTaskSwitchContext+0xe0>)
 8007cde:	6812      	ldr	r2, [r2, #0]
 8007ce0:	1a82      	subs	r2, r0, r2
 8007ce2:	440a      	add	r2, r1
 8007ce4:	669a      	str	r2, [r3, #104]	; 0x68
				ulTaskSwitchedInTime = ulTotalRunTime;
 8007ce6:	4b25      	ldr	r3, [pc, #148]	; (8007d7c <vTaskSwitchContext+0xdc>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a25      	ldr	r2, [pc, #148]	; (8007d80 <vTaskSwitchContext+0xe0>)
 8007cec:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007cee:	4b26      	ldr	r3, [pc, #152]	; (8007d88 <vTaskSwitchContext+0xe8>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	e00f      	b.n	8007d16 <vTaskSwitchContext+0x76>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d109      	bne.n	8007d10 <vTaskSwitchContext+0x70>
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	607b      	str	r3, [r7, #4]
 8007d0e:	e7fe      	b.n	8007d0e <vTaskSwitchContext+0x6e>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	491d      	ldr	r1, [pc, #116]	; (8007d8c <vTaskSwitchContext+0xec>)
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	440b      	add	r3, r1
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0e5      	beq.n	8007cf6 <vTaskSwitchContext+0x56>
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4a15      	ldr	r2, [pc, #84]	; (8007d8c <vTaskSwitchContext+0xec>)
 8007d36:	4413      	add	r3, r2
 8007d38:	60bb      	str	r3, [r7, #8]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	605a      	str	r2, [r3, #4]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d104      	bne.n	8007d5a <vTaskSwitchContext+0xba>
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	605a      	str	r2, [r3, #4]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	4a08      	ldr	r2, [pc, #32]	; (8007d84 <vTaskSwitchContext+0xe4>)
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	4a08      	ldr	r2, [pc, #32]	; (8007d88 <vTaskSwitchContext+0xe8>)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6013      	str	r3, [r2, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000d88 	.word	0x20000d88
 8007d78:	20000d74 	.word	0x20000d74
 8007d7c:	20000d90 	.word	0x20000d90
 8007d80:	20000d8c 	.word	0x20000d8c
 8007d84:	2000088c 	.word	0x2000088c
 8007d88:	20000d68 	.word	0x20000d68
 8007d8c:	20000890 	.word	0x20000890

08007d90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d109      	bne.n	8007db4 <vTaskPlaceOnEventList+0x24>
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	60fb      	str	r3, [r7, #12]
 8007db2:	e7fe      	b.n	8007db2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007db4:	4b07      	ldr	r3, [pc, #28]	; (8007dd4 <vTaskPlaceOnEventList+0x44>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3318      	adds	r3, #24
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7fe fd25 	bl	800680c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	6838      	ldr	r0, [r7, #0]
 8007dc6:	f000 fa75 	bl	80082b4 <prvAddCurrentTaskToDelayedList>
}
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	2000088c 	.word	0x2000088c

08007dd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <vTaskPlaceOnEventListRestricted+0x26>
 8007dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	617b      	str	r3, [r7, #20]
 8007dfc:	e7fe      	b.n	8007dfc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dfe:	4b0a      	ldr	r3, [pc, #40]	; (8007e28 <vTaskPlaceOnEventListRestricted+0x50>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3318      	adds	r3, #24
 8007e04:	4619      	mov	r1, r3
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f7fe fcdd 	bl	80067c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007e12:	f04f 33ff 	mov.w	r3, #4294967295
 8007e16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	68b8      	ldr	r0, [r7, #8]
 8007e1c:	f000 fa4a 	bl	80082b4 <prvAddCurrentTaskToDelayedList>
	}
 8007e20:	bf00      	nop
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	2000088c 	.word	0x2000088c

08007e2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d109      	bne.n	8007e56 <xTaskRemoveFromEventList+0x2a>
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e7fe      	b.n	8007e54 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	3318      	adds	r3, #24
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe fd0e 	bl	800687c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e60:	4b1d      	ldr	r3, [pc, #116]	; (8007ed8 <xTaskRemoveFromEventList+0xac>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d11d      	bne.n	8007ea4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe fd05 	bl	800687c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e76:	4b19      	ldr	r3, [pc, #100]	; (8007edc <xTaskRemoveFromEventList+0xb0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d903      	bls.n	8007e86 <xTaskRemoveFromEventList+0x5a>
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	4a16      	ldr	r2, [pc, #88]	; (8007edc <xTaskRemoveFromEventList+0xb0>)
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4a13      	ldr	r2, [pc, #76]	; (8007ee0 <xTaskRemoveFromEventList+0xb4>)
 8007e94:	441a      	add	r2, r3
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	f7fe fc92 	bl	80067c6 <vListInsertEnd>
 8007ea2:	e005      	b.n	8007eb0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	3318      	adds	r3, #24
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	480e      	ldr	r0, [pc, #56]	; (8007ee4 <xTaskRemoveFromEventList+0xb8>)
 8007eac:	f7fe fc8b 	bl	80067c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <xTaskRemoveFromEventList+0xbc>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d905      	bls.n	8007eca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ec2:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <xTaskRemoveFromEventList+0xc0>)
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	e001      	b.n	8007ece <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007ece:	697b      	ldr	r3, [r7, #20]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20000d88 	.word	0x20000d88
 8007edc:	20000d68 	.word	0x20000d68
 8007ee0:	20000890 	.word	0x20000890
 8007ee4:	20000d20 	.word	0x20000d20
 8007ee8:	2000088c 	.word	0x2000088c
 8007eec:	20000d74 	.word	0x20000d74

08007ef0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ef8:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <vTaskInternalSetTimeOutState+0x24>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f00:	4b05      	ldr	r3, [pc, #20]	; (8007f18 <vTaskInternalSetTimeOutState+0x28>)
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	605a      	str	r2, [r3, #4]
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bc80      	pop	{r7}
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000d78 	.word	0x20000d78
 8007f18:	20000d64 	.word	0x20000d64

08007f1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d109      	bne.n	8007f40 <xTaskCheckForTimeOut+0x24>
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	613b      	str	r3, [r7, #16]
 8007f3e:	e7fe      	b.n	8007f3e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d109      	bne.n	8007f5a <xTaskCheckForTimeOut+0x3e>
 8007f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4a:	f383 8811 	msr	BASEPRI, r3
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f3bf 8f4f 	dsb	sy
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	e7fe      	b.n	8007f58 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007f5a:	f000 fdf5 	bl	8008b48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f5e:	4b1d      	ldr	r3, [pc, #116]	; (8007fd4 <xTaskCheckForTimeOut+0xb8>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f76:	d102      	bne.n	8007f7e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	61fb      	str	r3, [r7, #28]
 8007f7c:	e023      	b.n	8007fc6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <xTaskCheckForTimeOut+0xbc>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d007      	beq.n	8007f9a <xTaskCheckForTimeOut+0x7e>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d302      	bcc.n	8007f9a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f94:	2301      	movs	r3, #1
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e015      	b.n	8007fc6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d20b      	bcs.n	8007fbc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	1ad2      	subs	r2, r2, r3
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff ff9d 	bl	8007ef0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	61fb      	str	r3, [r7, #28]
 8007fba:	e004      	b.n	8007fc6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fc6:	f000 fded 	bl	8008ba4 <vPortExitCritical>

	return xReturn;
 8007fca:	69fb      	ldr	r3, [r7, #28]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3720      	adds	r7, #32
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20000d64 	.word	0x20000d64
 8007fd8:	20000d78 	.word	0x20000d78

08007fdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fe0:	4b03      	ldr	r3, [pc, #12]	; (8007ff0 <vTaskMissedYield+0x14>)
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bc80      	pop	{r7}
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	20000d74 	.word	0x20000d74

08007ff4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ffc:	f000 f852 	bl	80080a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008000:	4b06      	ldr	r3, [pc, #24]	; (800801c <prvIdleTask+0x28>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d9f9      	bls.n	8007ffc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008008:	4b05      	ldr	r3, [pc, #20]	; (8008020 <prvIdleTask+0x2c>)
 800800a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008018:	e7f0      	b.n	8007ffc <prvIdleTask+0x8>
 800801a:	bf00      	nop
 800801c:	20000890 	.word	0x20000890
 8008020:	e000ed04 	.word	0xe000ed04

08008024 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800802a:	2300      	movs	r3, #0
 800802c:	607b      	str	r3, [r7, #4]
 800802e:	e00c      	b.n	800804a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4a12      	ldr	r2, [pc, #72]	; (8008084 <prvInitialiseTaskLists+0x60>)
 800803c:	4413      	add	r3, r2
 800803e:	4618      	mov	r0, r3
 8008040:	f7fe fb96 	bl	8006770 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3301      	adds	r3, #1
 8008048:	607b      	str	r3, [r7, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b37      	cmp	r3, #55	; 0x37
 800804e:	d9ef      	bls.n	8008030 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008050:	480d      	ldr	r0, [pc, #52]	; (8008088 <prvInitialiseTaskLists+0x64>)
 8008052:	f7fe fb8d 	bl	8006770 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008056:	480d      	ldr	r0, [pc, #52]	; (800808c <prvInitialiseTaskLists+0x68>)
 8008058:	f7fe fb8a 	bl	8006770 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800805c:	480c      	ldr	r0, [pc, #48]	; (8008090 <prvInitialiseTaskLists+0x6c>)
 800805e:	f7fe fb87 	bl	8006770 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008062:	480c      	ldr	r0, [pc, #48]	; (8008094 <prvInitialiseTaskLists+0x70>)
 8008064:	f7fe fb84 	bl	8006770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008068:	480b      	ldr	r0, [pc, #44]	; (8008098 <prvInitialiseTaskLists+0x74>)
 800806a:	f7fe fb81 	bl	8006770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800806e:	4b0b      	ldr	r3, [pc, #44]	; (800809c <prvInitialiseTaskLists+0x78>)
 8008070:	4a05      	ldr	r2, [pc, #20]	; (8008088 <prvInitialiseTaskLists+0x64>)
 8008072:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008074:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <prvInitialiseTaskLists+0x7c>)
 8008076:	4a05      	ldr	r2, [pc, #20]	; (800808c <prvInitialiseTaskLists+0x68>)
 8008078:	601a      	str	r2, [r3, #0]
}
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000890 	.word	0x20000890
 8008088:	20000cf0 	.word	0x20000cf0
 800808c:	20000d04 	.word	0x20000d04
 8008090:	20000d20 	.word	0x20000d20
 8008094:	20000d34 	.word	0x20000d34
 8008098:	20000d4c 	.word	0x20000d4c
 800809c:	20000d18 	.word	0x20000d18
 80080a0:	20000d1c 	.word	0x20000d1c

080080a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080aa:	e019      	b.n	80080e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080ac:	f000 fd4c 	bl	8008b48 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80080b0:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <prvCheckTasksWaitingTermination+0x4c>)
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3304      	adds	r3, #4
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fe fbdd 	bl	800687c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080c2:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <prvCheckTasksWaitingTermination+0x50>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	4a0a      	ldr	r2, [pc, #40]	; (80080f4 <prvCheckTasksWaitingTermination+0x50>)
 80080ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <prvCheckTasksWaitingTermination+0x54>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	4a09      	ldr	r2, [pc, #36]	; (80080f8 <prvCheckTasksWaitingTermination+0x54>)
 80080d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080d6:	f000 fd65 	bl	8008ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f80e 	bl	80080fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080e0:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <prvCheckTasksWaitingTermination+0x54>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e1      	bne.n	80080ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080e8:	bf00      	nop
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20000d34 	.word	0x20000d34
 80080f4:	20000d60 	.word	0x20000d60
 80080f8:	20000d48 	.word	0x20000d48

080080fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800810a:	2b00      	cmp	r3, #0
 800810c:	d108      	bne.n	8008120 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008112:	4618      	mov	r0, r3
 8008114:	f000 fed0 	bl	8008eb8 <vPortFree>
				vPortFree( pxTCB );
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fecd 	bl	8008eb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800811e:	e017      	b.n	8008150 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008126:	2b01      	cmp	r3, #1
 8008128:	d103      	bne.n	8008132 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fec4 	bl	8008eb8 <vPortFree>
	}
 8008130:	e00e      	b.n	8008150 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008138:	2b02      	cmp	r3, #2
 800813a:	d009      	beq.n	8008150 <prvDeleteTCB+0x54>
 800813c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	e7fe      	b.n	800814e <prvDeleteTCB+0x52>
	}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800815e:	4b0e      	ldr	r3, [pc, #56]	; (8008198 <prvResetNextTaskUnblockTime+0x40>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <prvResetNextTaskUnblockTime+0x14>
 8008168:	2301      	movs	r3, #1
 800816a:	e000      	b.n	800816e <prvResetNextTaskUnblockTime+0x16>
 800816c:	2300      	movs	r3, #0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d004      	beq.n	800817c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008172:	4b0a      	ldr	r3, [pc, #40]	; (800819c <prvResetNextTaskUnblockTime+0x44>)
 8008174:	f04f 32ff 	mov.w	r2, #4294967295
 8008178:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800817a:	e008      	b.n	800818e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800817c:	4b06      	ldr	r3, [pc, #24]	; (8008198 <prvResetNextTaskUnblockTime+0x40>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	4a04      	ldr	r2, [pc, #16]	; (800819c <prvResetNextTaskUnblockTime+0x44>)
 800818c:	6013      	str	r3, [r2, #0]
}
 800818e:	bf00      	nop
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	bc80      	pop	{r7}
 8008196:	4770      	bx	lr
 8008198:	20000d18 	.word	0x20000d18
 800819c:	20000d80 	.word	0x20000d80

080081a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081a6:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <xTaskGetSchedulerState+0x34>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d102      	bne.n	80081b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081ae:	2301      	movs	r3, #1
 80081b0:	607b      	str	r3, [r7, #4]
 80081b2:	e008      	b.n	80081c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081b4:	4b08      	ldr	r3, [pc, #32]	; (80081d8 <xTaskGetSchedulerState+0x38>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d102      	bne.n	80081c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081bc:	2302      	movs	r3, #2
 80081be:	607b      	str	r3, [r7, #4]
 80081c0:	e001      	b.n	80081c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081c2:	2300      	movs	r3, #0
 80081c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081c6:	687b      	ldr	r3, [r7, #4]
	}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc80      	pop	{r7}
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20000d6c 	.word	0x20000d6c
 80081d8:	20000d88 	.word	0x20000d88

080081dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081e8:	2300      	movs	r3, #0
 80081ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d054      	beq.n	800829c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081f2:	4b2d      	ldr	r3, [pc, #180]	; (80082a8 <xTaskPriorityDisinherit+0xcc>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d009      	beq.n	8008210 <xTaskPriorityDisinherit+0x34>
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	60fb      	str	r3, [r7, #12]
 800820e:	e7fe      	b.n	800820e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008214:	2b00      	cmp	r3, #0
 8008216:	d109      	bne.n	800822c <xTaskPriorityDisinherit+0x50>
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	e7fe      	b.n	800822a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008230:	1e5a      	subs	r2, r3, #1
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	665a      	str	r2, [r3, #100]	; 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800823e:	429a      	cmp	r2, r3
 8008240:	d02c      	beq.n	800829c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008246:	2b00      	cmp	r3, #0
 8008248:	d128      	bne.n	800829c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	3304      	adds	r3, #4
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe fb14 	bl	800687c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826c:	4b0f      	ldr	r3, [pc, #60]	; (80082ac <xTaskPriorityDisinherit+0xd0>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d903      	bls.n	800827c <xTaskPriorityDisinherit+0xa0>
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008278:	4a0c      	ldr	r2, [pc, #48]	; (80082ac <xTaskPriorityDisinherit+0xd0>)
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008280:	4613      	mov	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4a09      	ldr	r2, [pc, #36]	; (80082b0 <xTaskPriorityDisinherit+0xd4>)
 800828a:	441a      	add	r2, r3
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	3304      	adds	r3, #4
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f7fe fa97 	bl	80067c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008298:	2301      	movs	r3, #1
 800829a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800829c:	697b      	ldr	r3, [r7, #20]
	}
 800829e:	4618      	mov	r0, r3
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	2000088c 	.word	0x2000088c
 80082ac:	20000d68 	.word	0x20000d68
 80082b0:	20000890 	.word	0x20000890

080082b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082be:	4b21      	ldr	r3, [pc, #132]	; (8008344 <prvAddCurrentTaskToDelayedList+0x90>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082c4:	4b20      	ldr	r3, [pc, #128]	; (8008348 <prvAddCurrentTaskToDelayedList+0x94>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3304      	adds	r3, #4
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe fad6 	bl	800687c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d6:	d10a      	bne.n	80082ee <prvAddCurrentTaskToDelayedList+0x3a>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d007      	beq.n	80082ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082de:	4b1a      	ldr	r3, [pc, #104]	; (8008348 <prvAddCurrentTaskToDelayedList+0x94>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3304      	adds	r3, #4
 80082e4:	4619      	mov	r1, r3
 80082e6:	4819      	ldr	r0, [pc, #100]	; (800834c <prvAddCurrentTaskToDelayedList+0x98>)
 80082e8:	f7fe fa6d 	bl	80067c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082ec:	e026      	b.n	800833c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4413      	add	r3, r2
 80082f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082f6:	4b14      	ldr	r3, [pc, #80]	; (8008348 <prvAddCurrentTaskToDelayedList+0x94>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	429a      	cmp	r2, r3
 8008304:	d209      	bcs.n	800831a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008306:	4b12      	ldr	r3, [pc, #72]	; (8008350 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <prvAddCurrentTaskToDelayedList+0x94>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3304      	adds	r3, #4
 8008310:	4619      	mov	r1, r3
 8008312:	4610      	mov	r0, r2
 8008314:	f7fe fa7a 	bl	800680c <vListInsert>
}
 8008318:	e010      	b.n	800833c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800831a:	4b0e      	ldr	r3, [pc, #56]	; (8008354 <prvAddCurrentTaskToDelayedList+0xa0>)
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <prvAddCurrentTaskToDelayedList+0x94>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3304      	adds	r3, #4
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f7fe fa70 	bl	800680c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800832c:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <prvAddCurrentTaskToDelayedList+0xa4>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	429a      	cmp	r2, r3
 8008334:	d202      	bcs.n	800833c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008336:	4a08      	ldr	r2, [pc, #32]	; (8008358 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	6013      	str	r3, [r2, #0]
}
 800833c:	bf00      	nop
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20000d64 	.word	0x20000d64
 8008348:	2000088c 	.word	0x2000088c
 800834c:	20000d4c 	.word	0x20000d4c
 8008350:	20000d1c 	.word	0x20000d1c
 8008354:	20000d18 	.word	0x20000d18
 8008358:	20000d80 	.word	0x20000d80

0800835c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08a      	sub	sp, #40	; 0x28
 8008360:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008362:	2300      	movs	r3, #0
 8008364:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008366:	f000 fac3 	bl	80088f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800836a:	4b1c      	ldr	r3, [pc, #112]	; (80083dc <xTimerCreateTimerTask+0x80>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d021      	beq.n	80083b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008376:	2300      	movs	r3, #0
 8008378:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800837a:	1d3a      	adds	r2, r7, #4
 800837c:	f107 0108 	add.w	r1, r7, #8
 8008380:	f107 030c 	add.w	r3, r7, #12
 8008384:	4618      	mov	r0, r3
 8008386:	f7fe f9d9 	bl	800673c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	9202      	str	r2, [sp, #8]
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	2302      	movs	r3, #2
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	2300      	movs	r3, #0
 800839a:	460a      	mov	r2, r1
 800839c:	4910      	ldr	r1, [pc, #64]	; (80083e0 <xTimerCreateTimerTask+0x84>)
 800839e:	4811      	ldr	r0, [pc, #68]	; (80083e4 <xTimerCreateTimerTask+0x88>)
 80083a0:	f7ff f862 	bl	8007468 <xTaskCreateStatic>
 80083a4:	4602      	mov	r2, r0
 80083a6:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <xTimerCreateTimerTask+0x8c>)
 80083a8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083aa:	4b0f      	ldr	r3, [pc, #60]	; (80083e8 <xTimerCreateTimerTask+0x8c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083b2:	2301      	movs	r3, #1
 80083b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d109      	bne.n	80083d0 <xTimerCreateTimerTask+0x74>
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	613b      	str	r3, [r7, #16]
 80083ce:	e7fe      	b.n	80083ce <xTimerCreateTimerTask+0x72>
	return xReturn;
 80083d0:	697b      	ldr	r3, [r7, #20]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3718      	adds	r7, #24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20000dc4 	.word	0x20000dc4
 80083e0:	08009c24 	.word	0x08009c24
 80083e4:	08008505 	.word	0x08008505
 80083e8:	20000dc8 	.word	0x20000dc8

080083ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08a      	sub	sp, #40	; 0x28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d109      	bne.n	8008418 <xTimerGenericCommand+0x2c>
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	623b      	str	r3, [r7, #32]
 8008416:	e7fe      	b.n	8008416 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008418:	4b19      	ldr	r3, [pc, #100]	; (8008480 <xTimerGenericCommand+0x94>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d02a      	beq.n	8008476 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2b05      	cmp	r3, #5
 8008430:	dc18      	bgt.n	8008464 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008432:	f7ff feb5 	bl	80081a0 <xTaskGetSchedulerState>
 8008436:	4603      	mov	r3, r0
 8008438:	2b02      	cmp	r3, #2
 800843a:	d109      	bne.n	8008450 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800843c:	4b10      	ldr	r3, [pc, #64]	; (8008480 <xTimerGenericCommand+0x94>)
 800843e:	6818      	ldr	r0, [r3, #0]
 8008440:	f107 0110 	add.w	r1, r7, #16
 8008444:	2300      	movs	r3, #0
 8008446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008448:	f7fe fbae 	bl	8006ba8 <xQueueGenericSend>
 800844c:	6278      	str	r0, [r7, #36]	; 0x24
 800844e:	e012      	b.n	8008476 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008450:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <xTimerGenericCommand+0x94>)
 8008452:	6818      	ldr	r0, [r3, #0]
 8008454:	f107 0110 	add.w	r1, r7, #16
 8008458:	2300      	movs	r3, #0
 800845a:	2200      	movs	r2, #0
 800845c:	f7fe fba4 	bl	8006ba8 <xQueueGenericSend>
 8008460:	6278      	str	r0, [r7, #36]	; 0x24
 8008462:	e008      	b.n	8008476 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008464:	4b06      	ldr	r3, [pc, #24]	; (8008480 <xTimerGenericCommand+0x94>)
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	f107 0110 	add.w	r1, r7, #16
 800846c:	2300      	movs	r3, #0
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	f7fe fc94 	bl	8006d9c <xQueueGenericSendFromISR>
 8008474:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008478:	4618      	mov	r0, r3
 800847a:	3728      	adds	r7, #40	; 0x28
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20000dc4 	.word	0x20000dc4

08008484 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af02      	add	r7, sp, #8
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800848e:	4b1c      	ldr	r3, [pc, #112]	; (8008500 <prvProcessExpiredTimer+0x7c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	3304      	adds	r3, #4
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe f9ed 	bl	800687c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d121      	bne.n	80084ee <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	699a      	ldr	r2, [r3, #24]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	18d1      	adds	r1, r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	6978      	ldr	r0, [r7, #20]
 80084b8:	f000 f8c8 	bl	800864c <prvInsertTimerInActiveList>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d015      	beq.n	80084ee <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084c2:	2300      	movs	r3, #0
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	2300      	movs	r3, #0
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	2100      	movs	r1, #0
 80084cc:	6978      	ldr	r0, [r7, #20]
 80084ce:	f7ff ff8d 	bl	80083ec <xTimerGenericCommand>
 80084d2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d109      	bne.n	80084ee <prvProcessExpiredTimer+0x6a>
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	e7fe      	b.n	80084ec <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	6978      	ldr	r0, [r7, #20]
 80084f4:	4798      	blx	r3
}
 80084f6:	bf00      	nop
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000dbc 	.word	0x20000dbc

08008504 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800850c:	f107 0308 	add.w	r3, r7, #8
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f857 	bl	80085c4 <prvGetNextExpireTime>
 8008516:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	4619      	mov	r1, r3
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f803 	bl	8008528 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008522:	f000 f8d5 	bl	80086d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008526:	e7f1      	b.n	800850c <prvTimerTask+0x8>

08008528 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008532:	f7ff fa3f 	bl	80079b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008536:	f107 0308 	add.w	r3, r7, #8
 800853a:	4618      	mov	r0, r3
 800853c:	f000 f866 	bl	800860c <prvSampleTimeNow>
 8008540:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d130      	bne.n	80085aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <prvProcessTimerOrBlockTask+0x3c>
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	429a      	cmp	r2, r3
 8008554:	d806      	bhi.n	8008564 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008556:	f7ff fa3b 	bl	80079d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800855a:	68f9      	ldr	r1, [r7, #12]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7ff ff91 	bl	8008484 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008562:	e024      	b.n	80085ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d008      	beq.n	800857c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800856a:	4b13      	ldr	r3, [pc, #76]	; (80085b8 <prvProcessTimerOrBlockTask+0x90>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	bf0c      	ite	eq
 8008574:	2301      	moveq	r3, #1
 8008576:	2300      	movne	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800857c:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <prvProcessTimerOrBlockTask+0x94>)
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	4619      	mov	r1, r3
 800858a:	f7fe ff39 	bl	8007400 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800858e:	f7ff fa1f 	bl	80079d0 <xTaskResumeAll>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10a      	bne.n	80085ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008598:	4b09      	ldr	r3, [pc, #36]	; (80085c0 <prvProcessTimerOrBlockTask+0x98>)
 800859a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	f3bf 8f6f 	isb	sy
}
 80085a8:	e001      	b.n	80085ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085aa:	f7ff fa11 	bl	80079d0 <xTaskResumeAll>
}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	20000dc0 	.word	0x20000dc0
 80085bc:	20000dc4 	.word	0x20000dc4
 80085c0:	e000ed04 	.word	0xe000ed04

080085c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085cc:	4b0e      	ldr	r3, [pc, #56]	; (8008608 <prvGetNextExpireTime+0x44>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	bf0c      	ite	eq
 80085d6:	2301      	moveq	r3, #1
 80085d8:	2300      	movne	r3, #0
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	461a      	mov	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d105      	bne.n	80085f6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085ea:	4b07      	ldr	r3, [pc, #28]	; (8008608 <prvGetNextExpireTime+0x44>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	e001      	b.n	80085fa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085fa:	68fb      	ldr	r3, [r7, #12]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	bc80      	pop	{r7}
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	20000dbc 	.word	0x20000dbc

0800860c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008614:	f7ff fa78 	bl	8007b08 <xTaskGetTickCount>
 8008618:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800861a:	4b0b      	ldr	r3, [pc, #44]	; (8008648 <prvSampleTimeNow+0x3c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	429a      	cmp	r2, r3
 8008622:	d205      	bcs.n	8008630 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008624:	f000 f904 	bl	8008830 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	e002      	b.n	8008636 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008636:	4a04      	ldr	r2, [pc, #16]	; (8008648 <prvSampleTimeNow+0x3c>)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800863c:	68fb      	ldr	r3, [r7, #12]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20000dcc 	.word	0x20000dcc

0800864c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
 8008658:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800865a:	2300      	movs	r3, #0
 800865c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	429a      	cmp	r2, r3
 8008670:	d812      	bhi.n	8008698 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	1ad2      	subs	r2, r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	429a      	cmp	r2, r3
 800867e:	d302      	bcc.n	8008686 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008680:	2301      	movs	r3, #1
 8008682:	617b      	str	r3, [r7, #20]
 8008684:	e01b      	b.n	80086be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008686:	4b10      	ldr	r3, [pc, #64]	; (80086c8 <prvInsertTimerInActiveList+0x7c>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3304      	adds	r3, #4
 800868e:	4619      	mov	r1, r3
 8008690:	4610      	mov	r0, r2
 8008692:	f7fe f8bb 	bl	800680c <vListInsert>
 8008696:	e012      	b.n	80086be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	429a      	cmp	r2, r3
 800869e:	d206      	bcs.n	80086ae <prvInsertTimerInActiveList+0x62>
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d302      	bcc.n	80086ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086a8:	2301      	movs	r3, #1
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	e007      	b.n	80086be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086ae:	4b07      	ldr	r3, [pc, #28]	; (80086cc <prvInsertTimerInActiveList+0x80>)
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3304      	adds	r3, #4
 80086b6:	4619      	mov	r1, r3
 80086b8:	4610      	mov	r0, r2
 80086ba:	f7fe f8a7 	bl	800680c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086be:	697b      	ldr	r3, [r7, #20]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3718      	adds	r7, #24
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000dc0 	.word	0x20000dc0
 80086cc:	20000dbc 	.word	0x20000dbc

080086d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08e      	sub	sp, #56	; 0x38
 80086d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086d6:	e099      	b.n	800880c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	da17      	bge.n	800870e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086de:	1d3b      	adds	r3, r7, #4
 80086e0:	3304      	adds	r3, #4
 80086e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d109      	bne.n	80086fe <prvProcessReceivedCommands+0x2e>
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	61fb      	str	r3, [r7, #28]
 80086fc:	e7fe      	b.n	80086fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008704:	6850      	ldr	r0, [r2, #4]
 8008706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008708:	6892      	ldr	r2, [r2, #8]
 800870a:	4611      	mov	r1, r2
 800870c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	db7a      	blt.n	800880a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d004      	beq.n	800872a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	3304      	adds	r3, #4
 8008724:	4618      	mov	r0, r3
 8008726:	f7fe f8a9 	bl	800687c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800872a:	463b      	mov	r3, r7
 800872c:	4618      	mov	r0, r3
 800872e:	f7ff ff6d 	bl	800860c <prvSampleTimeNow>
 8008732:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b09      	cmp	r3, #9
 8008738:	d868      	bhi.n	800880c <prvProcessReceivedCommands+0x13c>
 800873a:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <prvProcessReceivedCommands+0x70>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	08008769 	.word	0x08008769
 8008744:	08008769 	.word	0x08008769
 8008748:	08008769 	.word	0x08008769
 800874c:	0800880d 	.word	0x0800880d
 8008750:	080087c3 	.word	0x080087c3
 8008754:	080087f9 	.word	0x080087f9
 8008758:	08008769 	.word	0x08008769
 800875c:	08008769 	.word	0x08008769
 8008760:	0800880d 	.word	0x0800880d
 8008764:	080087c3 	.word	0x080087c3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	18d1      	adds	r1, r2, r3
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008776:	f7ff ff69 	bl	800864c <prvInsertTimerInActiveList>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d045      	beq.n	800880c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008786:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	69db      	ldr	r3, [r3, #28]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d13d      	bne.n	800880c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	441a      	add	r2, r3
 8008798:	2300      	movs	r3, #0
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	2300      	movs	r3, #0
 800879e:	2100      	movs	r1, #0
 80087a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087a2:	f7ff fe23 	bl	80083ec <xTimerGenericCommand>
 80087a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d12e      	bne.n	800880c <prvProcessReceivedCommands+0x13c>
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	61bb      	str	r3, [r7, #24]
 80087c0:	e7fe      	b.n	80087c0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d109      	bne.n	80087e4 <prvProcessReceivedCommands+0x114>
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	617b      	str	r3, [r7, #20]
 80087e2:	e7fe      	b.n	80087e2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	699a      	ldr	r2, [r3, #24]
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	18d1      	adds	r1, r2, r3
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087f2:	f7ff ff2b 	bl	800864c <prvInsertTimerInActiveList>
					break;
 80087f6:	e009      	b.n	800880c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d104      	bne.n	800880c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008804:	f000 fb58 	bl	8008eb8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008808:	e000      	b.n	800880c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800880a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800880c:	4b07      	ldr	r3, [pc, #28]	; (800882c <prvProcessReceivedCommands+0x15c>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	1d39      	adds	r1, r7, #4
 8008812:	2200      	movs	r2, #0
 8008814:	4618      	mov	r0, r3
 8008816:	f7fe fbdf 	bl	8006fd8 <xQueueReceive>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	f47f af5b 	bne.w	80086d8 <prvProcessReceivedCommands+0x8>
	}
}
 8008822:	bf00      	nop
 8008824:	3730      	adds	r7, #48	; 0x30
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000dc4 	.word	0x20000dc4

08008830 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b088      	sub	sp, #32
 8008834:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008836:	e044      	b.n	80088c2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008838:	4b2b      	ldr	r3, [pc, #172]	; (80088e8 <prvSwitchTimerLists+0xb8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008842:	4b29      	ldr	r3, [pc, #164]	; (80088e8 <prvSwitchTimerLists+0xb8>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3304      	adds	r3, #4
 8008850:	4618      	mov	r0, r3
 8008852:	f7fe f813 	bl	800687c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d12d      	bne.n	80088c2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	4413      	add	r3, r2
 800886e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	429a      	cmp	r2, r3
 8008876:	d90e      	bls.n	8008896 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008884:	4b18      	ldr	r3, [pc, #96]	; (80088e8 <prvSwitchTimerLists+0xb8>)
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3304      	adds	r3, #4
 800888c:	4619      	mov	r1, r3
 800888e:	4610      	mov	r0, r2
 8008890:	f7fd ffbc 	bl	800680c <vListInsert>
 8008894:	e015      	b.n	80088c2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008896:	2300      	movs	r3, #0
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	2300      	movs	r3, #0
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	2100      	movs	r1, #0
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7ff fda3 	bl	80083ec <xTimerGenericCommand>
 80088a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d109      	bne.n	80088c2 <prvSwitchTimerLists+0x92>
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	e7fe      	b.n	80088c0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088c2:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <prvSwitchTimerLists+0xb8>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1b5      	bne.n	8008838 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088cc:	4b06      	ldr	r3, [pc, #24]	; (80088e8 <prvSwitchTimerLists+0xb8>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088d2:	4b06      	ldr	r3, [pc, #24]	; (80088ec <prvSwitchTimerLists+0xbc>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a04      	ldr	r2, [pc, #16]	; (80088e8 <prvSwitchTimerLists+0xb8>)
 80088d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088da:	4a04      	ldr	r2, [pc, #16]	; (80088ec <prvSwitchTimerLists+0xbc>)
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	6013      	str	r3, [r2, #0]
}
 80088e0:	bf00      	nop
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20000dbc 	.word	0x20000dbc
 80088ec:	20000dc0 	.word	0x20000dc0

080088f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088f6:	f000 f927 	bl	8008b48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088fa:	4b15      	ldr	r3, [pc, #84]	; (8008950 <prvCheckForValidListAndQueue+0x60>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d120      	bne.n	8008944 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008902:	4814      	ldr	r0, [pc, #80]	; (8008954 <prvCheckForValidListAndQueue+0x64>)
 8008904:	f7fd ff34 	bl	8006770 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008908:	4813      	ldr	r0, [pc, #76]	; (8008958 <prvCheckForValidListAndQueue+0x68>)
 800890a:	f7fd ff31 	bl	8006770 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800890e:	4b13      	ldr	r3, [pc, #76]	; (800895c <prvCheckForValidListAndQueue+0x6c>)
 8008910:	4a10      	ldr	r2, [pc, #64]	; (8008954 <prvCheckForValidListAndQueue+0x64>)
 8008912:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008914:	4b12      	ldr	r3, [pc, #72]	; (8008960 <prvCheckForValidListAndQueue+0x70>)
 8008916:	4a10      	ldr	r2, [pc, #64]	; (8008958 <prvCheckForValidListAndQueue+0x68>)
 8008918:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800891a:	2300      	movs	r3, #0
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	4b11      	ldr	r3, [pc, #68]	; (8008964 <prvCheckForValidListAndQueue+0x74>)
 8008920:	4a11      	ldr	r2, [pc, #68]	; (8008968 <prvCheckForValidListAndQueue+0x78>)
 8008922:	2110      	movs	r1, #16
 8008924:	200a      	movs	r0, #10
 8008926:	f7fe f83b 	bl	80069a0 <xQueueGenericCreateStatic>
 800892a:	4602      	mov	r2, r0
 800892c:	4b08      	ldr	r3, [pc, #32]	; (8008950 <prvCheckForValidListAndQueue+0x60>)
 800892e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008930:	4b07      	ldr	r3, [pc, #28]	; (8008950 <prvCheckForValidListAndQueue+0x60>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008938:	4b05      	ldr	r3, [pc, #20]	; (8008950 <prvCheckForValidListAndQueue+0x60>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	490b      	ldr	r1, [pc, #44]	; (800896c <prvCheckForValidListAndQueue+0x7c>)
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe fd36 	bl	80073b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008944:	f000 f92e 	bl	8008ba4 <vPortExitCritical>
}
 8008948:	bf00      	nop
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	20000dc4 	.word	0x20000dc4
 8008954:	20000d94 	.word	0x20000d94
 8008958:	20000da8 	.word	0x20000da8
 800895c:	20000dbc 	.word	0x20000dbc
 8008960:	20000dc0 	.word	0x20000dc0
 8008964:	20000e70 	.word	0x20000e70
 8008968:	20000dd0 	.word	0x20000dd0
 800896c:	08009c2c 	.word	0x08009c2c

08008970 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	3b04      	subs	r3, #4
 8008980:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3b04      	subs	r3, #4
 800898e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f023 0201 	bic.w	r2, r3, #1
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3b04      	subs	r3, #4
 800899e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089a0:	4a08      	ldr	r2, [pc, #32]	; (80089c4 <pxPortInitialiseStack+0x54>)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3b14      	subs	r3, #20
 80089aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3b20      	subs	r3, #32
 80089b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089b8:	68fb      	ldr	r3, [r7, #12]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	bc80      	pop	{r7}
 80089c2:	4770      	bx	lr
 80089c4:	080089c9 	.word	0x080089c9

080089c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80089ce:	2300      	movs	r3, #0
 80089d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089d2:	4b10      	ldr	r3, [pc, #64]	; (8008a14 <prvTaskExitError+0x4c>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089da:	d009      	beq.n	80089f0 <prvTaskExitError+0x28>
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	e7fe      	b.n	80089ee <prvTaskExitError+0x26>
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a02:	bf00      	nop
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0fc      	beq.n	8008a04 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a0a:	bf00      	nop
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bc80      	pop	{r7}
 8008a12:	4770      	bx	lr
 8008a14:	2000011c 	.word	0x2000011c
	...

08008a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a20:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <pxCurrentTCBConst2>)
 8008a22:	6819      	ldr	r1, [r3, #0]
 8008a24:	6808      	ldr	r0, [r1, #0]
 8008a26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a2a:	f380 8809 	msr	PSP, r0
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f04f 0000 	mov.w	r0, #0
 8008a36:	f380 8811 	msr	BASEPRI, r0
 8008a3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008a3e:	4770      	bx	lr

08008a40 <pxCurrentTCBConst2>:
 8008a40:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a44:	bf00      	nop
 8008a46:	bf00      	nop

08008a48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008a48:	4806      	ldr	r0, [pc, #24]	; (8008a64 <prvPortStartFirstTask+0x1c>)
 8008a4a:	6800      	ldr	r0, [r0, #0]
 8008a4c:	6800      	ldr	r0, [r0, #0]
 8008a4e:	f380 8808 	msr	MSP, r0
 8008a52:	b662      	cpsie	i
 8008a54:	b661      	cpsie	f
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	df00      	svc	0
 8008a60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a62:	bf00      	nop
 8008a64:	e000ed08 	.word	0xe000ed08

08008a68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a6e:	4b31      	ldr	r3, [pc, #196]	; (8008b34 <xPortStartScheduler+0xcc>)
 8008a70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	22ff      	movs	r2, #255	; 0xff
 8008a7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a88:	78fb      	ldrb	r3, [r7, #3]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	4b29      	ldr	r3, [pc, #164]	; (8008b38 <xPortStartScheduler+0xd0>)
 8008a94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a96:	4b29      	ldr	r3, [pc, #164]	; (8008b3c <xPortStartScheduler+0xd4>)
 8008a98:	2207      	movs	r2, #7
 8008a9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a9c:	e009      	b.n	8008ab2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a9e:	4b27      	ldr	r3, [pc, #156]	; (8008b3c <xPortStartScheduler+0xd4>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	4a25      	ldr	r2, [pc, #148]	; (8008b3c <xPortStartScheduler+0xd4>)
 8008aa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008aa8:	78fb      	ldrb	r3, [r7, #3]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	005b      	lsls	r3, r3, #1
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ab2:	78fb      	ldrb	r3, [r7, #3]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aba:	2b80      	cmp	r3, #128	; 0x80
 8008abc:	d0ef      	beq.n	8008a9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008abe:	4b1f      	ldr	r3, [pc, #124]	; (8008b3c <xPortStartScheduler+0xd4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f1c3 0307 	rsb	r3, r3, #7
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d009      	beq.n	8008ade <xPortStartScheduler+0x76>
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	60bb      	str	r3, [r7, #8]
 8008adc:	e7fe      	b.n	8008adc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ade:	4b17      	ldr	r3, [pc, #92]	; (8008b3c <xPortStartScheduler+0xd4>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	021b      	lsls	r3, r3, #8
 8008ae4:	4a15      	ldr	r2, [pc, #84]	; (8008b3c <xPortStartScheduler+0xd4>)
 8008ae6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ae8:	4b14      	ldr	r3, [pc, #80]	; (8008b3c <xPortStartScheduler+0xd4>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008af0:	4a12      	ldr	r2, [pc, #72]	; (8008b3c <xPortStartScheduler+0xd4>)
 8008af2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008afc:	4b10      	ldr	r3, [pc, #64]	; (8008b40 <xPortStartScheduler+0xd8>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a0f      	ldr	r2, [pc, #60]	; (8008b40 <xPortStartScheduler+0xd8>)
 8008b02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b08:	4b0d      	ldr	r3, [pc, #52]	; (8008b40 <xPortStartScheduler+0xd8>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a0c      	ldr	r2, [pc, #48]	; (8008b40 <xPortStartScheduler+0xd8>)
 8008b0e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b14:	f000 f8b0 	bl	8008c78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b18:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <xPortStartScheduler+0xdc>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b1e:	f7ff ff93 	bl	8008a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b22:	f7ff f8bd 	bl	8007ca0 <vTaskSwitchContext>
	prvTaskExitError();
 8008b26:	f7ff ff4f 	bl	80089c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	e000e400 	.word	0xe000e400
 8008b38:	20000ec0 	.word	0x20000ec0
 8008b3c:	20000ec4 	.word	0x20000ec4
 8008b40:	e000ed20 	.word	0xe000ed20
 8008b44:	2000011c 	.word	0x2000011c

08008b48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b60:	4b0e      	ldr	r3, [pc, #56]	; (8008b9c <vPortEnterCritical+0x54>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3301      	adds	r3, #1
 8008b66:	4a0d      	ldr	r2, [pc, #52]	; (8008b9c <vPortEnterCritical+0x54>)
 8008b68:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b6a:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <vPortEnterCritical+0x54>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d10e      	bne.n	8008b90 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b72:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <vPortEnterCritical+0x58>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d009      	beq.n	8008b90 <vPortEnterCritical+0x48>
 8008b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	603b      	str	r3, [r7, #0]
 8008b8e:	e7fe      	b.n	8008b8e <vPortEnterCritical+0x46>
	}
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bc80      	pop	{r7}
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	2000011c 	.word	0x2000011c
 8008ba0:	e000ed04 	.word	0xe000ed04

08008ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008baa:	4b10      	ldr	r3, [pc, #64]	; (8008bec <vPortExitCritical+0x48>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d109      	bne.n	8008bc6 <vPortExitCritical+0x22>
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	607b      	str	r3, [r7, #4]
 8008bc4:	e7fe      	b.n	8008bc4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008bc6:	4b09      	ldr	r3, [pc, #36]	; (8008bec <vPortExitCritical+0x48>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	4a07      	ldr	r2, [pc, #28]	; (8008bec <vPortExitCritical+0x48>)
 8008bce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bd0:	4b06      	ldr	r3, [pc, #24]	; (8008bec <vPortExitCritical+0x48>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <vPortExitCritical+0x3e>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008be2:	bf00      	nop
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bc80      	pop	{r7}
 8008bea:	4770      	bx	lr
 8008bec:	2000011c 	.word	0x2000011c

08008bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008bf0:	f3ef 8009 	mrs	r0, PSP
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	4b0d      	ldr	r3, [pc, #52]	; (8008c30 <pxCurrentTCBConst>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c00:	6010      	str	r0, [r2, #0]
 8008c02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008c06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c0a:	f380 8811 	msr	BASEPRI, r0
 8008c0e:	f7ff f847 	bl	8007ca0 <vTaskSwitchContext>
 8008c12:	f04f 0000 	mov.w	r0, #0
 8008c16:	f380 8811 	msr	BASEPRI, r0
 8008c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c1e:	6819      	ldr	r1, [r3, #0]
 8008c20:	6808      	ldr	r0, [r1, #0]
 8008c22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c26:	f380 8809 	msr	PSP, r0
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	4770      	bx	lr

08008c30 <pxCurrentTCBConst>:
 8008c30:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop

08008c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c50:	f7fe ff68 	bl	8007b24 <xTaskIncrementTick>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c5a:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <xPortSysTickHandler+0x3c>)
 8008c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	2300      	movs	r3, #0
 8008c64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	e000ed04 	.word	0xe000ed04

08008c78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ca8 <vPortSetupTimerInterrupt+0x30>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c82:	4b0a      	ldr	r3, [pc, #40]	; (8008cac <vPortSetupTimerInterrupt+0x34>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c88:	4b09      	ldr	r3, [pc, #36]	; (8008cb0 <vPortSetupTimerInterrupt+0x38>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a09      	ldr	r2, [pc, #36]	; (8008cb4 <vPortSetupTimerInterrupt+0x3c>)
 8008c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c92:	099b      	lsrs	r3, r3, #6
 8008c94:	4a08      	ldr	r2, [pc, #32]	; (8008cb8 <vPortSetupTimerInterrupt+0x40>)
 8008c96:	3b01      	subs	r3, #1
 8008c98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c9a:	4b03      	ldr	r3, [pc, #12]	; (8008ca8 <vPortSetupTimerInterrupt+0x30>)
 8008c9c:	2207      	movs	r2, #7
 8008c9e:	601a      	str	r2, [r3, #0]
}
 8008ca0:	bf00      	nop
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr
 8008ca8:	e000e010 	.word	0xe000e010
 8008cac:	e000e018 	.word	0xe000e018
 8008cb0:	20000000 	.word	0x20000000
 8008cb4:	10624dd3 	.word	0x10624dd3
 8008cb8:	e000e014 	.word	0xe000e014

08008cbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cc2:	f3ef 8305 	mrs	r3, IPSR
 8008cc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b0f      	cmp	r3, #15
 8008ccc:	d913      	bls.n	8008cf6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cce:	4a15      	ldr	r2, [pc, #84]	; (8008d24 <vPortValidateInterruptPriority+0x68>)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cd8:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <vPortValidateInterruptPriority+0x6c>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	7afa      	ldrb	r2, [r7, #11]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d209      	bcs.n	8008cf6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	607b      	str	r3, [r7, #4]
 8008cf4:	e7fe      	b.n	8008cf4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cf6:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <vPortValidateInterruptPriority+0x70>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008cfe:	4b0c      	ldr	r3, [pc, #48]	; (8008d30 <vPortValidateInterruptPriority+0x74>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d909      	bls.n	8008d1a <vPortValidateInterruptPriority+0x5e>
 8008d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	e7fe      	b.n	8008d18 <vPortValidateInterruptPriority+0x5c>
	}
 8008d1a:	bf00      	nop
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr
 8008d24:	e000e3f0 	.word	0xe000e3f0
 8008d28:	20000ec0 	.word	0x20000ec0
 8008d2c:	e000ed0c 	.word	0xe000ed0c
 8008d30:	20000ec4 	.word	0x20000ec4

08008d34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08a      	sub	sp, #40	; 0x28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d40:	f7fe fe38 	bl	80079b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d44:	4b57      	ldr	r3, [pc, #348]	; (8008ea4 <pvPortMalloc+0x170>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d4c:	f000 f90c 	bl	8008f68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d50:	4b55      	ldr	r3, [pc, #340]	; (8008ea8 <pvPortMalloc+0x174>)
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4013      	ands	r3, r2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f040 808c 	bne.w	8008e76 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01c      	beq.n	8008d9e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008d64:	2208      	movs	r2, #8
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4413      	add	r3, r2
 8008d6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f003 0307 	and.w	r3, r3, #7
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d013      	beq.n	8008d9e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f023 0307 	bic.w	r3, r3, #7
 8008d7c:	3308      	adds	r3, #8
 8008d7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d009      	beq.n	8008d9e <pvPortMalloc+0x6a>
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	617b      	str	r3, [r7, #20]
 8008d9c:	e7fe      	b.n	8008d9c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d068      	beq.n	8008e76 <pvPortMalloc+0x142>
 8008da4:	4b41      	ldr	r3, [pc, #260]	; (8008eac <pvPortMalloc+0x178>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d863      	bhi.n	8008e76 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008dae:	4b40      	ldr	r3, [pc, #256]	; (8008eb0 <pvPortMalloc+0x17c>)
 8008db0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008db2:	4b3f      	ldr	r3, [pc, #252]	; (8008eb0 <pvPortMalloc+0x17c>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008db8:	e004      	b.n	8008dc4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d903      	bls.n	8008dd6 <pvPortMalloc+0xa2>
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1f1      	bne.n	8008dba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dd6:	4b33      	ldr	r3, [pc, #204]	; (8008ea4 <pvPortMalloc+0x170>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d04a      	beq.n	8008e76 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2208      	movs	r2, #8
 8008de6:	4413      	add	r3, r2
 8008de8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	1ad2      	subs	r2, r2, r3
 8008dfa:	2308      	movs	r3, #8
 8008dfc:	005b      	lsls	r3, r3, #1
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d91e      	bls.n	8008e40 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4413      	add	r3, r2
 8008e08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	f003 0307 	and.w	r3, r3, #7
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d009      	beq.n	8008e28 <pvPortMalloc+0xf4>
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	613b      	str	r3, [r7, #16]
 8008e26:	e7fe      	b.n	8008e26 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	1ad2      	subs	r2, r2, r3
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e3a:	69b8      	ldr	r0, [r7, #24]
 8008e3c:	f000 f8f6 	bl	800902c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e40:	4b1a      	ldr	r3, [pc, #104]	; (8008eac <pvPortMalloc+0x178>)
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	4a18      	ldr	r2, [pc, #96]	; (8008eac <pvPortMalloc+0x178>)
 8008e4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e4e:	4b17      	ldr	r3, [pc, #92]	; (8008eac <pvPortMalloc+0x178>)
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	4b18      	ldr	r3, [pc, #96]	; (8008eb4 <pvPortMalloc+0x180>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d203      	bcs.n	8008e62 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e5a:	4b14      	ldr	r3, [pc, #80]	; (8008eac <pvPortMalloc+0x178>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a15      	ldr	r2, [pc, #84]	; (8008eb4 <pvPortMalloc+0x180>)
 8008e60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	4b10      	ldr	r3, [pc, #64]	; (8008ea8 <pvPortMalloc+0x174>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	2200      	movs	r2, #0
 8008e74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e76:	f7fe fdab 	bl	80079d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	f003 0307 	and.w	r3, r3, #7
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d009      	beq.n	8008e98 <pvPortMalloc+0x164>
 8008e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	60fb      	str	r3, [r7, #12]
 8008e96:	e7fe      	b.n	8008e96 <pvPortMalloc+0x162>
	return pvReturn;
 8008e98:	69fb      	ldr	r3, [r7, #28]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3728      	adds	r7, #40	; 0x28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20002ed0 	.word	0x20002ed0
 8008ea8:	20002edc 	.word	0x20002edc
 8008eac:	20002ed4 	.word	0x20002ed4
 8008eb0:	20002ec8 	.word	0x20002ec8
 8008eb4:	20002ed8 	.word	0x20002ed8

08008eb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d046      	beq.n	8008f58 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008eca:	2308      	movs	r3, #8
 8008ecc:	425b      	negs	r3, r3
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	4b20      	ldr	r3, [pc, #128]	; (8008f60 <vPortFree+0xa8>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d109      	bne.n	8008efa <vPortFree+0x42>
 8008ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	60fb      	str	r3, [r7, #12]
 8008ef8:	e7fe      	b.n	8008ef8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d009      	beq.n	8008f16 <vPortFree+0x5e>
 8008f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	60bb      	str	r3, [r7, #8]
 8008f14:	e7fe      	b.n	8008f14 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <vPortFree+0xa8>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4013      	ands	r3, r2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d019      	beq.n	8008f58 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d115      	bne.n	8008f58 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <vPortFree+0xa8>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	43db      	mvns	r3, r3
 8008f36:	401a      	ands	r2, r3
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f3c:	f7fe fd3a 	bl	80079b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	685a      	ldr	r2, [r3, #4]
 8008f44:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <vPortFree+0xac>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4413      	add	r3, r2
 8008f4a:	4a06      	ldr	r2, [pc, #24]	; (8008f64 <vPortFree+0xac>)
 8008f4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f4e:	6938      	ldr	r0, [r7, #16]
 8008f50:	f000 f86c 	bl	800902c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f54:	f7fe fd3c 	bl	80079d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f58:	bf00      	nop
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20002edc 	.word	0x20002edc
 8008f64:	20002ed4 	.word	0x20002ed4

08008f68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f74:	4b27      	ldr	r3, [pc, #156]	; (8009014 <prvHeapInit+0xac>)
 8008f76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f003 0307 	and.w	r3, r3, #7
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00c      	beq.n	8008f9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3307      	adds	r3, #7
 8008f86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0307 	bic.w	r3, r3, #7
 8008f8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	4a1f      	ldr	r2, [pc, #124]	; (8009014 <prvHeapInit+0xac>)
 8008f98:	4413      	add	r3, r2
 8008f9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fa0:	4a1d      	ldr	r2, [pc, #116]	; (8009018 <prvHeapInit+0xb0>)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fa6:	4b1c      	ldr	r3, [pc, #112]	; (8009018 <prvHeapInit+0xb0>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fb4:	2208      	movs	r2, #8
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	1a9b      	subs	r3, r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f023 0307 	bic.w	r3, r3, #7
 8008fc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4a15      	ldr	r2, [pc, #84]	; (800901c <prvHeapInit+0xb4>)
 8008fc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fca:	4b14      	ldr	r3, [pc, #80]	; (800901c <prvHeapInit+0xb4>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fd2:	4b12      	ldr	r3, [pc, #72]	; (800901c <prvHeapInit+0xb4>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	1ad2      	subs	r2, r2, r3
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	; (800901c <prvHeapInit+0xb4>)
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	4a0a      	ldr	r2, [pc, #40]	; (8009020 <prvHeapInit+0xb8>)
 8008ff6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	4a09      	ldr	r2, [pc, #36]	; (8009024 <prvHeapInit+0xbc>)
 8008ffe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009000:	4b09      	ldr	r3, [pc, #36]	; (8009028 <prvHeapInit+0xc0>)
 8009002:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009006:	601a      	str	r2, [r3, #0]
}
 8009008:	bf00      	nop
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20000ec8 	.word	0x20000ec8
 8009018:	20002ec8 	.word	0x20002ec8
 800901c:	20002ed0 	.word	0x20002ed0
 8009020:	20002ed8 	.word	0x20002ed8
 8009024:	20002ed4 	.word	0x20002ed4
 8009028:	20002edc 	.word	0x20002edc

0800902c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009034:	4b27      	ldr	r3, [pc, #156]	; (80090d4 <prvInsertBlockIntoFreeList+0xa8>)
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	e002      	b.n	8009040 <prvInsertBlockIntoFreeList+0x14>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	429a      	cmp	r2, r3
 8009048:	d8f7      	bhi.n	800903a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	4413      	add	r3, r2
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	429a      	cmp	r2, r3
 800905a:	d108      	bne.n	800906e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	441a      	add	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	441a      	add	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	429a      	cmp	r2, r3
 8009080:	d118      	bne.n	80090b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	4b14      	ldr	r3, [pc, #80]	; (80090d8 <prvInsertBlockIntoFreeList+0xac>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d00d      	beq.n	80090aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	441a      	add	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	e008      	b.n	80090bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090aa:	4b0b      	ldr	r3, [pc, #44]	; (80090d8 <prvInsertBlockIntoFreeList+0xac>)
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	e003      	b.n	80090bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d002      	beq.n	80090ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090ca:	bf00      	nop
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bc80      	pop	{r7}
 80090d2:	4770      	bx	lr
 80090d4:	20002ec8 	.word	0x20002ec8
 80090d8:	20002ed0 	.word	0x20002ed0

080090dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090e0:	2200      	movs	r2, #0
 80090e2:	4912      	ldr	r1, [pc, #72]	; (800912c <MX_USB_DEVICE_Init+0x50>)
 80090e4:	4812      	ldr	r0, [pc, #72]	; (8009130 <MX_USB_DEVICE_Init+0x54>)
 80090e6:	f7fc f946 	bl	8005376 <USBD_Init>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090f0:	f7f7 fa0a 	bl	8000508 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090f4:	490f      	ldr	r1, [pc, #60]	; (8009134 <MX_USB_DEVICE_Init+0x58>)
 80090f6:	480e      	ldr	r0, [pc, #56]	; (8009130 <MX_USB_DEVICE_Init+0x54>)
 80090f8:	f7fc f968 	bl	80053cc <USBD_RegisterClass>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009102:	f7f7 fa01 	bl	8000508 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009106:	490c      	ldr	r1, [pc, #48]	; (8009138 <MX_USB_DEVICE_Init+0x5c>)
 8009108:	4809      	ldr	r0, [pc, #36]	; (8009130 <MX_USB_DEVICE_Init+0x54>)
 800910a:	f7fc f899 	bl	8005240 <USBD_CDC_RegisterInterface>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009114:	f7f7 f9f8 	bl	8000508 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009118:	4805      	ldr	r0, [pc, #20]	; (8009130 <MX_USB_DEVICE_Init+0x54>)
 800911a:	f7fc f970 	bl	80053fe <USBD_Start>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009124:	f7f7 f9f0 	bl	8000508 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009128:	bf00      	nop
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20000130 	.word	0x20000130
 8009130:	200031b4 	.word	0x200031b4
 8009134:	20000018 	.word	0x20000018
 8009138:	20000120 	.word	0x20000120

0800913c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009140:	2200      	movs	r2, #0
 8009142:	4905      	ldr	r1, [pc, #20]	; (8009158 <CDC_Init_FS+0x1c>)
 8009144:	4805      	ldr	r0, [pc, #20]	; (800915c <CDC_Init_FS+0x20>)
 8009146:	f7fc f891 	bl	800526c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800914a:	4905      	ldr	r1, [pc, #20]	; (8009160 <CDC_Init_FS+0x24>)
 800914c:	4803      	ldr	r0, [pc, #12]	; (800915c <CDC_Init_FS+0x20>)
 800914e:	f7fc f8a6 	bl	800529e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009152:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009154:	4618      	mov	r0, r3
 8009156:	bd80      	pop	{r7, pc}
 8009158:	200034b8 	.word	0x200034b8
 800915c:	200031b4 	.word	0x200031b4
 8009160:	20003478 	.word	0x20003478

08009164 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009164:	b480      	push	{r7}
 8009166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009168:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800916a:	4618      	mov	r0, r3
 800916c:	46bd      	mov	sp, r7
 800916e:	bc80      	pop	{r7}
 8009170:	4770      	bx	lr
	...

08009174 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	6039      	str	r1, [r7, #0]
 800917e:	71fb      	strb	r3, [r7, #7]
 8009180:	4613      	mov	r3, r2
 8009182:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	2b23      	cmp	r3, #35	; 0x23
 8009188:	d84a      	bhi.n	8009220 <CDC_Control_FS+0xac>
 800918a:	a201      	add	r2, pc, #4	; (adr r2, 8009190 <CDC_Control_FS+0x1c>)
 800918c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009190:	08009221 	.word	0x08009221
 8009194:	08009221 	.word	0x08009221
 8009198:	08009221 	.word	0x08009221
 800919c:	08009221 	.word	0x08009221
 80091a0:	08009221 	.word	0x08009221
 80091a4:	08009221 	.word	0x08009221
 80091a8:	08009221 	.word	0x08009221
 80091ac:	08009221 	.word	0x08009221
 80091b0:	08009221 	.word	0x08009221
 80091b4:	08009221 	.word	0x08009221
 80091b8:	08009221 	.word	0x08009221
 80091bc:	08009221 	.word	0x08009221
 80091c0:	08009221 	.word	0x08009221
 80091c4:	08009221 	.word	0x08009221
 80091c8:	08009221 	.word	0x08009221
 80091cc:	08009221 	.word	0x08009221
 80091d0:	08009221 	.word	0x08009221
 80091d4:	08009221 	.word	0x08009221
 80091d8:	08009221 	.word	0x08009221
 80091dc:	08009221 	.word	0x08009221
 80091e0:	08009221 	.word	0x08009221
 80091e4:	08009221 	.word	0x08009221
 80091e8:	08009221 	.word	0x08009221
 80091ec:	08009221 	.word	0x08009221
 80091f0:	08009221 	.word	0x08009221
 80091f4:	08009221 	.word	0x08009221
 80091f8:	08009221 	.word	0x08009221
 80091fc:	08009221 	.word	0x08009221
 8009200:	08009221 	.word	0x08009221
 8009204:	08009221 	.word	0x08009221
 8009208:	08009221 	.word	0x08009221
 800920c:	08009221 	.word	0x08009221
 8009210:	08009221 	.word	0x08009221
 8009214:	08009221 	.word	0x08009221
 8009218:	08009221 	.word	0x08009221
 800921c:	08009221 	.word	0x08009221
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009220:	bf00      	nop
  }

  return (USBD_OK);
 8009222:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009224:	4618      	mov	r0, r3
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	bc80      	pop	{r7}
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop

08009230 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);

	static portBASE_TYPE xHigherPriorityTaskWoken;
	  xHigherPriorityTaskWoken = pdFALSE; // Не переключать контекст
 800923a:	4b17      	ldr	r3, [pc, #92]	; (8009298 <CDC_Receive_FS+0x68>)
 800923c:	2200      	movs	r2, #0
 800923e:	601a      	str	r2, [r3, #0]

	xSemaphoreGiveFromISR(xSemaphoreBinary1,&xHigherPriorityTaskWoken);
 8009240:	4b16      	ldr	r3, [pc, #88]	; (800929c <CDC_Receive_FS+0x6c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4914      	ldr	r1, [pc, #80]	; (8009298 <CDC_Receive_FS+0x68>)
 8009246:	4618      	mov	r0, r3
 8009248:	f7fd fe3c 	bl	8006ec4 <xQueueGiveFromISR>

	if( xHigherPriorityTaskWoken == pdTRUE )
 800924c:	4b12      	ldr	r3, [pc, #72]	; (8009298 <CDC_Receive_FS+0x68>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d101      	bne.n	8009258 <CDC_Receive_FS+0x28>
	        используемого синтаксиса обратитесь к примерам, предоставленным
	        вместе с портом FreeRTOS. */
	     //portSWITCH_CONTEXT();
		//vTaskSwitchContext();
		//portYIELD_FROM_ISR(NULL);
		vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно это ошибка
 8009254:	f7fe fec2 	bl	8007fdc <vTaskMissedYield>

	  }

	memset(VCP_Rx_Buf, (int32_t) ' ', 64); // Очитска входного буфера
 8009258:	2240      	movs	r2, #64	; 0x40
 800925a:	2120      	movs	r1, #32
 800925c:	4810      	ldr	r0, [pc, #64]	; (80092a0 <CDC_Receive_FS+0x70>)
 800925e:	f000 fc32 	bl	8009ac6 <memset>


  strncpy(VCP_Rx_Buf, (char*)Buf, *Len); // Копирование данных в пользовательский буфер из буфера HAL
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	6879      	ldr	r1, [r7, #4]
 800926a:	480d      	ldr	r0, [pc, #52]	; (80092a0 <CDC_Receive_FS+0x70>)
 800926c:	f000 fc33 	bl	8009ad6 <strncpy>
  VCP_Rx_Buf[*Len] = 0; //Конец строки
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a0a      	ldr	r2, [pc, #40]	; (80092a0 <CDC_Receive_FS+0x70>)
 8009276:	2100      	movs	r1, #0
 8009278:	54d1      	strb	r1, [r2, r3]

  xQueueSendToBackFromISR(xQueue1, VCP_Rx_Buf, &xHigherPriorityTaskWoken);
 800927a:	4b0a      	ldr	r3, [pc, #40]	; (80092a4 <CDC_Receive_FS+0x74>)
 800927c:	6818      	ldr	r0, [r3, #0]
 800927e:	2300      	movs	r3, #0
 8009280:	4a05      	ldr	r2, [pc, #20]	; (8009298 <CDC_Receive_FS+0x68>)
 8009282:	4907      	ldr	r1, [pc, #28]	; (80092a0 <CDC_Receive_FS+0x70>)
 8009284:	f7fd fd8a 	bl	8006d9c <xQueueGenericSendFromISR>



  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009288:	4807      	ldr	r0, [pc, #28]	; (80092a8 <CDC_Receive_FS+0x78>)
 800928a:	f7fc f84a 	bl	8005322 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800928e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009290:	4618      	mov	r0, r3
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	20002ee0 	.word	0x20002ee0
 800929c:	20003160 	.word	0x20003160
 80092a0:	20003104 	.word	0x20003104
 80092a4:	20003164 	.word	0x20003164
 80092a8:	200031b4 	.word	0x200031b4

080092ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80092bc:	4b0d      	ldr	r3, [pc, #52]	; (80092f4 <CDC_Transmit_FS+0x48>)
 80092be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e00b      	b.n	80092ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092d2:	887b      	ldrh	r3, [r7, #2]
 80092d4:	461a      	mov	r2, r3
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	4806      	ldr	r0, [pc, #24]	; (80092f4 <CDC_Transmit_FS+0x48>)
 80092da:	f7fb ffc7 	bl	800526c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092de:	4805      	ldr	r0, [pc, #20]	; (80092f4 <CDC_Transmit_FS+0x48>)
 80092e0:	f7fb fff0 	bl	80052c4 <USBD_CDC_TransmitPacket>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	200031b4 	.word	0x200031b4

080092f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	4603      	mov	r3, r0
 8009300:	6039      	str	r1, [r7, #0]
 8009302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2212      	movs	r2, #18
 8009308:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800930a:	4b03      	ldr	r3, [pc, #12]	; (8009318 <USBD_FS_DeviceDescriptor+0x20>)
}
 800930c:	4618      	mov	r0, r3
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	bc80      	pop	{r7}
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	2000014c 	.word	0x2000014c

0800931c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	6039      	str	r1, [r7, #0]
 8009326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2204      	movs	r2, #4
 800932c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800932e:	4b03      	ldr	r3, [pc, #12]	; (800933c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009330:	4618      	mov	r0, r3
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	bc80      	pop	{r7}
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	20000160 	.word	0x20000160

08009340 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	6039      	str	r1, [r7, #0]
 800934a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800934c:	79fb      	ldrb	r3, [r7, #7]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d105      	bne.n	800935e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	4907      	ldr	r1, [pc, #28]	; (8009374 <USBD_FS_ProductStrDescriptor+0x34>)
 8009356:	4808      	ldr	r0, [pc, #32]	; (8009378 <USBD_FS_ProductStrDescriptor+0x38>)
 8009358:	f7fc ffbd 	bl	80062d6 <USBD_GetString>
 800935c:	e004      	b.n	8009368 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	4904      	ldr	r1, [pc, #16]	; (8009374 <USBD_FS_ProductStrDescriptor+0x34>)
 8009362:	4805      	ldr	r0, [pc, #20]	; (8009378 <USBD_FS_ProductStrDescriptor+0x38>)
 8009364:	f7fc ffb7 	bl	80062d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009368:	4b02      	ldr	r3, [pc, #8]	; (8009374 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	200034f8 	.word	0x200034f8
 8009378:	08009c34 	.word	0x08009c34

0800937c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	4603      	mov	r3, r0
 8009384:	6039      	str	r1, [r7, #0]
 8009386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	4904      	ldr	r1, [pc, #16]	; (800939c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800938c:	4804      	ldr	r0, [pc, #16]	; (80093a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800938e:	f7fc ffa2 	bl	80062d6 <USBD_GetString>
  return USBD_StrDesc;
 8009392:	4b02      	ldr	r3, [pc, #8]	; (800939c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009394:	4618      	mov	r0, r3
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	200034f8 	.word	0x200034f8
 80093a0:	08009c4c 	.word	0x08009c4c

080093a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4603      	mov	r3, r0
 80093ac:	6039      	str	r1, [r7, #0]
 80093ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	221a      	movs	r2, #26
 80093b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093b6:	f000 f843 	bl	8009440 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80093ba:	4b02      	ldr	r3, [pc, #8]	; (80093c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	20000164 	.word	0x20000164

080093c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	4603      	mov	r3, r0
 80093d0:	6039      	str	r1, [r7, #0]
 80093d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093d4:	79fb      	ldrb	r3, [r7, #7]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d105      	bne.n	80093e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093da:	683a      	ldr	r2, [r7, #0]
 80093dc:	4907      	ldr	r1, [pc, #28]	; (80093fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80093de:	4808      	ldr	r0, [pc, #32]	; (8009400 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093e0:	f7fc ff79 	bl	80062d6 <USBD_GetString>
 80093e4:	e004      	b.n	80093f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	4904      	ldr	r1, [pc, #16]	; (80093fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80093ea:	4805      	ldr	r0, [pc, #20]	; (8009400 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093ec:	f7fc ff73 	bl	80062d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093f0:	4b02      	ldr	r3, [pc, #8]	; (80093fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	200034f8 	.word	0x200034f8
 8009400:	08009c60 	.word	0x08009c60

08009404 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	4603      	mov	r3, r0
 800940c:	6039      	str	r1, [r7, #0]
 800940e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009410:	79fb      	ldrb	r3, [r7, #7]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d105      	bne.n	8009422 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	4907      	ldr	r1, [pc, #28]	; (8009438 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800941a:	4808      	ldr	r0, [pc, #32]	; (800943c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800941c:	f7fc ff5b 	bl	80062d6 <USBD_GetString>
 8009420:	e004      	b.n	800942c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	4904      	ldr	r1, [pc, #16]	; (8009438 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009426:	4805      	ldr	r0, [pc, #20]	; (800943c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009428:	f7fc ff55 	bl	80062d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800942c:	4b02      	ldr	r3, [pc, #8]	; (8009438 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	200034f8 	.word	0x200034f8
 800943c:	08009c6c 	.word	0x08009c6c

08009440 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009446:	4b0f      	ldr	r3, [pc, #60]	; (8009484 <Get_SerialNum+0x44>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800944c:	4b0e      	ldr	r3, [pc, #56]	; (8009488 <Get_SerialNum+0x48>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009452:	4b0e      	ldr	r3, [pc, #56]	; (800948c <Get_SerialNum+0x4c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4413      	add	r3, r2
 800945e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009466:	2208      	movs	r2, #8
 8009468:	4909      	ldr	r1, [pc, #36]	; (8009490 <Get_SerialNum+0x50>)
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 f814 	bl	8009498 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009470:	2204      	movs	r2, #4
 8009472:	4908      	ldr	r1, [pc, #32]	; (8009494 <Get_SerialNum+0x54>)
 8009474:	68b8      	ldr	r0, [r7, #8]
 8009476:	f000 f80f 	bl	8009498 <IntToUnicode>
  }
}
 800947a:	bf00      	nop
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	1ffff7e8 	.word	0x1ffff7e8
 8009488:	1ffff7ec 	.word	0x1ffff7ec
 800948c:	1ffff7f0 	.word	0x1ffff7f0
 8009490:	20000166 	.word	0x20000166
 8009494:	20000176 	.word	0x20000176

08009498 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009498:	b480      	push	{r7}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	4613      	mov	r3, r2
 80094a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80094a6:	2300      	movs	r3, #0
 80094a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094aa:	2300      	movs	r3, #0
 80094ac:	75fb      	strb	r3, [r7, #23]
 80094ae:	e027      	b.n	8009500 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	0f1b      	lsrs	r3, r3, #28
 80094b4:	2b09      	cmp	r3, #9
 80094b6:	d80b      	bhi.n	80094d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	0f1b      	lsrs	r3, r3, #28
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	7dfb      	ldrb	r3, [r7, #23]
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	4619      	mov	r1, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	440b      	add	r3, r1
 80094c8:	3230      	adds	r2, #48	; 0x30
 80094ca:	b2d2      	uxtb	r2, r2
 80094cc:	701a      	strb	r2, [r3, #0]
 80094ce:	e00a      	b.n	80094e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	0f1b      	lsrs	r3, r3, #28
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	7dfb      	ldrb	r3, [r7, #23]
 80094d8:	005b      	lsls	r3, r3, #1
 80094da:	4619      	mov	r1, r3
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	440b      	add	r3, r1
 80094e0:	3237      	adds	r2, #55	; 0x37
 80094e2:	b2d2      	uxtb	r2, r2
 80094e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	005b      	lsls	r3, r3, #1
 80094f0:	3301      	adds	r3, #1
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	4413      	add	r3, r2
 80094f6:	2200      	movs	r2, #0
 80094f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
 80094fc:	3301      	adds	r3, #1
 80094fe:	75fb      	strb	r3, [r7, #23]
 8009500:	7dfa      	ldrb	r2, [r7, #23]
 8009502:	79fb      	ldrb	r3, [r7, #7]
 8009504:	429a      	cmp	r2, r3
 8009506:	d3d3      	bcc.n	80094b0 <IntToUnicode+0x18>
  }
}
 8009508:	bf00      	nop
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	bc80      	pop	{r7}
 8009510:	4770      	bx	lr
	...

08009514 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a0d      	ldr	r2, [pc, #52]	; (8009558 <HAL_PCD_MspInit+0x44>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d113      	bne.n	800954e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009526:	4b0d      	ldr	r3, [pc, #52]	; (800955c <HAL_PCD_MspInit+0x48>)
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	4a0c      	ldr	r2, [pc, #48]	; (800955c <HAL_PCD_MspInit+0x48>)
 800952c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009530:	61d3      	str	r3, [r2, #28]
 8009532:	4b0a      	ldr	r3, [pc, #40]	; (800955c <HAL_PCD_MspInit+0x48>)
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800953a:	60fb      	str	r3, [r7, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800953e:	2200      	movs	r2, #0
 8009540:	2105      	movs	r1, #5
 8009542:	2014      	movs	r0, #20
 8009544:	f7f7 f9ad 	bl	80008a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009548:	2014      	movs	r0, #20
 800954a:	f7f7 f9c6 	bl	80008da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800954e:	bf00      	nop
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	40005c00 	.word	0x40005c00
 800955c:	40021000 	.word	0x40021000

08009560 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009574:	4619      	mov	r1, r3
 8009576:	4610      	mov	r0, r2
 8009578:	f7fb ff89 	bl	800548e <USBD_LL_SetupStage>
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009596:	78fa      	ldrb	r2, [r7, #3]
 8009598:	6879      	ldr	r1, [r7, #4]
 800959a:	4613      	mov	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	00db      	lsls	r3, r3, #3
 80095a2:	440b      	add	r3, r1
 80095a4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	4619      	mov	r1, r3
 80095ae:	f7fb ffb9 	bl	8005524 <USBD_LL_DataOutStage>
}
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	460b      	mov	r3, r1
 80095c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80095cc:	78fa      	ldrb	r2, [r7, #3]
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	4613      	mov	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	440b      	add	r3, r1
 80095da:	333c      	adds	r3, #60	; 0x3c
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	78fb      	ldrb	r3, [r7, #3]
 80095e0:	4619      	mov	r1, r3
 80095e2:	f7fc f810 	bl	8005606 <USBD_LL_DataInStage>
}
 80095e6:	bf00      	nop
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fc f920 	bl	8005842 <USBD_LL_SOF>
}
 8009602:	bf00      	nop
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009612:	2301      	movs	r3, #1
 8009614:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	2b02      	cmp	r3, #2
 800961c:	d001      	beq.n	8009622 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800961e:	f7f6 ff73 	bl	8000508 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009628:	7bfa      	ldrb	r2, [r7, #15]
 800962a:	4611      	mov	r1, r2
 800962c:	4618      	mov	r0, r3
 800962e:	f7fc f8d0 	bl	80057d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009638:	4618      	mov	r0, r3
 800963a:	f7fc f889 	bl	8005750 <USBD_LL_Reset>
}
 800963e:	bf00      	nop
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009656:	4618      	mov	r0, r3
 8009658:	f7fc f8ca 	bl	80057f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d005      	beq.n	8009670 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009664:	4b04      	ldr	r3, [pc, #16]	; (8009678 <HAL_PCD_SuspendCallback+0x30>)
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	4a03      	ldr	r2, [pc, #12]	; (8009678 <HAL_PCD_SuspendCallback+0x30>)
 800966a:	f043 0306 	orr.w	r3, r3, #6
 800966e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	e000ed00 	.word	0xe000ed00

0800967c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800968a:	4618      	mov	r0, r3
 800968c:	f7fc f8c4 	bl	8005818 <USBD_LL_Resume>
}
 8009690:	bf00      	nop
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80096a0:	4a28      	ldr	r2, [pc, #160]	; (8009744 <USBD_LL_Init+0xac>)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a26      	ldr	r2, [pc, #152]	; (8009744 <USBD_LL_Init+0xac>)
 80096ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80096b0:	4b24      	ldr	r3, [pc, #144]	; (8009744 <USBD_LL_Init+0xac>)
 80096b2:	4a25      	ldr	r2, [pc, #148]	; (8009748 <USBD_LL_Init+0xb0>)
 80096b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096b6:	4b23      	ldr	r3, [pc, #140]	; (8009744 <USBD_LL_Init+0xac>)
 80096b8:	2208      	movs	r2, #8
 80096ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096bc:	4b21      	ldr	r3, [pc, #132]	; (8009744 <USBD_LL_Init+0xac>)
 80096be:	2202      	movs	r2, #2
 80096c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096c2:	4b20      	ldr	r3, [pc, #128]	; (8009744 <USBD_LL_Init+0xac>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80096c8:	4b1e      	ldr	r3, [pc, #120]	; (8009744 <USBD_LL_Init+0xac>)
 80096ca:	2200      	movs	r2, #0
 80096cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096ce:	4b1d      	ldr	r3, [pc, #116]	; (8009744 <USBD_LL_Init+0xac>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80096d4:	481b      	ldr	r0, [pc, #108]	; (8009744 <USBD_LL_Init+0xac>)
 80096d6:	f7f7 faa6 	bl	8000c26 <HAL_PCD_Init>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80096e0:	f7f6 ff12 	bl	8000508 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096ea:	2318      	movs	r3, #24
 80096ec:	2200      	movs	r2, #0
 80096ee:	2100      	movs	r1, #0
 80096f0:	f7f8 fdda 	bl	80022a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096fa:	2358      	movs	r3, #88	; 0x58
 80096fc:	2200      	movs	r2, #0
 80096fe:	2180      	movs	r1, #128	; 0x80
 8009700:	f7f8 fdd2 	bl	80022a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800970a:	23c0      	movs	r3, #192	; 0xc0
 800970c:	2200      	movs	r2, #0
 800970e:	2181      	movs	r1, #129	; 0x81
 8009710:	f7f8 fdca 	bl	80022a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800971a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800971e:	2200      	movs	r2, #0
 8009720:	2101      	movs	r1, #1
 8009722:	f7f8 fdc1 	bl	80022a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800972c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009730:	2200      	movs	r2, #0
 8009732:	2182      	movs	r1, #130	; 0x82
 8009734:	f7f8 fdb8 	bl	80022a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	200036f8 	.word	0x200036f8
 8009748:	40005c00 	.word	0x40005c00

0800974c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009762:	4618      	mov	r0, r3
 8009764:	f7f7 fb6a 	bl	8000e3c <HAL_PCD_Start>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	4618      	mov	r0, r3
 8009770:	f000 f94e 	bl	8009a10 <USBD_Get_USB_Status>
 8009774:	4603      	mov	r3, r0
 8009776:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009778:	7bbb      	ldrb	r3, [r7, #14]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	4608      	mov	r0, r1
 800978c:	4611      	mov	r1, r2
 800978e:	461a      	mov	r2, r3
 8009790:	4603      	mov	r3, r0
 8009792:	70fb      	strb	r3, [r7, #3]
 8009794:	460b      	mov	r3, r1
 8009796:	70bb      	strb	r3, [r7, #2]
 8009798:	4613      	mov	r3, r2
 800979a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097aa:	78bb      	ldrb	r3, [r7, #2]
 80097ac:	883a      	ldrh	r2, [r7, #0]
 80097ae:	78f9      	ldrb	r1, [r7, #3]
 80097b0:	f7f7 fce4 	bl	800117c <HAL_PCD_EP_Open>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 f928 	bl	8009a10 <USBD_Get_USB_Status>
 80097c0:	4603      	mov	r3, r0
 80097c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	460b      	mov	r3, r1
 80097d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097e8:	78fa      	ldrb	r2, [r7, #3]
 80097ea:	4611      	mov	r1, r2
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7f7 fd2b 	bl	8001248 <HAL_PCD_EP_Close>
 80097f2:	4603      	mov	r3, r0
 80097f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 f909 	bl	8009a10 <USBD_Get_USB_Status>
 80097fe:	4603      	mov	r3, r0
 8009800:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009802:	7bbb      	ldrb	r3, [r7, #14]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009826:	78fa      	ldrb	r2, [r7, #3]
 8009828:	4611      	mov	r1, r2
 800982a:	4618      	mov	r0, r3
 800982c:	f7f7 fdeb 	bl	8001406 <HAL_PCD_EP_SetStall>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	4618      	mov	r0, r3
 8009838:	f000 f8ea 	bl	8009a10 <USBD_Get_USB_Status>
 800983c:	4603      	mov	r3, r0
 800983e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009840:	7bbb      	ldrb	r3, [r7, #14]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	460b      	mov	r3, r1
 8009854:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009864:	78fa      	ldrb	r2, [r7, #3]
 8009866:	4611      	mov	r1, r2
 8009868:	4618      	mov	r0, r3
 800986a:	f7f7 fe2c 	bl	80014c6 <HAL_PCD_EP_ClrStall>
 800986e:	4603      	mov	r3, r0
 8009870:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	4618      	mov	r0, r3
 8009876:	f000 f8cb 	bl	8009a10 <USBD_Get_USB_Status>
 800987a:	4603      	mov	r3, r0
 800987c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800987e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800989a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800989c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	da0c      	bge.n	80098be <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098aa:	68f9      	ldr	r1, [r7, #12]
 80098ac:	1c5a      	adds	r2, r3, #1
 80098ae:	4613      	mov	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	440b      	add	r3, r1
 80098b8:	3302      	adds	r3, #2
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	e00b      	b.n	80098d6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098be:	78fb      	ldrb	r3, [r7, #3]
 80098c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098c4:	68f9      	ldr	r1, [r7, #12]
 80098c6:	4613      	mov	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	00db      	lsls	r3, r3, #3
 80098ce:	440b      	add	r3, r1
 80098d0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80098d4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	bc80      	pop	{r7}
 80098de:	4770      	bx	lr

080098e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098fa:	78fa      	ldrb	r2, [r7, #3]
 80098fc:	4611      	mov	r1, r2
 80098fe:	4618      	mov	r0, r3
 8009900:	f7f7 fc17 	bl	8001132 <HAL_PCD_SetAddress>
 8009904:	4603      	mov	r3, r0
 8009906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	4618      	mov	r0, r3
 800990c:	f000 f880 	bl	8009a10 <USBD_Get_USB_Status>
 8009910:	4603      	mov	r3, r0
 8009912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009914:	7bbb      	ldrb	r3, [r7, #14]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b086      	sub	sp, #24
 8009922:	af00      	add	r7, sp, #0
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	461a      	mov	r2, r3
 800992a:	460b      	mov	r3, r1
 800992c:	72fb      	strb	r3, [r7, #11]
 800992e:	4613      	mov	r3, r2
 8009930:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009940:	893b      	ldrh	r3, [r7, #8]
 8009942:	7af9      	ldrb	r1, [r7, #11]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	f7f7 fd1b 	bl	8001380 <HAL_PCD_EP_Transmit>
 800994a:	4603      	mov	r3, r0
 800994c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800994e:	7dfb      	ldrb	r3, [r7, #23]
 8009950:	4618      	mov	r0, r3
 8009952:	f000 f85d 	bl	8009a10 <USBD_Get_USB_Status>
 8009956:	4603      	mov	r3, r0
 8009958:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800995a:	7dbb      	ldrb	r3, [r7, #22]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	607a      	str	r2, [r7, #4]
 800996e:	461a      	mov	r2, r3
 8009970:	460b      	mov	r3, r1
 8009972:	72fb      	strb	r3, [r7, #11]
 8009974:	4613      	mov	r3, r2
 8009976:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009986:	893b      	ldrh	r3, [r7, #8]
 8009988:	7af9      	ldrb	r1, [r7, #11]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	f7f7 fca4 	bl	80012d8 <HAL_PCD_EP_Receive>
 8009990:	4603      	mov	r3, r0
 8009992:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009994:	7dfb      	ldrb	r3, [r7, #23]
 8009996:	4618      	mov	r0, r3
 8009998:	f000 f83a 	bl	8009a10 <USBD_Get_USB_Status>
 800999c:	4603      	mov	r3, r0
 800999e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b082      	sub	sp, #8
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	460b      	mov	r3, r1
 80099b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099bc:	78fa      	ldrb	r2, [r7, #3]
 80099be:	4611      	mov	r1, r2
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7f7 fcc6 	bl	8001352 <HAL_PCD_EP_GetRxCount>
 80099c6:	4603      	mov	r3, r0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099d8:	4b02      	ldr	r3, [pc, #8]	; (80099e4 <USBD_static_malloc+0x14>)
}
 80099da:	4618      	mov	r0, r3
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	bc80      	pop	{r7}
 80099e2:	4770      	bx	lr
 80099e4:	20002ee4 	.word	0x20002ee4

080099e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]

}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bc80      	pop	{r7}
 80099f8:	4770      	bx	lr

080099fa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099fa:	b480      	push	{r7}
 80099fc:	b083      	sub	sp, #12
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	460b      	mov	r3, r1
 8009a04:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009a06:	bf00      	nop
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bc80      	pop	{r7}
 8009a0e:	4770      	bx	lr

08009a10 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d817      	bhi.n	8009a54 <USBD_Get_USB_Status+0x44>
 8009a24:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <USBD_Get_USB_Status+0x1c>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009a3d 	.word	0x08009a3d
 8009a30:	08009a43 	.word	0x08009a43
 8009a34:	08009a49 	.word	0x08009a49
 8009a38:	08009a4f 	.word	0x08009a4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a40:	e00b      	b.n	8009a5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a42:	2302      	movs	r3, #2
 8009a44:	73fb      	strb	r3, [r7, #15]
    break;
 8009a46:	e008      	b.n	8009a5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a4c:	e005      	b.n	8009a5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a4e:	2302      	movs	r3, #2
 8009a50:	73fb      	strb	r3, [r7, #15]
    break;
 8009a52:	e002      	b.n	8009a5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a54:	2302      	movs	r3, #2
 8009a56:	73fb      	strb	r3, [r7, #15]
    break;
 8009a58:	bf00      	nop
  }
  return usb_status;
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bc80      	pop	{r7}
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop

08009a68 <__libc_init_array>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	2500      	movs	r5, #0
 8009a6c:	4e0c      	ldr	r6, [pc, #48]	; (8009aa0 <__libc_init_array+0x38>)
 8009a6e:	4c0d      	ldr	r4, [pc, #52]	; (8009aa4 <__libc_init_array+0x3c>)
 8009a70:	1ba4      	subs	r4, r4, r6
 8009a72:	10a4      	asrs	r4, r4, #2
 8009a74:	42a5      	cmp	r5, r4
 8009a76:	d109      	bne.n	8009a8c <__libc_init_array+0x24>
 8009a78:	f000 f842 	bl	8009b00 <_init>
 8009a7c:	2500      	movs	r5, #0
 8009a7e:	4e0a      	ldr	r6, [pc, #40]	; (8009aa8 <__libc_init_array+0x40>)
 8009a80:	4c0a      	ldr	r4, [pc, #40]	; (8009aac <__libc_init_array+0x44>)
 8009a82:	1ba4      	subs	r4, r4, r6
 8009a84:	10a4      	asrs	r4, r4, #2
 8009a86:	42a5      	cmp	r5, r4
 8009a88:	d105      	bne.n	8009a96 <__libc_init_array+0x2e>
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
 8009a8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a90:	4798      	blx	r3
 8009a92:	3501      	adds	r5, #1
 8009a94:	e7ee      	b.n	8009a74 <__libc_init_array+0xc>
 8009a96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a9a:	4798      	blx	r3
 8009a9c:	3501      	adds	r5, #1
 8009a9e:	e7f2      	b.n	8009a86 <__libc_init_array+0x1e>
 8009aa0:	08009cb0 	.word	0x08009cb0
 8009aa4:	08009cb0 	.word	0x08009cb0
 8009aa8:	08009cb0 	.word	0x08009cb0
 8009aac:	08009cb4 	.word	0x08009cb4

08009ab0 <memcpy>:
 8009ab0:	b510      	push	{r4, lr}
 8009ab2:	1e43      	subs	r3, r0, #1
 8009ab4:	440a      	add	r2, r1
 8009ab6:	4291      	cmp	r1, r2
 8009ab8:	d100      	bne.n	8009abc <memcpy+0xc>
 8009aba:	bd10      	pop	{r4, pc}
 8009abc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ac0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ac4:	e7f7      	b.n	8009ab6 <memcpy+0x6>

08009ac6 <memset>:
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	4402      	add	r2, r0
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d100      	bne.n	8009ad0 <memset+0xa>
 8009ace:	4770      	bx	lr
 8009ad0:	f803 1b01 	strb.w	r1, [r3], #1
 8009ad4:	e7f9      	b.n	8009aca <memset+0x4>

08009ad6 <strncpy>:
 8009ad6:	b570      	push	{r4, r5, r6, lr}
 8009ad8:	4604      	mov	r4, r0
 8009ada:	3901      	subs	r1, #1
 8009adc:	b902      	cbnz	r2, 8009ae0 <strncpy+0xa>
 8009ade:	bd70      	pop	{r4, r5, r6, pc}
 8009ae0:	4623      	mov	r3, r4
 8009ae2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009ae6:	1e56      	subs	r6, r2, #1
 8009ae8:	f803 5b01 	strb.w	r5, [r3], #1
 8009aec:	b92d      	cbnz	r5, 8009afa <strncpy+0x24>
 8009aee:	4414      	add	r4, r2
 8009af0:	42a3      	cmp	r3, r4
 8009af2:	d0f4      	beq.n	8009ade <strncpy+0x8>
 8009af4:	f803 5b01 	strb.w	r5, [r3], #1
 8009af8:	e7fa      	b.n	8009af0 <strncpy+0x1a>
 8009afa:	461c      	mov	r4, r3
 8009afc:	4632      	mov	r2, r6
 8009afe:	e7ed      	b.n	8009adc <strncpy+0x6>

08009b00 <_init>:
 8009b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b02:	bf00      	nop
 8009b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b06:	bc08      	pop	{r3}
 8009b08:	469e      	mov	lr, r3
 8009b0a:	4770      	bx	lr

08009b0c <_fini>:
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	bf00      	nop
 8009b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b12:	bc08      	pop	{r3}
 8009b14:	469e      	mov	lr, r3
 8009b16:	4770      	bx	lr
