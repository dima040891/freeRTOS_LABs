
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000955c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800966c  0800966c  0001966c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009744  08009744  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009744  08009744  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009744  08009744  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009744  08009744  00019744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800974c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023d8  20000180  080098cc  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002558  080098cc  00022558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d22a  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e98  00000000  00000000  0003d3d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  00041270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001030  00000000  00000000  00042478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b4ea  00000000  00000000  000434a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013173  00000000  00000000  0005e992  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e455  00000000  00000000  00071b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fff5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004780  00000000  00000000  000fffd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08009654 	.word	0x08009654

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08009654 	.word	0x08009654

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <PCB_Init>:

//#include "FreeRTOS.h"
//#include "task.h"

void PCB_Init()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016a:	4802      	ldr	r0, [pc, #8]	; (8000174 <PCB_Init+0x14>)
 800016c:	f000 fc9e 	bl	8000aac <HAL_GPIO_WritePin>
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}
 8000174:	40011000 	.word	0x40011000

08000178 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800017c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000180:	4802      	ldr	r0, [pc, #8]	; (800018c <PCB_LED_Toggle+0x14>)
 8000182:	f000 fcab 	bl	8000adc <HAL_GPIO_TogglePin>
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40011000 	.word	0x40011000

08000190 <freeRTOS_Tasks_Ini>:

#include "FreeRTOS.h"
#include "task.h"

void freeRTOS_Tasks_Ini (void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_PCB_LED_Toggle, "Task_PCB_LED_Toggle", 40, NULL, 1, NULL); // Название задачи (функции), Название задачи для отладки, размер стекка задачи,
 8000196:	2300      	movs	r3, #0
 8000198:	9301      	str	r3, [sp, #4]
 800019a:	2301      	movs	r3, #1
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2300      	movs	r3, #0
 80001a0:	2228      	movs	r2, #40	; 0x28
 80001a2:	4903      	ldr	r1, [pc, #12]	; (80001b0 <freeRTOS_Tasks_Ini+0x20>)
 80001a4:	4803      	ldr	r0, [pc, #12]	; (80001b4 <freeRTOS_Tasks_Ini+0x24>)
 80001a6:	f007 f834 	bl	8007212 <xTaskCreate>
																				  // параметры передаваемые в задачу, приоритет, хэндл (ссылка) на задачу.
}
 80001aa:	bf00      	nop
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	0800966c 	.word	0x0800966c
 80001b4:	080001b9 	.word	0x080001b9

080001b8 <vTask_PCB_LED_Toggle>:



void vTask_PCB_LED_Toggle(void *pvParameters)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]

	for(;;)
	{
	PCB_LED_Toggle();
 80001c0:	f7ff ffda 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(500);
 80001c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001c8:	f007 f95e 	bl	8007488 <vTaskDelay>
	PCB_LED_Toggle();
 80001cc:	f7ff ffd4 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(500);
 80001d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001d4:	f007 f958 	bl	8007488 <vTaskDelay>
	PCB_LED_Toggle();
 80001d8:	e7f2      	b.n	80001c0 <vTask_PCB_LED_Toggle+0x8>
	...

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e0:	f000 f99a 	bl	8000518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e4:	f000 f816 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e8:	f000 f86e 	bl	80002c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001ec:	f006 f8c4 	bl	8006378 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001f0:	4a05      	ldr	r2, [pc, #20]	; (8000208 <main+0x2c>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	4805      	ldr	r0, [pc, #20]	; (800020c <main+0x30>)
 80001f6:	f006 f925 	bl	8006444 <osThreadNew>
 80001fa:	4602      	mov	r2, r0
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <main+0x34>)
 80001fe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000200:	f006 f8ec 	bl	80063dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000204:	e7fe      	b.n	8000204 <main+0x28>
 8000206:	bf00      	nop
 8000208:	08009710 	.word	0x08009710
 800020c:	08000361 	.word	0x08000361
 8000210:	20001cc8 	.word	0x20001cc8

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b094      	sub	sp, #80	; 0x50
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f009 fa0d 	bl	8009642 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 0314 	add.w	r3, r7, #20
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000244:	2301      	movs	r3, #1
 8000246:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000260:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000264:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800026a:	4618      	mov	r0, r3
 800026c:	f001 ffd2 	bl	8002214 <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000276:	f000 f8bb 	bl	80003f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027e:	2302      	movs	r3, #2
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000290:	f107 0314 	add.w	r3, r7, #20
 8000294:	2102      	movs	r1, #2
 8000296:	4618      	mov	r0, r3
 8000298:	f002 fa3c 	bl	8002714 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002a2:	f000 f8a5 	bl	80003f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002a6:	2310      	movs	r3, #16
 80002a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f002 fb99 	bl	80029e8 <HAL_RCCEx_PeriphCLKConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002bc:	f000 f898 	bl	80003f0 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3750      	adds	r7, #80	; 0x50
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	f107 0310 	add.w	r3, r7, #16
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <MX_GPIO_Init+0x90>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a1d      	ldr	r2, [pc, #116]	; (8000358 <MX_GPIO_Init+0x90>)
 80002e2:	f043 0310 	orr.w	r3, r3, #16
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_GPIO_Init+0x90>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0310 	and.w	r3, r3, #16
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_GPIO_Init+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a17      	ldr	r2, [pc, #92]	; (8000358 <MX_GPIO_Init+0x90>)
 80002fa:	f043 0320 	orr.w	r3, r3, #32
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_GPIO_Init+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0320 	and.w	r3, r3, #32
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_GPIO_Init+0x90>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a11      	ldr	r2, [pc, #68]	; (8000358 <MX_GPIO_Init+0x90>)
 8000312:	f043 0304 	orr.w	r3, r3, #4
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_GPIO_Init+0x90>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0304 	and.w	r3, r3, #4
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032a:	480c      	ldr	r0, [pc, #48]	; (800035c <MX_GPIO_Init+0x94>)
 800032c:	f000 fbbe 	bl	8000aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	2301      	movs	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033e:	2302      	movs	r3, #2
 8000340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	4619      	mov	r1, r3
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_GPIO_Init+0x94>)
 800034a:	f000 fa55 	bl	80007f8 <HAL_GPIO_Init>

}
 800034e:	bf00      	nop
 8000350:	3720      	adds	r7, #32
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	40011000 	.word	0x40011000

08000360 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000360:	b590      	push	{r4, r7, lr}
 8000362:	b087      	sub	sp, #28
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */

	sprintf(USB_Tx_Buf, "Hi from VCP\r\n");
 8000368:	4a1e      	ldr	r2, [pc, #120]	; (80003e4 <StartDefaultTask+0x84>)
 800036a:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <StartDefaultTask+0x88>)
 800036c:	4614      	mov	r4, r2
 800036e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000370:	6020      	str	r0, [r4, #0]
 8000372:	6061      	str	r1, [r4, #4]
 8000374:	60a2      	str	r2, [r4, #8]
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	81a3      	strh	r3, [r4, #12]

	//-------------------------------------------------------------------------------------------------------------------
	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800038c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038e:	2301      	movs	r3, #1
 8000390:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000396:	2302      	movs	r3, #2
 8000398:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039a:	f107 0308 	add.w	r3, r7, #8
 800039e:	4619      	mov	r1, r3
 80003a0:	4812      	ldr	r0, [pc, #72]	; (80003ec <StartDefaultTask+0x8c>)
 80003a2:	f000 fa29 	bl	80007f8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	480f      	ldr	r0, [pc, #60]	; (80003ec <StartDefaultTask+0x8c>)
 80003ae:	f000 fb7d 	bl	8000aac <HAL_GPIO_WritePin>

	  osDelay(2000);
 80003b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003b6:	f006 f8ef 	bl	8006598 <osDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 80003ba:	f008 fc77 	bl	8008cac <MX_USB_DEVICE_Init>

	  //-------------------------------------------------------------------------------------------------------------------

  PCB_Init();
 80003be:	f7ff fecf 	bl	8000160 <PCB_Init>
  freeRTOS_Tasks_Ini();
 80003c2:	f7ff fee5 	bl	8000190 <freeRTOS_Tasks_Ini>

  /* Infinite loop */
  for(;;)
  {
//	  PCB_LED_Toggle();
	  CDC_Transmit_FS((unsigned char*)USB_Tx_Buf, strlen(USB_Tx_Buf));
 80003c6:	4807      	ldr	r0, [pc, #28]	; (80003e4 <StartDefaultTask+0x84>)
 80003c8:	f7ff fec2 	bl	8000150 <strlen>
 80003cc:	4603      	mov	r3, r0
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	4619      	mov	r1, r3
 80003d2:	4804      	ldr	r0, [pc, #16]	; (80003e4 <StartDefaultTask+0x84>)
 80003d4:	f008 fd28 	bl	8008e28 <CDC_Transmit_FS>
	  osDelay(500);
 80003d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003dc:	f006 f8dc 	bl	8006598 <osDelay>
	  CDC_Transmit_FS((unsigned char*)USB_Tx_Buf, strlen(USB_Tx_Buf));
 80003e0:	e7f1      	b.n	80003c6 <StartDefaultTask+0x66>
 80003e2:	bf00      	nop
 80003e4:	20001ccc 	.word	0x20001ccc
 80003e8:	0800968c 	.word	0x0800968c
 80003ec:	40010800 	.word	0x40010800

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <Error_Handler+0x6>

080003f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fe:	4b18      	ldr	r3, [pc, #96]	; (8000460 <HAL_MspInit+0x68>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a17      	ldr	r2, [pc, #92]	; (8000460 <HAL_MspInit+0x68>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <HAL_MspInit+0x68>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <HAL_MspInit+0x68>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a11      	ldr	r2, [pc, #68]	; (8000460 <HAL_MspInit+0x68>)
 800041c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <HAL_MspInit+0x68>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	210f      	movs	r1, #15
 8000432:	f06f 0001 	mvn.w	r0, #1
 8000436:	f000 f9a8 	bl	800078a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <HAL_MspInit+0x6c>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <HAL_MspInit+0x6c>)
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	bf00      	nop
 8000458:	3710      	adds	r7, #16
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000
 8000464:	40010000 	.word	0x40010000

08000468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800046c:	e7fe      	b.n	800046c <NMI_Handler+0x4>

0800046e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000472:	e7fe      	b.n	8000472 <HardFault_Handler+0x4>

08000474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <MemManage_Handler+0x4>

0800047a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047e:	e7fe      	b.n	800047e <BusFault_Handler+0x4>

08000480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <UsageFault_Handler+0x4>

08000486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr

08000492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000496:	f000 f885 	bl	80005a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800049a:	f007 fc67 	bl	8007d6c <xTaskGetSchedulerState>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d001      	beq.n	80004a8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004a4:	f008 f9b0 	bl	8008808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}

080004ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004b0:	4802      	ldr	r0, [pc, #8]	; (80004bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004b2:	f000 fc5d 	bl	8000d70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	2000226c 	.word	0x2000226c

080004c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004ce:	e003      	b.n	80004d8 <LoopCopyDataInit>

080004d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004d6:	3104      	adds	r1, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004d8:	480a      	ldr	r0, [pc, #40]	; (8000504 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004e0:	d3f6      	bcc.n	80004d0 <CopyDataInit>
  ldr r2, =_sbss
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004e4:	e002      	b.n	80004ec <LoopFillZerobss>

080004e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004e8:	f842 3b04 	str.w	r3, [r2], #4

080004ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004f0:	d3f9      	bcc.n	80004e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004f2:	f7ff ffe5 	bl	80004c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004f6:	f009 f875 	bl	80095e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fa:	f7ff fe6f 	bl	80001dc <main>
  bx lr
 80004fe:	4770      	bx	lr
  ldr r3, =_sidata
 8000500:	0800974c 	.word	0x0800974c
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000508:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 800050c:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8000510:	20002558 	.word	0x20002558

08000514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC1_2_IRQHandler>
	...

08000518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_Init+0x28>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a07      	ldr	r2, [pc, #28]	; (8000540 <HAL_Init+0x28>)
 8000522:	f043 0310 	orr.w	r3, r3, #16
 8000526:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000528:	2003      	movs	r0, #3
 800052a:	f000 f923 	bl	8000774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052e:	200f      	movs	r0, #15
 8000530:	f000 f808 	bl	8000544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000534:	f7ff ff60 	bl	80003f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40022000 	.word	0x40022000

08000544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x54>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x58>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4619      	mov	r1, r3
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	fbb3 f3f1 	udiv	r3, r3, r1
 800055e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f93b 	bl	80007de <HAL_SYSTICK_Config>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
 8000570:	e00e      	b.n	8000590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d80a      	bhi.n	800058e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000578:	2200      	movs	r2, #0
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	f04f 30ff 	mov.w	r0, #4294967295
 8000580:	f000 f903 	bl	800078a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <HAL_InitTick+0x5c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058a:	2300      	movs	r3, #0
 800058c:	e000      	b.n	8000590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000000 	.word	0x20000000
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004

080005a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_IncTick+0x1c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <HAL_IncTick+0x20>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4413      	add	r3, r2
 80005b4:	4a03      	ldr	r2, [pc, #12]	; (80005c4 <HAL_IncTick+0x20>)
 80005b6:	6013      	str	r3, [r2, #0]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	20000008 	.word	0x20000008
 80005c4:	20001ce4 	.word	0x20001ce4

080005c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b02      	ldr	r3, [pc, #8]	; (80005d8 <HAL_GetTick+0x10>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	20001ce4 	.word	0x20001ce4

080005dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <__NVIC_GetPriorityGrouping+0x18>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	f003 0307 	and.w	r3, r3, #7
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	2b00      	cmp	r3, #0
 8000650:	db0b      	blt.n	800066a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f003 021f 	and.w	r2, r3, #31
 8000658:	4906      	ldr	r1, [pc, #24]	; (8000674 <__NVIC_EnableIRQ+0x34>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	095b      	lsrs	r3, r3, #5
 8000660:	2001      	movs	r0, #1
 8000662:	fa00 f202 	lsl.w	r2, r0, r2
 8000666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	e000e100 	.word	0xe000e100

08000678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	db0a      	blt.n	80006a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <__NVIC_SetPriority+0x4c>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a0:	e00a      	b.n	80006b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4908      	ldr	r1, [pc, #32]	; (80006c8 <__NVIC_SetPriority+0x50>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	3b04      	subs	r3, #4
 80006b0:	0112      	lsls	r2, r2, #4
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	440b      	add	r3, r1
 80006b6:	761a      	strb	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e100 	.word	0xe000e100
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	f1c3 0307 	rsb	r3, r3, #7
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	bf28      	it	cs
 80006ea:	2304      	movcs	r3, #4
 80006ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3304      	adds	r3, #4
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d902      	bls.n	80006fc <NVIC_EncodePriority+0x30>
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3b03      	subs	r3, #3
 80006fa:	e000      	b.n	80006fe <NVIC_EncodePriority+0x32>
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	f04f 32ff 	mov.w	r2, #4294967295
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	43da      	mvns	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	401a      	ands	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000714:	f04f 31ff 	mov.w	r1, #4294967295
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	43d9      	mvns	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	4313      	orrs	r3, r2
         );
}
 8000726:	4618      	mov	r0, r3
 8000728:	3724      	adds	r7, #36	; 0x24
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000740:	d301      	bcc.n	8000746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000742:	2301      	movs	r3, #1
 8000744:	e00f      	b.n	8000766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <SysTick_Config+0x40>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074e:	210f      	movs	r1, #15
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f7ff ff90 	bl	8000678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <SysTick_Config+0x40>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <SysTick_Config+0x40>)
 8000760:	2207      	movs	r2, #7
 8000762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	e000e010 	.word	0xe000e010

08000774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff2d 	bl	80005dc <__NVIC_SetPriorityGrouping>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800079c:	f7ff ff42 	bl	8000624 <__NVIC_GetPriorityGrouping>
 80007a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	6978      	ldr	r0, [r7, #20]
 80007a8:	f7ff ff90 	bl	80006cc <NVIC_EncodePriority>
 80007ac:	4602      	mov	r2, r0
 80007ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff5f 	bl	8000678 <__NVIC_SetPriority>
}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff35 	bl	8000640 <__NVIC_EnableIRQ>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ffa2 	bl	8000730 <SysTick_Config>
 80007ec:	4603      	mov	r3, r0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b08b      	sub	sp, #44	; 0x2c
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080a:	e127      	b.n	8000a5c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800080c:	2201      	movs	r2, #1
 800080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	69fa      	ldr	r2, [r7, #28]
 800081c:	4013      	ands	r3, r2
 800081e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000820:	69ba      	ldr	r2, [r7, #24]
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	429a      	cmp	r2, r3
 8000826:	f040 8116 	bne.w	8000a56 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b12      	cmp	r3, #18
 8000830:	d034      	beq.n	800089c <HAL_GPIO_Init+0xa4>
 8000832:	2b12      	cmp	r3, #18
 8000834:	d80d      	bhi.n	8000852 <HAL_GPIO_Init+0x5a>
 8000836:	2b02      	cmp	r3, #2
 8000838:	d02b      	beq.n	8000892 <HAL_GPIO_Init+0x9a>
 800083a:	2b02      	cmp	r3, #2
 800083c:	d804      	bhi.n	8000848 <HAL_GPIO_Init+0x50>
 800083e:	2b00      	cmp	r3, #0
 8000840:	d031      	beq.n	80008a6 <HAL_GPIO_Init+0xae>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d01c      	beq.n	8000880 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000846:	e048      	b.n	80008da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000848:	2b03      	cmp	r3, #3
 800084a:	d043      	beq.n	80008d4 <HAL_GPIO_Init+0xdc>
 800084c:	2b11      	cmp	r3, #17
 800084e:	d01b      	beq.n	8000888 <HAL_GPIO_Init+0x90>
          break;
 8000850:	e043      	b.n	80008da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000852:	4a89      	ldr	r2, [pc, #548]	; (8000a78 <HAL_GPIO_Init+0x280>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d026      	beq.n	80008a6 <HAL_GPIO_Init+0xae>
 8000858:	4a87      	ldr	r2, [pc, #540]	; (8000a78 <HAL_GPIO_Init+0x280>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d806      	bhi.n	800086c <HAL_GPIO_Init+0x74>
 800085e:	4a87      	ldr	r2, [pc, #540]	; (8000a7c <HAL_GPIO_Init+0x284>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d020      	beq.n	80008a6 <HAL_GPIO_Init+0xae>
 8000864:	4a86      	ldr	r2, [pc, #536]	; (8000a80 <HAL_GPIO_Init+0x288>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d01d      	beq.n	80008a6 <HAL_GPIO_Init+0xae>
          break;
 800086a:	e036      	b.n	80008da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800086c:	4a85      	ldr	r2, [pc, #532]	; (8000a84 <HAL_GPIO_Init+0x28c>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d019      	beq.n	80008a6 <HAL_GPIO_Init+0xae>
 8000872:	4a85      	ldr	r2, [pc, #532]	; (8000a88 <HAL_GPIO_Init+0x290>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d016      	beq.n	80008a6 <HAL_GPIO_Init+0xae>
 8000878:	4a84      	ldr	r2, [pc, #528]	; (8000a8c <HAL_GPIO_Init+0x294>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d013      	beq.n	80008a6 <HAL_GPIO_Init+0xae>
          break;
 800087e:	e02c      	b.n	80008da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	623b      	str	r3, [r7, #32]
          break;
 8000886:	e028      	b.n	80008da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	3304      	adds	r3, #4
 800088e:	623b      	str	r3, [r7, #32]
          break;
 8000890:	e023      	b.n	80008da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	3308      	adds	r3, #8
 8000898:	623b      	str	r3, [r7, #32]
          break;
 800089a:	e01e      	b.n	80008da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	330c      	adds	r3, #12
 80008a2:	623b      	str	r3, [r7, #32]
          break;
 80008a4:	e019      	b.n	80008da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d102      	bne.n	80008b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ae:	2304      	movs	r3, #4
 80008b0:	623b      	str	r3, [r7, #32]
          break;
 80008b2:	e012      	b.n	80008da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d105      	bne.n	80008c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008bc:	2308      	movs	r3, #8
 80008be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	69fa      	ldr	r2, [r7, #28]
 80008c4:	611a      	str	r2, [r3, #16]
          break;
 80008c6:	e008      	b.n	80008da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008c8:	2308      	movs	r3, #8
 80008ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	69fa      	ldr	r2, [r7, #28]
 80008d0:	615a      	str	r2, [r3, #20]
          break;
 80008d2:	e002      	b.n	80008da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
          break;
 80008d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	2bff      	cmp	r3, #255	; 0xff
 80008de:	d801      	bhi.n	80008e4 <HAL_GPIO_Init+0xec>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	e001      	b.n	80008e8 <HAL_GPIO_Init+0xf0>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3304      	adds	r3, #4
 80008e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	2bff      	cmp	r3, #255	; 0xff
 80008ee:	d802      	bhi.n	80008f6 <HAL_GPIO_Init+0xfe>
 80008f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	e002      	b.n	80008fc <HAL_GPIO_Init+0x104>
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	3b08      	subs	r3, #8
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	210f      	movs	r1, #15
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	401a      	ands	r2, r3
 800090e:	6a39      	ldr	r1, [r7, #32]
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	431a      	orrs	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000924:	2b00      	cmp	r3, #0
 8000926:	f000 8096 	beq.w	8000a56 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800092a:	4b59      	ldr	r3, [pc, #356]	; (8000a90 <HAL_GPIO_Init+0x298>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a58      	ldr	r2, [pc, #352]	; (8000a90 <HAL_GPIO_Init+0x298>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b56      	ldr	r3, [pc, #344]	; (8000a90 <HAL_GPIO_Init+0x298>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000942:	4a54      	ldr	r2, [pc, #336]	; (8000a94 <HAL_GPIO_Init+0x29c>)
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	089b      	lsrs	r3, r3, #2
 8000948:	3302      	adds	r3, #2
 800094a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	220f      	movs	r2, #15
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	4013      	ands	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a4b      	ldr	r2, [pc, #300]	; (8000a98 <HAL_GPIO_Init+0x2a0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d013      	beq.n	8000996 <HAL_GPIO_Init+0x19e>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a4a      	ldr	r2, [pc, #296]	; (8000a9c <HAL_GPIO_Init+0x2a4>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d00d      	beq.n	8000992 <HAL_GPIO_Init+0x19a>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a49      	ldr	r2, [pc, #292]	; (8000aa0 <HAL_GPIO_Init+0x2a8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d007      	beq.n	800098e <HAL_GPIO_Init+0x196>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a48      	ldr	r2, [pc, #288]	; (8000aa4 <HAL_GPIO_Init+0x2ac>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d101      	bne.n	800098a <HAL_GPIO_Init+0x192>
 8000986:	2303      	movs	r3, #3
 8000988:	e006      	b.n	8000998 <HAL_GPIO_Init+0x1a0>
 800098a:	2304      	movs	r3, #4
 800098c:	e004      	b.n	8000998 <HAL_GPIO_Init+0x1a0>
 800098e:	2302      	movs	r3, #2
 8000990:	e002      	b.n	8000998 <HAL_GPIO_Init+0x1a0>
 8000992:	2301      	movs	r3, #1
 8000994:	e000      	b.n	8000998 <HAL_GPIO_Init+0x1a0>
 8000996:	2300      	movs	r3, #0
 8000998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800099a:	f002 0203 	and.w	r2, r2, #3
 800099e:	0092      	lsls	r2, r2, #2
 80009a0:	4093      	lsls	r3, r2
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009a8:	493a      	ldr	r1, [pc, #232]	; (8000a94 <HAL_GPIO_Init+0x29c>)
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	3302      	adds	r3, #2
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d006      	beq.n	80009d0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009c2:	4b39      	ldr	r3, [pc, #228]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4938      	ldr	r1, [pc, #224]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	600b      	str	r3, [r1, #0]
 80009ce:	e006      	b.n	80009de <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009d0:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	43db      	mvns	r3, r3
 80009d8:	4933      	ldr	r1, [pc, #204]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 80009da:	4013      	ands	r3, r2
 80009dc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d006      	beq.n	80009f8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009ea:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	492e      	ldr	r1, [pc, #184]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	604b      	str	r3, [r1, #4]
 80009f6:	e006      	b.n	8000a06 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009f8:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	43db      	mvns	r3, r3
 8000a00:	4929      	ldr	r1, [pc, #164]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000a02:	4013      	ands	r3, r2
 8000a04:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d006      	beq.n	8000a20 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	4924      	ldr	r1, [pc, #144]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	608b      	str	r3, [r1, #8]
 8000a1e:	e006      	b.n	8000a2e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a20:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	491f      	ldr	r1, [pc, #124]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d006      	beq.n	8000a48 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000a3c:	68da      	ldr	r2, [r3, #12]
 8000a3e:	491a      	ldr	r1, [pc, #104]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	60cb      	str	r3, [r1, #12]
 8000a46:	e006      	b.n	8000a56 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	4915      	ldr	r1, [pc, #84]	; (8000aa8 <HAL_GPIO_Init+0x2b0>)
 8000a52:	4013      	ands	r3, r2
 8000a54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	3301      	adds	r3, #1
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	fa22 f303 	lsr.w	r3, r2, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f47f aed0 	bne.w	800080c <HAL_GPIO_Init+0x14>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	372c      	adds	r7, #44	; 0x2c
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	10210000 	.word	0x10210000
 8000a7c:	10110000 	.word	0x10110000
 8000a80:	10120000 	.word	0x10120000
 8000a84:	10310000 	.word	0x10310000
 8000a88:	10320000 	.word	0x10320000
 8000a8c:	10220000 	.word	0x10220000
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010000 	.word	0x40010000
 8000a98:	40010800 	.word	0x40010800
 8000a9c:	40010c00 	.word	0x40010c00
 8000aa0:	40011000 	.word	0x40011000
 8000aa4:	40011400 	.word	0x40011400
 8000aa8:	40010400 	.word	0x40010400

08000aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000abc:	787b      	ldrb	r3, [r7, #1]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ac2:	887a      	ldrh	r2, [r7, #2]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ac8:	e003      	b.n	8000ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	041a      	lsls	r2, r3, #16
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	611a      	str	r2, [r3, #16]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000aee:	887a      	ldrh	r2, [r7, #2]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4013      	ands	r3, r2
 8000af4:	041a      	lsls	r2, r3, #16
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	43d9      	mvns	r1, r3
 8000afa:	887b      	ldrh	r3, [r7, #2]
 8000afc:	400b      	ands	r3, r1
 8000afe:	431a      	orrs	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	611a      	str	r2, [r3, #16]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b10:	b08b      	sub	sp, #44	; 0x2c
 8000b12:	af06      	add	r7, sp, #24
 8000b14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e0fd      	b.n	8000d1c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d106      	bne.n	8000b3a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f008 faab 	bl	8009090 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 f82a 	bl	8002ba0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	687e      	ldr	r6, [r7, #4]
 8000b54:	466d      	mov	r5, sp
 8000b56:	f106 0410 	add.w	r4, r6, #16
 8000b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	602b      	str	r3, [r5, #0]
 8000b62:	1d33      	adds	r3, r6, #4
 8000b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b66:	6838      	ldr	r0, [r7, #0]
 8000b68:	f001 fff4 	bl	8002b54 <USB_CoreInit>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d005      	beq.n	8000b7e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2202      	movs	r2, #2
 8000b76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e0ce      	b.n	8000d1c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 f825 	bl	8002bd4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73fb      	strb	r3, [r7, #15]
 8000b8e:	e04c      	b.n	8000c2a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	440b      	add	r3, r1
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	6879      	ldr	r1, [r7, #4]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	4613      	mov	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	7bfa      	ldrb	r2, [r7, #15]
 8000bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	b298      	uxth	r0, r3
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4413      	add	r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	440b      	add	r3, r1
 8000bcc:	3336      	adds	r3, #54	; 0x36
 8000bce:	4602      	mov	r2, r0
 8000bd0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	4613      	mov	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	440b      	add	r3, r1
 8000be2:	3303      	adds	r3, #3
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	440b      	add	r3, r1
 8000bf6:	3338      	adds	r3, #56	; 0x38
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bfc:	7bfa      	ldrb	r2, [r7, #15]
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	440b      	add	r3, r1
 8000c0a:	333c      	adds	r3, #60	; 0x3c
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c10:	7bfa      	ldrb	r2, [r7, #15]
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	440b      	add	r3, r1
 8000c1e:	3340      	adds	r3, #64	; 0x40
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	3301      	adds	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	7bfa      	ldrb	r2, [r7, #15]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d3ad      	bcc.n	8000b90 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e044      	b.n	8000cc4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	440b      	add	r3, r1
 8000c5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c66:	7bfa      	ldrb	r2, [r7, #15]
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	440b      	add	r3, r1
 8000c74:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c7c:	7bfa      	ldrb	r2, [r7, #15]
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	440b      	add	r3, r1
 8000c8a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c92:	7bfa      	ldrb	r2, [r7, #15]
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ca8:	7bfa      	ldrb	r2, [r7, #15]
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	440b      	add	r3, r1
 8000cb6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d3b5      	bcc.n	8000c3a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	687e      	ldr	r6, [r7, #4]
 8000cd6:	466d      	mov	r5, sp
 8000cd8:	f106 0410 	add.w	r4, r6, #16
 8000cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	602b      	str	r3, [r5, #0]
 8000ce4:	1d33      	adds	r3, r6, #4
 8000ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ce8:	6838      	ldr	r0, [r7, #0]
 8000cea:	f001 ff7f 	bl	8002bec <USB_DevInit>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d005      	beq.n	8000d00 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e00d      	b.n	8000d1c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f003 ff19 	bl	8004b4c <USB_DevDisconnect>

  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d101      	bne.n	8000d3a <HAL_PCD_Start+0x16>
 8000d36:	2302      	movs	r3, #2
 8000d38:	e016      	b.n	8000d68 <HAL_PCD_Start+0x44>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 ff14 	bl	8002b74 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f008 fc11 	bl	8009576 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f003 feed 	bl	8004b38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 feef 	bl	8004b60 <USB_ReadInterrupts>
 8000d82:	4603      	mov	r3, r0
 8000d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d8c:	d102      	bne.n	8000d94 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 fb61 	bl	8001456 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 fee1 	bl	8004b60 <USB_ReadInterrupts>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da8:	d112      	bne.n	8000dd0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dbc:	b292      	uxth	r2, r2
 8000dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f008 f9df 	bl	8009186 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f925 	bl	800101a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 fec3 	bl	8004b60 <USB_ReadInterrupts>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000de4:	d10b      	bne.n	8000dfe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000df8:	b292      	uxth	r2, r2
 8000dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 feac 	bl	8004b60 <USB_ReadInterrupts>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e12:	d10b      	bne.n	8000e2c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e26:	b292      	uxth	r2, r2
 8000e28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 fe95 	bl	8004b60 <USB_ReadInterrupts>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e40:	d126      	bne.n	8000e90 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0204 	bic.w	r2, r2, #4
 8000e54:	b292      	uxth	r2, r2
 8000e56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0208 	bic.w	r2, r2, #8
 8000e6c:	b292      	uxth	r2, r2
 8000e6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f008 f9c0 	bl	80091f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e8a:	b292      	uxth	r2, r2
 8000e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f003 fe63 	bl	8004b60 <USB_ReadInterrupts>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ea4:	f040 8084 	bne.w	8000fb0 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	77fb      	strb	r3, [r7, #31]
 8000eac:	e011      	b.n	8000ed2 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	7ffb      	ldrb	r3, [r7, #31]
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	441a      	add	r2, r3
 8000eba:	7ffb      	ldrb	r3, [r7, #31]
 8000ebc:	8812      	ldrh	r2, [r2, #0]
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	f107 0120 	add.w	r1, r7, #32
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000ecc:	7ffb      	ldrb	r3, [r7, #31]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	77fb      	strb	r3, [r7, #31]
 8000ed2:	7ffb      	ldrb	r3, [r7, #31]
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	d9ea      	bls.n	8000eae <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0201 	orr.w	r2, r2, #1
 8000eea:	b292      	uxth	r2, r2
 8000eec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	b292      	uxth	r2, r2
 8000f04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000f08:	bf00      	nop
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f6      	beq.n	8000f0a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	77fb      	strb	r3, [r7, #31]
 8000f38:	e010      	b.n	8000f5c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000f3a:	7ffb      	ldrb	r3, [r7, #31]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	4611      	mov	r1, r2
 8000f42:	7ffa      	ldrb	r2, [r7, #31]
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	440a      	add	r2, r1
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	f107 0120 	add.w	r1, r7, #32
 8000f4e:	440b      	add	r3, r1
 8000f50:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000f54:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000f56:	7ffb      	ldrb	r3, [r7, #31]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	77fb      	strb	r3, [r7, #31]
 8000f5c:	7ffb      	ldrb	r3, [r7, #31]
 8000f5e:	2b07      	cmp	r3, #7
 8000f60:	d9eb      	bls.n	8000f3a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0208 	orr.w	r2, r2, #8
 8000f74:	b292      	uxth	r2, r2
 8000f76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f8c:	b292      	uxth	r2, r2
 8000f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0204 	orr.w	r2, r2, #4
 8000fa4:	b292      	uxth	r2, r2
 8000fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f008 f90a 	bl	80091c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 fdd3 	bl	8004b60 <USB_ReadInterrupts>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fc4:	d10e      	bne.n	8000fe4 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fd8:	b292      	uxth	r2, r2
 8000fda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f008 f8c3 	bl	800916a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 fdb9 	bl	8004b60 <USB_ReadInterrupts>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ff8:	d10b      	bne.n	8001012 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001002:	b29a      	uxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800100c:	b292      	uxth	r2, r2
 800100e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <HAL_PCD_SetAddress+0x1a>
 8001030:	2302      	movs	r3, #2
 8001032:	e013      	b.n	800105c <HAL_PCD_SetAddress+0x42>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	78fa      	ldrb	r2, [r7, #3]
 8001040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	78fa      	ldrb	r2, [r7, #3]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f003 fd60 	bl	8004b12 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	4608      	mov	r0, r1
 800106e:	4611      	mov	r1, r2
 8001070:	461a      	mov	r2, r3
 8001072:	4603      	mov	r3, r0
 8001074:	70fb      	strb	r3, [r7, #3]
 8001076:	460b      	mov	r3, r1
 8001078:	803b      	strh	r3, [r7, #0]
 800107a:	4613      	mov	r3, r2
 800107c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001086:	2b00      	cmp	r3, #0
 8001088:	da0e      	bge.n	80010a8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2201      	movs	r2, #1
 80010a4:	705a      	strb	r2, [r3, #1]
 80010a6:	e00e      	b.n	80010c6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	f003 0207 	and.w	r2, r3, #7
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2200      	movs	r2, #0
 80010c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010d2:	883a      	ldrh	r2, [r7, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	78ba      	ldrb	r2, [r7, #2]
 80010dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010f0:	78bb      	ldrb	r3, [r7, #2]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d102      	bne.n	80010fc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001102:	2b01      	cmp	r3, #1
 8001104:	d101      	bne.n	800110a <HAL_PCD_EP_Open+0xa6>
 8001106:	2302      	movs	r3, #2
 8001108:	e00e      	b.n	8001128 <HAL_PCD_EP_Open+0xc4>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68f9      	ldr	r1, [r7, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	f001 fd87 	bl	8002c2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001126:	7afb      	ldrb	r3, [r7, #11]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800113c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001140:	2b00      	cmp	r3, #0
 8001142:	da0e      	bge.n	8001162 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2201      	movs	r2, #1
 800115e:	705a      	strb	r2, [r3, #1]
 8001160:	e00e      	b.n	8001180 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	f003 0207 	and.w	r2, r3, #7
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2200      	movs	r2, #0
 800117e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	b2da      	uxtb	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_PCD_EP_Close+0x6a>
 8001196:	2302      	movs	r3, #2
 8001198:	e00e      	b.n	80011b8 <HAL_PCD_EP_Close+0x88>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68f9      	ldr	r1, [r7, #12]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 f8a9 	bl	8003300 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	460b      	mov	r3, r1
 80011ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011d0:	7afb      	ldrb	r3, [r7, #11]
 80011d2:	f003 0207 	and.w	r2, r3, #7
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4413      	add	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	2200      	movs	r2, #0
 80011fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001200:	7afb      	ldrb	r3, [r7, #11]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	b2da      	uxtb	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	2b00      	cmp	r3, #0
 8001214:	d106      	bne.n	8001224 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6979      	ldr	r1, [r7, #20]
 800121c:	4618      	mov	r0, r3
 800121e:	f002 fa5b 	bl	80036d8 <USB_EPStartXfer>
 8001222:	e005      	b.n	8001230 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6979      	ldr	r1, [r7, #20]
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fa54 	bl	80036d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	f003 0207 	and.w	r2, r3, #7
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	440b      	add	r3, r1
 8001258:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800125c:	681b      	ldr	r3, [r3, #0]
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	460b      	mov	r3, r1
 8001276:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001278:	7afb      	ldrb	r3, [r7, #11]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2201      	movs	r2, #1
 80012b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012c0:	7afb      	ldrb	r3, [r7, #11]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d106      	bne.n	80012d8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6979      	ldr	r1, [r7, #20]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f002 fa01 	bl	80036d8 <USB_EPStartXfer>
 80012d6:	e005      	b.n	80012e4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6979      	ldr	r1, [r7, #20]
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 f9fa 	bl	80036d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	f003 0207 	and.w	r2, r3, #7
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	d901      	bls.n	800130c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e04c      	b.n	80013a6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800130c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001310:	2b00      	cmp	r3, #0
 8001312:	da0e      	bge.n	8001332 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2201      	movs	r2, #1
 800132e:	705a      	strb	r2, [r3, #1]
 8001330:	e00c      	b.n	800134c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001332:	78fa      	ldrb	r2, [r7, #3]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2201      	movs	r2, #1
 8001350:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	b2da      	uxtb	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_PCD_EP_SetStall+0x7e>
 8001368:	2302      	movs	r3, #2
 800136a:	e01c      	b.n	80013a6 <HAL_PCD_EP_SetStall+0xb8>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68f9      	ldr	r1, [r7, #12]
 800137a:	4618      	mov	r0, r3
 800137c:	f003 facc 	bl	8004918 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	2b00      	cmp	r3, #0
 8001388:	d108      	bne.n	800139c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f003 fbf1 	bl	8004b7e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	460b      	mov	r3, r1
 80013b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	f003 020f 	and.w	r2, r3, #15
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d901      	bls.n	80013cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e040      	b.n	800144e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da0e      	bge.n	80013f2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2201      	movs	r2, #1
 80013ee:	705a      	strb	r2, [r3, #1]
 80013f0:	e00e      	b.n	8001410 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	f003 0207 	and.w	r2, r3, #7
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	b2da      	uxtb	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_PCD_EP_ClrStall+0x82>
 800142c:	2302      	movs	r3, #2
 800142e:	e00e      	b.n	800144e <HAL_PCD_EP_ClrStall+0xa0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68f9      	ldr	r1, [r7, #12]
 800143e:	4618      	mov	r0, r3
 8001440:	f003 faba 	bl	80049b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b08e      	sub	sp, #56	; 0x38
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800145e:	e2df      	b.n	8001a20 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001468:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800146a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001476:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 8158 	bne.w	8001730 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001480:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	2b00      	cmp	r3, #0
 8001488:	d152      	bne.n	8001530 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800149a:	81fb      	strh	r3, [r7, #14]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	89fb      	ldrh	r3, [r7, #14]
 80014a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3328      	adds	r3, #40	; 0x28
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014bc:	b29b      	uxth	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4413      	add	r3, r2
 80014c8:	3302      	adds	r3, #2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	441a      	add	r2, r3
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014ee:	2100      	movs	r1, #0
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f007 fe20 	bl	8009136 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 828e 	beq.w	8001a20 <PCD_EP_ISR_Handler+0x5ca>
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	f040 8289 	bne.w	8001a20 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800151a:	b2da      	uxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b292      	uxth	r2, r2
 8001522:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800152e:	e277      	b.n	8001a20 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001540:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001546:	2b00      	cmp	r3, #0
 8001548:	d034      	beq.n	80015b4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001552:	b29b      	uxth	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	3306      	adds	r3, #6
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	4413      	add	r3, r2
 8001568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001588:	b29b      	uxth	r3, r3
 800158a:	f003 fb47 	bl	8004c1c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b29a      	uxth	r2, r3
 8001596:	f640 738f 	movw	r3, #3983	; 0xf8f
 800159a:	4013      	ands	r3, r2
 800159c:	823b      	strh	r3, [r7, #16]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	8a3a      	ldrh	r2, [r7, #16]
 80015a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015a8:	b292      	uxth	r2, r2
 80015aa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f007 fd95 	bl	80090dc <HAL_PCD_SetupStageCallback>
 80015b2:	e235      	b.n	8001a20 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f280 8231 	bge.w	8001a20 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015ca:	4013      	ands	r3, r2
 80015cc:	83bb      	strh	r3, [r7, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	8bba      	ldrh	r2, [r7, #28]
 80015d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d8:	b292      	uxth	r2, r2
 80015da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	3306      	adds	r3, #6
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d019      	beq.n	8001644 <PCD_EP_ISR_Handler+0x1ee>
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d015      	beq.n	8001644 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	6959      	ldr	r1, [r3, #20]
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001628:	b29b      	uxth	r3, r3
 800162a:	f003 faf7 	bl	8004c1c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	441a      	add	r2, r3
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800163c:	2100      	movs	r1, #0
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f007 fd5e 	bl	8009100 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001652:	b29b      	uxth	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4413      	add	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d112      	bne.n	8001692 <PCD_EP_ISR_Handler+0x23c>
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	b29b      	uxth	r3, r3
 8001672:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001676:	b29a      	uxth	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	801a      	strh	r2, [r3, #0]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	b29b      	uxth	r3, r3
 8001682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800168a:	b29a      	uxth	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	801a      	strh	r2, [r3, #0]
 8001690:	e02f      	b.n	80016f2 <PCD_EP_ISR_Handler+0x29c>
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	2b3e      	cmp	r3, #62	; 0x3e
 8001698:	d813      	bhi.n	80016c2 <PCD_EP_ISR_Handler+0x26c>
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <PCD_EP_ISR_Handler+0x25e>
 80016ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b0:	3301      	adds	r3, #1
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
 80016b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	029b      	lsls	r3, r3, #10
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	801a      	strh	r2, [r3, #0]
 80016c0:	e017      	b.n	80016f2 <PCD_EP_ISR_Handler+0x29c>
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <PCD_EP_ISR_Handler+0x286>
 80016d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d8:	3b01      	subs	r3, #1
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
 80016dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016de:	b29b      	uxth	r3, r3
 80016e0:	029b      	lsls	r3, r3, #10
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001702:	827b      	strh	r3, [r7, #18]
 8001704:	8a7b      	ldrh	r3, [r7, #18]
 8001706:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800170a:	827b      	strh	r3, [r7, #18]
 800170c:	8a7b      	ldrh	r3, [r7, #18]
 800170e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001712:	827b      	strh	r3, [r7, #18]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	8a7b      	ldrh	r3, [r7, #18]
 800171a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800171e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172a:	b29b      	uxth	r3, r3
 800172c:	8013      	strh	r3, [r2, #0]
 800172e:	e177      	b.n	8001a20 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001742:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001746:	2b00      	cmp	r3, #0
 8001748:	f280 80ea 	bge.w	8001920 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	b29a      	uxth	r2, r3
 800175e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001762:	4013      	ands	r3, r2
 8001764:	853b      	strh	r3, [r7, #40]	; 0x28
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001776:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800177a:	b292      	uxth	r2, r2
 800177c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800177e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	7b1b      	ldrb	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d122      	bne.n	80017e2 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	3306      	adds	r3, #6
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80017c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 8087 	beq.w	80018dc <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	6959      	ldr	r1, [r3, #20]
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	88da      	ldrh	r2, [r3, #6]
 80017da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017dc:	f003 fa1e 	bl	8004c1c <USB_ReadPMA>
 80017e0:	e07c      	b.n	80018dc <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	78db      	ldrb	r3, [r3, #3]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d108      	bne.n	80017fc <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80017ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017ec:	461a      	mov	r2, r3
 80017ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f923 	bl	8001a3c <HAL_PCD_EP_DB_Receive>
 80017f6:	4603      	mov	r3, r0
 80017f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80017fa:	e06f      	b.n	80018dc <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001816:	847b      	strh	r3, [r7, #34]	; 0x22
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	441a      	add	r2, r3
 8001826:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800182c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001834:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001838:	b29b      	uxth	r3, r3
 800183a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b29b      	uxth	r3, r3
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d021      	beq.n	800189a <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800185e:	b29b      	uxth	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4413      	add	r3, r2
 800186a:	3302      	adds	r3, #2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	4413      	add	r3, r2
 8001874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800187e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001880:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001882:	2b00      	cmp	r3, #0
 8001884:	d02a      	beq.n	80018dc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	6959      	ldr	r1, [r3, #20]
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	891a      	ldrh	r2, [r3, #8]
 8001892:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001894:	f003 f9c2 	bl	8004c1c <USB_ReadPMA>
 8001898:	e020      	b.n	80018dc <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4413      	add	r3, r2
 80018ae:	3306      	adds	r3, #6
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80018c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	6959      	ldr	r1, [r3, #20]
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	895a      	ldrh	r2, [r3, #10]
 80018d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018d8:	f003 f9a0 	bl	8004c1c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	69da      	ldr	r2, [r3, #28]
 80018e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018e2:	441a      	add	r2, r3
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018ee:	441a      	add	r2, r3
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <PCD_EP_ISR_Handler+0x4b0>
 80018fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	429a      	cmp	r2, r3
 8001904:	d206      	bcs.n	8001914 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	4619      	mov	r1, r3
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f007 fbf7 	bl	8009100 <HAL_PCD_DataOutStageCallback>
 8001912:	e005      	b.n	8001920 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800191a:	4618      	mov	r0, r3
 800191c:	f001 fedc 	bl	80036d8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001920:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001926:	2b00      	cmp	r3, #0
 8001928:	d07a      	beq.n	8001a20 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800192a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001958:	843b      	strh	r3, [r7, #32]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	441a      	add	r2, r3
 8001968:	8c3b      	ldrh	r3, [r7, #32]
 800196a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800196e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001972:	b29b      	uxth	r3, r3
 8001974:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	78db      	ldrb	r3, [r3, #3]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d108      	bne.n	8001990 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001982:	2b02      	cmp	r3, #2
 8001984:	d146      	bne.n	8001a14 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001986:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d141      	bne.n	8001a14 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001998:	b29b      	uxth	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4413      	add	r3, r2
 80019a4:	3302      	adds	r3, #2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019b8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	8bfb      	ldrh	r3, [r7, #30]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d906      	bls.n	80019d2 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	699a      	ldr	r2, [r3, #24]
 80019c8:	8bfb      	ldrh	r3, [r7, #30]
 80019ca:	1ad2      	subs	r2, r2, r3
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	619a      	str	r2, [r3, #24]
 80019d0:	e002      	b.n	80019d8 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d106      	bne.n	80019ee <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f007 fba5 	bl	8009136 <HAL_PCD_DataInStageCallback>
 80019ec:	e018      	b.n	8001a20 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	8bfb      	ldrh	r3, [r7, #30]
 80019f4:	441a      	add	r2, r3
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	8bfb      	ldrh	r3, [r7, #30]
 8001a00:	441a      	add	r2, r3
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 fe63 	bl	80036d8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001a12:	e005      	b.n	8001a20 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a16:	461a      	mov	r2, r3
 8001a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f91b 	bl	8001c56 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f6ff ad17 	blt.w	8001460 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3738      	adds	r7, #56	; 0x38
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	4613      	mov	r3, r2
 8001a48:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d07e      	beq.n	8001b52 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a7c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	8b7b      	ldrh	r3, [r7, #26]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d306      	bcc.n	8001a96 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	8b7b      	ldrh	r3, [r7, #26]
 8001a8e:	1ad2      	subs	r2, r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	619a      	str	r2, [r3, #24]
 8001a94:	e002      	b.n	8001a9c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d123      	bne.n	8001aec <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001abe:	833b      	strh	r3, [r7, #24]
 8001ac0:	8b3b      	ldrh	r3, [r7, #24]
 8001ac2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ac6:	833b      	strh	r3, [r7, #24]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	441a      	add	r2, r3
 8001ad6:	8b3b      	ldrh	r3, [r7, #24]
 8001ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d01f      	beq.n	8001b36 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b10:	82fb      	strh	r3, [r7, #22]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	441a      	add	r2, r3
 8001b20:	8afb      	ldrh	r3, [r7, #22]
 8001b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b36:	8b7b      	ldrh	r3, [r7, #26]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 8087 	beq.w	8001c4c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	6959      	ldr	r1, [r3, #20]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	891a      	ldrh	r2, [r3, #8]
 8001b4a:	8b7b      	ldrh	r3, [r7, #26]
 8001b4c:	f003 f866 	bl	8004c1c <USB_ReadPMA>
 8001b50:	e07c      	b.n	8001c4c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	3306      	adds	r3, #6
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b7a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	699a      	ldr	r2, [r3, #24]
 8001b80:	8b7b      	ldrh	r3, [r7, #26]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d306      	bcc.n	8001b94 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	699a      	ldr	r2, [r3, #24]
 8001b8a:	8b7b      	ldrh	r3, [r7, #26]
 8001b8c:	1ad2      	subs	r2, r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	619a      	str	r2, [r3, #24]
 8001b92:	e002      	b.n	8001b9a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d123      	bne.n	8001bea <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bbc:	83fb      	strh	r3, [r7, #30]
 8001bbe:	8bfb      	ldrh	r3, [r7, #30]
 8001bc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bc4:	83fb      	strh	r3, [r7, #30]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	441a      	add	r2, r3
 8001bd4:	8bfb      	ldrh	r3, [r7, #30]
 8001bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d11f      	bne.n	8001c34 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0e:	83bb      	strh	r3, [r7, #28]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	441a      	add	r2, r3
 8001c1e:	8bbb      	ldrh	r3, [r7, #28]
 8001c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c34:	8b7b      	ldrh	r3, [r7, #26]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d008      	beq.n	8001c4c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	6959      	ldr	r1, [r3, #20]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	895a      	ldrh	r2, [r3, #10]
 8001c46:	8b7b      	ldrh	r3, [r7, #26]
 8001c48:	f002 ffe8 	bl	8004c1c <USB_ReadPMA>
    }
  }

  return count;
 8001c4c:	8b7b      	ldrh	r3, [r7, #26]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b092      	sub	sp, #72	; 0x48
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	4613      	mov	r3, r2
 8001c62:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8132 	beq.w	8001ed4 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	3302      	adds	r3, #2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c98:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d906      	bls.n	8001cb2 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001caa:	1ad2      	subs	r2, r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	619a      	str	r2, [r3, #24]
 8001cb0:	e002      	b.n	8001cb8 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d12c      	bne.n	8001d1a <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f007 fa35 	bl	8009136 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 822f 	beq.w	8002136 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cf2:	827b      	strh	r3, [r7, #18]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	441a      	add	r2, r3
 8001d02:	8a7b      	ldrh	r3, [r7, #18]
 8001d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	8013      	strh	r3, [r2, #0]
 8001d18:	e20d      	b.n	8002136 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01f      	beq.n	8001d64 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d3e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	441a      	add	r2, r3
 8001d4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	f040 81e3 	bne.w	8002136 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d76:	441a      	add	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d82:	441a      	add	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	6a1a      	ldr	r2, [r3, #32]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d309      	bcc.n	8001da8 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	6a1a      	ldr	r2, [r3, #32]
 8001d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da0:	1ad2      	subs	r2, r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	621a      	str	r2, [r3, #32]
 8001da6:	e014      	b.n	8001dd2 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d106      	bne.n	8001dbe <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001db0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001dbc:	e009      	b.n	8001dd2 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	785b      	ldrb	r3, [r3, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d155      	bne.n	8001e86 <HAL_PCD_EP_DB_Transmit+0x230>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	4413      	add	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	011a      	lsls	r2, r3, #4
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d112      	bne.n	8001e2e <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	801a      	strh	r2, [r3, #0]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	801a      	strh	r2, [r3, #0]
 8001e2c:	e047      	b.n	8001ebe <HAL_PCD_EP_DB_Transmit+0x268>
 8001e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e30:	2b3e      	cmp	r3, #62	; 0x3e
 8001e32:	d811      	bhi.n	8001e58 <HAL_PCD_EP_DB_Transmit+0x202>
 8001e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e46:	3301      	adds	r3, #1
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	029b      	lsls	r3, r3, #10
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	801a      	strh	r2, [r3, #0]
 8001e56:	e032      	b.n	8001ebe <HAL_PCD_EP_DB_Transmit+0x268>
 8001e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <HAL_PCD_EP_DB_Transmit+0x218>
 8001e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	029b      	lsls	r3, r3, #10
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	801a      	strh	r2, [r3, #0]
 8001e84:	e01b      	b.n	8001ebe <HAL_PCD_EP_DB_Transmit+0x268>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	785b      	ldrb	r3, [r3, #1]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d117      	bne.n	8001ebe <HAL_PCD_EP_DB_Transmit+0x268>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	623b      	str	r3, [r7, #32]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	623b      	str	r3, [r7, #32]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	011a      	lsls	r2, r3, #4
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	6959      	ldr	r1, [r3, #20]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	891a      	ldrh	r2, [r3, #8]
 8001eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	f002 fe61 	bl	8004b94 <USB_WritePMA>
 8001ed2:	e130      	b.n	8002136 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3306      	adds	r3, #6
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001efc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d306      	bcc.n	8001f16 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	699a      	ldr	r2, [r3, #24]
 8001f0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	619a      	str	r2, [r3, #24]
 8001f14:	e002      	b.n	8001f1c <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d12c      	bne.n	8001f7e <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f007 f903 	bl	8009136 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 80fd 	bne.w	8002136 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	441a      	add	r2, r3
 8001f66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	8013      	strh	r3, [r2, #0]
 8001f7c:	e0db      	b.n	8002136 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d11f      	bne.n	8001fc8 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	441a      	add	r2, r3
 8001fb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	f040 80b1 	bne.w	8002136 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fda:	441a      	add	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fe6:	441a      	add	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	6a1a      	ldr	r2, [r3, #32]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d309      	bcc.n	800200c <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	6a1a      	ldr	r2, [r3, #32]
 8002002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002004:	1ad2      	subs	r2, r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	621a      	str	r2, [r3, #32]
 800200a:	e014      	b.n	8002036 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d106      	bne.n	8002022 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002014:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002016:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002020:	e009      	b.n	8002036 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2200      	movs	r2, #0
 800202c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	637b      	str	r3, [r7, #52]	; 0x34
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	785b      	ldrb	r3, [r3, #1]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d155      	bne.n	80020f0 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	647b      	str	r3, [r7, #68]	; 0x44
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002052:	b29b      	uxth	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002058:	4413      	add	r3, r2
 800205a:	647b      	str	r3, [r7, #68]	; 0x44
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	011a      	lsls	r2, r3, #4
 8002062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002064:	4413      	add	r3, r2
 8002066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800206a:	643b      	str	r3, [r7, #64]	; 0x40
 800206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206e:	2b00      	cmp	r3, #0
 8002070:	d112      	bne.n	8002098 <HAL_PCD_EP_DB_Transmit+0x442>
 8002072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800207c:	b29a      	uxth	r2, r3
 800207e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002080:	801a      	strh	r2, [r3, #0]
 8002082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800208c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002090:	b29a      	uxth	r2, r3
 8002092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	e044      	b.n	8002122 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209a:	2b3e      	cmp	r3, #62	; 0x3e
 800209c:	d811      	bhi.n	80020c2 <HAL_PCD_EP_DB_Transmit+0x46c>
 800209e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a0:	085b      	lsrs	r3, r3, #1
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_PCD_EP_DB_Transmit+0x45e>
 80020ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b0:	3301      	adds	r3, #1
 80020b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	029b      	lsls	r3, r3, #10
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020be:	801a      	strh	r2, [r3, #0]
 80020c0:	e02f      	b.n	8002122 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80020c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <HAL_PCD_EP_DB_Transmit+0x482>
 80020d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d4:	3b01      	subs	r3, #1
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020da:	b29b      	uxth	r3, r3
 80020dc:	029b      	lsls	r3, r3, #10
 80020de:	b29b      	uxth	r3, r3
 80020e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ec:	801a      	strh	r2, [r3, #0]
 80020ee:	e018      	b.n	8002122 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	785b      	ldrb	r3, [r3, #1]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d114      	bne.n	8002122 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002100:	b29b      	uxth	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002106:	4413      	add	r3, r2
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	011a      	lsls	r2, r3, #4
 8002110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002112:	4413      	add	r3, r2
 8002114:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	b29a      	uxth	r2, r3
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002120:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	6959      	ldr	r1, [r3, #20]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	895a      	ldrh	r2, [r3, #10]
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	b29b      	uxth	r3, r3
 8002132:	f002 fd2f 	bl	8004b94 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800214c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002150:	823b      	strh	r3, [r7, #16]
 8002152:	8a3b      	ldrh	r3, [r7, #16]
 8002154:	f083 0310 	eor.w	r3, r3, #16
 8002158:	823b      	strh	r3, [r7, #16]
 800215a:	8a3b      	ldrh	r3, [r7, #16]
 800215c:	f083 0320 	eor.w	r3, r3, #32
 8002160:	823b      	strh	r3, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	441a      	add	r2, r3
 8002170:	8a3b      	ldrh	r3, [r7, #16]
 8002172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800217a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002182:	b29b      	uxth	r3, r3
 8002184:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3748      	adds	r7, #72	; 0x48
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	817b      	strh	r3, [r7, #10]
 800219e:	4613      	mov	r3, r2
 80021a0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80021a2:	897b      	ldrh	r3, [r7, #10]
 80021a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ae:	897b      	ldrh	r3, [r7, #10]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4413      	add	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	e009      	b.n	80021da <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021c6:	897a      	ldrh	r2, [r7, #10]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80021da:	893b      	ldrh	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d107      	bne.n	80021f0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2200      	movs	r2, #0
 80021e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	80da      	strh	r2, [r3, #6]
 80021ee:	e00b      	b.n	8002208 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2201      	movs	r2, #1
 80021f4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	b29a      	uxth	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e26c      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8087 	beq.w	8002342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002234:	4b92      	ldr	r3, [pc, #584]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b04      	cmp	r3, #4
 800223e:	d00c      	beq.n	800225a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002240:	4b8f      	ldr	r3, [pc, #572]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d112      	bne.n	8002272 <HAL_RCC_OscConfig+0x5e>
 800224c:	4b8c      	ldr	r3, [pc, #560]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002258:	d10b      	bne.n	8002272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225a:	4b89      	ldr	r3, [pc, #548]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d06c      	beq.n	8002340 <HAL_RCC_OscConfig+0x12c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d168      	bne.n	8002340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e246      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x76>
 800227c:	4b80      	ldr	r3, [pc, #512]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a7f      	ldr	r2, [pc, #508]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	e02e      	b.n	80022e8 <HAL_RCC_OscConfig+0xd4>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x98>
 8002292:	4b7b      	ldr	r3, [pc, #492]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7a      	ldr	r2, [pc, #488]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b78      	ldr	r3, [pc, #480]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a77      	ldr	r2, [pc, #476]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e01d      	b.n	80022e8 <HAL_RCC_OscConfig+0xd4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0xbc>
 80022b6:	4b72      	ldr	r3, [pc, #456]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a71      	ldr	r2, [pc, #452]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b6f      	ldr	r3, [pc, #444]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6e      	ldr	r2, [pc, #440]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e00b      	b.n	80022e8 <HAL_RCC_OscConfig+0xd4>
 80022d0:	4b6b      	ldr	r3, [pc, #428]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a6a      	ldr	r2, [pc, #424]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a67      	ldr	r2, [pc, #412]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7fe f96a 	bl	80005c8 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fe f966 	bl	80005c8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e1fa      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	4b5d      	ldr	r3, [pc, #372]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0xe4>
 8002316:	e014      	b.n	8002342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe f956 	bl	80005c8 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002320:	f7fe f952 	bl	80005c8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	; 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e1e6      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	4b53      	ldr	r3, [pc, #332]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x10c>
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d063      	beq.n	8002416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800234e:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800235a:	4b49      	ldr	r3, [pc, #292]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b08      	cmp	r3, #8
 8002364:	d11c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x18c>
 8002366:	4b46      	ldr	r3, [pc, #280]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d116      	bne.n	80023a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002372:	4b43      	ldr	r3, [pc, #268]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_RCC_OscConfig+0x176>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e1ba      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4939      	ldr	r1, [pc, #228]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	e03a      	b.n	8002416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a8:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe f90b 	bl	80005c8 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b6:	f7fe f907 	bl	80005c8 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e19b      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4927      	ldr	r1, [pc, #156]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
 80023e8:	e015      	b.n	8002416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe f8ea 	bl	80005c8 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f8:	f7fe f8e6 	bl	80005c8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e17a      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d03a      	beq.n	8002498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d019      	beq.n	800245e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242a:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_RCC_OscConfig+0x274>)
 800242c:	2201      	movs	r2, #1
 800242e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002430:	f7fe f8ca 	bl	80005c8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002438:	f7fe f8c6 	bl	80005c8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e15a      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <HAL_RCC_OscConfig+0x26c>)
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002456:	2001      	movs	r0, #1
 8002458:	f000 faa8 	bl	80029ac <RCC_Delay>
 800245c:	e01c      	b.n	8002498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_RCC_OscConfig+0x274>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002464:	f7fe f8b0 	bl	80005c8 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246a:	e00f      	b.n	800248c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7fe f8ac 	bl	80005c8 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d908      	bls.n	800248c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e140      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	42420000 	.word	0x42420000
 8002488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248c:	4b9e      	ldr	r3, [pc, #632]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e9      	bne.n	800246c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a6 	beq.w	80025f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024aa:	4b97      	ldr	r3, [pc, #604]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	4b94      	ldr	r3, [pc, #592]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a93      	ldr	r2, [pc, #588]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	61d3      	str	r3, [r2, #28]
 80024c2:	4b91      	ldr	r3, [pc, #580]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	4b8e      	ldr	r3, [pc, #568]	; (800270c <HAL_RCC_OscConfig+0x4f8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d118      	bne.n	8002510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024de:	4b8b      	ldr	r3, [pc, #556]	; (800270c <HAL_RCC_OscConfig+0x4f8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a8a      	ldr	r2, [pc, #552]	; (800270c <HAL_RCC_OscConfig+0x4f8>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ea:	f7fe f86d 	bl	80005c8 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f2:	f7fe f869 	bl	80005c8 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b64      	cmp	r3, #100	; 0x64
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e0fd      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	4b81      	ldr	r3, [pc, #516]	; (800270c <HAL_RCC_OscConfig+0x4f8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x312>
 8002518:	4b7b      	ldr	r3, [pc, #492]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4a7a      	ldr	r2, [pc, #488]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6213      	str	r3, [r2, #32]
 8002524:	e02d      	b.n	8002582 <HAL_RCC_OscConfig+0x36e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x334>
 800252e:	4b76      	ldr	r3, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a75      	ldr	r2, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6213      	str	r3, [r2, #32]
 800253a:	4b73      	ldr	r3, [pc, #460]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a72      	ldr	r2, [pc, #456]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	6213      	str	r3, [r2, #32]
 8002546:	e01c      	b.n	8002582 <HAL_RCC_OscConfig+0x36e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b05      	cmp	r3, #5
 800254e:	d10c      	bne.n	800256a <HAL_RCC_OscConfig+0x356>
 8002550:	4b6d      	ldr	r3, [pc, #436]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a6c      	ldr	r2, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	6213      	str	r3, [r2, #32]
 800255c:	4b6a      	ldr	r3, [pc, #424]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a69      	ldr	r2, [pc, #420]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6213      	str	r3, [r2, #32]
 8002568:	e00b      	b.n	8002582 <HAL_RCC_OscConfig+0x36e>
 800256a:	4b67      	ldr	r3, [pc, #412]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a66      	ldr	r2, [pc, #408]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6213      	str	r3, [r2, #32]
 8002576:	4b64      	ldr	r3, [pc, #400]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4a63      	ldr	r2, [pc, #396]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d015      	beq.n	80025b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fe f81d 	bl	80005c8 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe f819 	bl	80005c8 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0ab      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	4b57      	ldr	r3, [pc, #348]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ee      	beq.n	8002592 <HAL_RCC_OscConfig+0x37e>
 80025b4:	e014      	b.n	80025e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b6:	f7fe f807 	bl	80005c8 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025bc:	e00a      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025be:	f7fe f803 	bl	80005c8 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e095      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d4:	4b4c      	ldr	r3, [pc, #304]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ee      	bne.n	80025be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d105      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e6:	4b48      	ldr	r3, [pc, #288]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a47      	ldr	r2, [pc, #284]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8081 	beq.w	80026fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fc:	4b42      	ldr	r3, [pc, #264]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b08      	cmp	r3, #8
 8002606:	d061      	beq.n	80026cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d146      	bne.n	800269e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002610:	4b3f      	ldr	r3, [pc, #252]	; (8002710 <HAL_RCC_OscConfig+0x4fc>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7fd ffd7 	bl	80005c8 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261e:	f7fd ffd3 	bl	80005c8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e067      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	4b35      	ldr	r3, [pc, #212]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002644:	d108      	bne.n	8002658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002646:	4b30      	ldr	r3, [pc, #192]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	492d      	ldr	r1, [pc, #180]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a19      	ldr	r1, [r3, #32]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	430b      	orrs	r3, r1
 800266a:	4927      	ldr	r1, [pc, #156]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_RCC_OscConfig+0x4fc>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fd ffa7 	bl	80005c8 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7fd ffa3 	bl	80005c8 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e037      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x46a>
 800269c:	e02f      	b.n	80026fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_RCC_OscConfig+0x4fc>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fd ff90 	bl	80005c8 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fd ff8c 	bl	80005c8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e020      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x498>
 80026ca:	e018      	b.n	80026fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e013      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d106      	bne.n	80026fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000
 800270c:	40007000 	.word	0x40007000
 8002710:	42420060 	.word	0x42420060

08002714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0d0      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b6a      	ldr	r3, [pc, #424]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d910      	bls.n	8002758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b67      	ldr	r3, [pc, #412]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0207 	bic.w	r2, r3, #7
 800273e:	4965      	ldr	r1, [pc, #404]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b63      	ldr	r3, [pc, #396]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0b8      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002770:	4b59      	ldr	r3, [pc, #356]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a58      	ldr	r2, [pc, #352]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800277a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002788:	4b53      	ldr	r3, [pc, #332]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a52      	ldr	r2, [pc, #328]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b50      	ldr	r3, [pc, #320]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	494d      	ldr	r1, [pc, #308]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d040      	beq.n	8002834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d115      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07f      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b41      	ldr	r3, [pc, #260]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e073      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e2:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e06b      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4936      	ldr	r1, [pc, #216]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002804:	f7fd fee0 	bl	80005c8 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7fd fedc 	bl	80005c8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e053      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b2d      	ldr	r3, [pc, #180]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d210      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 0207 	bic.w	r2, r3, #7
 800284a:	4922      	ldr	r1, [pc, #136]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e032      	b.n	80028ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4916      	ldr	r1, [pc, #88]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	490e      	ldr	r1, [pc, #56]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028a2:	f000 f821 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 80028a6:	4601      	mov	r1, r0
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	5cd3      	ldrb	r3, [r2, r3]
 80028b6:	fa21 f303 	lsr.w	r3, r1, r3
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1cc>)
 80028bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x1d0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fe3e 	bl	8000544 <HAL_InitTick>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40022000 	.word	0x40022000
 80028d8:	40021000 	.word	0x40021000
 80028dc:	08009734 	.word	0x08009734
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000004 	.word	0x20000004

080028e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	b490      	push	{r4, r7}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028ee:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028f0:	1d3c      	adds	r4, r7, #4
 80028f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <HAL_RCC_GetSysClockFreq+0xb4>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	2300      	movs	r3, #0
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	2300      	movs	r3, #0
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002912:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b04      	cmp	r3, #4
 8002920:	d002      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x40>
 8002922:	2b08      	cmp	r3, #8
 8002924:	d003      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x46>
 8002926:	e02d      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800292a:	623b      	str	r3, [r7, #32]
      break;
 800292c:	e02d      	b.n	800298a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	0c9b      	lsrs	r3, r3, #18
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800293a:	4413      	add	r3, r2
 800293c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002940:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d013      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	0c5b      	lsrs	r3, r3, #17
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800295a:	4413      	add	r3, r2
 800295c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002960:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002966:	fb02 f203 	mul.w	r2, r2, r3
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
 8002972:	e004      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	623b      	str	r3, [r7, #32]
      break;
 8002982:	e002      	b.n	800298a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002986:	623b      	str	r3, [r7, #32]
      break;
 8002988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298a:	6a3b      	ldr	r3, [r7, #32]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3728      	adds	r7, #40	; 0x28
 8002990:	46bd      	mov	sp, r7
 8002992:	bc90      	pop	{r4, r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	0800969c 	.word	0x0800969c
 800299c:	080096ac 	.word	0x080096ac
 80029a0:	40021000 	.word	0x40021000
 80029a4:	007a1200 	.word	0x007a1200
 80029a8:	003d0900 	.word	0x003d0900

080029ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029b4:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <RCC_Delay+0x34>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <RCC_Delay+0x38>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	0a5b      	lsrs	r3, r3, #9
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029c8:	bf00      	nop
  }
  while (Delay --);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1e5a      	subs	r2, r3, #1
 80029ce:	60fa      	str	r2, [r7, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f9      	bne.n	80029c8 <RCC_Delay+0x1c>
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000000 	.word	0x20000000
 80029e4:	10624dd3 	.word	0x10624dd3

080029e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d07d      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a04:	2300      	movs	r3, #0
 8002a06:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a08:	4b4f      	ldr	r3, [pc, #316]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10d      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a14:	4b4c      	ldr	r3, [pc, #304]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	4a4b      	ldr	r2, [pc, #300]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	61d3      	str	r3, [r2, #28]
 8002a20:	4b49      	ldr	r3, [pc, #292]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a30:	4b46      	ldr	r3, [pc, #280]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d118      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3c:	4b43      	ldr	r3, [pc, #268]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a42      	ldr	r2, [pc, #264]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a48:	f7fd fdbe 	bl	80005c8 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	e008      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a50:	f7fd fdba 	bl	80005c8 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e06d      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a62:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a6e:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d02e      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d027      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a8c:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a96:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a9c:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aa2:	4a29      	ldr	r2, [pc, #164]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d014      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab2:	f7fd fd89 	bl	80005c8 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7fd fd85 	bl	80005c8 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e036      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ee      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4917      	ldr	r1, [pc, #92]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	4a13      	ldr	r2, [pc, #76]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	490b      	ldr	r1, [pc, #44]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b2a:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4904      	ldr	r1, [pc, #16]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40007000 	.word	0x40007000
 8002b50:	42420440 	.word	0x42420440

08002b54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b54:	b084      	sub	sp, #16
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	f107 0014 	add.w	r0, r7, #20
 8002b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	b004      	add	sp, #16
 8002b72:	4770      	bx	lr

08002b74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b84:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ba8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002bac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002bec:	b084      	sub	sp, #16
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	f107 0014 	add.w	r0, r7, #20
 8002bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	b004      	add	sp, #16
 8002c2a:	4770      	bx	lr

08002c2c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b09b      	sub	sp, #108	; 0x6c
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	78db      	ldrb	r3, [r3, #3]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d81f      	bhi.n	8002c9e <USB_ActivateEndpoint+0x72>
 8002c5e:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <USB_ActivateEndpoint+0x38>)
 8002c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c64:	08002c75 	.word	0x08002c75
 8002c68:	08002c91 	.word	0x08002c91
 8002c6c:	08002ca7 	.word	0x08002ca7
 8002c70:	08002c83 	.word	0x08002c83
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002c74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002c80:	e012      	b.n	8002ca8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002c82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c86:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002c8a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002c8e:	e00b      	b.n	8002ca8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002c90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c98:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002c9c:	e004      	b.n	8002ca8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002ca4:	e000      	b.n	8002ca8 <USB_ActivateEndpoint+0x7c>
      break;
 8002ca6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	441a      	add	r2, r3
 8002cb2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	441a      	add	r2, r3
 8002cf8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	7b1b      	ldrb	r3, [r3, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f040 8149 	bne.w	8002fac <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	785b      	ldrb	r3, [r3, #1]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8084 	beq.w	8002e2c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	4413      	add	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	011a      	lsls	r2, r3, #4
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	88db      	ldrh	r3, [r3, #6]
 8002d4c:	085b      	lsrs	r3, r3, #1
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	81fb      	strh	r3, [r7, #14]
 8002d66:	89fb      	ldrh	r3, [r7, #14]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01b      	beq.n	8002da8 <USB_ActivateEndpoint+0x17c>
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	81bb      	strh	r3, [r7, #12]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	441a      	add	r2, r3
 8002d92:	89bb      	ldrh	r3, [r7, #12]
 8002d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	78db      	ldrb	r3, [r3, #3]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d020      	beq.n	8002df2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc6:	813b      	strh	r3, [r7, #8]
 8002dc8:	893b      	ldrh	r3, [r7, #8]
 8002dca:	f083 0320 	eor.w	r3, r3, #32
 8002dce:	813b      	strh	r3, [r7, #8]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	441a      	add	r2, r3
 8002dda:	893b      	ldrh	r3, [r7, #8]
 8002ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	8013      	strh	r3, [r2, #0]
 8002df0:	e27f      	b.n	80032f2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e08:	817b      	strh	r3, [r7, #10]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	441a      	add	r2, r3
 8002e14:	897b      	ldrh	r3, [r7, #10]
 8002e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	8013      	strh	r3, [r2, #0]
 8002e2a:	e262      	b.n	80032f2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	4413      	add	r3, r2
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	011a      	lsls	r2, r3, #4
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	88db      	ldrh	r3, [r3, #6]
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	4413      	add	r3, r2
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	011a      	lsls	r2, r3, #4
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e82:	623b      	str	r3, [r7, #32]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d112      	bne.n	8002eb2 <USB_ActivateEndpoint+0x286>
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	801a      	strh	r2, [r3, #0]
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	801a      	strh	r2, [r3, #0]
 8002eb0:	e02f      	b.n	8002f12 <USB_ActivateEndpoint+0x2e6>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b3e      	cmp	r3, #62	; 0x3e
 8002eb8:	d813      	bhi.n	8002ee2 <USB_ActivateEndpoint+0x2b6>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	085b      	lsrs	r3, r3, #1
 8002ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <USB_ActivateEndpoint+0x2a8>
 8002ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	029b      	lsls	r3, r3, #10
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	801a      	strh	r2, [r3, #0]
 8002ee0:	e017      	b.n	8002f12 <USB_ActivateEndpoint+0x2e6>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <USB_ActivateEndpoint+0x2d0>
 8002ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	663b      	str	r3, [r7, #96]	; 0x60
 8002efc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	029b      	lsls	r3, r3, #10
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	83fb      	strh	r3, [r7, #30]
 8002f20:	8bfb      	ldrh	r3, [r7, #30]
 8002f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01b      	beq.n	8002f62 <USB_ActivateEndpoint+0x336>
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f40:	83bb      	strh	r3, [r7, #28]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	441a      	add	r2, r3
 8002f4c:	8bbb      	ldrh	r3, [r7, #28]
 8002f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f78:	837b      	strh	r3, [r7, #26]
 8002f7a:	8b7b      	ldrh	r3, [r7, #26]
 8002f7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f80:	837b      	strh	r3, [r7, #26]
 8002f82:	8b7b      	ldrh	r3, [r7, #26]
 8002f84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f88:	837b      	strh	r3, [r7, #26]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	441a      	add	r2, r3
 8002f94:	8b7b      	ldrh	r3, [r7, #26]
 8002f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	8013      	strh	r3, [r2, #0]
 8002faa:	e1a2      	b.n	80032f2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	441a      	add	r2, r3
 8002fd0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fdc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff8:	4413      	add	r3, r2
 8002ffa:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	011a      	lsls	r2, r3, #4
 8003002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003004:	4413      	add	r3, r2
 8003006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800300a:	657b      	str	r3, [r7, #84]	; 0x54
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	891b      	ldrh	r3, [r3, #8]
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	b29b      	uxth	r3, r3
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800301a:	801a      	strh	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	653b      	str	r3, [r7, #80]	; 0x50
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003026:	b29b      	uxth	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302c:	4413      	add	r3, r2
 800302e:	653b      	str	r3, [r7, #80]	; 0x50
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	011a      	lsls	r2, r3, #4
 8003036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003038:	4413      	add	r3, r2
 800303a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	895b      	ldrh	r3, [r3, #10]
 8003044:	085b      	lsrs	r3, r3, #1
 8003046:	b29b      	uxth	r3, r3
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	785b      	ldrb	r3, [r3, #1]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 8091 	bne.w	800317c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003068:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800306a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01b      	beq.n	80030aa <USB_ActivateEndpoint+0x47e>
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003088:	877b      	strh	r3, [r7, #58]	; 0x3a
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	441a      	add	r2, r3
 8003094:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800309a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800309e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80030b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d01b      	beq.n	80030fa <USB_ActivateEndpoint+0x4ce>
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	441a      	add	r2, r3
 80030e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800310c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003110:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003112:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003114:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003118:	86bb      	strh	r3, [r7, #52]	; 0x34
 800311a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800311c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003120:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	441a      	add	r2, r3
 800312c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800312e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800313a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800313e:	b29b      	uxth	r3, r3
 8003140:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003158:	867b      	strh	r3, [r7, #50]	; 0x32
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	441a      	add	r2, r3
 8003164:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800316a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800316e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003176:	b29b      	uxth	r3, r3
 8003178:	8013      	strh	r3, [r2, #0]
 800317a:	e0ba      	b.n	80032f2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800318c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01d      	beq.n	80031d4 <USB_ActivateEndpoint+0x5a8>
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	441a      	add	r2, r3
 80031bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80031e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01d      	beq.n	800322c <USB_ActivateEndpoint+0x600>
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	441a      	add	r2, r3
 8003214:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800321c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003224:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003228:	b29b      	uxth	r3, r3
 800322a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	78db      	ldrb	r3, [r3, #3]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d024      	beq.n	800327e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800324a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800324e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003252:	f083 0320 	eor.w	r3, r3, #32
 8003256:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	441a      	add	r2, r3
 8003264:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800326c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003278:	b29b      	uxth	r3, r3
 800327a:	8013      	strh	r3, [r2, #0]
 800327c:	e01d      	b.n	80032ba <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003294:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	441a      	add	r2, r3
 80032a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80032a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	441a      	add	r2, r3
 80032dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80032de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80032f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	376c      	adds	r7, #108	; 0x6c
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003300:	b480      	push	{r7}
 8003302:	b08d      	sub	sp, #52	; 0x34
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	7b1b      	ldrb	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f040 808e 	bne.w	8003430 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	785b      	ldrb	r3, [r3, #1]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d044      	beq.n	80033a6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	81bb      	strh	r3, [r7, #12]
 800332a:	89bb      	ldrh	r3, [r7, #12]
 800332c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01b      	beq.n	800336c <USB_DeactivateEndpoint+0x6c>
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	b29b      	uxth	r3, r3
 8003342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334a:	817b      	strh	r3, [r7, #10]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	441a      	add	r2, r3
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800335c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003364:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003368:	b29b      	uxth	r3, r3
 800336a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b29b      	uxth	r3, r3
 800337a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003382:	813b      	strh	r3, [r7, #8]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	893b      	ldrh	r3, [r7, #8]
 8003390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800339c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	8013      	strh	r3, [r2, #0]
 80033a4:	e192      	b.n	80036cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	827b      	strh	r3, [r7, #18]
 80033b4:	8a7b      	ldrh	r3, [r7, #18]
 80033b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01b      	beq.n	80033f6 <USB_DeactivateEndpoint+0xf6>
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d4:	823b      	strh	r3, [r7, #16]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	441a      	add	r2, r3
 80033e0:	8a3b      	ldrh	r3, [r7, #16]
 80033e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	b29b      	uxth	r3, r3
 8003404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340c:	81fb      	strh	r3, [r7, #14]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	441a      	add	r2, r3
 8003418:	89fb      	ldrh	r3, [r7, #14]
 800341a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800341e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800342a:	b29b      	uxth	r3, r3
 800342c:	8013      	strh	r3, [r2, #0]
 800342e:	e14d      	b.n	80036cc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f040 80a5 	bne.w	8003584 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	843b      	strh	r3, [r7, #32]
 8003448:	8c3b      	ldrh	r3, [r7, #32]
 800344a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01b      	beq.n	800348a <USB_DeactivateEndpoint+0x18a>
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003468:	83fb      	strh	r3, [r7, #30]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	441a      	add	r2, r3
 8003474:	8bfb      	ldrh	r3, [r7, #30]
 8003476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800347a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800347e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003486:	b29b      	uxth	r3, r3
 8003488:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	83bb      	strh	r3, [r7, #28]
 8003498:	8bbb      	ldrh	r3, [r7, #28]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01b      	beq.n	80034da <USB_DeactivateEndpoint+0x1da>
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b8:	837b      	strh	r3, [r7, #26]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	441a      	add	r2, r3
 80034c4:	8b7b      	ldrh	r3, [r7, #26]
 80034c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f0:	833b      	strh	r3, [r7, #24]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	441a      	add	r2, r3
 80034fc:	8b3b      	ldrh	r3, [r7, #24]
 80034fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800350a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800350e:	b29b      	uxth	r3, r3
 8003510:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003528:	82fb      	strh	r3, [r7, #22]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	441a      	add	r2, r3
 8003534:	8afb      	ldrh	r3, [r7, #22]
 8003536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800353a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800353e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003546:	b29b      	uxth	r3, r3
 8003548:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003560:	82bb      	strh	r3, [r7, #20]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	441a      	add	r2, r3
 800356c:	8abb      	ldrh	r3, [r7, #20]
 800356e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357e:	b29b      	uxth	r3, r3
 8003580:	8013      	strh	r3, [r2, #0]
 8003582:	e0a3      	b.n	80036cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003592:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01b      	beq.n	80035d4 <USB_DeactivateEndpoint+0x2d4>
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	441a      	add	r2, r3
 80035be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80035c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80035e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01b      	beq.n	8003624 <USB_DeactivateEndpoint+0x324>
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003602:	853b      	strh	r3, [r7, #40]	; 0x28
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	441a      	add	r2, r3
 800360e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003620:	b29b      	uxth	r3, r3
 8003622:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b29b      	uxth	r3, r3
 8003632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800364c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003658:	b29b      	uxth	r3, r3
 800365a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003672:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	441a      	add	r2, r3
 800367e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003690:	b29b      	uxth	r3, r3
 8003692:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	441a      	add	r2, r3
 80036b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3734      	adds	r7, #52	; 0x34
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b0c4      	sub	sp, #272	; 0x110
 80036dc:	af00      	add	r7, sp, #0
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	6018      	str	r0, [r3, #0]
 80036e2:	463b      	mov	r3, r7
 80036e4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036e6:	463b      	mov	r3, r7
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	785b      	ldrb	r3, [r3, #1]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	f040 8557 	bne.w	80041a0 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80036f2:	463b      	mov	r3, r7
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	463b      	mov	r3, r7
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d905      	bls.n	800370e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003702:	463b      	mov	r3, r7
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800370c:	e004      	b.n	8003718 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800370e:	463b      	mov	r3, r7
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003718:	463b      	mov	r3, r7
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	7b1b      	ldrb	r3, [r3, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d12c      	bne.n	800377c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003722:	463b      	mov	r3, r7
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6959      	ldr	r1, [r3, #20]
 8003728:	463b      	mov	r3, r7
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	88da      	ldrh	r2, [r3, #6]
 800372e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003732:	b29b      	uxth	r3, r3
 8003734:	1d38      	adds	r0, r7, #4
 8003736:	6800      	ldr	r0, [r0, #0]
 8003738:	f001 fa2c 	bl	8004b94 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800373c:	1d3b      	adds	r3, r7, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800374a:	b29b      	uxth	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	4413      	add	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	463b      	mov	r3, r7
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	011a      	lsls	r2, r3, #4
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	4413      	add	r3, r2
 8003760:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003764:	f107 0310 	add.w	r3, r7, #16
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800376e:	b29a      	uxth	r2, r3
 8003770:	f107 0310 	add.w	r3, r7, #16
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	801a      	strh	r2, [r3, #0]
 8003778:	f000 bcdd 	b.w	8004136 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800377c:	463b      	mov	r3, r7
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	78db      	ldrb	r3, [r3, #3]
 8003782:	2b02      	cmp	r3, #2
 8003784:	f040 8347 	bne.w	8003e16 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003788:	463b      	mov	r3, r7
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6a1a      	ldr	r2, [r3, #32]
 800378e:	463b      	mov	r3, r7
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	429a      	cmp	r2, r3
 8003796:	f240 82eb 	bls.w	8003d70 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800379a:	1d3b      	adds	r3, r7, #4
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	463b      	mov	r3, r7
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	463b      	mov	r3, r7
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80037ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80037d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037da:	b29b      	uxth	r3, r3
 80037dc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80037de:	463b      	mov	r3, r7
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e8:	1ad2      	subs	r2, r2, r3
 80037ea:	463b      	mov	r3, r7
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	463b      	mov	r3, r7
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8159 	beq.w	8003abe <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800380c:	1d3b      	adds	r3, r7, #4
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
 8003812:	463b      	mov	r3, r7
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	785b      	ldrb	r3, [r3, #1]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d164      	bne.n	80038e6 <USB_EPStartXfer+0x20e>
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003822:	1d3b      	adds	r3, r7, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800382a:	b29b      	uxth	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	4413      	add	r3, r2
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003834:	463b      	mov	r3, r7
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	011a      	lsls	r2, r3, #4
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383e:	4413      	add	r3, r2
 8003840:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
 8003846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d112      	bne.n	8003874 <USB_EPStartXfer+0x19c>
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003858:	b29a      	uxth	r2, r3
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800386c:	b29a      	uxth	r2, r3
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	801a      	strh	r2, [r3, #0]
 8003872:	e054      	b.n	800391e <USB_EPStartXfer+0x246>
 8003874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003878:	2b3e      	cmp	r3, #62	; 0x3e
 800387a:	d817      	bhi.n	80038ac <USB_EPStartXfer+0x1d4>
 800387c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d004      	beq.n	800389c <USB_EPStartXfer+0x1c4>
 8003892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003896:	3301      	adds	r3, #1
 8003898:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800389c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	029b      	lsls	r3, r3, #10
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	801a      	strh	r2, [r3, #0]
 80038aa:	e038      	b.n	800391e <USB_EPStartXfer+0x246>
 80038ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <USB_EPStartXfer+0x1f4>
 80038c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038c6:	3b01      	subs	r3, #1
 80038c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	029b      	lsls	r3, r3, #10
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038de:	b29a      	uxth	r2, r3
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	801a      	strh	r2, [r3, #0]
 80038e4:	e01b      	b.n	800391e <USB_EPStartXfer+0x246>
 80038e6:	463b      	mov	r3, r7
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	785b      	ldrb	r3, [r3, #1]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d116      	bne.n	800391e <USB_EPStartXfer+0x246>
 80038f0:	1d3b      	adds	r3, r7, #4
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fe:	4413      	add	r3, r2
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
 8003902:	463b      	mov	r3, r7
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	011a      	lsls	r2, r3, #4
 800390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390c:	4413      	add	r3, r2
 800390e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003912:	633b      	str	r3, [r7, #48]	; 0x30
 8003914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003918:	b29a      	uxth	r2, r3
 800391a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800391e:	463b      	mov	r3, r7
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	895b      	ldrh	r3, [r3, #10]
 8003924:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003928:	463b      	mov	r3, r7
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6959      	ldr	r1, [r3, #20]
 800392e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003932:	b29b      	uxth	r3, r3
 8003934:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003938:	1d38      	adds	r0, r7, #4
 800393a:	6800      	ldr	r0, [r0, #0]
 800393c:	f001 f92a 	bl	8004b94 <USB_WritePMA>
            ep->xfer_buff += len;
 8003940:	463b      	mov	r3, r7
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800394a:	441a      	add	r2, r3
 800394c:	463b      	mov	r3, r7
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003952:	463b      	mov	r3, r7
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a1a      	ldr	r2, [r3, #32]
 8003958:	463b      	mov	r3, r7
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	d909      	bls.n	8003976 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003962:	463b      	mov	r3, r7
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6a1a      	ldr	r2, [r3, #32]
 8003968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800396c:	1ad2      	subs	r2, r2, r3
 800396e:	463b      	mov	r3, r7
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	621a      	str	r2, [r3, #32]
 8003974:	e008      	b.n	8003988 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003976:	463b      	mov	r3, r7
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003980:	463b      	mov	r3, r7
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2200      	movs	r2, #0
 8003986:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003988:	463b      	mov	r3, r7
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d164      	bne.n	8003a5c <USB_EPStartXfer+0x384>
 8003992:	1d3b      	adds	r3, r7, #4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	1d3b      	adds	r3, r7, #4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	4413      	add	r3, r2
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	463b      	mov	r3, r7
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	011a      	lsls	r2, r3, #4
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4413      	add	r3, r2
 80039b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d112      	bne.n	80039ea <USB_EPStartXfer+0x312>
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	801a      	strh	r2, [r3, #0]
 80039e8:	e057      	b.n	8003a9a <USB_EPStartXfer+0x3c2>
 80039ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ee:	2b3e      	cmp	r3, #62	; 0x3e
 80039f0:	d817      	bhi.n	8003a22 <USB_EPStartXfer+0x34a>
 80039f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d004      	beq.n	8003a12 <USB_EPStartXfer+0x33a>
 8003a08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	029b      	lsls	r3, r3, #10
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	801a      	strh	r2, [r3, #0]
 8003a20:	e03b      	b.n	8003a9a <USB_EPStartXfer+0x3c2>
 8003a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d104      	bne.n	8003a42 <USB_EPStartXfer+0x36a>
 8003a38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a42:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	029b      	lsls	r3, r3, #10
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	801a      	strh	r2, [r3, #0]
 8003a5a:	e01e      	b.n	8003a9a <USB_EPStartXfer+0x3c2>
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	785b      	ldrb	r3, [r3, #1]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d119      	bne.n	8003a9a <USB_EPStartXfer+0x3c2>
 8003a66:	1d3b      	adds	r3, r7, #4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	4413      	add	r3, r2
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7e:	463b      	mov	r3, r7
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	011a      	lsls	r2, r3, #4
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	4413      	add	r3, r2
 8003a8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	891b      	ldrh	r3, [r3, #8]
 8003aa0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003aa4:	463b      	mov	r3, r7
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6959      	ldr	r1, [r3, #20]
 8003aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003ab4:	1d38      	adds	r0, r7, #4
 8003ab6:	6800      	ldr	r0, [r0, #0]
 8003ab8:	f001 f86c 	bl	8004b94 <USB_WritePMA>
 8003abc:	e33b      	b.n	8004136 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003abe:	463b      	mov	r3, r7
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d164      	bne.n	8003b92 <USB_EPStartXfer+0x4ba>
 8003ac8:	1d3b      	adds	r3, r7, #4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ace:	1d3b      	adds	r3, r7, #4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003adc:	4413      	add	r3, r2
 8003ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae0:	463b      	mov	r3, r7
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	011a      	lsls	r2, r3, #4
 8003ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aea:	4413      	add	r3, r2
 8003aec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d112      	bne.n	8003b20 <USB_EPStartXfer+0x448>
 8003afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b08:	801a      	strh	r2, [r3, #0]
 8003b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b1c:	801a      	strh	r2, [r3, #0]
 8003b1e:	e057      	b.n	8003bd0 <USB_EPStartXfer+0x4f8>
 8003b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b24:	2b3e      	cmp	r3, #62	; 0x3e
 8003b26:	d817      	bhi.n	8003b58 <USB_EPStartXfer+0x480>
 8003b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d004      	beq.n	8003b48 <USB_EPStartXfer+0x470>
 8003b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b42:	3301      	adds	r3, #1
 8003b44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	029b      	lsls	r3, r3, #10
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	e03b      	b.n	8003bd0 <USB_EPStartXfer+0x4f8>
 8003b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d104      	bne.n	8003b78 <USB_EPStartXfer+0x4a0>
 8003b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b72:	3b01      	subs	r3, #1
 8003b74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	029b      	lsls	r3, r3, #10
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8e:	801a      	strh	r2, [r3, #0]
 8003b90:	e01e      	b.n	8003bd0 <USB_EPStartXfer+0x4f8>
 8003b92:	463b      	mov	r3, r7
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d119      	bne.n	8003bd0 <USB_EPStartXfer+0x4f8>
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb0:	4413      	add	r3, r2
 8003bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	011a      	lsls	r2, r3, #4
 8003bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8003bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003bd0:	463b      	mov	r3, r7
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	891b      	ldrh	r3, [r3, #8]
 8003bd6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bda:	463b      	mov	r3, r7
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6959      	ldr	r1, [r3, #20]
 8003be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003bea:	1d38      	adds	r0, r7, #4
 8003bec:	6800      	ldr	r0, [r0, #0]
 8003bee:	f000 ffd1 	bl	8004b94 <USB_WritePMA>
            ep->xfer_buff += len;
 8003bf2:	463b      	mov	r3, r7
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bfc:	441a      	add	r2, r3
 8003bfe:	463b      	mov	r3, r7
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003c04:	463b      	mov	r3, r7
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6a1a      	ldr	r2, [r3, #32]
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d909      	bls.n	8003c28 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003c14:	463b      	mov	r3, r7
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6a1a      	ldr	r2, [r3, #32]
 8003c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c1e:	1ad2      	subs	r2, r2, r3
 8003c20:	463b      	mov	r3, r7
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	621a      	str	r2, [r3, #32]
 8003c26:	e008      	b.n	8003c3a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c28:	463b      	mov	r3, r7
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003c32:	463b      	mov	r3, r7
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2200      	movs	r2, #0
 8003c38:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c3a:	1d3b      	adds	r3, r7, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c40:	463b      	mov	r3, r7
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	785b      	ldrb	r3, [r3, #1]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d164      	bne.n	8003d14 <USB_EPStartXfer+0x63c>
 8003c4a:	1d3b      	adds	r3, r7, #4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c50:	1d3b      	adds	r3, r7, #4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5e:	4413      	add	r3, r2
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c62:	463b      	mov	r3, r7
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	011a      	lsls	r2, r3, #4
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d112      	bne.n	8003ca2 <USB_EPStartXfer+0x5ca>
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	801a      	strh	r2, [r3, #0]
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	801a      	strh	r2, [r3, #0]
 8003ca0:	e054      	b.n	8003d4c <USB_EPStartXfer+0x674>
 8003ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ca8:	d817      	bhi.n	8003cda <USB_EPStartXfer+0x602>
 8003caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cae:	085b      	lsrs	r3, r3, #1
 8003cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <USB_EPStartXfer+0x5f2>
 8003cc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	029b      	lsls	r3, r3, #10
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	e038      	b.n	8003d4c <USB_EPStartXfer+0x674>
 8003cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d104      	bne.n	8003cfa <USB_EPStartXfer+0x622>
 8003cf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	029b      	lsls	r3, r3, #10
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	801a      	strh	r2, [r3, #0]
 8003d12:	e01b      	b.n	8003d4c <USB_EPStartXfer+0x674>
 8003d14:	463b      	mov	r3, r7
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	785b      	ldrb	r3, [r3, #1]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d116      	bne.n	8003d4c <USB_EPStartXfer+0x674>
 8003d1e:	1d3b      	adds	r3, r7, #4
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2c:	4413      	add	r3, r2
 8003d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d30:	463b      	mov	r3, r7
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	011a      	lsls	r2, r3, #4
 8003d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d40:	643b      	str	r3, [r7, #64]	; 0x40
 8003d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003d4c:	463b      	mov	r3, r7
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	895b      	ldrh	r3, [r3, #10]
 8003d52:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d56:	463b      	mov	r3, r7
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6959      	ldr	r1, [r3, #20]
 8003d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003d66:	1d38      	adds	r0, r7, #4
 8003d68:	6800      	ldr	r0, [r0, #0]
 8003d6a:	f000 ff13 	bl	8004b94 <USB_WritePMA>
 8003d6e:	e1e2      	b.n	8004136 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003d70:	463b      	mov	r3, r7
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003d7a:	1d3b      	adds	r3, r7, #4
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	463b      	mov	r3, r7
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d94:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	463b      	mov	r3, r7
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	441a      	add	r2, r3
 8003da6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc4:	1d3b      	adds	r3, r7, #4
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dd2:	4413      	add	r3, r2
 8003dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8003dd6:	463b      	mov	r3, r7
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	011a      	lsls	r2, r3, #4
 8003dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003de0:	4413      	add	r3, r2
 8003de2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003df2:	463b      	mov	r3, r7
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	891b      	ldrh	r3, [r3, #8]
 8003df8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6959      	ldr	r1, [r3, #20]
 8003e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e0c:	1d38      	adds	r0, r7, #4
 8003e0e:	6800      	ldr	r0, [r0, #0]
 8003e10:	f000 fec0 	bl	8004b94 <USB_WritePMA>
 8003e14:	e18f      	b.n	8004136 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003e16:	1d3b      	adds	r3, r7, #4
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 808f 	beq.w	8003f50 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e38:	463b      	mov	r3, r7
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	785b      	ldrb	r3, [r3, #1]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d164      	bne.n	8003f0c <USB_EPStartXfer+0x834>
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	673b      	str	r3, [r7, #112]	; 0x70
 8003e48:	1d3b      	adds	r3, r7, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e56:	4413      	add	r3, r2
 8003e58:	673b      	str	r3, [r7, #112]	; 0x70
 8003e5a:	463b      	mov	r3, r7
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	011a      	lsls	r2, r3, #4
 8003e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e64:	4413      	add	r3, r2
 8003e66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d112      	bne.n	8003e9a <USB_EPStartXfer+0x7c2>
 8003e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e82:	801a      	strh	r2, [r3, #0]
 8003e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e96:	801a      	strh	r2, [r3, #0]
 8003e98:	e054      	b.n	8003f44 <USB_EPStartXfer+0x86c>
 8003e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e9e:	2b3e      	cmp	r3, #62	; 0x3e
 8003ea0:	d817      	bhi.n	8003ed2 <USB_EPStartXfer+0x7fa>
 8003ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea6:	085b      	lsrs	r3, r3, #1
 8003ea8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <USB_EPStartXfer+0x7ea>
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	029b      	lsls	r3, r3, #10
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ece:	801a      	strh	r2, [r3, #0]
 8003ed0:	e038      	b.n	8003f44 <USB_EPStartXfer+0x86c>
 8003ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d104      	bne.n	8003ef2 <USB_EPStartXfer+0x81a>
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	3b01      	subs	r3, #1
 8003eee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	029b      	lsls	r3, r3, #10
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	e01b      	b.n	8003f44 <USB_EPStartXfer+0x86c>
 8003f0c:	463b      	mov	r3, r7
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	785b      	ldrb	r3, [r3, #1]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d116      	bne.n	8003f44 <USB_EPStartXfer+0x86c>
 8003f16:	1d3b      	adds	r3, r7, #4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f24:	4413      	add	r3, r2
 8003f26:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f28:	463b      	mov	r3, r7
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	011a      	lsls	r2, r3, #4
 8003f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f32:	4413      	add	r3, r2
 8003f34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f38:	677b      	str	r3, [r7, #116]	; 0x74
 8003f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003f44:	463b      	mov	r3, r7
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	895b      	ldrh	r3, [r3, #10]
 8003f4a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8003f4e:	e097      	b.n	8004080 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f50:	463b      	mov	r3, r7
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	785b      	ldrb	r3, [r3, #1]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d168      	bne.n	800402c <USB_EPStartXfer+0x954>
 8003f5a:	1d3b      	adds	r3, r7, #4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f72:	4413      	add	r3, r2
 8003f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f78:	463b      	mov	r3, r7
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	011a      	lsls	r2, r3, #4
 8003f80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f84:	4413      	add	r3, r2
 8003f86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d112      	bne.n	8003fba <USB_EPStartXfer+0x8e2>
 8003f94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fa2:	801a      	strh	r2, [r3, #0]
 8003fa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	e05d      	b.n	8004076 <USB_EPStartXfer+0x99e>
 8003fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fbe:	2b3e      	cmp	r3, #62	; 0x3e
 8003fc0:	d817      	bhi.n	8003ff2 <USB_EPStartXfer+0x91a>
 8003fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <USB_EPStartXfer+0x90a>
 8003fd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003fdc:	3301      	adds	r3, #1
 8003fde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fe2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	029b      	lsls	r3, r3, #10
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fee:	801a      	strh	r2, [r3, #0]
 8003ff0:	e041      	b.n	8004076 <USB_EPStartXfer+0x99e>
 8003ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	2b00      	cmp	r3, #0
 8004006:	d104      	bne.n	8004012 <USB_EPStartXfer+0x93a>
 8004008:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800400c:	3b01      	subs	r3, #1
 800400e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004012:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004016:	b29b      	uxth	r3, r3
 8004018:	029b      	lsls	r3, r3, #10
 800401a:	b29b      	uxth	r3, r3
 800401c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004024:	b29a      	uxth	r2, r3
 8004026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	e024      	b.n	8004076 <USB_EPStartXfer+0x99e>
 800402c:	463b      	mov	r3, r7
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	785b      	ldrb	r3, [r3, #1]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d11f      	bne.n	8004076 <USB_EPStartXfer+0x99e>
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800403e:	1d3b      	adds	r3, r7, #4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004046:	b29b      	uxth	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800404e:	4413      	add	r3, r2
 8004050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004054:	463b      	mov	r3, r7
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	011a      	lsls	r2, r3, #4
 800405c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004060:	4413      	add	r3, r2
 8004062:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004066:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800406a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406e:	b29a      	uxth	r2, r3
 8004070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004074:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004076:	463b      	mov	r3, r7
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	891b      	ldrh	r3, [r3, #8]
 800407c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004080:	463b      	mov	r3, r7
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6959      	ldr	r1, [r3, #20]
 8004086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408a:	b29b      	uxth	r3, r3
 800408c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004090:	1d38      	adds	r0, r7, #4
 8004092:	6800      	ldr	r0, [r0, #0]
 8004094:	f000 fd7e 	bl	8004b94 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004098:	463b      	mov	r3, r7
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d122      	bne.n	80040e8 <USB_EPStartXfer+0xa10>
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	463b      	mov	r3, r7
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040bc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80040c0:	1d3b      	adds	r3, r7, #4
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	463b      	mov	r3, r7
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80040d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	8013      	strh	r3, [r2, #0]
 80040e6:	e026      	b.n	8004136 <USB_EPStartXfer+0xa5e>
 80040e8:	463b      	mov	r3, r7
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	785b      	ldrb	r3, [r3, #1]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d121      	bne.n	8004136 <USB_EPStartXfer+0xa5e>
 80040f2:	1d3b      	adds	r3, r7, #4
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	463b      	mov	r3, r7
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004110:	1d3b      	adds	r3, r7, #4
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	463b      	mov	r3, r7
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	441a      	add	r2, r3
 800411e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800412a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800412e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004132:	b29b      	uxth	r3, r3
 8004134:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004136:	1d3b      	adds	r3, r7, #4
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	463b      	mov	r3, r7
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f107 020e 	add.w	r2, r7, #14
 800414c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004154:	8013      	strh	r3, [r2, #0]
 8004156:	f107 030e 	add.w	r3, r7, #14
 800415a:	f107 020e 	add.w	r2, r7, #14
 800415e:	8812      	ldrh	r2, [r2, #0]
 8004160:	f082 0210 	eor.w	r2, r2, #16
 8004164:	801a      	strh	r2, [r3, #0]
 8004166:	f107 030e 	add.w	r3, r7, #14
 800416a:	f107 020e 	add.w	r2, r7, #14
 800416e:	8812      	ldrh	r2, [r2, #0]
 8004170:	f082 0220 	eor.w	r2, r2, #32
 8004174:	801a      	strh	r2, [r3, #0]
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	463b      	mov	r3, r7
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	441a      	add	r2, r3
 8004184:	f107 030e 	add.w	r3, r7, #14
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800418e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419a:	b29b      	uxth	r3, r3
 800419c:	8013      	strh	r3, [r2, #0]
 800419e:	e3b5      	b.n	800490c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80041a0:	463b      	mov	r3, r7
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	7b1b      	ldrb	r3, [r3, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 8090 	bne.w	80042cc <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80041ac:	463b      	mov	r3, r7
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	463b      	mov	r3, r7
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d90e      	bls.n	80041da <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80041bc:	463b      	mov	r3, r7
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80041c6:	463b      	mov	r3, r7
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699a      	ldr	r2, [r3, #24]
 80041cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d0:	1ad2      	subs	r2, r2, r3
 80041d2:	463b      	mov	r3, r7
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	619a      	str	r2, [r3, #24]
 80041d8:	e008      	b.n	80041ec <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80041da:	463b      	mov	r3, r7
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80041e4:	463b      	mov	r3, r7
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2200      	movs	r2, #0
 80041ea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80041ec:	1d3b      	adds	r3, r7, #4
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041f4:	1d3b      	adds	r3, r7, #4
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004204:	4413      	add	r3, r2
 8004206:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800420a:	463b      	mov	r3, r7
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	011a      	lsls	r2, r3, #4
 8004212:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004216:	4413      	add	r3, r2
 8004218:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800421c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d116      	bne.n	8004256 <USB_EPStartXfer+0xb7e>
 8004228:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004234:	b29a      	uxth	r2, r3
 8004236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800423a:	801a      	strh	r2, [r3, #0]
 800423c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29b      	uxth	r3, r3
 8004244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800424c:	b29a      	uxth	r2, r3
 800424e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004252:	801a      	strh	r2, [r3, #0]
 8004254:	e32c      	b.n	80048b0 <USB_EPStartXfer+0x11d8>
 8004256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800425a:	2b3e      	cmp	r3, #62	; 0x3e
 800425c:	d818      	bhi.n	8004290 <USB_EPStartXfer+0xbb8>
 800425e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <USB_EPStartXfer+0xba6>
 8004274:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004278:	3301      	adds	r3, #1
 800427a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800427e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004282:	b29b      	uxth	r3, r3
 8004284:	029b      	lsls	r3, r3, #10
 8004286:	b29a      	uxth	r2, r3
 8004288:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	e30f      	b.n	80048b0 <USB_EPStartXfer+0x11d8>
 8004290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800429a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d104      	bne.n	80042b0 <USB_EPStartXfer+0xbd8>
 80042a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042aa:	3b01      	subs	r3, #1
 80042ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	029b      	lsls	r3, r3, #10
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042c8:	801a      	strh	r2, [r3, #0]
 80042ca:	e2f1      	b.n	80048b0 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80042cc:	463b      	mov	r3, r7
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	78db      	ldrb	r3, [r3, #3]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	f040 818f 	bne.w	80045f6 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80042d8:	463b      	mov	r3, r7
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	785b      	ldrb	r3, [r3, #1]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d175      	bne.n	80043ce <USB_EPStartXfer+0xcf6>
 80042e2:	1d3b      	adds	r3, r7, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042fa:	4413      	add	r3, r2
 80042fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004300:	463b      	mov	r3, r7
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	011a      	lsls	r2, r3, #4
 8004308:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800430c:	4413      	add	r3, r2
 800430e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004316:	463b      	mov	r3, r7
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d116      	bne.n	800434e <USB_EPStartXfer+0xc76>
 8004320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800432c:	b29a      	uxth	r2, r3
 800432e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004332:	801a      	strh	r2, [r3, #0]
 8004334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	b29b      	uxth	r3, r3
 800433c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004344:	b29a      	uxth	r2, r3
 8004346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	e065      	b.n	800441a <USB_EPStartXfer+0xd42>
 800434e:	463b      	mov	r3, r7
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b3e      	cmp	r3, #62	; 0x3e
 8004356:	d81a      	bhi.n	800438e <USB_EPStartXfer+0xcb6>
 8004358:	463b      	mov	r3, r7
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004364:	463b      	mov	r3, r7
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <USB_EPStartXfer+0xca4>
 8004372:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004376:	3301      	adds	r3, #1
 8004378:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800437c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004380:	b29b      	uxth	r3, r3
 8004382:	029b      	lsls	r3, r3, #10
 8004384:	b29a      	uxth	r2, r3
 8004386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800438a:	801a      	strh	r2, [r3, #0]
 800438c:	e045      	b.n	800441a <USB_EPStartXfer+0xd42>
 800438e:	463b      	mov	r3, r7
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800439a:	463b      	mov	r3, r7
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d104      	bne.n	80043b2 <USB_EPStartXfer+0xcda>
 80043a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043ac:	3b01      	subs	r3, #1
 80043ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	029b      	lsls	r3, r3, #10
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	e025      	b.n	800441a <USB_EPStartXfer+0xd42>
 80043ce:	463b      	mov	r3, r7
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d120      	bne.n	800441a <USB_EPStartXfer+0xd42>
 80043d8:	1d3b      	adds	r3, r7, #4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043e0:	1d3b      	adds	r3, r7, #4
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043f0:	4413      	add	r3, r2
 80043f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043f6:	463b      	mov	r3, r7
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	011a      	lsls	r2, r3, #4
 80043fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004402:	4413      	add	r3, r2
 8004404:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800440c:	463b      	mov	r3, r7
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	b29a      	uxth	r2, r3
 8004414:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004422:	463b      	mov	r3, r7
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	785b      	ldrb	r3, [r3, #1]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d175      	bne.n	8004518 <USB_EPStartXfer+0xe40>
 800442c:	1d3b      	adds	r3, r7, #4
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004434:	1d3b      	adds	r3, r7, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443c:	b29b      	uxth	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004444:	4413      	add	r3, r2
 8004446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800444a:	463b      	mov	r3, r7
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	011a      	lsls	r2, r3, #4
 8004452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004456:	4413      	add	r3, r2
 8004458:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800445c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004460:	463b      	mov	r3, r7
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d116      	bne.n	8004498 <USB_EPStartXfer+0xdc0>
 800446a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004476:	b29a      	uxth	r2, r3
 8004478:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800447c:	801a      	strh	r2, [r3, #0]
 800447e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800448a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448e:	b29a      	uxth	r2, r3
 8004490:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004494:	801a      	strh	r2, [r3, #0]
 8004496:	e061      	b.n	800455c <USB_EPStartXfer+0xe84>
 8004498:	463b      	mov	r3, r7
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b3e      	cmp	r3, #62	; 0x3e
 80044a0:	d81a      	bhi.n	80044d8 <USB_EPStartXfer+0xe00>
 80044a2:	463b      	mov	r3, r7
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044ae:	463b      	mov	r3, r7
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <USB_EPStartXfer+0xdee>
 80044bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c0:	3301      	adds	r3, #1
 80044c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	029b      	lsls	r3, r3, #10
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044d4:	801a      	strh	r2, [r3, #0]
 80044d6:	e041      	b.n	800455c <USB_EPStartXfer+0xe84>
 80044d8:	463b      	mov	r3, r7
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044e4:	463b      	mov	r3, r7
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <USB_EPStartXfer+0xe24>
 80044f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f6:	3b01      	subs	r3, #1
 80044f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004500:	b29b      	uxth	r3, r3
 8004502:	029b      	lsls	r3, r3, #10
 8004504:	b29b      	uxth	r3, r3
 8004506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800450e:	b29a      	uxth	r2, r3
 8004510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004514:	801a      	strh	r2, [r3, #0]
 8004516:	e021      	b.n	800455c <USB_EPStartXfer+0xe84>
 8004518:	463b      	mov	r3, r7
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	785b      	ldrb	r3, [r3, #1]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d11c      	bne.n	800455c <USB_EPStartXfer+0xe84>
 8004522:	1d3b      	adds	r3, r7, #4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452a:	b29b      	uxth	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004532:	4413      	add	r3, r2
 8004534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004538:	463b      	mov	r3, r7
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	011a      	lsls	r2, r3, #4
 8004540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004544:	4413      	add	r3, r2
 8004546:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800454a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800454e:	463b      	mov	r3, r7
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	b29a      	uxth	r2, r3
 8004556:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800455a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800455c:	463b      	mov	r3, r7
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 81a4 	beq.w	80048b0 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004568:	1d3b      	adds	r3, r7, #4
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	463b      	mov	r3, r7
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800457c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <USB_EPStartXfer+0xebc>
 8004588:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800458c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10d      	bne.n	80045b0 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004594:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800459c:	2b00      	cmp	r3, #0
 800459e:	f040 8187 	bne.w	80048b0 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80045a2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f040 8180 	bne.w	80048b0 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80045b0:	1d3b      	adds	r3, r7, #4
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	463b      	mov	r3, r7
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80045ce:	1d3b      	adds	r3, r7, #4
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	463b      	mov	r3, r7
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	441a      	add	r2, r3
 80045dc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80045e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	8013      	strh	r3, [r2, #0]
 80045f4:	e15c      	b.n	80048b0 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80045f6:	463b      	mov	r3, r7
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78db      	ldrb	r3, [r3, #3]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	f040 8155 	bne.w	80048ac <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004602:	463b      	mov	r3, r7
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699a      	ldr	r2, [r3, #24]
 8004608:	463b      	mov	r3, r7
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	429a      	cmp	r2, r3
 8004610:	d90e      	bls.n	8004630 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8004612:	463b      	mov	r3, r7
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800461c:	463b      	mov	r3, r7
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004626:	1ad2      	subs	r2, r2, r3
 8004628:	463b      	mov	r3, r7
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	619a      	str	r2, [r3, #24]
 800462e:	e008      	b.n	8004642 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004630:	463b      	mov	r3, r7
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800463a:	463b      	mov	r3, r7
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2200      	movs	r2, #0
 8004640:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004642:	463b      	mov	r3, r7
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d16f      	bne.n	800472c <USB_EPStartXfer+0x1054>
 800464c:	1d3b      	adds	r3, r7, #4
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465c:	b29b      	uxth	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004664:	4413      	add	r3, r2
 8004666:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800466a:	463b      	mov	r3, r7
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	011a      	lsls	r2, r3, #4
 8004672:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004676:	4413      	add	r3, r2
 8004678:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800467c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d116      	bne.n	80046b6 <USB_EPStartXfer+0xfde>
 8004688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004694:	b29a      	uxth	r2, r3
 8004696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800469a:	801a      	strh	r2, [r3, #0]
 800469c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046b2:	801a      	strh	r2, [r3, #0]
 80046b4:	e05f      	b.n	8004776 <USB_EPStartXfer+0x109e>
 80046b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ba:	2b3e      	cmp	r3, #62	; 0x3e
 80046bc:	d818      	bhi.n	80046f0 <USB_EPStartXfer+0x1018>
 80046be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d004      	beq.n	80046de <USB_EPStartXfer+0x1006>
 80046d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d8:	3301      	adds	r3, #1
 80046da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	029b      	lsls	r3, r3, #10
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046ec:	801a      	strh	r2, [r3, #0]
 80046ee:	e042      	b.n	8004776 <USB_EPStartXfer+0x109e>
 80046f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <USB_EPStartXfer+0x1038>
 8004706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800470a:	3b01      	subs	r3, #1
 800470c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004714:	b29b      	uxth	r3, r3
 8004716:	029b      	lsls	r3, r3, #10
 8004718:	b29b      	uxth	r3, r3
 800471a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800471e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004722:	b29a      	uxth	r2, r3
 8004724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004728:	801a      	strh	r2, [r3, #0]
 800472a:	e024      	b.n	8004776 <USB_EPStartXfer+0x109e>
 800472c:	463b      	mov	r3, r7
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	785b      	ldrb	r3, [r3, #1]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d11f      	bne.n	8004776 <USB_EPStartXfer+0x109e>
 8004736:	1d3b      	adds	r3, r7, #4
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800473e:	1d3b      	adds	r3, r7, #4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004746:	b29b      	uxth	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800474e:	4413      	add	r3, r2
 8004750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004754:	463b      	mov	r3, r7
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	011a      	lsls	r2, r3, #4
 800475c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004760:	4413      	add	r3, r2
 8004762:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800476a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800476e:	b29a      	uxth	r2, r3
 8004770:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	1d3b      	adds	r3, r7, #4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800477e:	463b      	mov	r3, r7
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d16f      	bne.n	8004868 <USB_EPStartXfer+0x1190>
 8004788:	1d3b      	adds	r3, r7, #4
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004790:	1d3b      	adds	r3, r7, #4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004798:	b29b      	uxth	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047a0:	4413      	add	r3, r2
 80047a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047a6:	463b      	mov	r3, r7
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	011a      	lsls	r2, r3, #4
 80047ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047b2:	4413      	add	r3, r2
 80047b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80047bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d116      	bne.n	80047f2 <USB_EPStartXfer+0x111a>
 80047c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047d6:	801a      	strh	r2, [r3, #0]
 80047d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047ee:	801a      	strh	r2, [r3, #0]
 80047f0:	e05e      	b.n	80048b0 <USB_EPStartXfer+0x11d8>
 80047f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f6:	2b3e      	cmp	r3, #62	; 0x3e
 80047f8:	d818      	bhi.n	800482c <USB_EPStartXfer+0x1154>
 80047fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <USB_EPStartXfer+0x1142>
 8004810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004814:	3301      	adds	r3, #1
 8004816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800481a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800481e:	b29b      	uxth	r3, r3
 8004820:	029b      	lsls	r3, r3, #10
 8004822:	b29a      	uxth	r2, r3
 8004824:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004828:	801a      	strh	r2, [r3, #0]
 800482a:	e041      	b.n	80048b0 <USB_EPStartXfer+0x11d8>
 800482c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004830:	095b      	lsrs	r3, r3, #5
 8004832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800483a:	f003 031f 	and.w	r3, r3, #31
 800483e:	2b00      	cmp	r3, #0
 8004840:	d104      	bne.n	800484c <USB_EPStartXfer+0x1174>
 8004842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004846:	3b01      	subs	r3, #1
 8004848:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800484c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004850:	b29b      	uxth	r3, r3
 8004852:	029b      	lsls	r3, r3, #10
 8004854:	b29b      	uxth	r3, r3
 8004856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800485a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800485e:	b29a      	uxth	r2, r3
 8004860:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004864:	801a      	strh	r2, [r3, #0]
 8004866:	e023      	b.n	80048b0 <USB_EPStartXfer+0x11d8>
 8004868:	463b      	mov	r3, r7
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	785b      	ldrb	r3, [r3, #1]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d11e      	bne.n	80048b0 <USB_EPStartXfer+0x11d8>
 8004872:	1d3b      	adds	r3, r7, #4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800487a:	b29b      	uxth	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004882:	4413      	add	r3, r2
 8004884:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004888:	463b      	mov	r3, r7
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	011a      	lsls	r2, r3, #4
 8004890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004894:	4413      	add	r3, r2
 8004896:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800489a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800489e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048a8:	801a      	strh	r2, [r3, #0]
 80048aa:	e001      	b.n	80048b0 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e02e      	b.n	800490e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048b0:	1d3b      	adds	r3, r7, #4
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	463b      	mov	r3, r7
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80048ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80048d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80048da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80048de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048e2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	463b      	mov	r3, r7
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	441a      	add	r2, r3
 80048f4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80048f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004908:	b29b      	uxth	r3, r3
 800490a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	785b      	ldrb	r3, [r3, #1]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d020      	beq.n	800496c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004940:	81bb      	strh	r3, [r7, #12]
 8004942:	89bb      	ldrh	r3, [r7, #12]
 8004944:	f083 0310 	eor.w	r3, r3, #16
 8004948:	81bb      	strh	r3, [r7, #12]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	441a      	add	r2, r3
 8004954:	89bb      	ldrh	r3, [r7, #12]
 8004956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004966:	b29b      	uxth	r3, r3
 8004968:	8013      	strh	r3, [r2, #0]
 800496a:	e01f      	b.n	80049ac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800497e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004982:	81fb      	strh	r3, [r7, #14]
 8004984:	89fb      	ldrh	r3, [r7, #14]
 8004986:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800498a:	81fb      	strh	r3, [r7, #14]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	441a      	add	r2, r3
 8004996:	89fb      	ldrh	r3, [r7, #14]
 8004998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	7b1b      	ldrb	r3, [r3, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f040 809d 	bne.w	8004b06 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d04c      	beq.n	8004a6e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	823b      	strh	r3, [r7, #16]
 80049e2:	8a3b      	ldrh	r3, [r7, #16]
 80049e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01b      	beq.n	8004a24 <USB_EPClearStall+0x6c>
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	81fb      	strh	r3, [r7, #14]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	441a      	add	r2, r3
 8004a0e:	89fb      	ldrh	r3, [r7, #14]
 8004a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	78db      	ldrb	r3, [r3, #3]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d06c      	beq.n	8004b06 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a42:	81bb      	strh	r3, [r7, #12]
 8004a44:	89bb      	ldrh	r3, [r7, #12]
 8004a46:	f083 0320 	eor.w	r3, r3, #32
 8004a4a:	81bb      	strh	r3, [r7, #12]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	441a      	add	r2, r3
 8004a56:	89bb      	ldrh	r3, [r7, #12]
 8004a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	8013      	strh	r3, [r2, #0]
 8004a6c:	e04b      	b.n	8004b06 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	82fb      	strh	r3, [r7, #22]
 8004a7c:	8afb      	ldrh	r3, [r7, #22]
 8004a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01b      	beq.n	8004abe <USB_EPClearStall+0x106>
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9c:	82bb      	strh	r3, [r7, #20]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	441a      	add	r2, r3
 8004aa8:	8abb      	ldrh	r3, [r7, #20]
 8004aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad4:	827b      	strh	r3, [r7, #18]
 8004ad6:	8a7b      	ldrh	r3, [r7, #18]
 8004ad8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004adc:	827b      	strh	r3, [r7, #18]
 8004ade:	8a7b      	ldrh	r3, [r7, #18]
 8004ae0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ae4:	827b      	strh	r3, [r7, #18]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	8a7b      	ldrh	r3, [r7, #18]
 8004af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr

08004b12 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d103      	bne.n	8004b2c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2280      	movs	r2, #128	; 0x80
 8004b28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr

08004b38 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr

08004b60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004b72:	68fb      	ldr	r3, [r7, #12]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr

08004b7e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b08d      	sub	sp, #52	; 0x34
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	80fb      	strh	r3, [r7, #6]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004baa:	88bb      	ldrh	r3, [r7, #4]
 8004bac:	3301      	adds	r3, #1
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	005a      	lsls	r2, r3, #1
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bcc:	e01e      	b.n	8004c0c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	3302      	adds	r3, #2
 8004bf8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	3302      	adds	r3, #2
 8004bfe:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	3301      	adds	r3, #1
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1dd      	bne.n	8004bce <USB_WritePMA+0x3a>
  }
}
 8004c12:	bf00      	nop
 8004c14:	3734      	adds	r7, #52	; 0x34
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr

08004c1c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b08b      	sub	sp, #44	; 0x2c
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	4611      	mov	r1, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	80fb      	strh	r3, [r7, #6]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004c32:	88bb      	ldrh	r3, [r7, #4]
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	005a      	lsls	r2, r3, #1
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c4e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
 8004c54:	e01b      	b.n	8004c8e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	3302      	adds	r3, #2
 8004c62:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	0a1b      	lsrs	r3, r3, #8
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	3302      	adds	r3, #2
 8004c86:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e0      	bne.n	8004c56 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004c94:	88bb      	ldrh	r3, [r7, #4]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	701a      	strb	r2, [r3, #0]
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	372c      	adds	r7, #44	; 0x2c
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr

08004cba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	7c1b      	ldrb	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d115      	bne.n	8004cfe <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	2181      	movs	r1, #129	; 0x81
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f004 fb0f 	bl	80092fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cea:	2202      	movs	r2, #2
 8004cec:	2101      	movs	r1, #1
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f004 fb05 	bl	80092fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004cfc:	e012      	b.n	8004d24 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004cfe:	2340      	movs	r3, #64	; 0x40
 8004d00:	2202      	movs	r2, #2
 8004d02:	2181      	movs	r1, #129	; 0x81
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f004 fafa 	bl	80092fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d10:	2340      	movs	r3, #64	; 0x40
 8004d12:	2202      	movs	r2, #2
 8004d14:	2101      	movs	r1, #1
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f004 faf1 	bl	80092fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d24:	2308      	movs	r3, #8
 8004d26:	2203      	movs	r2, #3
 8004d28:	2182      	movs	r1, #130	; 0x82
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f004 fae7 	bl	80092fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d36:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d3a:	f004 fc07 	bl	800954c <USBD_static_malloc>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004d50:	2301      	movs	r3, #1
 8004d52:	73fb      	strb	r3, [r7, #15]
 8004d54:	e026      	b.n	8004da4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d5c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	7c1b      	ldrb	r3, [r3, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d109      	bne.n	8004d94 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f004 fba7 	bl	80094e0 <USBD_LL_PrepareReceive>
 8004d92:	e007      	b.n	8004da4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d9a:	2340      	movs	r3, #64	; 0x40
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f004 fb9e 	bl	80094e0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	460b      	mov	r3, r1
 8004db8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004dbe:	2181      	movs	r1, #129	; 0x81
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f004 fac2 	bl	800934a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004dcc:	2101      	movs	r1, #1
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f004 fabb 	bl	800934a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004ddc:	2182      	movs	r1, #130	; 0x82
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f004 fab3 	bl	800934a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00e      	beq.n	8004e12 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e04:	4618      	mov	r0, r3
 8004e06:	f004 fbad 	bl	8009564 <USBD_static_free>
    pdev->pClassData = NULL;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e2c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d039      	beq.n	8004eba <USBD_CDC_Setup+0x9e>
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d17c      	bne.n	8004f44 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	88db      	ldrh	r3, [r3, #6]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d029      	beq.n	8004ea6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	b25b      	sxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	da11      	bge.n	8004e80 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004e68:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	88d2      	ldrh	r2, [r2, #6]
 8004e6e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004e70:	6939      	ldr	r1, [r7, #16]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	88db      	ldrh	r3, [r3, #6]
 8004e76:	461a      	mov	r2, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f001 f9f9 	bl	8006270 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004e7e:	e068      	b.n	8004f52 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	785a      	ldrb	r2, [r3, #1]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	88db      	ldrh	r3, [r3, #6]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004e96:	6939      	ldr	r1, [r7, #16]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	88db      	ldrh	r3, [r3, #6]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f001 fa14 	bl	80062cc <USBD_CtlPrepareRx>
      break;
 8004ea4:	e055      	b.n	8004f52 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	7850      	ldrb	r0, [r2, #1]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	6839      	ldr	r1, [r7, #0]
 8004eb6:	4798      	blx	r3
      break;
 8004eb8:	e04b      	b.n	8004f52 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	2b0a      	cmp	r3, #10
 8004ec0:	d017      	beq.n	8004ef2 <USBD_CDC_Setup+0xd6>
 8004ec2:	2b0b      	cmp	r3, #11
 8004ec4:	d029      	beq.n	8004f1a <USBD_CDC_Setup+0xfe>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d133      	bne.n	8004f32 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d107      	bne.n	8004ee4 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004ed4:	f107 030c 	add.w	r3, r7, #12
 8004ed8:	2202      	movs	r2, #2
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f001 f9c7 	bl	8006270 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ee2:	e02e      	b.n	8004f42 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f001 f958 	bl	800619c <USBD_CtlError>
            ret = USBD_FAIL;
 8004eec:	2302      	movs	r3, #2
 8004eee:	75fb      	strb	r3, [r7, #23]
          break;
 8004ef0:	e027      	b.n	8004f42 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d107      	bne.n	8004f0c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004efc:	f107 030f 	add.w	r3, r7, #15
 8004f00:	2201      	movs	r2, #1
 8004f02:	4619      	mov	r1, r3
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f001 f9b3 	bl	8006270 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f0a:	e01a      	b.n	8004f42 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f001 f944 	bl	800619c <USBD_CtlError>
            ret = USBD_FAIL;
 8004f14:	2302      	movs	r3, #2
 8004f16:	75fb      	strb	r3, [r7, #23]
          break;
 8004f18:	e013      	b.n	8004f42 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d00d      	beq.n	8004f40 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f001 f938 	bl	800619c <USBD_CtlError>
            ret = USBD_FAIL;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004f30:	e006      	b.n	8004f40 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004f32:	6839      	ldr	r1, [r7, #0]
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f001 f931 	bl	800619c <USBD_CtlError>
          ret = USBD_FAIL;
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f3e:	e000      	b.n	8004f42 <USBD_CDC_Setup+0x126>
          break;
 8004f40:	bf00      	nop
      }
      break;
 8004f42:	e006      	b.n	8004f52 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004f44:	6839      	ldr	r1, [r7, #0]
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f001 f928 	bl	800619c <USBD_CtlError>
      ret = USBD_FAIL;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f50:	bf00      	nop
  }

  return ret;
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f6e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f76:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d03a      	beq.n	8004ff8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	331c      	adds	r3, #28
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d029      	beq.n	8004fec <USBD_CDC_DataIn+0x90>
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	331c      	adds	r3, #28
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	78f9      	ldrb	r1, [r7, #3]
 8004fac:	68b8      	ldr	r0, [r7, #8]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4403      	add	r3, r0
 8004fb8:	3338      	adds	r3, #56	; 0x38
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8004fc0:	fb03 f301 	mul.w	r3, r3, r1
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d110      	bne.n	8004fec <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004fca:	78fa      	ldrb	r2, [r7, #3]
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	331c      	adds	r3, #28
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004fde:	78f9      	ldrb	r1, [r7, #3]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f004 fa58 	bl	800949a <USBD_LL_Transmit>
 8004fea:	e003      	b.n	8004ff4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e000      	b.n	8004ffa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004ff8:	2302      	movs	r3, #2
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005014:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	4619      	mov	r1, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f004 fa83 	bl	8009526 <USBD_LL_GetRxDataSize>
 8005020:	4602      	mov	r2, r0
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00d      	beq.n	800504e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005046:	4611      	mov	r1, r2
 8005048:	4798      	blx	r3

    return USBD_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	e000      	b.n	8005050 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800504e:	2302      	movs	r3, #2
  }
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005066:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800506e:	2b00      	cmp	r3, #0
 8005070:	d015      	beq.n	800509e <USBD_CDC_EP0_RxReady+0x46>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005078:	2bff      	cmp	r3, #255	; 0xff
 800507a:	d010      	beq.n	800509e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800508a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005092:	b292      	uxth	r2, r2
 8005094:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	22ff      	movs	r2, #255	; 0xff
 800509a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2243      	movs	r2, #67	; 0x43
 80050b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80050b6:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000094 	.word	0x20000094

080050c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2243      	movs	r2, #67	; 0x43
 80050d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80050d6:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000050 	.word	0x20000050

080050e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2243      	movs	r2, #67	; 0x43
 80050f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80050f6:	4b03      	ldr	r3, [pc, #12]	; (8005104 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	200000d8 	.word	0x200000d8

08005108 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	220a      	movs	r2, #10
 8005114:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005116:	4b03      	ldr	r3, [pc, #12]	; (8005124 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	2000000c 	.word	0x2000000c

08005128 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005132:	2302      	movs	r3, #2
 8005134:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr

08005154 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	4613      	mov	r3, r2
 8005160:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005168:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005172:	88fa      	ldrh	r2, [r7, #6]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr

08005186 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005196:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr

080051ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01c      	beq.n	8005200 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d115      	bne.n	80051fc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2181      	movs	r1, #129	; 0x81
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f004 f951 	bl	800949a <USBD_LL_Transmit>

      return USBD_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e002      	b.n	8005202 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e000      	b.n	8005202 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005200:	2302      	movs	r3, #2
  }
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b084      	sub	sp, #16
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005218:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d017      	beq.n	8005254 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	7c1b      	ldrb	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d109      	bne.n	8005240 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005236:	2101      	movs	r1, #1
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f004 f951 	bl	80094e0 <USBD_LL_PrepareReceive>
 800523e:	e007      	b.n	8005250 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005246:	2340      	movs	r3, #64	; 0x40
 8005248:	2101      	movs	r1, #1
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f004 f948 	bl	80094e0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	e000      	b.n	8005256 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005254:	2302      	movs	r3, #2
  }
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	4613      	mov	r3, r2
 800526a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005272:	2302      	movs	r3, #2
 8005274:	e01a      	b.n	80052ac <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	79fa      	ldrb	r2, [r7, #7]
 80052a2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f003 ffb5 	bl	8009214 <USBD_LL_Init>

  return USBD_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d006      	beq.n	80052d6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	73fb      	strb	r3, [r7, #15]
 80052d4:	e001      	b.n	80052da <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80052d6:	2302      	movs	r3, #2
 80052d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr

080052e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f003 ffea 	bl	80092c8 <USBD_LL_Start>

  return USBD_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr

08005312 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	460b      	mov	r3, r1
 800531c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800531e:	2302      	movs	r3, #2
 8005320:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00c      	beq.n	8005346 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	78fa      	ldrb	r2, [r7, #3]
 8005336:	4611      	mov	r1, r2
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	4798      	blx	r3
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005346:	7bfb      	ldrb	r3, [r7, #15]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	78fa      	ldrb	r2, [r7, #3]
 8005366:	4611      	mov	r1, r2
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	4798      	blx	r3

  return USBD_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005386:	6839      	ldr	r1, [r7, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fecb 	bl	8006124 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800539c:	461a      	mov	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d00c      	beq.n	80053cc <USBD_LL_SetupStage+0x56>
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d302      	bcc.n	80053bc <USBD_LL_SetupStage+0x46>
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d010      	beq.n	80053dc <USBD_LL_SetupStage+0x66>
 80053ba:	e017      	b.n	80053ec <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f9cb 	bl	8005760 <USBD_StdDevReq>
      break;
 80053ca:	e01a      	b.n	8005402 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053d2:	4619      	mov	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fa2d 	bl	8005834 <USBD_StdItfReq>
      break;
 80053da:	e012      	b.n	8005402 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fa6b 	bl	80058c0 <USBD_StdEPReq>
      break;
 80053ea:	e00a      	b.n	8005402 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80053f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f003 ffc4 	bl	8009388 <USBD_LL_StallEP>
      break;
 8005400:	bf00      	nop
  }

  return USBD_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	460b      	mov	r3, r1
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800541a:	7afb      	ldrb	r3, [r7, #11]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d14b      	bne.n	80054b8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005426:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800542e:	2b03      	cmp	r3, #3
 8005430:	d134      	bne.n	800549c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	429a      	cmp	r2, r3
 800543c:	d919      	bls.n	8005472 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	1ad2      	subs	r2, r2, r3
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005454:	429a      	cmp	r2, r3
 8005456:	d203      	bcs.n	8005460 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800545c:	b29b      	uxth	r3, r3
 800545e:	e002      	b.n	8005466 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005464:	b29b      	uxth	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 ff4c 	bl	8006308 <USBD_CtlContinueRx>
 8005470:	e038      	b.n	80054e4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005484:	2b03      	cmp	r3, #3
 8005486:	d105      	bne.n	8005494 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 ff49 	bl	800632c <USBD_CtlSendStatus>
 800549a:	e023      	b.n	80054e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	d11e      	bne.n	80054e4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80054ae:	2100      	movs	r1, #0
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f003 ff69 	bl	8009388 <USBD_LL_StallEP>
 80054b6:	e015      	b.n	80054e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00d      	beq.n	80054e0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d108      	bne.n	80054e0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	7afa      	ldrb	r2, [r7, #11]
 80054d8:	4611      	mov	r1, r2
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	4798      	blx	r3
 80054de:	e001      	b.n	80054e4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80054e0:	2302      	movs	r3, #2
 80054e2:	e000      	b.n	80054e6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b086      	sub	sp, #24
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	460b      	mov	r3, r1
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80054fc:	7afb      	ldrb	r3, [r7, #11]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d17f      	bne.n	8005602 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3314      	adds	r3, #20
 8005506:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800550e:	2b02      	cmp	r3, #2
 8005510:	d15c      	bne.n	80055cc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	429a      	cmp	r2, r3
 800551c:	d915      	bls.n	800554a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	1ad2      	subs	r2, r2, r3
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	b29b      	uxth	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 feb6 	bl	80062a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800553c:	2300      	movs	r3, #0
 800553e:	2200      	movs	r2, #0
 8005540:	2100      	movs	r1, #0
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f003 ffcc 	bl	80094e0 <USBD_LL_PrepareReceive>
 8005548:	e04e      	b.n	80055e8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	6912      	ldr	r2, [r2, #16]
 8005552:	fbb3 f1f2 	udiv	r1, r3, r2
 8005556:	fb02 f201 	mul.w	r2, r2, r1
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d11c      	bne.n	800559a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005568:	429a      	cmp	r2, r3
 800556a:	d316      	bcc.n	800559a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005576:	429a      	cmp	r2, r3
 8005578:	d20f      	bcs.n	800559a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800557a:	2200      	movs	r2, #0
 800557c:	2100      	movs	r1, #0
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 fe92 	bl	80062a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800558c:	2300      	movs	r3, #0
 800558e:	2200      	movs	r2, #0
 8005590:	2100      	movs	r1, #0
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f003 ffa4 	bl	80094e0 <USBD_LL_PrepareReceive>
 8005598:	e026      	b.n	80055e8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d105      	bne.n	80055bc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80055bc:	2180      	movs	r1, #128	; 0x80
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f003 fee2 	bl	8009388 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fec4 	bl	8006352 <USBD_CtlReceiveStatus>
 80055ca:	e00d      	b.n	80055e8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d004      	beq.n	80055e0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d103      	bne.n	80055e8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80055e0:	2180      	movs	r1, #128	; 0x80
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f003 fed0 	bl	8009388 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d11d      	bne.n	800562e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f7ff fe83 	bl	80052fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005600:	e015      	b.n	800562e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00d      	beq.n	800562a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005614:	2b03      	cmp	r3, #3
 8005616:	d108      	bne.n	800562a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	7afa      	ldrb	r2, [r7, #11]
 8005622:	4611      	mov	r1, r2
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	4798      	blx	r3
 8005628:	e001      	b.n	800562e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800562a:	2302      	movs	r3, #2
 800562c:	e000      	b.n	8005630 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005640:	2340      	movs	r3, #64	; 0x40
 8005642:	2200      	movs	r2, #0
 8005644:	2100      	movs	r1, #0
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f003 fe59 	bl	80092fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2240      	movs	r2, #64	; 0x40
 8005658:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800565c:	2340      	movs	r3, #64	; 0x40
 800565e:	2200      	movs	r2, #0
 8005660:	2180      	movs	r1, #128	; 0x80
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f003 fe4b 	bl	80092fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2240      	movs	r2, #64	; 0x40
 8005672:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6852      	ldr	r2, [r2, #4]
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	4611      	mov	r1, r2
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
  }

  return USBD_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	460b      	mov	r3, r1
 80056c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	78fa      	ldrb	r2, [r7, #3]
 80056ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr

080056d8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2204      	movs	r2, #4
 80056f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800570e:	2b04      	cmp	r3, #4
 8005710:	d105      	bne.n	800571e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr

0800572a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005738:	2b03      	cmp	r3, #3
 800573a:	d10b      	bne.n	8005754 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005776:	2b20      	cmp	r3, #32
 8005778:	d004      	beq.n	8005784 <USBD_StdDevReq+0x24>
 800577a:	2b40      	cmp	r3, #64	; 0x40
 800577c:	d002      	beq.n	8005784 <USBD_StdDevReq+0x24>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <USBD_StdDevReq+0x34>
 8005782:	e04c      	b.n	800581e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	6839      	ldr	r1, [r7, #0]
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	4798      	blx	r3
      break;
 8005792:	e049      	b.n	8005828 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	2b09      	cmp	r3, #9
 800579a:	d83a      	bhi.n	8005812 <USBD_StdDevReq+0xb2>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <USBD_StdDevReq+0x44>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057f5 	.word	0x080057f5
 80057a8:	08005809 	.word	0x08005809
 80057ac:	08005813 	.word	0x08005813
 80057b0:	080057ff 	.word	0x080057ff
 80057b4:	08005813 	.word	0x08005813
 80057b8:	080057d7 	.word	0x080057d7
 80057bc:	080057cd 	.word	0x080057cd
 80057c0:	08005813 	.word	0x08005813
 80057c4:	080057eb 	.word	0x080057eb
 80057c8:	080057e1 	.word	0x080057e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f9d4 	bl	8005b7c <USBD_GetDescriptor>
          break;
 80057d4:	e022      	b.n	800581c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fb37 	bl	8005e4c <USBD_SetAddress>
          break;
 80057de:	e01d      	b.n	800581c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fb74 	bl	8005ed0 <USBD_SetConfig>
          break;
 80057e8:	e018      	b.n	800581c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fbfd 	bl	8005fec <USBD_GetConfig>
          break;
 80057f2:	e013      	b.n	800581c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fc2c 	bl	8006054 <USBD_GetStatus>
          break;
 80057fc:	e00e      	b.n	800581c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fc5a 	bl	80060ba <USBD_SetFeature>
          break;
 8005806:	e009      	b.n	800581c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fc69 	bl	80060e2 <USBD_ClrFeature>
          break;
 8005810:	e004      	b.n	800581c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005812:	6839      	ldr	r1, [r7, #0]
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fcc1 	bl	800619c <USBD_CtlError>
          break;
 800581a:	bf00      	nop
      }
      break;
 800581c:	e004      	b.n	8005828 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fcbb 	bl	800619c <USBD_CtlError>
      break;
 8005826:	bf00      	nop
  }

  return ret;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop

08005834 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800584a:	2b20      	cmp	r3, #32
 800584c:	d003      	beq.n	8005856 <USBD_StdItfReq+0x22>
 800584e:	2b40      	cmp	r3, #64	; 0x40
 8005850:	d001      	beq.n	8005856 <USBD_StdItfReq+0x22>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d12a      	bne.n	80058ac <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800585c:	3b01      	subs	r3, #1
 800585e:	2b02      	cmp	r3, #2
 8005860:	d81d      	bhi.n	800589e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	889b      	ldrh	r3, [r3, #4]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d813      	bhi.n	8005894 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	6839      	ldr	r1, [r7, #0]
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
 800587a:	4603      	mov	r3, r0
 800587c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	88db      	ldrh	r3, [r3, #6]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d110      	bne.n	80058a8 <USBD_StdItfReq+0x74>
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10d      	bne.n	80058a8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fd4d 	bl	800632c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005892:	e009      	b.n	80058a8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fc80 	bl	800619c <USBD_CtlError>
          break;
 800589c:	e004      	b.n	80058a8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fc7b 	bl	800619c <USBD_CtlError>
          break;
 80058a6:	e000      	b.n	80058aa <USBD_StdItfReq+0x76>
          break;
 80058a8:	bf00      	nop
      }
      break;
 80058aa:	e004      	b.n	80058b6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fc74 	bl	800619c <USBD_CtlError>
      break;
 80058b4:	bf00      	nop
  }

  return USBD_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	889b      	ldrh	r3, [r3, #4]
 80058d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d004      	beq.n	80058ea <USBD_StdEPReq+0x2a>
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d002      	beq.n	80058ea <USBD_StdEPReq+0x2a>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d008      	beq.n	80058fa <USBD_StdEPReq+0x3a>
 80058e8:	e13d      	b.n	8005b66 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	6839      	ldr	r1, [r7, #0]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	4798      	blx	r3
      break;
 80058f8:	e13a      	b.n	8005b70 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005902:	2b20      	cmp	r3, #32
 8005904:	d10a      	bne.n	800591c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	6839      	ldr	r1, [r7, #0]
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
 8005914:	4603      	mov	r3, r0
 8005916:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	e12a      	b.n	8005b72 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	785b      	ldrb	r3, [r3, #1]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d03e      	beq.n	80059a2 <USBD_StdEPReq+0xe2>
 8005924:	2b03      	cmp	r3, #3
 8005926:	d002      	beq.n	800592e <USBD_StdEPReq+0x6e>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d070      	beq.n	8005a0e <USBD_StdEPReq+0x14e>
 800592c:	e115      	b.n	8005b5a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005934:	2b02      	cmp	r3, #2
 8005936:	d002      	beq.n	800593e <USBD_StdEPReq+0x7e>
 8005938:	2b03      	cmp	r3, #3
 800593a:	d015      	beq.n	8005968 <USBD_StdEPReq+0xa8>
 800593c:	e02b      	b.n	8005996 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800593e:	7bbb      	ldrb	r3, [r7, #14]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00c      	beq.n	800595e <USBD_StdEPReq+0x9e>
 8005944:	7bbb      	ldrb	r3, [r7, #14]
 8005946:	2b80      	cmp	r3, #128	; 0x80
 8005948:	d009      	beq.n	800595e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800594a:	7bbb      	ldrb	r3, [r7, #14]
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f003 fd1a 	bl	8009388 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005954:	2180      	movs	r1, #128	; 0x80
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f003 fd16 	bl	8009388 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800595c:	e020      	b.n	80059a0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fc1b 	bl	800619c <USBD_CtlError>
              break;
 8005966:	e01b      	b.n	80059a0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	885b      	ldrh	r3, [r3, #2]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10e      	bne.n	800598e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005970:	7bbb      	ldrb	r3, [r7, #14]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00b      	beq.n	800598e <USBD_StdEPReq+0xce>
 8005976:	7bbb      	ldrb	r3, [r7, #14]
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d008      	beq.n	800598e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	88db      	ldrh	r3, [r3, #6]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005984:	7bbb      	ldrb	r3, [r7, #14]
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f003 fcfd 	bl	8009388 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fccc 	bl	800632c <USBD_CtlSendStatus>

              break;
 8005994:	e004      	b.n	80059a0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fbff 	bl	800619c <USBD_CtlError>
              break;
 800599e:	bf00      	nop
          }
          break;
 80059a0:	e0e0      	b.n	8005b64 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d002      	beq.n	80059b2 <USBD_StdEPReq+0xf2>
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d015      	beq.n	80059dc <USBD_StdEPReq+0x11c>
 80059b0:	e026      	b.n	8005a00 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059b2:	7bbb      	ldrb	r3, [r7, #14]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00c      	beq.n	80059d2 <USBD_StdEPReq+0x112>
 80059b8:	7bbb      	ldrb	r3, [r7, #14]
 80059ba:	2b80      	cmp	r3, #128	; 0x80
 80059bc:	d009      	beq.n	80059d2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80059be:	7bbb      	ldrb	r3, [r7, #14]
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f003 fce0 	bl	8009388 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80059c8:	2180      	movs	r1, #128	; 0x80
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f003 fcdc 	bl	8009388 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059d0:	e01c      	b.n	8005a0c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fbe1 	bl	800619c <USBD_CtlError>
              break;
 80059da:	e017      	b.n	8005a0c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	885b      	ldrh	r3, [r3, #2]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d112      	bne.n	8005a0a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f003 fce7 	bl	80093c6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fc97 	bl	800632c <USBD_CtlSendStatus>
              }
              break;
 80059fe:	e004      	b.n	8005a0a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fbca 	bl	800619c <USBD_CtlError>
              break;
 8005a08:	e000      	b.n	8005a0c <USBD_StdEPReq+0x14c>
              break;
 8005a0a:	bf00      	nop
          }
          break;
 8005a0c:	e0aa      	b.n	8005b64 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d002      	beq.n	8005a1e <USBD_StdEPReq+0x15e>
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d032      	beq.n	8005a82 <USBD_StdEPReq+0x1c2>
 8005a1c:	e097      	b.n	8005b4e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a1e:	7bbb      	ldrb	r3, [r7, #14]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <USBD_StdEPReq+0x174>
 8005a24:	7bbb      	ldrb	r3, [r7, #14]
 8005a26:	2b80      	cmp	r3, #128	; 0x80
 8005a28:	d004      	beq.n	8005a34 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fbb5 	bl	800619c <USBD_CtlError>
                break;
 8005a32:	e091      	b.n	8005b58 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	da0b      	bge.n	8005a54 <USBD_StdEPReq+0x194>
 8005a3c:	7bbb      	ldrb	r3, [r7, #14]
 8005a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a42:	4613      	mov	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	3310      	adds	r3, #16
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	4413      	add	r3, r2
 8005a50:	3304      	adds	r3, #4
 8005a52:	e00b      	b.n	8005a6c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a54:	7bbb      	ldrb	r3, [r7, #14]
 8005a56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	4413      	add	r3, r2
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2202      	movs	r2, #2
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fbf8 	bl	8006270 <USBD_CtlSendData>
              break;
 8005a80:	e06a      	b.n	8005b58 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005a82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	da11      	bge.n	8005aae <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a8a:	7bbb      	ldrb	r3, [r7, #14]
 8005a8c:	f003 020f 	and.w	r2, r3, #15
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	3318      	adds	r3, #24
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d117      	bne.n	8005ad4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fb78 	bl	800619c <USBD_CtlError>
                  break;
 8005aac:	e054      	b.n	8005b58 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005aae:	7bbb      	ldrb	r3, [r7, #14]
 8005ab0:	f003 020f 	and.w	r2, r3, #15
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d104      	bne.n	8005ad4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fb65 	bl	800619c <USBD_CtlError>
                  break;
 8005ad2:	e041      	b.n	8005b58 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	da0b      	bge.n	8005af4 <USBD_StdEPReq+0x234>
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	3310      	adds	r3, #16
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4413      	add	r3, r2
 8005af0:	3304      	adds	r3, #4
 8005af2:	e00b      	b.n	8005b0c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005af4:	7bbb      	ldrb	r3, [r7, #14]
 8005af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	4413      	add	r3, r2
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b0e:	7bbb      	ldrb	r3, [r7, #14]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <USBD_StdEPReq+0x25a>
 8005b14:	7bbb      	ldrb	r3, [r7, #14]
 8005b16:	2b80      	cmp	r3, #128	; 0x80
 8005b18:	d103      	bne.n	8005b22 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	e00e      	b.n	8005b40 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005b22:	7bbb      	ldrb	r3, [r7, #14]
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f003 fc6c 	bl	8009404 <USBD_LL_IsStallEP>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2201      	movs	r2, #1
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	e002      	b.n	8005b40 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2202      	movs	r2, #2
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fb92 	bl	8006270 <USBD_CtlSendData>
              break;
 8005b4c:	e004      	b.n	8005b58 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fb23 	bl	800619c <USBD_CtlError>
              break;
 8005b56:	bf00      	nop
          }
          break;
 8005b58:	e004      	b.n	8005b64 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005b5a:	6839      	ldr	r1, [r7, #0]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fb1d 	bl	800619c <USBD_CtlError>
          break;
 8005b62:	bf00      	nop
      }
      break;
 8005b64:	e004      	b.n	8005b70 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fb17 	bl	800619c <USBD_CtlError>
      break;
 8005b6e:	bf00      	nop
  }

  return ret;
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	885b      	ldrh	r3, [r3, #2]
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	2b06      	cmp	r3, #6
 8005b9e:	f200 8128 	bhi.w	8005df2 <USBD_GetDescriptor+0x276>
 8005ba2:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <USBD_GetDescriptor+0x2c>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005bc5 	.word	0x08005bc5
 8005bac:	08005bdd 	.word	0x08005bdd
 8005bb0:	08005c1d 	.word	0x08005c1d
 8005bb4:	08005df3 	.word	0x08005df3
 8005bb8:	08005df3 	.word	0x08005df3
 8005bbc:	08005d93 	.word	0x08005d93
 8005bc0:	08005dbf 	.word	0x08005dbf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	7c12      	ldrb	r2, [r2, #16]
 8005bd0:	f107 0108 	add.w	r1, r7, #8
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4798      	blx	r3
 8005bd8:	60f8      	str	r0, [r7, #12]
      break;
 8005bda:	e112      	b.n	8005e02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	7c1b      	ldrb	r3, [r3, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10d      	bne.n	8005c00 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bec:	f107 0208 	add.w	r2, r7, #8
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4798      	blx	r3
 8005bf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005bfe:	e100      	b.n	8005e02 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	f107 0208 	add.w	r2, r7, #8
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4798      	blx	r3
 8005c10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3301      	adds	r3, #1
 8005c16:	2202      	movs	r2, #2
 8005c18:	701a      	strb	r2, [r3, #0]
      break;
 8005c1a:	e0f2      	b.n	8005e02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	885b      	ldrh	r3, [r3, #2]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	f200 80ac 	bhi.w	8005d80 <USBD_GetDescriptor+0x204>
 8005c28:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <USBD_GetDescriptor+0xb4>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005c49 	.word	0x08005c49
 8005c34:	08005c7d 	.word	0x08005c7d
 8005c38:	08005cb1 	.word	0x08005cb1
 8005c3c:	08005ce5 	.word	0x08005ce5
 8005c40:	08005d19 	.word	0x08005d19
 8005c44:	08005d4d 	.word	0x08005d4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00b      	beq.n	8005c6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	7c12      	ldrb	r2, [r2, #16]
 8005c60:	f107 0108 	add.w	r1, r7, #8
 8005c64:	4610      	mov	r0, r2
 8005c66:	4798      	blx	r3
 8005c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c6a:	e091      	b.n	8005d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa94 	bl	800619c <USBD_CtlError>
            err++;
 8005c74:	7afb      	ldrb	r3, [r7, #11]
 8005c76:	3301      	adds	r3, #1
 8005c78:	72fb      	strb	r3, [r7, #11]
          break;
 8005c7a:	e089      	b.n	8005d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00b      	beq.n	8005ca0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	7c12      	ldrb	r2, [r2, #16]
 8005c94:	f107 0108 	add.w	r1, r7, #8
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4798      	blx	r3
 8005c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c9e:	e077      	b.n	8005d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fa7a 	bl	800619c <USBD_CtlError>
            err++;
 8005ca8:	7afb      	ldrb	r3, [r7, #11]
 8005caa:	3301      	adds	r3, #1
 8005cac:	72fb      	strb	r3, [r7, #11]
          break;
 8005cae:	e06f      	b.n	8005d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	7c12      	ldrb	r2, [r2, #16]
 8005cc8:	f107 0108 	add.w	r1, r7, #8
 8005ccc:	4610      	mov	r0, r2
 8005cce:	4798      	blx	r3
 8005cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cd2:	e05d      	b.n	8005d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa60 	bl	800619c <USBD_CtlError>
            err++;
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ce2:	e055      	b.n	8005d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00b      	beq.n	8005d08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	7c12      	ldrb	r2, [r2, #16]
 8005cfc:	f107 0108 	add.w	r1, r7, #8
 8005d00:	4610      	mov	r0, r2
 8005d02:	4798      	blx	r3
 8005d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d06:	e043      	b.n	8005d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fa46 	bl	800619c <USBD_CtlError>
            err++;
 8005d10:	7afb      	ldrb	r3, [r7, #11]
 8005d12:	3301      	adds	r3, #1
 8005d14:	72fb      	strb	r3, [r7, #11]
          break;
 8005d16:	e03b      	b.n	8005d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	7c12      	ldrb	r2, [r2, #16]
 8005d30:	f107 0108 	add.w	r1, r7, #8
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
 8005d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d3a:	e029      	b.n	8005d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fa2c 	bl	800619c <USBD_CtlError>
            err++;
 8005d44:	7afb      	ldrb	r3, [r7, #11]
 8005d46:	3301      	adds	r3, #1
 8005d48:	72fb      	strb	r3, [r7, #11]
          break;
 8005d4a:	e021      	b.n	8005d90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	7c12      	ldrb	r2, [r2, #16]
 8005d64:	f107 0108 	add.w	r1, r7, #8
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
 8005d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d6e:	e00f      	b.n	8005d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fa12 	bl	800619c <USBD_CtlError>
            err++;
 8005d78:	7afb      	ldrb	r3, [r7, #11]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d7e:	e007      	b.n	8005d90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fa0a 	bl	800619c <USBD_CtlError>
          err++;
 8005d88:	7afb      	ldrb	r3, [r7, #11]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005d8e:	e038      	b.n	8005e02 <USBD_GetDescriptor+0x286>
 8005d90:	e037      	b.n	8005e02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	7c1b      	ldrb	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d109      	bne.n	8005dae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da2:	f107 0208 	add.w	r2, r7, #8
 8005da6:	4610      	mov	r0, r2
 8005da8:	4798      	blx	r3
 8005daa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dac:	e029      	b.n	8005e02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f9f3 	bl	800619c <USBD_CtlError>
        err++;
 8005db6:	7afb      	ldrb	r3, [r7, #11]
 8005db8:	3301      	adds	r3, #1
 8005dba:	72fb      	strb	r3, [r7, #11]
      break;
 8005dbc:	e021      	b.n	8005e02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	7c1b      	ldrb	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10d      	bne.n	8005de2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dce:	f107 0208 	add.w	r2, r7, #8
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	4798      	blx	r3
 8005dd6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	2207      	movs	r2, #7
 8005dde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005de0:	e00f      	b.n	8005e02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f9d9 	bl	800619c <USBD_CtlError>
        err++;
 8005dea:	7afb      	ldrb	r3, [r7, #11]
 8005dec:	3301      	adds	r3, #1
 8005dee:	72fb      	strb	r3, [r7, #11]
      break;
 8005df0:	e007      	b.n	8005e02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f9d1 	bl	800619c <USBD_CtlError>
      err++;
 8005dfa:	7afb      	ldrb	r3, [r7, #11]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	72fb      	strb	r3, [r7, #11]
      break;
 8005e00:	bf00      	nop
  }

  if (err != 0U)
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d11c      	bne.n	8005e42 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005e08:	893b      	ldrh	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d011      	beq.n	8005e32 <USBD_GetDescriptor+0x2b6>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	88db      	ldrh	r3, [r3, #6]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00d      	beq.n	8005e32 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	88da      	ldrh	r2, [r3, #6]
 8005e1a:	893b      	ldrh	r3, [r7, #8]
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	bf28      	it	cs
 8005e20:	4613      	movcs	r3, r2
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e26:	893b      	ldrh	r3, [r7, #8]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fa1f 	bl	8006270 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	88db      	ldrh	r3, [r3, #6]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d104      	bne.n	8005e44 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa76 	bl	800632c <USBD_CtlSendStatus>
 8005e40:	e000      	b.n	8005e44 <USBD_GetDescriptor+0x2c8>
    return;
 8005e42:	bf00      	nop
    }
  }
}
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop

08005e4c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	889b      	ldrh	r3, [r3, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d130      	bne.n	8005ec0 <USBD_SetAddress+0x74>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	88db      	ldrh	r3, [r3, #6]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d12c      	bne.n	8005ec0 <USBD_SetAddress+0x74>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	885b      	ldrh	r3, [r3, #2]
 8005e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e6c:	d828      	bhi.n	8005ec0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	885b      	ldrh	r3, [r3, #2]
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d104      	bne.n	8005e8e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f988 	bl	800619c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e8c:	e01c      	b.n	8005ec8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	7bfa      	ldrb	r2, [r7, #15]
 8005e92:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f003 fade 	bl	800945c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fa43 	bl	800632c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d004      	beq.n	8005eb6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb4:	e008      	b.n	8005ec8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ebe:	e003      	b.n	8005ec8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f96a 	bl	800619c <USBD_CtlError>
  }
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	885b      	ldrh	r3, [r3, #2]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	4b41      	ldr	r3, [pc, #260]	; (8005fe8 <USBD_SetConfig+0x118>)
 8005ee2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ee4:	4b40      	ldr	r3, [pc, #256]	; (8005fe8 <USBD_SetConfig+0x118>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d904      	bls.n	8005ef6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f954 	bl	800619c <USBD_CtlError>
 8005ef4:	e075      	b.n	8005fe2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d002      	beq.n	8005f06 <USBD_SetConfig+0x36>
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d023      	beq.n	8005f4c <USBD_SetConfig+0x7c>
 8005f04:	e062      	b.n	8005fcc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005f06:	4b38      	ldr	r3, [pc, #224]	; (8005fe8 <USBD_SetConfig+0x118>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01a      	beq.n	8005f44 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005f0e:	4b36      	ldr	r3, [pc, #216]	; (8005fe8 <USBD_SetConfig+0x118>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2203      	movs	r2, #3
 8005f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f20:	4b31      	ldr	r3, [pc, #196]	; (8005fe8 <USBD_SetConfig+0x118>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff f9f3 	bl	8005312 <USBD_SetClassConfig>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d104      	bne.n	8005f3c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f931 	bl	800619c <USBD_CtlError>
            return;
 8005f3a:	e052      	b.n	8005fe2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f9f5 	bl	800632c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005f42:	e04e      	b.n	8005fe2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f9f1 	bl	800632c <USBD_CtlSendStatus>
        break;
 8005f4a:	e04a      	b.n	8005fe2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005f4c:	4b26      	ldr	r3, [pc, #152]	; (8005fe8 <USBD_SetConfig+0x118>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d112      	bne.n	8005f7a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005f5c:	4b22      	ldr	r3, [pc, #136]	; (8005fe8 <USBD_SetConfig+0x118>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005f66:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <USBD_SetConfig+0x118>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff f9ef 	bl	8005350 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f9da 	bl	800632c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005f78:	e033      	b.n	8005fe2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005f7a:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <USBD_SetConfig+0x118>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d01d      	beq.n	8005fc4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff f9dd 	bl	8005350 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005f96:	4b14      	ldr	r3, [pc, #80]	; (8005fe8 <USBD_SetConfig+0x118>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005fa0:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <USBD_SetConfig+0x118>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff f9b3 	bl	8005312 <USBD_SetClassConfig>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d104      	bne.n	8005fbc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f8f1 	bl	800619c <USBD_CtlError>
            return;
 8005fba:	e012      	b.n	8005fe2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f9b5 	bl	800632c <USBD_CtlSendStatus>
        break;
 8005fc2:	e00e      	b.n	8005fe2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f9b1 	bl	800632c <USBD_CtlSendStatus>
        break;
 8005fca:	e00a      	b.n	8005fe2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f8e4 	bl	800619c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005fd4:	4b04      	ldr	r3, [pc, #16]	; (8005fe8 <USBD_SetConfig+0x118>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff f9b8 	bl	8005350 <USBD_ClrClassConfig>
        break;
 8005fe0:	bf00      	nop
    }
  }
}
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	2000019c 	.word	0x2000019c

08005fec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	88db      	ldrh	r3, [r3, #6]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d004      	beq.n	8006008 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f8cb 	bl	800619c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006006:	e021      	b.n	800604c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800600e:	2b01      	cmp	r3, #1
 8006010:	db17      	blt.n	8006042 <USBD_GetConfig+0x56>
 8006012:	2b02      	cmp	r3, #2
 8006014:	dd02      	ble.n	800601c <USBD_GetConfig+0x30>
 8006016:	2b03      	cmp	r3, #3
 8006018:	d00b      	beq.n	8006032 <USBD_GetConfig+0x46>
 800601a:	e012      	b.n	8006042 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3308      	adds	r3, #8
 8006026:	2201      	movs	r2, #1
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f920 	bl	8006270 <USBD_CtlSendData>
        break;
 8006030:	e00c      	b.n	800604c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3304      	adds	r3, #4
 8006036:	2201      	movs	r2, #1
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f918 	bl	8006270 <USBD_CtlSendData>
        break;
 8006040:	e004      	b.n	800604c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f8a9 	bl	800619c <USBD_CtlError>
        break;
 800604a:	bf00      	nop
}
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006064:	3b01      	subs	r3, #1
 8006066:	2b02      	cmp	r3, #2
 8006068:	d81e      	bhi.n	80060a8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	88db      	ldrh	r3, [r3, #6]
 800606e:	2b02      	cmp	r3, #2
 8006070:	d004      	beq.n	800607c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006072:	6839      	ldr	r1, [r7, #0]
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f891 	bl	800619c <USBD_CtlError>
        break;
 800607a:	e01a      	b.n	80060b2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f043 0202 	orr.w	r2, r3, #2
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	330c      	adds	r3, #12
 800609c:	2202      	movs	r2, #2
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f8e5 	bl	8006270 <USBD_CtlSendData>
      break;
 80060a6:	e004      	b.n	80060b2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f876 	bl	800619c <USBD_CtlError>
      break;
 80060b0:	bf00      	nop
  }
}
 80060b2:	bf00      	nop
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	885b      	ldrh	r3, [r3, #2]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d106      	bne.n	80060da <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f929 	bl	800632c <USBD_CtlSendStatus>
  }
}
 80060da:	bf00      	nop
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f2:	3b01      	subs	r3, #1
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d80b      	bhi.n	8006110 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	885b      	ldrh	r3, [r3, #2]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d10c      	bne.n	800611a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f90f 	bl	800632c <USBD_CtlSendStatus>
      }
      break;
 800610e:	e004      	b.n	800611a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f842 	bl	800619c <USBD_CtlError>
      break;
 8006118:	e000      	b.n	800611c <USBD_ClrFeature+0x3a>
      break;
 800611a:	bf00      	nop
  }
}
 800611c:	bf00      	nop
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781a      	ldrb	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	785a      	ldrb	r2, [r3, #1]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	3302      	adds	r3, #2
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	b29a      	uxth	r2, r3
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	3303      	adds	r3, #3
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	b29b      	uxth	r3, r3
 8006152:	4413      	add	r3, r2
 8006154:	b29a      	uxth	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	3304      	adds	r3, #4
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	b29a      	uxth	r2, r3
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	3305      	adds	r3, #5
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	b29b      	uxth	r3, r3
 800616e:	4413      	add	r3, r2
 8006170:	b29a      	uxth	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	3306      	adds	r3, #6
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	b29a      	uxth	r2, r3
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	3307      	adds	r3, #7
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	b29b      	uxth	r3, r3
 800618a:	4413      	add	r3, r2
 800618c:	b29a      	uxth	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	80da      	strh	r2, [r3, #6]

}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr

0800619c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80061a6:	2180      	movs	r1, #128	; 0x80
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f003 f8ed 	bl	8009388 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80061ae:	2100      	movs	r1, #0
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f003 f8e9 	bl	8009388 <USBD_LL_StallEP>
}
 80061b6:	bf00      	nop
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b086      	sub	sp, #24
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d032      	beq.n	800623a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f834 	bl	8006242 <USBD_GetLen>
 80061da:	4603      	mov	r3, r0
 80061dc:	3301      	adds	r3, #1
 80061de:	b29b      	uxth	r3, r3
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	75fa      	strb	r2, [r7, #23]
 80061ee:	461a      	mov	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4413      	add	r3, r2
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	7812      	ldrb	r2, [r2, #0]
 80061f8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80061fa:	7dfb      	ldrb	r3, [r7, #23]
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	75fa      	strb	r2, [r7, #23]
 8006200:	461a      	mov	r2, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	4413      	add	r3, r2
 8006206:	2203      	movs	r2, #3
 8006208:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800620a:	e012      	b.n	8006232 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	60fa      	str	r2, [r7, #12]
 8006212:	7dfa      	ldrb	r2, [r7, #23]
 8006214:	1c51      	adds	r1, r2, #1
 8006216:	75f9      	strb	r1, [r7, #23]
 8006218:	4611      	mov	r1, r2
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	440a      	add	r2, r1
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006222:	7dfb      	ldrb	r3, [r7, #23]
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	75fa      	strb	r2, [r7, #23]
 8006228:	461a      	mov	r2, r3
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	4413      	add	r3, r2
 800622e:	2200      	movs	r2, #0
 8006230:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e8      	bne.n	800620c <USBD_GetString+0x4e>
    }
  }
}
 800623a:	bf00      	nop
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006242:	b480      	push	{r7}
 8006244:	b085      	sub	sp, #20
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800624e:	e005      	b.n	800625c <USBD_GetLen+0x1a>
  {
    len++;
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	3301      	adds	r3, #1
 8006254:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	3301      	adds	r3, #1
 800625a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1f5      	bne.n	8006250 <USBD_GetLen+0xe>
  }

  return len;
 8006264:	7bfb      	ldrb	r3, [r7, #15]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	bc80      	pop	{r7}
 800626e:	4770      	bx	lr

08006270 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	4613      	mov	r3, r2
 800627c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2202      	movs	r2, #2
 8006282:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006286:	88fa      	ldrh	r2, [r7, #6]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800628c:	88fa      	ldrh	r2, [r7, #6]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006292:	88fb      	ldrh	r3, [r7, #6]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	2100      	movs	r1, #0
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f003 f8fe 	bl	800949a <USBD_LL_Transmit>

  return USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	2100      	movs	r1, #0
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f003 f8ec 	bl	800949a <USBD_LL_Transmit>

  return USBD_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2203      	movs	r2, #3
 80062de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80062e2:	88fa      	ldrh	r2, [r7, #6]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80062ea:	88fa      	ldrh	r2, [r7, #6]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062f2:	88fb      	ldrh	r3, [r7, #6]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	2100      	movs	r1, #0
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f003 f8f1 	bl	80094e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	4613      	mov	r3, r2
 8006314:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	2100      	movs	r1, #0
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f003 f8df 	bl	80094e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2204      	movs	r2, #4
 8006338:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800633c:	2300      	movs	r3, #0
 800633e:	2200      	movs	r2, #0
 8006340:	2100      	movs	r1, #0
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f003 f8a9 	bl	800949a <USBD_LL_Transmit>

  return USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b082      	sub	sp, #8
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2205      	movs	r2, #5
 800635e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006362:	2300      	movs	r3, #0
 8006364:	2200      	movs	r2, #0
 8006366:	2100      	movs	r1, #0
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f003 f8b9 	bl	80094e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800637e:	f3ef 8305 	mrs	r3, IPSR
 8006382:	60bb      	str	r3, [r7, #8]
  return(result);
 8006384:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10f      	bne.n	80063aa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800638a:	f3ef 8310 	mrs	r3, PRIMASK
 800638e:	607b      	str	r3, [r7, #4]
  return(result);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <osKernelInitialize+0x32>
 8006396:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <osKernelInitialize+0x60>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d109      	bne.n	80063b2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800639e:	f3ef 8311 	mrs	r3, BASEPRI
 80063a2:	603b      	str	r3, [r7, #0]
  return(result);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80063aa:	f06f 0305 	mvn.w	r3, #5
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e00c      	b.n	80063cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063b2:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <osKernelInitialize+0x60>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d105      	bne.n	80063c6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80063ba:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <osKernelInitialize+0x60>)
 80063bc:	2201      	movs	r2, #1
 80063be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e002      	b.n	80063cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80063c6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80063cc:	68fb      	ldr	r3, [r7, #12]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bc80      	pop	{r7}
 80063d6:	4770      	bx	lr
 80063d8:	200001a0 	.word	0x200001a0

080063dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063e2:	f3ef 8305 	mrs	r3, IPSR
 80063e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80063e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10f      	bne.n	800640e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ee:	f3ef 8310 	mrs	r3, PRIMASK
 80063f2:	607b      	str	r3, [r7, #4]
  return(result);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d109      	bne.n	800640e <osKernelStart+0x32>
 80063fa:	4b11      	ldr	r3, [pc, #68]	; (8006440 <osKernelStart+0x64>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d109      	bne.n	8006416 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006402:	f3ef 8311 	mrs	r3, BASEPRI
 8006406:	603b      	str	r3, [r7, #0]
  return(result);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <osKernelStart+0x3a>
    stat = osErrorISR;
 800640e:	f06f 0305 	mvn.w	r3, #5
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	e00e      	b.n	8006434 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006416:	4b0a      	ldr	r3, [pc, #40]	; (8006440 <osKernelStart+0x64>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d107      	bne.n	800642e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800641e:	4b08      	ldr	r3, [pc, #32]	; (8006440 <osKernelStart+0x64>)
 8006420:	2202      	movs	r2, #2
 8006422:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006424:	f001 f864 	bl	80074f0 <vTaskStartScheduler>
      stat = osOK;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	e002      	b.n	8006434 <osKernelStart+0x58>
    } else {
      stat = osError;
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006434:	68fb      	ldr	r3, [r7, #12]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	200001a0 	.word	0x200001a0

08006444 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b092      	sub	sp, #72	; 0x48
 8006448:	af04      	add	r7, sp, #16
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006454:	f3ef 8305 	mrs	r3, IPSR
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800645c:	2b00      	cmp	r3, #0
 800645e:	f040 8094 	bne.w	800658a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006462:	f3ef 8310 	mrs	r3, PRIMASK
 8006466:	623b      	str	r3, [r7, #32]
  return(result);
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f040 808d 	bne.w	800658a <osThreadNew+0x146>
 8006470:	4b48      	ldr	r3, [pc, #288]	; (8006594 <osThreadNew+0x150>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b02      	cmp	r3, #2
 8006476:	d106      	bne.n	8006486 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006478:	f3ef 8311 	mrs	r3, BASEPRI
 800647c:	61fb      	str	r3, [r7, #28]
  return(result);
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	2b00      	cmp	r3, #0
 8006482:	f040 8082 	bne.w	800658a <osThreadNew+0x146>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d07e      	beq.n	800658a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800648c:	2380      	movs	r3, #128	; 0x80
 800648e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006490:	2318      	movs	r3, #24
 8006492:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006494:	2300      	movs	r3, #0
 8006496:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006498:	f107 031b 	add.w	r3, r7, #27
 800649c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800649e:	f04f 33ff 	mov.w	r3, #4294967295
 80064a2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d045      	beq.n	8006536 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <osThreadNew+0x74>
        name = attr->name;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d008      	beq.n	80064de <osThreadNew+0x9a>
 80064cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ce:	2b38      	cmp	r3, #56	; 0x38
 80064d0:	d805      	bhi.n	80064de <osThreadNew+0x9a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <osThreadNew+0x9e>
        return (NULL);
 80064de:	2300      	movs	r3, #0
 80064e0:	e054      	b.n	800658c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	089b      	lsrs	r3, r3, #2
 80064f0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00e      	beq.n	8006518 <osThreadNew+0xd4>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	2b5b      	cmp	r3, #91	; 0x5b
 8006500:	d90a      	bls.n	8006518 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006506:	2b00      	cmp	r3, #0
 8006508:	d006      	beq.n	8006518 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <osThreadNew+0xd4>
        mem = 1;
 8006512:	2301      	movs	r3, #1
 8006514:	62bb      	str	r3, [r7, #40]	; 0x28
 8006516:	e010      	b.n	800653a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10c      	bne.n	800653a <osThreadNew+0xf6>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d108      	bne.n	800653a <osThreadNew+0xf6>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d104      	bne.n	800653a <osThreadNew+0xf6>
          mem = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28
 8006534:	e001      	b.n	800653a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	2b01      	cmp	r3, #1
 800653e:	d110      	bne.n	8006562 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006548:	9202      	str	r2, [sp, #8]
 800654a:	9301      	str	r3, [sp, #4]
 800654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006554:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fe02 	bl	8007160 <xTaskCreateStatic>
 800655c:	4603      	mov	r3, r0
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	e013      	b.n	800658a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	2b00      	cmp	r3, #0
 8006566:	d110      	bne.n	800658a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	b29a      	uxth	r2, r3
 800656c:	f107 0314 	add.w	r3, r7, #20
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fe49 	bl	8007212 <xTaskCreate>
 8006580:	4603      	mov	r3, r0
 8006582:	2b01      	cmp	r3, #1
 8006584:	d001      	beq.n	800658a <osThreadNew+0x146>
          hTask = NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800658a:	697b      	ldr	r3, [r7, #20]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3738      	adds	r7, #56	; 0x38
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	200001a0 	.word	0x200001a0

08006598 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065a0:	f3ef 8305 	mrs	r3, IPSR
 80065a4:	613b      	str	r3, [r7, #16]
  return(result);
 80065a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10f      	bne.n	80065cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ac:	f3ef 8310 	mrs	r3, PRIMASK
 80065b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <osDelay+0x34>
 80065b8:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <osDelay+0x58>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d109      	bne.n	80065d4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065c0:	f3ef 8311 	mrs	r3, BASEPRI
 80065c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <osDelay+0x3c>
    stat = osErrorISR;
 80065cc:	f06f 0305 	mvn.w	r3, #5
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	e007      	b.n	80065e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 ff52 	bl	8007488 <vTaskDelay>
    }
  }

  return (stat);
 80065e4:	697b      	ldr	r3, [r7, #20]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	200001a0 	.word	0x200001a0

080065f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a06      	ldr	r2, [pc, #24]	; (800661c <vApplicationGetIdleTaskMemory+0x28>)
 8006604:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4a05      	ldr	r2, [pc, #20]	; (8006620 <vApplicationGetIdleTaskMemory+0x2c>)
 800660a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2280      	movs	r2, #128	; 0x80
 8006610:	601a      	str	r2, [r3, #0]
}
 8006612:	bf00      	nop
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr
 800661c:	200001a4 	.word	0x200001a4
 8006620:	20000200 	.word	0x20000200

08006624 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a07      	ldr	r2, [pc, #28]	; (8006650 <vApplicationGetTimerTaskMemory+0x2c>)
 8006634:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	4a06      	ldr	r2, [pc, #24]	; (8006654 <vApplicationGetTimerTaskMemory+0x30>)
 800663a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006642:	601a      	str	r2, [r3, #0]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	bc80      	pop	{r7}
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20000400 	.word	0x20000400
 8006654:	2000045c 	.word	0x2000045c

08006658 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f103 0208 	add.w	r2, r3, #8
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f04f 32ff 	mov.w	r2, #4294967295
 8006670:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f103 0208 	add.w	r2, r3, #8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f103 0208 	add.w	r2, r3, #8
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr

08006696 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bc80      	pop	{r7}
 80066ac:	4770      	bx	lr

080066ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066ae:	b480      	push	{r7}
 80066b0:	b085      	sub	sp, #20
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	601a      	str	r2, [r3, #0]
}
 80066ea:	bf00      	nop
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d103      	bne.n	8006714 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	e00c      	b.n	800672e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3308      	adds	r3, #8
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	e002      	b.n	8006722 <vListInsert+0x2e>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	429a      	cmp	r2, r3
 800672c:	d2f6      	bcs.n	800671c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	601a      	str	r2, [r3, #0]
}
 800675a:	bf00      	nop
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr

08006764 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6892      	ldr	r2, [r2, #8]
 800677a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6852      	ldr	r2, [r2, #4]
 8006784:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	429a      	cmp	r2, r3
 800678e:	d103      	bne.n	8006798 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	1e5a      	subs	r2, r3, #1
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr
	...

080067b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d109      	bne.n	80067e0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	60bb      	str	r3, [r7, #8]
 80067de:	e7fe      	b.n	80067de <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80067e0:	f001 ff9a 	bl	8008718 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ec:	68f9      	ldr	r1, [r7, #12]
 80067ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067f0:	fb01 f303 	mul.w	r3, r1, r3
 80067f4:	441a      	add	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006810:	3b01      	subs	r3, #1
 8006812:	68f9      	ldr	r1, [r7, #12]
 8006814:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006816:	fb01 f303 	mul.w	r3, r1, r3
 800681a:	441a      	add	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	22ff      	movs	r2, #255	; 0xff
 8006824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	22ff      	movs	r2, #255	; 0xff
 800682c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d114      	bne.n	8006860 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d01a      	beq.n	8006874 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3310      	adds	r3, #16
 8006842:	4618      	mov	r0, r3
 8006844:	f001 f8d8 	bl	80079f8 <xTaskRemoveFromEventList>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d012      	beq.n	8006874 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800684e:	4b0d      	ldr	r3, [pc, #52]	; (8006884 <xQueueGenericReset+0xcc>)
 8006850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	e009      	b.n	8006874 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3310      	adds	r3, #16
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fef7 	bl	8006658 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3324      	adds	r3, #36	; 0x24
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fef2 	bl	8006658 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006874:	f001 ff7e 	bl	8008774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006878:	2301      	movs	r3, #1
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08e      	sub	sp, #56	; 0x38
 800688c:	af02      	add	r7, sp, #8
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <xQueueGenericCreateStatic+0x28>
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ae:	e7fe      	b.n	80068ae <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d109      	bne.n	80068ca <xQueueGenericCreateStatic+0x42>
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
 80068c8:	e7fe      	b.n	80068c8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <xQueueGenericCreateStatic+0x4e>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <xQueueGenericCreateStatic+0x52>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <xQueueGenericCreateStatic+0x54>
 80068da:	2300      	movs	r3, #0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d109      	bne.n	80068f4 <xQueueGenericCreateStatic+0x6c>
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	623b      	str	r3, [r7, #32]
 80068f2:	e7fe      	b.n	80068f2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d102      	bne.n	8006900 <xQueueGenericCreateStatic+0x78>
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <xQueueGenericCreateStatic+0x7c>
 8006900:	2301      	movs	r3, #1
 8006902:	e000      	b.n	8006906 <xQueueGenericCreateStatic+0x7e>
 8006904:	2300      	movs	r3, #0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <xQueueGenericCreateStatic+0x96>
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	61fb      	str	r3, [r7, #28]
 800691c:	e7fe      	b.n	800691c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800691e:	2350      	movs	r3, #80	; 0x50
 8006920:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b50      	cmp	r3, #80	; 0x50
 8006926:	d009      	beq.n	800693c <xQueueGenericCreateStatic+0xb4>
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	e7fe      	b.n	800693a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00d      	beq.n	8006962 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800694e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	4613      	mov	r3, r2
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f805 	bl	800696c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006964:	4618      	mov	r0, r3
 8006966:	3730      	adds	r7, #48	; 0x30
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d103      	bne.n	8006988 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	e002      	b.n	800698e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800699a:	2101      	movs	r1, #1
 800699c:	69b8      	ldr	r0, [r7, #24]
 800699e:	f7ff ff0b 	bl	80067b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	78fa      	ldrb	r2, [r7, #3]
 80069a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08e      	sub	sp, #56	; 0x38
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069c2:	2300      	movs	r3, #0
 80069c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d109      	bne.n	80069e4 <xQueueGenericSend+0x30>
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e2:	e7fe      	b.n	80069e2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d103      	bne.n	80069f2 <xQueueGenericSend+0x3e>
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <xQueueGenericSend+0x42>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <xQueueGenericSend+0x44>
 80069f6:	2300      	movs	r3, #0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d109      	bne.n	8006a10 <xQueueGenericSend+0x5c>
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0e:	e7fe      	b.n	8006a0e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d103      	bne.n	8006a1e <xQueueGenericSend+0x6a>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d101      	bne.n	8006a22 <xQueueGenericSend+0x6e>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <xQueueGenericSend+0x70>
 8006a22:	2300      	movs	r3, #0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d109      	bne.n	8006a3c <xQueueGenericSend+0x88>
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	623b      	str	r3, [r7, #32]
 8006a3a:	e7fe      	b.n	8006a3a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a3c:	f001 f996 	bl	8007d6c <xTaskGetSchedulerState>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d102      	bne.n	8006a4c <xQueueGenericSend+0x98>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <xQueueGenericSend+0x9c>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <xQueueGenericSend+0x9e>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <xQueueGenericSend+0xb6>
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	e7fe      	b.n	8006a68 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a6a:	f001 fe55 	bl	8008718 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d302      	bcc.n	8006a80 <xQueueGenericSend+0xcc>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d129      	bne.n	8006ad4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a86:	f000 f9ff 	bl	8006e88 <prvCopyDataToQueue>
 8006a8a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d010      	beq.n	8006ab6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	3324      	adds	r3, #36	; 0x24
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 ffad 	bl	80079f8 <xTaskRemoveFromEventList>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d013      	beq.n	8006acc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006aa4:	4b3f      	ldr	r3, [pc, #252]	; (8006ba4 <xQueueGenericSend+0x1f0>)
 8006aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	e00a      	b.n	8006acc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006abc:	4b39      	ldr	r3, [pc, #228]	; (8006ba4 <xQueueGenericSend+0x1f0>)
 8006abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006acc:	f001 fe52 	bl	8008774 <vPortExitCritical>
				return pdPASS;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e063      	b.n	8006b9c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ada:	f001 fe4b 	bl	8008774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e05c      	b.n	8006b9c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d106      	bne.n	8006af6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ae8:	f107 0314 	add.w	r3, r7, #20
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 ffe5 	bl	8007abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006af2:	2301      	movs	r3, #1
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006af6:	f001 fe3d 	bl	8008774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006afa:	f000 fd5d 	bl	80075b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006afe:	f001 fe0b 	bl	8008718 <vPortEnterCritical>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b08:	b25b      	sxtb	r3, r3
 8006b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0e:	d103      	bne.n	8006b18 <xQueueGenericSend+0x164>
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b1e:	b25b      	sxtb	r3, r3
 8006b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b24:	d103      	bne.n	8006b2e <xQueueGenericSend+0x17a>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b2e:	f001 fe21 	bl	8008774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b32:	1d3a      	adds	r2, r7, #4
 8006b34:	f107 0314 	add.w	r3, r7, #20
 8006b38:	4611      	mov	r1, r2
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 ffd4 	bl	8007ae8 <xTaskCheckForTimeOut>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d124      	bne.n	8006b90 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b48:	f000 fa96 	bl	8007078 <prvIsQueueFull>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d018      	beq.n	8006b84 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	3310      	adds	r3, #16
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fefe 	bl	800795c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b62:	f000 fa21 	bl	8006fa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b66:	f000 fd35 	bl	80075d4 <xTaskResumeAll>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f47f af7c 	bne.w	8006a6a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006b72:	4b0c      	ldr	r3, [pc, #48]	; (8006ba4 <xQueueGenericSend+0x1f0>)
 8006b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	e772      	b.n	8006a6a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b86:	f000 fa0f 	bl	8006fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b8a:	f000 fd23 	bl	80075d4 <xTaskResumeAll>
 8006b8e:	e76c      	b.n	8006a6a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b92:	f000 fa09 	bl	8006fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b96:	f000 fd1d 	bl	80075d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b9a:	2300      	movs	r3, #0
		}
	}
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3738      	adds	r7, #56	; 0x38
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08e      	sub	sp, #56	; 0x38
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d109      	bne.n	8006bd4 <xQueueGenericSendFromISR+0x2c>
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd2:	e7fe      	b.n	8006bd2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d103      	bne.n	8006be2 <xQueueGenericSendFromISR+0x3a>
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <xQueueGenericSendFromISR+0x3e>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <xQueueGenericSendFromISR+0x40>
 8006be6:	2300      	movs	r3, #0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d109      	bne.n	8006c00 <xQueueGenericSendFromISR+0x58>
 8006bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	623b      	str	r3, [r7, #32]
 8006bfe:	e7fe      	b.n	8006bfe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d103      	bne.n	8006c0e <xQueueGenericSendFromISR+0x66>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <xQueueGenericSendFromISR+0x6a>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e000      	b.n	8006c14 <xQueueGenericSendFromISR+0x6c>
 8006c12:	2300      	movs	r3, #0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d109      	bne.n	8006c2c <xQueueGenericSendFromISR+0x84>
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	61fb      	str	r3, [r7, #28]
 8006c2a:	e7fe      	b.n	8006c2a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c2c:	f001 fe2e 	bl	800888c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c30:	f3ef 8211 	mrs	r2, BASEPRI
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	61ba      	str	r2, [r7, #24]
 8006c46:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c48:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d302      	bcc.n	8006c5e <xQueueGenericSendFromISR+0xb6>
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d12c      	bne.n	8006cb8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c6e:	f000 f90b 	bl	8006e88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c72:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d112      	bne.n	8006ca2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d016      	beq.n	8006cb2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	3324      	adds	r3, #36	; 0x24
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 feb5 	bl	80079f8 <xTaskRemoveFromEventList>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00e      	beq.n	8006cb2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00b      	beq.n	8006cb2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	e007      	b.n	8006cb2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	b25a      	sxtb	r2, r3
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006cb6:	e001      	b.n	8006cbc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	637b      	str	r3, [r7, #52]	; 0x34
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3738      	adds	r7, #56	; 0x38
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08c      	sub	sp, #48	; 0x30
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d109      	bne.n	8006cfe <xQueueReceive+0x2e>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	623b      	str	r3, [r7, #32]
 8006cfc:	e7fe      	b.n	8006cfc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d103      	bne.n	8006d0c <xQueueReceive+0x3c>
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <xQueueReceive+0x40>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <xQueueReceive+0x42>
 8006d10:	2300      	movs	r3, #0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <xQueueReceive+0x5a>
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	61fb      	str	r3, [r7, #28]
 8006d28:	e7fe      	b.n	8006d28 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d2a:	f001 f81f 	bl	8007d6c <xTaskGetSchedulerState>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <xQueueReceive+0x6a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <xQueueReceive+0x6e>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <xQueueReceive+0x70>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d109      	bne.n	8006d58 <xQueueReceive+0x88>
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	e7fe      	b.n	8006d56 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d58:	f001 fcde 	bl	8008718 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01f      	beq.n	8006da8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6c:	f000 f8f6 	bl	8006f5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	1e5a      	subs	r2, r3, #1
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00f      	beq.n	8006da0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	3310      	adds	r3, #16
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fe37 	bl	80079f8 <xTaskRemoveFromEventList>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d007      	beq.n	8006da0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d90:	4b3c      	ldr	r3, [pc, #240]	; (8006e84 <xQueueReceive+0x1b4>)
 8006d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006da0:	f001 fce8 	bl	8008774 <vPortExitCritical>
				return pdPASS;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e069      	b.n	8006e7c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dae:	f001 fce1 	bl	8008774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006db2:	2300      	movs	r3, #0
 8006db4:	e062      	b.n	8006e7c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d106      	bne.n	8006dca <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dbc:	f107 0310 	add.w	r3, r7, #16
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 fe7b 	bl	8007abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dca:	f001 fcd3 	bl	8008774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dce:	f000 fbf3 	bl	80075b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dd2:	f001 fca1 	bl	8008718 <vPortEnterCritical>
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ddc:	b25b      	sxtb	r3, r3
 8006dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de2:	d103      	bne.n	8006dec <xQueueReceive+0x11c>
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006df2:	b25b      	sxtb	r3, r3
 8006df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df8:	d103      	bne.n	8006e02 <xQueueReceive+0x132>
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e02:	f001 fcb7 	bl	8008774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e06:	1d3a      	adds	r2, r7, #4
 8006e08:	f107 0310 	add.w	r3, r7, #16
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fe6a 	bl	8007ae8 <xTaskCheckForTimeOut>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d123      	bne.n	8006e62 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e1c:	f000 f916 	bl	800704c <prvIsQueueEmpty>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d017      	beq.n	8006e56 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	3324      	adds	r3, #36	; 0x24
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fd94 	bl	800795c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e36:	f000 f8b7 	bl	8006fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e3a:	f000 fbcb 	bl	80075d4 <xTaskResumeAll>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d189      	bne.n	8006d58 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006e44:	4b0f      	ldr	r3, [pc, #60]	; (8006e84 <xQueueReceive+0x1b4>)
 8006e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	e780      	b.n	8006d58 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e58:	f000 f8a6 	bl	8006fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e5c:	f000 fbba 	bl	80075d4 <xTaskResumeAll>
 8006e60:	e77a      	b.n	8006d58 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e64:	f000 f8a0 	bl	8006fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e68:	f000 fbb4 	bl	80075d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e6e:	f000 f8ed 	bl	800704c <prvIsQueueEmpty>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f43f af6f 	beq.w	8006d58 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3730      	adds	r7, #48	; 0x30
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	e000ed04 	.word	0xe000ed04

08006e88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e94:	2300      	movs	r3, #0
 8006e96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10d      	bne.n	8006ec2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d14d      	bne.n	8006f4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 ff78 	bl	8007da8 <xTaskPriorityDisinherit>
 8006eb8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	605a      	str	r2, [r3, #4]
 8006ec0:	e043      	b.n	8006f4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d119      	bne.n	8006efc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6898      	ldr	r0, [r3, #8]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	f002 fbaa 	bl	800962c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	441a      	add	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d32b      	bcc.n	8006f4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	609a      	str	r2, [r3, #8]
 8006efa:	e026      	b.n	8006f4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	68d8      	ldr	r0, [r3, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	461a      	mov	r2, r3
 8006f06:	68b9      	ldr	r1, [r7, #8]
 8006f08:	f002 fb90 	bl	800962c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	425b      	negs	r3, r3
 8006f16:	441a      	add	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d207      	bcs.n	8006f38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	425b      	negs	r3, r3
 8006f32:	441a      	add	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d105      	bne.n	8006f4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f52:	697b      	ldr	r3, [r7, #20]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d018      	beq.n	8006fa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	441a      	add	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d303      	bcc.n	8006f90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68d9      	ldr	r1, [r3, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6838      	ldr	r0, [r7, #0]
 8006f9c:	f002 fb46 	bl	800962c <memcpy>
	}
}
 8006fa0:	bf00      	nop
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fb0:	f001 fbb2 	bl	8008718 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fbc:	e011      	b.n	8006fe2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d012      	beq.n	8006fec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3324      	adds	r3, #36	; 0x24
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fd14 	bl	80079f8 <xTaskRemoveFromEventList>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fd6:	f000 fde7 	bl	8007ba8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	dce9      	bgt.n	8006fbe <prvUnlockQueue+0x16>
 8006fea:	e000      	b.n	8006fee <prvUnlockQueue+0x46>
					break;
 8006fec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	22ff      	movs	r2, #255	; 0xff
 8006ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ff6:	f001 fbbd 	bl	8008774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ffa:	f001 fb8d 	bl	8008718 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007004:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007006:	e011      	b.n	800702c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d012      	beq.n	8007036 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3310      	adds	r3, #16
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fcef 	bl	80079f8 <xTaskRemoveFromEventList>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007020:	f000 fdc2 	bl	8007ba8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	3b01      	subs	r3, #1
 8007028:	b2db      	uxtb	r3, r3
 800702a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800702c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007030:	2b00      	cmp	r3, #0
 8007032:	dce9      	bgt.n	8007008 <prvUnlockQueue+0x60>
 8007034:	e000      	b.n	8007038 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007036:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	22ff      	movs	r2, #255	; 0xff
 800703c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007040:	f001 fb98 	bl	8008774 <vPortExitCritical>
}
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007054:	f001 fb60 	bl	8008718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	2b00      	cmp	r3, #0
 800705e:	d102      	bne.n	8007066 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007060:	2301      	movs	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	e001      	b.n	800706a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800706a:	f001 fb83 	bl	8008774 <vPortExitCritical>

	return xReturn;
 800706e:	68fb      	ldr	r3, [r7, #12]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007080:	f001 fb4a 	bl	8008718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708c:	429a      	cmp	r2, r3
 800708e:	d102      	bne.n	8007096 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007090:	2301      	movs	r3, #1
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	e001      	b.n	800709a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800709a:	f001 fb6b 	bl	8008774 <vPortExitCritical>

	return xReturn;
 800709e:	68fb      	ldr	r3, [r7, #12]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	e014      	b.n	80070e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070b8:	4a0e      	ldr	r2, [pc, #56]	; (80070f4 <vQueueAddToRegistry+0x4c>)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10b      	bne.n	80070dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070c4:	490b      	ldr	r1, [pc, #44]	; (80070f4 <vQueueAddToRegistry+0x4c>)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070ce:	4a09      	ldr	r2, [pc, #36]	; (80070f4 <vQueueAddToRegistry+0x4c>)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4413      	add	r3, r2
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070da:	e005      	b.n	80070e8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3301      	adds	r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b07      	cmp	r3, #7
 80070e6:	d9e7      	bls.n	80070b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070e8:	bf00      	nop
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bc80      	pop	{r7}
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	20001ce8 	.word	0x20001ce8

080070f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007108:	f001 fb06 	bl	8008718 <vPortEnterCritical>
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007112:	b25b      	sxtb	r3, r3
 8007114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007118:	d103      	bne.n	8007122 <vQueueWaitForMessageRestricted+0x2a>
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007128:	b25b      	sxtb	r3, r3
 800712a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712e:	d103      	bne.n	8007138 <vQueueWaitForMessageRestricted+0x40>
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007138:	f001 fb1c 	bl	8008774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007140:	2b00      	cmp	r3, #0
 8007142:	d106      	bne.n	8007152 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	3324      	adds	r3, #36	; 0x24
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	4618      	mov	r0, r3
 800714e:	f000 fc29 	bl	80079a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007152:	6978      	ldr	r0, [r7, #20]
 8007154:	f7ff ff28 	bl	8006fa8 <prvUnlockQueue>
	}
 8007158:	bf00      	nop
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08e      	sub	sp, #56	; 0x38
 8007164:	af04      	add	r7, sp, #16
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800716e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007170:	2b00      	cmp	r3, #0
 8007172:	d109      	bne.n	8007188 <xTaskCreateStatic+0x28>
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	623b      	str	r3, [r7, #32]
 8007186:	e7fe      	b.n	8007186 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	2b00      	cmp	r3, #0
 800718c:	d109      	bne.n	80071a2 <xTaskCreateStatic+0x42>
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	61fb      	str	r3, [r7, #28]
 80071a0:	e7fe      	b.n	80071a0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071a2:	235c      	movs	r3, #92	; 0x5c
 80071a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b5c      	cmp	r3, #92	; 0x5c
 80071aa:	d009      	beq.n	80071c0 <xTaskCreateStatic+0x60>
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	61bb      	str	r3, [r7, #24]
 80071be:	e7fe      	b.n	80071be <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01e      	beq.n	8007204 <xTaskCreateStatic+0xa4>
 80071c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01b      	beq.n	8007204 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	2202      	movs	r2, #2
 80071da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071de:	2300      	movs	r3, #0
 80071e0:	9303      	str	r3, [sp, #12]
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	9302      	str	r3, [sp, #8]
 80071e6:	f107 0314 	add.w	r3, r7, #20
 80071ea:	9301      	str	r3, [sp, #4]
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 f850 	bl	800729c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071fe:	f000 f8d3 	bl	80073a8 <prvAddNewTaskToReadyList>
 8007202:	e001      	b.n	8007208 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007208:	697b      	ldr	r3, [r7, #20]
	}
 800720a:	4618      	mov	r0, r3
 800720c:	3728      	adds	r7, #40	; 0x28
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007212:	b580      	push	{r7, lr}
 8007214:	b08c      	sub	sp, #48	; 0x30
 8007216:	af04      	add	r7, sp, #16
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	603b      	str	r3, [r7, #0]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007222:	88fb      	ldrh	r3, [r7, #6]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4618      	mov	r0, r3
 8007228:	f001 fb6c 	bl	8008904 <pvPortMalloc>
 800722c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00e      	beq.n	8007252 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007234:	205c      	movs	r0, #92	; 0x5c
 8007236:	f001 fb65 	bl	8008904 <pvPortMalloc>
 800723a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	631a      	str	r2, [r3, #48]	; 0x30
 8007248:	e005      	b.n	8007256 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800724a:	6978      	ldr	r0, [r7, #20]
 800724c:	f001 fc1c 	bl	8008a88 <vPortFree>
 8007250:	e001      	b.n	8007256 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007252:	2300      	movs	r3, #0
 8007254:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d017      	beq.n	800728c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007264:	88fa      	ldrh	r2, [r7, #6]
 8007266:	2300      	movs	r3, #0
 8007268:	9303      	str	r3, [sp, #12]
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	9302      	str	r3, [sp, #8]
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f80e 	bl	800729c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007280:	69f8      	ldr	r0, [r7, #28]
 8007282:	f000 f891 	bl	80073a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007286:	2301      	movs	r3, #1
 8007288:	61bb      	str	r3, [r7, #24]
 800728a:	e002      	b.n	8007292 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800728c:	f04f 33ff 	mov.w	r3, #4294967295
 8007290:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007292:	69bb      	ldr	r3, [r7, #24]
	}
 8007294:	4618      	mov	r0, r3
 8007296:	3720      	adds	r7, #32
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	461a      	mov	r2, r3
 80072b4:	21a5      	movs	r1, #165	; 0xa5
 80072b6:	f002 f9c4 	bl	8009642 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072c4:	3b01      	subs	r3, #1
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	f023 0307 	bic.w	r3, r3, #7
 80072d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d009      	beq.n	80072f2 <prvInitialiseNewTask+0x56>
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	617b      	str	r3, [r7, #20]
 80072f0:	e7fe      	b.n	80072f0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072f2:	2300      	movs	r3, #0
 80072f4:	61fb      	str	r3, [r7, #28]
 80072f6:	e012      	b.n	800731e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	4413      	add	r3, r2
 80072fe:	7819      	ldrb	r1, [r3, #0]
 8007300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	4413      	add	r3, r2
 8007306:	3334      	adds	r3, #52	; 0x34
 8007308:	460a      	mov	r2, r1
 800730a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	4413      	add	r3, r2
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d006      	beq.n	8007326 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	3301      	adds	r3, #1
 800731c:	61fb      	str	r3, [r7, #28]
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	2b0f      	cmp	r3, #15
 8007322:	d9e9      	bls.n	80072f8 <prvInitialiseNewTask+0x5c>
 8007324:	e000      	b.n	8007328 <prvInitialiseNewTask+0x8c>
		{
			break;
 8007326:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	2b37      	cmp	r3, #55	; 0x37
 8007334:	d901      	bls.n	800733a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007336:	2337      	movs	r3, #55	; 0x37
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800733e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007344:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	2200      	movs	r2, #0
 800734a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	3304      	adds	r3, #4
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff f9a0 	bl	8006696 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	3318      	adds	r3, #24
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff f99b 	bl	8006696 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007364:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007374:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	2200      	movs	r2, #0
 800737a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	68f9      	ldr	r1, [r7, #12]
 8007388:	69b8      	ldr	r0, [r7, #24]
 800738a:	f001 f8d7 	bl	800853c <pxPortInitialiseStack>
 800738e:	4602      	mov	r2, r0
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073a0:	bf00      	nop
 80073a2:	3720      	adds	r7, #32
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073b0:	f001 f9b2 	bl	8008718 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073b4:	4b2d      	ldr	r3, [pc, #180]	; (800746c <prvAddNewTaskToReadyList+0xc4>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3301      	adds	r3, #1
 80073ba:	4a2c      	ldr	r2, [pc, #176]	; (800746c <prvAddNewTaskToReadyList+0xc4>)
 80073bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073be:	4b2c      	ldr	r3, [pc, #176]	; (8007470 <prvAddNewTaskToReadyList+0xc8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d109      	bne.n	80073da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073c6:	4a2a      	ldr	r2, [pc, #168]	; (8007470 <prvAddNewTaskToReadyList+0xc8>)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073cc:	4b27      	ldr	r3, [pc, #156]	; (800746c <prvAddNewTaskToReadyList+0xc4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d110      	bne.n	80073f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073d4:	f000 fc0c 	bl	8007bf0 <prvInitialiseTaskLists>
 80073d8:	e00d      	b.n	80073f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073da:	4b26      	ldr	r3, [pc, #152]	; (8007474 <prvAddNewTaskToReadyList+0xcc>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d109      	bne.n	80073f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073e2:	4b23      	ldr	r3, [pc, #140]	; (8007470 <prvAddNewTaskToReadyList+0xc8>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d802      	bhi.n	80073f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073f0:	4a1f      	ldr	r2, [pc, #124]	; (8007470 <prvAddNewTaskToReadyList+0xc8>)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073f6:	4b20      	ldr	r3, [pc, #128]	; (8007478 <prvAddNewTaskToReadyList+0xd0>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3301      	adds	r3, #1
 80073fc:	4a1e      	ldr	r2, [pc, #120]	; (8007478 <prvAddNewTaskToReadyList+0xd0>)
 80073fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007400:	4b1d      	ldr	r3, [pc, #116]	; (8007478 <prvAddNewTaskToReadyList+0xd0>)
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740c:	4b1b      	ldr	r3, [pc, #108]	; (800747c <prvAddNewTaskToReadyList+0xd4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d903      	bls.n	800741c <prvAddNewTaskToReadyList+0x74>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	4a18      	ldr	r2, [pc, #96]	; (800747c <prvAddNewTaskToReadyList+0xd4>)
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4a15      	ldr	r2, [pc, #84]	; (8007480 <prvAddNewTaskToReadyList+0xd8>)
 800742a:	441a      	add	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3304      	adds	r3, #4
 8007430:	4619      	mov	r1, r3
 8007432:	4610      	mov	r0, r2
 8007434:	f7ff f93b 	bl	80066ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007438:	f001 f99c 	bl	8008774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800743c:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <prvAddNewTaskToReadyList+0xcc>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00e      	beq.n	8007462 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007444:	4b0a      	ldr	r3, [pc, #40]	; (8007470 <prvAddNewTaskToReadyList+0xc8>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744e:	429a      	cmp	r2, r3
 8007450:	d207      	bcs.n	8007462 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007452:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <prvAddNewTaskToReadyList+0xdc>)
 8007454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007462:	bf00      	nop
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20000d30 	.word	0x20000d30
 8007470:	2000085c 	.word	0x2000085c
 8007474:	20000d3c 	.word	0x20000d3c
 8007478:	20000d4c 	.word	0x20000d4c
 800747c:	20000d38 	.word	0x20000d38
 8007480:	20000860 	.word	0x20000860
 8007484:	e000ed04 	.word	0xe000ed04

08007488 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d016      	beq.n	80074c8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800749a:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <vTaskDelay+0x60>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d009      	beq.n	80074b6 <vTaskDelay+0x2e>
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60bb      	str	r3, [r7, #8]
 80074b4:	e7fe      	b.n	80074b4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80074b6:	f000 f87f 	bl	80075b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074ba:	2100      	movs	r1, #0
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fcdf 	bl	8007e80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074c2:	f000 f887 	bl	80075d4 <xTaskResumeAll>
 80074c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d107      	bne.n	80074de <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80074ce:	4b07      	ldr	r3, [pc, #28]	; (80074ec <vTaskDelay+0x64>)
 80074d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074de:	bf00      	nop
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000d58 	.word	0x20000d58
 80074ec:	e000ed04 	.word	0xe000ed04

080074f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08a      	sub	sp, #40	; 0x28
 80074f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074fe:	463a      	mov	r2, r7
 8007500:	1d39      	adds	r1, r7, #4
 8007502:	f107 0308 	add.w	r3, r7, #8
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff f874 	bl	80065f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	9202      	str	r2, [sp, #8]
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	2300      	movs	r3, #0
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	2300      	movs	r3, #0
 800751c:	460a      	mov	r2, r1
 800751e:	4920      	ldr	r1, [pc, #128]	; (80075a0 <vTaskStartScheduler+0xb0>)
 8007520:	4820      	ldr	r0, [pc, #128]	; (80075a4 <vTaskStartScheduler+0xb4>)
 8007522:	f7ff fe1d 	bl	8007160 <xTaskCreateStatic>
 8007526:	4602      	mov	r2, r0
 8007528:	4b1f      	ldr	r3, [pc, #124]	; (80075a8 <vTaskStartScheduler+0xb8>)
 800752a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800752c:	4b1e      	ldr	r3, [pc, #120]	; (80075a8 <vTaskStartScheduler+0xb8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007534:	2301      	movs	r3, #1
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	e001      	b.n	800753e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800753a:	2300      	movs	r3, #0
 800753c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d102      	bne.n	800754a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007544:	f000 fcf0 	bl	8007f28 <xTimerCreateTimerTask>
 8007548:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d115      	bne.n	800757c <vTaskStartScheduler+0x8c>
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007562:	4b12      	ldr	r3, [pc, #72]	; (80075ac <vTaskStartScheduler+0xbc>)
 8007564:	f04f 32ff 	mov.w	r2, #4294967295
 8007568:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800756a:	4b11      	ldr	r3, [pc, #68]	; (80075b0 <vTaskStartScheduler+0xc0>)
 800756c:	2201      	movs	r2, #1
 800756e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007570:	4b10      	ldr	r3, [pc, #64]	; (80075b4 <vTaskStartScheduler+0xc4>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007576:	f001 f85f 	bl	8008638 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800757a:	e00d      	b.n	8007598 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007582:	d109      	bne.n	8007598 <vTaskStartScheduler+0xa8>
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	e7fe      	b.n	8007596 <vTaskStartScheduler+0xa6>
}
 8007598:	bf00      	nop
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	080096b0 	.word	0x080096b0
 80075a4:	08007bc1 	.word	0x08007bc1
 80075a8:	20000d54 	.word	0x20000d54
 80075ac:	20000d50 	.word	0x20000d50
 80075b0:	20000d3c 	.word	0x20000d3c
 80075b4:	20000d34 	.word	0x20000d34

080075b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075b8:	b480      	push	{r7}
 80075ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80075bc:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <vTaskSuspendAll+0x18>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3301      	adds	r3, #1
 80075c2:	4a03      	ldr	r2, [pc, #12]	; (80075d0 <vTaskSuspendAll+0x18>)
 80075c4:	6013      	str	r3, [r2, #0]
}
 80075c6:	bf00      	nop
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bc80      	pop	{r7}
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	20000d58 	.word	0x20000d58

080075d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075de:	2300      	movs	r3, #0
 80075e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075e2:	4b41      	ldr	r3, [pc, #260]	; (80076e8 <xTaskResumeAll+0x114>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <xTaskResumeAll+0x2a>
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	e7fe      	b.n	80075fc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075fe:	f001 f88b 	bl	8008718 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007602:	4b39      	ldr	r3, [pc, #228]	; (80076e8 <xTaskResumeAll+0x114>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3b01      	subs	r3, #1
 8007608:	4a37      	ldr	r2, [pc, #220]	; (80076e8 <xTaskResumeAll+0x114>)
 800760a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800760c:	4b36      	ldr	r3, [pc, #216]	; (80076e8 <xTaskResumeAll+0x114>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d162      	bne.n	80076da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007614:	4b35      	ldr	r3, [pc, #212]	; (80076ec <xTaskResumeAll+0x118>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d05e      	beq.n	80076da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800761c:	e02f      	b.n	800767e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800761e:	4b34      	ldr	r3, [pc, #208]	; (80076f0 <xTaskResumeAll+0x11c>)
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3318      	adds	r3, #24
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff f89a 	bl	8006764 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3304      	adds	r3, #4
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff f895 	bl	8006764 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763e:	4b2d      	ldr	r3, [pc, #180]	; (80076f4 <xTaskResumeAll+0x120>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d903      	bls.n	800764e <xTaskResumeAll+0x7a>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	4a2a      	ldr	r2, [pc, #168]	; (80076f4 <xTaskResumeAll+0x120>)
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4a27      	ldr	r2, [pc, #156]	; (80076f8 <xTaskResumeAll+0x124>)
 800765c:	441a      	add	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3304      	adds	r3, #4
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f7ff f822 	bl	80066ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766e:	4b23      	ldr	r3, [pc, #140]	; (80076fc <xTaskResumeAll+0x128>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	429a      	cmp	r2, r3
 8007676:	d302      	bcc.n	800767e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007678:	4b21      	ldr	r3, [pc, #132]	; (8007700 <xTaskResumeAll+0x12c>)
 800767a:	2201      	movs	r2, #1
 800767c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800767e:	4b1c      	ldr	r3, [pc, #112]	; (80076f0 <xTaskResumeAll+0x11c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1cb      	bne.n	800761e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800768c:	f000 fb4a 	bl	8007d24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007690:	4b1c      	ldr	r3, [pc, #112]	; (8007704 <xTaskResumeAll+0x130>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d010      	beq.n	80076be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800769c:	f000 f844 	bl	8007728 <xTaskIncrementTick>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80076a6:	4b16      	ldr	r3, [pc, #88]	; (8007700 <xTaskResumeAll+0x12c>)
 80076a8:	2201      	movs	r2, #1
 80076aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3b01      	subs	r3, #1
 80076b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1f1      	bne.n	800769c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80076b8:	4b12      	ldr	r3, [pc, #72]	; (8007704 <xTaskResumeAll+0x130>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076be:	4b10      	ldr	r3, [pc, #64]	; (8007700 <xTaskResumeAll+0x12c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076c6:	2301      	movs	r3, #1
 80076c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076ca:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <xTaskResumeAll+0x134>)
 80076cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076da:	f001 f84b 	bl	8008774 <vPortExitCritical>

	return xAlreadyYielded;
 80076de:	68bb      	ldr	r3, [r7, #8]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20000d58 	.word	0x20000d58
 80076ec:	20000d30 	.word	0x20000d30
 80076f0:	20000cf0 	.word	0x20000cf0
 80076f4:	20000d38 	.word	0x20000d38
 80076f8:	20000860 	.word	0x20000860
 80076fc:	2000085c 	.word	0x2000085c
 8007700:	20000d44 	.word	0x20000d44
 8007704:	20000d40 	.word	0x20000d40
 8007708:	e000ed04 	.word	0xe000ed04

0800770c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007712:	4b04      	ldr	r3, [pc, #16]	; (8007724 <xTaskGetTickCount+0x18>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007718:	687b      	ldr	r3, [r7, #4]
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr
 8007724:	20000d34 	.word	0x20000d34

08007728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007732:	4b51      	ldr	r3, [pc, #324]	; (8007878 <xTaskIncrementTick+0x150>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	f040 808d 	bne.w	8007856 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800773c:	4b4f      	ldr	r3, [pc, #316]	; (800787c <xTaskIncrementTick+0x154>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3301      	adds	r3, #1
 8007742:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007744:	4a4d      	ldr	r2, [pc, #308]	; (800787c <xTaskIncrementTick+0x154>)
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d11f      	bne.n	8007790 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007750:	4b4b      	ldr	r3, [pc, #300]	; (8007880 <xTaskIncrementTick+0x158>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d009      	beq.n	800776e <xTaskIncrementTick+0x46>
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	e7fe      	b.n	800776c <xTaskIncrementTick+0x44>
 800776e:	4b44      	ldr	r3, [pc, #272]	; (8007880 <xTaskIncrementTick+0x158>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	4b43      	ldr	r3, [pc, #268]	; (8007884 <xTaskIncrementTick+0x15c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a41      	ldr	r2, [pc, #260]	; (8007880 <xTaskIncrementTick+0x158>)
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	4a41      	ldr	r2, [pc, #260]	; (8007884 <xTaskIncrementTick+0x15c>)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	4b41      	ldr	r3, [pc, #260]	; (8007888 <xTaskIncrementTick+0x160>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3301      	adds	r3, #1
 8007788:	4a3f      	ldr	r2, [pc, #252]	; (8007888 <xTaskIncrementTick+0x160>)
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	f000 faca 	bl	8007d24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007790:	4b3e      	ldr	r3, [pc, #248]	; (800788c <xTaskIncrementTick+0x164>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	429a      	cmp	r2, r3
 8007798:	d34e      	bcc.n	8007838 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800779a:	4b39      	ldr	r3, [pc, #228]	; (8007880 <xTaskIncrementTick+0x158>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <xTaskIncrementTick+0x80>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <xTaskIncrementTick+0x82>
 80077a8:	2300      	movs	r3, #0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d004      	beq.n	80077b8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ae:	4b37      	ldr	r3, [pc, #220]	; (800788c <xTaskIncrementTick+0x164>)
 80077b0:	f04f 32ff 	mov.w	r2, #4294967295
 80077b4:	601a      	str	r2, [r3, #0]
					break;
 80077b6:	e03f      	b.n	8007838 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80077b8:	4b31      	ldr	r3, [pc, #196]	; (8007880 <xTaskIncrementTick+0x158>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d203      	bcs.n	80077d8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077d0:	4a2e      	ldr	r2, [pc, #184]	; (800788c <xTaskIncrementTick+0x164>)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6013      	str	r3, [r2, #0]
						break;
 80077d6:	e02f      	b.n	8007838 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	3304      	adds	r3, #4
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fe ffc1 	bl	8006764 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d004      	beq.n	80077f4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	3318      	adds	r3, #24
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe ffb8 	bl	8006764 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f8:	4b25      	ldr	r3, [pc, #148]	; (8007890 <xTaskIncrementTick+0x168>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d903      	bls.n	8007808 <xTaskIncrementTick+0xe0>
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	4a22      	ldr	r2, [pc, #136]	; (8007890 <xTaskIncrementTick+0x168>)
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780c:	4613      	mov	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4a1f      	ldr	r2, [pc, #124]	; (8007894 <xTaskIncrementTick+0x16c>)
 8007816:	441a      	add	r2, r3
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	3304      	adds	r3, #4
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	f7fe ff45 	bl	80066ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007828:	4b1b      	ldr	r3, [pc, #108]	; (8007898 <xTaskIncrementTick+0x170>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782e:	429a      	cmp	r2, r3
 8007830:	d3b3      	bcc.n	800779a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007832:	2301      	movs	r3, #1
 8007834:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007836:	e7b0      	b.n	800779a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007838:	4b17      	ldr	r3, [pc, #92]	; (8007898 <xTaskIncrementTick+0x170>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783e:	4915      	ldr	r1, [pc, #84]	; (8007894 <xTaskIncrementTick+0x16c>)
 8007840:	4613      	mov	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d907      	bls.n	8007860 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007850:	2301      	movs	r3, #1
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	e004      	b.n	8007860 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007856:	4b11      	ldr	r3, [pc, #68]	; (800789c <xTaskIncrementTick+0x174>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3301      	adds	r3, #1
 800785c:	4a0f      	ldr	r2, [pc, #60]	; (800789c <xTaskIncrementTick+0x174>)
 800785e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007860:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <xTaskIncrementTick+0x178>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007868:	2301      	movs	r3, #1
 800786a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800786c:	697b      	ldr	r3, [r7, #20]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20000d58 	.word	0x20000d58
 800787c:	20000d34 	.word	0x20000d34
 8007880:	20000ce8 	.word	0x20000ce8
 8007884:	20000cec 	.word	0x20000cec
 8007888:	20000d48 	.word	0x20000d48
 800788c:	20000d50 	.word	0x20000d50
 8007890:	20000d38 	.word	0x20000d38
 8007894:	20000860 	.word	0x20000860
 8007898:	2000085c 	.word	0x2000085c
 800789c:	20000d40 	.word	0x20000d40
 80078a0:	20000d44 	.word	0x20000d44

080078a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078aa:	4b27      	ldr	r3, [pc, #156]	; (8007948 <vTaskSwitchContext+0xa4>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078b2:	4b26      	ldr	r3, [pc, #152]	; (800794c <vTaskSwitchContext+0xa8>)
 80078b4:	2201      	movs	r2, #1
 80078b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078b8:	e040      	b.n	800793c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80078ba:	4b24      	ldr	r3, [pc, #144]	; (800794c <vTaskSwitchContext+0xa8>)
 80078bc:	2200      	movs	r2, #0
 80078be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80078c0:	4b23      	ldr	r3, [pc, #140]	; (8007950 <vTaskSwitchContext+0xac>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	e00f      	b.n	80078e8 <vTaskSwitchContext+0x44>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <vTaskSwitchContext+0x3e>
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	607b      	str	r3, [r7, #4]
 80078e0:	e7fe      	b.n	80078e0 <vTaskSwitchContext+0x3c>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	491a      	ldr	r1, [pc, #104]	; (8007954 <vTaskSwitchContext+0xb0>)
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	4613      	mov	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	440b      	add	r3, r1
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0e5      	beq.n	80078c8 <vTaskSwitchContext+0x24>
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4613      	mov	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4a13      	ldr	r2, [pc, #76]	; (8007954 <vTaskSwitchContext+0xb0>)
 8007908:	4413      	add	r3, r2
 800790a:	60bb      	str	r3, [r7, #8]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	605a      	str	r2, [r3, #4]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	3308      	adds	r3, #8
 800791e:	429a      	cmp	r2, r3
 8007920:	d104      	bne.n	800792c <vTaskSwitchContext+0x88>
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	605a      	str	r2, [r3, #4]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	4a09      	ldr	r2, [pc, #36]	; (8007958 <vTaskSwitchContext+0xb4>)
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	4a06      	ldr	r2, [pc, #24]	; (8007950 <vTaskSwitchContext+0xac>)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6013      	str	r3, [r2, #0]
}
 800793c:	bf00      	nop
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	bc80      	pop	{r7}
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	20000d58 	.word	0x20000d58
 800794c:	20000d44 	.word	0x20000d44
 8007950:	20000d38 	.word	0x20000d38
 8007954:	20000860 	.word	0x20000860
 8007958:	2000085c 	.word	0x2000085c

0800795c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <vTaskPlaceOnEventList+0x24>
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	e7fe      	b.n	800797e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007980:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <vTaskPlaceOnEventList+0x44>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3318      	adds	r3, #24
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7fe feb3 	bl	80066f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800798e:	2101      	movs	r1, #1
 8007990:	6838      	ldr	r0, [r7, #0]
 8007992:	f000 fa75 	bl	8007e80 <prvAddCurrentTaskToDelayedList>
}
 8007996:	bf00      	nop
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	2000085c 	.word	0x2000085c

080079a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d109      	bne.n	80079ca <vTaskPlaceOnEventListRestricted+0x26>
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	e7fe      	b.n	80079c8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079ca:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <vTaskPlaceOnEventListRestricted+0x50>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3318      	adds	r3, #24
 80079d0:	4619      	mov	r1, r3
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f7fe fe6b 	bl	80066ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80079de:	f04f 33ff 	mov.w	r3, #4294967295
 80079e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079e4:	6879      	ldr	r1, [r7, #4]
 80079e6:	68b8      	ldr	r0, [r7, #8]
 80079e8:	f000 fa4a 	bl	8007e80 <prvAddCurrentTaskToDelayedList>
	}
 80079ec:	bf00      	nop
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	2000085c 	.word	0x2000085c

080079f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d109      	bne.n	8007a22 <xTaskRemoveFromEventList+0x2a>
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	e7fe      	b.n	8007a20 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	3318      	adds	r3, #24
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe fe9c 	bl	8006764 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a2c:	4b1d      	ldr	r3, [pc, #116]	; (8007aa4 <xTaskRemoveFromEventList+0xac>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d11d      	bne.n	8007a70 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	3304      	adds	r3, #4
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe fe93 	bl	8006764 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a42:	4b19      	ldr	r3, [pc, #100]	; (8007aa8 <xTaskRemoveFromEventList+0xb0>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d903      	bls.n	8007a52 <xTaskRemoveFromEventList+0x5a>
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4e:	4a16      	ldr	r2, [pc, #88]	; (8007aa8 <xTaskRemoveFromEventList+0xb0>)
 8007a50:	6013      	str	r3, [r2, #0]
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4a13      	ldr	r2, [pc, #76]	; (8007aac <xTaskRemoveFromEventList+0xb4>)
 8007a60:	441a      	add	r2, r3
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	3304      	adds	r3, #4
 8007a66:	4619      	mov	r1, r3
 8007a68:	4610      	mov	r0, r2
 8007a6a:	f7fe fe20 	bl	80066ae <vListInsertEnd>
 8007a6e:	e005      	b.n	8007a7c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	3318      	adds	r3, #24
 8007a74:	4619      	mov	r1, r3
 8007a76:	480e      	ldr	r0, [pc, #56]	; (8007ab0 <xTaskRemoveFromEventList+0xb8>)
 8007a78:	f7fe fe19 	bl	80066ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a80:	4b0c      	ldr	r3, [pc, #48]	; (8007ab4 <xTaskRemoveFromEventList+0xbc>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d905      	bls.n	8007a96 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a8e:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <xTaskRemoveFromEventList+0xc0>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	e001      	b.n	8007a9a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007a96:	2300      	movs	r3, #0
 8007a98:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007a9a:	697b      	ldr	r3, [r7, #20]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20000d58 	.word	0x20000d58
 8007aa8:	20000d38 	.word	0x20000d38
 8007aac:	20000860 	.word	0x20000860
 8007ab0:	20000cf0 	.word	0x20000cf0
 8007ab4:	2000085c 	.word	0x2000085c
 8007ab8:	20000d44 	.word	0x20000d44

08007abc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ac4:	4b06      	ldr	r3, [pc, #24]	; (8007ae0 <vTaskInternalSetTimeOutState+0x24>)
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007acc:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <vTaskInternalSetTimeOutState+0x28>)
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	605a      	str	r2, [r3, #4]
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	20000d48 	.word	0x20000d48
 8007ae4:	20000d34 	.word	0x20000d34

08007ae8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b088      	sub	sp, #32
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <xTaskCheckForTimeOut+0x24>
 8007af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	613b      	str	r3, [r7, #16]
 8007b0a:	e7fe      	b.n	8007b0a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d109      	bne.n	8007b26 <xTaskCheckForTimeOut+0x3e>
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	e7fe      	b.n	8007b24 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007b26:	f000 fdf7 	bl	8008718 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b2a:	4b1d      	ldr	r3, [pc, #116]	; (8007ba0 <xTaskCheckForTimeOut+0xb8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b42:	d102      	bne.n	8007b4a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b44:	2300      	movs	r3, #0
 8007b46:	61fb      	str	r3, [r7, #28]
 8007b48:	e023      	b.n	8007b92 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	4b15      	ldr	r3, [pc, #84]	; (8007ba4 <xTaskCheckForTimeOut+0xbc>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d007      	beq.n	8007b66 <xTaskCheckForTimeOut+0x7e>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d302      	bcc.n	8007b66 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b60:	2301      	movs	r3, #1
 8007b62:	61fb      	str	r3, [r7, #28]
 8007b64:	e015      	b.n	8007b92 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d20b      	bcs.n	8007b88 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff ff9d 	bl	8007abc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b82:	2300      	movs	r3, #0
 8007b84:	61fb      	str	r3, [r7, #28]
 8007b86:	e004      	b.n	8007b92 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b92:	f000 fdef 	bl	8008774 <vPortExitCritical>

	return xReturn;
 8007b96:	69fb      	ldr	r3, [r7, #28]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3720      	adds	r7, #32
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20000d34 	.word	0x20000d34
 8007ba4:	20000d48 	.word	0x20000d48

08007ba8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007bac:	4b03      	ldr	r3, [pc, #12]	; (8007bbc <vTaskMissedYield+0x14>)
 8007bae:	2201      	movs	r2, #1
 8007bb0:	601a      	str	r2, [r3, #0]
}
 8007bb2:	bf00      	nop
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bc80      	pop	{r7}
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	20000d44 	.word	0x20000d44

08007bc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bc8:	f000 f852 	bl	8007c70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bcc:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <prvIdleTask+0x28>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d9f9      	bls.n	8007bc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bd4:	4b05      	ldr	r3, [pc, #20]	; (8007bec <prvIdleTask+0x2c>)
 8007bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007be4:	e7f0      	b.n	8007bc8 <prvIdleTask+0x8>
 8007be6:	bf00      	nop
 8007be8:	20000860 	.word	0x20000860
 8007bec:	e000ed04 	.word	0xe000ed04

08007bf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	607b      	str	r3, [r7, #4]
 8007bfa:	e00c      	b.n	8007c16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4a12      	ldr	r2, [pc, #72]	; (8007c50 <prvInitialiseTaskLists+0x60>)
 8007c08:	4413      	add	r3, r2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe fd24 	bl	8006658 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3301      	adds	r3, #1
 8007c14:	607b      	str	r3, [r7, #4]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b37      	cmp	r3, #55	; 0x37
 8007c1a:	d9ef      	bls.n	8007bfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c1c:	480d      	ldr	r0, [pc, #52]	; (8007c54 <prvInitialiseTaskLists+0x64>)
 8007c1e:	f7fe fd1b 	bl	8006658 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c22:	480d      	ldr	r0, [pc, #52]	; (8007c58 <prvInitialiseTaskLists+0x68>)
 8007c24:	f7fe fd18 	bl	8006658 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c28:	480c      	ldr	r0, [pc, #48]	; (8007c5c <prvInitialiseTaskLists+0x6c>)
 8007c2a:	f7fe fd15 	bl	8006658 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c2e:	480c      	ldr	r0, [pc, #48]	; (8007c60 <prvInitialiseTaskLists+0x70>)
 8007c30:	f7fe fd12 	bl	8006658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c34:	480b      	ldr	r0, [pc, #44]	; (8007c64 <prvInitialiseTaskLists+0x74>)
 8007c36:	f7fe fd0f 	bl	8006658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c3a:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <prvInitialiseTaskLists+0x78>)
 8007c3c:	4a05      	ldr	r2, [pc, #20]	; (8007c54 <prvInitialiseTaskLists+0x64>)
 8007c3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c40:	4b0a      	ldr	r3, [pc, #40]	; (8007c6c <prvInitialiseTaskLists+0x7c>)
 8007c42:	4a05      	ldr	r2, [pc, #20]	; (8007c58 <prvInitialiseTaskLists+0x68>)
 8007c44:	601a      	str	r2, [r3, #0]
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000860 	.word	0x20000860
 8007c54:	20000cc0 	.word	0x20000cc0
 8007c58:	20000cd4 	.word	0x20000cd4
 8007c5c:	20000cf0 	.word	0x20000cf0
 8007c60:	20000d04 	.word	0x20000d04
 8007c64:	20000d1c 	.word	0x20000d1c
 8007c68:	20000ce8 	.word	0x20000ce8
 8007c6c:	20000cec 	.word	0x20000cec

08007c70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c76:	e019      	b.n	8007cac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c78:	f000 fd4e 	bl	8008718 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007c7c:	4b0f      	ldr	r3, [pc, #60]	; (8007cbc <prvCheckTasksWaitingTermination+0x4c>)
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3304      	adds	r3, #4
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fe fd6b 	bl	8006764 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c8e:	4b0c      	ldr	r3, [pc, #48]	; (8007cc0 <prvCheckTasksWaitingTermination+0x50>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	4a0a      	ldr	r2, [pc, #40]	; (8007cc0 <prvCheckTasksWaitingTermination+0x50>)
 8007c96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c98:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <prvCheckTasksWaitingTermination+0x54>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	4a09      	ldr	r2, [pc, #36]	; (8007cc4 <prvCheckTasksWaitingTermination+0x54>)
 8007ca0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ca2:	f000 fd67 	bl	8008774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f80e 	bl	8007cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <prvCheckTasksWaitingTermination+0x54>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1e1      	bne.n	8007c78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	20000d04 	.word	0x20000d04
 8007cc0:	20000d30 	.word	0x20000d30
 8007cc4:	20000d18 	.word	0x20000d18

08007cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d108      	bne.n	8007cec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 fed2 	bl	8008a88 <vPortFree>
				vPortFree( pxTCB );
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fecf 	bl	8008a88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007cea:	e017      	b.n	8007d1c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d103      	bne.n	8007cfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fec6 	bl	8008a88 <vPortFree>
	}
 8007cfc:	e00e      	b.n	8007d1c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d009      	beq.n	8007d1c <prvDeleteTCB+0x54>
 8007d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	e7fe      	b.n	8007d1a <prvDeleteTCB+0x52>
	}
 8007d1c:	bf00      	nop
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d2a:	4b0e      	ldr	r3, [pc, #56]	; (8007d64 <prvResetNextTaskUnblockTime+0x40>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <prvResetNextTaskUnblockTime+0x14>
 8007d34:	2301      	movs	r3, #1
 8007d36:	e000      	b.n	8007d3a <prvResetNextTaskUnblockTime+0x16>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d004      	beq.n	8007d48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d3e:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <prvResetNextTaskUnblockTime+0x44>)
 8007d40:	f04f 32ff 	mov.w	r2, #4294967295
 8007d44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d46:	e008      	b.n	8007d5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d48:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <prvResetNextTaskUnblockTime+0x40>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	4a04      	ldr	r2, [pc, #16]	; (8007d68 <prvResetNextTaskUnblockTime+0x44>)
 8007d58:	6013      	str	r3, [r2, #0]
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr
 8007d64:	20000ce8 	.word	0x20000ce8
 8007d68:	20000d50 	.word	0x20000d50

08007d6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d72:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <xTaskGetSchedulerState+0x34>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d102      	bne.n	8007d80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	607b      	str	r3, [r7, #4]
 8007d7e:	e008      	b.n	8007d92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d80:	4b08      	ldr	r3, [pc, #32]	; (8007da4 <xTaskGetSchedulerState+0x38>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d102      	bne.n	8007d8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	607b      	str	r3, [r7, #4]
 8007d8c:	e001      	b.n	8007d92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d92:	687b      	ldr	r3, [r7, #4]
	}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bc80      	pop	{r7}
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000d3c 	.word	0x20000d3c
 8007da4:	20000d58 	.word	0x20000d58

08007da8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007db4:	2300      	movs	r3, #0
 8007db6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d054      	beq.n	8007e68 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007dbe:	4b2d      	ldr	r3, [pc, #180]	; (8007e74 <xTaskPriorityDisinherit+0xcc>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d009      	beq.n	8007ddc <xTaskPriorityDisinherit+0x34>
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	e7fe      	b.n	8007dda <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <xTaskPriorityDisinherit+0x50>
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	60bb      	str	r3, [r7, #8]
 8007df6:	e7fe      	b.n	8007df6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfc:	1e5a      	subs	r2, r3, #1
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d02c      	beq.n	8007e68 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d128      	bne.n	8007e68 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	3304      	adds	r3, #4
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe fca2 	bl	8006764 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e38:	4b0f      	ldr	r3, [pc, #60]	; (8007e78 <xTaskPriorityDisinherit+0xd0>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d903      	bls.n	8007e48 <xTaskPriorityDisinherit+0xa0>
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	4a0c      	ldr	r2, [pc, #48]	; (8007e78 <xTaskPriorityDisinherit+0xd0>)
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <xTaskPriorityDisinherit+0xd4>)
 8007e56:	441a      	add	r2, r3
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	f7fe fc25 	bl	80066ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e64:	2301      	movs	r3, #1
 8007e66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e68:	697b      	ldr	r3, [r7, #20]
	}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	2000085c 	.word	0x2000085c
 8007e78:	20000d38 	.word	0x20000d38
 8007e7c:	20000860 	.word	0x20000860

08007e80 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e8a:	4b21      	ldr	r3, [pc, #132]	; (8007f10 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e90:	4b20      	ldr	r3, [pc, #128]	; (8007f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3304      	adds	r3, #4
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe fc64 	bl	8006764 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea2:	d10a      	bne.n	8007eba <prvAddCurrentTaskToDelayedList+0x3a>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d007      	beq.n	8007eba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eaa:	4b1a      	ldr	r3, [pc, #104]	; (8007f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4819      	ldr	r0, [pc, #100]	; (8007f18 <prvAddCurrentTaskToDelayedList+0x98>)
 8007eb4:	f7fe fbfb 	bl	80066ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007eb8:	e026      	b.n	8007f08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ec2:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d209      	bcs.n	8007ee6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ed2:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3304      	adds	r3, #4
 8007edc:	4619      	mov	r1, r3
 8007ede:	4610      	mov	r0, r2
 8007ee0:	f7fe fc08 	bl	80066f4 <vListInsert>
}
 8007ee4:	e010      	b.n	8007f08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ee6:	4b0e      	ldr	r3, [pc, #56]	; (8007f20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	f7fe fbfe 	bl	80066f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ef8:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d202      	bcs.n	8007f08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f02:	4a08      	ldr	r2, [pc, #32]	; (8007f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	6013      	str	r3, [r2, #0]
}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	20000d34 	.word	0x20000d34
 8007f14:	2000085c 	.word	0x2000085c
 8007f18:	20000d1c 	.word	0x20000d1c
 8007f1c:	20000cec 	.word	0x20000cec
 8007f20:	20000ce8 	.word	0x20000ce8
 8007f24:	20000d50 	.word	0x20000d50

08007f28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08a      	sub	sp, #40	; 0x28
 8007f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f32:	f000 fac3 	bl	80084bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f36:	4b1c      	ldr	r3, [pc, #112]	; (8007fa8 <xTimerCreateTimerTask+0x80>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d021      	beq.n	8007f82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f46:	1d3a      	adds	r2, r7, #4
 8007f48:	f107 0108 	add.w	r1, r7, #8
 8007f4c:	f107 030c 	add.w	r3, r7, #12
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe fb67 	bl	8006624 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	9202      	str	r2, [sp, #8]
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	2302      	movs	r3, #2
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	2300      	movs	r3, #0
 8007f66:	460a      	mov	r2, r1
 8007f68:	4910      	ldr	r1, [pc, #64]	; (8007fac <xTimerCreateTimerTask+0x84>)
 8007f6a:	4811      	ldr	r0, [pc, #68]	; (8007fb0 <xTimerCreateTimerTask+0x88>)
 8007f6c:	f7ff f8f8 	bl	8007160 <xTaskCreateStatic>
 8007f70:	4602      	mov	r2, r0
 8007f72:	4b10      	ldr	r3, [pc, #64]	; (8007fb4 <xTimerCreateTimerTask+0x8c>)
 8007f74:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f76:	4b0f      	ldr	r3, [pc, #60]	; (8007fb4 <xTimerCreateTimerTask+0x8c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d109      	bne.n	8007f9c <xTimerCreateTimerTask+0x74>
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	613b      	str	r3, [r7, #16]
 8007f9a:	e7fe      	b.n	8007f9a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007f9c:	697b      	ldr	r3, [r7, #20]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000d8c 	.word	0x20000d8c
 8007fac:	080096b8 	.word	0x080096b8
 8007fb0:	080080d1 	.word	0x080080d1
 8007fb4:	20000d90 	.word	0x20000d90

08007fb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08a      	sub	sp, #40	; 0x28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d109      	bne.n	8007fe4 <xTimerGenericCommand+0x2c>
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	623b      	str	r3, [r7, #32]
 8007fe2:	e7fe      	b.n	8007fe2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007fe4:	4b19      	ldr	r3, [pc, #100]	; (800804c <xTimerGenericCommand+0x94>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d02a      	beq.n	8008042 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2b05      	cmp	r3, #5
 8007ffc:	dc18      	bgt.n	8008030 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ffe:	f7ff feb5 	bl	8007d6c <xTaskGetSchedulerState>
 8008002:	4603      	mov	r3, r0
 8008004:	2b02      	cmp	r3, #2
 8008006:	d109      	bne.n	800801c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008008:	4b10      	ldr	r3, [pc, #64]	; (800804c <xTimerGenericCommand+0x94>)
 800800a:	6818      	ldr	r0, [r3, #0]
 800800c:	f107 0110 	add.w	r1, r7, #16
 8008010:	2300      	movs	r3, #0
 8008012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008014:	f7fe fcce 	bl	80069b4 <xQueueGenericSend>
 8008018:	6278      	str	r0, [r7, #36]	; 0x24
 800801a:	e012      	b.n	8008042 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800801c:	4b0b      	ldr	r3, [pc, #44]	; (800804c <xTimerGenericCommand+0x94>)
 800801e:	6818      	ldr	r0, [r3, #0]
 8008020:	f107 0110 	add.w	r1, r7, #16
 8008024:	2300      	movs	r3, #0
 8008026:	2200      	movs	r2, #0
 8008028:	f7fe fcc4 	bl	80069b4 <xQueueGenericSend>
 800802c:	6278      	str	r0, [r7, #36]	; 0x24
 800802e:	e008      	b.n	8008042 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008030:	4b06      	ldr	r3, [pc, #24]	; (800804c <xTimerGenericCommand+0x94>)
 8008032:	6818      	ldr	r0, [r3, #0]
 8008034:	f107 0110 	add.w	r1, r7, #16
 8008038:	2300      	movs	r3, #0
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	f7fe fdb4 	bl	8006ba8 <xQueueGenericSendFromISR>
 8008040:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008044:	4618      	mov	r0, r3
 8008046:	3728      	adds	r7, #40	; 0x28
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20000d8c 	.word	0x20000d8c

08008050 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af02      	add	r7, sp, #8
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800805a:	4b1c      	ldr	r3, [pc, #112]	; (80080cc <prvProcessExpiredTimer+0x7c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	3304      	adds	r3, #4
 8008068:	4618      	mov	r0, r3
 800806a:	f7fe fb7b 	bl	8006764 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d121      	bne.n	80080ba <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	699a      	ldr	r2, [r3, #24]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	18d1      	adds	r1, r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	6978      	ldr	r0, [r7, #20]
 8008084:	f000 f8c8 	bl	8008218 <prvInsertTimerInActiveList>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d015      	beq.n	80080ba <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800808e:	2300      	movs	r3, #0
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	2300      	movs	r3, #0
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	2100      	movs	r1, #0
 8008098:	6978      	ldr	r0, [r7, #20]
 800809a:	f7ff ff8d 	bl	8007fb8 <xTimerGenericCommand>
 800809e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <prvProcessExpiredTimer+0x6a>
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	e7fe      	b.n	80080b8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	6978      	ldr	r0, [r7, #20]
 80080c0:	4798      	blx	r3
}
 80080c2:	bf00      	nop
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20000d84 	.word	0x20000d84

080080d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080d8:	f107 0308 	add.w	r3, r7, #8
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 f857 	bl	8008190 <prvGetNextExpireTime>
 80080e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	4619      	mov	r1, r3
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 f803 	bl	80080f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80080ee:	f000 f8d5 	bl	800829c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080f2:	e7f1      	b.n	80080d8 <prvTimerTask+0x8>

080080f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080fe:	f7ff fa5b 	bl	80075b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008102:	f107 0308 	add.w	r3, r7, #8
 8008106:	4618      	mov	r0, r3
 8008108:	f000 f866 	bl	80081d8 <prvSampleTimeNow>
 800810c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d130      	bne.n	8008176 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <prvProcessTimerOrBlockTask+0x3c>
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	429a      	cmp	r2, r3
 8008120:	d806      	bhi.n	8008130 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008122:	f7ff fa57 	bl	80075d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008126:	68f9      	ldr	r1, [r7, #12]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff ff91 	bl	8008050 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800812e:	e024      	b.n	800817a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d008      	beq.n	8008148 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008136:	4b13      	ldr	r3, [pc, #76]	; (8008184 <prvProcessTimerOrBlockTask+0x90>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	bf0c      	ite	eq
 8008140:	2301      	moveq	r3, #1
 8008142:	2300      	movne	r3, #0
 8008144:	b2db      	uxtb	r3, r3
 8008146:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008148:	4b0f      	ldr	r3, [pc, #60]	; (8008188 <prvProcessTimerOrBlockTask+0x94>)
 800814a:	6818      	ldr	r0, [r3, #0]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	4619      	mov	r1, r3
 8008156:	f7fe ffcf 	bl	80070f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800815a:	f7ff fa3b 	bl	80075d4 <xTaskResumeAll>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10a      	bne.n	800817a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008164:	4b09      	ldr	r3, [pc, #36]	; (800818c <prvProcessTimerOrBlockTask+0x98>)
 8008166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	f3bf 8f6f 	isb	sy
}
 8008174:	e001      	b.n	800817a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008176:	f7ff fa2d 	bl	80075d4 <xTaskResumeAll>
}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20000d88 	.word	0x20000d88
 8008188:	20000d8c 	.word	0x20000d8c
 800818c:	e000ed04 	.word	0xe000ed04

08008190 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008198:	4b0e      	ldr	r3, [pc, #56]	; (80081d4 <prvGetNextExpireTime+0x44>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	bf0c      	ite	eq
 80081a2:	2301      	moveq	r3, #1
 80081a4:	2300      	movne	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d105      	bne.n	80081c2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081b6:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <prvGetNextExpireTime+0x44>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	e001      	b.n	80081c6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081c6:	68fb      	ldr	r3, [r7, #12]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc80      	pop	{r7}
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20000d84 	.word	0x20000d84

080081d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80081e0:	f7ff fa94 	bl	800770c <xTaskGetTickCount>
 80081e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80081e6:	4b0b      	ldr	r3, [pc, #44]	; (8008214 <prvSampleTimeNow+0x3c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d205      	bcs.n	80081fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80081f0:	f000 f904 	bl	80083fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	e002      	b.n	8008202 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008202:	4a04      	ldr	r2, [pc, #16]	; (8008214 <prvSampleTimeNow+0x3c>)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008208:	68fb      	ldr	r3, [r7, #12]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20000d94 	.word	0x20000d94

08008218 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008226:	2300      	movs	r3, #0
 8008228:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	429a      	cmp	r2, r3
 800823c:	d812      	bhi.n	8008264 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	1ad2      	subs	r2, r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	429a      	cmp	r2, r3
 800824a:	d302      	bcc.n	8008252 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800824c:	2301      	movs	r3, #1
 800824e:	617b      	str	r3, [r7, #20]
 8008250:	e01b      	b.n	800828a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008252:	4b10      	ldr	r3, [pc, #64]	; (8008294 <prvInsertTimerInActiveList+0x7c>)
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3304      	adds	r3, #4
 800825a:	4619      	mov	r1, r3
 800825c:	4610      	mov	r0, r2
 800825e:	f7fe fa49 	bl	80066f4 <vListInsert>
 8008262:	e012      	b.n	800828a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	429a      	cmp	r2, r3
 800826a:	d206      	bcs.n	800827a <prvInsertTimerInActiveList+0x62>
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d302      	bcc.n	800827a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008274:	2301      	movs	r3, #1
 8008276:	617b      	str	r3, [r7, #20]
 8008278:	e007      	b.n	800828a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800827a:	4b07      	ldr	r3, [pc, #28]	; (8008298 <prvInsertTimerInActiveList+0x80>)
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3304      	adds	r3, #4
 8008282:	4619      	mov	r1, r3
 8008284:	4610      	mov	r0, r2
 8008286:	f7fe fa35 	bl	80066f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800828a:	697b      	ldr	r3, [r7, #20]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20000d88 	.word	0x20000d88
 8008298:	20000d84 	.word	0x20000d84

0800829c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08e      	sub	sp, #56	; 0x38
 80082a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082a2:	e099      	b.n	80083d8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	da17      	bge.n	80082da <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80082aa:	1d3b      	adds	r3, r7, #4
 80082ac:	3304      	adds	r3, #4
 80082ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d109      	bne.n	80082ca <prvProcessReceivedCommands+0x2e>
 80082b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	61fb      	str	r3, [r7, #28]
 80082c8:	e7fe      	b.n	80082c8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082d0:	6850      	ldr	r0, [r2, #4]
 80082d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082d4:	6892      	ldr	r2, [r2, #8]
 80082d6:	4611      	mov	r1, r2
 80082d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	db7a      	blt.n	80083d6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d004      	beq.n	80082f6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	3304      	adds	r3, #4
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe fa37 	bl	8006764 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082f6:	463b      	mov	r3, r7
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7ff ff6d 	bl	80081d8 <prvSampleTimeNow>
 80082fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b09      	cmp	r3, #9
 8008304:	d868      	bhi.n	80083d8 <prvProcessReceivedCommands+0x13c>
 8008306:	a201      	add	r2, pc, #4	; (adr r2, 800830c <prvProcessReceivedCommands+0x70>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	08008335 	.word	0x08008335
 8008310:	08008335 	.word	0x08008335
 8008314:	08008335 	.word	0x08008335
 8008318:	080083d9 	.word	0x080083d9
 800831c:	0800838f 	.word	0x0800838f
 8008320:	080083c5 	.word	0x080083c5
 8008324:	08008335 	.word	0x08008335
 8008328:	08008335 	.word	0x08008335
 800832c:	080083d9 	.word	0x080083d9
 8008330:	0800838f 	.word	0x0800838f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	18d1      	adds	r1, r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008342:	f7ff ff69 	bl	8008218 <prvInsertTimerInActiveList>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d045      	beq.n	80083d8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800834c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008352:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d13d      	bne.n	80083d8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	441a      	add	r2, r3
 8008364:	2300      	movs	r3, #0
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	2300      	movs	r3, #0
 800836a:	2100      	movs	r1, #0
 800836c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800836e:	f7ff fe23 	bl	8007fb8 <xTimerGenericCommand>
 8008372:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d12e      	bne.n	80083d8 <prvProcessReceivedCommands+0x13c>
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	61bb      	str	r3, [r7, #24]
 800838c:	e7fe      	b.n	800838c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d109      	bne.n	80083b0 <prvProcessReceivedCommands+0x114>
 800839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	617b      	str	r3, [r7, #20]
 80083ae:	e7fe      	b.n	80083ae <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	699a      	ldr	r2, [r3, #24]
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	18d1      	adds	r1, r2, r3
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083be:	f7ff ff2b 	bl	8008218 <prvInsertTimerInActiveList>
					break;
 80083c2:	e009      	b.n	80083d8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d104      	bne.n	80083d8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80083ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083d0:	f000 fb5a 	bl	8008a88 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083d4:	e000      	b.n	80083d8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80083d6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083d8:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <prvProcessReceivedCommands+0x15c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	1d39      	adds	r1, r7, #4
 80083de:	2200      	movs	r2, #0
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe fc75 	bl	8006cd0 <xQueueReceive>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f47f af5b 	bne.w	80082a4 <prvProcessReceivedCommands+0x8>
	}
}
 80083ee:	bf00      	nop
 80083f0:	3730      	adds	r7, #48	; 0x30
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000d8c 	.word	0x20000d8c

080083fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b088      	sub	sp, #32
 8008400:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008402:	e044      	b.n	800848e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008404:	4b2b      	ldr	r3, [pc, #172]	; (80084b4 <prvSwitchTimerLists+0xb8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800840e:	4b29      	ldr	r3, [pc, #164]	; (80084b4 <prvSwitchTimerLists+0xb8>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3304      	adds	r3, #4
 800841c:	4618      	mov	r0, r3
 800841e:	f7fe f9a1 	bl	8006764 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d12d      	bne.n	800848e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4413      	add	r3, r2
 800843a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	429a      	cmp	r2, r3
 8008442:	d90e      	bls.n	8008462 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008450:	4b18      	ldr	r3, [pc, #96]	; (80084b4 <prvSwitchTimerLists+0xb8>)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3304      	adds	r3, #4
 8008458:	4619      	mov	r1, r3
 800845a:	4610      	mov	r0, r2
 800845c:	f7fe f94a 	bl	80066f4 <vListInsert>
 8008460:	e015      	b.n	800848e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008462:	2300      	movs	r3, #0
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	2300      	movs	r3, #0
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	2100      	movs	r1, #0
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f7ff fda3 	bl	8007fb8 <xTimerGenericCommand>
 8008472:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d109      	bne.n	800848e <prvSwitchTimerLists+0x92>
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	603b      	str	r3, [r7, #0]
 800848c:	e7fe      	b.n	800848c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800848e:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <prvSwitchTimerLists+0xb8>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1b5      	bne.n	8008404 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008498:	4b06      	ldr	r3, [pc, #24]	; (80084b4 <prvSwitchTimerLists+0xb8>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800849e:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <prvSwitchTimerLists+0xbc>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a04      	ldr	r2, [pc, #16]	; (80084b4 <prvSwitchTimerLists+0xb8>)
 80084a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084a6:	4a04      	ldr	r2, [pc, #16]	; (80084b8 <prvSwitchTimerLists+0xbc>)
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	6013      	str	r3, [r2, #0]
}
 80084ac:	bf00      	nop
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000d84 	.word	0x20000d84
 80084b8:	20000d88 	.word	0x20000d88

080084bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084c2:	f000 f929 	bl	8008718 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084c6:	4b15      	ldr	r3, [pc, #84]	; (800851c <prvCheckForValidListAndQueue+0x60>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d120      	bne.n	8008510 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084ce:	4814      	ldr	r0, [pc, #80]	; (8008520 <prvCheckForValidListAndQueue+0x64>)
 80084d0:	f7fe f8c2 	bl	8006658 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084d4:	4813      	ldr	r0, [pc, #76]	; (8008524 <prvCheckForValidListAndQueue+0x68>)
 80084d6:	f7fe f8bf 	bl	8006658 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084da:	4b13      	ldr	r3, [pc, #76]	; (8008528 <prvCheckForValidListAndQueue+0x6c>)
 80084dc:	4a10      	ldr	r2, [pc, #64]	; (8008520 <prvCheckForValidListAndQueue+0x64>)
 80084de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084e0:	4b12      	ldr	r3, [pc, #72]	; (800852c <prvCheckForValidListAndQueue+0x70>)
 80084e2:	4a10      	ldr	r2, [pc, #64]	; (8008524 <prvCheckForValidListAndQueue+0x68>)
 80084e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084e6:	2300      	movs	r3, #0
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	4b11      	ldr	r3, [pc, #68]	; (8008530 <prvCheckForValidListAndQueue+0x74>)
 80084ec:	4a11      	ldr	r2, [pc, #68]	; (8008534 <prvCheckForValidListAndQueue+0x78>)
 80084ee:	2110      	movs	r1, #16
 80084f0:	200a      	movs	r0, #10
 80084f2:	f7fe f9c9 	bl	8006888 <xQueueGenericCreateStatic>
 80084f6:	4602      	mov	r2, r0
 80084f8:	4b08      	ldr	r3, [pc, #32]	; (800851c <prvCheckForValidListAndQueue+0x60>)
 80084fa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084fc:	4b07      	ldr	r3, [pc, #28]	; (800851c <prvCheckForValidListAndQueue+0x60>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <prvCheckForValidListAndQueue+0x60>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	490b      	ldr	r1, [pc, #44]	; (8008538 <prvCheckForValidListAndQueue+0x7c>)
 800850a:	4618      	mov	r0, r3
 800850c:	f7fe fdcc 	bl	80070a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008510:	f000 f930 	bl	8008774 <vPortExitCritical>
}
 8008514:	bf00      	nop
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20000d8c 	.word	0x20000d8c
 8008520:	20000d5c 	.word	0x20000d5c
 8008524:	20000d70 	.word	0x20000d70
 8008528:	20000d84 	.word	0x20000d84
 800852c:	20000d88 	.word	0x20000d88
 8008530:	20000e38 	.word	0x20000e38
 8008534:	20000d98 	.word	0x20000d98
 8008538:	080096c0 	.word	0x080096c0

0800853c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3b04      	subs	r3, #4
 800854c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3b04      	subs	r3, #4
 800855a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f023 0201 	bic.w	r2, r3, #1
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3b04      	subs	r3, #4
 800856a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800856c:	4a08      	ldr	r2, [pc, #32]	; (8008590 <pxPortInitialiseStack+0x54>)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3b14      	subs	r3, #20
 8008576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3b20      	subs	r3, #32
 8008582:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008584:	68fb      	ldr	r3, [r7, #12]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	bc80      	pop	{r7}
 800858e:	4770      	bx	lr
 8008590:	08008595 	.word	0x08008595

08008594 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800859a:	2300      	movs	r3, #0
 800859c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800859e:	4b10      	ldr	r3, [pc, #64]	; (80085e0 <prvTaskExitError+0x4c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a6:	d009      	beq.n	80085bc <prvTaskExitError+0x28>
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	e7fe      	b.n	80085ba <prvTaskExitError+0x26>
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085ce:	bf00      	nop
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0fc      	beq.n	80085d0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085d6:	bf00      	nop
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	bc80      	pop	{r7}
 80085de:	4770      	bx	lr
 80085e0:	2000011c 	.word	0x2000011c
	...

080085f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085f0:	4b07      	ldr	r3, [pc, #28]	; (8008610 <pxCurrentTCBConst2>)
 80085f2:	6819      	ldr	r1, [r3, #0]
 80085f4:	6808      	ldr	r0, [r1, #0]
 80085f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085fa:	f380 8809 	msr	PSP, r0
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f04f 0000 	mov.w	r0, #0
 8008606:	f380 8811 	msr	BASEPRI, r0
 800860a:	f04e 0e0d 	orr.w	lr, lr, #13
 800860e:	4770      	bx	lr

08008610 <pxCurrentTCBConst2>:
 8008610:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop

08008618 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008618:	4806      	ldr	r0, [pc, #24]	; (8008634 <prvPortStartFirstTask+0x1c>)
 800861a:	6800      	ldr	r0, [r0, #0]
 800861c:	6800      	ldr	r0, [r0, #0]
 800861e:	f380 8808 	msr	MSP, r0
 8008622:	b662      	cpsie	i
 8008624:	b661      	cpsie	f
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	df00      	svc	0
 8008630:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008632:	bf00      	nop
 8008634:	e000ed08 	.word	0xe000ed08

08008638 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800863e:	4b31      	ldr	r3, [pc, #196]	; (8008704 <xPortStartScheduler+0xcc>)
 8008640:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	22ff      	movs	r2, #255	; 0xff
 800864e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008660:	b2da      	uxtb	r2, r3
 8008662:	4b29      	ldr	r3, [pc, #164]	; (8008708 <xPortStartScheduler+0xd0>)
 8008664:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008666:	4b29      	ldr	r3, [pc, #164]	; (800870c <xPortStartScheduler+0xd4>)
 8008668:	2207      	movs	r2, #7
 800866a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800866c:	e009      	b.n	8008682 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800866e:	4b27      	ldr	r3, [pc, #156]	; (800870c <xPortStartScheduler+0xd4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3b01      	subs	r3, #1
 8008674:	4a25      	ldr	r2, [pc, #148]	; (800870c <xPortStartScheduler+0xd4>)
 8008676:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	b2db      	uxtb	r3, r3
 800867c:	005b      	lsls	r3, r3, #1
 800867e:	b2db      	uxtb	r3, r3
 8008680:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008682:	78fb      	ldrb	r3, [r7, #3]
 8008684:	b2db      	uxtb	r3, r3
 8008686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868a:	2b80      	cmp	r3, #128	; 0x80
 800868c:	d0ef      	beq.n	800866e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800868e:	4b1f      	ldr	r3, [pc, #124]	; (800870c <xPortStartScheduler+0xd4>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f1c3 0307 	rsb	r3, r3, #7
 8008696:	2b04      	cmp	r3, #4
 8008698:	d009      	beq.n	80086ae <xPortStartScheduler+0x76>
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	60bb      	str	r3, [r7, #8]
 80086ac:	e7fe      	b.n	80086ac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086ae:	4b17      	ldr	r3, [pc, #92]	; (800870c <xPortStartScheduler+0xd4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	021b      	lsls	r3, r3, #8
 80086b4:	4a15      	ldr	r2, [pc, #84]	; (800870c <xPortStartScheduler+0xd4>)
 80086b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086b8:	4b14      	ldr	r3, [pc, #80]	; (800870c <xPortStartScheduler+0xd4>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086c0:	4a12      	ldr	r2, [pc, #72]	; (800870c <xPortStartScheduler+0xd4>)
 80086c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086cc:	4b10      	ldr	r3, [pc, #64]	; (8008710 <xPortStartScheduler+0xd8>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a0f      	ldr	r2, [pc, #60]	; (8008710 <xPortStartScheduler+0xd8>)
 80086d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086d8:	4b0d      	ldr	r3, [pc, #52]	; (8008710 <xPortStartScheduler+0xd8>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a0c      	ldr	r2, [pc, #48]	; (8008710 <xPortStartScheduler+0xd8>)
 80086de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086e4:	f000 f8b0 	bl	8008848 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086e8:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <xPortStartScheduler+0xdc>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086ee:	f7ff ff93 	bl	8008618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086f2:	f7ff f8d7 	bl	80078a4 <vTaskSwitchContext>
	prvTaskExitError();
 80086f6:	f7ff ff4d 	bl	8008594 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	e000e400 	.word	0xe000e400
 8008708:	20000e88 	.word	0x20000e88
 800870c:	20000e8c 	.word	0x20000e8c
 8008710:	e000ed20 	.word	0xe000ed20
 8008714:	2000011c 	.word	0x2000011c

08008718 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008730:	4b0e      	ldr	r3, [pc, #56]	; (800876c <vPortEnterCritical+0x54>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	4a0d      	ldr	r2, [pc, #52]	; (800876c <vPortEnterCritical+0x54>)
 8008738:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800873a:	4b0c      	ldr	r3, [pc, #48]	; (800876c <vPortEnterCritical+0x54>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d10e      	bne.n	8008760 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008742:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <vPortEnterCritical+0x58>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b00      	cmp	r3, #0
 800874a:	d009      	beq.n	8008760 <vPortEnterCritical+0x48>
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	603b      	str	r3, [r7, #0]
 800875e:	e7fe      	b.n	800875e <vPortEnterCritical+0x46>
	}
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	bc80      	pop	{r7}
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	2000011c 	.word	0x2000011c
 8008770:	e000ed04 	.word	0xe000ed04

08008774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800877a:	4b10      	ldr	r3, [pc, #64]	; (80087bc <vPortExitCritical+0x48>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d109      	bne.n	8008796 <vPortExitCritical+0x22>
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	607b      	str	r3, [r7, #4]
 8008794:	e7fe      	b.n	8008794 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008796:	4b09      	ldr	r3, [pc, #36]	; (80087bc <vPortExitCritical+0x48>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3b01      	subs	r3, #1
 800879c:	4a07      	ldr	r2, [pc, #28]	; (80087bc <vPortExitCritical+0x48>)
 800879e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087a0:	4b06      	ldr	r3, [pc, #24]	; (80087bc <vPortExitCritical+0x48>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d104      	bne.n	80087b2 <vPortExitCritical+0x3e>
 80087a8:	2300      	movs	r3, #0
 80087aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bc80      	pop	{r7}
 80087ba:	4770      	bx	lr
 80087bc:	2000011c 	.word	0x2000011c

080087c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087c0:	f3ef 8009 	mrs	r0, PSP
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	4b0d      	ldr	r3, [pc, #52]	; (8008800 <pxCurrentTCBConst>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087d0:	6010      	str	r0, [r2, #0]
 80087d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80087d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087da:	f380 8811 	msr	BASEPRI, r0
 80087de:	f7ff f861 	bl	80078a4 <vTaskSwitchContext>
 80087e2:	f04f 0000 	mov.w	r0, #0
 80087e6:	f380 8811 	msr	BASEPRI, r0
 80087ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80087ee:	6819      	ldr	r1, [r3, #0]
 80087f0:	6808      	ldr	r0, [r1, #0]
 80087f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087f6:	f380 8809 	msr	PSP, r0
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	4770      	bx	lr

08008800 <pxCurrentTCBConst>:
 8008800:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008804:	bf00      	nop
 8008806:	bf00      	nop

08008808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008820:	f7fe ff82 	bl	8007728 <xTaskIncrementTick>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800882a:	4b06      	ldr	r3, [pc, #24]	; (8008844 <xPortSysTickHandler+0x3c>)
 800882c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	2300      	movs	r3, #0
 8008834:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800883c:	bf00      	nop
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	e000ed04 	.word	0xe000ed04

08008848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800884c:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <vPortSetupTimerInterrupt+0x30>)
 800884e:	2200      	movs	r2, #0
 8008850:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008852:	4b0a      	ldr	r3, [pc, #40]	; (800887c <vPortSetupTimerInterrupt+0x34>)
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008858:	4b09      	ldr	r3, [pc, #36]	; (8008880 <vPortSetupTimerInterrupt+0x38>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a09      	ldr	r2, [pc, #36]	; (8008884 <vPortSetupTimerInterrupt+0x3c>)
 800885e:	fba2 2303 	umull	r2, r3, r2, r3
 8008862:	099b      	lsrs	r3, r3, #6
 8008864:	4a08      	ldr	r2, [pc, #32]	; (8008888 <vPortSetupTimerInterrupt+0x40>)
 8008866:	3b01      	subs	r3, #1
 8008868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800886a:	4b03      	ldr	r3, [pc, #12]	; (8008878 <vPortSetupTimerInterrupt+0x30>)
 800886c:	2207      	movs	r2, #7
 800886e:	601a      	str	r2, [r3, #0]
}
 8008870:	bf00      	nop
 8008872:	46bd      	mov	sp, r7
 8008874:	bc80      	pop	{r7}
 8008876:	4770      	bx	lr
 8008878:	e000e010 	.word	0xe000e010
 800887c:	e000e018 	.word	0xe000e018
 8008880:	20000000 	.word	0x20000000
 8008884:	10624dd3 	.word	0x10624dd3
 8008888:	e000e014 	.word	0xe000e014

0800888c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008892:	f3ef 8305 	mrs	r3, IPSR
 8008896:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b0f      	cmp	r3, #15
 800889c:	d913      	bls.n	80088c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800889e:	4a15      	ldr	r2, [pc, #84]	; (80088f4 <vPortValidateInterruptPriority+0x68>)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088a8:	4b13      	ldr	r3, [pc, #76]	; (80088f8 <vPortValidateInterruptPriority+0x6c>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	7afa      	ldrb	r2, [r7, #11]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d209      	bcs.n	80088c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	e7fe      	b.n	80088c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088c6:	4b0d      	ldr	r3, [pc, #52]	; (80088fc <vPortValidateInterruptPriority+0x70>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088ce:	4b0c      	ldr	r3, [pc, #48]	; (8008900 <vPortValidateInterruptPriority+0x74>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d909      	bls.n	80088ea <vPortValidateInterruptPriority+0x5e>
 80088d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	603b      	str	r3, [r7, #0]
 80088e8:	e7fe      	b.n	80088e8 <vPortValidateInterruptPriority+0x5c>
	}
 80088ea:	bf00      	nop
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bc80      	pop	{r7}
 80088f2:	4770      	bx	lr
 80088f4:	e000e3f0 	.word	0xe000e3f0
 80088f8:	20000e88 	.word	0x20000e88
 80088fc:	e000ed0c 	.word	0xe000ed0c
 8008900:	20000e8c 	.word	0x20000e8c

08008904 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800890c:	2300      	movs	r3, #0
 800890e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008910:	f7fe fe52 	bl	80075b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008914:	4b57      	ldr	r3, [pc, #348]	; (8008a74 <pvPortMalloc+0x170>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800891c:	f000 f90c 	bl	8008b38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008920:	4b55      	ldr	r3, [pc, #340]	; (8008a78 <pvPortMalloc+0x174>)
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4013      	ands	r3, r2
 8008928:	2b00      	cmp	r3, #0
 800892a:	f040 808c 	bne.w	8008a46 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01c      	beq.n	800896e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008934:	2208      	movs	r2, #8
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4413      	add	r3, r2
 800893a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	2b00      	cmp	r3, #0
 8008944:	d013      	beq.n	800896e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f023 0307 	bic.w	r3, r3, #7
 800894c:	3308      	adds	r3, #8
 800894e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	2b00      	cmp	r3, #0
 8008958:	d009      	beq.n	800896e <pvPortMalloc+0x6a>
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	617b      	str	r3, [r7, #20]
 800896c:	e7fe      	b.n	800896c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d068      	beq.n	8008a46 <pvPortMalloc+0x142>
 8008974:	4b41      	ldr	r3, [pc, #260]	; (8008a7c <pvPortMalloc+0x178>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	429a      	cmp	r2, r3
 800897c:	d863      	bhi.n	8008a46 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800897e:	4b40      	ldr	r3, [pc, #256]	; (8008a80 <pvPortMalloc+0x17c>)
 8008980:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008982:	4b3f      	ldr	r3, [pc, #252]	; (8008a80 <pvPortMalloc+0x17c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008988:	e004      	b.n	8008994 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	429a      	cmp	r2, r3
 800899c:	d903      	bls.n	80089a6 <pvPortMalloc+0xa2>
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1f1      	bne.n	800898a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089a6:	4b33      	ldr	r3, [pc, #204]	; (8008a74 <pvPortMalloc+0x170>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d04a      	beq.n	8008a46 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089b0:	6a3b      	ldr	r3, [r7, #32]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2208      	movs	r2, #8
 80089b6:	4413      	add	r3, r2
 80089b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	1ad2      	subs	r2, r2, r3
 80089ca:	2308      	movs	r3, #8
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d91e      	bls.n	8008a10 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4413      	add	r3, r2
 80089d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	f003 0307 	and.w	r3, r3, #7
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d009      	beq.n	80089f8 <pvPortMalloc+0xf4>
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	613b      	str	r3, [r7, #16]
 80089f6:	e7fe      	b.n	80089f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a0a:	69b8      	ldr	r0, [r7, #24]
 8008a0c:	f000 f8f6 	bl	8008bfc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a10:	4b1a      	ldr	r3, [pc, #104]	; (8008a7c <pvPortMalloc+0x178>)
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	4a18      	ldr	r2, [pc, #96]	; (8008a7c <pvPortMalloc+0x178>)
 8008a1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a1e:	4b17      	ldr	r3, [pc, #92]	; (8008a7c <pvPortMalloc+0x178>)
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	4b18      	ldr	r3, [pc, #96]	; (8008a84 <pvPortMalloc+0x180>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d203      	bcs.n	8008a32 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a2a:	4b14      	ldr	r3, [pc, #80]	; (8008a7c <pvPortMalloc+0x178>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a15      	ldr	r2, [pc, #84]	; (8008a84 <pvPortMalloc+0x180>)
 8008a30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	4b10      	ldr	r3, [pc, #64]	; (8008a78 <pvPortMalloc+0x174>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	431a      	orrs	r2, r3
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a46:	f7fe fdc5 	bl	80075d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	f003 0307 	and.w	r3, r3, #7
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <pvPortMalloc+0x164>
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	60fb      	str	r3, [r7, #12]
 8008a66:	e7fe      	b.n	8008a66 <pvPortMalloc+0x162>
	return pvReturn;
 8008a68:	69fb      	ldr	r3, [r7, #28]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3728      	adds	r7, #40	; 0x28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20001a98 	.word	0x20001a98
 8008a78:	20001aa4 	.word	0x20001aa4
 8008a7c:	20001a9c 	.word	0x20001a9c
 8008a80:	20001a90 	.word	0x20001a90
 8008a84:	20001aa0 	.word	0x20001aa0

08008a88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d046      	beq.n	8008b28 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a9a:	2308      	movs	r3, #8
 8008a9c:	425b      	negs	r3, r3
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	4b20      	ldr	r3, [pc, #128]	; (8008b30 <vPortFree+0xa8>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d109      	bne.n	8008aca <vPortFree+0x42>
 8008ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	e7fe      	b.n	8008ac8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d009      	beq.n	8008ae6 <vPortFree+0x5e>
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	60bb      	str	r3, [r7, #8]
 8008ae4:	e7fe      	b.n	8008ae4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	4b11      	ldr	r3, [pc, #68]	; (8008b30 <vPortFree+0xa8>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4013      	ands	r3, r2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d019      	beq.n	8008b28 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d115      	bne.n	8008b28 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <vPortFree+0xa8>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	43db      	mvns	r3, r3
 8008b06:	401a      	ands	r2, r3
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b0c:	f7fe fd54 	bl	80075b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	4b07      	ldr	r3, [pc, #28]	; (8008b34 <vPortFree+0xac>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4413      	add	r3, r2
 8008b1a:	4a06      	ldr	r2, [pc, #24]	; (8008b34 <vPortFree+0xac>)
 8008b1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b1e:	6938      	ldr	r0, [r7, #16]
 8008b20:	f000 f86c 	bl	8008bfc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b24:	f7fe fd56 	bl	80075d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b28:	bf00      	nop
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	20001aa4 	.word	0x20001aa4
 8008b34:	20001a9c 	.word	0x20001a9c

08008b38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008b42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b44:	4b27      	ldr	r3, [pc, #156]	; (8008be4 <prvHeapInit+0xac>)
 8008b46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f003 0307 	and.w	r3, r3, #7
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00c      	beq.n	8008b6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	3307      	adds	r3, #7
 8008b56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0307 	bic.w	r3, r3, #7
 8008b5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	4a1f      	ldr	r2, [pc, #124]	; (8008be4 <prvHeapInit+0xac>)
 8008b68:	4413      	add	r3, r2
 8008b6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b70:	4a1d      	ldr	r2, [pc, #116]	; (8008be8 <prvHeapInit+0xb0>)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b76:	4b1c      	ldr	r3, [pc, #112]	; (8008be8 <prvHeapInit+0xb0>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	4413      	add	r3, r2
 8008b82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b84:	2208      	movs	r2, #8
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	1a9b      	subs	r3, r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 0307 	bic.w	r3, r3, #7
 8008b92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4a15      	ldr	r2, [pc, #84]	; (8008bec <prvHeapInit+0xb4>)
 8008b98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b9a:	4b14      	ldr	r3, [pc, #80]	; (8008bec <prvHeapInit+0xb4>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ba2:	4b12      	ldr	r3, [pc, #72]	; (8008bec <prvHeapInit+0xb4>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	1ad2      	subs	r2, r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bb8:	4b0c      	ldr	r3, [pc, #48]	; (8008bec <prvHeapInit+0xb4>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	4a0a      	ldr	r2, [pc, #40]	; (8008bf0 <prvHeapInit+0xb8>)
 8008bc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	4a09      	ldr	r2, [pc, #36]	; (8008bf4 <prvHeapInit+0xbc>)
 8008bce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bd0:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <prvHeapInit+0xc0>)
 8008bd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bd6:	601a      	str	r2, [r3, #0]
}
 8008bd8:	bf00      	nop
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bc80      	pop	{r7}
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	20000e90 	.word	0x20000e90
 8008be8:	20001a90 	.word	0x20001a90
 8008bec:	20001a98 	.word	0x20001a98
 8008bf0:	20001aa0 	.word	0x20001aa0
 8008bf4:	20001a9c 	.word	0x20001a9c
 8008bf8:	20001aa4 	.word	0x20001aa4

08008bfc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c04:	4b27      	ldr	r3, [pc, #156]	; (8008ca4 <prvInsertBlockIntoFreeList+0xa8>)
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	e002      	b.n	8008c10 <prvInsertBlockIntoFreeList+0x14>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d8f7      	bhi.n	8008c0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	4413      	add	r3, r2
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d108      	bne.n	8008c3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	441a      	add	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	441a      	add	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d118      	bne.n	8008c84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	4b14      	ldr	r3, [pc, #80]	; (8008ca8 <prvInsertBlockIntoFreeList+0xac>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d00d      	beq.n	8008c7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	441a      	add	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	e008      	b.n	8008c8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <prvInsertBlockIntoFreeList+0xac>)
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	e003      	b.n	8008c8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d002      	beq.n	8008c9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c9a:	bf00      	nop
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bc80      	pop	{r7}
 8008ca2:	4770      	bx	lr
 8008ca4:	20001a90 	.word	0x20001a90
 8008ca8:	20001a98 	.word	0x20001a98

08008cac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	4912      	ldr	r1, [pc, #72]	; (8008cfc <MX_USB_DEVICE_Init+0x50>)
 8008cb4:	4812      	ldr	r0, [pc, #72]	; (8008d00 <MX_USB_DEVICE_Init+0x54>)
 8008cb6:	f7fc fad2 	bl	800525e <USBD_Init>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d001      	beq.n	8008cc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cc0:	f7f7 fb96 	bl	80003f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008cc4:	490f      	ldr	r1, [pc, #60]	; (8008d04 <MX_USB_DEVICE_Init+0x58>)
 8008cc6:	480e      	ldr	r0, [pc, #56]	; (8008d00 <MX_USB_DEVICE_Init+0x54>)
 8008cc8:	f7fc faf4 	bl	80052b4 <USBD_RegisterClass>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cd2:	f7f7 fb8d 	bl	80003f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cd6:	490c      	ldr	r1, [pc, #48]	; (8008d08 <MX_USB_DEVICE_Init+0x5c>)
 8008cd8:	4809      	ldr	r0, [pc, #36]	; (8008d00 <MX_USB_DEVICE_Init+0x54>)
 8008cda:	f7fc fa25 	bl	8005128 <USBD_CDC_RegisterInterface>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ce4:	f7f7 fb84 	bl	80003f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ce8:	4805      	ldr	r0, [pc, #20]	; (8008d00 <MX_USB_DEVICE_Init+0x54>)
 8008cea:	f7fc fafc 	bl	80052e6 <USBD_Start>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cf4:	f7f7 fb7c 	bl	80003f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cf8:	bf00      	nop
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	20000130 	.word	0x20000130
 8008d00:	20001d28 	.word	0x20001d28
 8008d04:	20000018 	.word	0x20000018
 8008d08:	20000120 	.word	0x20000120

08008d0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d10:	2200      	movs	r2, #0
 8008d12:	4905      	ldr	r1, [pc, #20]	; (8008d28 <CDC_Init_FS+0x1c>)
 8008d14:	4805      	ldr	r0, [pc, #20]	; (8008d2c <CDC_Init_FS+0x20>)
 8008d16:	f7fc fa1d 	bl	8005154 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d1a:	4905      	ldr	r1, [pc, #20]	; (8008d30 <CDC_Init_FS+0x24>)
 8008d1c:	4803      	ldr	r0, [pc, #12]	; (8008d2c <CDC_Init_FS+0x20>)
 8008d1e:	f7fc fa32 	bl	8005186 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	2000202c 	.word	0x2000202c
 8008d2c:	20001d28 	.word	0x20001d28
 8008d30:	20001fec 	.word	0x20001fec

08008d34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d34:	b480      	push	{r7}
 8008d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bc80      	pop	{r7}
 8008d40:	4770      	bx	lr
	...

08008d44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	6039      	str	r1, [r7, #0]
 8008d4e:	71fb      	strb	r3, [r7, #7]
 8008d50:	4613      	mov	r3, r2
 8008d52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d54:	79fb      	ldrb	r3, [r7, #7]
 8008d56:	2b23      	cmp	r3, #35	; 0x23
 8008d58:	d84a      	bhi.n	8008df0 <CDC_Control_FS+0xac>
 8008d5a:	a201      	add	r2, pc, #4	; (adr r2, 8008d60 <CDC_Control_FS+0x1c>)
 8008d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d60:	08008df1 	.word	0x08008df1
 8008d64:	08008df1 	.word	0x08008df1
 8008d68:	08008df1 	.word	0x08008df1
 8008d6c:	08008df1 	.word	0x08008df1
 8008d70:	08008df1 	.word	0x08008df1
 8008d74:	08008df1 	.word	0x08008df1
 8008d78:	08008df1 	.word	0x08008df1
 8008d7c:	08008df1 	.word	0x08008df1
 8008d80:	08008df1 	.word	0x08008df1
 8008d84:	08008df1 	.word	0x08008df1
 8008d88:	08008df1 	.word	0x08008df1
 8008d8c:	08008df1 	.word	0x08008df1
 8008d90:	08008df1 	.word	0x08008df1
 8008d94:	08008df1 	.word	0x08008df1
 8008d98:	08008df1 	.word	0x08008df1
 8008d9c:	08008df1 	.word	0x08008df1
 8008da0:	08008df1 	.word	0x08008df1
 8008da4:	08008df1 	.word	0x08008df1
 8008da8:	08008df1 	.word	0x08008df1
 8008dac:	08008df1 	.word	0x08008df1
 8008db0:	08008df1 	.word	0x08008df1
 8008db4:	08008df1 	.word	0x08008df1
 8008db8:	08008df1 	.word	0x08008df1
 8008dbc:	08008df1 	.word	0x08008df1
 8008dc0:	08008df1 	.word	0x08008df1
 8008dc4:	08008df1 	.word	0x08008df1
 8008dc8:	08008df1 	.word	0x08008df1
 8008dcc:	08008df1 	.word	0x08008df1
 8008dd0:	08008df1 	.word	0x08008df1
 8008dd4:	08008df1 	.word	0x08008df1
 8008dd8:	08008df1 	.word	0x08008df1
 8008ddc:	08008df1 	.word	0x08008df1
 8008de0:	08008df1 	.word	0x08008df1
 8008de4:	08008df1 	.word	0x08008df1
 8008de8:	08008df1 	.word	0x08008df1
 8008dec:	08008df1 	.word	0x08008df1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008df0:	bf00      	nop
  }

  return (USBD_OK);
 8008df2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bc80      	pop	{r7}
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop

08008e00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	4805      	ldr	r0, [pc, #20]	; (8008e24 <CDC_Receive_FS+0x24>)
 8008e0e:	f7fc f9ba 	bl	8005186 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e12:	4804      	ldr	r0, [pc, #16]	; (8008e24 <CDC_Receive_FS+0x24>)
 8008e14:	f7fc f9f9 	bl	800520a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20001d28 	.word	0x20001d28

08008e28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e38:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <CDC_Transmit_FS+0x48>)
 8008e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e00b      	b.n	8008e66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e4e:	887b      	ldrh	r3, [r7, #2]
 8008e50:	461a      	mov	r2, r3
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	4806      	ldr	r0, [pc, #24]	; (8008e70 <CDC_Transmit_FS+0x48>)
 8008e56:	f7fc f97d 	bl	8005154 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e5a:	4805      	ldr	r0, [pc, #20]	; (8008e70 <CDC_Transmit_FS+0x48>)
 8008e5c:	f7fc f9a6 	bl	80051ac <USBD_CDC_TransmitPacket>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20001d28 	.word	0x20001d28

08008e74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	2212      	movs	r2, #18
 8008e84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e86:	4b03      	ldr	r3, [pc, #12]	; (8008e94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bc80      	pop	{r7}
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	2000014c 	.word	0x2000014c

08008e98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	6039      	str	r1, [r7, #0]
 8008ea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2204      	movs	r2, #4
 8008ea8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008eaa:	4b03      	ldr	r3, [pc, #12]	; (8008eb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	20000160 	.word	0x20000160

08008ebc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	6039      	str	r1, [r7, #0]
 8008ec6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ec8:	79fb      	ldrb	r3, [r7, #7]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d105      	bne.n	8008eda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	4907      	ldr	r1, [pc, #28]	; (8008ef0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ed2:	4808      	ldr	r0, [pc, #32]	; (8008ef4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ed4:	f7fd f973 	bl	80061be <USBD_GetString>
 8008ed8:	e004      	b.n	8008ee4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	4904      	ldr	r1, [pc, #16]	; (8008ef0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ede:	4805      	ldr	r0, [pc, #20]	; (8008ef4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ee0:	f7fd f96d 	bl	80061be <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ee4:	4b02      	ldr	r3, [pc, #8]	; (8008ef0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	2000206c 	.word	0x2000206c
 8008ef4:	080096c8 	.word	0x080096c8

08008ef8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	6039      	str	r1, [r7, #0]
 8008f02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	4904      	ldr	r1, [pc, #16]	; (8008f18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f08:	4804      	ldr	r0, [pc, #16]	; (8008f1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f0a:	f7fd f958 	bl	80061be <USBD_GetString>
  return USBD_StrDesc;
 8008f0e:	4b02      	ldr	r3, [pc, #8]	; (8008f18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	2000206c 	.word	0x2000206c
 8008f1c:	080096e0 	.word	0x080096e0

08008f20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4603      	mov	r3, r0
 8008f28:	6039      	str	r1, [r7, #0]
 8008f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	221a      	movs	r2, #26
 8008f30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f32:	f000 f843 	bl	8008fbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f36:	4b02      	ldr	r3, [pc, #8]	; (8008f40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	20000164 	.word	0x20000164

08008f44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d105      	bne.n	8008f62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	4907      	ldr	r1, [pc, #28]	; (8008f78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f5a:	4808      	ldr	r0, [pc, #32]	; (8008f7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f5c:	f7fd f92f 	bl	80061be <USBD_GetString>
 8008f60:	e004      	b.n	8008f6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	4904      	ldr	r1, [pc, #16]	; (8008f78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f66:	4805      	ldr	r0, [pc, #20]	; (8008f7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f68:	f7fd f929 	bl	80061be <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f6c:	4b02      	ldr	r3, [pc, #8]	; (8008f78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	2000206c 	.word	0x2000206c
 8008f7c:	080096f4 	.word	0x080096f4

08008f80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	4603      	mov	r3, r0
 8008f88:	6039      	str	r1, [r7, #0]
 8008f8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d105      	bne.n	8008f9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	4907      	ldr	r1, [pc, #28]	; (8008fb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f96:	4808      	ldr	r0, [pc, #32]	; (8008fb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f98:	f7fd f911 	bl	80061be <USBD_GetString>
 8008f9c:	e004      	b.n	8008fa8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	4904      	ldr	r1, [pc, #16]	; (8008fb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fa2:	4805      	ldr	r0, [pc, #20]	; (8008fb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fa4:	f7fd f90b 	bl	80061be <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fa8:	4b02      	ldr	r3, [pc, #8]	; (8008fb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	2000206c 	.word	0x2000206c
 8008fb8:	08009700 	.word	0x08009700

08008fbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008fc2:	4b0f      	ldr	r3, [pc, #60]	; (8009000 <Get_SerialNum+0x44>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008fc8:	4b0e      	ldr	r3, [pc, #56]	; (8009004 <Get_SerialNum+0x48>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008fce:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <Get_SerialNum+0x4c>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4413      	add	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d009      	beq.n	8008ff6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008fe2:	2208      	movs	r2, #8
 8008fe4:	4909      	ldr	r1, [pc, #36]	; (800900c <Get_SerialNum+0x50>)
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f000 f814 	bl	8009014 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fec:	2204      	movs	r2, #4
 8008fee:	4908      	ldr	r1, [pc, #32]	; (8009010 <Get_SerialNum+0x54>)
 8008ff0:	68b8      	ldr	r0, [r7, #8]
 8008ff2:	f000 f80f 	bl	8009014 <IntToUnicode>
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	1ffff7e8 	.word	0x1ffff7e8
 8009004:	1ffff7ec 	.word	0x1ffff7ec
 8009008:	1ffff7f0 	.word	0x1ffff7f0
 800900c:	20000166 	.word	0x20000166
 8009010:	20000176 	.word	0x20000176

08009014 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	4613      	mov	r3, r2
 8009020:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009026:	2300      	movs	r3, #0
 8009028:	75fb      	strb	r3, [r7, #23]
 800902a:	e027      	b.n	800907c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	0f1b      	lsrs	r3, r3, #28
 8009030:	2b09      	cmp	r3, #9
 8009032:	d80b      	bhi.n	800904c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	0f1b      	lsrs	r3, r3, #28
 8009038:	b2da      	uxtb	r2, r3
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	4619      	mov	r1, r3
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	440b      	add	r3, r1
 8009044:	3230      	adds	r2, #48	; 0x30
 8009046:	b2d2      	uxtb	r2, r2
 8009048:	701a      	strb	r2, [r3, #0]
 800904a:	e00a      	b.n	8009062 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	0f1b      	lsrs	r3, r3, #28
 8009050:	b2da      	uxtb	r2, r3
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	005b      	lsls	r3, r3, #1
 8009056:	4619      	mov	r1, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	440b      	add	r3, r1
 800905c:	3237      	adds	r2, #55	; 0x37
 800905e:	b2d2      	uxtb	r2, r2
 8009060:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009068:	7dfb      	ldrb	r3, [r7, #23]
 800906a:	005b      	lsls	r3, r3, #1
 800906c:	3301      	adds	r3, #1
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	4413      	add	r3, r2
 8009072:	2200      	movs	r2, #0
 8009074:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	3301      	adds	r3, #1
 800907a:	75fb      	strb	r3, [r7, #23]
 800907c:	7dfa      	ldrb	r2, [r7, #23]
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	429a      	cmp	r2, r3
 8009082:	d3d3      	bcc.n	800902c <IntToUnicode+0x18>
  }
}
 8009084:	bf00      	nop
 8009086:	371c      	adds	r7, #28
 8009088:	46bd      	mov	sp, r7
 800908a:	bc80      	pop	{r7}
 800908c:	4770      	bx	lr
	...

08009090 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a0d      	ldr	r2, [pc, #52]	; (80090d4 <HAL_PCD_MspInit+0x44>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d113      	bne.n	80090ca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80090a2:	4b0d      	ldr	r3, [pc, #52]	; (80090d8 <HAL_PCD_MspInit+0x48>)
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	4a0c      	ldr	r2, [pc, #48]	; (80090d8 <HAL_PCD_MspInit+0x48>)
 80090a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090ac:	61d3      	str	r3, [r2, #28]
 80090ae:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <HAL_PCD_MspInit+0x48>)
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80090ba:	2200      	movs	r2, #0
 80090bc:	2105      	movs	r1, #5
 80090be:	2014      	movs	r0, #20
 80090c0:	f7f7 fb63 	bl	800078a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80090c4:	2014      	movs	r0, #20
 80090c6:	f7f7 fb7c 	bl	80007c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80090ca:	bf00      	nop
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	40005c00 	.word	0x40005c00
 80090d8:	40021000 	.word	0x40021000

080090dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80090f0:	4619      	mov	r1, r3
 80090f2:	4610      	mov	r0, r2
 80090f4:	f7fc f93f 	bl	8005376 <USBD_LL_SetupStage>
}
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009112:	78fa      	ldrb	r2, [r7, #3]
 8009114:	6879      	ldr	r1, [r7, #4]
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	00db      	lsls	r3, r3, #3
 800911e:	440b      	add	r3, r1
 8009120:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	78fb      	ldrb	r3, [r7, #3]
 8009128:	4619      	mov	r1, r3
 800912a:	f7fc f96f 	bl	800540c <USBD_LL_DataOutStage>
}
 800912e:	bf00      	nop
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009148:	78fa      	ldrb	r2, [r7, #3]
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	4613      	mov	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	440b      	add	r3, r1
 8009156:	333c      	adds	r3, #60	; 0x3c
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	4619      	mov	r1, r3
 800915e:	f7fc f9c6 	bl	80054ee <USBD_LL_DataInStage>
}
 8009162:	bf00      	nop
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009178:	4618      	mov	r0, r3
 800917a:	f7fc fad6 	bl	800572a <USBD_LL_SOF>
}
 800917e:	bf00      	nop
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800918e:	2301      	movs	r3, #1
 8009190:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	2b02      	cmp	r3, #2
 8009198:	d001      	beq.n	800919e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800919a:	f7f7 f929 	bl	80003f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091a4:	7bfa      	ldrb	r2, [r7, #15]
 80091a6:	4611      	mov	r1, r2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7fc fa86 	bl	80056ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fc fa3f 	bl	8005638 <USBD_LL_Reset>
}
 80091ba:	bf00      	nop
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
	...

080091c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fc fa80 	bl	80056d8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091e0:	4b04      	ldr	r3, [pc, #16]	; (80091f4 <HAL_PCD_SuspendCallback+0x30>)
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	4a03      	ldr	r2, [pc, #12]	; (80091f4 <HAL_PCD_SuspendCallback+0x30>)
 80091e6:	f043 0306 	orr.w	r3, r3, #6
 80091ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	e000ed00 	.word	0xe000ed00

080091f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009206:	4618      	mov	r0, r3
 8009208:	f7fc fa7a 	bl	8005700 <USBD_LL_Resume>
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800921c:	4a28      	ldr	r2, [pc, #160]	; (80092c0 <USBD_LL_Init+0xac>)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a26      	ldr	r2, [pc, #152]	; (80092c0 <USBD_LL_Init+0xac>)
 8009228:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800922c:	4b24      	ldr	r3, [pc, #144]	; (80092c0 <USBD_LL_Init+0xac>)
 800922e:	4a25      	ldr	r2, [pc, #148]	; (80092c4 <USBD_LL_Init+0xb0>)
 8009230:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009232:	4b23      	ldr	r3, [pc, #140]	; (80092c0 <USBD_LL_Init+0xac>)
 8009234:	2208      	movs	r2, #8
 8009236:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009238:	4b21      	ldr	r3, [pc, #132]	; (80092c0 <USBD_LL_Init+0xac>)
 800923a:	2202      	movs	r2, #2
 800923c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800923e:	4b20      	ldr	r3, [pc, #128]	; (80092c0 <USBD_LL_Init+0xac>)
 8009240:	2200      	movs	r2, #0
 8009242:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009244:	4b1e      	ldr	r3, [pc, #120]	; (80092c0 <USBD_LL_Init+0xac>)
 8009246:	2200      	movs	r2, #0
 8009248:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800924a:	4b1d      	ldr	r3, [pc, #116]	; (80092c0 <USBD_LL_Init+0xac>)
 800924c:	2200      	movs	r2, #0
 800924e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009250:	481b      	ldr	r0, [pc, #108]	; (80092c0 <USBD_LL_Init+0xac>)
 8009252:	f7f7 fc5c 	bl	8000b0e <HAL_PCD_Init>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800925c:	f7f7 f8c8 	bl	80003f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009266:	2318      	movs	r3, #24
 8009268:	2200      	movs	r2, #0
 800926a:	2100      	movs	r1, #0
 800926c:	f7f8 ff90 	bl	8002190 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009276:	2358      	movs	r3, #88	; 0x58
 8009278:	2200      	movs	r2, #0
 800927a:	2180      	movs	r1, #128	; 0x80
 800927c:	f7f8 ff88 	bl	8002190 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009286:	23c0      	movs	r3, #192	; 0xc0
 8009288:	2200      	movs	r2, #0
 800928a:	2181      	movs	r1, #129	; 0x81
 800928c:	f7f8 ff80 	bl	8002190 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009296:	f44f 7388 	mov.w	r3, #272	; 0x110
 800929a:	2200      	movs	r2, #0
 800929c:	2101      	movs	r1, #1
 800929e:	f7f8 ff77 	bl	8002190 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092ac:	2200      	movs	r2, #0
 80092ae:	2182      	movs	r1, #130	; 0x82
 80092b0:	f7f8 ff6e 	bl	8002190 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	2000226c 	.word	0x2000226c
 80092c4:	40005c00 	.word	0x40005c00

080092c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092de:	4618      	mov	r0, r3
 80092e0:	f7f7 fd20 	bl	8000d24 <HAL_PCD_Start>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 f94e 	bl	800958c <USBD_Get_USB_Status>
 80092f0:	4603      	mov	r3, r0
 80092f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	4608      	mov	r0, r1
 8009308:	4611      	mov	r1, r2
 800930a:	461a      	mov	r2, r3
 800930c:	4603      	mov	r3, r0
 800930e:	70fb      	strb	r3, [r7, #3]
 8009310:	460b      	mov	r3, r1
 8009312:	70bb      	strb	r3, [r7, #2]
 8009314:	4613      	mov	r3, r2
 8009316:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009326:	78bb      	ldrb	r3, [r7, #2]
 8009328:	883a      	ldrh	r2, [r7, #0]
 800932a:	78f9      	ldrb	r1, [r7, #3]
 800932c:	f7f7 fe9a 	bl	8001064 <HAL_PCD_EP_Open>
 8009330:	4603      	mov	r3, r0
 8009332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009334:	7bfb      	ldrb	r3, [r7, #15]
 8009336:	4618      	mov	r0, r3
 8009338:	f000 f928 	bl	800958c <USBD_Get_USB_Status>
 800933c:	4603      	mov	r3, r0
 800933e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009340:	7bbb      	ldrb	r3, [r7, #14]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	460b      	mov	r3, r1
 8009354:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009364:	78fa      	ldrb	r2, [r7, #3]
 8009366:	4611      	mov	r1, r2
 8009368:	4618      	mov	r0, r3
 800936a:	f7f7 fee1 	bl	8001130 <HAL_PCD_EP_Close>
 800936e:	4603      	mov	r3, r0
 8009370:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	4618      	mov	r0, r3
 8009376:	f000 f909 	bl	800958c <USBD_Get_USB_Status>
 800937a:	4603      	mov	r3, r0
 800937c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800937e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093a2:	78fa      	ldrb	r2, [r7, #3]
 80093a4:	4611      	mov	r1, r2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7f7 ffa1 	bl	80012ee <HAL_PCD_EP_SetStall>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 f8ea 	bl	800958c <USBD_Get_USB_Status>
 80093b8:	4603      	mov	r3, r0
 80093ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b084      	sub	sp, #16
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	460b      	mov	r3, r1
 80093d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093e0:	78fa      	ldrb	r2, [r7, #3]
 80093e2:	4611      	mov	r1, r2
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7f7 ffe2 	bl	80013ae <HAL_PCD_EP_ClrStall>
 80093ea:	4603      	mov	r3, r0
 80093ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 f8cb 	bl	800958c <USBD_Get_USB_Status>
 80093f6:	4603      	mov	r3, r0
 80093f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009416:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800941c:	2b00      	cmp	r3, #0
 800941e:	da0c      	bge.n	800943a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009426:	68f9      	ldr	r1, [r7, #12]
 8009428:	1c5a      	adds	r2, r3, #1
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	00db      	lsls	r3, r3, #3
 8009432:	440b      	add	r3, r1
 8009434:	3302      	adds	r3, #2
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	e00b      	b.n	8009452 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800943a:	78fb      	ldrb	r3, [r7, #3]
 800943c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009440:	68f9      	ldr	r1, [r7, #12]
 8009442:	4613      	mov	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	00db      	lsls	r3, r3, #3
 800944a:	440b      	add	r3, r1
 800944c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009450:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	bc80      	pop	{r7}
 800945a:	4770      	bx	lr

0800945c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009476:	78fa      	ldrb	r2, [r7, #3]
 8009478:	4611      	mov	r1, r2
 800947a:	4618      	mov	r0, r3
 800947c:	f7f7 fdcd 	bl	800101a <HAL_PCD_SetAddress>
 8009480:	4603      	mov	r3, r0
 8009482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f880 	bl	800958c <USBD_Get_USB_Status>
 800948c:	4603      	mov	r3, r0
 800948e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009490:	7bbb      	ldrb	r3, [r7, #14]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b086      	sub	sp, #24
 800949e:	af00      	add	r7, sp, #0
 80094a0:	60f8      	str	r0, [r7, #12]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	461a      	mov	r2, r3
 80094a6:	460b      	mov	r3, r1
 80094a8:	72fb      	strb	r3, [r7, #11]
 80094aa:	4613      	mov	r3, r2
 80094ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094bc:	893b      	ldrh	r3, [r7, #8]
 80094be:	7af9      	ldrb	r1, [r7, #11]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	f7f7 fed1 	bl	8001268 <HAL_PCD_EP_Transmit>
 80094c6:	4603      	mov	r3, r0
 80094c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f000 f85d 	bl	800958c <USBD_Get_USB_Status>
 80094d2:	4603      	mov	r3, r0
 80094d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	607a      	str	r2, [r7, #4]
 80094ea:	461a      	mov	r2, r3
 80094ec:	460b      	mov	r3, r1
 80094ee:	72fb      	strb	r3, [r7, #11]
 80094f0:	4613      	mov	r3, r2
 80094f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009502:	893b      	ldrh	r3, [r7, #8]
 8009504:	7af9      	ldrb	r1, [r7, #11]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	f7f7 fe5a 	bl	80011c0 <HAL_PCD_EP_Receive>
 800950c:	4603      	mov	r3, r0
 800950e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009510:	7dfb      	ldrb	r3, [r7, #23]
 8009512:	4618      	mov	r0, r3
 8009514:	f000 f83a 	bl	800958c <USBD_Get_USB_Status>
 8009518:	4603      	mov	r3, r0
 800951a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800951c:	7dbb      	ldrb	r3, [r7, #22]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009538:	78fa      	ldrb	r2, [r7, #3]
 800953a:	4611      	mov	r1, r2
 800953c:	4618      	mov	r0, r3
 800953e:	f7f7 fe7c 	bl	800123a <HAL_PCD_EP_GetRxCount>
 8009542:	4603      	mov	r3, r0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009554:	4b02      	ldr	r3, [pc, #8]	; (8009560 <USBD_static_malloc+0x14>)
}
 8009556:	4618      	mov	r0, r3
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	bc80      	pop	{r7}
 800955e:	4770      	bx	lr
 8009560:	20001aa8 	.word	0x20001aa8

08009564 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]

}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	bc80      	pop	{r7}
 8009574:	4770      	bx	lr

08009576 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009576:	b480      	push	{r7}
 8009578:	b083      	sub	sp, #12
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	460b      	mov	r3, r1
 8009580:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	bc80      	pop	{r7}
 800958a:	4770      	bx	lr

0800958c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800959a:	79fb      	ldrb	r3, [r7, #7]
 800959c:	2b03      	cmp	r3, #3
 800959e:	d817      	bhi.n	80095d0 <USBD_Get_USB_Status+0x44>
 80095a0:	a201      	add	r2, pc, #4	; (adr r2, 80095a8 <USBD_Get_USB_Status+0x1c>)
 80095a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a6:	bf00      	nop
 80095a8:	080095b9 	.word	0x080095b9
 80095ac:	080095bf 	.word	0x080095bf
 80095b0:	080095c5 	.word	0x080095c5
 80095b4:	080095cb 	.word	0x080095cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73fb      	strb	r3, [r7, #15]
    break;
 80095bc:	e00b      	b.n	80095d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095be:	2302      	movs	r3, #2
 80095c0:	73fb      	strb	r3, [r7, #15]
    break;
 80095c2:	e008      	b.n	80095d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095c4:	2301      	movs	r3, #1
 80095c6:	73fb      	strb	r3, [r7, #15]
    break;
 80095c8:	e005      	b.n	80095d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095ca:	2302      	movs	r3, #2
 80095cc:	73fb      	strb	r3, [r7, #15]
    break;
 80095ce:	e002      	b.n	80095d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80095d0:	2302      	movs	r3, #2
 80095d2:	73fb      	strb	r3, [r7, #15]
    break;
 80095d4:	bf00      	nop
  }
  return usb_status;
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	bc80      	pop	{r7}
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop

080095e4 <__libc_init_array>:
 80095e4:	b570      	push	{r4, r5, r6, lr}
 80095e6:	2500      	movs	r5, #0
 80095e8:	4e0c      	ldr	r6, [pc, #48]	; (800961c <__libc_init_array+0x38>)
 80095ea:	4c0d      	ldr	r4, [pc, #52]	; (8009620 <__libc_init_array+0x3c>)
 80095ec:	1ba4      	subs	r4, r4, r6
 80095ee:	10a4      	asrs	r4, r4, #2
 80095f0:	42a5      	cmp	r5, r4
 80095f2:	d109      	bne.n	8009608 <__libc_init_array+0x24>
 80095f4:	f000 f82e 	bl	8009654 <_init>
 80095f8:	2500      	movs	r5, #0
 80095fa:	4e0a      	ldr	r6, [pc, #40]	; (8009624 <__libc_init_array+0x40>)
 80095fc:	4c0a      	ldr	r4, [pc, #40]	; (8009628 <__libc_init_array+0x44>)
 80095fe:	1ba4      	subs	r4, r4, r6
 8009600:	10a4      	asrs	r4, r4, #2
 8009602:	42a5      	cmp	r5, r4
 8009604:	d105      	bne.n	8009612 <__libc_init_array+0x2e>
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800960c:	4798      	blx	r3
 800960e:	3501      	adds	r5, #1
 8009610:	e7ee      	b.n	80095f0 <__libc_init_array+0xc>
 8009612:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009616:	4798      	blx	r3
 8009618:	3501      	adds	r5, #1
 800961a:	e7f2      	b.n	8009602 <__libc_init_array+0x1e>
 800961c:	08009744 	.word	0x08009744
 8009620:	08009744 	.word	0x08009744
 8009624:	08009744 	.word	0x08009744
 8009628:	08009748 	.word	0x08009748

0800962c <memcpy>:
 800962c:	b510      	push	{r4, lr}
 800962e:	1e43      	subs	r3, r0, #1
 8009630:	440a      	add	r2, r1
 8009632:	4291      	cmp	r1, r2
 8009634:	d100      	bne.n	8009638 <memcpy+0xc>
 8009636:	bd10      	pop	{r4, pc}
 8009638:	f811 4b01 	ldrb.w	r4, [r1], #1
 800963c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009640:	e7f7      	b.n	8009632 <memcpy+0x6>

08009642 <memset>:
 8009642:	4603      	mov	r3, r0
 8009644:	4402      	add	r2, r0
 8009646:	4293      	cmp	r3, r2
 8009648:	d100      	bne.n	800964c <memset+0xa>
 800964a:	4770      	bx	lr
 800964c:	f803 1b01 	strb.w	r1, [r3], #1
 8009650:	e7f9      	b.n	8009646 <memset+0x4>
	...

08009654 <_init>:
 8009654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009656:	bf00      	nop
 8009658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800965a:	bc08      	pop	{r3}
 800965c:	469e      	mov	lr, r3
 800965e:	4770      	bx	lr

08009660 <_fini>:
 8009660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009662:	bf00      	nop
 8009664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009666:	bc08      	pop	{r3}
 8009668:	469e      	mov	lr, r3
 800966a:	4770      	bx	lr
