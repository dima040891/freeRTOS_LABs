
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009808  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08009918  08009918  00019918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa8  08009aa8  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009aa8  08009aa8  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009aa8  08009aa8  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aa8  08009aa8  00019aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009aac  08009aac  00019aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000385c  20000180  08009c30  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039dc  08009c30  000239dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3eb  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004085  00000000  00000000  0003e594  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001260  00000000  00000000  00042620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001078  00000000  00000000  00043880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ba98  00000000  00000000  000448f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013d6b  00000000  00000000  00060390  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e5c6  00000000  00000000  000740fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001026c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b8  00000000  00000000  0010273c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08009900 	.word	0x08009900

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08009900 	.word	0x08009900

08000150 <PCB_Init>:

#include "PCB_BluePill.h"
#include "main.h"

void PCB_Init()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000154:	2201      	movs	r2, #1
 8000156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015a:	4802      	ldr	r0, [pc, #8]	; (8000164 <PCB_Init+0x14>)
 800015c:	f000 fd0e 	bl	8000b7c <HAL_GPIO_WritePin>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	40011000 	.word	0x40011000

08000168 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	4802      	ldr	r0, [pc, #8]	; (800017c <PCB_LED_Toggle+0x14>)
 8000172:	f000 fd1b 	bl	8000bac <HAL_GPIO_TogglePin>
}
 8000176:	bf00      	nop
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	40011000 	.word	0x40011000

08000180 <freeRTOS_Tasks_Ini>:


// Внимание! QueueHandle_t является более современным аналогом xQueueHandle. Разобраться с этим позже

void freeRTOS_Tasks_Ini (void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8
	xQueue1 = xQueueCreate(4, sizeof(char)); // Создание очереди из 4 элементов размерностью 8 бит
 8000186:	2200      	movs	r2, #0
 8000188:	2101      	movs	r1, #1
 800018a:	2004      	movs	r0, #4
 800018c:	f006 fc56 	bl	8006a3c <xQueueGenericCreate>
 8000190:	4602      	mov	r2, r0
 8000192:	4b1e      	ldr	r3, [pc, #120]	; (800020c <freeRTOS_Tasks_Ini+0x8c>)
 8000194:	601a      	str	r2, [r3, #0]

	xTaskCreate(vTask_USB_Init, "Task_USB_Init", 100, NULL, 2, NULL); // З-а сброса лнии D+ после каждого запуска МК. Необхадимо для определения устройсва на шине USB.
 8000196:	2300      	movs	r3, #0
 8000198:	9301      	str	r3, [sp, #4]
 800019a:	2302      	movs	r3, #2
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2300      	movs	r3, #0
 80001a0:	2264      	movs	r2, #100	; 0x64
 80001a2:	491b      	ldr	r1, [pc, #108]	; (8000210 <freeRTOS_Tasks_Ini+0x90>)
 80001a4:	481b      	ldr	r0, [pc, #108]	; (8000214 <freeRTOS_Tasks_Ini+0x94>)
 80001a6:	f007 f8d8 	bl	800735a <xTaskCreate>
	//xTaskCreate(vTask_Transmit_VCP, "Task_Transmit_VCP", 120, NULL, 1, NULL); // З-а переиодческой отправки сообщения в VCP. Задача должна быть запущена после удаления vTask_USB_Init.
	//xTaskCreate(vTask_Transmit_VCP_2, "Task_Transmit_VCP_2", 120, (void*) USB_Tx_Buf_Task2, 1, NULL); // Вывод второго тестового сообщения
	xTaskCreate(vTask_Sync_Recieve_VCP, "Task_Sync_Recieve_VCP", 120, NULL, 2, NULL);
 80001aa:	2300      	movs	r3, #0
 80001ac:	9301      	str	r3, [sp, #4]
 80001ae:	2302      	movs	r3, #2
 80001b0:	9300      	str	r3, [sp, #0]
 80001b2:	2300      	movs	r3, #0
 80001b4:	2278      	movs	r2, #120	; 0x78
 80001b6:	4918      	ldr	r1, [pc, #96]	; (8000218 <freeRTOS_Tasks_Ini+0x98>)
 80001b8:	4818      	ldr	r0, [pc, #96]	; (800021c <freeRTOS_Tasks_Ini+0x9c>)
 80001ba:	f007 f8ce 	bl	800735a <xTaskCreate>

	Delay_LED = 500;
 80001be:	4b18      	ldr	r3, [pc, #96]	; (8000220 <freeRTOS_Tasks_Ini+0xa0>)
 80001c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001c4:	801a      	strh	r2, [r3, #0]
	pDelay_LED = &Delay_LED;
 80001c6:	4b17      	ldr	r3, [pc, #92]	; (8000224 <freeRTOS_Tasks_Ini+0xa4>)
 80001c8:	4a15      	ldr	r2, [pc, #84]	; (8000220 <freeRTOS_Tasks_Ini+0xa0>)
 80001ca:	601a      	str	r2, [r3, #0]


	if(xQueue1 != NULL) // Если очередь создалась успешно (хватило место в куче), то создать задачи отправки получения данных
 80001cc:	4b0f      	ldr	r3, [pc, #60]	; (800020c <freeRTOS_Tasks_Ini+0x8c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d015      	beq.n	8000200 <freeRTOS_Tasks_Ini+0x80>
	{
		//xTaskCreate(vTask_Queue_Data_Send, "Task_Queue_Data_Send", 90, NULL, 1, NULL); // З-а отправки данных в очередь
		//xTaskCreate(vTask_Queue_Data_Recieve, "Task_Queue_Data_Recieve", 90, NULL, 1, NULL); // З-а которая получает данные из очереди и отправляет тестовое сообщение.

		if (xTaskCreate(vTask_PCB_LED_Blink, "Task_PCB_LED_Blink", 40, (void*) pDelay_LED, 1, NULL) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY) // З-а мигания LED
 80001d4:	4b13      	ldr	r3, [pc, #76]	; (8000224 <freeRTOS_Tasks_Ini+0xa4>)
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	2300      	movs	r3, #0
 80001da:	9301      	str	r3, [sp, #4]
 80001dc:	2301      	movs	r3, #1
 80001de:	9300      	str	r3, [sp, #0]
 80001e0:	4613      	mov	r3, r2
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	4910      	ldr	r1, [pc, #64]	; (8000228 <freeRTOS_Tasks_Ini+0xa8>)
 80001e6:	4811      	ldr	r0, [pc, #68]	; (800022c <freeRTOS_Tasks_Ini+0xac>)
 80001e8:	f007 f8b7 	bl	800735a <xTaskCreate>
 80001ec:	4603      	mov	r3, r0
 80001ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001f2:	d105      	bne.n	8000200 <freeRTOS_Tasks_Ini+0x80>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001fa:	480d      	ldr	r0, [pc, #52]	; (8000230 <freeRTOS_Tasks_Ini+0xb0>)
 80001fc:	f000 fcbe 	bl	8000b7c <HAL_GPIO_WritePin>
	{
		//Если все хорошо то ветка else не исполнится, что означает что очередь создана.

	}

	osKernelStart();
 8000200:	f006 f954 	bl	80064ac <osKernelStart>

}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	2000311c 	.word	0x2000311c
 8000210:	08009928 	.word	0x08009928
 8000214:	08000285 	.word	0x08000285
 8000218:	08009938 	.word	0x08009938
 800021c:	08000235 	.word	0x08000235
 8000220:	20003160 	.word	0x20003160
 8000224:	20003118 	.word	0x20003118
 8000228:	08009950 	.word	0x08009950
 800022c:	080002e5 	.word	0x080002e5
 8000230:	40011000 	.word	0x40011000

08000234 <vTask_Sync_Recieve_VCP>:

void vTask_Sync_Recieve_VCP(void *pvParameters)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		vTaskDelay(1000 / portTICK_RATE_MS );
 800023c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000240:	f007 fa3e 	bl	80076c0 <vTaskDelay>

		while (CDC_Transmit_FS((unsigned char*)"Data received from VCP = ", strlen("Data received from VCP = ")));
 8000244:	bf00      	nop
 8000246:	2119      	movs	r1, #25
 8000248:	480b      	ldr	r0, [pc, #44]	; (8000278 <vTask_Sync_Recieve_VCP+0x44>)
 800024a:	f008 ff2f 	bl	80090ac <CDC_Transmit_FS>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d1f8      	bne.n	8000246 <vTask_Sync_Recieve_VCP+0x12>
		while (CDC_Transmit_FS((unsigned char*) &VCP_Rx_Buf, 1));
 8000254:	bf00      	nop
 8000256:	2101      	movs	r1, #1
 8000258:	4808      	ldr	r0, [pc, #32]	; (800027c <vTask_Sync_Recieve_VCP+0x48>)
 800025a:	f008 ff27 	bl	80090ac <CDC_Transmit_FS>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d1f8      	bne.n	8000256 <vTask_Sync_Recieve_VCP+0x22>
		while (CDC_Transmit_FS((unsigned char*)"\r\n", strlen("\r\n")));
 8000264:	bf00      	nop
 8000266:	2102      	movs	r1, #2
 8000268:	4805      	ldr	r0, [pc, #20]	; (8000280 <vTask_Sync_Recieve_VCP+0x4c>)
 800026a:	f008 ff1f 	bl	80090ac <CDC_Transmit_FS>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1f8      	bne.n	8000266 <vTask_Sync_Recieve_VCP+0x32>
		vTaskDelay(1000 / portTICK_RATE_MS );
 8000274:	e7e2      	b.n	800023c <vTask_Sync_Recieve_VCP+0x8>
 8000276:	bf00      	nop
 8000278:	08009964 	.word	0x08009964
 800027c:	20003120 	.word	0x20003120
 8000280:	08009980 	.word	0x08009980

08000284 <vTask_USB_Init>:
	vTaskDelete(NULL);

}

void vTask_USB_Init(void *pvParameters)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	// НЕ ЗАБЫТЬ ЗАКОММЕНТИТЬ ВЫЗОВ MX_USB_DEVICE_Init(); ИЗ ЗАДАЧИ StartDefaultTask (main.c) ПОСЛЕ КАЖДОЙ ГЕНЕРАЦИИ ПРОЕКТА!!!

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028c:	f107 0308 	add.w	r3, r7, #8
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800029a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800029e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a0:	2301      	movs	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a4:	2300      	movs	r3, #0
 80002a6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a8:	2302      	movs	r3, #2
 80002aa:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ac:	f107 0308 	add.w	r3, r7, #8
 80002b0:	4619      	mov	r1, r3
 80002b2:	480b      	ldr	r0, [pc, #44]	; (80002e0 <vTask_USB_Init+0x5c>)
 80002b4:	f000 fb08 	bl	80008c8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002be:	4808      	ldr	r0, [pc, #32]	; (80002e0 <vTask_USB_Init+0x5c>)
 80002c0:	f000 fc5c 	bl	8000b7c <HAL_GPIO_WritePin>

	  vTaskDelay(2000 / portTICK_RATE_MS );
 80002c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002c8:	f007 f9fa 	bl	80076c0 <vTaskDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 80002cc:	f008 fe26 	bl	8008f1c <MX_USB_DEVICE_Init>

	  vTaskDelete(NULL); // Удаленеи задачи самой себя
 80002d0:	2000      	movs	r0, #0
 80002d2:	f007 f983 	bl	80075dc <vTaskDelete>

	for(;;)
	{
		vTaskDelay(1000 / portTICK_RATE_MS );
 80002d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002da:	f007 f9f1 	bl	80076c0 <vTaskDelay>
 80002de:	e7fa      	b.n	80002d6 <vTask_USB_Init+0x52>
 80002e0:	40010800 	.word	0x40010800

080002e4 <vTask_PCB_LED_Blink>:
	}
	vTaskDelete(NULL);
}

void vTask_PCB_LED_Blink(void *pvParameters)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]

	uint16_t *pDelay_LED = (uint16_t*) pvParameters; // Получение параметра с привденем к иходному типу данных - uint16_t
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
	PCB_LED_Toggle();
 80002f0:	f7ff ff3a 	bl	8000168 <PCB_LED_Toggle>
	vTaskDelay(*pDelay_LED / portTICK_RATE_MS ); // Разыменование т.е. передача значения задержки
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f007 f9e1 	bl	80076c0 <vTaskDelay>
	PCB_LED_Toggle();
 80002fe:	f7ff ff33 	bl	8000168 <PCB_LED_Toggle>
	vTaskDelay(*(uint16_t*)pvParameters / portTICK_RATE_MS ); // Можно и без промежуточных переменных, привести pvParameters к указателю uint16_t "(uint16_t*)pvParameters", а затем разименовать
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	f007 f9da 	bl	80076c0 <vTaskDelay>
	PCB_LED_Toggle();
 800030c:	e7f0      	b.n	80002f0 <vTask_PCB_LED_Blink+0xc>

0800030e <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0

}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr

0800031a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0
return 0;
 800031e:	2300      	movs	r3, #0
}
 8000320:	4618      	mov	r0, r3
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032c:	f000 f95c 	bl	80005e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000330:	f000 f818 	bl	8000364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000334:	f000 f870 	bl	8000418 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000338:	f006 f886 	bl	8006448 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <main+0x30>)
 800033e:	2100      	movs	r1, #0
 8000340:	4806      	ldr	r0, [pc, #24]	; (800035c <main+0x34>)
 8000342:	f006 f8e7 	bl	8006514 <osThreadNew>
 8000346:	4602      	mov	r2, r0
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <main+0x38>)
 800034a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  PCB_Init();
 800034c:	f7ff ff00 	bl	8000150 <PCB_Init>
  freeRTOS_Tasks_Ini();
 8000350:	f7ff ff16 	bl	8000180 <freeRTOS_Tasks_Ini>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000354:	e7fe      	b.n	8000354 <main+0x2c>
 8000356:	bf00      	nop
 8000358:	08009a74 	.word	0x08009a74
 800035c:	080004b1 	.word	0x080004b1
 8000360:	20003164 	.word	0x20003164

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b094      	sub	sp, #80	; 0x50
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036e:	2228      	movs	r2, #40	; 0x28
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f009 faa7 	bl	80098c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000378:	f107 0314 	add.w	r3, r7, #20
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	609a      	str	r2, [r3, #8]
 8000384:	60da      	str	r2, [r3, #12]
 8000386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000394:	2301      	movs	r3, #1
 8000396:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a2:	2301      	movs	r3, #1
 80003a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a6:	2302      	movs	r3, #2
 80003a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 ff92 	bl	80022e4 <HAL_RCC_OscConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003c6:	f000 f87b 	bl	80004c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	230f      	movs	r3, #15
 80003cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ce:	2302      	movs	r3, #2
 80003d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	2102      	movs	r1, #2
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 f9fc 	bl	80027e4 <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003f2:	f000 f865 	bl	80004c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003f6:	2310      	movs	r3, #16
 80003f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4618      	mov	r0, r3
 8000402:	f002 fb59 	bl	8002ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800040c:	f000 f858 	bl	80004c0 <Error_Handler>
  }
}
 8000410:	bf00      	nop
 8000412:	3750      	adds	r7, #80	; 0x50
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <MX_GPIO_Init+0x90>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a1d      	ldr	r2, [pc, #116]	; (80004a8 <MX_GPIO_Init+0x90>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_GPIO_Init+0x90>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0310 	and.w	r3, r3, #16
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_GPIO_Init+0x90>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <MX_GPIO_Init+0x90>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_GPIO_Init+0x90>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_GPIO_Init+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a11      	ldr	r2, [pc, #68]	; (80004a8 <MX_GPIO_Init+0x90>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_GPIO_Init+0x90>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047a:	480c      	ldr	r0, [pc, #48]	; (80004ac <MX_GPIO_Init+0x94>)
 800047c:	f000 fb7e 	bl	8000b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000486:	2301      	movs	r3, #1
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	2302      	movs	r3, #2
 8000490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	4619      	mov	r1, r3
 8000498:	4804      	ldr	r0, [pc, #16]	; (80004ac <MX_GPIO_Init+0x94>)
 800049a:	f000 fa15 	bl	80008c8 <HAL_GPIO_Init>

}
 800049e:	bf00      	nop
 80004a0:	3720      	adds	r7, #32
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40011000 	.word	0x40011000

080004b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
osDelay(1);
 80004b8:	2001      	movs	r0, #1
 80004ba:	f006 f8d5 	bl	8006668 <osDelay>
 80004be:	e7fb      	b.n	80004b8 <StartDefaultTask+0x8>

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <Error_Handler+0x6>

080004c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <HAL_MspInit+0x68>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4a17      	ldr	r2, [pc, #92]	; (8000530 <HAL_MspInit+0x68>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6193      	str	r3, [r2, #24]
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <HAL_MspInit+0x68>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <HAL_MspInit+0x68>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	4a11      	ldr	r2, [pc, #68]	; (8000530 <HAL_MspInit+0x68>)
 80004ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f0:	61d3      	str	r3, [r2, #28]
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <HAL_MspInit+0x68>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	210f      	movs	r1, #15
 8000502:	f06f 0001 	mvn.w	r0, #1
 8000506:	f000 f9a8 	bl	800085a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_MspInit+0x6c>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_MspInit+0x6c>)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000526:	bf00      	nop
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000
 8000534:	40010000 	.word	0x40010000

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800053c:	e7fe      	b.n	800053c <NMI_Handler+0x4>

0800053e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <HardFault_Handler+0x4>

08000544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <MemManage_Handler+0x4>

0800054a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <BusFault_Handler+0x4>

08000550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <UsageFault_Handler+0x4>

08000556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr

08000562 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000566:	f000 f885 	bl	8000674 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800056a:	f007 fd39 	bl	8007fe0 <xTaskGetSchedulerState>
 800056e:	4603      	mov	r3, r0
 8000570:	2b01      	cmp	r3, #1
 8000572:	d001      	beq.n	8000578 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000574:	f008 fa80 	bl	8008a78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000582:	f000 fc5d 	bl	8000e40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200036f0 	.word	0x200036f0

08000590 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800059c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800059e:	e003      	b.n	80005a8 <LoopCopyDataInit>

080005a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005a6:	3104      	adds	r1, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005a8:	480a      	ldr	r0, [pc, #40]	; (80005d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005b0:	d3f6      	bcc.n	80005a0 <CopyDataInit>
  ldr r2, =_sbss
 80005b2:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005b4:	e002      	b.n	80005bc <LoopFillZerobss>

080005b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005b8:	f842 3b04 	str.w	r3, [r2], #4

080005bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005c0:	d3f9      	bcc.n	80005b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005c2:	f7ff ffe5 	bl	8000590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005c6:	f009 f94f 	bl	8009868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ca:	f7ff fead 	bl	8000328 <main>
  bx lr
 80005ce:	4770      	bx	lr
  ldr r3, =_sidata
 80005d0:	08009ab0 	.word	0x08009ab0
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005d8:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 80005dc:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 80005e0:	200039dc 	.word	0x200039dc

080005e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC1_2_IRQHandler>
	...

080005e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_Init+0x28>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_Init+0x28>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 f923 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fe:	200f      	movs	r0, #15
 8000600:	f000 f808 	bl	8000614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000604:	f7ff ff60 	bl	80004c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40022000 	.word	0x40022000

08000614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_InitTick+0x54>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_InitTick+0x58>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	fbb3 f3f1 	udiv	r3, r3, r1
 800062e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f93b 	bl	80008ae <HAL_SYSTICK_Config>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	e00e      	b.n	8000660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	d80a      	bhi.n	800065e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000648:	2200      	movs	r2, #0
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	f000 f903 	bl	800085a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000654:	4a06      	ldr	r2, [pc, #24]	; (8000670 <HAL_InitTick+0x5c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	e000      	b.n	8000660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000
 800066c:	20000008 	.word	0x20000008
 8000670:	20000004 	.word	0x20000004

08000674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_IncTick+0x1c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_IncTick+0x20>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4413      	add	r3, r2
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <HAL_IncTick+0x20>)
 8000686:	6013      	str	r3, [r2, #0]
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	20000008 	.word	0x20000008
 8000694:	20003168 	.word	0x20003168

08000698 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return uwTick;
 800069c:	4b02      	ldr	r3, [pc, #8]	; (80006a8 <HAL_GetTick+0x10>)
 800069e:	681b      	ldr	r3, [r3, #0]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	20003168 	.word	0x20003168

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db0b      	blt.n	800073a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 021f 	and.w	r2, r3, #31
 8000728:	4906      	ldr	r1, [pc, #24]	; (8000744 <__NVIC_EnableIRQ+0x34>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000810:	d301      	bcc.n	8000816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000812:	2301      	movs	r3, #1
 8000814:	e00f      	b.n	8000836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <SysTick_Config+0x40>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081e:	210f      	movs	r1, #15
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f7ff ff90 	bl	8000748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <SysTick_Config+0x40>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <SysTick_Config+0x40>)
 8000830:	2207      	movs	r2, #7
 8000832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	e000e010 	.word	0xe000e010

08000844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff2d 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800086c:	f7ff ff42 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 8000870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	6978      	ldr	r0, [r7, #20]
 8000878:	f7ff ff90 	bl	800079c <NVIC_EncodePriority>
 800087c:	4602      	mov	r2, r0
 800087e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff5f 	bl	8000748 <__NVIC_SetPriority>
}
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff35 	bl	8000710 <__NVIC_EnableIRQ>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ffa2 	bl	8000800 <SysTick_Config>
 80008bc:	4603      	mov	r3, r0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b08b      	sub	sp, #44	; 0x2c
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008da:	e127      	b.n	8000b2c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008dc:	2201      	movs	r2, #1
 80008de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	69fa      	ldr	r2, [r7, #28]
 80008ec:	4013      	ands	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	f040 8116 	bne.w	8000b26 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d034      	beq.n	800096c <HAL_GPIO_Init+0xa4>
 8000902:	2b12      	cmp	r3, #18
 8000904:	d80d      	bhi.n	8000922 <HAL_GPIO_Init+0x5a>
 8000906:	2b02      	cmp	r3, #2
 8000908:	d02b      	beq.n	8000962 <HAL_GPIO_Init+0x9a>
 800090a:	2b02      	cmp	r3, #2
 800090c:	d804      	bhi.n	8000918 <HAL_GPIO_Init+0x50>
 800090e:	2b00      	cmp	r3, #0
 8000910:	d031      	beq.n	8000976 <HAL_GPIO_Init+0xae>
 8000912:	2b01      	cmp	r3, #1
 8000914:	d01c      	beq.n	8000950 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000916:	e048      	b.n	80009aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000918:	2b03      	cmp	r3, #3
 800091a:	d043      	beq.n	80009a4 <HAL_GPIO_Init+0xdc>
 800091c:	2b11      	cmp	r3, #17
 800091e:	d01b      	beq.n	8000958 <HAL_GPIO_Init+0x90>
          break;
 8000920:	e043      	b.n	80009aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000922:	4a89      	ldr	r2, [pc, #548]	; (8000b48 <HAL_GPIO_Init+0x280>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d026      	beq.n	8000976 <HAL_GPIO_Init+0xae>
 8000928:	4a87      	ldr	r2, [pc, #540]	; (8000b48 <HAL_GPIO_Init+0x280>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d806      	bhi.n	800093c <HAL_GPIO_Init+0x74>
 800092e:	4a87      	ldr	r2, [pc, #540]	; (8000b4c <HAL_GPIO_Init+0x284>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d020      	beq.n	8000976 <HAL_GPIO_Init+0xae>
 8000934:	4a86      	ldr	r2, [pc, #536]	; (8000b50 <HAL_GPIO_Init+0x288>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d01d      	beq.n	8000976 <HAL_GPIO_Init+0xae>
          break;
 800093a:	e036      	b.n	80009aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800093c:	4a85      	ldr	r2, [pc, #532]	; (8000b54 <HAL_GPIO_Init+0x28c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d019      	beq.n	8000976 <HAL_GPIO_Init+0xae>
 8000942:	4a85      	ldr	r2, [pc, #532]	; (8000b58 <HAL_GPIO_Init+0x290>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d016      	beq.n	8000976 <HAL_GPIO_Init+0xae>
 8000948:	4a84      	ldr	r2, [pc, #528]	; (8000b5c <HAL_GPIO_Init+0x294>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d013      	beq.n	8000976 <HAL_GPIO_Init+0xae>
          break;
 800094e:	e02c      	b.n	80009aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	623b      	str	r3, [r7, #32]
          break;
 8000956:	e028      	b.n	80009aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	3304      	adds	r3, #4
 800095e:	623b      	str	r3, [r7, #32]
          break;
 8000960:	e023      	b.n	80009aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	3308      	adds	r3, #8
 8000968:	623b      	str	r3, [r7, #32]
          break;
 800096a:	e01e      	b.n	80009aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	330c      	adds	r3, #12
 8000972:	623b      	str	r3, [r7, #32]
          break;
 8000974:	e019      	b.n	80009aa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d102      	bne.n	8000984 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800097e:	2304      	movs	r3, #4
 8000980:	623b      	str	r3, [r7, #32]
          break;
 8000982:	e012      	b.n	80009aa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d105      	bne.n	8000998 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800098c:	2308      	movs	r3, #8
 800098e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	611a      	str	r2, [r3, #16]
          break;
 8000996:	e008      	b.n	80009aa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000998:	2308      	movs	r3, #8
 800099a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	69fa      	ldr	r2, [r7, #28]
 80009a0:	615a      	str	r2, [r3, #20]
          break;
 80009a2:	e002      	b.n	80009aa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
          break;
 80009a8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	2bff      	cmp	r3, #255	; 0xff
 80009ae:	d801      	bhi.n	80009b4 <HAL_GPIO_Init+0xec>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	e001      	b.n	80009b8 <HAL_GPIO_Init+0xf0>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3304      	adds	r3, #4
 80009b8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	2bff      	cmp	r3, #255	; 0xff
 80009be:	d802      	bhi.n	80009c6 <HAL_GPIO_Init+0xfe>
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	e002      	b.n	80009cc <HAL_GPIO_Init+0x104>
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	3b08      	subs	r3, #8
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	210f      	movs	r1, #15
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	401a      	ands	r2, r3
 80009de:	6a39      	ldr	r1, [r7, #32]
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	431a      	orrs	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f000 8096 	beq.w	8000b26 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009fa:	4b59      	ldr	r3, [pc, #356]	; (8000b60 <HAL_GPIO_Init+0x298>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	4a58      	ldr	r2, [pc, #352]	; (8000b60 <HAL_GPIO_Init+0x298>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6193      	str	r3, [r2, #24]
 8000a06:	4b56      	ldr	r3, [pc, #344]	; (8000b60 <HAL_GPIO_Init+0x298>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a12:	4a54      	ldr	r2, [pc, #336]	; (8000b64 <HAL_GPIO_Init+0x29c>)
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	3302      	adds	r3, #2
 8000a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	f003 0303 	and.w	r3, r3, #3
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	220f      	movs	r2, #15
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	4013      	ands	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a4b      	ldr	r2, [pc, #300]	; (8000b68 <HAL_GPIO_Init+0x2a0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d013      	beq.n	8000a66 <HAL_GPIO_Init+0x19e>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a4a      	ldr	r2, [pc, #296]	; (8000b6c <HAL_GPIO_Init+0x2a4>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d00d      	beq.n	8000a62 <HAL_GPIO_Init+0x19a>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a49      	ldr	r2, [pc, #292]	; (8000b70 <HAL_GPIO_Init+0x2a8>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d007      	beq.n	8000a5e <HAL_GPIO_Init+0x196>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a48      	ldr	r2, [pc, #288]	; (8000b74 <HAL_GPIO_Init+0x2ac>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d101      	bne.n	8000a5a <HAL_GPIO_Init+0x192>
 8000a56:	2303      	movs	r3, #3
 8000a58:	e006      	b.n	8000a68 <HAL_GPIO_Init+0x1a0>
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	e004      	b.n	8000a68 <HAL_GPIO_Init+0x1a0>
 8000a5e:	2302      	movs	r3, #2
 8000a60:	e002      	b.n	8000a68 <HAL_GPIO_Init+0x1a0>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <HAL_GPIO_Init+0x1a0>
 8000a66:	2300      	movs	r3, #0
 8000a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a6a:	f002 0203 	and.w	r2, r2, #3
 8000a6e:	0092      	lsls	r2, r2, #2
 8000a70:	4093      	lsls	r3, r2
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a78:	493a      	ldr	r1, [pc, #232]	; (8000b64 <HAL_GPIO_Init+0x29c>)
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	3302      	adds	r3, #2
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d006      	beq.n	8000aa0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a92:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4938      	ldr	r1, [pc, #224]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	600b      	str	r3, [r1, #0]
 8000a9e:	e006      	b.n	8000aae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aa0:	4b35      	ldr	r3, [pc, #212]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	4933      	ldr	r1, [pc, #204]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d006      	beq.n	8000ac8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aba:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	492e      	ldr	r1, [pc, #184]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	604b      	str	r3, [r1, #4]
 8000ac6:	e006      	b.n	8000ad6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	4929      	ldr	r1, [pc, #164]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d006      	beq.n	8000af0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	4924      	ldr	r1, [pc, #144]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	608b      	str	r3, [r1, #8]
 8000aee:	e006      	b.n	8000afe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000af2:	689a      	ldr	r2, [r3, #8]
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	491f      	ldr	r1, [pc, #124]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000b0c:	68da      	ldr	r2, [r3, #12]
 8000b0e:	491a      	ldr	r1, [pc, #104]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	60cb      	str	r3, [r1, #12]
 8000b16:	e006      	b.n	8000b26 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	4915      	ldr	r1, [pc, #84]	; (8000b78 <HAL_GPIO_Init+0x2b0>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	3301      	adds	r3, #1
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	fa22 f303 	lsr.w	r3, r2, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f47f aed0 	bne.w	80008dc <HAL_GPIO_Init+0x14>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	372c      	adds	r7, #44	; 0x2c
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	10210000 	.word	0x10210000
 8000b4c:	10110000 	.word	0x10110000
 8000b50:	10120000 	.word	0x10120000
 8000b54:	10310000 	.word	0x10310000
 8000b58:	10320000 	.word	0x10320000
 8000b5c:	10220000 	.word	0x10220000
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010000 	.word	0x40010000
 8000b68:	40010800 	.word	0x40010800
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	40011000 	.word	0x40011000
 8000b74:	40011400 	.word	0x40011400
 8000b78:	40010400 	.word	0x40010400

08000b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b8c:	787b      	ldrb	r3, [r7, #1]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b98:	e003      	b.n	8000ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b9a:	887b      	ldrh	r3, [r7, #2]
 8000b9c:	041a      	lsls	r2, r3, #16
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	611a      	str	r2, [r3, #16]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bbe:	887a      	ldrh	r2, [r7, #2]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	041a      	lsls	r2, r3, #16
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43d9      	mvns	r1, r3
 8000bca:	887b      	ldrh	r3, [r7, #2]
 8000bcc:	400b      	ands	r3, r1
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	611a      	str	r2, [r3, #16]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be0:	b08b      	sub	sp, #44	; 0x2c
 8000be2:	af06      	add	r7, sp, #24
 8000be4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e0fd      	b.n	8000dec <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d106      	bne.n	8000c0a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f008 fb85 	bl	8009314 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 f82a 	bl	8002c70 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	687e      	ldr	r6, [r7, #4]
 8000c24:	466d      	mov	r5, sp
 8000c26:	f106 0410 	add.w	r4, r6, #16
 8000c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	602b      	str	r3, [r5, #0]
 8000c32:	1d33      	adds	r3, r6, #4
 8000c34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c36:	6838      	ldr	r0, [r7, #0]
 8000c38:	f001 fff4 	bl	8002c24 <USB_CoreInit>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d005      	beq.n	8000c4e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2202      	movs	r2, #2
 8000c46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e0ce      	b.n	8000dec <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 f825 	bl	8002ca4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e04c      	b.n	8000cfa <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	440b      	add	r3, r1
 8000c70:	3301      	adds	r3, #1
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	7bfa      	ldrb	r2, [r7, #15]
 8000c88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	b298      	uxth	r0, r3
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3336      	adds	r3, #54	; 0x36
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	440b      	add	r3, r1
 8000cb2:	3303      	adds	r3, #3
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cb8:	7bfa      	ldrb	r2, [r7, #15]
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3338      	adds	r3, #56	; 0x38
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ccc:	7bfa      	ldrb	r2, [r7, #15]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	440b      	add	r3, r1
 8000cda:	333c      	adds	r3, #60	; 0x3c
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ce0:	7bfa      	ldrb	r2, [r7, #15]
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	440b      	add	r3, r1
 8000cee:	3340      	adds	r3, #64	; 0x40
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	73fb      	strb	r3, [r7, #15]
 8000cfa:	7bfa      	ldrb	r2, [r7, #15]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d3ad      	bcc.n	8000c60 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	e044      	b.n	8000d94 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d0a:	7bfa      	ldrb	r2, [r7, #15]
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	440b      	add	r3, r1
 8000d18:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d20:	7bfa      	ldrb	r2, [r7, #15]
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	440b      	add	r3, r1
 8000d2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d32:	7bfa      	ldrb	r2, [r7, #15]
 8000d34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d36:	7bfa      	ldrb	r2, [r7, #15]
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d4c:	7bfa      	ldrb	r2, [r7, #15]
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	440b      	add	r3, r1
 8000d70:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d78:	7bfa      	ldrb	r2, [r7, #15]
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	440b      	add	r3, r1
 8000d86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	3301      	adds	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d3b5      	bcc.n	8000d0a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	687e      	ldr	r6, [r7, #4]
 8000da6:	466d      	mov	r5, sp
 8000da8:	f106 0410 	add.w	r4, r6, #16
 8000dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db0:	6823      	ldr	r3, [r4, #0]
 8000db2:	602b      	str	r3, [r5, #0]
 8000db4:	1d33      	adds	r3, r6, #4
 8000db6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000db8:	6838      	ldr	r0, [r7, #0]
 8000dba:	f001 ff7f 	bl	8002cbc <USB_DevInit>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d005      	beq.n	8000dd0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e00d      	b.n	8000dec <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f003 ff19 	bl	8004c1c <USB_DevDisconnect>

  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000df4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d101      	bne.n	8000e0a <HAL_PCD_Start+0x16>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e016      	b.n	8000e38 <HAL_PCD_Start+0x44>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 ff14 	bl	8002c44 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f008 fceb 	bl	80097fa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 feed 	bl	8004c08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f003 feef 	bl	8004c30 <USB_ReadInterrupts>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e5c:	d102      	bne.n	8000e64 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fb61 	bl	8001526 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fee1 	bl	8004c30 <USB_ReadInterrupts>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e78:	d112      	bne.n	8000ea0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e8c:	b292      	uxth	r2, r2
 8000e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f008 fab9 	bl	800940a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f925 	bl	80010ea <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 fec3 	bl	8004c30 <USB_ReadInterrupts>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000eb4:	d10b      	bne.n	8000ece <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ec8:	b292      	uxth	r2, r2
 8000eca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 feac 	bl	8004c30 <USB_ReadInterrupts>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ee2:	d10b      	bne.n	8000efc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ef6:	b292      	uxth	r2, r2
 8000ef8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fe95 	bl	8004c30 <USB_ReadInterrupts>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f10:	d126      	bne.n	8000f60 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0204 	bic.w	r2, r2, #4
 8000f24:	b292      	uxth	r2, r2
 8000f26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0208 	bic.w	r2, r2, #8
 8000f3c:	b292      	uxth	r2, r2
 8000f3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f008 fa9a 	bl	800947c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fe63 	bl	8004c30 <USB_ReadInterrupts>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f74:	f040 8084 	bne.w	8001080 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	77fb      	strb	r3, [r7, #31]
 8000f7c:	e011      	b.n	8000fa2 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	7ffb      	ldrb	r3, [r7, #31]
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	441a      	add	r2, r3
 8000f8a:	7ffb      	ldrb	r3, [r7, #31]
 8000f8c:	8812      	ldrh	r2, [r2, #0]
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	f107 0120 	add.w	r1, r7, #32
 8000f96:	440b      	add	r3, r1
 8000f98:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000f9c:	7ffb      	ldrb	r3, [r7, #31]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	77fb      	strb	r3, [r7, #31]
 8000fa2:	7ffb      	ldrb	r3, [r7, #31]
 8000fa4:	2b07      	cmp	r3, #7
 8000fa6:	d9ea      	bls.n	8000f7e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0201 	orr.w	r2, r2, #1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000fd8:	bf00      	nop
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0f6      	beq.n	8000fda <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ffe:	b292      	uxth	r2, r2
 8001000:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	77fb      	strb	r3, [r7, #31]
 8001008:	e010      	b.n	800102c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800100a:	7ffb      	ldrb	r3, [r7, #31]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	4611      	mov	r1, r2
 8001012:	7ffa      	ldrb	r2, [r7, #31]
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	440a      	add	r2, r1
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	f107 0120 	add.w	r1, r7, #32
 800101e:	440b      	add	r3, r1
 8001020:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001024:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001026:	7ffb      	ldrb	r3, [r7, #31]
 8001028:	3301      	adds	r3, #1
 800102a:	77fb      	strb	r3, [r7, #31]
 800102c:	7ffb      	ldrb	r3, [r7, #31]
 800102e:	2b07      	cmp	r3, #7
 8001030:	d9eb      	bls.n	800100a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800103a:	b29a      	uxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 0208 	orr.w	r2, r2, #8
 8001044:	b292      	uxth	r2, r2
 8001046:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001052:	b29a      	uxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800105c:	b292      	uxth	r2, r2
 800105e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0204 	orr.w	r2, r2, #4
 8001074:	b292      	uxth	r2, r2
 8001076:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f008 f9e4 	bl	8009448 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f003 fdd3 	bl	8004c30 <USB_ReadInterrupts>
 800108a:	4603      	mov	r3, r0
 800108c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001094:	d10e      	bne.n	80010b4 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010a8:	b292      	uxth	r2, r2
 80010aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f008 f99d 	bl	80093ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 fdb9 	bl	8004c30 <USB_ReadInterrupts>
 80010be:	4603      	mov	r3, r0
 80010c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010c8:	d10b      	bne.n	80010e2 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010dc:	b292      	uxth	r2, r2
 80010de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80010e2:	bf00      	nop
 80010e4:	3720      	adds	r7, #32
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d101      	bne.n	8001104 <HAL_PCD_SetAddress+0x1a>
 8001100:	2302      	movs	r3, #2
 8001102:	e013      	b.n	800112c <HAL_PCD_SetAddress+0x42>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	78fa      	ldrb	r2, [r7, #3]
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	78fa      	ldrb	r2, [r7, #3]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fd60 	bl	8004be2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4603      	mov	r3, r0
 8001144:	70fb      	strb	r3, [r7, #3]
 8001146:	460b      	mov	r3, r1
 8001148:	803b      	strh	r3, [r7, #0]
 800114a:	4613      	mov	r3, r2
 800114c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001156:	2b00      	cmp	r3, #0
 8001158:	da0e      	bge.n	8001178 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2201      	movs	r2, #1
 8001174:	705a      	strb	r2, [r3, #1]
 8001176:	e00e      	b.n	8001196 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	f003 0207 	and.w	r2, r3, #7
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	b2da      	uxtb	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80011a2:	883a      	ldrh	r2, [r7, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	78ba      	ldrb	r2, [r7, #2]
 80011ac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	785b      	ldrb	r3, [r3, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80011c0:	78bb      	ldrb	r3, [r7, #2]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d102      	bne.n	80011cc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_PCD_EP_Open+0xa6>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e00e      	b.n	80011f8 <HAL_PCD_EP_Open+0xc4>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68f9      	ldr	r1, [r7, #12]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 fd87 	bl	8002cfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80011f6:	7afb      	ldrb	r3, [r7, #11]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800120c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001210:	2b00      	cmp	r3, #0
 8001212:	da0e      	bge.n	8001232 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2201      	movs	r2, #1
 800122e:	705a      	strb	r2, [r3, #1]
 8001230:	e00e      	b.n	8001250 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	f003 0207 	and.w	r2, r3, #7
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	b2da      	uxtb	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001262:	2b01      	cmp	r3, #1
 8001264:	d101      	bne.n	800126a <HAL_PCD_EP_Close+0x6a>
 8001266:	2302      	movs	r3, #2
 8001268:	e00e      	b.n	8001288 <HAL_PCD_EP_Close+0x88>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68f9      	ldr	r1, [r7, #12]
 8001278:	4618      	mov	r0, r3
 800127a:	f002 f8a9 	bl	80033d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	460b      	mov	r3, r1
 800129e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012a0:	7afb      	ldrb	r3, [r7, #11]
 80012a2:	f003 0207 	and.w	r2, r3, #7
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4413      	add	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2200      	movs	r2, #0
 80012ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012d0:	7afb      	ldrb	r3, [r7, #11]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6979      	ldr	r1, [r7, #20]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 fa5b 	bl	80037a8 <USB_EPStartXfer>
 80012f2:	e005      	b.n	8001300 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6979      	ldr	r1, [r7, #20]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fa54 	bl	80037a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	f003 0207 	and.w	r2, r3, #7
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800132c:	681b      	ldr	r3, [r3, #0]
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	460b      	mov	r3, r1
 8001346:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001348:	7afb      	ldrb	r3, [r7, #11]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2201      	movs	r2, #1
 8001382:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001384:	7afb      	ldrb	r3, [r7, #11]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	b2da      	uxtb	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001390:	7afb      	ldrb	r3, [r7, #11]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6979      	ldr	r1, [r7, #20]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 fa01 	bl	80037a8 <USB_EPStartXfer>
 80013a6:	e005      	b.n	80013b4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6979      	ldr	r1, [r7, #20]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 f9fa 	bl	80037a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	460b      	mov	r3, r1
 80013c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	f003 0207 	and.w	r2, r3, #7
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d901      	bls.n	80013dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e04c      	b.n	8001476 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	da0e      	bge.n	8001402 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2201      	movs	r2, #1
 80013fe:	705a      	strb	r2, [r3, #1]
 8001400:	e00c      	b.n	800141c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001402:	78fa      	ldrb	r2, [r7, #3]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2201      	movs	r2, #1
 8001420:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	b2da      	uxtb	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_PCD_EP_SetStall+0x7e>
 8001438:	2302      	movs	r3, #2
 800143a:	e01c      	b.n	8001476 <HAL_PCD_EP_SetStall+0xb8>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68f9      	ldr	r1, [r7, #12]
 800144a:	4618      	mov	r0, r3
 800144c:	f003 facc 	bl	80049e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	2b00      	cmp	r3, #0
 8001458:	d108      	bne.n	800146c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001464:	4619      	mov	r1, r3
 8001466:	4610      	mov	r0, r2
 8001468:	f003 fbf1 	bl	8004c4e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	f003 020f 	and.w	r2, r3, #15
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	d901      	bls.n	800149c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e040      	b.n	800151e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800149c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	da0e      	bge.n	80014c2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2201      	movs	r2, #1
 80014be:	705a      	strb	r2, [r3, #1]
 80014c0:	e00e      	b.n	80014e0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	f003 0207 	and.w	r2, r3, #7
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_PCD_EP_ClrStall+0x82>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e00e      	b.n	800151e <HAL_PCD_EP_ClrStall+0xa0>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68f9      	ldr	r1, [r7, #12]
 800150e:	4618      	mov	r0, r3
 8001510:	f003 faba 	bl	8004a88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b08e      	sub	sp, #56	; 0x38
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800152e:	e2df      	b.n	8001af0 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001538:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800153a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001546:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 8158 	bne.w	8001800 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001550:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	2b00      	cmp	r3, #0
 8001558:	d152      	bne.n	8001600 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800156a:	81fb      	strh	r3, [r7, #14]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	89fb      	ldrh	r3, [r7, #14]
 8001572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800157a:	b29b      	uxth	r3, r3
 800157c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3328      	adds	r3, #40	; 0x28
 8001582:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800158c:	b29b      	uxth	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	3302      	adds	r3, #2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	441a      	add	r2, r3
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015be:	2100      	movs	r1, #0
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f007 fefa 	bl	80093ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 828e 	beq.w	8001af0 <PCD_EP_ISR_Handler+0x5ca>
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f040 8289 	bne.w	8001af0 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	b292      	uxth	r2, r2
 80015f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80015fe:	e277      	b.n	8001af0 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001610:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001616:	2b00      	cmp	r3, #0
 8001618:	d034      	beq.n	8001684 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	3306      	adds	r3, #6
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	4413      	add	r3, r2
 8001638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001658:	b29b      	uxth	r3, r3
 800165a:	f003 fb47 	bl	8004cec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	b29a      	uxth	r2, r3
 8001666:	f640 738f 	movw	r3, #3983	; 0xf8f
 800166a:	4013      	ands	r3, r2
 800166c:	823b      	strh	r3, [r7, #16]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	8a3a      	ldrh	r2, [r7, #16]
 8001674:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001678:	b292      	uxth	r2, r2
 800167a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f007 fe6f 	bl	8009360 <HAL_PCD_SetupStageCallback>
 8001682:	e235      	b.n	8001af0 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001684:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001688:	2b00      	cmp	r3, #0
 800168a:	f280 8231 	bge.w	8001af0 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	b29a      	uxth	r2, r3
 8001696:	f640 738f 	movw	r3, #3983	; 0xf8f
 800169a:	4013      	ands	r3, r2
 800169c:	83bb      	strh	r3, [r7, #28]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	8bba      	ldrh	r2, [r7, #28]
 80016a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016a8:	b292      	uxth	r2, r2
 80016aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	3306      	adds	r3, #6
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d019      	beq.n	8001714 <PCD_EP_ISR_Handler+0x1ee>
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d015      	beq.n	8001714 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	6959      	ldr	r1, [r3, #20]
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	f003 faf7 	bl	8004cec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	441a      	add	r2, r3
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800170c:	2100      	movs	r1, #0
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f007 fe38 	bl	8009384 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001722:	b29b      	uxth	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4413      	add	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d112      	bne.n	8001762 <PCD_EP_ISR_Handler+0x23c>
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	b29b      	uxth	r3, r3
 8001742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001746:	b29a      	uxth	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	801a      	strh	r2, [r3, #0]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800175a:	b29a      	uxth	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	801a      	strh	r2, [r3, #0]
 8001760:	e02f      	b.n	80017c2 <PCD_EP_ISR_Handler+0x29c>
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2b3e      	cmp	r3, #62	; 0x3e
 8001768:	d813      	bhi.n	8001792 <PCD_EP_ISR_Handler+0x26c>
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <PCD_EP_ISR_Handler+0x25e>
 800177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001780:	3301      	adds	r3, #1
 8001782:	633b      	str	r3, [r7, #48]	; 0x30
 8001784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001786:	b29b      	uxth	r3, r3
 8001788:	029b      	lsls	r3, r3, #10
 800178a:	b29a      	uxth	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	801a      	strh	r2, [r3, #0]
 8001790:	e017      	b.n	80017c2 <PCD_EP_ISR_Handler+0x29c>
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <PCD_EP_ISR_Handler+0x286>
 80017a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a8:	3b01      	subs	r3, #1
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
 80017ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	029b      	lsls	r3, r3, #10
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017bc:	b29a      	uxth	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017d2:	827b      	strh	r3, [r7, #18]
 80017d4:	8a7b      	ldrh	r3, [r7, #18]
 80017d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80017da:	827b      	strh	r3, [r7, #18]
 80017dc:	8a7b      	ldrh	r3, [r7, #18]
 80017de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017e2:	827b      	strh	r3, [r7, #18]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	8a7b      	ldrh	r3, [r7, #18]
 80017ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	8013      	strh	r3, [r2, #0]
 80017fe:	e177      	b.n	8001af0 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001812:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001816:	2b00      	cmp	r3, #0
 8001818:	f280 80ea 	bge.w	80019f0 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b29a      	uxth	r2, r3
 800182e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001832:	4013      	ands	r3, r2
 8001834:	853b      	strh	r3, [r7, #40]	; 0x28
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800184a:	b292      	uxth	r2, r2
 800184c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800184e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	7b1b      	ldrb	r3, [r3, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d122      	bne.n	80018b2 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001874:	b29b      	uxth	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	3306      	adds	r3, #6
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	4413      	add	r3, r2
 800188a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001894:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001896:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 8087 	beq.w	80019ac <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	6959      	ldr	r1, [r3, #20]
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	88da      	ldrh	r2, [r3, #6]
 80018aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018ac:	f003 fa1e 	bl	8004cec <USB_ReadPMA>
 80018b0:	e07c      	b.n	80019ac <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	78db      	ldrb	r3, [r3, #3]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d108      	bne.n	80018cc <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80018ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018bc:	461a      	mov	r2, r3
 80018be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f923 	bl	8001b0c <HAL_PCD_EP_DB_Receive>
 80018c6:	4603      	mov	r3, r0
 80018c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80018ca:	e06f      	b.n	80019ac <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	441a      	add	r2, r3
 80018f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001904:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001908:	b29b      	uxth	r3, r3
 800190a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	b29b      	uxth	r3, r3
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d021      	beq.n	800196a <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800192e:	b29b      	uxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	3302      	adds	r3, #2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	4413      	add	r3, r2
 8001944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800194e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001950:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001952:	2b00      	cmp	r3, #0
 8001954:	d02a      	beq.n	80019ac <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	6959      	ldr	r1, [r3, #20]
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	891a      	ldrh	r2, [r3, #8]
 8001962:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001964:	f003 f9c2 	bl	8004cec <USB_ReadPMA>
 8001968:	e020      	b.n	80019ac <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001972:	b29b      	uxth	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	3306      	adds	r3, #6
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001992:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001996:	2b00      	cmp	r3, #0
 8001998:	d008      	beq.n	80019ac <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	6959      	ldr	r1, [r3, #20]
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	895a      	ldrh	r2, [r3, #10]
 80019a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019a8:	f003 f9a0 	bl	8004cec <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	69da      	ldr	r2, [r3, #28]
 80019b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019b2:	441a      	add	r2, r3
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019be:	441a      	add	r2, r3
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <PCD_EP_ISR_Handler+0x4b0>
 80019cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d206      	bcs.n	80019e4 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	4619      	mov	r1, r3
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f007 fcd1 	bl	8009384 <HAL_PCD_DataOutStageCallback>
 80019e2:	e005      	b.n	80019f0 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019ea:	4618      	mov	r0, r3
 80019ec:	f001 fedc 	bl	80037a8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80019f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d07a      	beq.n	8001af0 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80019fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a28:	843b      	strh	r3, [r7, #32]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	441a      	add	r2, r3
 8001a38:	8c3b      	ldrh	r3, [r7, #32]
 8001a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	78db      	ldrb	r3, [r3, #3]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d108      	bne.n	8001a60 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d146      	bne.n	8001ae4 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d141      	bne.n	8001ae4 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4413      	add	r3, r2
 8001a74:	3302      	adds	r3, #2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a88:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	8bfb      	ldrh	r3, [r7, #30]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d906      	bls.n	8001aa2 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	8bfb      	ldrh	r3, [r7, #30]
 8001a9a:	1ad2      	subs	r2, r2, r3
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	619a      	str	r2, [r3, #24]
 8001aa0:	e002      	b.n	8001aa8 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d106      	bne.n	8001abe <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f007 fc7f 	bl	80093ba <HAL_PCD_DataInStageCallback>
 8001abc:	e018      	b.n	8001af0 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	8bfb      	ldrh	r3, [r7, #30]
 8001ac4:	441a      	add	r2, r3
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	8bfb      	ldrh	r3, [r7, #30]
 8001ad0:	441a      	add	r2, r3
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 fe63 	bl	80037a8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001ae2:	e005      	b.n	8001af0 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ae4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f91b 	bl	8001d26 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f6ff ad17 	blt.w	8001530 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3738      	adds	r7, #56	; 0x38
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	4613      	mov	r3, r2
 8001b18:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d07e      	beq.n	8001c22 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	4413      	add	r3, r2
 8001b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b4c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	8b7b      	ldrh	r3, [r7, #26]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d306      	bcc.n	8001b66 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	699a      	ldr	r2, [r3, #24]
 8001b5c:	8b7b      	ldrh	r3, [r7, #26]
 8001b5e:	1ad2      	subs	r2, r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	619a      	str	r2, [r3, #24]
 8001b64:	e002      	b.n	8001b6c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d123      	bne.n	8001bbc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8e:	833b      	strh	r3, [r7, #24]
 8001b90:	8b3b      	ldrh	r3, [r7, #24]
 8001b92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b96:	833b      	strh	r3, [r7, #24]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	441a      	add	r2, r3
 8001ba6:	8b3b      	ldrh	r3, [r7, #24]
 8001ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d01f      	beq.n	8001c06 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be0:	82fb      	strh	r3, [r7, #22]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	441a      	add	r2, r3
 8001bf0:	8afb      	ldrh	r3, [r7, #22]
 8001bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c06:	8b7b      	ldrh	r3, [r7, #26]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8087 	beq.w	8001d1c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	6959      	ldr	r1, [r3, #20]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	891a      	ldrh	r2, [r3, #8]
 8001c1a:	8b7b      	ldrh	r3, [r7, #26]
 8001c1c:	f003 f866 	bl	8004cec <USB_ReadPMA>
 8001c20:	e07c      	b.n	8001d1c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	3306      	adds	r3, #6
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c4a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	699a      	ldr	r2, [r3, #24]
 8001c50:	8b7b      	ldrh	r3, [r7, #26]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d306      	bcc.n	8001c64 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	699a      	ldr	r2, [r3, #24]
 8001c5a:	8b7b      	ldrh	r3, [r7, #26]
 8001c5c:	1ad2      	subs	r2, r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	619a      	str	r2, [r3, #24]
 8001c62:	e002      	b.n	8001c6a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d123      	bne.n	8001cba <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c8c:	83fb      	strh	r3, [r7, #30]
 8001c8e:	8bfb      	ldrh	r3, [r7, #30]
 8001c90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c94:	83fb      	strh	r3, [r7, #30]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	441a      	add	r2, r3
 8001ca4:	8bfb      	ldrh	r3, [r7, #30]
 8001ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d11f      	bne.n	8001d04 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cde:	83bb      	strh	r3, [r7, #28]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	441a      	add	r2, r3
 8001cee:	8bbb      	ldrh	r3, [r7, #28]
 8001cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d04:	8b7b      	ldrh	r3, [r7, #26]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d008      	beq.n	8001d1c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	6959      	ldr	r1, [r3, #20]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	895a      	ldrh	r2, [r3, #10]
 8001d16:	8b7b      	ldrh	r3, [r7, #26]
 8001d18:	f002 ffe8 	bl	8004cec <USB_ReadPMA>
    }
  }

  return count;
 8001d1c:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3720      	adds	r7, #32
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b092      	sub	sp, #72	; 0x48
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	4613      	mov	r3, r2
 8001d32:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8132 	beq.w	8001fa4 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	3302      	adds	r3, #2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d68:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	699a      	ldr	r2, [r3, #24]
 8001d6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d906      	bls.n	8001d82 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	699a      	ldr	r2, [r3, #24]
 8001d78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d7a:	1ad2      	subs	r2, r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	619a      	str	r2, [r3, #24]
 8001d80:	e002      	b.n	8001d88 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d12c      	bne.n	8001dea <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f007 fb0f 	bl	80093ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 822f 	beq.w	8002206 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc2:	827b      	strh	r3, [r7, #18]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	441a      	add	r2, r3
 8001dd2:	8a7b      	ldrh	r3, [r7, #18]
 8001dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	8013      	strh	r3, [r2, #0]
 8001de8:	e20d      	b.n	8002206 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01f      	beq.n	8001e34 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	441a      	add	r2, r3
 8001e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	f040 81e3 	bne.w	8002206 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e46:	441a      	add	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	69da      	ldr	r2, [r3, #28]
 8001e50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e52:	441a      	add	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	6a1a      	ldr	r2, [r3, #32]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d309      	bcc.n	8001e78 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	6a1a      	ldr	r2, [r3, #32]
 8001e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e70:	1ad2      	subs	r2, r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	621a      	str	r2, [r3, #32]
 8001e76:	e014      	b.n	8001ea2 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d106      	bne.n	8001e8e <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001e80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e8c:	e009      	b.n	8001ea2 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	785b      	ldrb	r3, [r3, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d155      	bne.n	8001f56 <HAL_PCD_EP_DB_Transmit+0x230>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	011a      	lsls	r2, r3, #4
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d112      	bne.n	8001efe <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	801a      	strh	r2, [r3, #0]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	801a      	strh	r2, [r3, #0]
 8001efc:	e047      	b.n	8001f8e <HAL_PCD_EP_DB_Transmit+0x268>
 8001efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f00:	2b3e      	cmp	r3, #62	; 0x3e
 8001f02:	d811      	bhi.n	8001f28 <HAL_PCD_EP_DB_Transmit+0x202>
 8001f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f16:	3301      	adds	r3, #1
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	029b      	lsls	r3, r3, #10
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	801a      	strh	r2, [r3, #0]
 8001f26:	e032      	b.n	8001f8e <HAL_PCD_EP_DB_Transmit+0x268>
 8001f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <HAL_PCD_EP_DB_Transmit+0x218>
 8001f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	029b      	lsls	r3, r3, #10
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	801a      	strh	r2, [r3, #0]
 8001f54:	e01b      	b.n	8001f8e <HAL_PCD_EP_DB_Transmit+0x268>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	785b      	ldrb	r3, [r3, #1]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d117      	bne.n	8001f8e <HAL_PCD_EP_DB_Transmit+0x268>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	623b      	str	r3, [r7, #32]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	4413      	add	r3, r2
 8001f74:	623b      	str	r3, [r7, #32]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	011a      	lsls	r2, r3, #4
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	6959      	ldr	r1, [r3, #20]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	891a      	ldrh	r2, [r3, #8]
 8001f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f002 fe61 	bl	8004c64 <USB_WritePMA>
 8001fa2:	e130      	b.n	8002206 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3306      	adds	r3, #6
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d306      	bcc.n	8001fe6 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fde:	1ad2      	subs	r2, r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	619a      	str	r2, [r3, #24]
 8001fe4:	e002      	b.n	8001fec <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d12c      	bne.n	800204e <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f007 f9dd 	bl	80093ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 80fd 	bne.w	8002206 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002026:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	441a      	add	r2, r3
 8002036:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800203c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002048:	b29b      	uxth	r3, r3
 800204a:	8013      	strh	r3, [r2, #0]
 800204c:	e0db      	b.n	8002206 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d11f      	bne.n	8002098 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800206e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002072:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	441a      	add	r2, r3
 8002082:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800208c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002094:	b29b      	uxth	r3, r3
 8002096:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800209e:	2b01      	cmp	r3, #1
 80020a0:	f040 80b1 	bne.w	8002206 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020aa:	441a      	add	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	69da      	ldr	r2, [r3, #28]
 80020b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020b6:	441a      	add	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	6a1a      	ldr	r2, [r3, #32]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d309      	bcc.n	80020dc <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	6a1a      	ldr	r2, [r3, #32]
 80020d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d4:	1ad2      	subs	r2, r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	621a      	str	r2, [r3, #32]
 80020da:	e014      	b.n	8002106 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d106      	bne.n	80020f2 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80020e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020e6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020f0:	e009      	b.n	8002106 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2200      	movs	r2, #0
 80020fc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	785b      	ldrb	r3, [r3, #1]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d155      	bne.n	80021c0 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	647b      	str	r3, [r7, #68]	; 0x44
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002128:	4413      	add	r3, r2
 800212a:	647b      	str	r3, [r7, #68]	; 0x44
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	011a      	lsls	r2, r3, #4
 8002132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002134:	4413      	add	r3, r2
 8002136:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800213a:	643b      	str	r3, [r7, #64]	; 0x40
 800213c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213e:	2b00      	cmp	r3, #0
 8002140:	d112      	bne.n	8002168 <HAL_PCD_EP_DB_Transmit+0x442>
 8002142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800214c:	b29a      	uxth	r2, r3
 800214e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002150:	801a      	strh	r2, [r3, #0]
 8002152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800215c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002160:	b29a      	uxth	r2, r3
 8002162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002164:	801a      	strh	r2, [r3, #0]
 8002166:	e044      	b.n	80021f2 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216a:	2b3e      	cmp	r3, #62	; 0x3e
 800216c:	d811      	bhi.n	8002192 <HAL_PCD_EP_DB_Transmit+0x46c>
 800216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002170:	085b      	lsrs	r3, r3, #1
 8002172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_PCD_EP_DB_Transmit+0x45e>
 800217e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002180:	3301      	adds	r3, #1
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002186:	b29b      	uxth	r3, r3
 8002188:	029b      	lsls	r3, r3, #10
 800218a:	b29a      	uxth	r2, r3
 800218c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800218e:	801a      	strh	r2, [r3, #0]
 8002190:	e02f      	b.n	80021f2 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <HAL_PCD_EP_DB_Transmit+0x482>
 80021a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a4:	3b01      	subs	r3, #1
 80021a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	029b      	lsls	r3, r3, #10
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021bc:	801a      	strh	r2, [r3, #0]
 80021be:	e018      	b.n	80021f2 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	785b      	ldrb	r3, [r3, #1]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d114      	bne.n	80021f2 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d6:	4413      	add	r3, r2
 80021d8:	637b      	str	r3, [r7, #52]	; 0x34
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	011a      	lsls	r2, r3, #4
 80021e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e2:	4413      	add	r3, r2
 80021e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
 80021ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	6959      	ldr	r1, [r3, #20]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	895a      	ldrh	r2, [r3, #10]
 80021fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002200:	b29b      	uxth	r3, r3
 8002202:	f002 fd2f 	bl	8004c64 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800221c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002220:	823b      	strh	r3, [r7, #16]
 8002222:	8a3b      	ldrh	r3, [r7, #16]
 8002224:	f083 0310 	eor.w	r3, r3, #16
 8002228:	823b      	strh	r3, [r7, #16]
 800222a:	8a3b      	ldrh	r3, [r7, #16]
 800222c:	f083 0320 	eor.w	r3, r3, #32
 8002230:	823b      	strh	r3, [r7, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	441a      	add	r2, r3
 8002240:	8a3b      	ldrh	r3, [r7, #16]
 8002242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800224a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800224e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002252:	b29b      	uxth	r3, r3
 8002254:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3748      	adds	r7, #72	; 0x48
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	817b      	strh	r3, [r7, #10]
 800226e:	4613      	mov	r3, r2
 8002270:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002272:	897b      	ldrh	r3, [r7, #10]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800227e:	897b      	ldrh	r3, [r7, #10]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4413      	add	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e009      	b.n	80022aa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002296:	897a      	ldrh	r2, [r7, #10]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80022aa:	893b      	ldrh	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d107      	bne.n	80022c0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2200      	movs	r2, #0
 80022b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	80da      	strh	r2, [r3, #6]
 80022be:	e00b      	b.n	80022d8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2201      	movs	r2, #1
 80022c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e26c      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8087 	beq.w	8002412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002304:	4b92      	ldr	r3, [pc, #584]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b04      	cmp	r3, #4
 800230e:	d00c      	beq.n	800232a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002310:	4b8f      	ldr	r3, [pc, #572]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b08      	cmp	r3, #8
 800231a:	d112      	bne.n	8002342 <HAL_RCC_OscConfig+0x5e>
 800231c:	4b8c      	ldr	r3, [pc, #560]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002328:	d10b      	bne.n	8002342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232a:	4b89      	ldr	r3, [pc, #548]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d06c      	beq.n	8002410 <HAL_RCC_OscConfig+0x12c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d168      	bne.n	8002410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e246      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x76>
 800234c:	4b80      	ldr	r3, [pc, #512]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a7f      	ldr	r2, [pc, #508]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e02e      	b.n	80023b8 <HAL_RCC_OscConfig+0xd4>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x98>
 8002362:	4b7b      	ldr	r3, [pc, #492]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a7a      	ldr	r2, [pc, #488]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b78      	ldr	r3, [pc, #480]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a77      	ldr	r2, [pc, #476]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e01d      	b.n	80023b8 <HAL_RCC_OscConfig+0xd4>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0xbc>
 8002386:	4b72      	ldr	r3, [pc, #456]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a71      	ldr	r2, [pc, #452]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b6f      	ldr	r3, [pc, #444]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a6e      	ldr	r2, [pc, #440]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_OscConfig+0xd4>
 80023a0:	4b6b      	ldr	r3, [pc, #428]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a6a      	ldr	r2, [pc, #424]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b68      	ldr	r3, [pc, #416]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a67      	ldr	r2, [pc, #412]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe f96a 	bl	8000698 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe f966 	bl	8000698 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1fa      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b5d      	ldr	r3, [pc, #372]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe4>
 80023e6:	e014      	b.n	8002412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe f956 	bl	8000698 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7fe f952 	bl	8000698 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e1e6      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002402:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x10c>
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d063      	beq.n	80024e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800241e:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800242a:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b08      	cmp	r3, #8
 8002434:	d11c      	bne.n	8002470 <HAL_RCC_OscConfig+0x18c>
 8002436:	4b46      	ldr	r3, [pc, #280]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d116      	bne.n	8002470 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002442:	4b43      	ldr	r3, [pc, #268]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_RCC_OscConfig+0x176>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e1ba      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245a:	4b3d      	ldr	r3, [pc, #244]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4939      	ldr	r1, [pc, #228]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	e03a      	b.n	80024e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d020      	beq.n	80024ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002478:	4b36      	ldr	r3, [pc, #216]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 800247a:	2201      	movs	r2, #1
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe f90b 	bl	8000698 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002486:	f7fe f907 	bl	8000698 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e19b      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a4:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4927      	ldr	r1, [pc, #156]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
 80024b8:	e015      	b.n	80024e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe f8ea 	bl	8000698 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c8:	f7fe f8e6 	bl	8000698 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e17a      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024da:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d03a      	beq.n	8002568 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d019      	beq.n	800252e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <HAL_RCC_OscConfig+0x274>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002500:	f7fe f8ca 	bl	8000698 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002508:	f7fe f8c6 	bl	8000698 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e15a      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002526:	2001      	movs	r0, #1
 8002528:	f000 faa8 	bl	8002a7c <RCC_Delay>
 800252c:	e01c      	b.n	8002568 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_RCC_OscConfig+0x274>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002534:	f7fe f8b0 	bl	8000698 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253a:	e00f      	b.n	800255c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253c:	f7fe f8ac 	bl	8000698 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d908      	bls.n	800255c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e140      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	42420000 	.word	0x42420000
 8002558:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	4b9e      	ldr	r3, [pc, #632]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e9      	bne.n	800253c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80a6 	beq.w	80026c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257a:	4b97      	ldr	r3, [pc, #604]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10d      	bne.n	80025a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	4b94      	ldr	r3, [pc, #592]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a93      	ldr	r2, [pc, #588]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	61d3      	str	r3, [r2, #28]
 8002592:	4b91      	ldr	r3, [pc, #580]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259e:	2301      	movs	r3, #1
 80025a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a2:	4b8e      	ldr	r3, [pc, #568]	; (80027dc <HAL_RCC_OscConfig+0x4f8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d118      	bne.n	80025e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ae:	4b8b      	ldr	r3, [pc, #556]	; (80027dc <HAL_RCC_OscConfig+0x4f8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a8a      	ldr	r2, [pc, #552]	; (80027dc <HAL_RCC_OscConfig+0x4f8>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ba:	f7fe f86d 	bl	8000698 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c2:	f7fe f869 	bl	8000698 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b64      	cmp	r3, #100	; 0x64
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e0fd      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	4b81      	ldr	r3, [pc, #516]	; (80027dc <HAL_RCC_OscConfig+0x4f8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x312>
 80025e8:	4b7b      	ldr	r3, [pc, #492]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4a7a      	ldr	r2, [pc, #488]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6213      	str	r3, [r2, #32]
 80025f4:	e02d      	b.n	8002652 <HAL_RCC_OscConfig+0x36e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x334>
 80025fe:	4b76      	ldr	r3, [pc, #472]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a75      	ldr	r2, [pc, #468]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6213      	str	r3, [r2, #32]
 800260a:	4b73      	ldr	r3, [pc, #460]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4a72      	ldr	r2, [pc, #456]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002610:	f023 0304 	bic.w	r3, r3, #4
 8002614:	6213      	str	r3, [r2, #32]
 8002616:	e01c      	b.n	8002652 <HAL_RCC_OscConfig+0x36e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b05      	cmp	r3, #5
 800261e:	d10c      	bne.n	800263a <HAL_RCC_OscConfig+0x356>
 8002620:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4a6c      	ldr	r2, [pc, #432]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002626:	f043 0304 	orr.w	r3, r3, #4
 800262a:	6213      	str	r3, [r2, #32]
 800262c:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4a69      	ldr	r2, [pc, #420]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6213      	str	r3, [r2, #32]
 8002638:	e00b      	b.n	8002652 <HAL_RCC_OscConfig+0x36e>
 800263a:	4b67      	ldr	r3, [pc, #412]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a66      	ldr	r2, [pc, #408]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	6213      	str	r3, [r2, #32]
 8002646:	4b64      	ldr	r3, [pc, #400]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4a63      	ldr	r2, [pc, #396]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d015      	beq.n	8002686 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265a:	f7fe f81d 	bl	8000698 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002660:	e00a      	b.n	8002678 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002662:	f7fe f819 	bl	8000698 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002670:	4293      	cmp	r3, r2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e0ab      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002678:	4b57      	ldr	r3, [pc, #348]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ee      	beq.n	8002662 <HAL_RCC_OscConfig+0x37e>
 8002684:	e014      	b.n	80026b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7fe f807 	bl	8000698 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7fe f803 	bl	8000698 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e095      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a4:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ee      	bne.n	800268e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d105      	bne.n	80026c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b6:	4b48      	ldr	r3, [pc, #288]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4a47      	ldr	r2, [pc, #284]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8081 	beq.w	80027ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026cc:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d061      	beq.n	800279c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d146      	bne.n	800276e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e0:	4b3f      	ldr	r3, [pc, #252]	; (80027e0 <HAL_RCC_OscConfig+0x4fc>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fd ffd7 	bl	8000698 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fd ffd3 	bl	8000698 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e067      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002700:	4b35      	ldr	r3, [pc, #212]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002714:	d108      	bne.n	8002728 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002716:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	492d      	ldr	r1, [pc, #180]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002728:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a19      	ldr	r1, [r3, #32]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	430b      	orrs	r3, r1
 800273a:	4927      	ldr	r1, [pc, #156]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002740:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <HAL_RCC_OscConfig+0x4fc>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7fd ffa7 	bl	8000698 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274e:	f7fd ffa3 	bl	8000698 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e037      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x46a>
 800276c:	e02f      	b.n	80027ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_RCC_OscConfig+0x4fc>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7fd ff90 	bl	8000698 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277c:	f7fd ff8c 	bl	8000698 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e020      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x498>
 800279a:	e018      	b.n	80027ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e013      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_OscConfig+0x4f4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d106      	bne.n	80027ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40007000 	.word	0x40007000
 80027e0:	42420060 	.word	0x42420060

080027e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0d0      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b6a      	ldr	r3, [pc, #424]	; (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d910      	bls.n	8002828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b67      	ldr	r3, [pc, #412]	; (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	4965      	ldr	r1, [pc, #404]	; (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0b8      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002840:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800284a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002858:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002862:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	494d      	ldr	r1, [pc, #308]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d040      	beq.n	8002904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d115      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07f      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e073      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e06b      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4936      	ldr	r1, [pc, #216]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7fd fee0 	bl	8000698 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fd fedc 	bl	8000698 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e053      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d210      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 0207 	bic.w	r2, r3, #7
 800291a:	4922      	ldr	r1, [pc, #136]	; (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e032      	b.n	800299a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4916      	ldr	r1, [pc, #88]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	490e      	ldr	r1, [pc, #56]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002972:	f000 f821 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002976:	4601      	mov	r1, r0
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <HAL_RCC_ClockConfig+0x1c8>)
 8002984:	5cd3      	ldrb	r3, [r2, r3]
 8002986:	fa21 f303 	lsr.w	r3, r1, r3
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_RCC_ClockConfig+0x1cc>)
 800298c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fe3e 	bl	8000614 <HAL_InitTick>

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40022000 	.word	0x40022000
 80029a8:	40021000 	.word	0x40021000
 80029ac:	08009a98 	.word	0x08009a98
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000004 	.word	0x20000004

080029b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	b490      	push	{r4, r7}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029be:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029c0:	1d3c      	adds	r4, r7, #4
 80029c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029c8:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	2300      	movs	r3, #0
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d002      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x40>
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d003      	beq.n	80029fe <HAL_RCC_GetSysClockFreq+0x46>
 80029f6:	e02d      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029fa:	623b      	str	r3, [r7, #32]
      break;
 80029fc:	e02d      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	0c9b      	lsrs	r3, r3, #18
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d013      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	0c5b      	lsrs	r3, r3, #17
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	4a0f      	ldr	r2, [pc, #60]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a36:	fb02 f203 	mul.w	r2, r2, r3
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
 8002a42:	e004      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	623b      	str	r3, [r7, #32]
      break;
 8002a52:	e002      	b.n	8002a5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a56:	623b      	str	r3, [r7, #32]
      break;
 8002a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3728      	adds	r7, #40	; 0x28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc90      	pop	{r4, r7}
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	08009a00 	.word	0x08009a00
 8002a6c:	08009a10 	.word	0x08009a10
 8002a70:	40021000 	.word	0x40021000
 8002a74:	007a1200 	.word	0x007a1200
 8002a78:	003d0900 	.word	0x003d0900

08002a7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a84:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <RCC_Delay+0x34>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <RCC_Delay+0x38>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0a5b      	lsrs	r3, r3, #9
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a98:	bf00      	nop
  }
  while (Delay --);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	1e5a      	subs	r2, r3, #1
 8002a9e:	60fa      	str	r2, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f9      	bne.n	8002a98 <RCC_Delay+0x1c>
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	10624dd3 	.word	0x10624dd3

08002ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d07d      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10d      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae4:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	4a4b      	ldr	r2, [pc, #300]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aee:	61d3      	str	r3, [r2, #28]
 8002af0:	4b49      	ldr	r3, [pc, #292]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afc:	2301      	movs	r3, #1
 8002afe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d118      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0c:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a42      	ldr	r2, [pc, #264]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b18:	f7fd fdbe 	bl	8000698 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1e:	e008      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b20:	f7fd fdba 	bl	8000698 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e06d      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b32:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d02e      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d027      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b5c:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b66:	4b2e      	ldr	r3, [pc, #184]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b6c:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b72:	4a29      	ldr	r2, [pc, #164]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d014      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7fd fd89 	bl	8000698 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fd fd85 	bl	8000698 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e036      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ee      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bac:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4917      	ldr	r1, [pc, #92]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	490b      	ldr	r1, [pc, #44]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	4904      	ldr	r1, [pc, #16]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	42420440 	.word	0x42420440

08002c24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c24:	b084      	sub	sp, #16
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	f107 0014 	add.w	r0, r7, #20
 8002c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	b004      	add	sp, #16
 8002c42:	4770      	bx	lr

08002c44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c54:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002c58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c78:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002c7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4013      	ands	r3, r2
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	f107 0014 	add.w	r0, r7, #20
 8002cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	b004      	add	sp, #16
 8002cfa:	4770      	bx	lr

08002cfc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b09b      	sub	sp, #108	; 0x6c
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d22:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	78db      	ldrb	r3, [r3, #3]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d81f      	bhi.n	8002d6e <USB_ActivateEndpoint+0x72>
 8002d2e:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <USB_ActivateEndpoint+0x38>)
 8002d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d34:	08002d45 	.word	0x08002d45
 8002d38:	08002d61 	.word	0x08002d61
 8002d3c:	08002d77 	.word	0x08002d77
 8002d40:	08002d53 	.word	0x08002d53
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002d44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d4c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d50:	e012      	b.n	8002d78 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002d52:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d56:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002d5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d5e:	e00b      	b.n	8002d78 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002d60:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d68:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d6c:	e004      	b.n	8002d78 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002d74:	e000      	b.n	8002d78 <USB_ActivateEndpoint+0x7c>
      break;
 8002d76:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	441a      	add	r2, r3
 8002d82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	441a      	add	r2, r3
 8002dc8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	7b1b      	ldrb	r3, [r3, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f040 8149 	bne.w	800307c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	785b      	ldrb	r3, [r3, #1]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8084 	beq.w	8002efc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	4413      	add	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	011a      	lsls	r2, r3, #4
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	88db      	ldrh	r3, [r3, #6]
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	81fb      	strh	r3, [r7, #14]
 8002e36:	89fb      	ldrh	r3, [r7, #14]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01b      	beq.n	8002e78 <USB_ActivateEndpoint+0x17c>
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e56:	81bb      	strh	r3, [r7, #12]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	441a      	add	r2, r3
 8002e62:	89bb      	ldrh	r3, [r7, #12]
 8002e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	78db      	ldrb	r3, [r3, #3]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d020      	beq.n	8002ec2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e96:	813b      	strh	r3, [r7, #8]
 8002e98:	893b      	ldrh	r3, [r7, #8]
 8002e9a:	f083 0320 	eor.w	r3, r3, #32
 8002e9e:	813b      	strh	r3, [r7, #8]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	441a      	add	r2, r3
 8002eaa:	893b      	ldrh	r3, [r7, #8]
 8002eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	8013      	strh	r3, [r2, #0]
 8002ec0:	e27f      	b.n	80033c2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed8:	817b      	strh	r3, [r7, #10]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	441a      	add	r2, r3
 8002ee4:	897b      	ldrh	r3, [r7, #10]
 8002ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	8013      	strh	r3, [r2, #0]
 8002efa:	e262      	b.n	80033c2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	4413      	add	r3, r2
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	011a      	lsls	r2, r3, #4
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	88db      	ldrh	r3, [r3, #6]
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	4413      	add	r3, r2
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	011a      	lsls	r2, r3, #4
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f52:	623b      	str	r3, [r7, #32]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d112      	bne.n	8002f82 <USB_ActivateEndpoint+0x286>
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	801a      	strh	r2, [r3, #0]
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	801a      	strh	r2, [r3, #0]
 8002f80:	e02f      	b.n	8002fe2 <USB_ActivateEndpoint+0x2e6>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b3e      	cmp	r3, #62	; 0x3e
 8002f88:	d813      	bhi.n	8002fb2 <USB_ActivateEndpoint+0x2b6>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	085b      	lsrs	r3, r3, #1
 8002f90:	663b      	str	r3, [r7, #96]	; 0x60
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <USB_ActivateEndpoint+0x2a8>
 8002f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8002fa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	029b      	lsls	r3, r3, #10
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	801a      	strh	r2, [r3, #0]
 8002fb0:	e017      	b.n	8002fe2 <USB_ActivateEndpoint+0x2e6>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <USB_ActivateEndpoint+0x2d0>
 8002fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	663b      	str	r3, [r7, #96]	; 0x60
 8002fcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	029b      	lsls	r3, r3, #10
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	83fb      	strh	r3, [r7, #30]
 8002ff0:	8bfb      	ldrh	r3, [r7, #30]
 8002ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01b      	beq.n	8003032 <USB_ActivateEndpoint+0x336>
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003010:	83bb      	strh	r3, [r7, #28]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	441a      	add	r2, r3
 800301c:	8bbb      	ldrh	r3, [r7, #28]
 800301e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800302a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302e:	b29b      	uxth	r3, r3
 8003030:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003048:	837b      	strh	r3, [r7, #26]
 800304a:	8b7b      	ldrh	r3, [r7, #26]
 800304c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003050:	837b      	strh	r3, [r7, #26]
 8003052:	8b7b      	ldrh	r3, [r7, #26]
 8003054:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003058:	837b      	strh	r3, [r7, #26]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	441a      	add	r2, r3
 8003064:	8b7b      	ldrh	r3, [r7, #26]
 8003066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800306a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800306e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003076:	b29b      	uxth	r3, r3
 8003078:	8013      	strh	r3, [r2, #0]
 800307a:	e1a2      	b.n	80033c2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	441a      	add	r2, r3
 80030a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80030a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80030b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c8:	4413      	add	r3, r2
 80030ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	011a      	lsls	r2, r3, #4
 80030d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030da:	657b      	str	r3, [r7, #84]	; 0x54
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	891b      	ldrh	r3, [r3, #8]
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ea:	801a      	strh	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	653b      	str	r3, [r7, #80]	; 0x50
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fc:	4413      	add	r3, r2
 80030fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	011a      	lsls	r2, r3, #4
 8003106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003108:	4413      	add	r3, r2
 800310a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800310e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	895b      	ldrh	r3, [r3, #10]
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	b29b      	uxth	r3, r3
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	785b      	ldrb	r3, [r3, #1]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 8091 	bne.w	800324c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003138:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800313a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01b      	beq.n	800317a <USB_ActivateEndpoint+0x47e>
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003158:	877b      	strh	r3, [r7, #58]	; 0x3a
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	441a      	add	r2, r3
 8003164:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800316a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800316e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003176:	b29b      	uxth	r3, r3
 8003178:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	873b      	strh	r3, [r7, #56]	; 0x38
 8003188:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01b      	beq.n	80031ca <USB_ActivateEndpoint+0x4ce>
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	441a      	add	r2, r3
 80031b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80031e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80031ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	441a      	add	r2, r3
 80031fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800320e:	b29b      	uxth	r3, r3
 8003210:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003228:	867b      	strh	r3, [r7, #50]	; 0x32
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	441a      	add	r2, r3
 8003234:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800323a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800323e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003246:	b29b      	uxth	r3, r3
 8003248:	8013      	strh	r3, [r2, #0]
 800324a:	e0ba      	b.n	80033c2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800325c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01d      	beq.n	80032a4 <USB_ActivateEndpoint+0x5a8>
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	441a      	add	r2, r3
 800328c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800329c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80032b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01d      	beq.n	80032fc <USB_ActivateEndpoint+0x600>
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	441a      	add	r2, r3
 80032e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80032e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	78db      	ldrb	r3, [r3, #3]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d024      	beq.n	800334e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800331a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800331e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003322:	f083 0320 	eor.w	r3, r3, #32
 8003326:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	441a      	add	r2, r3
 8003334:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800333c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003348:	b29b      	uxth	r3, r3
 800334a:	8013      	strh	r3, [r2, #0]
 800334c:	e01d      	b.n	800338a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003364:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	441a      	add	r2, r3
 8003372:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800337a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800337e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003386:	b29b      	uxth	r3, r3
 8003388:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800339c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	441a      	add	r2, r3
 80033ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033be:	b29b      	uxth	r3, r3
 80033c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80033c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	376c      	adds	r7, #108	; 0x6c
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b08d      	sub	sp, #52	; 0x34
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	7b1b      	ldrb	r3, [r3, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 808e 	bne.w	8003500 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	785b      	ldrb	r3, [r3, #1]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d044      	beq.n	8003476 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	81bb      	strh	r3, [r7, #12]
 80033fa:	89bb      	ldrh	r3, [r7, #12]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01b      	beq.n	800343c <USB_DeactivateEndpoint+0x6c>
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	817b      	strh	r3, [r7, #10]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	441a      	add	r2, r3
 8003426:	897b      	ldrh	r3, [r7, #10]
 8003428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800342c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003434:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003438:	b29b      	uxth	r3, r3
 800343a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003452:	813b      	strh	r3, [r7, #8]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	441a      	add	r2, r3
 800345e:	893b      	ldrh	r3, [r7, #8]
 8003460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003470:	b29b      	uxth	r3, r3
 8003472:	8013      	strh	r3, [r2, #0]
 8003474:	e192      	b.n	800379c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	827b      	strh	r3, [r7, #18]
 8003484:	8a7b      	ldrh	r3, [r7, #18]
 8003486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01b      	beq.n	80034c6 <USB_DeactivateEndpoint+0xf6>
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a4:	823b      	strh	r3, [r7, #16]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	441a      	add	r2, r3
 80034b0:	8a3b      	ldrh	r3, [r7, #16]
 80034b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034dc:	81fb      	strh	r3, [r7, #14]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	441a      	add	r2, r3
 80034e8:	89fb      	ldrh	r3, [r7, #14]
 80034ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	8013      	strh	r3, [r2, #0]
 80034fe:	e14d      	b.n	800379c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	785b      	ldrb	r3, [r3, #1]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f040 80a5 	bne.w	8003654 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	843b      	strh	r3, [r7, #32]
 8003518:	8c3b      	ldrh	r3, [r7, #32]
 800351a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01b      	beq.n	800355a <USB_DeactivateEndpoint+0x18a>
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003538:	83fb      	strh	r3, [r7, #30]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	441a      	add	r2, r3
 8003544:	8bfb      	ldrh	r3, [r7, #30]
 8003546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800354a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800354e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003556:	b29b      	uxth	r3, r3
 8003558:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	83bb      	strh	r3, [r7, #28]
 8003568:	8bbb      	ldrh	r3, [r7, #28]
 800356a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01b      	beq.n	80035aa <USB_DeactivateEndpoint+0x1da>
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003588:	837b      	strh	r3, [r7, #26]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	441a      	add	r2, r3
 8003594:	8b7b      	ldrh	r3, [r7, #26]
 8003596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800359a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800359e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c0:	833b      	strh	r3, [r7, #24]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	441a      	add	r2, r3
 80035cc:	8b3b      	ldrh	r3, [r7, #24]
 80035ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035de:	b29b      	uxth	r3, r3
 80035e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f8:	82fb      	strh	r3, [r7, #22]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	441a      	add	r2, r3
 8003604:	8afb      	ldrh	r3, [r7, #22]
 8003606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800360a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800360e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003616:	b29b      	uxth	r3, r3
 8003618:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003630:	82bb      	strh	r3, [r7, #20]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	441a      	add	r2, r3
 800363c:	8abb      	ldrh	r3, [r7, #20]
 800363e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800364e:	b29b      	uxth	r3, r3
 8003650:	8013      	strh	r3, [r2, #0]
 8003652:	e0a3      	b.n	800379c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003662:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01b      	beq.n	80036a4 <USB_DeactivateEndpoint+0x2d4>
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	441a      	add	r2, r3
 800368e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800369c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80036b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01b      	beq.n	80036f4 <USB_DeactivateEndpoint+0x324>
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	441a      	add	r2, r3
 80036de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	441a      	add	r2, r3
 8003716:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800371c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003728:	b29b      	uxth	r3, r3
 800372a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29b      	uxth	r3, r3
 800373a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003742:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	441a      	add	r2, r3
 800374e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003760:	b29b      	uxth	r3, r3
 8003762:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	b29b      	uxth	r3, r3
 8003772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377a:	847b      	strh	r3, [r7, #34]	; 0x22
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	441a      	add	r2, r3
 8003786:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800378c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003798:	b29b      	uxth	r3, r3
 800379a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3734      	adds	r7, #52	; 0x34
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b0c4      	sub	sp, #272	; 0x110
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	1d3b      	adds	r3, r7, #4
 80037b0:	6018      	str	r0, [r3, #0]
 80037b2:	463b      	mov	r3, r7
 80037b4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037b6:	463b      	mov	r3, r7
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	785b      	ldrb	r3, [r3, #1]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	f040 8557 	bne.w	8004270 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80037c2:	463b      	mov	r3, r7
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699a      	ldr	r2, [r3, #24]
 80037c8:	463b      	mov	r3, r7
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d905      	bls.n	80037de <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80037d2:	463b      	mov	r3, r7
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80037dc:	e004      	b.n	80037e8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80037de:	463b      	mov	r3, r7
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80037e8:	463b      	mov	r3, r7
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	7b1b      	ldrb	r3, [r3, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d12c      	bne.n	800384c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80037f2:	463b      	mov	r3, r7
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6959      	ldr	r1, [r3, #20]
 80037f8:	463b      	mov	r3, r7
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	88da      	ldrh	r2, [r3, #6]
 80037fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003802:	b29b      	uxth	r3, r3
 8003804:	1d38      	adds	r0, r7, #4
 8003806:	6800      	ldr	r0, [r0, #0]
 8003808:	f001 fa2c 	bl	8004c64 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800380c:	1d3b      	adds	r3, r7, #4
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381a:	b29b      	uxth	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	4413      	add	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	463b      	mov	r3, r7
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	011a      	lsls	r2, r3, #4
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	4413      	add	r3, r2
 8003830:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003834:	f107 0310 	add.w	r3, r7, #16
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800383e:	b29a      	uxth	r2, r3
 8003840:	f107 0310 	add.w	r3, r7, #16
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	801a      	strh	r2, [r3, #0]
 8003848:	f000 bcdd 	b.w	8004206 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800384c:	463b      	mov	r3, r7
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	78db      	ldrb	r3, [r3, #3]
 8003852:	2b02      	cmp	r3, #2
 8003854:	f040 8347 	bne.w	8003ee6 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003858:	463b      	mov	r3, r7
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6a1a      	ldr	r2, [r3, #32]
 800385e:	463b      	mov	r3, r7
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	429a      	cmp	r2, r3
 8003866:	f240 82eb 	bls.w	8003e40 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	463b      	mov	r3, r7
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003884:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003888:	1d3b      	adds	r3, r7, #4
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	463b      	mov	r3, r7
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800389a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800389e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80038a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80038ae:	463b      	mov	r3, r7
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6a1a      	ldr	r2, [r3, #32]
 80038b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b8:	1ad2      	subs	r2, r2, r3
 80038ba:	463b      	mov	r3, r7
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	463b      	mov	r3, r7
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 8159 	beq.w	8003b8e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80038dc:	1d3b      	adds	r3, r7, #4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
 80038e2:	463b      	mov	r3, r7
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	785b      	ldrb	r3, [r3, #1]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d164      	bne.n	80039b6 <USB_EPStartXfer+0x20e>
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038f2:	1d3b      	adds	r3, r7, #4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003900:	4413      	add	r3, r2
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003904:	463b      	mov	r3, r7
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	011a      	lsls	r2, r3, #4
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390e:	4413      	add	r3, r2
 8003910:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
 8003916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d112      	bne.n	8003944 <USB_EPStartXfer+0x19c>
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003928:	b29a      	uxth	r2, r3
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800393c:	b29a      	uxth	r2, r3
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	e054      	b.n	80039ee <USB_EPStartXfer+0x246>
 8003944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003948:	2b3e      	cmp	r3, #62	; 0x3e
 800394a:	d817      	bhi.n	800397c <USB_EPStartXfer+0x1d4>
 800394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d004      	beq.n	800396c <USB_EPStartXfer+0x1c4>
 8003962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003966:	3301      	adds	r3, #1
 8003968:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800396c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003970:	b29b      	uxth	r3, r3
 8003972:	029b      	lsls	r3, r3, #10
 8003974:	b29a      	uxth	r2, r3
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	801a      	strh	r2, [r3, #0]
 800397a:	e038      	b.n	80039ee <USB_EPStartXfer+0x246>
 800397c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2b00      	cmp	r3, #0
 8003990:	d104      	bne.n	800399c <USB_EPStartXfer+0x1f4>
 8003992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003996:	3b01      	subs	r3, #1
 8003998:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800399c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	029b      	lsls	r3, r3, #10
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	801a      	strh	r2, [r3, #0]
 80039b4:	e01b      	b.n	80039ee <USB_EPStartXfer+0x246>
 80039b6:	463b      	mov	r3, r7
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	785b      	ldrb	r3, [r3, #1]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d116      	bne.n	80039ee <USB_EPStartXfer+0x246>
 80039c0:	1d3b      	adds	r3, r7, #4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	4413      	add	r3, r2
 80039d0:	637b      	str	r3, [r7, #52]	; 0x34
 80039d2:	463b      	mov	r3, r7
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	011a      	lsls	r2, r3, #4
 80039da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039dc:	4413      	add	r3, r2
 80039de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039e2:	633b      	str	r3, [r7, #48]	; 0x30
 80039e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80039ee:	463b      	mov	r3, r7
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	895b      	ldrh	r3, [r3, #10]
 80039f4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039f8:	463b      	mov	r3, r7
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6959      	ldr	r1, [r3, #20]
 80039fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003a08:	1d38      	adds	r0, r7, #4
 8003a0a:	6800      	ldr	r0, [r0, #0]
 8003a0c:	f001 f92a 	bl	8004c64 <USB_WritePMA>
            ep->xfer_buff += len;
 8003a10:	463b      	mov	r3, r7
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a1a:	441a      	add	r2, r3
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003a22:	463b      	mov	r3, r7
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6a1a      	ldr	r2, [r3, #32]
 8003a28:	463b      	mov	r3, r7
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d909      	bls.n	8003a46 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003a32:	463b      	mov	r3, r7
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a1a      	ldr	r2, [r3, #32]
 8003a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a3c:	1ad2      	subs	r2, r2, r3
 8003a3e:	463b      	mov	r3, r7
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	621a      	str	r2, [r3, #32]
 8003a44:	e008      	b.n	8003a58 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003a46:	463b      	mov	r3, r7
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003a50:	463b      	mov	r3, r7
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2200      	movs	r2, #0
 8003a56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a58:	463b      	mov	r3, r7
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d164      	bne.n	8003b2c <USB_EPStartXfer+0x384>
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	1d3b      	adds	r3, r7, #4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	4413      	add	r3, r2
 8003a78:	61fb      	str	r3, [r7, #28]
 8003a7a:	463b      	mov	r3, r7
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	011a      	lsls	r2, r3, #4
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	4413      	add	r3, r2
 8003a86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d112      	bne.n	8003aba <USB_EPStartXfer+0x312>
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	801a      	strh	r2, [r3, #0]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	801a      	strh	r2, [r3, #0]
 8003ab8:	e057      	b.n	8003b6a <USB_EPStartXfer+0x3c2>
 8003aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003abe:	2b3e      	cmp	r3, #62	; 0x3e
 8003ac0:	d817      	bhi.n	8003af2 <USB_EPStartXfer+0x34a>
 8003ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <USB_EPStartXfer+0x33a>
 8003ad8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003adc:	3301      	adds	r3, #1
 8003ade:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ae2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	029b      	lsls	r3, r3, #10
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	801a      	strh	r2, [r3, #0]
 8003af0:	e03b      	b.n	8003b6a <USB_EPStartXfer+0x3c2>
 8003af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <USB_EPStartXfer+0x36a>
 8003b08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	029b      	lsls	r3, r3, #10
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	801a      	strh	r2, [r3, #0]
 8003b2a:	e01e      	b.n	8003b6a <USB_EPStartXfer+0x3c2>
 8003b2c:	463b      	mov	r3, r7
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	785b      	ldrb	r3, [r3, #1]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d119      	bne.n	8003b6a <USB_EPStartXfer+0x3c2>
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3c:	1d3b      	adds	r3, r7, #4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	4413      	add	r3, r2
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4e:	463b      	mov	r3, r7
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	011a      	lsls	r2, r3, #4
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	4413      	add	r3, r2
 8003b5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b5e:	623b      	str	r3, [r7, #32]
 8003b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	891b      	ldrh	r3, [r3, #8]
 8003b70:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b74:	463b      	mov	r3, r7
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6959      	ldr	r1, [r3, #20]
 8003b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003b84:	1d38      	adds	r0, r7, #4
 8003b86:	6800      	ldr	r0, [r0, #0]
 8003b88:	f001 f86c 	bl	8004c64 <USB_WritePMA>
 8003b8c:	e33b      	b.n	8004206 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b8e:	463b      	mov	r3, r7
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d164      	bne.n	8003c62 <USB_EPStartXfer+0x4ba>
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b9e:	1d3b      	adds	r3, r7, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bac:	4413      	add	r3, r2
 8003bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb0:	463b      	mov	r3, r7
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	011a      	lsls	r2, r3, #4
 8003bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bba:	4413      	add	r3, r2
 8003bbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d112      	bne.n	8003bf0 <USB_EPStartXfer+0x448>
 8003bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bec:	801a      	strh	r2, [r3, #0]
 8003bee:	e057      	b.n	8003ca0 <USB_EPStartXfer+0x4f8>
 8003bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf4:	2b3e      	cmp	r3, #62	; 0x3e
 8003bf6:	d817      	bhi.n	8003c28 <USB_EPStartXfer+0x480>
 8003bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d004      	beq.n	8003c18 <USB_EPStartXfer+0x470>
 8003c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c12:	3301      	adds	r3, #1
 8003c14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	029b      	lsls	r3, r3, #10
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c24:	801a      	strh	r2, [r3, #0]
 8003c26:	e03b      	b.n	8003ca0 <USB_EPStartXfer+0x4f8>
 8003c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d104      	bne.n	8003c48 <USB_EPStartXfer+0x4a0>
 8003c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c42:	3b01      	subs	r3, #1
 8003c44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	029b      	lsls	r3, r3, #10
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5e:	801a      	strh	r2, [r3, #0]
 8003c60:	e01e      	b.n	8003ca0 <USB_EPStartXfer+0x4f8>
 8003c62:	463b      	mov	r3, r7
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d119      	bne.n	8003ca0 <USB_EPStartXfer+0x4f8>
 8003c6c:	1d3b      	adds	r3, r7, #4
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	657b      	str	r3, [r7, #84]	; 0x54
 8003c72:	1d3b      	adds	r3, r7, #4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c80:	4413      	add	r3, r2
 8003c82:	657b      	str	r3, [r7, #84]	; 0x54
 8003c84:	463b      	mov	r3, r7
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	011a      	lsls	r2, r3, #4
 8003c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c8e:	4413      	add	r3, r2
 8003c90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c94:	653b      	str	r3, [r7, #80]	; 0x50
 8003c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003ca0:	463b      	mov	r3, r7
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	891b      	ldrh	r3, [r3, #8]
 8003ca6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003caa:	463b      	mov	r3, r7
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6959      	ldr	r1, [r3, #20]
 8003cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003cba:	1d38      	adds	r0, r7, #4
 8003cbc:	6800      	ldr	r0, [r0, #0]
 8003cbe:	f000 ffd1 	bl	8004c64 <USB_WritePMA>
            ep->xfer_buff += len;
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ccc:	441a      	add	r2, r3
 8003cce:	463b      	mov	r3, r7
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003cd4:	463b      	mov	r3, r7
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6a1a      	ldr	r2, [r3, #32]
 8003cda:	463b      	mov	r3, r7
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d909      	bls.n	8003cf8 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6a1a      	ldr	r2, [r3, #32]
 8003cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cee:	1ad2      	subs	r2, r2, r3
 8003cf0:	463b      	mov	r3, r7
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	621a      	str	r2, [r3, #32]
 8003cf6:	e008      	b.n	8003d0a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003d02:	463b      	mov	r3, r7
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d0a:	1d3b      	adds	r3, r7, #4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d10:	463b      	mov	r3, r7
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	785b      	ldrb	r3, [r3, #1]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d164      	bne.n	8003de4 <USB_EPStartXfer+0x63c>
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d20:	1d3b      	adds	r3, r7, #4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2e:	4413      	add	r3, r2
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d32:	463b      	mov	r3, r7
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	011a      	lsls	r2, r3, #4
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d112      	bne.n	8003d72 <USB_EPStartXfer+0x5ca>
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5a:	801a      	strh	r2, [r3, #0]
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	801a      	strh	r2, [r3, #0]
 8003d70:	e054      	b.n	8003e1c <USB_EPStartXfer+0x674>
 8003d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d76:	2b3e      	cmp	r3, #62	; 0x3e
 8003d78:	d817      	bhi.n	8003daa <USB_EPStartXfer+0x602>
 8003d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <USB_EPStartXfer+0x5f2>
 8003d90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d94:	3301      	adds	r3, #1
 8003d96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	029b      	lsls	r3, r3, #10
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	801a      	strh	r2, [r3, #0]
 8003da8:	e038      	b.n	8003e1c <USB_EPStartXfer+0x674>
 8003daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <USB_EPStartXfer+0x622>
 8003dc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	029b      	lsls	r3, r3, #10
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	e01b      	b.n	8003e1c <USB_EPStartXfer+0x674>
 8003de4:	463b      	mov	r3, r7
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	785b      	ldrb	r3, [r3, #1]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d116      	bne.n	8003e1c <USB_EPStartXfer+0x674>
 8003dee:	1d3b      	adds	r3, r7, #4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dfc:	4413      	add	r3, r2
 8003dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8003e00:	463b      	mov	r3, r7
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	011a      	lsls	r2, r3, #4
 8003e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e10:	643b      	str	r3, [r7, #64]	; 0x40
 8003e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003e1c:	463b      	mov	r3, r7
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	895b      	ldrh	r3, [r3, #10]
 8003e22:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e26:	463b      	mov	r3, r7
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6959      	ldr	r1, [r3, #20]
 8003e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e36:	1d38      	adds	r0, r7, #4
 8003e38:	6800      	ldr	r0, [r0, #0]
 8003e3a:	f000 ff13 	bl	8004c64 <USB_WritePMA>
 8003e3e:	e1e2      	b.n	8004206 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003e40:	463b      	mov	r3, r7
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003e4a:	1d3b      	adds	r3, r7, #4
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	463b      	mov	r3, r7
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e64:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003e68:	1d3b      	adds	r3, r7, #4
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	463b      	mov	r3, r7
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	441a      	add	r2, r3
 8003e76:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003e8e:	1d3b      	adds	r3, r7, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	663b      	str	r3, [r7, #96]	; 0x60
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea2:	4413      	add	r3, r2
 8003ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	011a      	lsls	r2, r3, #4
 8003eae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003ec2:	463b      	mov	r3, r7
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	891b      	ldrh	r3, [r3, #8]
 8003ec8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ecc:	463b      	mov	r3, r7
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6959      	ldr	r1, [r3, #20]
 8003ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003edc:	1d38      	adds	r0, r7, #4
 8003ede:	6800      	ldr	r0, [r0, #0]
 8003ee0:	f000 fec0 	bl	8004c64 <USB_WritePMA>
 8003ee4:	e18f      	b.n	8004206 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003ee6:	1d3b      	adds	r3, r7, #4
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	463b      	mov	r3, r7
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 808f 	beq.w	8004020 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f02:	1d3b      	adds	r3, r7, #4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f08:	463b      	mov	r3, r7
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	785b      	ldrb	r3, [r3, #1]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d164      	bne.n	8003fdc <USB_EPStartXfer+0x834>
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	673b      	str	r3, [r7, #112]	; 0x70
 8003f18:	1d3b      	adds	r3, r7, #4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f26:	4413      	add	r3, r2
 8003f28:	673b      	str	r3, [r7, #112]	; 0x70
 8003f2a:	463b      	mov	r3, r7
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	011a      	lsls	r2, r3, #4
 8003f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f34:	4413      	add	r3, r2
 8003f36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d112      	bne.n	8003f6a <USB_EPStartXfer+0x7c2>
 8003f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f52:	801a      	strh	r2, [r3, #0]
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f66:	801a      	strh	r2, [r3, #0]
 8003f68:	e054      	b.n	8004014 <USB_EPStartXfer+0x86c>
 8003f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f6e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f70:	d817      	bhi.n	8003fa2 <USB_EPStartXfer+0x7fa>
 8003f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <USB_EPStartXfer+0x7ea>
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	029b      	lsls	r3, r3, #10
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	e038      	b.n	8004014 <USB_EPStartXfer+0x86c>
 8003fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d104      	bne.n	8003fc2 <USB_EPStartXfer+0x81a>
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	029b      	lsls	r3, r3, #10
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	e01b      	b.n	8004014 <USB_EPStartXfer+0x86c>
 8003fdc:	463b      	mov	r3, r7
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	785b      	ldrb	r3, [r3, #1]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d116      	bne.n	8004014 <USB_EPStartXfer+0x86c>
 8003fe6:	1d3b      	adds	r3, r7, #4
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff4:	4413      	add	r3, r2
 8003ff6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	011a      	lsls	r2, r3, #4
 8004000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004002:	4413      	add	r3, r2
 8004004:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004008:	677b      	str	r3, [r7, #116]	; 0x74
 800400a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800400e:	b29a      	uxth	r2, r3
 8004010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004012:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004014:	463b      	mov	r3, r7
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	895b      	ldrh	r3, [r3, #10]
 800401a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800401e:	e097      	b.n	8004150 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004020:	463b      	mov	r3, r7
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	785b      	ldrb	r3, [r3, #1]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d168      	bne.n	80040fc <USB_EPStartXfer+0x954>
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800403a:	b29b      	uxth	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004042:	4413      	add	r3, r2
 8004044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004048:	463b      	mov	r3, r7
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	011a      	lsls	r2, r3, #4
 8004050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004054:	4413      	add	r3, r2
 8004056:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800405a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800405c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d112      	bne.n	800408a <USB_EPStartXfer+0x8e2>
 8004064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800406e:	b29a      	uxth	r2, r3
 8004070:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004072:	801a      	strh	r2, [r3, #0]
 8004074:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29b      	uxth	r3, r3
 800407a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800407e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004082:	b29a      	uxth	r2, r3
 8004084:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004086:	801a      	strh	r2, [r3, #0]
 8004088:	e05d      	b.n	8004146 <USB_EPStartXfer+0x99e>
 800408a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408e:	2b3e      	cmp	r3, #62	; 0x3e
 8004090:	d817      	bhi.n	80040c2 <USB_EPStartXfer+0x91a>
 8004092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004096:	085b      	lsrs	r3, r3, #1
 8004098:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800409c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d004      	beq.n	80040b2 <USB_EPStartXfer+0x90a>
 80040a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040ac:	3301      	adds	r3, #1
 80040ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	029b      	lsls	r3, r3, #10
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040be:	801a      	strh	r2, [r3, #0]
 80040c0:	e041      	b.n	8004146 <USB_EPStartXfer+0x99e>
 80040c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d104      	bne.n	80040e2 <USB_EPStartXfer+0x93a>
 80040d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040dc:	3b01      	subs	r3, #1
 80040de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	029b      	lsls	r3, r3, #10
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040f8:	801a      	strh	r2, [r3, #0]
 80040fa:	e024      	b.n	8004146 <USB_EPStartXfer+0x99e>
 80040fc:	463b      	mov	r3, r7
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	785b      	ldrb	r3, [r3, #1]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d11f      	bne.n	8004146 <USB_EPStartXfer+0x99e>
 8004106:	1d3b      	adds	r3, r7, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800410e:	1d3b      	adds	r3, r7, #4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800411e:	4413      	add	r3, r2
 8004120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004124:	463b      	mov	r3, r7
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	011a      	lsls	r2, r3, #4
 800412c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004130:	4413      	add	r3, r2
 8004132:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004136:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800413a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800413e:	b29a      	uxth	r2, r3
 8004140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004144:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004146:	463b      	mov	r3, r7
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	891b      	ldrh	r3, [r3, #8]
 800414c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004150:	463b      	mov	r3, r7
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6959      	ldr	r1, [r3, #20]
 8004156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800415a:	b29b      	uxth	r3, r3
 800415c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004160:	1d38      	adds	r0, r7, #4
 8004162:	6800      	ldr	r0, [r0, #0]
 8004164:	f000 fd7e 	bl	8004c64 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004168:	463b      	mov	r3, r7
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	785b      	ldrb	r3, [r3, #1]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d122      	bne.n	80041b8 <USB_EPStartXfer+0xa10>
 8004172:	1d3b      	adds	r3, r7, #4
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	463b      	mov	r3, r7
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004190:	1d3b      	adds	r3, r7, #4
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	463b      	mov	r3, r7
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	441a      	add	r2, r3
 800419e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80041a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	8013      	strh	r3, [r2, #0]
 80041b6:	e026      	b.n	8004206 <USB_EPStartXfer+0xa5e>
 80041b8:	463b      	mov	r3, r7
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d121      	bne.n	8004206 <USB_EPStartXfer+0xa5e>
 80041c2:	1d3b      	adds	r3, r7, #4
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	463b      	mov	r3, r7
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041dc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80041e0:	1d3b      	adds	r3, r7, #4
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	463b      	mov	r3, r7
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	441a      	add	r2, r3
 80041ee:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80041f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004202:	b29b      	uxth	r3, r3
 8004204:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004206:	1d3b      	adds	r3, r7, #4
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	463b      	mov	r3, r7
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	f107 020e 	add.w	r2, r7, #14
 800421c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004224:	8013      	strh	r3, [r2, #0]
 8004226:	f107 030e 	add.w	r3, r7, #14
 800422a:	f107 020e 	add.w	r2, r7, #14
 800422e:	8812      	ldrh	r2, [r2, #0]
 8004230:	f082 0210 	eor.w	r2, r2, #16
 8004234:	801a      	strh	r2, [r3, #0]
 8004236:	f107 030e 	add.w	r3, r7, #14
 800423a:	f107 020e 	add.w	r2, r7, #14
 800423e:	8812      	ldrh	r2, [r2, #0]
 8004240:	f082 0220 	eor.w	r2, r2, #32
 8004244:	801a      	strh	r2, [r3, #0]
 8004246:	1d3b      	adds	r3, r7, #4
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	463b      	mov	r3, r7
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	441a      	add	r2, r3
 8004254:	f107 030e 	add.w	r3, r7, #14
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426a:	b29b      	uxth	r3, r3
 800426c:	8013      	strh	r3, [r2, #0]
 800426e:	e3b5      	b.n	80049dc <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004270:	463b      	mov	r3, r7
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	7b1b      	ldrb	r3, [r3, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 8090 	bne.w	800439c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800427c:	463b      	mov	r3, r7
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	463b      	mov	r3, r7
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	429a      	cmp	r2, r3
 800428a:	d90e      	bls.n	80042aa <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800428c:	463b      	mov	r3, r7
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004296:	463b      	mov	r3, r7
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699a      	ldr	r2, [r3, #24]
 800429c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a0:	1ad2      	subs	r2, r2, r3
 80042a2:	463b      	mov	r3, r7
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	619a      	str	r2, [r3, #24]
 80042a8:	e008      	b.n	80042bc <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80042aa:	463b      	mov	r3, r7
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80042b4:	463b      	mov	r3, r7
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2200      	movs	r2, #0
 80042ba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80042bc:	1d3b      	adds	r3, r7, #4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042c4:	1d3b      	adds	r3, r7, #4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042d4:	4413      	add	r3, r2
 80042d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042da:	463b      	mov	r3, r7
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	011a      	lsls	r2, r3, #4
 80042e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042e6:	4413      	add	r3, r2
 80042e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d116      	bne.n	8004326 <USB_EPStartXfer+0xb7e>
 80042f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004304:	b29a      	uxth	r2, r3
 8004306:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800431c:	b29a      	uxth	r2, r3
 800431e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004322:	801a      	strh	r2, [r3, #0]
 8004324:	e32c      	b.n	8004980 <USB_EPStartXfer+0x11d8>
 8004326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432a:	2b3e      	cmp	r3, #62	; 0x3e
 800432c:	d818      	bhi.n	8004360 <USB_EPStartXfer+0xbb8>
 800432e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004332:	085b      	lsrs	r3, r3, #1
 8004334:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d004      	beq.n	800434e <USB_EPStartXfer+0xba6>
 8004344:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004348:	3301      	adds	r3, #1
 800434a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800434e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004352:	b29b      	uxth	r3, r3
 8004354:	029b      	lsls	r3, r3, #10
 8004356:	b29a      	uxth	r2, r3
 8004358:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	e30f      	b.n	8004980 <USB_EPStartXfer+0x11d8>
 8004360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004364:	095b      	lsrs	r3, r3, #5
 8004366:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800436a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2b00      	cmp	r3, #0
 8004374:	d104      	bne.n	8004380 <USB_EPStartXfer+0xbd8>
 8004376:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800437a:	3b01      	subs	r3, #1
 800437c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004380:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004384:	b29b      	uxth	r3, r3
 8004386:	029b      	lsls	r3, r3, #10
 8004388:	b29b      	uxth	r3, r3
 800438a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800438e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004392:	b29a      	uxth	r2, r3
 8004394:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004398:	801a      	strh	r2, [r3, #0]
 800439a:	e2f1      	b.n	8004980 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800439c:	463b      	mov	r3, r7
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	78db      	ldrb	r3, [r3, #3]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	f040 818f 	bne.w	80046c6 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80043a8:	463b      	mov	r3, r7
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d175      	bne.n	800449e <USB_EPStartXfer+0xcf6>
 80043b2:	1d3b      	adds	r3, r7, #4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043ca:	4413      	add	r3, r2
 80043cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043d0:	463b      	mov	r3, r7
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	011a      	lsls	r2, r3, #4
 80043d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043dc:	4413      	add	r3, r2
 80043de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043e6:	463b      	mov	r3, r7
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d116      	bne.n	800441e <USB_EPStartXfer+0xc76>
 80043f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004402:	801a      	strh	r2, [r3, #0]
 8004404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004414:	b29a      	uxth	r2, r3
 8004416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800441a:	801a      	strh	r2, [r3, #0]
 800441c:	e065      	b.n	80044ea <USB_EPStartXfer+0xd42>
 800441e:	463b      	mov	r3, r7
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b3e      	cmp	r3, #62	; 0x3e
 8004426:	d81a      	bhi.n	800445e <USB_EPStartXfer+0xcb6>
 8004428:	463b      	mov	r3, r7
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	085b      	lsrs	r3, r3, #1
 8004430:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004434:	463b      	mov	r3, r7
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <USB_EPStartXfer+0xca4>
 8004442:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004446:	3301      	adds	r3, #1
 8004448:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800444c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004450:	b29b      	uxth	r3, r3
 8004452:	029b      	lsls	r3, r3, #10
 8004454:	b29a      	uxth	r2, r3
 8004456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800445a:	801a      	strh	r2, [r3, #0]
 800445c:	e045      	b.n	80044ea <USB_EPStartXfer+0xd42>
 800445e:	463b      	mov	r3, r7
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800446a:	463b      	mov	r3, r7
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	2b00      	cmp	r3, #0
 8004476:	d104      	bne.n	8004482 <USB_EPStartXfer+0xcda>
 8004478:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800447c:	3b01      	subs	r3, #1
 800447e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004482:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004486:	b29b      	uxth	r3, r3
 8004488:	029b      	lsls	r3, r3, #10
 800448a:	b29b      	uxth	r3, r3
 800448c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004494:	b29a      	uxth	r2, r3
 8004496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800449a:	801a      	strh	r2, [r3, #0]
 800449c:	e025      	b.n	80044ea <USB_EPStartXfer+0xd42>
 800449e:	463b      	mov	r3, r7
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	785b      	ldrb	r3, [r3, #1]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d120      	bne.n	80044ea <USB_EPStartXfer+0xd42>
 80044a8:	1d3b      	adds	r3, r7, #4
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044b0:	1d3b      	adds	r3, r7, #4
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044c0:	4413      	add	r3, r2
 80044c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044c6:	463b      	mov	r3, r7
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	011a      	lsls	r2, r3, #4
 80044ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044d2:	4413      	add	r3, r2
 80044d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044dc:	463b      	mov	r3, r7
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044e8:	801a      	strh	r2, [r3, #0]
 80044ea:	1d3b      	adds	r3, r7, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044f2:	463b      	mov	r3, r7
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	785b      	ldrb	r3, [r3, #1]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d175      	bne.n	80045e8 <USB_EPStartXfer+0xe40>
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004504:	1d3b      	adds	r3, r7, #4
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800450c:	b29b      	uxth	r3, r3
 800450e:	461a      	mov	r2, r3
 8004510:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004514:	4413      	add	r3, r2
 8004516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800451a:	463b      	mov	r3, r7
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	011a      	lsls	r2, r3, #4
 8004522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004526:	4413      	add	r3, r2
 8004528:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800452c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004530:	463b      	mov	r3, r7
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d116      	bne.n	8004568 <USB_EPStartXfer+0xdc0>
 800453a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004546:	b29a      	uxth	r2, r3
 8004548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800454c:	801a      	strh	r2, [r3, #0]
 800454e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	b29b      	uxth	r3, r3
 8004556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800455a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800455e:	b29a      	uxth	r2, r3
 8004560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004564:	801a      	strh	r2, [r3, #0]
 8004566:	e061      	b.n	800462c <USB_EPStartXfer+0xe84>
 8004568:	463b      	mov	r3, r7
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b3e      	cmp	r3, #62	; 0x3e
 8004570:	d81a      	bhi.n	80045a8 <USB_EPStartXfer+0xe00>
 8004572:	463b      	mov	r3, r7
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800457e:	463b      	mov	r3, r7
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <USB_EPStartXfer+0xdee>
 800458c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004590:	3301      	adds	r3, #1
 8004592:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459a:	b29b      	uxth	r3, r3
 800459c:	029b      	lsls	r3, r3, #10
 800459e:	b29a      	uxth	r2, r3
 80045a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045a4:	801a      	strh	r2, [r3, #0]
 80045a6:	e041      	b.n	800462c <USB_EPStartXfer+0xe84>
 80045a8:	463b      	mov	r3, r7
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045b4:	463b      	mov	r3, r7
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d104      	bne.n	80045cc <USB_EPStartXfer+0xe24>
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c6:	3b01      	subs	r3, #1
 80045c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	029b      	lsls	r3, r3, #10
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045de:	b29a      	uxth	r2, r3
 80045e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045e4:	801a      	strh	r2, [r3, #0]
 80045e6:	e021      	b.n	800462c <USB_EPStartXfer+0xe84>
 80045e8:	463b      	mov	r3, r7
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	785b      	ldrb	r3, [r3, #1]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d11c      	bne.n	800462c <USB_EPStartXfer+0xe84>
 80045f2:	1d3b      	adds	r3, r7, #4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004602:	4413      	add	r3, r2
 8004604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004608:	463b      	mov	r3, r7
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	011a      	lsls	r2, r3, #4
 8004610:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004614:	4413      	add	r3, r2
 8004616:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800461a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800461e:	463b      	mov	r3, r7
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	b29a      	uxth	r2, r3
 8004626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800462a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800462c:	463b      	mov	r3, r7
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 81a4 	beq.w	8004980 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004638:	1d3b      	adds	r3, r7, #4
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	463b      	mov	r3, r7
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800464c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <USB_EPStartXfer+0xebc>
 8004658:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10d      	bne.n	8004680 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004664:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800466c:	2b00      	cmp	r3, #0
 800466e:	f040 8187 	bne.w	8004980 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004672:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	f040 8180 	bne.w	8004980 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004680:	1d3b      	adds	r3, r7, #4
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	463b      	mov	r3, r7
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800469e:	1d3b      	adds	r3, r7, #4
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	463b      	mov	r3, r7
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	441a      	add	r2, r3
 80046ac:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80046b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	8013      	strh	r3, [r2, #0]
 80046c4:	e15c      	b.n	8004980 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80046c6:	463b      	mov	r3, r7
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	78db      	ldrb	r3, [r3, #3]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	f040 8155 	bne.w	800497c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80046d2:	463b      	mov	r3, r7
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	463b      	mov	r3, r7
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d90e      	bls.n	8004700 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80046e2:	463b      	mov	r3, r7
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80046ec:	463b      	mov	r3, r7
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f6:	1ad2      	subs	r2, r2, r3
 80046f8:	463b      	mov	r3, r7
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	619a      	str	r2, [r3, #24]
 80046fe:	e008      	b.n	8004712 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004700:	463b      	mov	r3, r7
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800470a:	463b      	mov	r3, r7
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2200      	movs	r2, #0
 8004710:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004712:	463b      	mov	r3, r7
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d16f      	bne.n	80047fc <USB_EPStartXfer+0x1054>
 800471c:	1d3b      	adds	r3, r7, #4
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004724:	1d3b      	adds	r3, r7, #4
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800472c:	b29b      	uxth	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004734:	4413      	add	r3, r2
 8004736:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800473a:	463b      	mov	r3, r7
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	011a      	lsls	r2, r3, #4
 8004742:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004746:	4413      	add	r3, r2
 8004748:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800474c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d116      	bne.n	8004786 <USB_EPStartXfer+0xfde>
 8004758:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004764:	b29a      	uxth	r2, r3
 8004766:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800477c:	b29a      	uxth	r2, r3
 800477e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004782:	801a      	strh	r2, [r3, #0]
 8004784:	e05f      	b.n	8004846 <USB_EPStartXfer+0x109e>
 8004786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478a:	2b3e      	cmp	r3, #62	; 0x3e
 800478c:	d818      	bhi.n	80047c0 <USB_EPStartXfer+0x1018>
 800478e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <USB_EPStartXfer+0x1006>
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a8:	3301      	adds	r3, #1
 80047aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	029b      	lsls	r3, r3, #10
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047bc:	801a      	strh	r2, [r3, #0]
 80047be:	e042      	b.n	8004846 <USB_EPStartXfer+0x109e>
 80047c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d104      	bne.n	80047e0 <USB_EPStartXfer+0x1038>
 80047d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047da:	3b01      	subs	r3, #1
 80047dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	029b      	lsls	r3, r3, #10
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047f8:	801a      	strh	r2, [r3, #0]
 80047fa:	e024      	b.n	8004846 <USB_EPStartXfer+0x109e>
 80047fc:	463b      	mov	r3, r7
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d11f      	bne.n	8004846 <USB_EPStartXfer+0x109e>
 8004806:	1d3b      	adds	r3, r7, #4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800480e:	1d3b      	adds	r3, r7, #4
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800481e:	4413      	add	r3, r2
 8004820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004824:	463b      	mov	r3, r7
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	011a      	lsls	r2, r3, #4
 800482c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004830:	4413      	add	r3, r2
 8004832:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004836:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800483a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800483e:	b29a      	uxth	r2, r3
 8004840:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004844:	801a      	strh	r2, [r3, #0]
 8004846:	1d3b      	adds	r3, r7, #4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800484e:	463b      	mov	r3, r7
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	785b      	ldrb	r3, [r3, #1]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d16f      	bne.n	8004938 <USB_EPStartXfer+0x1190>
 8004858:	1d3b      	adds	r3, r7, #4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004860:	1d3b      	adds	r3, r7, #4
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004868:	b29b      	uxth	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004870:	4413      	add	r3, r2
 8004872:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004876:	463b      	mov	r3, r7
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	011a      	lsls	r2, r3, #4
 800487e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004882:	4413      	add	r3, r2
 8004884:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004888:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800488c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d116      	bne.n	80048c2 <USB_EPStartXfer+0x111a>
 8004894:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048a6:	801a      	strh	r2, [r3, #0]
 80048a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	e05e      	b.n	8004980 <USB_EPStartXfer+0x11d8>
 80048c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c6:	2b3e      	cmp	r3, #62	; 0x3e
 80048c8:	d818      	bhi.n	80048fc <USB_EPStartXfer+0x1154>
 80048ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d004      	beq.n	80048ea <USB_EPStartXfer+0x1142>
 80048e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e4:	3301      	adds	r3, #1
 80048e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	029b      	lsls	r3, r3, #10
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	e041      	b.n	8004980 <USB_EPStartXfer+0x11d8>
 80048fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	2b00      	cmp	r3, #0
 8004910:	d104      	bne.n	800491c <USB_EPStartXfer+0x1174>
 8004912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004916:	3b01      	subs	r3, #1
 8004918:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800491c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004920:	b29b      	uxth	r3, r3
 8004922:	029b      	lsls	r3, r3, #10
 8004924:	b29b      	uxth	r3, r3
 8004926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800492a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492e:	b29a      	uxth	r2, r3
 8004930:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004934:	801a      	strh	r2, [r3, #0]
 8004936:	e023      	b.n	8004980 <USB_EPStartXfer+0x11d8>
 8004938:	463b      	mov	r3, r7
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d11e      	bne.n	8004980 <USB_EPStartXfer+0x11d8>
 8004942:	1d3b      	adds	r3, r7, #4
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494a:	b29b      	uxth	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004952:	4413      	add	r3, r2
 8004954:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004958:	463b      	mov	r3, r7
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	011a      	lsls	r2, r3, #4
 8004960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004964:	4413      	add	r3, r2
 8004966:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800496a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800496e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004972:	b29a      	uxth	r2, r3
 8004974:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004978:	801a      	strh	r2, [r3, #0]
 800497a:	e001      	b.n	8004980 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e02e      	b.n	80049de <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004980:	1d3b      	adds	r3, r7, #4
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	463b      	mov	r3, r7
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800499e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80049aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80049b6:	1d3b      	adds	r3, r7, #4
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	463b      	mov	r3, r7
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	441a      	add	r2, r3
 80049c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d8:	b29b      	uxth	r3, r3
 80049da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d020      	beq.n	8004a3c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a10:	81bb      	strh	r3, [r7, #12]
 8004a12:	89bb      	ldrh	r3, [r7, #12]
 8004a14:	f083 0310 	eor.w	r3, r3, #16
 8004a18:	81bb      	strh	r3, [r7, #12]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	89bb      	ldrh	r3, [r7, #12]
 8004a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	8013      	strh	r3, [r2, #0]
 8004a3a:	e01f      	b.n	8004a7c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a52:	81fb      	strh	r3, [r7, #14]
 8004a54:	89fb      	ldrh	r3, [r7, #14]
 8004a56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a5a:	81fb      	strh	r3, [r7, #14]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	441a      	add	r2, r3
 8004a66:	89fb      	ldrh	r3, [r7, #14]
 8004a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	7b1b      	ldrb	r3, [r3, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 809d 	bne.w	8004bd6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d04c      	beq.n	8004b3e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	823b      	strh	r3, [r7, #16]
 8004ab2:	8a3b      	ldrh	r3, [r7, #16]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01b      	beq.n	8004af4 <USB_EPClearStall+0x6c>
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad2:	81fb      	strh	r3, [r7, #14]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	441a      	add	r2, r3
 8004ade:	89fb      	ldrh	r3, [r7, #14]
 8004ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	78db      	ldrb	r3, [r3, #3]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d06c      	beq.n	8004bd6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b12:	81bb      	strh	r3, [r7, #12]
 8004b14:	89bb      	ldrh	r3, [r7, #12]
 8004b16:	f083 0320 	eor.w	r3, r3, #32
 8004b1a:	81bb      	strh	r3, [r7, #12]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	89bb      	ldrh	r3, [r7, #12]
 8004b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	8013      	strh	r3, [r2, #0]
 8004b3c:	e04b      	b.n	8004bd6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	82fb      	strh	r3, [r7, #22]
 8004b4c:	8afb      	ldrh	r3, [r7, #22]
 8004b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01b      	beq.n	8004b8e <USB_EPClearStall+0x106>
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6c:	82bb      	strh	r3, [r7, #20]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	8abb      	ldrh	r3, [r7, #20]
 8004b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba4:	827b      	strh	r3, [r7, #18]
 8004ba6:	8a7b      	ldrh	r3, [r7, #18]
 8004ba8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bac:	827b      	strh	r3, [r7, #18]
 8004bae:	8a7b      	ldrh	r3, [r7, #18]
 8004bb0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bb4:	827b      	strh	r3, [r7, #18]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	441a      	add	r2, r3
 8004bc0:	8a7b      	ldrh	r3, [r7, #18]
 8004bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr

08004be2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	460b      	mov	r3, r1
 8004bec:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d103      	bne.n	8004bfc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2280      	movs	r2, #128	; 0x80
 8004bf8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr

08004c08 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr

08004c1c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004c42:	68fb      	ldr	r3, [r7, #12]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr

08004c4e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr

08004c64 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b08d      	sub	sp, #52	; 0x34
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	4611      	mov	r1, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	460b      	mov	r3, r1
 8004c74:	80fb      	strh	r3, [r7, #6]
 8004c76:	4613      	mov	r3, r2
 8004c78:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004c7a:	88bb      	ldrh	r3, [r7, #4]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	005a      	lsls	r2, r3, #1
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9c:	e01e      	b.n	8004cdc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	3302      	adds	r3, #2
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	3302      	adds	r3, #2
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1dd      	bne.n	8004c9e <USB_WritePMA+0x3a>
  }
}
 8004ce2:	bf00      	nop
 8004ce4:	3734      	adds	r7, #52	; 0x34
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b08b      	sub	sp, #44	; 0x2c
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	80fb      	strh	r3, [r7, #6]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004d02:	88bb      	ldrh	r3, [r7, #4]
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	005a      	lsls	r2, r3, #1
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d1e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
 8004d24:	e01b      	b.n	8004d5e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	3302      	adds	r3, #2
 8004d32:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	0a1b      	lsrs	r3, r3, #8
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	3302      	adds	r3, #2
 8004d56:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e0      	bne.n	8004d26 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004d64:	88bb      	ldrh	r3, [r7, #4]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d007      	beq.n	8004d80 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	701a      	strb	r2, [r3, #0]
  }
}
 8004d80:	bf00      	nop
 8004d82:	372c      	adds	r7, #44	; 0x2c
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr

08004d8a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	7c1b      	ldrb	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d115      	bne.n	8004dce <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004da6:	2202      	movs	r2, #2
 8004da8:	2181      	movs	r1, #129	; 0x81
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f004 fbe9 	bl	8009582 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dba:	2202      	movs	r2, #2
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f004 fbdf 	bl	8009582 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004dcc:	e012      	b.n	8004df4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004dce:	2340      	movs	r3, #64	; 0x40
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	2181      	movs	r1, #129	; 0x81
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f004 fbd4 	bl	8009582 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004de0:	2340      	movs	r3, #64	; 0x40
 8004de2:	2202      	movs	r2, #2
 8004de4:	2101      	movs	r1, #1
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f004 fbcb 	bl	8009582 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004df4:	2308      	movs	r3, #8
 8004df6:	2203      	movs	r2, #3
 8004df8:	2182      	movs	r1, #130	; 0x82
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f004 fbc1 	bl	8009582 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e06:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e0a:	f004 fce1 	bl	80097d0 <USBD_static_malloc>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d102      	bne.n	8004e26 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
 8004e24:	e026      	b.n	8004e74 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e2c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	7c1b      	ldrb	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d109      	bne.n	8004e64 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f004 fc81 	bl	8009764 <USBD_LL_PrepareReceive>
 8004e62:	e007      	b.n	8004e74 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e6a:	2340      	movs	r3, #64	; 0x40
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f004 fc78 	bl	8009764 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	460b      	mov	r3, r1
 8004e88:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004e8e:	2181      	movs	r1, #129	; 0x81
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f004 fb9c 	bl	80095ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f004 fb95 	bl	80095ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004eac:	2182      	movs	r1, #130	; 0x82
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f004 fb8d 	bl	80095ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00e      	beq.n	8004ee2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f004 fc87 	bl	80097e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004efc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d039      	beq.n	8004f8a <USBD_CDC_Setup+0x9e>
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d17c      	bne.n	8005014 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	88db      	ldrh	r3, [r3, #6]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d029      	beq.n	8004f76 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	b25b      	sxtb	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	da11      	bge.n	8004f50 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004f38:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	88d2      	ldrh	r2, [r2, #6]
 8004f3e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f40:	6939      	ldr	r1, [r7, #16]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	88db      	ldrh	r3, [r3, #6]
 8004f46:	461a      	mov	r2, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 f9f9 	bl	8006340 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004f4e:	e068      	b.n	8005022 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	785a      	ldrb	r2, [r3, #1]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	88db      	ldrh	r3, [r3, #6]
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f66:	6939      	ldr	r1, [r7, #16]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	88db      	ldrh	r3, [r3, #6]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f001 fa14 	bl	800639c <USBD_CtlPrepareRx>
      break;
 8004f74:	e055      	b.n	8005022 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	7850      	ldrb	r0, [r2, #1]
 8004f82:	2200      	movs	r2, #0
 8004f84:	6839      	ldr	r1, [r7, #0]
 8004f86:	4798      	blx	r3
      break;
 8004f88:	e04b      	b.n	8005022 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	2b0a      	cmp	r3, #10
 8004f90:	d017      	beq.n	8004fc2 <USBD_CDC_Setup+0xd6>
 8004f92:	2b0b      	cmp	r3, #11
 8004f94:	d029      	beq.n	8004fea <USBD_CDC_Setup+0xfe>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d133      	bne.n	8005002 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d107      	bne.n	8004fb4 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004fa4:	f107 030c 	add.w	r3, r7, #12
 8004fa8:	2202      	movs	r2, #2
 8004faa:	4619      	mov	r1, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f001 f9c7 	bl	8006340 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fb2:	e02e      	b.n	8005012 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004fb4:	6839      	ldr	r1, [r7, #0]
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f001 f958 	bl	800626c <USBD_CtlError>
            ret = USBD_FAIL;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	75fb      	strb	r3, [r7, #23]
          break;
 8004fc0:	e027      	b.n	8005012 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d107      	bne.n	8004fdc <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004fcc:	f107 030f 	add.w	r3, r7, #15
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f001 f9b3 	bl	8006340 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fda:	e01a      	b.n	8005012 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004fdc:	6839      	ldr	r1, [r7, #0]
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 f944 	bl	800626c <USBD_CtlError>
            ret = USBD_FAIL;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	75fb      	strb	r3, [r7, #23]
          break;
 8004fe8:	e013      	b.n	8005012 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d00d      	beq.n	8005010 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004ff4:	6839      	ldr	r1, [r7, #0]
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f001 f938 	bl	800626c <USBD_CtlError>
            ret = USBD_FAIL;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005000:	e006      	b.n	8005010 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f001 f931 	bl	800626c <USBD_CtlError>
          ret = USBD_FAIL;
 800500a:	2302      	movs	r3, #2
 800500c:	75fb      	strb	r3, [r7, #23]
          break;
 800500e:	e000      	b.n	8005012 <USBD_CDC_Setup+0x126>
          break;
 8005010:	bf00      	nop
      }
      break;
 8005012:	e006      	b.n	8005022 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005014:	6839      	ldr	r1, [r7, #0]
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f001 f928 	bl	800626c <USBD_CtlError>
      ret = USBD_FAIL;
 800501c:	2302      	movs	r3, #2
 800501e:	75fb      	strb	r3, [r7, #23]
      break;
 8005020:	bf00      	nop
  }

  return ret;
 8005022:	7dfb      	ldrb	r3, [r7, #23]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800503e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005046:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d03a      	beq.n	80050c8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	331c      	adds	r3, #28
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d029      	beq.n	80050bc <USBD_CDC_DataIn+0x90>
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	331c      	adds	r3, #28
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	78f9      	ldrb	r1, [r7, #3]
 800507c:	68b8      	ldr	r0, [r7, #8]
 800507e:	460b      	mov	r3, r1
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4403      	add	r3, r0
 8005088:	3338      	adds	r3, #56	; 0x38
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005090:	fb03 f301 	mul.w	r3, r3, r1
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d110      	bne.n	80050bc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800509a:	78fa      	ldrb	r2, [r7, #3]
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	331c      	adds	r3, #28
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050ae:	78f9      	ldrb	r1, [r7, #3]
 80050b0:	2300      	movs	r3, #0
 80050b2:	2200      	movs	r2, #0
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f004 fb32 	bl	800971e <USBD_LL_Transmit>
 80050ba:	e003      	b.n	80050c4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80050c8:	2302      	movs	r3, #2
  }
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	460b      	mov	r3, r1
 80050dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f004 fb5d 	bl	80097aa <USBD_LL_GetRxDataSize>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00d      	beq.n	800511e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005116:	4611      	mov	r1, r2
 8005118:	4798      	blx	r3

    return USBD_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	e000      	b.n	8005120 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800511e:	2302      	movs	r3, #2
  }
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005136:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800513e:	2b00      	cmp	r3, #0
 8005140:	d015      	beq.n	800516e <USBD_CDC_EP0_RxReady+0x46>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005148:	2bff      	cmp	r3, #255	; 0xff
 800514a:	d010      	beq.n	800516e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800515a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005162:	b292      	uxth	r2, r2
 8005164:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	22ff      	movs	r2, #255	; 0xff
 800516a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2243      	movs	r2, #67	; 0x43
 8005184:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005186:	4b03      	ldr	r3, [pc, #12]	; (8005194 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20000094 	.word	0x20000094

08005198 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2243      	movs	r2, #67	; 0x43
 80051a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80051a6:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000050 	.word	0x20000050

080051b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2243      	movs	r2, #67	; 0x43
 80051c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80051c6:	4b03      	ldr	r3, [pc, #12]	; (80051d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	200000d8 	.word	0x200000d8

080051d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	220a      	movs	r2, #10
 80051e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80051e6:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	2000000c 	.word	0x2000000c

080051f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005202:	2302      	movs	r3, #2
 8005204:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005218:	7bfb      	ldrb	r3, [r7, #15]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr

08005224 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005238:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005242:	88fa      	ldrh	r2, [r7, #6]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	bc80      	pop	{r7}
 8005254:	4770      	bx	lr

08005256 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005266:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800528a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01c      	beq.n	80052d0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800529c:	2b00      	cmp	r3, #0
 800529e:	d115      	bne.n	80052cc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2181      	movs	r1, #129	; 0x81
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f004 fa2b 	bl	800971e <USBD_LL_Transmit>

      return USBD_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e002      	b.n	80052d2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80052d0:	2302      	movs	r3, #2
  }
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	7c1b      	ldrb	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005306:	2101      	movs	r1, #1
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f004 fa2b 	bl	8009764 <USBD_LL_PrepareReceive>
 800530e:	e007      	b.n	8005320 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005316:	2340      	movs	r3, #64	; 0x40
 8005318:	2101      	movs	r1, #1
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f004 fa22 	bl	8009764 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	e000      	b.n	8005326 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005324:	2302      	movs	r3, #2
  }
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	4613      	mov	r3, r2
 800533a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005342:	2302      	movs	r3, #2
 8005344:	e01a      	b.n	800537c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	79fa      	ldrb	r2, [r7, #7]
 8005372:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f004 f88f 	bl	8009498 <USBD_LL_Init>

  return USBD_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d006      	beq.n	80053a6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	73fb      	strb	r3, [r7, #15]
 80053a4:	e001      	b.n	80053aa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80053a6:	2302      	movs	r3, #2
 80053a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr

080053b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f004 f8c4 	bl	800954c <USBD_LL_Start>

  return USBD_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	460b      	mov	r3, r1
 80053ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80053ee:	2302      	movs	r3, #2
 80053f0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00c      	beq.n	8005416 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	78fa      	ldrb	r2, [r7, #3]
 8005406:	4611      	mov	r1, r2
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	4798      	blx	r3
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005416:	7bfb      	ldrb	r3, [r7, #15]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	78fa      	ldrb	r2, [r7, #3]
 8005436:	4611      	mov	r1, r2
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3

  return USBD_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fecb 	bl	80061f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800546c:	461a      	mov	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	2b01      	cmp	r3, #1
 8005480:	d00c      	beq.n	800549c <USBD_LL_SetupStage+0x56>
 8005482:	2b01      	cmp	r3, #1
 8005484:	d302      	bcc.n	800548c <USBD_LL_SetupStage+0x46>
 8005486:	2b02      	cmp	r3, #2
 8005488:	d010      	beq.n	80054ac <USBD_LL_SetupStage+0x66>
 800548a:	e017      	b.n	80054bc <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005492:	4619      	mov	r1, r3
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f9cb 	bl	8005830 <USBD_StdDevReq>
      break;
 800549a:	e01a      	b.n	80054d2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fa2d 	bl	8005904 <USBD_StdItfReq>
      break;
 80054aa:	e012      	b.n	80054d2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fa6b 	bl	8005990 <USBD_StdEPReq>
      break;
 80054ba:	e00a      	b.n	80054d2 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	4619      	mov	r1, r3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f004 f89e 	bl	800960c <USBD_LL_StallEP>
      break;
 80054d0:	bf00      	nop
  }

  return USBD_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	460b      	mov	r3, r1
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80054ea:	7afb      	ldrb	r3, [r7, #11]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d14b      	bne.n	8005588 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80054f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d134      	bne.n	800556c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	429a      	cmp	r2, r3
 800550c:	d919      	bls.n	8005542 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	1ad2      	subs	r2, r2, r3
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005524:	429a      	cmp	r2, r3
 8005526:	d203      	bcs.n	8005530 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800552c:	b29b      	uxth	r3, r3
 800552e:	e002      	b.n	8005536 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005534:	b29b      	uxth	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 ff4c 	bl	80063d8 <USBD_CtlContinueRx>
 8005540:	e038      	b.n	80055b4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005554:	2b03      	cmp	r3, #3
 8005556:	d105      	bne.n	8005564 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 ff49 	bl	80063fc <USBD_CtlSendStatus>
 800556a:	e023      	b.n	80055b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005572:	2b05      	cmp	r3, #5
 8005574:	d11e      	bne.n	80055b4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800557e:	2100      	movs	r1, #0
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f004 f843 	bl	800960c <USBD_LL_StallEP>
 8005586:	e015      	b.n	80055b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00d      	beq.n	80055b0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800559a:	2b03      	cmp	r3, #3
 800559c:	d108      	bne.n	80055b0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	7afa      	ldrb	r2, [r7, #11]
 80055a8:	4611      	mov	r1, r2
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	4798      	blx	r3
 80055ae:	e001      	b.n	80055b4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80055b0:	2302      	movs	r3, #2
 80055b2:	e000      	b.n	80055b6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b086      	sub	sp, #24
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	460b      	mov	r3, r1
 80055c8:	607a      	str	r2, [r7, #4]
 80055ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80055cc:	7afb      	ldrb	r3, [r7, #11]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d17f      	bne.n	80056d2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3314      	adds	r3, #20
 80055d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d15c      	bne.n	800569c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d915      	bls.n	800561a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	1ad2      	subs	r2, r2, r3
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	b29b      	uxth	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 feb6 	bl	8006378 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800560c:	2300      	movs	r3, #0
 800560e:	2200      	movs	r2, #0
 8005610:	2100      	movs	r1, #0
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f004 f8a6 	bl	8009764 <USBD_LL_PrepareReceive>
 8005618:	e04e      	b.n	80056b8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	6912      	ldr	r2, [r2, #16]
 8005622:	fbb3 f1f2 	udiv	r1, r3, r2
 8005626:	fb02 f201 	mul.w	r2, r2, r1
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11c      	bne.n	800566a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005638:	429a      	cmp	r2, r3
 800563a:	d316      	bcc.n	800566a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005646:	429a      	cmp	r2, r3
 8005648:	d20f      	bcs.n	800566a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800564a:	2200      	movs	r2, #0
 800564c:	2100      	movs	r1, #0
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 fe92 	bl	8006378 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800565c:	2300      	movs	r3, #0
 800565e:	2200      	movs	r2, #0
 8005660:	2100      	movs	r1, #0
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f004 f87e 	bl	8009764 <USBD_LL_PrepareReceive>
 8005668:	e026      	b.n	80056b8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800567c:	2b03      	cmp	r3, #3
 800567e:	d105      	bne.n	800568c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800568c:	2180      	movs	r1, #128	; 0x80
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f003 ffbc 	bl	800960c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 fec4 	bl	8006422 <USBD_CtlReceiveStatus>
 800569a:	e00d      	b.n	80056b8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d004      	beq.n	80056b0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d103      	bne.n	80056b8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80056b0:	2180      	movs	r1, #128	; 0x80
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f003 ffaa 	bl	800960c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d11d      	bne.n	80056fe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff fe83 	bl	80053ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80056d0:	e015      	b.n	80056fe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00d      	beq.n	80056fa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d108      	bne.n	80056fa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	7afa      	ldrb	r2, [r7, #11]
 80056f2:	4611      	mov	r1, r2
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	4798      	blx	r3
 80056f8:	e001      	b.n	80056fe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80056fa:	2302      	movs	r3, #2
 80056fc:	e000      	b.n	8005700 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005710:	2340      	movs	r3, #64	; 0x40
 8005712:	2200      	movs	r2, #0
 8005714:	2100      	movs	r1, #0
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f003 ff33 	bl	8009582 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2240      	movs	r2, #64	; 0x40
 8005728:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800572c:	2340      	movs	r3, #64	; 0x40
 800572e:	2200      	movs	r2, #0
 8005730:	2180      	movs	r1, #128	; 0x80
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f003 ff25 	bl	8009582 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2240      	movs	r2, #64	; 0x40
 8005742:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005768:	2b00      	cmp	r3, #0
 800576a:	d009      	beq.n	8005780 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6852      	ldr	r2, [r2, #4]
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	4611      	mov	r1, r2
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	4798      	blx	r3
  }

  return USBD_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr

080057a8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2204      	movs	r2, #4
 80057c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d105      	bne.n	80057ee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr

080057fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005808:	2b03      	cmp	r3, #3
 800580a:	d10b      	bne.n	8005824 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005846:	2b20      	cmp	r3, #32
 8005848:	d004      	beq.n	8005854 <USBD_StdDevReq+0x24>
 800584a:	2b40      	cmp	r3, #64	; 0x40
 800584c:	d002      	beq.n	8005854 <USBD_StdDevReq+0x24>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d008      	beq.n	8005864 <USBD_StdDevReq+0x34>
 8005852:	e04c      	b.n	80058ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	4798      	blx	r3
      break;
 8005862:	e049      	b.n	80058f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b09      	cmp	r3, #9
 800586a:	d83a      	bhi.n	80058e2 <USBD_StdDevReq+0xb2>
 800586c:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <USBD_StdDevReq+0x44>)
 800586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005872:	bf00      	nop
 8005874:	080058c5 	.word	0x080058c5
 8005878:	080058d9 	.word	0x080058d9
 800587c:	080058e3 	.word	0x080058e3
 8005880:	080058cf 	.word	0x080058cf
 8005884:	080058e3 	.word	0x080058e3
 8005888:	080058a7 	.word	0x080058a7
 800588c:	0800589d 	.word	0x0800589d
 8005890:	080058e3 	.word	0x080058e3
 8005894:	080058bb 	.word	0x080058bb
 8005898:	080058b1 	.word	0x080058b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f9d4 	bl	8005c4c <USBD_GetDescriptor>
          break;
 80058a4:	e022      	b.n	80058ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fb37 	bl	8005f1c <USBD_SetAddress>
          break;
 80058ae:	e01d      	b.n	80058ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80058b0:	6839      	ldr	r1, [r7, #0]
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fb74 	bl	8005fa0 <USBD_SetConfig>
          break;
 80058b8:	e018      	b.n	80058ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80058ba:	6839      	ldr	r1, [r7, #0]
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fbfd 	bl	80060bc <USBD_GetConfig>
          break;
 80058c2:	e013      	b.n	80058ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fc2c 	bl	8006124 <USBD_GetStatus>
          break;
 80058cc:	e00e      	b.n	80058ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fc5a 	bl	800618a <USBD_SetFeature>
          break;
 80058d6:	e009      	b.n	80058ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fc69 	bl	80061b2 <USBD_ClrFeature>
          break;
 80058e0:	e004      	b.n	80058ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fcc1 	bl	800626c <USBD_CtlError>
          break;
 80058ea:	bf00      	nop
      }
      break;
 80058ec:	e004      	b.n	80058f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fcbb 	bl	800626c <USBD_CtlError>
      break;
 80058f6:	bf00      	nop
  }

  return ret;
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop

08005904 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800591a:	2b20      	cmp	r3, #32
 800591c:	d003      	beq.n	8005926 <USBD_StdItfReq+0x22>
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d001      	beq.n	8005926 <USBD_StdItfReq+0x22>
 8005922:	2b00      	cmp	r3, #0
 8005924:	d12a      	bne.n	800597c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800592c:	3b01      	subs	r3, #1
 800592e:	2b02      	cmp	r3, #2
 8005930:	d81d      	bhi.n	800596e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	889b      	ldrh	r3, [r3, #4]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	d813      	bhi.n	8005964 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	4798      	blx	r3
 800594a:	4603      	mov	r3, r0
 800594c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	88db      	ldrh	r3, [r3, #6]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d110      	bne.n	8005978 <USBD_StdItfReq+0x74>
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10d      	bne.n	8005978 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fd4d 	bl	80063fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005962:	e009      	b.n	8005978 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fc80 	bl	800626c <USBD_CtlError>
          break;
 800596c:	e004      	b.n	8005978 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800596e:	6839      	ldr	r1, [r7, #0]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fc7b 	bl	800626c <USBD_CtlError>
          break;
 8005976:	e000      	b.n	800597a <USBD_StdItfReq+0x76>
          break;
 8005978:	bf00      	nop
      }
      break;
 800597a:	e004      	b.n	8005986 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fc74 	bl	800626c <USBD_CtlError>
      break;
 8005984:	bf00      	nop
  }

  return USBD_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	889b      	ldrh	r3, [r3, #4]
 80059a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d004      	beq.n	80059ba <USBD_StdEPReq+0x2a>
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	d002      	beq.n	80059ba <USBD_StdEPReq+0x2a>
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <USBD_StdEPReq+0x3a>
 80059b8:	e13d      	b.n	8005c36 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	4798      	blx	r3
      break;
 80059c8:	e13a      	b.n	8005c40 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	d10a      	bne.n	80059ec <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
 80059e4:	4603      	mov	r3, r0
 80059e6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	e12a      	b.n	8005c42 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	785b      	ldrb	r3, [r3, #1]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d03e      	beq.n	8005a72 <USBD_StdEPReq+0xe2>
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d002      	beq.n	80059fe <USBD_StdEPReq+0x6e>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d070      	beq.n	8005ade <USBD_StdEPReq+0x14e>
 80059fc:	e115      	b.n	8005c2a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d002      	beq.n	8005a0e <USBD_StdEPReq+0x7e>
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d015      	beq.n	8005a38 <USBD_StdEPReq+0xa8>
 8005a0c:	e02b      	b.n	8005a66 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a0e:	7bbb      	ldrb	r3, [r7, #14]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00c      	beq.n	8005a2e <USBD_StdEPReq+0x9e>
 8005a14:	7bbb      	ldrb	r3, [r7, #14]
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d009      	beq.n	8005a2e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f003 fdf4 	bl	800960c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a24:	2180      	movs	r1, #128	; 0x80
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f003 fdf0 	bl	800960c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a2c:	e020      	b.n	8005a70 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fc1b 	bl	800626c <USBD_CtlError>
              break;
 8005a36:	e01b      	b.n	8005a70 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	885b      	ldrh	r3, [r3, #2]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10e      	bne.n	8005a5e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005a40:	7bbb      	ldrb	r3, [r7, #14]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00b      	beq.n	8005a5e <USBD_StdEPReq+0xce>
 8005a46:	7bbb      	ldrb	r3, [r7, #14]
 8005a48:	2b80      	cmp	r3, #128	; 0x80
 8005a4a:	d008      	beq.n	8005a5e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	88db      	ldrh	r3, [r3, #6]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005a54:	7bbb      	ldrb	r3, [r7, #14]
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f003 fdd7 	bl	800960c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fccc 	bl	80063fc <USBD_CtlSendStatus>

              break;
 8005a64:	e004      	b.n	8005a70 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005a66:	6839      	ldr	r1, [r7, #0]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fbff 	bl	800626c <USBD_CtlError>
              break;
 8005a6e:	bf00      	nop
          }
          break;
 8005a70:	e0e0      	b.n	8005c34 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d002      	beq.n	8005a82 <USBD_StdEPReq+0xf2>
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d015      	beq.n	8005aac <USBD_StdEPReq+0x11c>
 8005a80:	e026      	b.n	8005ad0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a82:	7bbb      	ldrb	r3, [r7, #14]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00c      	beq.n	8005aa2 <USBD_StdEPReq+0x112>
 8005a88:	7bbb      	ldrb	r3, [r7, #14]
 8005a8a:	2b80      	cmp	r3, #128	; 0x80
 8005a8c:	d009      	beq.n	8005aa2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a8e:	7bbb      	ldrb	r3, [r7, #14]
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f003 fdba 	bl	800960c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a98:	2180      	movs	r1, #128	; 0x80
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f003 fdb6 	bl	800960c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005aa0:	e01c      	b.n	8005adc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fbe1 	bl	800626c <USBD_CtlError>
              break;
 8005aaa:	e017      	b.n	8005adc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	885b      	ldrh	r3, [r3, #2]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d112      	bne.n	8005ada <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ab4:	7bbb      	ldrb	r3, [r7, #14]
 8005ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005abe:	7bbb      	ldrb	r3, [r7, #14]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f003 fdc1 	bl	800964a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fc97 	bl	80063fc <USBD_CtlSendStatus>
              }
              break;
 8005ace:	e004      	b.n	8005ada <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005ad0:	6839      	ldr	r1, [r7, #0]
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fbca 	bl	800626c <USBD_CtlError>
              break;
 8005ad8:	e000      	b.n	8005adc <USBD_StdEPReq+0x14c>
              break;
 8005ada:	bf00      	nop
          }
          break;
 8005adc:	e0aa      	b.n	8005c34 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d002      	beq.n	8005aee <USBD_StdEPReq+0x15e>
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d032      	beq.n	8005b52 <USBD_StdEPReq+0x1c2>
 8005aec:	e097      	b.n	8005c1e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005aee:	7bbb      	ldrb	r3, [r7, #14]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <USBD_StdEPReq+0x174>
 8005af4:	7bbb      	ldrb	r3, [r7, #14]
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d004      	beq.n	8005b04 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005afa:	6839      	ldr	r1, [r7, #0]
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fbb5 	bl	800626c <USBD_CtlError>
                break;
 8005b02:	e091      	b.n	8005c28 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	da0b      	bge.n	8005b24 <USBD_StdEPReq+0x194>
 8005b0c:	7bbb      	ldrb	r3, [r7, #14]
 8005b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	3310      	adds	r3, #16
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	4413      	add	r3, r2
 8005b20:	3304      	adds	r3, #4
 8005b22:	e00b      	b.n	8005b3c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b24:	7bbb      	ldrb	r3, [r7, #14]
 8005b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2202      	movs	r2, #2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fbf8 	bl	8006340 <USBD_CtlSendData>
              break;
 8005b50:	e06a      	b.n	8005c28 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	da11      	bge.n	8005b7e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b5a:	7bbb      	ldrb	r3, [r7, #14]
 8005b5c:	f003 020f 	and.w	r2, r3, #15
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3318      	adds	r3, #24
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d117      	bne.n	8005ba4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fb78 	bl	800626c <USBD_CtlError>
                  break;
 8005b7c:	e054      	b.n	8005c28 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b7e:	7bbb      	ldrb	r3, [r7, #14]
 8005b80:	f003 020f 	and.w	r2, r3, #15
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d104      	bne.n	8005ba4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005b9a:	6839      	ldr	r1, [r7, #0]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fb65 	bl	800626c <USBD_CtlError>
                  break;
 8005ba2:	e041      	b.n	8005c28 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	da0b      	bge.n	8005bc4 <USBD_StdEPReq+0x234>
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	3310      	adds	r3, #16
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	e00b      	b.n	8005bdc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	4413      	add	r3, r2
 8005bda:	3304      	adds	r3, #4
 8005bdc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bde:	7bbb      	ldrb	r3, [r7, #14]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <USBD_StdEPReq+0x25a>
 8005be4:	7bbb      	ldrb	r3, [r7, #14]
 8005be6:	2b80      	cmp	r3, #128	; 0x80
 8005be8:	d103      	bne.n	8005bf2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	e00e      	b.n	8005c10 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f003 fd46 	bl	8009688 <USBD_LL_IsStallEP>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2201      	movs	r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	e002      	b.n	8005c10 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2202      	movs	r2, #2
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fb92 	bl	8006340 <USBD_CtlSendData>
              break;
 8005c1c:	e004      	b.n	8005c28 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fb23 	bl	800626c <USBD_CtlError>
              break;
 8005c26:	bf00      	nop
          }
          break;
 8005c28:	e004      	b.n	8005c34 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fb1d 	bl	800626c <USBD_CtlError>
          break;
 8005c32:	bf00      	nop
      }
      break;
 8005c34:	e004      	b.n	8005c40 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fb17 	bl	800626c <USBD_CtlError>
      break;
 8005c3e:	bf00      	nop
  }

  return ret;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	885b      	ldrh	r3, [r3, #2]
 8005c66:	0a1b      	lsrs	r3, r3, #8
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	2b06      	cmp	r3, #6
 8005c6e:	f200 8128 	bhi.w	8005ec2 <USBD_GetDescriptor+0x276>
 8005c72:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <USBD_GetDescriptor+0x2c>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005c95 	.word	0x08005c95
 8005c7c:	08005cad 	.word	0x08005cad
 8005c80:	08005ced 	.word	0x08005ced
 8005c84:	08005ec3 	.word	0x08005ec3
 8005c88:	08005ec3 	.word	0x08005ec3
 8005c8c:	08005e63 	.word	0x08005e63
 8005c90:	08005e8f 	.word	0x08005e8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	7c12      	ldrb	r2, [r2, #16]
 8005ca0:	f107 0108 	add.w	r1, r7, #8
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	4798      	blx	r3
 8005ca8:	60f8      	str	r0, [r7, #12]
      break;
 8005caa:	e112      	b.n	8005ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	7c1b      	ldrb	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10d      	bne.n	8005cd0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	f107 0208 	add.w	r2, r7, #8
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4798      	blx	r3
 8005cc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	2202      	movs	r2, #2
 8005ccc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005cce:	e100      	b.n	8005ed2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	f107 0208 	add.w	r2, r7, #8
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4798      	blx	r3
 8005ce0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	701a      	strb	r2, [r3, #0]
      break;
 8005cea:	e0f2      	b.n	8005ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	885b      	ldrh	r3, [r3, #2]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	f200 80ac 	bhi.w	8005e50 <USBD_GetDescriptor+0x204>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <USBD_GetDescriptor+0xb4>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d19 	.word	0x08005d19
 8005d04:	08005d4d 	.word	0x08005d4d
 8005d08:	08005d81 	.word	0x08005d81
 8005d0c:	08005db5 	.word	0x08005db5
 8005d10:	08005de9 	.word	0x08005de9
 8005d14:	08005e1d 	.word	0x08005e1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	7c12      	ldrb	r2, [r2, #16]
 8005d30:	f107 0108 	add.w	r1, r7, #8
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
 8005d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d3a:	e091      	b.n	8005e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fa94 	bl	800626c <USBD_CtlError>
            err++;
 8005d44:	7afb      	ldrb	r3, [r7, #11]
 8005d46:	3301      	adds	r3, #1
 8005d48:	72fb      	strb	r3, [r7, #11]
          break;
 8005d4a:	e089      	b.n	8005e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	7c12      	ldrb	r2, [r2, #16]
 8005d64:	f107 0108 	add.w	r1, r7, #8
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
 8005d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d6e:	e077      	b.n	8005e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fa7a 	bl	800626c <USBD_CtlError>
            err++;
 8005d78:	7afb      	ldrb	r3, [r7, #11]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d7e:	e06f      	b.n	8005e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	7c12      	ldrb	r2, [r2, #16]
 8005d98:	f107 0108 	add.w	r1, r7, #8
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4798      	blx	r3
 8005da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005da2:	e05d      	b.n	8005e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa60 	bl	800626c <USBD_CtlError>
            err++;
 8005dac:	7afb      	ldrb	r3, [r7, #11]
 8005dae:	3301      	adds	r3, #1
 8005db0:	72fb      	strb	r3, [r7, #11]
          break;
 8005db2:	e055      	b.n	8005e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00b      	beq.n	8005dd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	7c12      	ldrb	r2, [r2, #16]
 8005dcc:	f107 0108 	add.w	r1, r7, #8
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	4798      	blx	r3
 8005dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dd6:	e043      	b.n	8005e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fa46 	bl	800626c <USBD_CtlError>
            err++;
 8005de0:	7afb      	ldrb	r3, [r7, #11]
 8005de2:	3301      	adds	r3, #1
 8005de4:	72fb      	strb	r3, [r7, #11]
          break;
 8005de6:	e03b      	b.n	8005e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00b      	beq.n	8005e0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	7c12      	ldrb	r2, [r2, #16]
 8005e00:	f107 0108 	add.w	r1, r7, #8
 8005e04:	4610      	mov	r0, r2
 8005e06:	4798      	blx	r3
 8005e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e0a:	e029      	b.n	8005e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa2c 	bl	800626c <USBD_CtlError>
            err++;
 8005e14:	7afb      	ldrb	r3, [r7, #11]
 8005e16:	3301      	adds	r3, #1
 8005e18:	72fb      	strb	r3, [r7, #11]
          break;
 8005e1a:	e021      	b.n	8005e60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	7c12      	ldrb	r2, [r2, #16]
 8005e34:	f107 0108 	add.w	r1, r7, #8
 8005e38:	4610      	mov	r0, r2
 8005e3a:	4798      	blx	r3
 8005e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e3e:	e00f      	b.n	8005e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fa12 	bl	800626c <USBD_CtlError>
            err++;
 8005e48:	7afb      	ldrb	r3, [r7, #11]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e4e:	e007      	b.n	8005e60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fa0a 	bl	800626c <USBD_CtlError>
          err++;
 8005e58:	7afb      	ldrb	r3, [r7, #11]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005e5e:	e038      	b.n	8005ed2 <USBD_GetDescriptor+0x286>
 8005e60:	e037      	b.n	8005ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	7c1b      	ldrb	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	f107 0208 	add.w	r2, r7, #8
 8005e76:	4610      	mov	r0, r2
 8005e78:	4798      	blx	r3
 8005e7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e7c:	e029      	b.n	8005ed2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f9f3 	bl	800626c <USBD_CtlError>
        err++;
 8005e86:	7afb      	ldrb	r3, [r7, #11]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	72fb      	strb	r3, [r7, #11]
      break;
 8005e8c:	e021      	b.n	8005ed2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	7c1b      	ldrb	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10d      	bne.n	8005eb2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	f107 0208 	add.w	r2, r7, #8
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	4798      	blx	r3
 8005ea6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	2207      	movs	r2, #7
 8005eae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005eb0:	e00f      	b.n	8005ed2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f9d9 	bl	800626c <USBD_CtlError>
        err++;
 8005eba:	7afb      	ldrb	r3, [r7, #11]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8005ec0:	e007      	b.n	8005ed2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f9d1 	bl	800626c <USBD_CtlError>
      err++;
 8005eca:	7afb      	ldrb	r3, [r7, #11]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	72fb      	strb	r3, [r7, #11]
      break;
 8005ed0:	bf00      	nop
  }

  if (err != 0U)
 8005ed2:	7afb      	ldrb	r3, [r7, #11]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d11c      	bne.n	8005f12 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005ed8:	893b      	ldrh	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d011      	beq.n	8005f02 <USBD_GetDescriptor+0x2b6>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	88db      	ldrh	r3, [r3, #6]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00d      	beq.n	8005f02 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	88da      	ldrh	r2, [r3, #6]
 8005eea:	893b      	ldrh	r3, [r7, #8]
 8005eec:	4293      	cmp	r3, r2
 8005eee:	bf28      	it	cs
 8005ef0:	4613      	movcs	r3, r2
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ef6:	893b      	ldrh	r3, [r7, #8]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fa1f 	bl	8006340 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	88db      	ldrh	r3, [r3, #6]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fa76 	bl	80063fc <USBD_CtlSendStatus>
 8005f10:	e000      	b.n	8005f14 <USBD_GetDescriptor+0x2c8>
    return;
 8005f12:	bf00      	nop
    }
  }
}
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop

08005f1c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	889b      	ldrh	r3, [r3, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d130      	bne.n	8005f90 <USBD_SetAddress+0x74>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	88db      	ldrh	r3, [r3, #6]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d12c      	bne.n	8005f90 <USBD_SetAddress+0x74>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	885b      	ldrh	r3, [r3, #2]
 8005f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f3c:	d828      	bhi.n	8005f90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	885b      	ldrh	r3, [r3, #2]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d104      	bne.n	8005f5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f988 	bl	800626c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f5c:	e01c      	b.n	8005f98 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	7bfa      	ldrb	r2, [r7, #15]
 8005f62:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f003 fbb8 	bl	80096e0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fa43 	bl	80063fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d004      	beq.n	8005f86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f84:	e008      	b.n	8005f98 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f8e:	e003      	b.n	8005f98 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f96a 	bl	800626c <USBD_CtlError>
  }
}
 8005f98:	bf00      	nop
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	885b      	ldrh	r3, [r3, #2]
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	4b41      	ldr	r3, [pc, #260]	; (80060b8 <USBD_SetConfig+0x118>)
 8005fb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fb4:	4b40      	ldr	r3, [pc, #256]	; (80060b8 <USBD_SetConfig+0x118>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d904      	bls.n	8005fc6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f954 	bl	800626c <USBD_CtlError>
 8005fc4:	e075      	b.n	80060b2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d002      	beq.n	8005fd6 <USBD_SetConfig+0x36>
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d023      	beq.n	800601c <USBD_SetConfig+0x7c>
 8005fd4:	e062      	b.n	800609c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005fd6:	4b38      	ldr	r3, [pc, #224]	; (80060b8 <USBD_SetConfig+0x118>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d01a      	beq.n	8006014 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005fde:	4b36      	ldr	r3, [pc, #216]	; (80060b8 <USBD_SetConfig+0x118>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2203      	movs	r2, #3
 8005fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005ff0:	4b31      	ldr	r3, [pc, #196]	; (80060b8 <USBD_SetConfig+0x118>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff f9f3 	bl	80053e2 <USBD_SetClassConfig>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d104      	bne.n	800600c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f931 	bl	800626c <USBD_CtlError>
            return;
 800600a:	e052      	b.n	80060b2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f9f5 	bl	80063fc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006012:	e04e      	b.n	80060b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f9f1 	bl	80063fc <USBD_CtlSendStatus>
        break;
 800601a:	e04a      	b.n	80060b2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800601c:	4b26      	ldr	r3, [pc, #152]	; (80060b8 <USBD_SetConfig+0x118>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d112      	bne.n	800604a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800602c:	4b22      	ldr	r3, [pc, #136]	; (80060b8 <USBD_SetConfig+0x118>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	461a      	mov	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006036:	4b20      	ldr	r3, [pc, #128]	; (80060b8 <USBD_SetConfig+0x118>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff f9ef 	bl	8005420 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f9da 	bl	80063fc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006048:	e033      	b.n	80060b2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800604a:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <USBD_SetConfig+0x118>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	429a      	cmp	r2, r3
 8006056:	d01d      	beq.n	8006094 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff f9dd 	bl	8005420 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006066:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <USBD_SetConfig+0x118>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006070:	4b11      	ldr	r3, [pc, #68]	; (80060b8 <USBD_SetConfig+0x118>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff f9b3 	bl	80053e2 <USBD_SetClassConfig>
 800607c:	4603      	mov	r3, r0
 800607e:	2b02      	cmp	r3, #2
 8006080:	d104      	bne.n	800608c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f8f1 	bl	800626c <USBD_CtlError>
            return;
 800608a:	e012      	b.n	80060b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f9b5 	bl	80063fc <USBD_CtlSendStatus>
        break;
 8006092:	e00e      	b.n	80060b2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f9b1 	bl	80063fc <USBD_CtlSendStatus>
        break;
 800609a:	e00a      	b.n	80060b2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f8e4 	bl	800626c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80060a4:	4b04      	ldr	r3, [pc, #16]	; (80060b8 <USBD_SetConfig+0x118>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff f9b8 	bl	8005420 <USBD_ClrClassConfig>
        break;
 80060b0:	bf00      	nop
    }
  }
}
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	2000019c 	.word	0x2000019c

080060bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	88db      	ldrh	r3, [r3, #6]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d004      	beq.n	80060d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f8cb 	bl	800626c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80060d6:	e021      	b.n	800611c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060de:	2b01      	cmp	r3, #1
 80060e0:	db17      	blt.n	8006112 <USBD_GetConfig+0x56>
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	dd02      	ble.n	80060ec <USBD_GetConfig+0x30>
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d00b      	beq.n	8006102 <USBD_GetConfig+0x46>
 80060ea:	e012      	b.n	8006112 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3308      	adds	r3, #8
 80060f6:	2201      	movs	r2, #1
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f920 	bl	8006340 <USBD_CtlSendData>
        break;
 8006100:	e00c      	b.n	800611c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3304      	adds	r3, #4
 8006106:	2201      	movs	r2, #1
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f918 	bl	8006340 <USBD_CtlSendData>
        break;
 8006110:	e004      	b.n	800611c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f8a9 	bl	800626c <USBD_CtlError>
        break;
 800611a:	bf00      	nop
}
 800611c:	bf00      	nop
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006134:	3b01      	subs	r3, #1
 8006136:	2b02      	cmp	r3, #2
 8006138:	d81e      	bhi.n	8006178 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	88db      	ldrh	r3, [r3, #6]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d004      	beq.n	800614c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f891 	bl	800626c <USBD_CtlError>
        break;
 800614a:	e01a      	b.n	8006182 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f043 0202 	orr.w	r2, r3, #2
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	330c      	adds	r3, #12
 800616c:	2202      	movs	r2, #2
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8e5 	bl	8006340 <USBD_CtlSendData>
      break;
 8006176:	e004      	b.n	8006182 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f876 	bl	800626c <USBD_CtlError>
      break;
 8006180:	bf00      	nop
  }
}
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	885b      	ldrh	r3, [r3, #2]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d106      	bne.n	80061aa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f929 	bl	80063fc <USBD_CtlSendStatus>
  }
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c2:	3b01      	subs	r3, #1
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d80b      	bhi.n	80061e0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	885b      	ldrh	r3, [r3, #2]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d10c      	bne.n	80061ea <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f90f 	bl	80063fc <USBD_CtlSendStatus>
      }
      break;
 80061de:	e004      	b.n	80061ea <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f842 	bl	800626c <USBD_CtlError>
      break;
 80061e8:	e000      	b.n	80061ec <USBD_ClrFeature+0x3a>
      break;
 80061ea:	bf00      	nop
  }
}
 80061ec:	bf00      	nop
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781a      	ldrb	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	785a      	ldrb	r2, [r3, #1]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	3302      	adds	r3, #2
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	b29a      	uxth	r2, r3
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	3303      	adds	r3, #3
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	b29b      	uxth	r3, r3
 8006222:	4413      	add	r3, r2
 8006224:	b29a      	uxth	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	3304      	adds	r3, #4
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	b29a      	uxth	r2, r3
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	3305      	adds	r3, #5
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	b29b      	uxth	r3, r3
 800623e:	4413      	add	r3, r2
 8006240:	b29a      	uxth	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	3306      	adds	r3, #6
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b29a      	uxth	r2, r3
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	3307      	adds	r3, #7
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	b29b      	uxth	r3, r3
 800625a:	4413      	add	r3, r2
 800625c:	b29a      	uxth	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	80da      	strh	r2, [r3, #6]

}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr

0800626c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006276:	2180      	movs	r1, #128	; 0x80
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f003 f9c7 	bl	800960c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800627e:	2100      	movs	r1, #0
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f003 f9c3 	bl	800960c <USBD_LL_StallEP>
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b086      	sub	sp, #24
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d032      	beq.n	800630a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f834 	bl	8006312 <USBD_GetLen>
 80062aa:	4603      	mov	r3, r0
 80062ac:	3301      	adds	r3, #1
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	75fa      	strb	r2, [r7, #23]
 80062be:	461a      	mov	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4413      	add	r3, r2
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	7812      	ldrb	r2, [r2, #0]
 80062c8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	75fa      	strb	r2, [r7, #23]
 80062d0:	461a      	mov	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	4413      	add	r3, r2
 80062d6:	2203      	movs	r2, #3
 80062d8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80062da:	e012      	b.n	8006302 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	60fa      	str	r2, [r7, #12]
 80062e2:	7dfa      	ldrb	r2, [r7, #23]
 80062e4:	1c51      	adds	r1, r2, #1
 80062e6:	75f9      	strb	r1, [r7, #23]
 80062e8:	4611      	mov	r1, r2
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	440a      	add	r2, r1
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	75fa      	strb	r2, [r7, #23]
 80062f8:	461a      	mov	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	4413      	add	r3, r2
 80062fe:	2200      	movs	r2, #0
 8006300:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e8      	bne.n	80062dc <USBD_GetString+0x4e>
    }
  }
}
 800630a:	bf00      	nop
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800631e:	e005      	b.n	800632c <USBD_GetLen+0x1a>
  {
    len++;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	3301      	adds	r3, #1
 8006324:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3301      	adds	r3, #1
 800632a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1f5      	bne.n	8006320 <USBD_GetLen+0xe>
  }

  return len;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr

08006340 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	4613      	mov	r3, r2
 800634c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2202      	movs	r2, #2
 8006352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006356:	88fa      	ldrh	r2, [r7, #6]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	2100      	movs	r1, #0
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f003 f9d8 	bl	800971e <USBD_LL_Transmit>

  return USBD_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	4613      	mov	r3, r2
 8006384:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	2100      	movs	r1, #0
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f003 f9c6 	bl	800971e <USBD_LL_Transmit>

  return USBD_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	4613      	mov	r3, r2
 80063a8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2203      	movs	r2, #3
 80063ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80063b2:	88fa      	ldrh	r2, [r7, #6]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80063ba:	88fa      	ldrh	r2, [r7, #6]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	2100      	movs	r1, #0
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f003 f9cb 	bl	8009764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063e6:	88fb      	ldrh	r3, [r7, #6]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	2100      	movs	r1, #0
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f003 f9b9 	bl	8009764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2204      	movs	r2, #4
 8006408:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800640c:	2300      	movs	r3, #0
 800640e:	2200      	movs	r2, #0
 8006410:	2100      	movs	r1, #0
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f003 f983 	bl	800971e <USBD_LL_Transmit>

  return USBD_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b082      	sub	sp, #8
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2205      	movs	r2, #5
 800642e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006432:	2300      	movs	r3, #0
 8006434:	2200      	movs	r2, #0
 8006436:	2100      	movs	r1, #0
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f003 f993 	bl	8009764 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800644e:	f3ef 8305 	mrs	r3, IPSR
 8006452:	60bb      	str	r3, [r7, #8]
  return(result);
 8006454:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10f      	bne.n	800647a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800645a:	f3ef 8310 	mrs	r3, PRIMASK
 800645e:	607b      	str	r3, [r7, #4]
  return(result);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <osKernelInitialize+0x32>
 8006466:	4b10      	ldr	r3, [pc, #64]	; (80064a8 <osKernelInitialize+0x60>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b02      	cmp	r3, #2
 800646c:	d109      	bne.n	8006482 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800646e:	f3ef 8311 	mrs	r3, BASEPRI
 8006472:	603b      	str	r3, [r7, #0]
  return(result);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800647a:	f06f 0305 	mvn.w	r3, #5
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	e00c      	b.n	800649c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006482:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <osKernelInitialize+0x60>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d105      	bne.n	8006496 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800648a:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <osKernelInitialize+0x60>)
 800648c:	2201      	movs	r2, #1
 800648e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e002      	b.n	800649c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006496:	f04f 33ff 	mov.w	r3, #4294967295
 800649a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800649c:	68fb      	ldr	r3, [r7, #12]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr
 80064a8:	200001a0 	.word	0x200001a0

080064ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064b2:	f3ef 8305 	mrs	r3, IPSR
 80064b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80064b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10f      	bne.n	80064de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064be:	f3ef 8310 	mrs	r3, PRIMASK
 80064c2:	607b      	str	r3, [r7, #4]
  return(result);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d109      	bne.n	80064de <osKernelStart+0x32>
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <osKernelStart+0x64>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d109      	bne.n	80064e6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064d2:	f3ef 8311 	mrs	r3, BASEPRI
 80064d6:	603b      	str	r3, [r7, #0]
  return(result);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80064de:	f06f 0305 	mvn.w	r3, #5
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	e00e      	b.n	8006504 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80064e6:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <osKernelStart+0x64>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d107      	bne.n	80064fe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80064ee:	4b08      	ldr	r3, [pc, #32]	; (8006510 <osKernelStart+0x64>)
 80064f0:	2202      	movs	r2, #2
 80064f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80064f4:	f001 f918 	bl	8007728 <vTaskStartScheduler>
      stat = osOK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e002      	b.n	8006504 <osKernelStart+0x58>
    } else {
      stat = osError;
 80064fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006502:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006504:	68fb      	ldr	r3, [r7, #12]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	200001a0 	.word	0x200001a0

08006514 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b092      	sub	sp, #72	; 0x48
 8006518:	af04      	add	r7, sp, #16
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006524:	f3ef 8305 	mrs	r3, IPSR
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800652c:	2b00      	cmp	r3, #0
 800652e:	f040 8094 	bne.w	800665a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006532:	f3ef 8310 	mrs	r3, PRIMASK
 8006536:	623b      	str	r3, [r7, #32]
  return(result);
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	2b00      	cmp	r3, #0
 800653c:	f040 808d 	bne.w	800665a <osThreadNew+0x146>
 8006540:	4b48      	ldr	r3, [pc, #288]	; (8006664 <osThreadNew+0x150>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d106      	bne.n	8006556 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006548:	f3ef 8311 	mrs	r3, BASEPRI
 800654c:	61fb      	str	r3, [r7, #28]
  return(result);
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f040 8082 	bne.w	800665a <osThreadNew+0x146>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d07e      	beq.n	800665a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800655c:	2380      	movs	r3, #128	; 0x80
 800655e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006560:	2318      	movs	r3, #24
 8006562:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006564:	2300      	movs	r3, #0
 8006566:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006568:	f107 031b 	add.w	r3, r7, #27
 800656c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800656e:	f04f 33ff 	mov.w	r3, #4294967295
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d045      	beq.n	8006606 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <osThreadNew+0x74>
        name = attr->name;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <osThreadNew+0x9a>
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	2b38      	cmp	r3, #56	; 0x38
 80065a0:	d805      	bhi.n	80065ae <osThreadNew+0x9a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <osThreadNew+0x9e>
        return (NULL);
 80065ae:	2300      	movs	r3, #0
 80065b0:	e054      	b.n	800665c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	089b      	lsrs	r3, r3, #2
 80065c0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00e      	beq.n	80065e8 <osThreadNew+0xd4>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	2b73      	cmp	r3, #115	; 0x73
 80065d0:	d90a      	bls.n	80065e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d006      	beq.n	80065e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <osThreadNew+0xd4>
        mem = 1;
 80065e2:	2301      	movs	r3, #1
 80065e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e6:	e010      	b.n	800660a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10c      	bne.n	800660a <osThreadNew+0xf6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d108      	bne.n	800660a <osThreadNew+0xf6>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d104      	bne.n	800660a <osThreadNew+0xf6>
          mem = 0;
 8006600:	2300      	movs	r3, #0
 8006602:	62bb      	str	r3, [r7, #40]	; 0x28
 8006604:	e001      	b.n	800660a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	2b01      	cmp	r3, #1
 800660e:	d110      	bne.n	8006632 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006618:	9202      	str	r2, [sp, #8]
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006624:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fe3e 	bl	80072a8 <xTaskCreateStatic>
 800662c:	4603      	mov	r3, r0
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	e013      	b.n	800665a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	2b00      	cmp	r3, #0
 8006636:	d110      	bne.n	800665a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	b29a      	uxth	r2, r3
 800663c:	f107 0314 	add.w	r3, r7, #20
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 fe85 	bl	800735a <xTaskCreate>
 8006650:	4603      	mov	r3, r0
 8006652:	2b01      	cmp	r3, #1
 8006654:	d001      	beq.n	800665a <osThreadNew+0x146>
          hTask = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800665a:	697b      	ldr	r3, [r7, #20]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3738      	adds	r7, #56	; 0x38
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	200001a0 	.word	0x200001a0

08006668 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006670:	f3ef 8305 	mrs	r3, IPSR
 8006674:	613b      	str	r3, [r7, #16]
  return(result);
 8006676:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10f      	bne.n	800669c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800667c:	f3ef 8310 	mrs	r3, PRIMASK
 8006680:	60fb      	str	r3, [r7, #12]
  return(result);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d109      	bne.n	800669c <osDelay+0x34>
 8006688:	4b0d      	ldr	r3, [pc, #52]	; (80066c0 <osDelay+0x58>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d109      	bne.n	80066a4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006690:	f3ef 8311 	mrs	r3, BASEPRI
 8006694:	60bb      	str	r3, [r7, #8]
  return(result);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <osDelay+0x3c>
    stat = osErrorISR;
 800669c:	f06f 0305 	mvn.w	r3, #5
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	e007      	b.n	80066b4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f001 f806 	bl	80076c0 <vTaskDelay>
    }
  }

  return (stat);
 80066b4:	697b      	ldr	r3, [r7, #20]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	200001a0 	.word	0x200001a0

080066c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4a06      	ldr	r2, [pc, #24]	; (80066ec <vApplicationGetIdleTaskMemory+0x28>)
 80066d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	4a05      	ldr	r2, [pc, #20]	; (80066f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80066da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2280      	movs	r2, #128	; 0x80
 80066e0:	601a      	str	r2, [r3, #0]
}
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr
 80066ec:	200001a4 	.word	0x200001a4
 80066f0:	20000218 	.word	0x20000218

080066f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4a07      	ldr	r2, [pc, #28]	; (8006720 <vApplicationGetTimerTaskMemory+0x2c>)
 8006704:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4a06      	ldr	r2, [pc, #24]	; (8006724 <vApplicationGetTimerTaskMemory+0x30>)
 800670a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006712:	601a      	str	r2, [r3, #0]
}
 8006714:	bf00      	nop
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20000418 	.word	0x20000418
 8006724:	2000048c 	.word	0x2000048c

08006728 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f103 0208 	add.w	r2, r3, #8
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f04f 32ff 	mov.w	r2, #4294967295
 8006740:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f103 0208 	add.w	r2, r3, #8
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f103 0208 	add.w	r2, r3, #8
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr

08006766 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr

0800677e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800677e:	b480      	push	{r7}
 8006780:	b085      	sub	sp, #20
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	601a      	str	r2, [r3, #0]
}
 80067ba:	bf00      	nop
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr

080067c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067da:	d103      	bne.n	80067e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	e00c      	b.n	80067fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3308      	adds	r3, #8
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e002      	b.n	80067f2 <vListInsert+0x2e>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d2f6      	bcs.n	80067ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	bf00      	nop
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr

08006834 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6892      	ldr	r2, [r2, #8]
 800684a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6852      	ldr	r2, [r2, #4]
 8006854:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	429a      	cmp	r2, r3
 800685e:	d103      	bne.n	8006868 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	1e5a      	subs	r2, r3, #1
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	bc80      	pop	{r7}
 8006884:	4770      	bx	lr
	...

08006888 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	60bb      	str	r3, [r7, #8]
 80068ae:	e7fe      	b.n	80068ae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80068b0:	f002 f86a 	bl	8008988 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068bc:	68f9      	ldr	r1, [r7, #12]
 80068be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068c0:	fb01 f303 	mul.w	r3, r1, r3
 80068c4:	441a      	add	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e0:	3b01      	subs	r3, #1
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068e6:	fb01 f303 	mul.w	r3, r1, r3
 80068ea:	441a      	add	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	22ff      	movs	r2, #255	; 0xff
 80068f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	22ff      	movs	r2, #255	; 0xff
 80068fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d114      	bne.n	8006930 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01a      	beq.n	8006944 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3310      	adds	r3, #16
 8006912:	4618      	mov	r0, r3
 8006914:	f001 f9aa 	bl	8007c6c <xTaskRemoveFromEventList>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d012      	beq.n	8006944 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800691e:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <xQueueGenericReset+0xcc>)
 8006920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	e009      	b.n	8006944 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3310      	adds	r3, #16
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff fef7 	bl	8006728 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3324      	adds	r3, #36	; 0x24
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff fef2 	bl	8006728 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006944:	f002 f84e 	bl	80089e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006948:	2301      	movs	r3, #1
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	e000ed04 	.word	0xe000ed04

08006958 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08e      	sub	sp, #56	; 0x38
 800695c:	af02      	add	r7, sp, #8
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d109      	bne.n	8006980 <xQueueGenericCreateStatic+0x28>
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	62bb      	str	r3, [r7, #40]	; 0x28
 800697e:	e7fe      	b.n	800697e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <xQueueGenericCreateStatic+0x42>
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
 8006998:	e7fe      	b.n	8006998 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <xQueueGenericCreateStatic+0x4e>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <xQueueGenericCreateStatic+0x52>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <xQueueGenericCreateStatic+0x54>
 80069aa:	2300      	movs	r3, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d109      	bne.n	80069c4 <xQueueGenericCreateStatic+0x6c>
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	623b      	str	r3, [r7, #32]
 80069c2:	e7fe      	b.n	80069c2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d102      	bne.n	80069d0 <xQueueGenericCreateStatic+0x78>
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <xQueueGenericCreateStatic+0x7c>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <xQueueGenericCreateStatic+0x7e>
 80069d4:	2300      	movs	r3, #0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <xQueueGenericCreateStatic+0x96>
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	e7fe      	b.n	80069ec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069ee:	2350      	movs	r3, #80	; 0x50
 80069f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b50      	cmp	r3, #80	; 0x50
 80069f6:	d009      	beq.n	8006a0c <xQueueGenericCreateStatic+0xb4>
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	e7fe      	b.n	8006a0a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	4613      	mov	r3, r2
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f842 	bl	8006ab6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3730      	adds	r7, #48	; 0x30
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	; 0x28
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d109      	bne.n	8006a64 <xQueueGenericCreate+0x28>
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	613b      	str	r3, [r7, #16]
 8006a62:	e7fe      	b.n	8006a62 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61fb      	str	r3, [r7, #28]
 8006a6e:	e004      	b.n	8006a7a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	fb02 f303 	mul.w	r3, r2, r3
 8006a78:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	3350      	adds	r3, #80	; 0x50
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f002 f878 	bl	8008b74 <pvPortMalloc>
 8006a84:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00f      	beq.n	8006aac <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	3350      	adds	r3, #80	; 0x50
 8006a90:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a9a:	79fa      	ldrb	r2, [r7, #7]
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 f805 	bl	8006ab6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006aac:	69bb      	ldr	r3, [r7, #24]
	}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3720      	adds	r7, #32
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
 8006ac2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d103      	bne.n	8006ad2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	e002      	b.n	8006ad8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	69b8      	ldr	r0, [r7, #24]
 8006ae8:	f7ff fece 	bl	8006888 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	78fa      	ldrb	r2, [r7, #3]
 8006af0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006af4:	bf00      	nop
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08e      	sub	sp, #56	; 0x38
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <xQueueGenericSend+0x30>
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b2a:	e7fe      	b.n	8006b2a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d103      	bne.n	8006b3a <xQueueGenericSend+0x3e>
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <xQueueGenericSend+0x42>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <xQueueGenericSend+0x44>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d109      	bne.n	8006b58 <xQueueGenericSend+0x5c>
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
 8006b56:	e7fe      	b.n	8006b56 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d103      	bne.n	8006b66 <xQueueGenericSend+0x6a>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <xQueueGenericSend+0x6e>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <xQueueGenericSend+0x70>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <xQueueGenericSend+0x88>
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	623b      	str	r3, [r7, #32]
 8006b82:	e7fe      	b.n	8006b82 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b84:	f001 fa2c 	bl	8007fe0 <xTaskGetSchedulerState>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d102      	bne.n	8006b94 <xQueueGenericSend+0x98>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <xQueueGenericSend+0x9c>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <xQueueGenericSend+0x9e>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <xQueueGenericSend+0xb6>
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	e7fe      	b.n	8006bb0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bb2:	f001 fee9 	bl	8008988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d302      	bcc.n	8006bc8 <xQueueGenericSend+0xcc>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d129      	bne.n	8006c1c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	68b9      	ldr	r1, [r7, #8]
 8006bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bce:	f000 f9ff 	bl	8006fd0 <prvCopyDataToQueue>
 8006bd2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d010      	beq.n	8006bfe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	3324      	adds	r3, #36	; 0x24
 8006be0:	4618      	mov	r0, r3
 8006be2:	f001 f843 	bl	8007c6c <xTaskRemoveFromEventList>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d013      	beq.n	8006c14 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bec:	4b3f      	ldr	r3, [pc, #252]	; (8006cec <xQueueGenericSend+0x1f0>)
 8006bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	e00a      	b.n	8006c14 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c04:	4b39      	ldr	r3, [pc, #228]	; (8006cec <xQueueGenericSend+0x1f0>)
 8006c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c14:	f001 fee6 	bl	80089e4 <vPortExitCritical>
				return pdPASS;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e063      	b.n	8006ce4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d103      	bne.n	8006c2a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c22:	f001 fedf 	bl	80089e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e05c      	b.n	8006ce4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d106      	bne.n	8006c3e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c30:	f107 0314 	add.w	r3, r7, #20
 8006c34:	4618      	mov	r0, r3
 8006c36:	f001 f87b 	bl	8007d30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c3e:	f001 fed1 	bl	80089e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c42:	f000 fdd7 	bl	80077f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c46:	f001 fe9f 	bl	8008988 <vPortEnterCritical>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c50:	b25b      	sxtb	r3, r3
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c56:	d103      	bne.n	8006c60 <xQueueGenericSend+0x164>
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c66:	b25b      	sxtb	r3, r3
 8006c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6c:	d103      	bne.n	8006c76 <xQueueGenericSend+0x17a>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c76:	f001 feb5 	bl	80089e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c7a:	1d3a      	adds	r2, r7, #4
 8006c7c:	f107 0314 	add.w	r3, r7, #20
 8006c80:	4611      	mov	r1, r2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f001 f86a 	bl	8007d5c <xTaskCheckForTimeOut>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d124      	bne.n	8006cd8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c90:	f000 fa96 	bl	80071c0 <prvIsQueueFull>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d018      	beq.n	8006ccc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	3310      	adds	r3, #16
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 ff94 	bl	8007bd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006caa:	f000 fa21 	bl	80070f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006cae:	f000 fdaf 	bl	8007810 <xTaskResumeAll>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f47f af7c 	bne.w	8006bb2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006cba:	4b0c      	ldr	r3, [pc, #48]	; (8006cec <xQueueGenericSend+0x1f0>)
 8006cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	e772      	b.n	8006bb2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cce:	f000 fa0f 	bl	80070f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cd2:	f000 fd9d 	bl	8007810 <xTaskResumeAll>
 8006cd6:	e76c      	b.n	8006bb2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cda:	f000 fa09 	bl	80070f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cde:	f000 fd97 	bl	8007810 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ce2:	2300      	movs	r3, #0
		}
	}
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3738      	adds	r7, #56	; 0x38
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	e000ed04 	.word	0xe000ed04

08006cf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08e      	sub	sp, #56	; 0x38
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
 8006cfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <xQueueGenericSendFromISR+0x2c>
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
 8006d1a:	e7fe      	b.n	8006d1a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d103      	bne.n	8006d2a <xQueueGenericSendFromISR+0x3a>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <xQueueGenericSendFromISR+0x3e>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <xQueueGenericSendFromISR+0x40>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d109      	bne.n	8006d48 <xQueueGenericSendFromISR+0x58>
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	623b      	str	r3, [r7, #32]
 8006d46:	e7fe      	b.n	8006d46 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d103      	bne.n	8006d56 <xQueueGenericSendFromISR+0x66>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d101      	bne.n	8006d5a <xQueueGenericSendFromISR+0x6a>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <xQueueGenericSendFromISR+0x6c>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d109      	bne.n	8006d74 <xQueueGenericSendFromISR+0x84>
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	61fb      	str	r3, [r7, #28]
 8006d72:	e7fe      	b.n	8006d72 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d74:	f001 fec2 	bl	8008afc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d78:	f3ef 8211 	mrs	r2, BASEPRI
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	61ba      	str	r2, [r7, #24]
 8006d8e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d90:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d92:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d302      	bcc.n	8006da6 <xQueueGenericSendFromISR+0xb6>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d12c      	bne.n	8006e00 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	68b9      	ldr	r1, [r7, #8]
 8006db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006db6:	f000 f90b 	bl	8006fd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006dba:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc2:	d112      	bne.n	8006dea <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d016      	beq.n	8006dfa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	3324      	adds	r3, #36	; 0x24
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 ff4b 	bl	8007c6c <xTaskRemoveFromEventList>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00e      	beq.n	8006dfa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	e007      	b.n	8006dfa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006dea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dee:	3301      	adds	r3, #1
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	b25a      	sxtb	r2, r3
 8006df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006dfe:	e001      	b.n	8006e04 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e00:	2300      	movs	r3, #0
 8006e02:	637b      	str	r3, [r7, #52]	; 0x34
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3738      	adds	r7, #56	; 0x38
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08c      	sub	sp, #48	; 0x30
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d109      	bne.n	8006e46 <xQueueReceive+0x2e>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	623b      	str	r3, [r7, #32]
 8006e44:	e7fe      	b.n	8006e44 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d103      	bne.n	8006e54 <xQueueReceive+0x3c>
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <xQueueReceive+0x40>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e000      	b.n	8006e5a <xQueueReceive+0x42>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <xQueueReceive+0x5a>
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	61fb      	str	r3, [r7, #28]
 8006e70:	e7fe      	b.n	8006e70 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e72:	f001 f8b5 	bl	8007fe0 <xTaskGetSchedulerState>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d102      	bne.n	8006e82 <xQueueReceive+0x6a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <xQueueReceive+0x6e>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <xQueueReceive+0x70>
 8006e86:	2300      	movs	r3, #0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d109      	bne.n	8006ea0 <xQueueReceive+0x88>
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	e7fe      	b.n	8006e9e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ea0:	f001 fd72 	bl	8008988 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01f      	beq.n	8006ef0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb4:	f000 f8f6 	bl	80070a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	1e5a      	subs	r2, r3, #1
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00f      	beq.n	8006ee8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	3310      	adds	r3, #16
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fecd 	bl	8007c6c <xTaskRemoveFromEventList>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d007      	beq.n	8006ee8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ed8:	4b3c      	ldr	r3, [pc, #240]	; (8006fcc <xQueueReceive+0x1b4>)
 8006eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ee8:	f001 fd7c 	bl	80089e4 <vPortExitCritical>
				return pdPASS;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e069      	b.n	8006fc4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d103      	bne.n	8006efe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ef6:	f001 fd75 	bl	80089e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e062      	b.n	8006fc4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d106      	bne.n	8006f12 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f04:	f107 0310 	add.w	r3, r7, #16
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 ff11 	bl	8007d30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f12:	f001 fd67 	bl	80089e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f16:	f000 fc6d 	bl	80077f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f1a:	f001 fd35 	bl	8008988 <vPortEnterCritical>
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f24:	b25b      	sxtb	r3, r3
 8006f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2a:	d103      	bne.n	8006f34 <xQueueReceive+0x11c>
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f3a:	b25b      	sxtb	r3, r3
 8006f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f40:	d103      	bne.n	8006f4a <xQueueReceive+0x132>
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f4a:	f001 fd4b 	bl	80089e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f4e:	1d3a      	adds	r2, r7, #4
 8006f50:	f107 0310 	add.w	r3, r7, #16
 8006f54:	4611      	mov	r1, r2
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 ff00 	bl	8007d5c <xTaskCheckForTimeOut>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d123      	bne.n	8006faa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f64:	f000 f916 	bl	8007194 <prvIsQueueEmpty>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d017      	beq.n	8006f9e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f70:	3324      	adds	r3, #36	; 0x24
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	4611      	mov	r1, r2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fe2a 	bl	8007bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f7e:	f000 f8b7 	bl	80070f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f82:	f000 fc45 	bl	8007810 <xTaskResumeAll>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d189      	bne.n	8006ea0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006f8c:	4b0f      	ldr	r3, [pc, #60]	; (8006fcc <xQueueReceive+0x1b4>)
 8006f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	e780      	b.n	8006ea0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa0:	f000 f8a6 	bl	80070f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fa4:	f000 fc34 	bl	8007810 <xTaskResumeAll>
 8006fa8:	e77a      	b.n	8006ea0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fac:	f000 f8a0 	bl	80070f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fb0:	f000 fc2e 	bl	8007810 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb6:	f000 f8ed 	bl	8007194 <prvIsQueueEmpty>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f43f af6f 	beq.w	8006ea0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3730      	adds	r7, #48	; 0x30
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	e000ed04 	.word	0xe000ed04

08006fd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10d      	bne.n	800700a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d14d      	bne.n	8007092 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 f80e 	bl	800801c <xTaskPriorityDisinherit>
 8007000:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	605a      	str	r2, [r3, #4]
 8007008:	e043      	b.n	8007092 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d119      	bne.n	8007044 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6898      	ldr	r0, [r3, #8]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007018:	461a      	mov	r2, r3
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	f002 fc48 	bl	80098b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	441a      	add	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	429a      	cmp	r2, r3
 8007038:	d32b      	bcc.n	8007092 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	609a      	str	r2, [r3, #8]
 8007042:	e026      	b.n	8007092 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68d8      	ldr	r0, [r3, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	461a      	mov	r2, r3
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	f002 fc2e 	bl	80098b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	425b      	negs	r3, r3
 800705e:	441a      	add	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d207      	bcs.n	8007080 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	425b      	negs	r3, r3
 800707a:	441a      	add	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b02      	cmp	r3, #2
 8007084:	d105      	bne.n	8007092 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	3b01      	subs	r3, #1
 8007090:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800709a:	697b      	ldr	r3, [r7, #20]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d018      	beq.n	80070e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	441a      	add	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d303      	bcc.n	80070d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68d9      	ldr	r1, [r3, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e0:	461a      	mov	r2, r3
 80070e2:	6838      	ldr	r0, [r7, #0]
 80070e4:	f002 fbe4 	bl	80098b0 <memcpy>
	}
}
 80070e8:	bf00      	nop
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070f8:	f001 fc46 	bl	8008988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007102:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007104:	e011      	b.n	800712a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	2b00      	cmp	r3, #0
 800710c:	d012      	beq.n	8007134 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3324      	adds	r3, #36	; 0x24
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fdaa 	bl	8007c6c <xTaskRemoveFromEventList>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800711e:	f000 fe7d 	bl	8007e1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	3b01      	subs	r3, #1
 8007126:	b2db      	uxtb	r3, r3
 8007128:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800712a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800712e:	2b00      	cmp	r3, #0
 8007130:	dce9      	bgt.n	8007106 <prvUnlockQueue+0x16>
 8007132:	e000      	b.n	8007136 <prvUnlockQueue+0x46>
					break;
 8007134:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	22ff      	movs	r2, #255	; 0xff
 800713a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800713e:	f001 fc51 	bl	80089e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007142:	f001 fc21 	bl	8008988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800714c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800714e:	e011      	b.n	8007174 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d012      	beq.n	800717e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3310      	adds	r3, #16
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fd85 	bl	8007c6c <xTaskRemoveFromEventList>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007168:	f000 fe58 	bl	8007e1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	3b01      	subs	r3, #1
 8007170:	b2db      	uxtb	r3, r3
 8007172:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007178:	2b00      	cmp	r3, #0
 800717a:	dce9      	bgt.n	8007150 <prvUnlockQueue+0x60>
 800717c:	e000      	b.n	8007180 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800717e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	22ff      	movs	r2, #255	; 0xff
 8007184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007188:	f001 fc2c 	bl	80089e4 <vPortExitCritical>
}
 800718c:	bf00      	nop
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800719c:	f001 fbf4 	bl	8008988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071a8:	2301      	movs	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	e001      	b.n	80071b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071b2:	f001 fc17 	bl	80089e4 <vPortExitCritical>

	return xReturn;
 80071b6:	68fb      	ldr	r3, [r7, #12]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071c8:	f001 fbde 	bl	8008988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d102      	bne.n	80071de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071d8:	2301      	movs	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e001      	b.n	80071e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071e2:	f001 fbff 	bl	80089e4 <vPortExitCritical>

	return xReturn;
 80071e6:	68fb      	ldr	r3, [r7, #12]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	e014      	b.n	800722a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007200:	4a0e      	ldr	r2, [pc, #56]	; (800723c <vQueueAddToRegistry+0x4c>)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10b      	bne.n	8007224 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800720c:	490b      	ldr	r1, [pc, #44]	; (800723c <vQueueAddToRegistry+0x4c>)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007216:	4a09      	ldr	r2, [pc, #36]	; (800723c <vQueueAddToRegistry+0x4c>)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	4413      	add	r3, r2
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007222:	e005      	b.n	8007230 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3301      	adds	r3, #1
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b07      	cmp	r3, #7
 800722e:	d9e7      	bls.n	8007200 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007230:	bf00      	nop
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	2000316c 	.word	0x2000316c

08007240 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007250:	f001 fb9a 	bl	8008988 <vPortEnterCritical>
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800725a:	b25b      	sxtb	r3, r3
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d103      	bne.n	800726a <vQueueWaitForMessageRestricted+0x2a>
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007270:	b25b      	sxtb	r3, r3
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007276:	d103      	bne.n	8007280 <vQueueWaitForMessageRestricted+0x40>
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007280:	f001 fbb0 	bl	80089e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	2b00      	cmp	r3, #0
 800728a:	d106      	bne.n	800729a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	3324      	adds	r3, #36	; 0x24
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fcbf 	bl	8007c18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800729a:	6978      	ldr	r0, [r7, #20]
 800729c:	f7ff ff28 	bl	80070f0 <prvUnlockQueue>
	}
 80072a0:	bf00      	nop
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08e      	sub	sp, #56	; 0x38
 80072ac:	af04      	add	r7, sp, #16
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d109      	bne.n	80072d0 <xTaskCreateStatic+0x28>
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	623b      	str	r3, [r7, #32]
 80072ce:	e7fe      	b.n	80072ce <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d109      	bne.n	80072ea <xTaskCreateStatic+0x42>
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	61fb      	str	r3, [r7, #28]
 80072e8:	e7fe      	b.n	80072e8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072ea:	2374      	movs	r3, #116	; 0x74
 80072ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	2b74      	cmp	r3, #116	; 0x74
 80072f2:	d009      	beq.n	8007308 <xTaskCreateStatic+0x60>
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	61bb      	str	r3, [r7, #24]
 8007306:	e7fe      	b.n	8007306 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01e      	beq.n	800734c <xTaskCreateStatic+0xa4>
 800730e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007310:	2b00      	cmp	r3, #0
 8007312:	d01b      	beq.n	800734c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800731c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	2202      	movs	r2, #2
 8007322:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007326:	2300      	movs	r3, #0
 8007328:	9303      	str	r3, [sp, #12]
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	9302      	str	r3, [sp, #8]
 800732e:	f107 0314 	add.w	r3, r7, #20
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f850 	bl	80073e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007346:	f000 f8d9 	bl	80074fc <prvAddNewTaskToReadyList>
 800734a:	e001      	b.n	8007350 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007350:	697b      	ldr	r3, [r7, #20]
	}
 8007352:	4618      	mov	r0, r3
 8007354:	3728      	adds	r7, #40	; 0x28
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800735a:	b580      	push	{r7, lr}
 800735c:	b08c      	sub	sp, #48	; 0x30
 800735e:	af04      	add	r7, sp, #16
 8007360:	60f8      	str	r0, [r7, #12]
 8007362:	60b9      	str	r1, [r7, #8]
 8007364:	603b      	str	r3, [r7, #0]
 8007366:	4613      	mov	r3, r2
 8007368:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800736a:	88fb      	ldrh	r3, [r7, #6]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4618      	mov	r0, r3
 8007370:	f001 fc00 	bl	8008b74 <pvPortMalloc>
 8007374:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00e      	beq.n	800739a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800737c:	2074      	movs	r0, #116	; 0x74
 800737e:	f001 fbf9 	bl	8008b74 <pvPortMalloc>
 8007382:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	631a      	str	r2, [r3, #48]	; 0x30
 8007390:	e005      	b.n	800739e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007392:	6978      	ldr	r0, [r7, #20]
 8007394:	f001 fcb0 	bl	8008cf8 <vPortFree>
 8007398:	e001      	b.n	800739e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800739a:	2300      	movs	r3, #0
 800739c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d017      	beq.n	80073d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073ac:	88fa      	ldrh	r2, [r7, #6]
 80073ae:	2300      	movs	r3, #0
 80073b0:	9303      	str	r3, [sp, #12]
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	9302      	str	r3, [sp, #8]
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 f80e 	bl	80073e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073c8:	69f8      	ldr	r0, [r7, #28]
 80073ca:	f000 f897 	bl	80074fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073ce:	2301      	movs	r3, #1
 80073d0:	61bb      	str	r3, [r7, #24]
 80073d2:	e002      	b.n	80073da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295
 80073d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073da:	69bb      	ldr	r3, [r7, #24]
	}
 80073dc:	4618      	mov	r0, r3
 80073de:	3720      	adds	r7, #32
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	461a      	mov	r2, r3
 80073fc:	21a5      	movs	r1, #165	; 0xa5
 80073fe:	f002 fa62 	bl	80098c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800740c:	3b01      	subs	r3, #1
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	f023 0307 	bic.w	r3, r3, #7
 800741a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	2b00      	cmp	r3, #0
 8007424:	d009      	beq.n	800743a <prvInitialiseNewTask+0x56>
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e7fe      	b.n	8007438 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007440:	2300      	movs	r3, #0
 8007442:	61fb      	str	r3, [r7, #28]
 8007444:	e012      	b.n	800746c <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	4413      	add	r3, r2
 800744c:	7819      	ldrb	r1, [r3, #0]
 800744e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	4413      	add	r3, r2
 8007454:	3334      	adds	r3, #52	; 0x34
 8007456:	460a      	mov	r2, r1
 8007458:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	4413      	add	r3, r2
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d006      	beq.n	8007474 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	3301      	adds	r3, #1
 800746a:	61fb      	str	r3, [r7, #28]
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	2b1f      	cmp	r3, #31
 8007470:	d9e9      	bls.n	8007446 <prvInitialiseNewTask+0x62>
 8007472:	e000      	b.n	8007476 <prvInitialiseNewTask+0x92>
		{
			break;
 8007474:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	2b37      	cmp	r3, #55	; 0x37
 8007482:	d901      	bls.n	8007488 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007484:	2337      	movs	r3, #55	; 0x37
 8007486:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800748c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007492:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->uxMutexesHeld = 0;
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	2200      	movs	r2, #0
 8007498:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	3304      	adds	r3, #4
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff f961 	bl	8006766 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	3318      	adds	r3, #24
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff f95c 	bl	8006766 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	2200      	movs	r2, #0
 80074c8:	669a      	str	r2, [r3, #104]	; 0x68
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	2200      	movs	r2, #0
 80074ce:	66da      	str	r2, [r3, #108]	; 0x6c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	68f9      	ldr	r1, [r7, #12]
 80074dc:	69b8      	ldr	r0, [r7, #24]
 80074de:	f001 f967 	bl	80087b0 <pxPortInitialiseStack>
 80074e2:	4602      	mov	r2, r0
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074f4:	bf00      	nop
 80074f6:	3720      	adds	r7, #32
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007504:	f001 fa40 	bl	8008988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007508:	4b2d      	ldr	r3, [pc, #180]	; (80075c0 <prvAddNewTaskToReadyList+0xc4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3301      	adds	r3, #1
 800750e:	4a2c      	ldr	r2, [pc, #176]	; (80075c0 <prvAddNewTaskToReadyList+0xc4>)
 8007510:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007512:	4b2c      	ldr	r3, [pc, #176]	; (80075c4 <prvAddNewTaskToReadyList+0xc8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d109      	bne.n	800752e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800751a:	4a2a      	ldr	r2, [pc, #168]	; (80075c4 <prvAddNewTaskToReadyList+0xc8>)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007520:	4b27      	ldr	r3, [pc, #156]	; (80075c0 <prvAddNewTaskToReadyList+0xc4>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d110      	bne.n	800754a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007528:	f000 fc9c 	bl	8007e64 <prvInitialiseTaskLists>
 800752c:	e00d      	b.n	800754a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800752e:	4b26      	ldr	r3, [pc, #152]	; (80075c8 <prvAddNewTaskToReadyList+0xcc>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d109      	bne.n	800754a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007536:	4b23      	ldr	r3, [pc, #140]	; (80075c4 <prvAddNewTaskToReadyList+0xc8>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	429a      	cmp	r2, r3
 8007542:	d802      	bhi.n	800754a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007544:	4a1f      	ldr	r2, [pc, #124]	; (80075c4 <prvAddNewTaskToReadyList+0xc8>)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800754a:	4b20      	ldr	r3, [pc, #128]	; (80075cc <prvAddNewTaskToReadyList+0xd0>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3301      	adds	r3, #1
 8007550:	4a1e      	ldr	r2, [pc, #120]	; (80075cc <prvAddNewTaskToReadyList+0xd0>)
 8007552:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007554:	4b1d      	ldr	r3, [pc, #116]	; (80075cc <prvAddNewTaskToReadyList+0xd0>)
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	659a      	str	r2, [r3, #88]	; 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007560:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <prvAddNewTaskToReadyList+0xd4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	429a      	cmp	r2, r3
 8007566:	d903      	bls.n	8007570 <prvAddNewTaskToReadyList+0x74>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756c:	4a18      	ldr	r2, [pc, #96]	; (80075d0 <prvAddNewTaskToReadyList+0xd4>)
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4a15      	ldr	r2, [pc, #84]	; (80075d4 <prvAddNewTaskToReadyList+0xd8>)
 800757e:	441a      	add	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3304      	adds	r3, #4
 8007584:	4619      	mov	r1, r3
 8007586:	4610      	mov	r0, r2
 8007588:	f7ff f8f9 	bl	800677e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800758c:	f001 fa2a 	bl	80089e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007590:	4b0d      	ldr	r3, [pc, #52]	; (80075c8 <prvAddNewTaskToReadyList+0xcc>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00e      	beq.n	80075b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007598:	4b0a      	ldr	r3, [pc, #40]	; (80075c4 <prvAddNewTaskToReadyList+0xc8>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d207      	bcs.n	80075b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075a6:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <prvAddNewTaskToReadyList+0xdc>)
 80075a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075b6:	bf00      	nop
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	20000d60 	.word	0x20000d60
 80075c4:	2000088c 	.word	0x2000088c
 80075c8:	20000d6c 	.word	0x20000d6c
 80075cc:	20000d7c 	.word	0x20000d7c
 80075d0:	20000d68 	.word	0x20000d68
 80075d4:	20000890 	.word	0x20000890
 80075d8:	e000ed04 	.word	0xe000ed04

080075dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80075e4:	f001 f9d0 	bl	8008988 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d102      	bne.n	80075f4 <vTaskDelete+0x18>
 80075ee:	4b2c      	ldr	r3, [pc, #176]	; (80076a0 <vTaskDelete+0xc4>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	e000      	b.n	80075f6 <vTaskDelete+0x1a>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff f919 	bl	8006834 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007606:	2b00      	cmp	r3, #0
 8007608:	d004      	beq.n	8007614 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3318      	adds	r3, #24
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff f910 	bl	8006834 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007614:	4b23      	ldr	r3, [pc, #140]	; (80076a4 <vTaskDelete+0xc8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3301      	adds	r3, #1
 800761a:	4a22      	ldr	r2, [pc, #136]	; (80076a4 <vTaskDelete+0xc8>)
 800761c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800761e:	4b20      	ldr	r3, [pc, #128]	; (80076a0 <vTaskDelete+0xc4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	429a      	cmp	r2, r3
 8007626:	d10b      	bne.n	8007640 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3304      	adds	r3, #4
 800762c:	4619      	mov	r1, r3
 800762e:	481e      	ldr	r0, [pc, #120]	; (80076a8 <vTaskDelete+0xcc>)
 8007630:	f7ff f8a5 	bl	800677e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007634:	4b1d      	ldr	r3, [pc, #116]	; (80076ac <vTaskDelete+0xd0>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3301      	adds	r3, #1
 800763a:	4a1c      	ldr	r2, [pc, #112]	; (80076ac <vTaskDelete+0xd0>)
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	e009      	b.n	8007654 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007640:	4b1b      	ldr	r3, [pc, #108]	; (80076b0 <vTaskDelete+0xd4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3b01      	subs	r3, #1
 8007646:	4a1a      	ldr	r2, [pc, #104]	; (80076b0 <vTaskDelete+0xd4>)
 8007648:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 fc76 	bl	8007f3c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007650:	f000 fca2 	bl	8007f98 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007654:	f001 f9c6 	bl	80089e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007658:	4b16      	ldr	r3, [pc, #88]	; (80076b4 <vTaskDelete+0xd8>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d01a      	beq.n	8007696 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 8007660:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <vTaskDelete+0xc4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	429a      	cmp	r2, r3
 8007668:	d115      	bne.n	8007696 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800766a:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <vTaskDelete+0xdc>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <vTaskDelete+0xaa>
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	60bb      	str	r3, [r7, #8]
 8007684:	e7fe      	b.n	8007684 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8007686:	4b0d      	ldr	r3, [pc, #52]	; (80076bc <vTaskDelete+0xe0>)
 8007688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007696:	bf00      	nop
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	2000088c 	.word	0x2000088c
 80076a4:	20000d7c 	.word	0x20000d7c
 80076a8:	20000d34 	.word	0x20000d34
 80076ac:	20000d48 	.word	0x20000d48
 80076b0:	20000d60 	.word	0x20000d60
 80076b4:	20000d6c 	.word	0x20000d6c
 80076b8:	20000d88 	.word	0x20000d88
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d016      	beq.n	8007700 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076d2:	4b13      	ldr	r3, [pc, #76]	; (8007720 <vTaskDelay+0x60>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d009      	beq.n	80076ee <vTaskDelay+0x2e>
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	60bb      	str	r3, [r7, #8]
 80076ec:	e7fe      	b.n	80076ec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80076ee:	f000 f881 	bl	80077f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076f2:	2100      	movs	r1, #0
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fcfd 	bl	80080f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076fa:	f000 f889 	bl	8007810 <xTaskResumeAll>
 80076fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d107      	bne.n	8007716 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007706:	4b07      	ldr	r3, [pc, #28]	; (8007724 <vTaskDelay+0x64>)
 8007708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	20000d88 	.word	0x20000d88
 8007724:	e000ed04 	.word	0xe000ed04

08007728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08a      	sub	sp, #40	; 0x28
 800772c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007732:	2300      	movs	r3, #0
 8007734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007736:	463a      	mov	r2, r7
 8007738:	1d39      	adds	r1, r7, #4
 800773a:	f107 0308 	add.w	r3, r7, #8
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe ffc0 	bl	80066c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	9202      	str	r2, [sp, #8]
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	2300      	movs	r3, #0
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	2300      	movs	r3, #0
 8007754:	460a      	mov	r2, r1
 8007756:	4921      	ldr	r1, [pc, #132]	; (80077dc <vTaskStartScheduler+0xb4>)
 8007758:	4821      	ldr	r0, [pc, #132]	; (80077e0 <vTaskStartScheduler+0xb8>)
 800775a:	f7ff fda5 	bl	80072a8 <xTaskCreateStatic>
 800775e:	4602      	mov	r2, r0
 8007760:	4b20      	ldr	r3, [pc, #128]	; (80077e4 <vTaskStartScheduler+0xbc>)
 8007762:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007764:	4b1f      	ldr	r3, [pc, #124]	; (80077e4 <vTaskStartScheduler+0xbc>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800776c:	2301      	movs	r3, #1
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	e001      	b.n	8007776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d102      	bne.n	8007782 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800777c:	f000 fd0e 	bl	800819c <xTimerCreateTimerTask>
 8007780:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d117      	bne.n	80077b8 <vTaskStartScheduler+0x90>
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800779a:	4b13      	ldr	r3, [pc, #76]	; (80077e8 <vTaskStartScheduler+0xc0>)
 800779c:	f04f 32ff 	mov.w	r2, #4294967295
 80077a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077a2:	4b12      	ldr	r3, [pc, #72]	; (80077ec <vTaskStartScheduler+0xc4>)
 80077a4:	2201      	movs	r2, #1
 80077a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80077a8:	4b11      	ldr	r3, [pc, #68]	; (80077f0 <vTaskStartScheduler+0xc8>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80077ae:	f7f8 fdae 	bl	800030e <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077b2:	f001 f879 	bl	80088a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077b6:	e00d      	b.n	80077d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077be:	d109      	bne.n	80077d4 <vTaskStartScheduler+0xac>
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	e7fe      	b.n	80077d2 <vTaskStartScheduler+0xaa>
}
 80077d4:	bf00      	nop
 80077d6:	3718      	adds	r7, #24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	08009a14 	.word	0x08009a14
 80077e0:	08007e35 	.word	0x08007e35
 80077e4:	20000d84 	.word	0x20000d84
 80077e8:	20000d80 	.word	0x20000d80
 80077ec:	20000d6c 	.word	0x20000d6c
 80077f0:	20000d64 	.word	0x20000d64

080077f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80077f8:	4b04      	ldr	r3, [pc, #16]	; (800780c <vTaskSuspendAll+0x18>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3301      	adds	r3, #1
 80077fe:	4a03      	ldr	r2, [pc, #12]	; (800780c <vTaskSuspendAll+0x18>)
 8007800:	6013      	str	r3, [r2, #0]
}
 8007802:	bf00      	nop
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	20000d88 	.word	0x20000d88

08007810 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800781a:	2300      	movs	r3, #0
 800781c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800781e:	4b41      	ldr	r3, [pc, #260]	; (8007924 <xTaskResumeAll+0x114>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d109      	bne.n	800783a <xTaskResumeAll+0x2a>
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	603b      	str	r3, [r7, #0]
 8007838:	e7fe      	b.n	8007838 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800783a:	f001 f8a5 	bl	8008988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800783e:	4b39      	ldr	r3, [pc, #228]	; (8007924 <xTaskResumeAll+0x114>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3b01      	subs	r3, #1
 8007844:	4a37      	ldr	r2, [pc, #220]	; (8007924 <xTaskResumeAll+0x114>)
 8007846:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007848:	4b36      	ldr	r3, [pc, #216]	; (8007924 <xTaskResumeAll+0x114>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d162      	bne.n	8007916 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007850:	4b35      	ldr	r3, [pc, #212]	; (8007928 <xTaskResumeAll+0x118>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d05e      	beq.n	8007916 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007858:	e02f      	b.n	80078ba <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800785a:	4b34      	ldr	r3, [pc, #208]	; (800792c <xTaskResumeAll+0x11c>)
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3318      	adds	r3, #24
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe ffe4 	bl	8006834 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3304      	adds	r3, #4
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe ffdf 	bl	8006834 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800787a:	4b2d      	ldr	r3, [pc, #180]	; (8007930 <xTaskResumeAll+0x120>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d903      	bls.n	800788a <xTaskResumeAll+0x7a>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	4a2a      	ldr	r2, [pc, #168]	; (8007930 <xTaskResumeAll+0x120>)
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4a27      	ldr	r2, [pc, #156]	; (8007934 <xTaskResumeAll+0x124>)
 8007898:	441a      	add	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3304      	adds	r3, #4
 800789e:	4619      	mov	r1, r3
 80078a0:	4610      	mov	r0, r2
 80078a2:	f7fe ff6c 	bl	800677e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078aa:	4b23      	ldr	r3, [pc, #140]	; (8007938 <xTaskResumeAll+0x128>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d302      	bcc.n	80078ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80078b4:	4b21      	ldr	r3, [pc, #132]	; (800793c <xTaskResumeAll+0x12c>)
 80078b6:	2201      	movs	r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078ba:	4b1c      	ldr	r3, [pc, #112]	; (800792c <xTaskResumeAll+0x11c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1cb      	bne.n	800785a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078c8:	f000 fb66 	bl	8007f98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80078cc:	4b1c      	ldr	r3, [pc, #112]	; (8007940 <xTaskResumeAll+0x130>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d010      	beq.n	80078fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078d8:	f000 f844 	bl	8007964 <xTaskIncrementTick>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80078e2:	4b16      	ldr	r3, [pc, #88]	; (800793c <xTaskResumeAll+0x12c>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1f1      	bne.n	80078d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80078f4:	4b12      	ldr	r3, [pc, #72]	; (8007940 <xTaskResumeAll+0x130>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078fa:	4b10      	ldr	r3, [pc, #64]	; (800793c <xTaskResumeAll+0x12c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d009      	beq.n	8007916 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007902:	2301      	movs	r3, #1
 8007904:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007906:	4b0f      	ldr	r3, [pc, #60]	; (8007944 <xTaskResumeAll+0x134>)
 8007908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007916:	f001 f865 	bl	80089e4 <vPortExitCritical>

	return xAlreadyYielded;
 800791a:	68bb      	ldr	r3, [r7, #8]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20000d88 	.word	0x20000d88
 8007928:	20000d60 	.word	0x20000d60
 800792c:	20000d20 	.word	0x20000d20
 8007930:	20000d68 	.word	0x20000d68
 8007934:	20000890 	.word	0x20000890
 8007938:	2000088c 	.word	0x2000088c
 800793c:	20000d74 	.word	0x20000d74
 8007940:	20000d70 	.word	0x20000d70
 8007944:	e000ed04 	.word	0xe000ed04

08007948 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800794e:	4b04      	ldr	r3, [pc, #16]	; (8007960 <xTaskGetTickCount+0x18>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007954:	687b      	ldr	r3, [r7, #4]
}
 8007956:	4618      	mov	r0, r3
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	bc80      	pop	{r7}
 800795e:	4770      	bx	lr
 8007960:	20000d64 	.word	0x20000d64

08007964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800796a:	2300      	movs	r3, #0
 800796c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800796e:	4b51      	ldr	r3, [pc, #324]	; (8007ab4 <xTaskIncrementTick+0x150>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	f040 808d 	bne.w	8007a92 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007978:	4b4f      	ldr	r3, [pc, #316]	; (8007ab8 <xTaskIncrementTick+0x154>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3301      	adds	r3, #1
 800797e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007980:	4a4d      	ldr	r2, [pc, #308]	; (8007ab8 <xTaskIncrementTick+0x154>)
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d11f      	bne.n	80079cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800798c:	4b4b      	ldr	r3, [pc, #300]	; (8007abc <xTaskIncrementTick+0x158>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d009      	beq.n	80079aa <xTaskIncrementTick+0x46>
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	603b      	str	r3, [r7, #0]
 80079a8:	e7fe      	b.n	80079a8 <xTaskIncrementTick+0x44>
 80079aa:	4b44      	ldr	r3, [pc, #272]	; (8007abc <xTaskIncrementTick+0x158>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	4b43      	ldr	r3, [pc, #268]	; (8007ac0 <xTaskIncrementTick+0x15c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a41      	ldr	r2, [pc, #260]	; (8007abc <xTaskIncrementTick+0x158>)
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	4a41      	ldr	r2, [pc, #260]	; (8007ac0 <xTaskIncrementTick+0x15c>)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	4b41      	ldr	r3, [pc, #260]	; (8007ac4 <xTaskIncrementTick+0x160>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	4a3f      	ldr	r2, [pc, #252]	; (8007ac4 <xTaskIncrementTick+0x160>)
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	f000 fae6 	bl	8007f98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079cc:	4b3e      	ldr	r3, [pc, #248]	; (8007ac8 <xTaskIncrementTick+0x164>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d34e      	bcc.n	8007a74 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079d6:	4b39      	ldr	r3, [pc, #228]	; (8007abc <xTaskIncrementTick+0x158>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <xTaskIncrementTick+0x80>
 80079e0:	2301      	movs	r3, #1
 80079e2:	e000      	b.n	80079e6 <xTaskIncrementTick+0x82>
 80079e4:	2300      	movs	r3, #0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d004      	beq.n	80079f4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ea:	4b37      	ldr	r3, [pc, #220]	; (8007ac8 <xTaskIncrementTick+0x164>)
 80079ec:	f04f 32ff 	mov.w	r2, #4294967295
 80079f0:	601a      	str	r2, [r3, #0]
					break;
 80079f2:	e03f      	b.n	8007a74 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80079f4:	4b31      	ldr	r3, [pc, #196]	; (8007abc <xTaskIncrementTick+0x158>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d203      	bcs.n	8007a14 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a0c:	4a2e      	ldr	r2, [pc, #184]	; (8007ac8 <xTaskIncrementTick+0x164>)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6013      	str	r3, [r2, #0]
						break;
 8007a12:	e02f      	b.n	8007a74 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fe ff0b 	bl	8006834 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d004      	beq.n	8007a30 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	3318      	adds	r3, #24
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe ff02 	bl	8006834 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a34:	4b25      	ldr	r3, [pc, #148]	; (8007acc <xTaskIncrementTick+0x168>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d903      	bls.n	8007a44 <xTaskIncrementTick+0xe0>
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	4a22      	ldr	r2, [pc, #136]	; (8007acc <xTaskIncrementTick+0x168>)
 8007a42:	6013      	str	r3, [r2, #0]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a48:	4613      	mov	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4a1f      	ldr	r2, [pc, #124]	; (8007ad0 <xTaskIncrementTick+0x16c>)
 8007a52:	441a      	add	r2, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	3304      	adds	r3, #4
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	f7fe fe8f 	bl	800677e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a64:	4b1b      	ldr	r3, [pc, #108]	; (8007ad4 <xTaskIncrementTick+0x170>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d3b3      	bcc.n	80079d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a72:	e7b0      	b.n	80079d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a74:	4b17      	ldr	r3, [pc, #92]	; (8007ad4 <xTaskIncrementTick+0x170>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7a:	4915      	ldr	r1, [pc, #84]	; (8007ad0 <xTaskIncrementTick+0x16c>)
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	440b      	add	r3, r1
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d907      	bls.n	8007a9c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	e004      	b.n	8007a9c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a92:	4b11      	ldr	r3, [pc, #68]	; (8007ad8 <xTaskIncrementTick+0x174>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3301      	adds	r3, #1
 8007a98:	4a0f      	ldr	r2, [pc, #60]	; (8007ad8 <xTaskIncrementTick+0x174>)
 8007a9a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a9c:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <xTaskIncrementTick+0x178>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007aa8:	697b      	ldr	r3, [r7, #20]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000d88 	.word	0x20000d88
 8007ab8:	20000d64 	.word	0x20000d64
 8007abc:	20000d18 	.word	0x20000d18
 8007ac0:	20000d1c 	.word	0x20000d1c
 8007ac4:	20000d78 	.word	0x20000d78
 8007ac8:	20000d80 	.word	0x20000d80
 8007acc:	20000d68 	.word	0x20000d68
 8007ad0:	20000890 	.word	0x20000890
 8007ad4:	2000088c 	.word	0x2000088c
 8007ad8:	20000d70 	.word	0x20000d70
 8007adc:	20000d74 	.word	0x20000d74

08007ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ae6:	4b33      	ldr	r3, [pc, #204]	; (8007bb4 <vTaskSwitchContext+0xd4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007aee:	4b32      	ldr	r3, [pc, #200]	; (8007bb8 <vTaskSwitchContext+0xd8>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007af4:	e059      	b.n	8007baa <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8007af6:	4b30      	ldr	r3, [pc, #192]	; (8007bb8 <vTaskSwitchContext+0xd8>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007afc:	f7f8 fc0d 	bl	800031a <getRunTimeCounterValue>
 8007b00:	4602      	mov	r2, r0
 8007b02:	4b2e      	ldr	r3, [pc, #184]	; (8007bbc <vTaskSwitchContext+0xdc>)
 8007b04:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007b06:	4b2d      	ldr	r3, [pc, #180]	; (8007bbc <vTaskSwitchContext+0xdc>)
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	4b2d      	ldr	r3, [pc, #180]	; (8007bc0 <vTaskSwitchContext+0xe0>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d909      	bls.n	8007b26 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007b12:	4b2c      	ldr	r3, [pc, #176]	; (8007bc4 <vTaskSwitchContext+0xe4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8007b18:	4a28      	ldr	r2, [pc, #160]	; (8007bbc <vTaskSwitchContext+0xdc>)
 8007b1a:	6810      	ldr	r0, [r2, #0]
 8007b1c:	4a28      	ldr	r2, [pc, #160]	; (8007bc0 <vTaskSwitchContext+0xe0>)
 8007b1e:	6812      	ldr	r2, [r2, #0]
 8007b20:	1a82      	subs	r2, r0, r2
 8007b22:	440a      	add	r2, r1
 8007b24:	669a      	str	r2, [r3, #104]	; 0x68
				ulTaskSwitchedInTime = ulTotalRunTime;
 8007b26:	4b25      	ldr	r3, [pc, #148]	; (8007bbc <vTaskSwitchContext+0xdc>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a25      	ldr	r2, [pc, #148]	; (8007bc0 <vTaskSwitchContext+0xe0>)
 8007b2c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007b2e:	4b26      	ldr	r3, [pc, #152]	; (8007bc8 <vTaskSwitchContext+0xe8>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e00f      	b.n	8007b56 <vTaskSwitchContext+0x76>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d109      	bne.n	8007b50 <vTaskSwitchContext+0x70>
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	607b      	str	r3, [r7, #4]
 8007b4e:	e7fe      	b.n	8007b4e <vTaskSwitchContext+0x6e>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	491d      	ldr	r1, [pc, #116]	; (8007bcc <vTaskSwitchContext+0xec>)
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0e5      	beq.n	8007b36 <vTaskSwitchContext+0x56>
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4a15      	ldr	r2, [pc, #84]	; (8007bcc <vTaskSwitchContext+0xec>)
 8007b76:	4413      	add	r3, r2
 8007b78:	60bb      	str	r3, [r7, #8]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	605a      	str	r2, [r3, #4]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d104      	bne.n	8007b9a <vTaskSwitchContext+0xba>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	605a      	str	r2, [r3, #4]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	4a08      	ldr	r2, [pc, #32]	; (8007bc4 <vTaskSwitchContext+0xe4>)
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	4a08      	ldr	r2, [pc, #32]	; (8007bc8 <vTaskSwitchContext+0xe8>)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6013      	str	r3, [r2, #0]
}
 8007baa:	bf00      	nop
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000d88 	.word	0x20000d88
 8007bb8:	20000d74 	.word	0x20000d74
 8007bbc:	20000d90 	.word	0x20000d90
 8007bc0:	20000d8c 	.word	0x20000d8c
 8007bc4:	2000088c 	.word	0x2000088c
 8007bc8:	20000d68 	.word	0x20000d68
 8007bcc:	20000890 	.word	0x20000890

08007bd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d109      	bne.n	8007bf4 <vTaskPlaceOnEventList+0x24>
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	e7fe      	b.n	8007bf2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bf4:	4b07      	ldr	r3, [pc, #28]	; (8007c14 <vTaskPlaceOnEventList+0x44>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3318      	adds	r3, #24
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7fe fde1 	bl	80067c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c02:	2101      	movs	r1, #1
 8007c04:	6838      	ldr	r0, [r7, #0]
 8007c06:	f000 fa75 	bl	80080f4 <prvAddCurrentTaskToDelayedList>
}
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	2000088c 	.word	0x2000088c

08007c18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d109      	bne.n	8007c3e <vTaskPlaceOnEventListRestricted+0x26>
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	617b      	str	r3, [r7, #20]
 8007c3c:	e7fe      	b.n	8007c3c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c3e:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <vTaskPlaceOnEventListRestricted+0x50>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3318      	adds	r3, #24
 8007c44:	4619      	mov	r1, r3
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f7fe fd99 	bl	800677e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007c52:	f04f 33ff 	mov.w	r3, #4294967295
 8007c56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	68b8      	ldr	r0, [r7, #8]
 8007c5c:	f000 fa4a 	bl	80080f4 <prvAddCurrentTaskToDelayedList>
	}
 8007c60:	bf00      	nop
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	2000088c 	.word	0x2000088c

08007c6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d109      	bne.n	8007c96 <xTaskRemoveFromEventList+0x2a>
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	e7fe      	b.n	8007c94 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	3318      	adds	r3, #24
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fdca 	bl	8006834 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ca0:	4b1d      	ldr	r3, [pc, #116]	; (8007d18 <xTaskRemoveFromEventList+0xac>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d11d      	bne.n	8007ce4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	3304      	adds	r3, #4
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fe fdc1 	bl	8006834 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb6:	4b19      	ldr	r3, [pc, #100]	; (8007d1c <xTaskRemoveFromEventList+0xb0>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d903      	bls.n	8007cc6 <xTaskRemoveFromEventList+0x5a>
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	4a16      	ldr	r2, [pc, #88]	; (8007d1c <xTaskRemoveFromEventList+0xb0>)
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4a13      	ldr	r2, [pc, #76]	; (8007d20 <xTaskRemoveFromEventList+0xb4>)
 8007cd4:	441a      	add	r2, r3
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4610      	mov	r0, r2
 8007cde:	f7fe fd4e 	bl	800677e <vListInsertEnd>
 8007ce2:	e005      	b.n	8007cf0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	3318      	adds	r3, #24
 8007ce8:	4619      	mov	r1, r3
 8007cea:	480e      	ldr	r0, [pc, #56]	; (8007d24 <xTaskRemoveFromEventList+0xb8>)
 8007cec:	f7fe fd47 	bl	800677e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf4:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <xTaskRemoveFromEventList+0xbc>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d905      	bls.n	8007d0a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d02:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <xTaskRemoveFromEventList+0xc0>)
 8007d04:	2201      	movs	r2, #1
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	e001      	b.n	8007d0e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007d0e:	697b      	ldr	r3, [r7, #20]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20000d88 	.word	0x20000d88
 8007d1c:	20000d68 	.word	0x20000d68
 8007d20:	20000890 	.word	0x20000890
 8007d24:	20000d20 	.word	0x20000d20
 8007d28:	2000088c 	.word	0x2000088c
 8007d2c:	20000d74 	.word	0x20000d74

08007d30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d38:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <vTaskInternalSetTimeOutState+0x24>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d40:	4b05      	ldr	r3, [pc, #20]	; (8007d58 <vTaskInternalSetTimeOutState+0x28>)
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	605a      	str	r2, [r3, #4]
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	20000d78 	.word	0x20000d78
 8007d58:	20000d64 	.word	0x20000d64

08007d5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d109      	bne.n	8007d80 <xTaskCheckForTimeOut+0x24>
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	e7fe      	b.n	8007d7e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d109      	bne.n	8007d9a <xTaskCheckForTimeOut+0x3e>
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	e7fe      	b.n	8007d98 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007d9a:	f000 fdf5 	bl	8008988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d9e:	4b1d      	ldr	r3, [pc, #116]	; (8007e14 <xTaskCheckForTimeOut+0xb8>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db6:	d102      	bne.n	8007dbe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007db8:	2300      	movs	r3, #0
 8007dba:	61fb      	str	r3, [r7, #28]
 8007dbc:	e023      	b.n	8007e06 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <xTaskCheckForTimeOut+0xbc>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d007      	beq.n	8007dda <xTaskCheckForTimeOut+0x7e>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d302      	bcc.n	8007dda <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	61fb      	str	r3, [r7, #28]
 8007dd8:	e015      	b.n	8007e06 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d20b      	bcs.n	8007dfc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	1ad2      	subs	r2, r2, r3
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff ff9d 	bl	8007d30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007df6:	2300      	movs	r3, #0
 8007df8:	61fb      	str	r3, [r7, #28]
 8007dfa:	e004      	b.n	8007e06 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e02:	2301      	movs	r3, #1
 8007e04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e06:	f000 fded 	bl	80089e4 <vPortExitCritical>

	return xReturn;
 8007e0a:	69fb      	ldr	r3, [r7, #28]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3720      	adds	r7, #32
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20000d64 	.word	0x20000d64
 8007e18:	20000d78 	.word	0x20000d78

08007e1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e20:	4b03      	ldr	r3, [pc, #12]	; (8007e30 <vTaskMissedYield+0x14>)
 8007e22:	2201      	movs	r2, #1
 8007e24:	601a      	str	r2, [r3, #0]
}
 8007e26:	bf00      	nop
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20000d74 	.word	0x20000d74

08007e34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e3c:	f000 f852 	bl	8007ee4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e40:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <prvIdleTask+0x28>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d9f9      	bls.n	8007e3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e48:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <prvIdleTask+0x2c>)
 8007e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e58:	e7f0      	b.n	8007e3c <prvIdleTask+0x8>
 8007e5a:	bf00      	nop
 8007e5c:	20000890 	.word	0x20000890
 8007e60:	e000ed04 	.word	0xe000ed04

08007e64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	607b      	str	r3, [r7, #4]
 8007e6e:	e00c      	b.n	8007e8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	4613      	mov	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4a12      	ldr	r2, [pc, #72]	; (8007ec4 <prvInitialiseTaskLists+0x60>)
 8007e7c:	4413      	add	r3, r2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fc52 	bl	8006728 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3301      	adds	r3, #1
 8007e88:	607b      	str	r3, [r7, #4]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b37      	cmp	r3, #55	; 0x37
 8007e8e:	d9ef      	bls.n	8007e70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e90:	480d      	ldr	r0, [pc, #52]	; (8007ec8 <prvInitialiseTaskLists+0x64>)
 8007e92:	f7fe fc49 	bl	8006728 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e96:	480d      	ldr	r0, [pc, #52]	; (8007ecc <prvInitialiseTaskLists+0x68>)
 8007e98:	f7fe fc46 	bl	8006728 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e9c:	480c      	ldr	r0, [pc, #48]	; (8007ed0 <prvInitialiseTaskLists+0x6c>)
 8007e9e:	f7fe fc43 	bl	8006728 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ea2:	480c      	ldr	r0, [pc, #48]	; (8007ed4 <prvInitialiseTaskLists+0x70>)
 8007ea4:	f7fe fc40 	bl	8006728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ea8:	480b      	ldr	r0, [pc, #44]	; (8007ed8 <prvInitialiseTaskLists+0x74>)
 8007eaa:	f7fe fc3d 	bl	8006728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007eae:	4b0b      	ldr	r3, [pc, #44]	; (8007edc <prvInitialiseTaskLists+0x78>)
 8007eb0:	4a05      	ldr	r2, [pc, #20]	; (8007ec8 <prvInitialiseTaskLists+0x64>)
 8007eb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007eb4:	4b0a      	ldr	r3, [pc, #40]	; (8007ee0 <prvInitialiseTaskLists+0x7c>)
 8007eb6:	4a05      	ldr	r2, [pc, #20]	; (8007ecc <prvInitialiseTaskLists+0x68>)
 8007eb8:	601a      	str	r2, [r3, #0]
}
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000890 	.word	0x20000890
 8007ec8:	20000cf0 	.word	0x20000cf0
 8007ecc:	20000d04 	.word	0x20000d04
 8007ed0:	20000d20 	.word	0x20000d20
 8007ed4:	20000d34 	.word	0x20000d34
 8007ed8:	20000d4c 	.word	0x20000d4c
 8007edc:	20000d18 	.word	0x20000d18
 8007ee0:	20000d1c 	.word	0x20000d1c

08007ee4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eea:	e019      	b.n	8007f20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007eec:	f000 fd4c 	bl	8008988 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ef0:	4b0f      	ldr	r3, [pc, #60]	; (8007f30 <prvCheckTasksWaitingTermination+0x4c>)
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3304      	adds	r3, #4
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe fc99 	bl	8006834 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f02:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <prvCheckTasksWaitingTermination+0x50>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	4a0a      	ldr	r2, [pc, #40]	; (8007f34 <prvCheckTasksWaitingTermination+0x50>)
 8007f0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	; (8007f38 <prvCheckTasksWaitingTermination+0x54>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3b01      	subs	r3, #1
 8007f12:	4a09      	ldr	r2, [pc, #36]	; (8007f38 <prvCheckTasksWaitingTermination+0x54>)
 8007f14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f16:	f000 fd65 	bl	80089e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f80e 	bl	8007f3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f20:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <prvCheckTasksWaitingTermination+0x54>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e1      	bne.n	8007eec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	20000d34 	.word	0x20000d34
 8007f34:	20000d60 	.word	0x20000d60
 8007f38:	20000d48 	.word	0x20000d48

08007f3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d108      	bne.n	8007f60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fed0 	bl	8008cf8 <vPortFree>
				vPortFree( pxTCB );
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fecd 	bl	8008cf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f5e:	e017      	b.n	8007f90 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d103      	bne.n	8007f72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fec4 	bl	8008cf8 <vPortFree>
	}
 8007f70:	e00e      	b.n	8007f90 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d009      	beq.n	8007f90 <prvDeleteTCB+0x54>
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	e7fe      	b.n	8007f8e <prvDeleteTCB+0x52>
	}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f9e:	4b0e      	ldr	r3, [pc, #56]	; (8007fd8 <prvResetNextTaskUnblockTime+0x40>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <prvResetNextTaskUnblockTime+0x14>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e000      	b.n	8007fae <prvResetNextTaskUnblockTime+0x16>
 8007fac:	2300      	movs	r3, #0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fb2:	4b0a      	ldr	r3, [pc, #40]	; (8007fdc <prvResetNextTaskUnblockTime+0x44>)
 8007fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fba:	e008      	b.n	8007fce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007fbc:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <prvResetNextTaskUnblockTime+0x40>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	4a04      	ldr	r2, [pc, #16]	; (8007fdc <prvResetNextTaskUnblockTime+0x44>)
 8007fcc:	6013      	str	r3, [r2, #0]
}
 8007fce:	bf00      	nop
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bc80      	pop	{r7}
 8007fd6:	4770      	bx	lr
 8007fd8:	20000d18 	.word	0x20000d18
 8007fdc:	20000d80 	.word	0x20000d80

08007fe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fe6:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <xTaskGetSchedulerState+0x34>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d102      	bne.n	8007ff4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	607b      	str	r3, [r7, #4]
 8007ff2:	e008      	b.n	8008006 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ff4:	4b08      	ldr	r3, [pc, #32]	; (8008018 <xTaskGetSchedulerState+0x38>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	607b      	str	r3, [r7, #4]
 8008000:	e001      	b.n	8008006 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008002:	2300      	movs	r3, #0
 8008004:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008006:	687b      	ldr	r3, [r7, #4]
	}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	20000d6c 	.word	0x20000d6c
 8008018:	20000d88 	.word	0x20000d88

0800801c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008028:	2300      	movs	r3, #0
 800802a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d054      	beq.n	80080dc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008032:	4b2d      	ldr	r3, [pc, #180]	; (80080e8 <xTaskPriorityDisinherit+0xcc>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	429a      	cmp	r2, r3
 800803a:	d009      	beq.n	8008050 <xTaskPriorityDisinherit+0x34>
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e7fe      	b.n	800804e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008054:	2b00      	cmp	r3, #0
 8008056:	d109      	bne.n	800806c <xTaskPriorityDisinherit+0x50>
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	60bb      	str	r3, [r7, #8]
 800806a:	e7fe      	b.n	800806a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008070:	1e5a      	subs	r2, r3, #1
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	665a      	str	r2, [r3, #100]	; 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800807e:	429a      	cmp	r2, r3
 8008080:	d02c      	beq.n	80080dc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008086:	2b00      	cmp	r3, #0
 8008088:	d128      	bne.n	80080dc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	3304      	adds	r3, #4
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe fbd0 	bl	8006834 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ac:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <xTaskPriorityDisinherit+0xd0>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d903      	bls.n	80080bc <xTaskPriorityDisinherit+0xa0>
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	4a0c      	ldr	r2, [pc, #48]	; (80080ec <xTaskPriorityDisinherit+0xd0>)
 80080ba:	6013      	str	r3, [r2, #0]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4a09      	ldr	r2, [pc, #36]	; (80080f0 <xTaskPriorityDisinherit+0xd4>)
 80080ca:	441a      	add	r2, r3
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	3304      	adds	r3, #4
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f7fe fb53 	bl	800677e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080d8:	2301      	movs	r3, #1
 80080da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080dc:	697b      	ldr	r3, [r7, #20]
	}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	2000088c 	.word	0x2000088c
 80080ec:	20000d68 	.word	0x20000d68
 80080f0:	20000890 	.word	0x20000890

080080f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080fe:	4b21      	ldr	r3, [pc, #132]	; (8008184 <prvAddCurrentTaskToDelayedList+0x90>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008104:	4b20      	ldr	r3, [pc, #128]	; (8008188 <prvAddCurrentTaskToDelayedList+0x94>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3304      	adds	r3, #4
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe fb92 	bl	8006834 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008116:	d10a      	bne.n	800812e <prvAddCurrentTaskToDelayedList+0x3a>
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d007      	beq.n	800812e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800811e:	4b1a      	ldr	r3, [pc, #104]	; (8008188 <prvAddCurrentTaskToDelayedList+0x94>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3304      	adds	r3, #4
 8008124:	4619      	mov	r1, r3
 8008126:	4819      	ldr	r0, [pc, #100]	; (800818c <prvAddCurrentTaskToDelayedList+0x98>)
 8008128:	f7fe fb29 	bl	800677e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800812c:	e026      	b.n	800817c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4413      	add	r3, r2
 8008134:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008136:	4b14      	ldr	r3, [pc, #80]	; (8008188 <prvAddCurrentTaskToDelayedList+0x94>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	429a      	cmp	r2, r3
 8008144:	d209      	bcs.n	800815a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008146:	4b12      	ldr	r3, [pc, #72]	; (8008190 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	4b0f      	ldr	r3, [pc, #60]	; (8008188 <prvAddCurrentTaskToDelayedList+0x94>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	3304      	adds	r3, #4
 8008150:	4619      	mov	r1, r3
 8008152:	4610      	mov	r0, r2
 8008154:	f7fe fb36 	bl	80067c4 <vListInsert>
}
 8008158:	e010      	b.n	800817c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800815a:	4b0e      	ldr	r3, [pc, #56]	; (8008194 <prvAddCurrentTaskToDelayedList+0xa0>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4b0a      	ldr	r3, [pc, #40]	; (8008188 <prvAddCurrentTaskToDelayedList+0x94>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3304      	adds	r3, #4
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	f7fe fb2c 	bl	80067c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800816c:	4b0a      	ldr	r3, [pc, #40]	; (8008198 <prvAddCurrentTaskToDelayedList+0xa4>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	429a      	cmp	r2, r3
 8008174:	d202      	bcs.n	800817c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008176:	4a08      	ldr	r2, [pc, #32]	; (8008198 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	6013      	str	r3, [r2, #0]
}
 800817c:	bf00      	nop
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20000d64 	.word	0x20000d64
 8008188:	2000088c 	.word	0x2000088c
 800818c:	20000d4c 	.word	0x20000d4c
 8008190:	20000d1c 	.word	0x20000d1c
 8008194:	20000d18 	.word	0x20000d18
 8008198:	20000d80 	.word	0x20000d80

0800819c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b08a      	sub	sp, #40	; 0x28
 80081a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081a6:	f000 fac3 	bl	8008730 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081aa:	4b1c      	ldr	r3, [pc, #112]	; (800821c <xTimerCreateTimerTask+0x80>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d021      	beq.n	80081f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081ba:	1d3a      	adds	r2, r7, #4
 80081bc:	f107 0108 	add.w	r1, r7, #8
 80081c0:	f107 030c 	add.w	r3, r7, #12
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fe fa95 	bl	80066f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081ca:	6879      	ldr	r1, [r7, #4]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	9202      	str	r2, [sp, #8]
 80081d2:	9301      	str	r3, [sp, #4]
 80081d4:	2302      	movs	r3, #2
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	2300      	movs	r3, #0
 80081da:	460a      	mov	r2, r1
 80081dc:	4910      	ldr	r1, [pc, #64]	; (8008220 <xTimerCreateTimerTask+0x84>)
 80081de:	4811      	ldr	r0, [pc, #68]	; (8008224 <xTimerCreateTimerTask+0x88>)
 80081e0:	f7ff f862 	bl	80072a8 <xTaskCreateStatic>
 80081e4:	4602      	mov	r2, r0
 80081e6:	4b10      	ldr	r3, [pc, #64]	; (8008228 <xTimerCreateTimerTask+0x8c>)
 80081e8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081ea:	4b0f      	ldr	r3, [pc, #60]	; (8008228 <xTimerCreateTimerTask+0x8c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081f2:	2301      	movs	r3, #1
 80081f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d109      	bne.n	8008210 <xTimerCreateTimerTask+0x74>
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	613b      	str	r3, [r7, #16]
 800820e:	e7fe      	b.n	800820e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008210:	697b      	ldr	r3, [r7, #20]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000dc4 	.word	0x20000dc4
 8008220:	08009a1c 	.word	0x08009a1c
 8008224:	08008345 	.word	0x08008345
 8008228:	20000dc8 	.word	0x20000dc8

0800822c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08a      	sub	sp, #40	; 0x28
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800823a:	2300      	movs	r3, #0
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d109      	bne.n	8008258 <xTimerGenericCommand+0x2c>
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	623b      	str	r3, [r7, #32]
 8008256:	e7fe      	b.n	8008256 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008258:	4b19      	ldr	r3, [pc, #100]	; (80082c0 <xTimerGenericCommand+0x94>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d02a      	beq.n	80082b6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b05      	cmp	r3, #5
 8008270:	dc18      	bgt.n	80082a4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008272:	f7ff feb5 	bl	8007fe0 <xTaskGetSchedulerState>
 8008276:	4603      	mov	r3, r0
 8008278:	2b02      	cmp	r3, #2
 800827a:	d109      	bne.n	8008290 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800827c:	4b10      	ldr	r3, [pc, #64]	; (80082c0 <xTimerGenericCommand+0x94>)
 800827e:	6818      	ldr	r0, [r3, #0]
 8008280:	f107 0110 	add.w	r1, r7, #16
 8008284:	2300      	movs	r3, #0
 8008286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008288:	f7fe fc38 	bl	8006afc <xQueueGenericSend>
 800828c:	6278      	str	r0, [r7, #36]	; 0x24
 800828e:	e012      	b.n	80082b6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008290:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <xTimerGenericCommand+0x94>)
 8008292:	6818      	ldr	r0, [r3, #0]
 8008294:	f107 0110 	add.w	r1, r7, #16
 8008298:	2300      	movs	r3, #0
 800829a:	2200      	movs	r2, #0
 800829c:	f7fe fc2e 	bl	8006afc <xQueueGenericSend>
 80082a0:	6278      	str	r0, [r7, #36]	; 0x24
 80082a2:	e008      	b.n	80082b6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082a4:	4b06      	ldr	r3, [pc, #24]	; (80082c0 <xTimerGenericCommand+0x94>)
 80082a6:	6818      	ldr	r0, [r3, #0]
 80082a8:	f107 0110 	add.w	r1, r7, #16
 80082ac:	2300      	movs	r3, #0
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	f7fe fd1e 	bl	8006cf0 <xQueueGenericSendFromISR>
 80082b4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3728      	adds	r7, #40	; 0x28
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20000dc4 	.word	0x20000dc4

080082c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af02      	add	r7, sp, #8
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082ce:	4b1c      	ldr	r3, [pc, #112]	; (8008340 <prvProcessExpiredTimer+0x7c>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	3304      	adds	r3, #4
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe faa9 	bl	8006834 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d121      	bne.n	800832e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	699a      	ldr	r2, [r3, #24]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	18d1      	adds	r1, r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	6978      	ldr	r0, [r7, #20]
 80082f8:	f000 f8c8 	bl	800848c <prvInsertTimerInActiveList>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d015      	beq.n	800832e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008302:	2300      	movs	r3, #0
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	2300      	movs	r3, #0
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	2100      	movs	r1, #0
 800830c:	6978      	ldr	r0, [r7, #20]
 800830e:	f7ff ff8d 	bl	800822c <xTimerGenericCommand>
 8008312:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d109      	bne.n	800832e <prvProcessExpiredTimer+0x6a>
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	e7fe      	b.n	800832c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	6978      	ldr	r0, [r7, #20]
 8008334:	4798      	blx	r3
}
 8008336:	bf00      	nop
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	20000dbc 	.word	0x20000dbc

08008344 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800834c:	f107 0308 	add.w	r3, r7, #8
 8008350:	4618      	mov	r0, r3
 8008352:	f000 f857 	bl	8008404 <prvGetNextExpireTime>
 8008356:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4619      	mov	r1, r3
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 f803 	bl	8008368 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008362:	f000 f8d5 	bl	8008510 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008366:	e7f1      	b.n	800834c <prvTimerTask+0x8>

08008368 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008372:	f7ff fa3f 	bl	80077f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008376:	f107 0308 	add.w	r3, r7, #8
 800837a:	4618      	mov	r0, r3
 800837c:	f000 f866 	bl	800844c <prvSampleTimeNow>
 8008380:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d130      	bne.n	80083ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10a      	bne.n	80083a4 <prvProcessTimerOrBlockTask+0x3c>
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	429a      	cmp	r2, r3
 8008394:	d806      	bhi.n	80083a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008396:	f7ff fa3b 	bl	8007810 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800839a:	68f9      	ldr	r1, [r7, #12]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff ff91 	bl	80082c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083a2:	e024      	b.n	80083ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d008      	beq.n	80083bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083aa:	4b13      	ldr	r3, [pc, #76]	; (80083f8 <prvProcessTimerOrBlockTask+0x90>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bf0c      	ite	eq
 80083b4:	2301      	moveq	r3, #1
 80083b6:	2300      	movne	r3, #0
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083bc:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <prvProcessTimerOrBlockTask+0x94>)
 80083be:	6818      	ldr	r0, [r3, #0]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	4619      	mov	r1, r3
 80083ca:	f7fe ff39 	bl	8007240 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083ce:	f7ff fa1f 	bl	8007810 <xTaskResumeAll>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10a      	bne.n	80083ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083d8:	4b09      	ldr	r3, [pc, #36]	; (8008400 <prvProcessTimerOrBlockTask+0x98>)
 80083da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	f3bf 8f6f 	isb	sy
}
 80083e8:	e001      	b.n	80083ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083ea:	f7ff fa11 	bl	8007810 <xTaskResumeAll>
}
 80083ee:	bf00      	nop
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000dc0 	.word	0x20000dc0
 80083fc:	20000dc4 	.word	0x20000dc4
 8008400:	e000ed04 	.word	0xe000ed04

08008404 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800840c:	4b0e      	ldr	r3, [pc, #56]	; (8008448 <prvGetNextExpireTime+0x44>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	bf0c      	ite	eq
 8008416:	2301      	moveq	r3, #1
 8008418:	2300      	movne	r3, #0
 800841a:	b2db      	uxtb	r3, r3
 800841c:	461a      	mov	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d105      	bne.n	8008436 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800842a:	4b07      	ldr	r3, [pc, #28]	; (8008448 <prvGetNextExpireTime+0x44>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	e001      	b.n	800843a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800843a:	68fb      	ldr	r3, [r7, #12]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	bc80      	pop	{r7}
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	20000dbc 	.word	0x20000dbc

0800844c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008454:	f7ff fa78 	bl	8007948 <xTaskGetTickCount>
 8008458:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800845a:	4b0b      	ldr	r3, [pc, #44]	; (8008488 <prvSampleTimeNow+0x3c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	429a      	cmp	r2, r3
 8008462:	d205      	bcs.n	8008470 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008464:	f000 f904 	bl	8008670 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	e002      	b.n	8008476 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008476:	4a04      	ldr	r2, [pc, #16]	; (8008488 <prvSampleTimeNow+0x3c>)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800847c:	68fb      	ldr	r3, [r7, #12]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000dcc 	.word	0x20000dcc

0800848c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d812      	bhi.n	80084d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	1ad2      	subs	r2, r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d302      	bcc.n	80084c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084c0:	2301      	movs	r3, #1
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e01b      	b.n	80084fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084c6:	4b10      	ldr	r3, [pc, #64]	; (8008508 <prvInsertTimerInActiveList+0x7c>)
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fe f977 	bl	80067c4 <vListInsert>
 80084d6:	e012      	b.n	80084fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d206      	bcs.n	80084ee <prvInsertTimerInActiveList+0x62>
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d302      	bcc.n	80084ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084e8:	2301      	movs	r3, #1
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	e007      	b.n	80084fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084ee:	4b07      	ldr	r3, [pc, #28]	; (800850c <prvInsertTimerInActiveList+0x80>)
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3304      	adds	r3, #4
 80084f6:	4619      	mov	r1, r3
 80084f8:	4610      	mov	r0, r2
 80084fa:	f7fe f963 	bl	80067c4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084fe:	697b      	ldr	r3, [r7, #20]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3718      	adds	r7, #24
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20000dc0 	.word	0x20000dc0
 800850c:	20000dbc 	.word	0x20000dbc

08008510 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08e      	sub	sp, #56	; 0x38
 8008514:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008516:	e099      	b.n	800864c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	da17      	bge.n	800854e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800851e:	1d3b      	adds	r3, r7, #4
 8008520:	3304      	adds	r3, #4
 8008522:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008526:	2b00      	cmp	r3, #0
 8008528:	d109      	bne.n	800853e <prvProcessReceivedCommands+0x2e>
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	f383 8811 	msr	BASEPRI, r3
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	61fb      	str	r3, [r7, #28]
 800853c:	e7fe      	b.n	800853c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008544:	6850      	ldr	r0, [r2, #4]
 8008546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008548:	6892      	ldr	r2, [r2, #8]
 800854a:	4611      	mov	r1, r2
 800854c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	db7a      	blt.n	800864a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d004      	beq.n	800856a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008562:	3304      	adds	r3, #4
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe f965 	bl	8006834 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800856a:	463b      	mov	r3, r7
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff ff6d 	bl	800844c <prvSampleTimeNow>
 8008572:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b09      	cmp	r3, #9
 8008578:	d868      	bhi.n	800864c <prvProcessReceivedCommands+0x13c>
 800857a:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <prvProcessReceivedCommands+0x70>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	080085a9 	.word	0x080085a9
 8008584:	080085a9 	.word	0x080085a9
 8008588:	080085a9 	.word	0x080085a9
 800858c:	0800864d 	.word	0x0800864d
 8008590:	08008603 	.word	0x08008603
 8008594:	08008639 	.word	0x08008639
 8008598:	080085a9 	.word	0x080085a9
 800859c:	080085a9 	.word	0x080085a9
 80085a0:	0800864d 	.word	0x0800864d
 80085a4:	08008603 	.word	0x08008603
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	18d1      	adds	r1, r2, r3
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085b6:	f7ff ff69 	bl	800848c <prvInsertTimerInActiveList>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d045      	beq.n	800864c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d13d      	bne.n	800864c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	441a      	add	r2, r3
 80085d8:	2300      	movs	r3, #0
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	2300      	movs	r3, #0
 80085de:	2100      	movs	r1, #0
 80085e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085e2:	f7ff fe23 	bl	800822c <xTimerGenericCommand>
 80085e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d12e      	bne.n	800864c <prvProcessReceivedCommands+0x13c>
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	e7fe      	b.n	8008600 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d109      	bne.n	8008624 <prvProcessReceivedCommands+0x114>
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	e7fe      	b.n	8008622 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	699a      	ldr	r2, [r3, #24]
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	18d1      	adds	r1, r2, r3
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008632:	f7ff ff2b 	bl	800848c <prvInsertTimerInActiveList>
					break;
 8008636:	e009      	b.n	800864c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008644:	f000 fb58 	bl	8008cf8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008648:	e000      	b.n	800864c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800864a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800864c:	4b07      	ldr	r3, [pc, #28]	; (800866c <prvProcessReceivedCommands+0x15c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	1d39      	adds	r1, r7, #4
 8008652:	2200      	movs	r2, #0
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe fbdf 	bl	8006e18 <xQueueReceive>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	f47f af5b 	bne.w	8008518 <prvProcessReceivedCommands+0x8>
	}
}
 8008662:	bf00      	nop
 8008664:	3730      	adds	r7, #48	; 0x30
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000dc4 	.word	0x20000dc4

08008670 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008676:	e044      	b.n	8008702 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008678:	4b2b      	ldr	r3, [pc, #172]	; (8008728 <prvSwitchTimerLists+0xb8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008682:	4b29      	ldr	r3, [pc, #164]	; (8008728 <prvSwitchTimerLists+0xb8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3304      	adds	r3, #4
 8008690:	4618      	mov	r0, r3
 8008692:	f7fe f8cf 	bl	8006834 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d12d      	bne.n	8008702 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	4413      	add	r3, r2
 80086ae:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d90e      	bls.n	80086d6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086c4:	4b18      	ldr	r3, [pc, #96]	; (8008728 <prvSwitchTimerLists+0xb8>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3304      	adds	r3, #4
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f7fe f878 	bl	80067c4 <vListInsert>
 80086d4:	e015      	b.n	8008702 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086d6:	2300      	movs	r3, #0
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	2300      	movs	r3, #0
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	2100      	movs	r1, #0
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f7ff fda3 	bl	800822c <xTimerGenericCommand>
 80086e6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d109      	bne.n	8008702 <prvSwitchTimerLists+0x92>
 80086ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	603b      	str	r3, [r7, #0]
 8008700:	e7fe      	b.n	8008700 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008702:	4b09      	ldr	r3, [pc, #36]	; (8008728 <prvSwitchTimerLists+0xb8>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1b5      	bne.n	8008678 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800870c:	4b06      	ldr	r3, [pc, #24]	; (8008728 <prvSwitchTimerLists+0xb8>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008712:	4b06      	ldr	r3, [pc, #24]	; (800872c <prvSwitchTimerLists+0xbc>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a04      	ldr	r2, [pc, #16]	; (8008728 <prvSwitchTimerLists+0xb8>)
 8008718:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800871a:	4a04      	ldr	r2, [pc, #16]	; (800872c <prvSwitchTimerLists+0xbc>)
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	6013      	str	r3, [r2, #0]
}
 8008720:	bf00      	nop
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	20000dbc 	.word	0x20000dbc
 800872c:	20000dc0 	.word	0x20000dc0

08008730 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008736:	f000 f927 	bl	8008988 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800873a:	4b15      	ldr	r3, [pc, #84]	; (8008790 <prvCheckForValidListAndQueue+0x60>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d120      	bne.n	8008784 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008742:	4814      	ldr	r0, [pc, #80]	; (8008794 <prvCheckForValidListAndQueue+0x64>)
 8008744:	f7fd fff0 	bl	8006728 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008748:	4813      	ldr	r0, [pc, #76]	; (8008798 <prvCheckForValidListAndQueue+0x68>)
 800874a:	f7fd ffed 	bl	8006728 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800874e:	4b13      	ldr	r3, [pc, #76]	; (800879c <prvCheckForValidListAndQueue+0x6c>)
 8008750:	4a10      	ldr	r2, [pc, #64]	; (8008794 <prvCheckForValidListAndQueue+0x64>)
 8008752:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008754:	4b12      	ldr	r3, [pc, #72]	; (80087a0 <prvCheckForValidListAndQueue+0x70>)
 8008756:	4a10      	ldr	r2, [pc, #64]	; (8008798 <prvCheckForValidListAndQueue+0x68>)
 8008758:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800875a:	2300      	movs	r3, #0
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	4b11      	ldr	r3, [pc, #68]	; (80087a4 <prvCheckForValidListAndQueue+0x74>)
 8008760:	4a11      	ldr	r2, [pc, #68]	; (80087a8 <prvCheckForValidListAndQueue+0x78>)
 8008762:	2110      	movs	r1, #16
 8008764:	200a      	movs	r0, #10
 8008766:	f7fe f8f7 	bl	8006958 <xQueueGenericCreateStatic>
 800876a:	4602      	mov	r2, r0
 800876c:	4b08      	ldr	r3, [pc, #32]	; (8008790 <prvCheckForValidListAndQueue+0x60>)
 800876e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008770:	4b07      	ldr	r3, [pc, #28]	; (8008790 <prvCheckForValidListAndQueue+0x60>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008778:	4b05      	ldr	r3, [pc, #20]	; (8008790 <prvCheckForValidListAndQueue+0x60>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	490b      	ldr	r1, [pc, #44]	; (80087ac <prvCheckForValidListAndQueue+0x7c>)
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe fd36 	bl	80071f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008784:	f000 f92e 	bl	80089e4 <vPortExitCritical>
}
 8008788:	bf00      	nop
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000dc4 	.word	0x20000dc4
 8008794:	20000d94 	.word	0x20000d94
 8008798:	20000da8 	.word	0x20000da8
 800879c:	20000dbc 	.word	0x20000dbc
 80087a0:	20000dc0 	.word	0x20000dc0
 80087a4:	20000e70 	.word	0x20000e70
 80087a8:	20000dd0 	.word	0x20000dd0
 80087ac:	08009a24 	.word	0x08009a24

080087b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3b04      	subs	r3, #4
 80087c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3b04      	subs	r3, #4
 80087ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f023 0201 	bic.w	r2, r3, #1
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3b04      	subs	r3, #4
 80087de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087e0:	4a08      	ldr	r2, [pc, #32]	; (8008804 <pxPortInitialiseStack+0x54>)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3b14      	subs	r3, #20
 80087ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	3b20      	subs	r3, #32
 80087f6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087f8:	68fb      	ldr	r3, [r7, #12]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	bc80      	pop	{r7}
 8008802:	4770      	bx	lr
 8008804:	08008809 	.word	0x08008809

08008808 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800880e:	2300      	movs	r3, #0
 8008810:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008812:	4b10      	ldr	r3, [pc, #64]	; (8008854 <prvTaskExitError+0x4c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881a:	d009      	beq.n	8008830 <prvTaskExitError+0x28>
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	e7fe      	b.n	800882e <prvTaskExitError+0x26>
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008842:	bf00      	nop
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d0fc      	beq.n	8008844 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800884a:	bf00      	nop
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	bc80      	pop	{r7}
 8008852:	4770      	bx	lr
 8008854:	2000011c 	.word	0x2000011c
	...

08008860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008860:	4b07      	ldr	r3, [pc, #28]	; (8008880 <pxCurrentTCBConst2>)
 8008862:	6819      	ldr	r1, [r3, #0]
 8008864:	6808      	ldr	r0, [r1, #0]
 8008866:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800886a:	f380 8809 	msr	PSP, r0
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f04f 0000 	mov.w	r0, #0
 8008876:	f380 8811 	msr	BASEPRI, r0
 800887a:	f04e 0e0d 	orr.w	lr, lr, #13
 800887e:	4770      	bx	lr

08008880 <pxCurrentTCBConst2>:
 8008880:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop

08008888 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008888:	4806      	ldr	r0, [pc, #24]	; (80088a4 <prvPortStartFirstTask+0x1c>)
 800888a:	6800      	ldr	r0, [r0, #0]
 800888c:	6800      	ldr	r0, [r0, #0]
 800888e:	f380 8808 	msr	MSP, r0
 8008892:	b662      	cpsie	i
 8008894:	b661      	cpsie	f
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	df00      	svc	0
 80088a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088a2:	bf00      	nop
 80088a4:	e000ed08 	.word	0xe000ed08

080088a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088ae:	4b31      	ldr	r3, [pc, #196]	; (8008974 <xPortStartScheduler+0xcc>)
 80088b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	22ff      	movs	r2, #255	; 0xff
 80088be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088c8:	78fb      	ldrb	r3, [r7, #3]
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	4b29      	ldr	r3, [pc, #164]	; (8008978 <xPortStartScheduler+0xd0>)
 80088d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80088d6:	4b29      	ldr	r3, [pc, #164]	; (800897c <xPortStartScheduler+0xd4>)
 80088d8:	2207      	movs	r2, #7
 80088da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088dc:	e009      	b.n	80088f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80088de:	4b27      	ldr	r3, [pc, #156]	; (800897c <xPortStartScheduler+0xd4>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	4a25      	ldr	r2, [pc, #148]	; (800897c <xPortStartScheduler+0xd4>)
 80088e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088f2:	78fb      	ldrb	r3, [r7, #3]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fa:	2b80      	cmp	r3, #128	; 0x80
 80088fc:	d0ef      	beq.n	80088de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088fe:	4b1f      	ldr	r3, [pc, #124]	; (800897c <xPortStartScheduler+0xd4>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f1c3 0307 	rsb	r3, r3, #7
 8008906:	2b04      	cmp	r3, #4
 8008908:	d009      	beq.n	800891e <xPortStartScheduler+0x76>
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	60bb      	str	r3, [r7, #8]
 800891c:	e7fe      	b.n	800891c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800891e:	4b17      	ldr	r3, [pc, #92]	; (800897c <xPortStartScheduler+0xd4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	021b      	lsls	r3, r3, #8
 8008924:	4a15      	ldr	r2, [pc, #84]	; (800897c <xPortStartScheduler+0xd4>)
 8008926:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008928:	4b14      	ldr	r3, [pc, #80]	; (800897c <xPortStartScheduler+0xd4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008930:	4a12      	ldr	r2, [pc, #72]	; (800897c <xPortStartScheduler+0xd4>)
 8008932:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	b2da      	uxtb	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800893c:	4b10      	ldr	r3, [pc, #64]	; (8008980 <xPortStartScheduler+0xd8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a0f      	ldr	r2, [pc, #60]	; (8008980 <xPortStartScheduler+0xd8>)
 8008942:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008948:	4b0d      	ldr	r3, [pc, #52]	; (8008980 <xPortStartScheduler+0xd8>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a0c      	ldr	r2, [pc, #48]	; (8008980 <xPortStartScheduler+0xd8>)
 800894e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008954:	f000 f8b0 	bl	8008ab8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008958:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <xPortStartScheduler+0xdc>)
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800895e:	f7ff ff93 	bl	8008888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008962:	f7ff f8bd 	bl	8007ae0 <vTaskSwitchContext>
	prvTaskExitError();
 8008966:	f7ff ff4f 	bl	8008808 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	e000e400 	.word	0xe000e400
 8008978:	20000ec0 	.word	0x20000ec0
 800897c:	20000ec4 	.word	0x20000ec4
 8008980:	e000ed20 	.word	0xe000ed20
 8008984:	2000011c 	.word	0x2000011c

08008988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089a0:	4b0e      	ldr	r3, [pc, #56]	; (80089dc <vPortEnterCritical+0x54>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3301      	adds	r3, #1
 80089a6:	4a0d      	ldr	r2, [pc, #52]	; (80089dc <vPortEnterCritical+0x54>)
 80089a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089aa:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <vPortEnterCritical+0x54>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d10e      	bne.n	80089d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089b2:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <vPortEnterCritical+0x58>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d009      	beq.n	80089d0 <vPortEnterCritical+0x48>
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	603b      	str	r3, [r7, #0]
 80089ce:	e7fe      	b.n	80089ce <vPortEnterCritical+0x46>
	}
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bc80      	pop	{r7}
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	2000011c 	.word	0x2000011c
 80089e0:	e000ed04 	.word	0xe000ed04

080089e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089ea:	4b10      	ldr	r3, [pc, #64]	; (8008a2c <vPortExitCritical+0x48>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d109      	bne.n	8008a06 <vPortExitCritical+0x22>
 80089f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	607b      	str	r3, [r7, #4]
 8008a04:	e7fe      	b.n	8008a04 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008a06:	4b09      	ldr	r3, [pc, #36]	; (8008a2c <vPortExitCritical+0x48>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	4a07      	ldr	r2, [pc, #28]	; (8008a2c <vPortExitCritical+0x48>)
 8008a0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a10:	4b06      	ldr	r3, [pc, #24]	; (8008a2c <vPortExitCritical+0x48>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d104      	bne.n	8008a22 <vPortExitCritical+0x3e>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bc80      	pop	{r7}
 8008a2a:	4770      	bx	lr
 8008a2c:	2000011c 	.word	0x2000011c

08008a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a30:	f3ef 8009 	mrs	r0, PSP
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	4b0d      	ldr	r3, [pc, #52]	; (8008a70 <pxCurrentTCBConst>)
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a40:	6010      	str	r0, [r2, #0]
 8008a42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008a46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008a4a:	f380 8811 	msr	BASEPRI, r0
 8008a4e:	f7ff f847 	bl	8007ae0 <vTaskSwitchContext>
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	f380 8811 	msr	BASEPRI, r0
 8008a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a5e:	6819      	ldr	r1, [r3, #0]
 8008a60:	6808      	ldr	r0, [r1, #0]
 8008a62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a66:	f380 8809 	msr	PSP, r0
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	4770      	bx	lr

08008a70 <pxCurrentTCBConst>:
 8008a70:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop

08008a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a90:	f7fe ff68 	bl	8007964 <xTaskIncrementTick>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a9a:	4b06      	ldr	r3, [pc, #24]	; (8008ab4 <xPortSysTickHandler+0x3c>)
 8008a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008aac:	bf00      	nop
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	e000ed04 	.word	0xe000ed04

08008ab8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008abc:	4b0a      	ldr	r3, [pc, #40]	; (8008ae8 <vPortSetupTimerInterrupt+0x30>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ac2:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <vPortSetupTimerInterrupt+0x34>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ac8:	4b09      	ldr	r3, [pc, #36]	; (8008af0 <vPortSetupTimerInterrupt+0x38>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a09      	ldr	r2, [pc, #36]	; (8008af4 <vPortSetupTimerInterrupt+0x3c>)
 8008ace:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad2:	099b      	lsrs	r3, r3, #6
 8008ad4:	4a08      	ldr	r2, [pc, #32]	; (8008af8 <vPortSetupTimerInterrupt+0x40>)
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ada:	4b03      	ldr	r3, [pc, #12]	; (8008ae8 <vPortSetupTimerInterrupt+0x30>)
 8008adc:	2207      	movs	r2, #7
 8008ade:	601a      	str	r2, [r3, #0]
}
 8008ae0:	bf00      	nop
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr
 8008ae8:	e000e010 	.word	0xe000e010
 8008aec:	e000e018 	.word	0xe000e018
 8008af0:	20000000 	.word	0x20000000
 8008af4:	10624dd3 	.word	0x10624dd3
 8008af8:	e000e014 	.word	0xe000e014

08008afc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b02:	f3ef 8305 	mrs	r3, IPSR
 8008b06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b0f      	cmp	r3, #15
 8008b0c:	d913      	bls.n	8008b36 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b0e:	4a15      	ldr	r2, [pc, #84]	; (8008b64 <vPortValidateInterruptPriority+0x68>)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4413      	add	r3, r2
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b18:	4b13      	ldr	r3, [pc, #76]	; (8008b68 <vPortValidateInterruptPriority+0x6c>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	7afa      	ldrb	r2, [r7, #11]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d209      	bcs.n	8008b36 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	607b      	str	r3, [r7, #4]
 8008b34:	e7fe      	b.n	8008b34 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b36:	4b0d      	ldr	r3, [pc, #52]	; (8008b6c <vPortValidateInterruptPriority+0x70>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008b3e:	4b0c      	ldr	r3, [pc, #48]	; (8008b70 <vPortValidateInterruptPriority+0x74>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d909      	bls.n	8008b5a <vPortValidateInterruptPriority+0x5e>
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	e7fe      	b.n	8008b58 <vPortValidateInterruptPriority+0x5c>
	}
 8008b5a:	bf00      	nop
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bc80      	pop	{r7}
 8008b62:	4770      	bx	lr
 8008b64:	e000e3f0 	.word	0xe000e3f0
 8008b68:	20000ec0 	.word	0x20000ec0
 8008b6c:	e000ed0c 	.word	0xe000ed0c
 8008b70:	20000ec4 	.word	0x20000ec4

08008b74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08a      	sub	sp, #40	; 0x28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b80:	f7fe fe38 	bl	80077f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b84:	4b57      	ldr	r3, [pc, #348]	; (8008ce4 <pvPortMalloc+0x170>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b8c:	f000 f90c 	bl	8008da8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b90:	4b55      	ldr	r3, [pc, #340]	; (8008ce8 <pvPortMalloc+0x174>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4013      	ands	r3, r2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f040 808c 	bne.w	8008cb6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d01c      	beq.n	8008bde <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008ba4:	2208      	movs	r2, #8
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4413      	add	r3, r2
 8008baa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f003 0307 	and.w	r3, r3, #7
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d013      	beq.n	8008bde <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f023 0307 	bic.w	r3, r3, #7
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <pvPortMalloc+0x6a>
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	617b      	str	r3, [r7, #20]
 8008bdc:	e7fe      	b.n	8008bdc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d068      	beq.n	8008cb6 <pvPortMalloc+0x142>
 8008be4:	4b41      	ldr	r3, [pc, #260]	; (8008cec <pvPortMalloc+0x178>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d863      	bhi.n	8008cb6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008bee:	4b40      	ldr	r3, [pc, #256]	; (8008cf0 <pvPortMalloc+0x17c>)
 8008bf0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008bf2:	4b3f      	ldr	r3, [pc, #252]	; (8008cf0 <pvPortMalloc+0x17c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bf8:	e004      	b.n	8008c04 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d903      	bls.n	8008c16 <pvPortMalloc+0xa2>
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1f1      	bne.n	8008bfa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c16:	4b33      	ldr	r3, [pc, #204]	; (8008ce4 <pvPortMalloc+0x170>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d04a      	beq.n	8008cb6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2208      	movs	r2, #8
 8008c26:	4413      	add	r3, r2
 8008c28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	1ad2      	subs	r2, r2, r3
 8008c3a:	2308      	movs	r3, #8
 8008c3c:	005b      	lsls	r3, r3, #1
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d91e      	bls.n	8008c80 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4413      	add	r3, r2
 8008c48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	f003 0307 	and.w	r3, r3, #7
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d009      	beq.n	8008c68 <pvPortMalloc+0xf4>
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	613b      	str	r3, [r7, #16]
 8008c66:	e7fe      	b.n	8008c66 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	1ad2      	subs	r2, r2, r3
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c7a:	69b8      	ldr	r0, [r7, #24]
 8008c7c:	f000 f8f6 	bl	8008e6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c80:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <pvPortMalloc+0x178>)
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	4a18      	ldr	r2, [pc, #96]	; (8008cec <pvPortMalloc+0x178>)
 8008c8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c8e:	4b17      	ldr	r3, [pc, #92]	; (8008cec <pvPortMalloc+0x178>)
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	4b18      	ldr	r3, [pc, #96]	; (8008cf4 <pvPortMalloc+0x180>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d203      	bcs.n	8008ca2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c9a:	4b14      	ldr	r3, [pc, #80]	; (8008cec <pvPortMalloc+0x178>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a15      	ldr	r2, [pc, #84]	; (8008cf4 <pvPortMalloc+0x180>)
 8008ca0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	4b10      	ldr	r3, [pc, #64]	; (8008ce8 <pvPortMalloc+0x174>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	431a      	orrs	r2, r3
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008cb6:	f7fe fdab 	bl	8007810 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	f003 0307 	and.w	r3, r3, #7
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d009      	beq.n	8008cd8 <pvPortMalloc+0x164>
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	60fb      	str	r3, [r7, #12]
 8008cd6:	e7fe      	b.n	8008cd6 <pvPortMalloc+0x162>
	return pvReturn;
 8008cd8:	69fb      	ldr	r3, [r7, #28]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3728      	adds	r7, #40	; 0x28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20002ed0 	.word	0x20002ed0
 8008ce8:	20002edc 	.word	0x20002edc
 8008cec:	20002ed4 	.word	0x20002ed4
 8008cf0:	20002ec8 	.word	0x20002ec8
 8008cf4:	20002ed8 	.word	0x20002ed8

08008cf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d046      	beq.n	8008d98 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d0a:	2308      	movs	r3, #8
 8008d0c:	425b      	negs	r3, r3
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	4413      	add	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	4b20      	ldr	r3, [pc, #128]	; (8008da0 <vPortFree+0xa8>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4013      	ands	r3, r2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d109      	bne.n	8008d3a <vPortFree+0x42>
 8008d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	e7fe      	b.n	8008d38 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d009      	beq.n	8008d56 <vPortFree+0x5e>
 8008d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	60bb      	str	r3, [r7, #8]
 8008d54:	e7fe      	b.n	8008d54 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	4b11      	ldr	r3, [pc, #68]	; (8008da0 <vPortFree+0xa8>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d019      	beq.n	8008d98 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d115      	bne.n	8008d98 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <vPortFree+0xa8>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	43db      	mvns	r3, r3
 8008d76:	401a      	ands	r2, r3
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d7c:	f7fe fd3a 	bl	80077f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	685a      	ldr	r2, [r3, #4]
 8008d84:	4b07      	ldr	r3, [pc, #28]	; (8008da4 <vPortFree+0xac>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4413      	add	r3, r2
 8008d8a:	4a06      	ldr	r2, [pc, #24]	; (8008da4 <vPortFree+0xac>)
 8008d8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d8e:	6938      	ldr	r0, [r7, #16]
 8008d90:	f000 f86c 	bl	8008e6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d94:	f7fe fd3c 	bl	8007810 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d98:	bf00      	nop
 8008d9a:	3718      	adds	r7, #24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	20002edc 	.word	0x20002edc
 8008da4:	20002ed4 	.word	0x20002ed4

08008da8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008db2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008db4:	4b27      	ldr	r3, [pc, #156]	; (8008e54 <prvHeapInit+0xac>)
 8008db6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f003 0307 	and.w	r3, r3, #7
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00c      	beq.n	8008ddc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3307      	adds	r3, #7
 8008dc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f023 0307 	bic.w	r3, r3, #7
 8008dce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	4a1f      	ldr	r2, [pc, #124]	; (8008e54 <prvHeapInit+0xac>)
 8008dd8:	4413      	add	r3, r2
 8008dda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008de0:	4a1d      	ldr	r2, [pc, #116]	; (8008e58 <prvHeapInit+0xb0>)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008de6:	4b1c      	ldr	r3, [pc, #112]	; (8008e58 <prvHeapInit+0xb0>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	4413      	add	r3, r2
 8008df2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008df4:	2208      	movs	r2, #8
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	1a9b      	subs	r3, r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f023 0307 	bic.w	r3, r3, #7
 8008e02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4a15      	ldr	r2, [pc, #84]	; (8008e5c <prvHeapInit+0xb4>)
 8008e08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e0a:	4b14      	ldr	r3, [pc, #80]	; (8008e5c <prvHeapInit+0xb4>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e12:	4b12      	ldr	r3, [pc, #72]	; (8008e5c <prvHeapInit+0xb4>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	1ad2      	subs	r2, r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e28:	4b0c      	ldr	r3, [pc, #48]	; (8008e5c <prvHeapInit+0xb4>)
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	4a0a      	ldr	r2, [pc, #40]	; (8008e60 <prvHeapInit+0xb8>)
 8008e36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	4a09      	ldr	r2, [pc, #36]	; (8008e64 <prvHeapInit+0xbc>)
 8008e3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e40:	4b09      	ldr	r3, [pc, #36]	; (8008e68 <prvHeapInit+0xc0>)
 8008e42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e46:	601a      	str	r2, [r3, #0]
}
 8008e48:	bf00      	nop
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bc80      	pop	{r7}
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	20000ec8 	.word	0x20000ec8
 8008e58:	20002ec8 	.word	0x20002ec8
 8008e5c:	20002ed0 	.word	0x20002ed0
 8008e60:	20002ed8 	.word	0x20002ed8
 8008e64:	20002ed4 	.word	0x20002ed4
 8008e68:	20002edc 	.word	0x20002edc

08008e6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e74:	4b27      	ldr	r3, [pc, #156]	; (8008f14 <prvInsertBlockIntoFreeList+0xa8>)
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	e002      	b.n	8008e80 <prvInsertBlockIntoFreeList+0x14>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d8f7      	bhi.n	8008e7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	4413      	add	r3, r2
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d108      	bne.n	8008eae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	441a      	add	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	441a      	add	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d118      	bne.n	8008ef4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	4b14      	ldr	r3, [pc, #80]	; (8008f18 <prvInsertBlockIntoFreeList+0xac>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d00d      	beq.n	8008eea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	441a      	add	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	e008      	b.n	8008efc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008eea:	4b0b      	ldr	r3, [pc, #44]	; (8008f18 <prvInsertBlockIntoFreeList+0xac>)
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	e003      	b.n	8008efc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d002      	beq.n	8008f0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f0a:	bf00      	nop
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bc80      	pop	{r7}
 8008f12:	4770      	bx	lr
 8008f14:	20002ec8 	.word	0x20002ec8
 8008f18:	20002ed0 	.word	0x20002ed0

08008f1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f20:	2200      	movs	r2, #0
 8008f22:	4912      	ldr	r1, [pc, #72]	; (8008f6c <MX_USB_DEVICE_Init+0x50>)
 8008f24:	4812      	ldr	r0, [pc, #72]	; (8008f70 <MX_USB_DEVICE_Init+0x54>)
 8008f26:	f7fc fa02 	bl	800532e <USBD_Init>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f30:	f7f7 fac6 	bl	80004c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f34:	490f      	ldr	r1, [pc, #60]	; (8008f74 <MX_USB_DEVICE_Init+0x58>)
 8008f36:	480e      	ldr	r0, [pc, #56]	; (8008f70 <MX_USB_DEVICE_Init+0x54>)
 8008f38:	f7fc fa24 	bl	8005384 <USBD_RegisterClass>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f42:	f7f7 fabd 	bl	80004c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f46:	490c      	ldr	r1, [pc, #48]	; (8008f78 <MX_USB_DEVICE_Init+0x5c>)
 8008f48:	4809      	ldr	r0, [pc, #36]	; (8008f70 <MX_USB_DEVICE_Init+0x54>)
 8008f4a:	f7fc f955 	bl	80051f8 <USBD_CDC_RegisterInterface>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f54:	f7f7 fab4 	bl	80004c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f58:	4805      	ldr	r0, [pc, #20]	; (8008f70 <MX_USB_DEVICE_Init+0x54>)
 8008f5a:	f7fc fa2c 	bl	80053b6 <USBD_Start>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f64:	f7f7 faac 	bl	80004c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f68:	bf00      	nop
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	20000130 	.word	0x20000130
 8008f70:	200031ac 	.word	0x200031ac
 8008f74:	20000018 	.word	0x20000018
 8008f78:	20000120 	.word	0x20000120

08008f7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f80:	2200      	movs	r2, #0
 8008f82:	4905      	ldr	r1, [pc, #20]	; (8008f98 <CDC_Init_FS+0x1c>)
 8008f84:	4805      	ldr	r0, [pc, #20]	; (8008f9c <CDC_Init_FS+0x20>)
 8008f86:	f7fc f94d 	bl	8005224 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f8a:	4905      	ldr	r1, [pc, #20]	; (8008fa0 <CDC_Init_FS+0x24>)
 8008f8c:	4803      	ldr	r0, [pc, #12]	; (8008f9c <CDC_Init_FS+0x20>)
 8008f8e:	f7fc f962 	bl	8005256 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	200034b0 	.word	0x200034b0
 8008f9c:	200031ac 	.word	0x200031ac
 8008fa0:	20003470 	.word	0x20003470

08008fa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008fa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bc80      	pop	{r7}
 8008fb0:	4770      	bx	lr
	...

08008fb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	6039      	str	r1, [r7, #0]
 8008fbe:	71fb      	strb	r3, [r7, #7]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	2b23      	cmp	r3, #35	; 0x23
 8008fc8:	d84a      	bhi.n	8009060 <CDC_Control_FS+0xac>
 8008fca:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <CDC_Control_FS+0x1c>)
 8008fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd0:	08009061 	.word	0x08009061
 8008fd4:	08009061 	.word	0x08009061
 8008fd8:	08009061 	.word	0x08009061
 8008fdc:	08009061 	.word	0x08009061
 8008fe0:	08009061 	.word	0x08009061
 8008fe4:	08009061 	.word	0x08009061
 8008fe8:	08009061 	.word	0x08009061
 8008fec:	08009061 	.word	0x08009061
 8008ff0:	08009061 	.word	0x08009061
 8008ff4:	08009061 	.word	0x08009061
 8008ff8:	08009061 	.word	0x08009061
 8008ffc:	08009061 	.word	0x08009061
 8009000:	08009061 	.word	0x08009061
 8009004:	08009061 	.word	0x08009061
 8009008:	08009061 	.word	0x08009061
 800900c:	08009061 	.word	0x08009061
 8009010:	08009061 	.word	0x08009061
 8009014:	08009061 	.word	0x08009061
 8009018:	08009061 	.word	0x08009061
 800901c:	08009061 	.word	0x08009061
 8009020:	08009061 	.word	0x08009061
 8009024:	08009061 	.word	0x08009061
 8009028:	08009061 	.word	0x08009061
 800902c:	08009061 	.word	0x08009061
 8009030:	08009061 	.word	0x08009061
 8009034:	08009061 	.word	0x08009061
 8009038:	08009061 	.word	0x08009061
 800903c:	08009061 	.word	0x08009061
 8009040:	08009061 	.word	0x08009061
 8009044:	08009061 	.word	0x08009061
 8009048:	08009061 	.word	0x08009061
 800904c:	08009061 	.word	0x08009061
 8009050:	08009061 	.word	0x08009061
 8009054:	08009061 	.word	0x08009061
 8009058:	08009061 	.word	0x08009061
 800905c:	08009061 	.word	0x08009061
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009060:	bf00      	nop
  }

  return (USBD_OK);
 8009062:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	bc80      	pop	{r7}
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop

08009070 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);

  strncpy(VCP_Rx_Buf, (char*)Buf, *Len);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	6879      	ldr	r1, [r7, #4]
 8009082:	4808      	ldr	r0, [pc, #32]	; (80090a4 <CDC_Receive_FS+0x34>)
 8009084:	f000 fc27 	bl	80098d6 <strncpy>
  VCP_Rx_Buf[*Len] = 0;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a05      	ldr	r2, [pc, #20]	; (80090a4 <CDC_Receive_FS+0x34>)
 800908e:	2100      	movs	r1, #0
 8009090:	54d1      	strb	r1, [r2, r3]

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009092:	4805      	ldr	r0, [pc, #20]	; (80090a8 <CDC_Receive_FS+0x38>)
 8009094:	f7fc f921 	bl	80052da <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009098:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	20003120 	.word	0x20003120
 80090a8:	200031ac 	.word	0x200031ac

080090ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80090bc:	4b0d      	ldr	r3, [pc, #52]	; (80090f4 <CDC_Transmit_FS+0x48>)
 80090be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e00b      	b.n	80090ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80090d2:	887b      	ldrh	r3, [r7, #2]
 80090d4:	461a      	mov	r2, r3
 80090d6:	6879      	ldr	r1, [r7, #4]
 80090d8:	4806      	ldr	r0, [pc, #24]	; (80090f4 <CDC_Transmit_FS+0x48>)
 80090da:	f7fc f8a3 	bl	8005224 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80090de:	4805      	ldr	r0, [pc, #20]	; (80090f4 <CDC_Transmit_FS+0x48>)
 80090e0:	f7fc f8cc 	bl	800527c <USBD_CDC_TransmitPacket>
 80090e4:	4603      	mov	r3, r0
 80090e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	200031ac 	.word	0x200031ac

080090f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	6039      	str	r1, [r7, #0]
 8009102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2212      	movs	r2, #18
 8009108:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800910a:	4b03      	ldr	r3, [pc, #12]	; (8009118 <USBD_FS_DeviceDescriptor+0x20>)
}
 800910c:	4618      	mov	r0, r3
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	bc80      	pop	{r7}
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	2000014c 	.word	0x2000014c

0800911c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	4603      	mov	r3, r0
 8009124:	6039      	str	r1, [r7, #0]
 8009126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2204      	movs	r2, #4
 800912c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800912e:	4b03      	ldr	r3, [pc, #12]	; (800913c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	20000160 	.word	0x20000160

08009140 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	6039      	str	r1, [r7, #0]
 800914a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800914c:	79fb      	ldrb	r3, [r7, #7]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d105      	bne.n	800915e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	4907      	ldr	r1, [pc, #28]	; (8009174 <USBD_FS_ProductStrDescriptor+0x34>)
 8009156:	4808      	ldr	r0, [pc, #32]	; (8009178 <USBD_FS_ProductStrDescriptor+0x38>)
 8009158:	f7fd f899 	bl	800628e <USBD_GetString>
 800915c:	e004      	b.n	8009168 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	4904      	ldr	r1, [pc, #16]	; (8009174 <USBD_FS_ProductStrDescriptor+0x34>)
 8009162:	4805      	ldr	r0, [pc, #20]	; (8009178 <USBD_FS_ProductStrDescriptor+0x38>)
 8009164:	f7fd f893 	bl	800628e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009168:	4b02      	ldr	r3, [pc, #8]	; (8009174 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	200034f0 	.word	0x200034f0
 8009178:	08009a2c 	.word	0x08009a2c

0800917c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	6039      	str	r1, [r7, #0]
 8009186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	4904      	ldr	r1, [pc, #16]	; (800919c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800918c:	4804      	ldr	r0, [pc, #16]	; (80091a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800918e:	f7fd f87e 	bl	800628e <USBD_GetString>
  return USBD_StrDesc;
 8009192:	4b02      	ldr	r3, [pc, #8]	; (800919c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009194:	4618      	mov	r0, r3
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	200034f0 	.word	0x200034f0
 80091a0:	08009a44 	.word	0x08009a44

080091a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	6039      	str	r1, [r7, #0]
 80091ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	221a      	movs	r2, #26
 80091b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091b6:	f000 f843 	bl	8009240 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091ba:	4b02      	ldr	r3, [pc, #8]	; (80091c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20000164 	.word	0x20000164

080091c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	6039      	str	r1, [r7, #0]
 80091d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091d4:	79fb      	ldrb	r3, [r7, #7]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d105      	bne.n	80091e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	4907      	ldr	r1, [pc, #28]	; (80091fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80091de:	4808      	ldr	r0, [pc, #32]	; (8009200 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091e0:	f7fd f855 	bl	800628e <USBD_GetString>
 80091e4:	e004      	b.n	80091f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	4904      	ldr	r1, [pc, #16]	; (80091fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80091ea:	4805      	ldr	r0, [pc, #20]	; (8009200 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091ec:	f7fd f84f 	bl	800628e <USBD_GetString>
  }
  return USBD_StrDesc;
 80091f0:	4b02      	ldr	r3, [pc, #8]	; (80091fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	200034f0 	.word	0x200034f0
 8009200:	08009a58 	.word	0x08009a58

08009204 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	6039      	str	r1, [r7, #0]
 800920e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d105      	bne.n	8009222 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	4907      	ldr	r1, [pc, #28]	; (8009238 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800921a:	4808      	ldr	r0, [pc, #32]	; (800923c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800921c:	f7fd f837 	bl	800628e <USBD_GetString>
 8009220:	e004      	b.n	800922c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	4904      	ldr	r1, [pc, #16]	; (8009238 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009226:	4805      	ldr	r0, [pc, #20]	; (800923c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009228:	f7fd f831 	bl	800628e <USBD_GetString>
  }
  return USBD_StrDesc;
 800922c:	4b02      	ldr	r3, [pc, #8]	; (8009238 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	200034f0 	.word	0x200034f0
 800923c:	08009a64 	.word	0x08009a64

08009240 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009246:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <Get_SerialNum+0x44>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800924c:	4b0e      	ldr	r3, [pc, #56]	; (8009288 <Get_SerialNum+0x48>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009252:	4b0e      	ldr	r3, [pc, #56]	; (800928c <Get_SerialNum+0x4c>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4413      	add	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d009      	beq.n	800927a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009266:	2208      	movs	r2, #8
 8009268:	4909      	ldr	r1, [pc, #36]	; (8009290 <Get_SerialNum+0x50>)
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f000 f814 	bl	8009298 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009270:	2204      	movs	r2, #4
 8009272:	4908      	ldr	r1, [pc, #32]	; (8009294 <Get_SerialNum+0x54>)
 8009274:	68b8      	ldr	r0, [r7, #8]
 8009276:	f000 f80f 	bl	8009298 <IntToUnicode>
  }
}
 800927a:	bf00      	nop
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	1ffff7e8 	.word	0x1ffff7e8
 8009288:	1ffff7ec 	.word	0x1ffff7ec
 800928c:	1ffff7f0 	.word	0x1ffff7f0
 8009290:	20000166 	.word	0x20000166
 8009294:	20000176 	.word	0x20000176

08009298 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	4613      	mov	r3, r2
 80092a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80092aa:	2300      	movs	r3, #0
 80092ac:	75fb      	strb	r3, [r7, #23]
 80092ae:	e027      	b.n	8009300 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	0f1b      	lsrs	r3, r3, #28
 80092b4:	2b09      	cmp	r3, #9
 80092b6:	d80b      	bhi.n	80092d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	0f1b      	lsrs	r3, r3, #28
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	7dfb      	ldrb	r3, [r7, #23]
 80092c0:	005b      	lsls	r3, r3, #1
 80092c2:	4619      	mov	r1, r3
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	440b      	add	r3, r1
 80092c8:	3230      	adds	r2, #48	; 0x30
 80092ca:	b2d2      	uxtb	r2, r2
 80092cc:	701a      	strb	r2, [r3, #0]
 80092ce:	e00a      	b.n	80092e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	0f1b      	lsrs	r3, r3, #28
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	4619      	mov	r1, r3
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	440b      	add	r3, r1
 80092e0:	3237      	adds	r2, #55	; 0x37
 80092e2:	b2d2      	uxtb	r2, r2
 80092e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	011b      	lsls	r3, r3, #4
 80092ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	3301      	adds	r3, #1
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	4413      	add	r3, r2
 80092f6:	2200      	movs	r2, #0
 80092f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
 80092fc:	3301      	adds	r3, #1
 80092fe:	75fb      	strb	r3, [r7, #23]
 8009300:	7dfa      	ldrb	r2, [r7, #23]
 8009302:	79fb      	ldrb	r3, [r7, #7]
 8009304:	429a      	cmp	r2, r3
 8009306:	d3d3      	bcc.n	80092b0 <IntToUnicode+0x18>
  }
}
 8009308:	bf00      	nop
 800930a:	371c      	adds	r7, #28
 800930c:	46bd      	mov	sp, r7
 800930e:	bc80      	pop	{r7}
 8009310:	4770      	bx	lr
	...

08009314 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a0d      	ldr	r2, [pc, #52]	; (8009358 <HAL_PCD_MspInit+0x44>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d113      	bne.n	800934e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009326:	4b0d      	ldr	r3, [pc, #52]	; (800935c <HAL_PCD_MspInit+0x48>)
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	4a0c      	ldr	r2, [pc, #48]	; (800935c <HAL_PCD_MspInit+0x48>)
 800932c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009330:	61d3      	str	r3, [r2, #28]
 8009332:	4b0a      	ldr	r3, [pc, #40]	; (800935c <HAL_PCD_MspInit+0x48>)
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800933a:	60fb      	str	r3, [r7, #12]
 800933c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800933e:	2200      	movs	r2, #0
 8009340:	2105      	movs	r1, #5
 8009342:	2014      	movs	r0, #20
 8009344:	f7f7 fa89 	bl	800085a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009348:	2014      	movs	r0, #20
 800934a:	f7f7 faa2 	bl	8000892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	40005c00 	.word	0x40005c00
 800935c:	40021000 	.word	0x40021000

08009360 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009374:	4619      	mov	r1, r3
 8009376:	4610      	mov	r0, r2
 8009378:	f7fc f865 	bl	8005446 <USBD_LL_SetupStage>
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009396:	78fa      	ldrb	r2, [r7, #3]
 8009398:	6879      	ldr	r1, [r7, #4]
 800939a:	4613      	mov	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	00db      	lsls	r3, r3, #3
 80093a2:	440b      	add	r3, r1
 80093a4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	78fb      	ldrb	r3, [r7, #3]
 80093ac:	4619      	mov	r1, r3
 80093ae:	f7fc f895 	bl	80054dc <USBD_LL_DataOutStage>
}
 80093b2:	bf00      	nop
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b082      	sub	sp, #8
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	460b      	mov	r3, r1
 80093c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80093cc:	78fa      	ldrb	r2, [r7, #3]
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	4613      	mov	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	00db      	lsls	r3, r3, #3
 80093d8:	440b      	add	r3, r1
 80093da:	333c      	adds	r3, #60	; 0x3c
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	4619      	mov	r1, r3
 80093e2:	f7fc f8ec 	bl	80055be <USBD_LL_DataInStage>
}
 80093e6:	bf00      	nop
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fc f9fc 	bl	80057fa <USBD_LL_SOF>
}
 8009402:	bf00      	nop
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009412:	2301      	movs	r3, #1
 8009414:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	2b02      	cmp	r3, #2
 800941c:	d001      	beq.n	8009422 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800941e:	f7f7 f84f 	bl	80004c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009428:	7bfa      	ldrb	r2, [r7, #15]
 800942a:	4611      	mov	r1, r2
 800942c:	4618      	mov	r0, r3
 800942e:	f7fc f9ac 	bl	800578a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009438:	4618      	mov	r0, r3
 800943a:	f7fc f965 	bl	8005708 <USBD_LL_Reset>
}
 800943e:	bf00      	nop
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009456:	4618      	mov	r0, r3
 8009458:	f7fc f9a6 	bl	80057a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d005      	beq.n	8009470 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009464:	4b04      	ldr	r3, [pc, #16]	; (8009478 <HAL_PCD_SuspendCallback+0x30>)
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	4a03      	ldr	r2, [pc, #12]	; (8009478 <HAL_PCD_SuspendCallback+0x30>)
 800946a:	f043 0306 	orr.w	r3, r3, #6
 800946e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	e000ed00 	.word	0xe000ed00

0800947c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800948a:	4618      	mov	r0, r3
 800948c:	f7fc f9a0 	bl	80057d0 <USBD_LL_Resume>
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80094a0:	4a28      	ldr	r2, [pc, #160]	; (8009544 <USBD_LL_Init+0xac>)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a26      	ldr	r2, [pc, #152]	; (8009544 <USBD_LL_Init+0xac>)
 80094ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80094b0:	4b24      	ldr	r3, [pc, #144]	; (8009544 <USBD_LL_Init+0xac>)
 80094b2:	4a25      	ldr	r2, [pc, #148]	; (8009548 <USBD_LL_Init+0xb0>)
 80094b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80094b6:	4b23      	ldr	r3, [pc, #140]	; (8009544 <USBD_LL_Init+0xac>)
 80094b8:	2208      	movs	r2, #8
 80094ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80094bc:	4b21      	ldr	r3, [pc, #132]	; (8009544 <USBD_LL_Init+0xac>)
 80094be:	2202      	movs	r2, #2
 80094c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80094c2:	4b20      	ldr	r3, [pc, #128]	; (8009544 <USBD_LL_Init+0xac>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80094c8:	4b1e      	ldr	r3, [pc, #120]	; (8009544 <USBD_LL_Init+0xac>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80094ce:	4b1d      	ldr	r3, [pc, #116]	; (8009544 <USBD_LL_Init+0xac>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80094d4:	481b      	ldr	r0, [pc, #108]	; (8009544 <USBD_LL_Init+0xac>)
 80094d6:	f7f7 fb82 	bl	8000bde <HAL_PCD_Init>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d001      	beq.n	80094e4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80094e0:	f7f6 ffee 	bl	80004c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094ea:	2318      	movs	r3, #24
 80094ec:	2200      	movs	r2, #0
 80094ee:	2100      	movs	r1, #0
 80094f0:	f7f8 feb6 	bl	8002260 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094fa:	2358      	movs	r3, #88	; 0x58
 80094fc:	2200      	movs	r2, #0
 80094fe:	2180      	movs	r1, #128	; 0x80
 8009500:	f7f8 feae 	bl	8002260 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800950a:	23c0      	movs	r3, #192	; 0xc0
 800950c:	2200      	movs	r2, #0
 800950e:	2181      	movs	r1, #129	; 0x81
 8009510:	f7f8 fea6 	bl	8002260 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800951a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800951e:	2200      	movs	r2, #0
 8009520:	2101      	movs	r1, #1
 8009522:	f7f8 fe9d 	bl	8002260 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800952c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009530:	2200      	movs	r2, #0
 8009532:	2182      	movs	r1, #130	; 0x82
 8009534:	f7f8 fe94 	bl	8002260 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	200036f0 	.word	0x200036f0
 8009548:	40005c00 	.word	0x40005c00

0800954c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009562:	4618      	mov	r0, r3
 8009564:	f7f7 fc46 	bl	8000df4 <HAL_PCD_Start>
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800956c:	7bfb      	ldrb	r3, [r7, #15]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 f94e 	bl	8009810 <USBD_Get_USB_Status>
 8009574:	4603      	mov	r3, r0
 8009576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009578:	7bbb      	ldrb	r3, [r7, #14]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	4608      	mov	r0, r1
 800958c:	4611      	mov	r1, r2
 800958e:	461a      	mov	r2, r3
 8009590:	4603      	mov	r3, r0
 8009592:	70fb      	strb	r3, [r7, #3]
 8009594:	460b      	mov	r3, r1
 8009596:	70bb      	strb	r3, [r7, #2]
 8009598:	4613      	mov	r3, r2
 800959a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095aa:	78bb      	ldrb	r3, [r7, #2]
 80095ac:	883a      	ldrh	r2, [r7, #0]
 80095ae:	78f9      	ldrb	r1, [r7, #3]
 80095b0:	f7f7 fdc0 	bl	8001134 <HAL_PCD_EP_Open>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 f928 	bl	8009810 <USBD_Get_USB_Status>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095e8:	78fa      	ldrb	r2, [r7, #3]
 80095ea:	4611      	mov	r1, r2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7f7 fe07 	bl	8001200 <HAL_PCD_EP_Close>
 80095f2:	4603      	mov	r3, r0
 80095f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 f909 	bl	8009810 <USBD_Get_USB_Status>
 80095fe:	4603      	mov	r3, r0
 8009600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009602:	7bbb      	ldrb	r3, [r7, #14]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	4611      	mov	r1, r2
 800962a:	4618      	mov	r0, r3
 800962c:	f7f7 fec7 	bl	80013be <HAL_PCD_EP_SetStall>
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	4618      	mov	r0, r3
 8009638:	f000 f8ea 	bl	8009810 <USBD_Get_USB_Status>
 800963c:	4603      	mov	r3, r0
 800963e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009640:	7bbb      	ldrb	r3, [r7, #14]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009664:	78fa      	ldrb	r2, [r7, #3]
 8009666:	4611      	mov	r1, r2
 8009668:	4618      	mov	r0, r3
 800966a:	f7f7 ff08 	bl	800147e <HAL_PCD_EP_ClrStall>
 800966e:	4603      	mov	r3, r0
 8009670:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	4618      	mov	r0, r3
 8009676:	f000 f8cb 	bl	8009810 <USBD_Get_USB_Status>
 800967a:	4603      	mov	r3, r0
 800967c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800967e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800969a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800969c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	da0c      	bge.n	80096be <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096a4:	78fb      	ldrb	r3, [r7, #3]
 80096a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096aa:	68f9      	ldr	r1, [r7, #12]
 80096ac:	1c5a      	adds	r2, r3, #1
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	00db      	lsls	r3, r3, #3
 80096b6:	440b      	add	r3, r1
 80096b8:	3302      	adds	r3, #2
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	e00b      	b.n	80096d6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096be:	78fb      	ldrb	r3, [r7, #3]
 80096c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096c4:	68f9      	ldr	r1, [r7, #12]
 80096c6:	4613      	mov	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	00db      	lsls	r3, r3, #3
 80096ce:	440b      	add	r3, r1
 80096d0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80096d4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	bc80      	pop	{r7}
 80096de:	4770      	bx	lr

080096e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096fa:	78fa      	ldrb	r2, [r7, #3]
 80096fc:	4611      	mov	r1, r2
 80096fe:	4618      	mov	r0, r3
 8009700:	f7f7 fcf3 	bl	80010ea <HAL_PCD_SetAddress>
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009708:	7bfb      	ldrb	r3, [r7, #15]
 800970a:	4618      	mov	r0, r3
 800970c:	f000 f880 	bl	8009810 <USBD_Get_USB_Status>
 8009710:	4603      	mov	r3, r0
 8009712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009714:	7bbb      	ldrb	r3, [r7, #14]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b086      	sub	sp, #24
 8009722:	af00      	add	r7, sp, #0
 8009724:	60f8      	str	r0, [r7, #12]
 8009726:	607a      	str	r2, [r7, #4]
 8009728:	461a      	mov	r2, r3
 800972a:	460b      	mov	r3, r1
 800972c:	72fb      	strb	r3, [r7, #11]
 800972e:	4613      	mov	r3, r2
 8009730:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009740:	893b      	ldrh	r3, [r7, #8]
 8009742:	7af9      	ldrb	r1, [r7, #11]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	f7f7 fdf7 	bl	8001338 <HAL_PCD_EP_Transmit>
 800974a:	4603      	mov	r3, r0
 800974c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800974e:	7dfb      	ldrb	r3, [r7, #23]
 8009750:	4618      	mov	r0, r3
 8009752:	f000 f85d 	bl	8009810 <USBD_Get_USB_Status>
 8009756:	4603      	mov	r3, r0
 8009758:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800975a:	7dbb      	ldrb	r3, [r7, #22]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	607a      	str	r2, [r7, #4]
 800976e:	461a      	mov	r2, r3
 8009770:	460b      	mov	r3, r1
 8009772:	72fb      	strb	r3, [r7, #11]
 8009774:	4613      	mov	r3, r2
 8009776:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009786:	893b      	ldrh	r3, [r7, #8]
 8009788:	7af9      	ldrb	r1, [r7, #11]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	f7f7 fd80 	bl	8001290 <HAL_PCD_EP_Receive>
 8009790:	4603      	mov	r3, r0
 8009792:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009794:	7dfb      	ldrb	r3, [r7, #23]
 8009796:	4618      	mov	r0, r3
 8009798:	f000 f83a 	bl	8009810 <USBD_Get_USB_Status>
 800979c:	4603      	mov	r3, r0
 800979e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3718      	adds	r7, #24
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b082      	sub	sp, #8
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	460b      	mov	r3, r1
 80097b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097bc:	78fa      	ldrb	r2, [r7, #3]
 80097be:	4611      	mov	r1, r2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7f7 fda2 	bl	800130a <HAL_PCD_EP_GetRxCount>
 80097c6:	4603      	mov	r3, r0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097d8:	4b02      	ldr	r3, [pc, #8]	; (80097e4 <USBD_static_malloc+0x14>)
}
 80097da:	4618      	mov	r0, r3
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	bc80      	pop	{r7}
 80097e2:	4770      	bx	lr
 80097e4:	20002ee0 	.word	0x20002ee0

080097e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]

}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bc80      	pop	{r7}
 80097f8:	4770      	bx	lr

080097fa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097fa:	b480      	push	{r7}
 80097fc:	b083      	sub	sp, #12
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009806:	bf00      	nop
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	bc80      	pop	{r7}
 800980e:	4770      	bx	lr

08009810 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800981e:	79fb      	ldrb	r3, [r7, #7]
 8009820:	2b03      	cmp	r3, #3
 8009822:	d817      	bhi.n	8009854 <USBD_Get_USB_Status+0x44>
 8009824:	a201      	add	r2, pc, #4	; (adr r2, 800982c <USBD_Get_USB_Status+0x1c>)
 8009826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982a:	bf00      	nop
 800982c:	0800983d 	.word	0x0800983d
 8009830:	08009843 	.word	0x08009843
 8009834:	08009849 	.word	0x08009849
 8009838:	0800984f 	.word	0x0800984f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	73fb      	strb	r3, [r7, #15]
    break;
 8009840:	e00b      	b.n	800985a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009842:	2302      	movs	r3, #2
 8009844:	73fb      	strb	r3, [r7, #15]
    break;
 8009846:	e008      	b.n	800985a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009848:	2301      	movs	r3, #1
 800984a:	73fb      	strb	r3, [r7, #15]
    break;
 800984c:	e005      	b.n	800985a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800984e:	2302      	movs	r3, #2
 8009850:	73fb      	strb	r3, [r7, #15]
    break;
 8009852:	e002      	b.n	800985a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009854:	2302      	movs	r3, #2
 8009856:	73fb      	strb	r3, [r7, #15]
    break;
 8009858:	bf00      	nop
  }
  return usb_status;
 800985a:	7bfb      	ldrb	r3, [r7, #15]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	bc80      	pop	{r7}
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop

08009868 <__libc_init_array>:
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	2500      	movs	r5, #0
 800986c:	4e0c      	ldr	r6, [pc, #48]	; (80098a0 <__libc_init_array+0x38>)
 800986e:	4c0d      	ldr	r4, [pc, #52]	; (80098a4 <__libc_init_array+0x3c>)
 8009870:	1ba4      	subs	r4, r4, r6
 8009872:	10a4      	asrs	r4, r4, #2
 8009874:	42a5      	cmp	r5, r4
 8009876:	d109      	bne.n	800988c <__libc_init_array+0x24>
 8009878:	f000 f842 	bl	8009900 <_init>
 800987c:	2500      	movs	r5, #0
 800987e:	4e0a      	ldr	r6, [pc, #40]	; (80098a8 <__libc_init_array+0x40>)
 8009880:	4c0a      	ldr	r4, [pc, #40]	; (80098ac <__libc_init_array+0x44>)
 8009882:	1ba4      	subs	r4, r4, r6
 8009884:	10a4      	asrs	r4, r4, #2
 8009886:	42a5      	cmp	r5, r4
 8009888:	d105      	bne.n	8009896 <__libc_init_array+0x2e>
 800988a:	bd70      	pop	{r4, r5, r6, pc}
 800988c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009890:	4798      	blx	r3
 8009892:	3501      	adds	r5, #1
 8009894:	e7ee      	b.n	8009874 <__libc_init_array+0xc>
 8009896:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800989a:	4798      	blx	r3
 800989c:	3501      	adds	r5, #1
 800989e:	e7f2      	b.n	8009886 <__libc_init_array+0x1e>
 80098a0:	08009aa8 	.word	0x08009aa8
 80098a4:	08009aa8 	.word	0x08009aa8
 80098a8:	08009aa8 	.word	0x08009aa8
 80098ac:	08009aac 	.word	0x08009aac

080098b0 <memcpy>:
 80098b0:	b510      	push	{r4, lr}
 80098b2:	1e43      	subs	r3, r0, #1
 80098b4:	440a      	add	r2, r1
 80098b6:	4291      	cmp	r1, r2
 80098b8:	d100      	bne.n	80098bc <memcpy+0xc>
 80098ba:	bd10      	pop	{r4, pc}
 80098bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098c4:	e7f7      	b.n	80098b6 <memcpy+0x6>

080098c6 <memset>:
 80098c6:	4603      	mov	r3, r0
 80098c8:	4402      	add	r2, r0
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d100      	bne.n	80098d0 <memset+0xa>
 80098ce:	4770      	bx	lr
 80098d0:	f803 1b01 	strb.w	r1, [r3], #1
 80098d4:	e7f9      	b.n	80098ca <memset+0x4>

080098d6 <strncpy>:
 80098d6:	b570      	push	{r4, r5, r6, lr}
 80098d8:	4604      	mov	r4, r0
 80098da:	3901      	subs	r1, #1
 80098dc:	b902      	cbnz	r2, 80098e0 <strncpy+0xa>
 80098de:	bd70      	pop	{r4, r5, r6, pc}
 80098e0:	4623      	mov	r3, r4
 80098e2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80098e6:	1e56      	subs	r6, r2, #1
 80098e8:	f803 5b01 	strb.w	r5, [r3], #1
 80098ec:	b92d      	cbnz	r5, 80098fa <strncpy+0x24>
 80098ee:	4414      	add	r4, r2
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d0f4      	beq.n	80098de <strncpy+0x8>
 80098f4:	f803 5b01 	strb.w	r5, [r3], #1
 80098f8:	e7fa      	b.n	80098f0 <strncpy+0x1a>
 80098fa:	461c      	mov	r4, r3
 80098fc:	4632      	mov	r2, r6
 80098fe:	e7ed      	b.n	80098dc <strncpy+0x6>

08009900 <_init>:
 8009900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009902:	bf00      	nop
 8009904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009906:	bc08      	pop	{r3}
 8009908:	469e      	mov	lr, r3
 800990a:	4770      	bx	lr

0800990c <_fini>:
 800990c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990e:	bf00      	nop
 8009910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009912:	bc08      	pop	{r3}
 8009914:	469e      	mov	lr, r3
 8009916:	4770      	bx	lr
