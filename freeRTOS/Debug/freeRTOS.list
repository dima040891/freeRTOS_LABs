
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000968c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800979c  0800979c  0001979c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009884  08009884  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009884  08009884  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009884  08009884  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009884  08009884  00019884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009888  08009888  00019888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800988c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023e0  20000180  08009a0c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002560  08009a0c  00022560  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e000  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fbd  00000000  00000000  0003e1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001210  00000000  00000000  00042168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001038  00000000  00000000  00043378  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b716  00000000  00000000  000443b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134c6  00000000  00000000  0005fac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e46f  00000000  00000000  00072f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001013fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047a0  00000000  00000000  00101478  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08009784 	.word	0x08009784

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08009784 	.word	0x08009784

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <PCB_Init>:

//#include "FreeRTOS.h"
//#include "task.h"

void PCB_Init()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016a:	4802      	ldr	r0, [pc, #8]	; (8000174 <PCB_Init+0x14>)
 800016c:	f000 fcc6 	bl	8000afc <HAL_GPIO_WritePin>
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}
 8000174:	40011000 	.word	0x40011000

08000178 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800017c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000180:	4802      	ldr	r0, [pc, #8]	; (800018c <PCB_LED_Toggle+0x14>)
 8000182:	f000 fcd3 	bl	8000b2c <HAL_GPIO_TogglePin>
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40011000 	.word	0x40011000

08000190 <freeRTOS_Tasks_Ini>:
uint16_t Delay_LED; // Задержка (1/2 периода) мигания LED. В данном случае период тика ОС 1 мс.
const uint16_t *pDelay_LED; // Указатель на Delay_LED для передачи как параметра задачи. const обеспечивает запись во flash (не в стеке). В оригинальном примере
// еще добавлен static

void freeRTOS_Tasks_Ini (void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af02      	add	r7, sp, #8

	xTaskCreate(vTask_USB_Init, "Task_USB_Init", 400, NULL, 2, NULL);
 8000196:	2300      	movs	r3, #0
 8000198:	9301      	str	r3, [sp, #4]
 800019a:	2302      	movs	r3, #2
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2300      	movs	r3, #0
 80001a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80001a4:	490c      	ldr	r1, [pc, #48]	; (80001d8 <freeRTOS_Tasks_Ini+0x48>)
 80001a6:	480d      	ldr	r0, [pc, #52]	; (80001dc <freeRTOS_Tasks_Ini+0x4c>)
 80001a8:	f007 f85b 	bl	8007262 <xTaskCreate>

	Delay_LED = 500;
 80001ac:	4b0c      	ldr	r3, [pc, #48]	; (80001e0 <freeRTOS_Tasks_Ini+0x50>)
 80001ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001b2:	801a      	strh	r2, [r3, #0]
	pDelay_LED = &Delay_LED;
 80001b4:	4b0b      	ldr	r3, [pc, #44]	; (80001e4 <freeRTOS_Tasks_Ini+0x54>)
 80001b6:	4a0a      	ldr	r2, [pc, #40]	; (80001e0 <freeRTOS_Tasks_Ini+0x50>)
 80001b8:	601a      	str	r2, [r3, #0]

	xTaskCreate(vTask_PCB_LED_Toggle, "Task_PCB_LED_Toggle", 40, (void*) pDelay_LED, 1, NULL); // Задача минания LED
 80001ba:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <freeRTOS_Tasks_Ini+0x54>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	2300      	movs	r3, #0
 80001c0:	9301      	str	r3, [sp, #4]
 80001c2:	2301      	movs	r3, #1
 80001c4:	9300      	str	r3, [sp, #0]
 80001c6:	4613      	mov	r3, r2
 80001c8:	2228      	movs	r2, #40	; 0x28
 80001ca:	4907      	ldr	r1, [pc, #28]	; (80001e8 <freeRTOS_Tasks_Ini+0x58>)
 80001cc:	4807      	ldr	r0, [pc, #28]	; (80001ec <freeRTOS_Tasks_Ini+0x5c>)
 80001ce:	f007 f848 	bl	8007262 <xTaskCreate>

}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	0800979c 	.word	0x0800979c
 80001dc:	080001f1 	.word	0x080001f1
 80001e0:	20001ccc 	.word	0x20001ccc
 80001e4:	20001cc8 	.word	0x20001cc8
 80001e8:	080097ac 	.word	0x080097ac
 80001ec:	08000249 	.word	0x08000249

080001f0 <vTask_USB_Init>:



void vTask_USB_Init(void *pvParameters)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]

	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f8:	f107 0308 	add.w	r3, r7, #8
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	605a      	str	r2, [r3, #4]
 8000202:	609a      	str	r2, [r3, #8]
 8000204:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800020a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020c:	2301      	movs	r3, #1
 800020e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000210:	2300      	movs	r3, #0
 8000212:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000214:	2302      	movs	r3, #2
 8000216:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000218:	f107 0308 	add.w	r3, r7, #8
 800021c:	4619      	mov	r1, r3
 800021e:	4809      	ldr	r0, [pc, #36]	; (8000244 <vTask_USB_Init+0x54>)
 8000220:	f000 fb12 	bl	8000848 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800022a:	4806      	ldr	r0, [pc, #24]	; (8000244 <vTask_USB_Init+0x54>)
 800022c:	f000 fc66 	bl	8000afc <HAL_GPIO_WritePin>

	  vTaskDelay(2000);
 8000230:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000234:	f007 f9c2 	bl	80075bc <vTaskDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 8000238:	f008 fdd0 	bl	8008ddc <MX_USB_DEVICE_Init>

	for(;;)
	{
		vTaskDelete(NULL);
 800023c:	2000      	movs	r0, #0
 800023e:	f007 f94b 	bl	80074d8 <vTaskDelete>
 8000242:	e7fb      	b.n	800023c <vTask_USB_Init+0x4c>
 8000244:	40010800 	.word	0x40010800

08000248 <vTask_PCB_LED_Toggle>:


}

void vTask_PCB_LED_Toggle(void *pvParameters)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]

	uint16_t *pDelay_LED = (uint16_t*) pvParameters; // Получение параметра с привденем к иходному типу данных - uint16_t
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
	PCB_LED_Toggle();
 8000254:	f7ff ff90 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(*pDelay_LED); // Разыменование т.е. передача значения
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	4618      	mov	r0, r3
 800025e:	f007 f9ad 	bl	80075bc <vTaskDelay>
	PCB_LED_Toggle();
 8000262:	f7ff ff89 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(*(uint16_t*)pvParameters); // Можно и без промежуточных переменных, привести pvParameters к указателю uint16_t "(uint16_t*)pvParameters", а затем разименовать
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	4618      	mov	r0, r3
 800026c:	f007 f9a6 	bl	80075bc <vTaskDelay>
	PCB_LED_Toggle();
 8000270:	e7f0      	b.n	8000254 <vTask_PCB_LED_Toggle+0xc>
	...

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 f976 	bl	8000568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f816 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000280:	f000 f86e 	bl	8000360 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000284:	f006 f8a0 	bl	80063c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000288:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <main+0x2c>)
 800028a:	2100      	movs	r1, #0
 800028c:	4805      	ldr	r0, [pc, #20]	; (80002a4 <main+0x30>)
 800028e:	f006 f901 	bl	8006494 <osThreadNew>
 8000292:	4602      	mov	r2, r0
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <main+0x34>)
 8000296:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000298:	f006 f8c8 	bl	800642c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	e7fe      	b.n	800029c <main+0x28>
 800029e:	bf00      	nop
 80002a0:	08009850 	.word	0x08009850
 80002a4:	080003f9 	.word	0x080003f9
 80002a8:	20001cd0 	.word	0x20001cd0

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b094      	sub	sp, #80	; 0x50
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b6:	2228      	movs	r2, #40	; 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f009 fa59 	bl	8009772 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002dc:	2301      	movs	r3, #1
 80002de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ea:	2301      	movs	r3, #1
 80002ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ee:	2302      	movs	r3, #2
 80002f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000302:	4618      	mov	r0, r3
 8000304:	f001 ffae 	bl	8002264 <HAL_RCC_OscConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800030e:	f000 f897 	bl	8000440 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	230f      	movs	r3, #15
 8000314:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000316:	2302      	movs	r3, #2
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000322:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	2102      	movs	r1, #2
 800032e:	4618      	mov	r0, r3
 8000330:	f002 fa18 	bl	8002764 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800033a:	f000 f881 	bl	8000440 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800033e:	2310      	movs	r3, #16
 8000340:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000342:	2300      	movs	r3, #0
 8000344:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	4618      	mov	r0, r3
 800034a:	f002 fb75 	bl	8002a38 <HAL_RCCEx_PeriphCLKConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000354:	f000 f874 	bl	8000440 <Error_Handler>
  }
}
 8000358:	bf00      	nop
 800035a:	3750      	adds	r7, #80	; 0x50
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <MX_GPIO_Init+0x90>)
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0310 	and.w	r3, r3, #16
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a17      	ldr	r2, [pc, #92]	; (80003f0 <MX_GPIO_Init+0x90>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <MX_GPIO_Init+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0320 	and.w	r3, r3, #32
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <MX_GPIO_Init+0x90>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a11      	ldr	r2, [pc, #68]	; (80003f0 <MX_GPIO_Init+0x90>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <MX_GPIO_Init+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c2:	480c      	ldr	r0, [pc, #48]	; (80003f4 <MX_GPIO_Init+0x94>)
 80003c4:	f000 fb9a 	bl	8000afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ce:	2301      	movs	r3, #1
 80003d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d6:	2302      	movs	r3, #2
 80003d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	4619      	mov	r1, r3
 80003e0:	4804      	ldr	r0, [pc, #16]	; (80003f4 <MX_GPIO_Init+0x94>)
 80003e2:	f000 fa31 	bl	8000848 <HAL_GPIO_Init>

}
 80003e6:	bf00      	nop
 80003e8:	3720      	adds	r7, #32
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40011000 	.word	0x40011000

080003f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003f8:	b590      	push	{r4, r7, lr}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */

	sprintf(USB_Tx_Buf, "Hi from VCP\r\n");
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <StartDefaultTask+0x40>)
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <StartDefaultTask+0x44>)
 8000404:	4614      	mov	r4, r2
 8000406:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000408:	6020      	str	r0, [r4, #0]
 800040a:	6061      	str	r1, [r4, #4]
 800040c:	60a2      	str	r2, [r4, #8]
 800040e:	881b      	ldrh	r3, [r3, #0]
 8000410:	81a3      	strh	r3, [r4, #12]



  PCB_Init();
 8000412:	f7ff fea5 	bl	8000160 <PCB_Init>
  freeRTOS_Tasks_Ini();
 8000416:	f7ff febb 	bl	8000190 <freeRTOS_Tasks_Ini>

  /* Infinite loop */
  for(;;)
  {
//	  PCB_LED_Toggle();
	  CDC_Transmit_FS((unsigned char*)USB_Tx_Buf, strlen(USB_Tx_Buf));
 800041a:	4807      	ldr	r0, [pc, #28]	; (8000438 <StartDefaultTask+0x40>)
 800041c:	f7ff fe98 	bl	8000150 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29b      	uxth	r3, r3
 8000424:	4619      	mov	r1, r3
 8000426:	4804      	ldr	r0, [pc, #16]	; (8000438 <StartDefaultTask+0x40>)
 8000428:	f008 fd96 	bl	8008f58 <CDC_Transmit_FS>
	  osDelay(500);
 800042c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000430:	f006 f8da 	bl	80065e8 <osDelay>
	  CDC_Transmit_FS((unsigned char*)USB_Tx_Buf, strlen(USB_Tx_Buf));
 8000434:	e7f1      	b.n	800041a <StartDefaultTask+0x22>
 8000436:	bf00      	nop
 8000438:	20001cd4 	.word	0x20001cd4
 800043c:	080097cc 	.word	0x080097cc

08000440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000446:	e7fe      	b.n	8000446 <Error_Handler+0x6>

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <HAL_MspInit+0x68>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a17      	ldr	r2, [pc, #92]	; (80004b0 <HAL_MspInit+0x68>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <HAL_MspInit+0x68>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <HAL_MspInit+0x68>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <HAL_MspInit+0x68>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <HAL_MspInit+0x68>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	210f      	movs	r1, #15
 8000482:	f06f 0001 	mvn.w	r0, #1
 8000486:	f000 f9a8 	bl	80007da <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800048a:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <HAL_MspInit+0x6c>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <HAL_MspInit+0x6c>)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010000 	.word	0x40010000

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <NMI_Handler+0x4>

080004be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <HardFault_Handler+0x4>

080004c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <MemManage_Handler+0x4>

080004ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <BusFault_Handler+0x4>

080004d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <UsageFault_Handler+0x4>

080004d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e6:	f000 f885 	bl	80005f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004ea:	f007 fcd9 	bl	8007ea0 <xTaskGetSchedulerState>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d001      	beq.n	80004f8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004f4:	f008 fa20 	bl	8008938 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000502:	f000 fc5d 	bl	8000dc0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20002274 	.word	0x20002274

08000510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800051c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800051e:	e003      	b.n	8000528 <LoopCopyDataInit>

08000520 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000522:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000524:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000526:	3104      	adds	r1, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000528:	480a      	ldr	r0, [pc, #40]	; (8000554 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800052c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800052e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000530:	d3f6      	bcc.n	8000520 <CopyDataInit>
  ldr r2, =_sbss
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000534:	e002      	b.n	800053c <LoopFillZerobss>

08000536 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000538:	f842 3b04 	str.w	r3, [r2], #4

0800053c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800053e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000540:	d3f9      	bcc.n	8000536 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000542:	f7ff ffe5 	bl	8000510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000546:	f009 f8e5 	bl	8009714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054a:	f7ff fe93 	bl	8000274 <main>
  bx lr
 800054e:	4770      	bx	lr
  ldr r3, =_sidata
 8000550:	0800988c 	.word	0x0800988c
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000558:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 800055c:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8000560:	20002560 	.word	0x20002560

08000564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC1_2_IRQHandler>
	...

08000568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <HAL_Init+0x28>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_Init+0x28>)
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f923 	bl	80007c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	200f      	movs	r0, #15
 8000580:	f000 f808 	bl	8000594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000584:	f7ff ff60 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40022000 	.word	0x40022000

08000594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_InitTick+0x54>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_InitTick+0x58>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f93b 	bl	800082e <HAL_SYSTICK_Config>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005be:	2301      	movs	r3, #1
 80005c0:	e00e      	b.n	80005e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b0f      	cmp	r3, #15
 80005c6:	d80a      	bhi.n	80005de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c8:	2200      	movs	r2, #0
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	f04f 30ff 	mov.w	r0, #4294967295
 80005d0:	f000 f903 	bl	80007da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <HAL_InitTick+0x5c>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005da:	2300      	movs	r3, #0
 80005dc:	e000      	b.n	80005e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000008 	.word	0x20000008
 80005f0:	20000004 	.word	0x20000004

080005f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_IncTick+0x1c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_IncTick+0x20>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4413      	add	r3, r2
 8000604:	4a03      	ldr	r2, [pc, #12]	; (8000614 <HAL_IncTick+0x20>)
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	20000008 	.word	0x20000008
 8000614:	20001cec 	.word	0x20001cec

08000618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;
 800061c:	4b02      	ldr	r3, [pc, #8]	; (8000628 <HAL_GetTick+0x10>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	20001cec 	.word	0x20001cec

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4906      	ldr	r1, [pc, #24]	; (80006c4 <__NVIC_EnableIRQ+0x34>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db0a      	blt.n	80006f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	490c      	ldr	r1, [pc, #48]	; (8000714 <__NVIC_SetPriority+0x4c>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	0112      	lsls	r2, r2, #4
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	440b      	add	r3, r1
 80006ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f0:	e00a      	b.n	8000708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4908      	ldr	r1, [pc, #32]	; (8000718 <__NVIC_SetPriority+0x50>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 030f 	and.w	r3, r3, #15
 80006fe:	3b04      	subs	r3, #4
 8000700:	0112      	lsls	r2, r2, #4
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	440b      	add	r3, r1
 8000706:	761a      	strb	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071c:	b480      	push	{r7}
 800071e:	b089      	sub	sp, #36	; 0x24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f1c3 0307 	rsb	r3, r3, #7
 8000736:	2b04      	cmp	r3, #4
 8000738:	bf28      	it	cs
 800073a:	2304      	movcs	r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3304      	adds	r3, #4
 8000742:	2b06      	cmp	r3, #6
 8000744:	d902      	bls.n	800074c <NVIC_EncodePriority+0x30>
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3b03      	subs	r3, #3
 800074a:	e000      	b.n	800074e <NVIC_EncodePriority+0x32>
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	f04f 32ff 	mov.w	r2, #4294967295
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43da      	mvns	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	401a      	ands	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000764:	f04f 31ff 	mov.w	r1, #4294967295
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43d9      	mvns	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	4313      	orrs	r3, r2
         );
}
 8000776:	4618      	mov	r0, r3
 8000778:	3724      	adds	r7, #36	; 0x24
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000790:	d301      	bcc.n	8000796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000792:	2301      	movs	r3, #1
 8000794:	e00f      	b.n	80007b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <SysTick_Config+0x40>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800079e:	210f      	movs	r1, #15
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295
 80007a4:	f7ff ff90 	bl	80006c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <SysTick_Config+0x40>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <SysTick_Config+0x40>)
 80007b0:	2207      	movs	r2, #7
 80007b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	e000e010 	.word	0xe000e010

080007c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ff2d 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007da:	b580      	push	{r7, lr}
 80007dc:	b086      	sub	sp, #24
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ec:	f7ff ff42 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	6978      	ldr	r0, [r7, #20]
 80007f8:	f7ff ff90 	bl	800071c <NVIC_EncodePriority>
 80007fc:	4602      	mov	r2, r0
 80007fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000802:	4611      	mov	r1, r2
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff5f 	bl	80006c8 <__NVIC_SetPriority>
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff35 	bl	8000690 <__NVIC_EnableIRQ>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff ffa2 	bl	8000780 <SysTick_Config>
 800083c:	4603      	mov	r3, r0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000848:	b480      	push	{r7}
 800084a:	b08b      	sub	sp, #44	; 0x2c
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800085a:	e127      	b.n	8000aac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800085c:	2201      	movs	r2, #1
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	69fa      	ldr	r2, [r7, #28]
 800086c:	4013      	ands	r3, r2
 800086e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	429a      	cmp	r2, r3
 8000876:	f040 8116 	bne.w	8000aa6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	2b12      	cmp	r3, #18
 8000880:	d034      	beq.n	80008ec <HAL_GPIO_Init+0xa4>
 8000882:	2b12      	cmp	r3, #18
 8000884:	d80d      	bhi.n	80008a2 <HAL_GPIO_Init+0x5a>
 8000886:	2b02      	cmp	r3, #2
 8000888:	d02b      	beq.n	80008e2 <HAL_GPIO_Init+0x9a>
 800088a:	2b02      	cmp	r3, #2
 800088c:	d804      	bhi.n	8000898 <HAL_GPIO_Init+0x50>
 800088e:	2b00      	cmp	r3, #0
 8000890:	d031      	beq.n	80008f6 <HAL_GPIO_Init+0xae>
 8000892:	2b01      	cmp	r3, #1
 8000894:	d01c      	beq.n	80008d0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000896:	e048      	b.n	800092a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000898:	2b03      	cmp	r3, #3
 800089a:	d043      	beq.n	8000924 <HAL_GPIO_Init+0xdc>
 800089c:	2b11      	cmp	r3, #17
 800089e:	d01b      	beq.n	80008d8 <HAL_GPIO_Init+0x90>
          break;
 80008a0:	e043      	b.n	800092a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008a2:	4a89      	ldr	r2, [pc, #548]	; (8000ac8 <HAL_GPIO_Init+0x280>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d026      	beq.n	80008f6 <HAL_GPIO_Init+0xae>
 80008a8:	4a87      	ldr	r2, [pc, #540]	; (8000ac8 <HAL_GPIO_Init+0x280>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d806      	bhi.n	80008bc <HAL_GPIO_Init+0x74>
 80008ae:	4a87      	ldr	r2, [pc, #540]	; (8000acc <HAL_GPIO_Init+0x284>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d020      	beq.n	80008f6 <HAL_GPIO_Init+0xae>
 80008b4:	4a86      	ldr	r2, [pc, #536]	; (8000ad0 <HAL_GPIO_Init+0x288>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d01d      	beq.n	80008f6 <HAL_GPIO_Init+0xae>
          break;
 80008ba:	e036      	b.n	800092a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008bc:	4a85      	ldr	r2, [pc, #532]	; (8000ad4 <HAL_GPIO_Init+0x28c>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d019      	beq.n	80008f6 <HAL_GPIO_Init+0xae>
 80008c2:	4a85      	ldr	r2, [pc, #532]	; (8000ad8 <HAL_GPIO_Init+0x290>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d016      	beq.n	80008f6 <HAL_GPIO_Init+0xae>
 80008c8:	4a84      	ldr	r2, [pc, #528]	; (8000adc <HAL_GPIO_Init+0x294>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d013      	beq.n	80008f6 <HAL_GPIO_Init+0xae>
          break;
 80008ce:	e02c      	b.n	800092a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	623b      	str	r3, [r7, #32]
          break;
 80008d6:	e028      	b.n	800092a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	3304      	adds	r3, #4
 80008de:	623b      	str	r3, [r7, #32]
          break;
 80008e0:	e023      	b.n	800092a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	3308      	adds	r3, #8
 80008e8:	623b      	str	r3, [r7, #32]
          break;
 80008ea:	e01e      	b.n	800092a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	330c      	adds	r3, #12
 80008f2:	623b      	str	r3, [r7, #32]
          break;
 80008f4:	e019      	b.n	800092a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d102      	bne.n	8000904 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008fe:	2304      	movs	r3, #4
 8000900:	623b      	str	r3, [r7, #32]
          break;
 8000902:	e012      	b.n	800092a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d105      	bne.n	8000918 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800090c:	2308      	movs	r3, #8
 800090e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	611a      	str	r2, [r3, #16]
          break;
 8000916:	e008      	b.n	800092a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000918:	2308      	movs	r3, #8
 800091a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	615a      	str	r2, [r3, #20]
          break;
 8000922:	e002      	b.n	800092a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
          break;
 8000928:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	2bff      	cmp	r3, #255	; 0xff
 800092e:	d801      	bhi.n	8000934 <HAL_GPIO_Init+0xec>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	e001      	b.n	8000938 <HAL_GPIO_Init+0xf0>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3304      	adds	r3, #4
 8000938:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	2bff      	cmp	r3, #255	; 0xff
 800093e:	d802      	bhi.n	8000946 <HAL_GPIO_Init+0xfe>
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	e002      	b.n	800094c <HAL_GPIO_Init+0x104>
 8000946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000948:	3b08      	subs	r3, #8
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	210f      	movs	r1, #15
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	401a      	ands	r2, r3
 800095e:	6a39      	ldr	r1, [r7, #32]
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	431a      	orrs	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000974:	2b00      	cmp	r3, #0
 8000976:	f000 8096 	beq.w	8000aa6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800097a:	4b59      	ldr	r3, [pc, #356]	; (8000ae0 <HAL_GPIO_Init+0x298>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	4a58      	ldr	r2, [pc, #352]	; (8000ae0 <HAL_GPIO_Init+0x298>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6193      	str	r3, [r2, #24]
 8000986:	4b56      	ldr	r3, [pc, #344]	; (8000ae0 <HAL_GPIO_Init+0x298>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000992:	4a54      	ldr	r2, [pc, #336]	; (8000ae4 <HAL_GPIO_Init+0x29c>)
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	3302      	adds	r3, #2
 800099a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	f003 0303 	and.w	r3, r3, #3
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	220f      	movs	r2, #15
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	4013      	ands	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a4b      	ldr	r2, [pc, #300]	; (8000ae8 <HAL_GPIO_Init+0x2a0>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d013      	beq.n	80009e6 <HAL_GPIO_Init+0x19e>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a4a      	ldr	r2, [pc, #296]	; (8000aec <HAL_GPIO_Init+0x2a4>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d00d      	beq.n	80009e2 <HAL_GPIO_Init+0x19a>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a49      	ldr	r2, [pc, #292]	; (8000af0 <HAL_GPIO_Init+0x2a8>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d007      	beq.n	80009de <HAL_GPIO_Init+0x196>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a48      	ldr	r2, [pc, #288]	; (8000af4 <HAL_GPIO_Init+0x2ac>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_GPIO_Init+0x192>
 80009d6:	2303      	movs	r3, #3
 80009d8:	e006      	b.n	80009e8 <HAL_GPIO_Init+0x1a0>
 80009da:	2304      	movs	r3, #4
 80009dc:	e004      	b.n	80009e8 <HAL_GPIO_Init+0x1a0>
 80009de:	2302      	movs	r3, #2
 80009e0:	e002      	b.n	80009e8 <HAL_GPIO_Init+0x1a0>
 80009e2:	2301      	movs	r3, #1
 80009e4:	e000      	b.n	80009e8 <HAL_GPIO_Init+0x1a0>
 80009e6:	2300      	movs	r3, #0
 80009e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ea:	f002 0203 	and.w	r2, r2, #3
 80009ee:	0092      	lsls	r2, r2, #2
 80009f0:	4093      	lsls	r3, r2
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009f8:	493a      	ldr	r1, [pc, #232]	; (8000ae4 <HAL_GPIO_Init+0x29c>)
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	3302      	adds	r3, #2
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d006      	beq.n	8000a20 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a12:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4938      	ldr	r1, [pc, #224]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	600b      	str	r3, [r1, #0]
 8000a1e:	e006      	b.n	8000a2e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a20:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	4933      	ldr	r1, [pc, #204]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d006      	beq.n	8000a48 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a3a:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	492e      	ldr	r1, [pc, #184]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	604b      	str	r3, [r1, #4]
 8000a46:	e006      	b.n	8000a56 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a48:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	4929      	ldr	r1, [pc, #164]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a52:	4013      	ands	r3, r2
 8000a54:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d006      	beq.n	8000a70 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	4924      	ldr	r1, [pc, #144]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	608b      	str	r3, [r1, #8]
 8000a6e:	e006      	b.n	8000a7e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	43db      	mvns	r3, r3
 8000a78:	491f      	ldr	r1, [pc, #124]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d006      	beq.n	8000a98 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a8c:	68da      	ldr	r2, [r3, #12]
 8000a8e:	491a      	ldr	r1, [pc, #104]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	60cb      	str	r3, [r1, #12]
 8000a96:	e006      	b.n	8000aa6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	4915      	ldr	r1, [pc, #84]	; (8000af8 <HAL_GPIO_Init+0x2b0>)
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f47f aed0 	bne.w	800085c <HAL_GPIO_Init+0x14>
  }
}
 8000abc:	bf00      	nop
 8000abe:	372c      	adds	r7, #44	; 0x2c
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	10210000 	.word	0x10210000
 8000acc:	10110000 	.word	0x10110000
 8000ad0:	10120000 	.word	0x10120000
 8000ad4:	10310000 	.word	0x10310000
 8000ad8:	10320000 	.word	0x10320000
 8000adc:	10220000 	.word	0x10220000
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010000 	.word	0x40010000
 8000ae8:	40010800 	.word	0x40010800
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	40011000 	.word	0x40011000
 8000af4:	40011400 	.word	0x40011400
 8000af8:	40010400 	.word	0x40010400

08000afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	807b      	strh	r3, [r7, #2]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b0c:	787b      	ldrb	r3, [r7, #1]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b12:	887a      	ldrh	r2, [r7, #2]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b18:	e003      	b.n	8000b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	041a      	lsls	r2, r3, #16
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	611a      	str	r2, [r3, #16]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4013      	ands	r3, r2
 8000b44:	041a      	lsls	r2, r3, #16
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43d9      	mvns	r1, r3
 8000b4a:	887b      	ldrh	r3, [r7, #2]
 8000b4c:	400b      	ands	r3, r1
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	611a      	str	r2, [r3, #16]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b60:	b08b      	sub	sp, #44	; 0x2c
 8000b62:	af06      	add	r7, sp, #24
 8000b64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e0fd      	b.n	8000d6c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d106      	bne.n	8000b8a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f008 fb1b 	bl	80091c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 f82a 	bl	8002bf0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	687e      	ldr	r6, [r7, #4]
 8000ba4:	466d      	mov	r5, sp
 8000ba6:	f106 0410 	add.w	r4, r6, #16
 8000baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	602b      	str	r3, [r5, #0]
 8000bb2:	1d33      	adds	r3, r6, #4
 8000bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bb6:	6838      	ldr	r0, [r7, #0]
 8000bb8:	f001 fff4 	bl	8002ba4 <USB_CoreInit>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d005      	beq.n	8000bce <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e0ce      	b.n	8000d6c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 f825 	bl	8002c24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
 8000bde:	e04c      	b.n	8000c7a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	1c5a      	adds	r2, r3, #1
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	440b      	add	r3, r1
 8000c06:	7bfa      	ldrb	r2, [r7, #15]
 8000c08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c0a:	7bfa      	ldrb	r2, [r7, #15]
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	b298      	uxth	r0, r3
 8000c10:	6879      	ldr	r1, [r7, #4]
 8000c12:	4613      	mov	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	440b      	add	r3, r1
 8000c1c:	3336      	adds	r3, #54	; 0x36
 8000c1e:	4602      	mov	r2, r0
 8000c20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	4613      	mov	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	440b      	add	r3, r1
 8000c32:	3303      	adds	r3, #3
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	440b      	add	r3, r1
 8000c46:	3338      	adds	r3, #56	; 0x38
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	4613      	mov	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	440b      	add	r3, r1
 8000c5a:	333c      	adds	r3, #60	; 0x3c
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	440b      	add	r3, r1
 8000c6e:	3340      	adds	r3, #64	; 0x40
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	3301      	adds	r3, #1
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	7bfa      	ldrb	r2, [r7, #15]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d3ad      	bcc.n	8000be0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e044      	b.n	8000d14 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	440b      	add	r3, r1
 8000c98:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ca0:	7bfa      	ldrb	r2, [r7, #15]
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000cb2:	7bfa      	ldrb	r2, [r7, #15]
 8000cb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ccc:	7bfa      	ldrb	r2, [r7, #15]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	440b      	add	r3, r1
 8000cda:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ce2:	7bfa      	ldrb	r2, [r7, #15]
 8000ce4:	6879      	ldr	r1, [r7, #4]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	440b      	add	r3, r1
 8000cf0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cf8:	7bfa      	ldrb	r2, [r7, #15]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	3301      	adds	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	7bfa      	ldrb	r2, [r7, #15]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d3b5      	bcc.n	8000c8a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	687e      	ldr	r6, [r7, #4]
 8000d26:	466d      	mov	r5, sp
 8000d28:	f106 0410 	add.w	r4, r6, #16
 8000d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	602b      	str	r3, [r5, #0]
 8000d34:	1d33      	adds	r3, r6, #4
 8000d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d38:	6838      	ldr	r0, [r7, #0]
 8000d3a:	f001 ff7f 	bl	8002c3c <USB_DevInit>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d005      	beq.n	8000d50 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2202      	movs	r2, #2
 8000d48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e00d      	b.n	8000d6c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 ff19 	bl	8004b9c <USB_DevDisconnect>

  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d101      	bne.n	8000d8a <HAL_PCD_Start+0x16>
 8000d86:	2302      	movs	r3, #2
 8000d88:	e016      	b.n	8000db8 <HAL_PCD_Start+0x44>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 ff14 	bl	8002bc4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f008 fc81 	bl	80096a6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 feed 	bl	8004b88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 feef 	bl	8004bb0 <USB_ReadInterrupts>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ddc:	d102      	bne.n	8000de4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 fb61 	bl	80014a6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 fee1 	bl	8004bb0 <USB_ReadInterrupts>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000df8:	d112      	bne.n	8000e20 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e0c:	b292      	uxth	r2, r2
 8000e0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f008 fa4f 	bl	80092b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f000 f925 	bl	800106a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 fec3 	bl	8004bb0 <USB_ReadInterrupts>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e34:	d10b      	bne.n	8000e4e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e48:	b292      	uxth	r2, r2
 8000e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 feac 	bl	8004bb0 <USB_ReadInterrupts>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e62:	d10b      	bne.n	8000e7c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e76:	b292      	uxth	r2, r2
 8000e78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 fe95 	bl	8004bb0 <USB_ReadInterrupts>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e90:	d126      	bne.n	8000ee0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0204 	bic.w	r2, r2, #4
 8000ea4:	b292      	uxth	r2, r2
 8000ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0208 	bic.w	r2, r2, #8
 8000ebc:	b292      	uxth	r2, r2
 8000ebe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f008 fa30 	bl	8009328 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000eda:	b292      	uxth	r2, r2
 8000edc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 fe63 	bl	8004bb0 <USB_ReadInterrupts>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ef4:	f040 8084 	bne.w	8001000 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	77fb      	strb	r3, [r7, #31]
 8000efc:	e011      	b.n	8000f22 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	7ffb      	ldrb	r3, [r7, #31]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	441a      	add	r2, r3
 8000f0a:	7ffb      	ldrb	r3, [r7, #31]
 8000f0c:	8812      	ldrh	r2, [r2, #0]
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	f107 0120 	add.w	r1, r7, #32
 8000f16:	440b      	add	r3, r1
 8000f18:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000f1c:	7ffb      	ldrb	r3, [r7, #31]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	77fb      	strb	r3, [r7, #31]
 8000f22:	7ffb      	ldrb	r3, [r7, #31]
 8000f24:	2b07      	cmp	r3, #7
 8000f26:	d9ea      	bls.n	8000efe <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0201 	orr.w	r2, r2, #1
 8000f3a:	b292      	uxth	r2, r2
 8000f3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0201 	bic.w	r2, r2, #1
 8000f52:	b292      	uxth	r2, r2
 8000f54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000f58:	bf00      	nop
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f6      	beq.n	8000f5a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	77fb      	strb	r3, [r7, #31]
 8000f88:	e010      	b.n	8000fac <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000f8a:	7ffb      	ldrb	r3, [r7, #31]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	4611      	mov	r1, r2
 8000f92:	7ffa      	ldrb	r2, [r7, #31]
 8000f94:	0092      	lsls	r2, r2, #2
 8000f96:	440a      	add	r2, r1
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	f107 0120 	add.w	r1, r7, #32
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000fa4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000fa6:	7ffb      	ldrb	r3, [r7, #31]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	77fb      	strb	r3, [r7, #31]
 8000fac:	7ffb      	ldrb	r3, [r7, #31]
 8000fae:	2b07      	cmp	r3, #7
 8000fb0:	d9eb      	bls.n	8000f8a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f042 0208 	orr.w	r2, r2, #8
 8000fc4:	b292      	uxth	r2, r2
 8000fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f042 0204 	orr.w	r2, r2, #4
 8000ff4:	b292      	uxth	r2, r2
 8000ff6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f008 f97a 	bl	80092f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f003 fdd3 	bl	8004bb0 <USB_ReadInterrupts>
 800100a:	4603      	mov	r3, r0
 800100c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001014:	d10e      	bne.n	8001034 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800101e:	b29a      	uxth	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001028:	b292      	uxth	r2, r2
 800102a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f008 f933 	bl	800929a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f003 fdb9 	bl	8004bb0 <USB_ReadInterrupts>
 800103e:	4603      	mov	r3, r0
 8001040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001048:	d10b      	bne.n	8001062 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001052:	b29a      	uxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800105c:	b292      	uxth	r2, r2
 800105e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001062:	bf00      	nop
 8001064:	3720      	adds	r7, #32
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <HAL_PCD_SetAddress+0x1a>
 8001080:	2302      	movs	r3, #2
 8001082:	e013      	b.n	80010ac <HAL_PCD_SetAddress+0x42>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	78fa      	ldrb	r2, [r7, #3]
 8001090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	78fa      	ldrb	r2, [r7, #3]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f003 fd60 	bl	8004b62 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	70fb      	strb	r3, [r7, #3]
 80010c6:	460b      	mov	r3, r1
 80010c8:	803b      	strh	r3, [r7, #0]
 80010ca:	4613      	mov	r3, r2
 80010cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	da0e      	bge.n	80010f8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2201      	movs	r2, #1
 80010f4:	705a      	strb	r2, [r3, #1]
 80010f6:	e00e      	b.n	8001116 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	f003 0207 	and.w	r2, r3, #7
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	b2da      	uxtb	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001122:	883a      	ldrh	r2, [r7, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	78ba      	ldrb	r2, [r7, #2]
 800112c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d004      	beq.n	8001140 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b29a      	uxth	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001140:	78bb      	ldrb	r3, [r7, #2]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d102      	bne.n	800114c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <HAL_PCD_EP_Open+0xa6>
 8001156:	2302      	movs	r3, #2
 8001158:	e00e      	b.n	8001178 <HAL_PCD_EP_Open+0xc4>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68f9      	ldr	r1, [r7, #12]
 8001168:	4618      	mov	r0, r3
 800116a:	f001 fd87 	bl	8002c7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001176:	7afb      	ldrb	r3, [r7, #11]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800118c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001190:	2b00      	cmp	r3, #0
 8001192:	da0e      	bge.n	80011b2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2201      	movs	r2, #1
 80011ae:	705a      	strb	r2, [r3, #1]
 80011b0:	e00e      	b.n	80011d0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	f003 0207 	and.w	r2, r3, #7
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_PCD_EP_Close+0x6a>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e00e      	b.n	8001208 <HAL_PCD_EP_Close+0x88>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68f9      	ldr	r1, [r7, #12]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 f8a9 	bl	8003350 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	460b      	mov	r3, r1
 800121e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	f003 0207 	and.w	r2, r3, #7
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	4413      	add	r3, r2
 8001236:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2200      	movs	r2, #0
 800124e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	b2da      	uxtb	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	2b00      	cmp	r3, #0
 8001264:	d106      	bne.n	8001274 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6979      	ldr	r1, [r7, #20]
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fa5b 	bl	8003728 <USB_EPStartXfer>
 8001272:	e005      	b.n	8001280 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6979      	ldr	r1, [r7, #20]
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fa54 	bl	8003728 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	f003 0207 	and.w	r2, r3, #7
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	440b      	add	r3, r1
 80012a8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80012ac:	681b      	ldr	r3, [r3, #0]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	460b      	mov	r3, r1
 80012c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012c8:	7afb      	ldrb	r3, [r7, #11]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2201      	movs	r2, #1
 8001302:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001304:	7afb      	ldrb	r3, [r7, #11]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	b2da      	uxtb	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001310:	7afb      	ldrb	r3, [r7, #11]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	2b00      	cmp	r3, #0
 8001318:	d106      	bne.n	8001328 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6979      	ldr	r1, [r7, #20]
 8001320:	4618      	mov	r0, r3
 8001322:	f002 fa01 	bl	8003728 <USB_EPStartXfer>
 8001326:	e005      	b.n	8001334 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6979      	ldr	r1, [r7, #20]
 800132e:	4618      	mov	r0, r3
 8001330:	f002 f9fa 	bl	8003728 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	f003 0207 	and.w	r2, r3, #7
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	d901      	bls.n	800135c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e04c      	b.n	80013f6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800135c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001360:	2b00      	cmp	r3, #0
 8001362:	da0e      	bge.n	8001382 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2201      	movs	r2, #1
 800137e:	705a      	strb	r2, [r3, #1]
 8001380:	e00c      	b.n	800139c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001382:	78fa      	ldrb	r2, [r7, #3]
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2200      	movs	r2, #0
 800139a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2201      	movs	r2, #1
 80013a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_PCD_EP_SetStall+0x7e>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e01c      	b.n	80013f6 <HAL_PCD_EP_SetStall+0xb8>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68f9      	ldr	r1, [r7, #12]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 facc 	bl	8004968 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d108      	bne.n	80013ec <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80013e4:	4619      	mov	r1, r3
 80013e6:	4610      	mov	r0, r2
 80013e8:	f003 fbf1 	bl	8004bce <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	f003 020f 	and.w	r2, r3, #15
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	d901      	bls.n	800141c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e040      	b.n	800149e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800141c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001420:	2b00      	cmp	r3, #0
 8001422:	da0e      	bge.n	8001442 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2201      	movs	r2, #1
 800143e:	705a      	strb	r2, [r3, #1]
 8001440:	e00e      	b.n	8001460 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	f003 0207 	and.w	r2, r3, #7
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	b2da      	uxtb	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_PCD_EP_ClrStall+0x82>
 800147c:	2302      	movs	r3, #2
 800147e:	e00e      	b.n	800149e <HAL_PCD_EP_ClrStall+0xa0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68f9      	ldr	r1, [r7, #12]
 800148e:	4618      	mov	r0, r3
 8001490:	f003 faba 	bl	8004a08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b08e      	sub	sp, #56	; 0x38
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80014ae:	e2df      	b.n	8001a70 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014b8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80014ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80014c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f040 8158 	bne.w	8001780 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80014d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d152      	bne.n	8001580 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80014e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ea:	81fb      	strh	r3, [r7, #14]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3328      	adds	r3, #40	; 0x28
 8001502:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800150c:	b29b      	uxth	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	3302      	adds	r3, #2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	4413      	add	r3, r2
 8001522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	695a      	ldr	r2, [r3, #20]
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	441a      	add	r2, r3
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800153e:	2100      	movs	r1, #0
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f007 fe90 	bl	8009266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 828e 	beq.w	8001a70 <PCD_EP_ISR_Handler+0x5ca>
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b00      	cmp	r3, #0
 800155a:	f040 8289 	bne.w	8001a70 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800156a:	b2da      	uxtb	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b292      	uxth	r2, r2
 8001572:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800157e:	e277      	b.n	8001a70 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001590:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001596:	2b00      	cmp	r3, #0
 8001598:	d034      	beq.n	8001604 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	3306      	adds	r3, #6
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015d8:	b29b      	uxth	r3, r3
 80015da:	f003 fb47 	bl	8004c6c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015ea:	4013      	ands	r3, r2
 80015ec:	823b      	strh	r3, [r7, #16]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	8a3a      	ldrh	r2, [r7, #16]
 80015f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015f8:	b292      	uxth	r2, r2
 80015fa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f007 fe05 	bl	800920c <HAL_PCD_SetupStageCallback>
 8001602:	e235      	b.n	8001a70 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001604:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001608:	2b00      	cmp	r3, #0
 800160a:	f280 8231 	bge.w	8001a70 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	b29a      	uxth	r2, r3
 8001616:	f640 738f 	movw	r3, #3983	; 0xf8f
 800161a:	4013      	ands	r3, r2
 800161c:	83bb      	strh	r3, [r7, #28]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	8bba      	ldrh	r2, [r7, #28]
 8001624:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001628:	b292      	uxth	r2, r2
 800162a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001634:	b29b      	uxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	3306      	adds	r3, #6
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d019      	beq.n	8001694 <PCD_EP_ISR_Handler+0x1ee>
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d015      	beq.n	8001694 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	6959      	ldr	r1, [r3, #20]
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001678:	b29b      	uxth	r3, r3
 800167a:	f003 faf7 	bl	8004c6c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	441a      	add	r2, r3
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800168c:	2100      	movs	r1, #0
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f007 fdce 	bl	8009230 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	461a      	mov	r2, r3
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4413      	add	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d112      	bne.n	80016e2 <PCD_EP_ISR_Handler+0x23c>
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	801a      	strh	r2, [r3, #0]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016da:	b29a      	uxth	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	801a      	strh	r2, [r3, #0]
 80016e0:	e02f      	b.n	8001742 <PCD_EP_ISR_Handler+0x29c>
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	2b3e      	cmp	r3, #62	; 0x3e
 80016e8:	d813      	bhi.n	8001712 <PCD_EP_ISR_Handler+0x26c>
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <PCD_EP_ISR_Handler+0x25e>
 80016fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001700:	3301      	adds	r3, #1
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
 8001704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001706:	b29b      	uxth	r3, r3
 8001708:	029b      	lsls	r3, r3, #10
 800170a:	b29a      	uxth	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	801a      	strh	r2, [r3, #0]
 8001710:	e017      	b.n	8001742 <PCD_EP_ISR_Handler+0x29c>
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <PCD_EP_ISR_Handler+0x286>
 8001726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001728:	3b01      	subs	r3, #1
 800172a:	633b      	str	r3, [r7, #48]	; 0x30
 800172c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172e:	b29b      	uxth	r3, r3
 8001730:	029b      	lsls	r3, r3, #10
 8001732:	b29b      	uxth	r3, r3
 8001734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800173c:	b29a      	uxth	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800174e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001752:	827b      	strh	r3, [r7, #18]
 8001754:	8a7b      	ldrh	r3, [r7, #18]
 8001756:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800175a:	827b      	strh	r3, [r7, #18]
 800175c:	8a7b      	ldrh	r3, [r7, #18]
 800175e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001762:	827b      	strh	r3, [r7, #18]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	8a7b      	ldrh	r3, [r7, #18]
 800176a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800176e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177a:	b29b      	uxth	r3, r3
 800177c:	8013      	strh	r3, [r2, #0]
 800177e:	e177      	b.n	8001a70 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001792:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001796:	2b00      	cmp	r3, #0
 8001798:	f280 80ea 	bge.w	8001970 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017b2:	4013      	ands	r3, r2
 80017b4:	853b      	strh	r3, [r7, #40]	; 0x28
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017ca:	b292      	uxth	r2, r2
 80017cc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80017ce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	7b1b      	ldrb	r3, [r3, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d122      	bne.n	8001832 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	3306      	adds	r3, #6
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	4413      	add	r3, r2
 800180a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001814:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001816:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 8087 	beq.w	800192c <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	6959      	ldr	r1, [r3, #20]
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	88da      	ldrh	r2, [r3, #6]
 800182a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800182c:	f003 fa1e 	bl	8004c6c <USB_ReadPMA>
 8001830:	e07c      	b.n	800192c <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	78db      	ldrb	r3, [r3, #3]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d108      	bne.n	800184c <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800183a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800183c:	461a      	mov	r2, r3
 800183e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f923 	bl	8001a8c <HAL_PCD_EP_DB_Receive>
 8001846:	4603      	mov	r3, r0
 8001848:	86fb      	strh	r3, [r7, #54]	; 0x36
 800184a:	e06f      	b.n	800192c <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
 800185e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001866:	847b      	strh	r3, [r7, #34]	; 0x22
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	441a      	add	r2, r3
 8001876:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800187c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001884:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001888:	b29b      	uxth	r3, r3
 800188a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	b29b      	uxth	r3, r3
 800189e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d021      	beq.n	80018ea <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	3302      	adds	r3, #2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018ce:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80018d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d02a      	beq.n	800192c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	6959      	ldr	r1, [r3, #20]
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	891a      	ldrh	r2, [r3, #8]
 80018e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018e4:	f003 f9c2 	bl	8004c6c <USB_ReadPMA>
 80018e8:	e020      	b.n	800192c <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	3306      	adds	r3, #6
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	4413      	add	r3, r2
 8001908:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001912:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001914:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001916:	2b00      	cmp	r3, #0
 8001918:	d008      	beq.n	800192c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	6959      	ldr	r1, [r3, #20]
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	895a      	ldrh	r2, [r3, #10]
 8001926:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001928:	f003 f9a0 	bl	8004c6c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	69da      	ldr	r2, [r3, #28]
 8001930:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001932:	441a      	add	r2, r3
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800193e:	441a      	add	r2, r3
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <PCD_EP_ISR_Handler+0x4b0>
 800194c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	429a      	cmp	r2, r3
 8001954:	d206      	bcs.n	8001964 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f007 fc67 	bl	8009230 <HAL_PCD_DataOutStageCallback>
 8001962:	e005      	b.n	8001970 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800196a:	4618      	mov	r0, r3
 800196c:	f001 fedc 	bl	8003728 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001970:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001976:	2b00      	cmp	r3, #0
 8001978:	d07a      	beq.n	8001a70 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800197a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019a8:	843b      	strh	r3, [r7, #32]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	441a      	add	r2, r3
 80019b8:	8c3b      	ldrh	r3, [r7, #32]
 80019ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	78db      	ldrb	r3, [r3, #3]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d108      	bne.n	80019e0 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d146      	bne.n	8001a64 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80019d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d141      	bne.n	8001a64 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	3302      	adds	r3, #2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a08:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	8bfb      	ldrh	r3, [r7, #30]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d906      	bls.n	8001a22 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	699a      	ldr	r2, [r3, #24]
 8001a18:	8bfb      	ldrh	r3, [r7, #30]
 8001a1a:	1ad2      	subs	r2, r2, r3
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	619a      	str	r2, [r3, #24]
 8001a20:	e002      	b.n	8001a28 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d106      	bne.n	8001a3e <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f007 fc15 	bl	8009266 <HAL_PCD_DataInStageCallback>
 8001a3c:	e018      	b.n	8001a70 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	8bfb      	ldrh	r3, [r7, #30]
 8001a44:	441a      	add	r2, r3
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	69da      	ldr	r2, [r3, #28]
 8001a4e:	8bfb      	ldrh	r3, [r7, #30]
 8001a50:	441a      	add	r2, r3
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fe63 	bl	8003728 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001a62:	e005      	b.n	8001a70 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a66:	461a      	mov	r2, r3
 8001a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f91b 	bl	8001ca6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f6ff ad17 	blt.w	80014b0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3738      	adds	r7, #56	; 0x38
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	4613      	mov	r3, r2
 8001a98:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d07e      	beq.n	8001ba2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001acc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	8b7b      	ldrh	r3, [r7, #26]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d306      	bcc.n	8001ae6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	8b7b      	ldrh	r3, [r7, #26]
 8001ade:	1ad2      	subs	r2, r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	619a      	str	r2, [r3, #24]
 8001ae4:	e002      	b.n	8001aec <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d123      	bne.n	8001b3c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b0e:	833b      	strh	r3, [r7, #24]
 8001b10:	8b3b      	ldrh	r3, [r7, #24]
 8001b12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b16:	833b      	strh	r3, [r7, #24]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	441a      	add	r2, r3
 8001b26:	8b3b      	ldrh	r3, [r7, #24]
 8001b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d01f      	beq.n	8001b86 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b60:	82fb      	strh	r3, [r7, #22]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	441a      	add	r2, r3
 8001b70:	8afb      	ldrh	r3, [r7, #22]
 8001b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b86:	8b7b      	ldrh	r3, [r7, #26]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8087 	beq.w	8001c9c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	6959      	ldr	r1, [r3, #20]
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	891a      	ldrh	r2, [r3, #8]
 8001b9a:	8b7b      	ldrh	r3, [r7, #26]
 8001b9c:	f003 f866 	bl	8004c6c <USB_ReadPMA>
 8001ba0:	e07c      	b.n	8001c9c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3306      	adds	r3, #6
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	8b7b      	ldrh	r3, [r7, #26]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d306      	bcc.n	8001be4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	8b7b      	ldrh	r3, [r7, #26]
 8001bdc:	1ad2      	subs	r2, r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	619a      	str	r2, [r3, #24]
 8001be2:	e002      	b.n	8001bea <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d123      	bne.n	8001c3a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0c:	83fb      	strh	r3, [r7, #30]
 8001c0e:	8bfb      	ldrh	r3, [r7, #30]
 8001c10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c14:	83fb      	strh	r3, [r7, #30]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	441a      	add	r2, r3
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11f      	bne.n	8001c84 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5e:	83bb      	strh	r3, [r7, #28]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	441a      	add	r2, r3
 8001c6e:	8bbb      	ldrh	r3, [r7, #28]
 8001c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c84:	8b7b      	ldrh	r3, [r7, #26]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d008      	beq.n	8001c9c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	6959      	ldr	r1, [r3, #20]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	895a      	ldrh	r2, [r3, #10]
 8001c96:	8b7b      	ldrh	r3, [r7, #26]
 8001c98:	f002 ffe8 	bl	8004c6c <USB_ReadPMA>
    }
  }

  return count;
 8001c9c:	8b7b      	ldrh	r3, [r7, #26]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3720      	adds	r7, #32
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b092      	sub	sp, #72	; 0x48
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8132 	beq.w	8001f24 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	4413      	add	r3, r2
 8001cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ce8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	699a      	ldr	r2, [r3, #24]
 8001cee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d906      	bls.n	8001d02 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	699a      	ldr	r2, [r3, #24]
 8001cf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cfa:	1ad2      	subs	r2, r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	619a      	str	r2, [r3, #24]
 8001d00:	e002      	b.n	8001d08 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d12c      	bne.n	8001d6a <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f007 faa5 	bl	8009266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 822f 	beq.w	8002186 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d42:	827b      	strh	r3, [r7, #18]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	441a      	add	r2, r3
 8001d52:	8a7b      	ldrh	r3, [r7, #18]
 8001d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	8013      	strh	r3, [r2, #0]
 8001d68:	e20d      	b.n	8002186 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01f      	beq.n	8001db4 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	441a      	add	r2, r3
 8001d9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	f040 81e3 	bne.w	8002186 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dc6:	441a      	add	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	69da      	ldr	r2, [r3, #28]
 8001dd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dd2:	441a      	add	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	6a1a      	ldr	r2, [r3, #32]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d309      	bcc.n	8001df8 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	6a1a      	ldr	r2, [r3, #32]
 8001dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df0:	1ad2      	subs	r2, r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	621a      	str	r2, [r3, #32]
 8001df6:	e014      	b.n	8001e22 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001e00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e0c:	e009      	b.n	8001e22 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d155      	bne.n	8001ed6 <HAL_PCD_EP_DB_Transmit+0x230>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	4413      	add	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	011a      	lsls	r2, r3, #4
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d112      	bne.n	8001e7e <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	801a      	strh	r2, [r3, #0]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	801a      	strh	r2, [r3, #0]
 8001e7c:	e047      	b.n	8001f0e <HAL_PCD_EP_DB_Transmit+0x268>
 8001e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e80:	2b3e      	cmp	r3, #62	; 0x3e
 8001e82:	d811      	bhi.n	8001ea8 <HAL_PCD_EP_DB_Transmit+0x202>
 8001e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e86:	085b      	lsrs	r3, r3, #1
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e96:	3301      	adds	r3, #1
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	029b      	lsls	r3, r3, #10
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	801a      	strh	r2, [r3, #0]
 8001ea6:	e032      	b.n	8001f0e <HAL_PCD_EP_DB_Transmit+0x268>
 8001ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <HAL_PCD_EP_DB_Transmit+0x218>
 8001eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	029b      	lsls	r3, r3, #10
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	801a      	strh	r2, [r3, #0]
 8001ed4:	e01b      	b.n	8001f0e <HAL_PCD_EP_DB_Transmit+0x268>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	785b      	ldrb	r3, [r3, #1]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d117      	bne.n	8001f0e <HAL_PCD_EP_DB_Transmit+0x268>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	623b      	str	r3, [r7, #32]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	011a      	lsls	r2, r3, #4
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	4413      	add	r3, r2
 8001f00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	6959      	ldr	r1, [r3, #20]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	891a      	ldrh	r2, [r3, #8]
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	f002 fe61 	bl	8004be4 <USB_WritePMA>
 8001f22:	e130      	b.n	8002186 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	3306      	adds	r3, #6
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f4c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d306      	bcc.n	8001f66 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	699a      	ldr	r2, [r3, #24]
 8001f5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	619a      	str	r2, [r3, #24]
 8001f64:	e002      	b.n	8001f6c <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d12c      	bne.n	8001fce <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f007 f973 	bl	8009266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 80fd 	bne.w	8002186 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	441a      	add	r2, r3
 8001fb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	8013      	strh	r3, [r2, #0]
 8001fcc:	e0db      	b.n	8002186 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d11f      	bne.n	8002018 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	441a      	add	r2, r3
 8002002:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800200c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002014:	b29b      	uxth	r3, r3
 8002016:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800201e:	2b01      	cmp	r3, #1
 8002020:	f040 80b1 	bne.w	8002186 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800202a:	441a      	add	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002036:	441a      	add	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	6a1a      	ldr	r2, [r3, #32]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	429a      	cmp	r2, r3
 8002046:	d309      	bcc.n	800205c <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	6a1a      	ldr	r2, [r3, #32]
 8002052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002054:	1ad2      	subs	r2, r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	621a      	str	r2, [r3, #32]
 800205a:	e014      	b.n	8002086 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d106      	bne.n	8002072 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002064:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002066:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002070:	e009      	b.n	8002086 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2200      	movs	r2, #0
 800207c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	785b      	ldrb	r3, [r3, #1]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d155      	bne.n	8002140 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	647b      	str	r3, [r7, #68]	; 0x44
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a8:	4413      	add	r3, r2
 80020aa:	647b      	str	r3, [r7, #68]	; 0x44
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	011a      	lsls	r2, r3, #4
 80020b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b4:	4413      	add	r3, r2
 80020b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020ba:	643b      	str	r3, [r7, #64]	; 0x40
 80020bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d112      	bne.n	80020e8 <HAL_PCD_EP_DB_Transmit+0x442>
 80020c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d0:	801a      	strh	r2, [r3, #0]
 80020d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e4:	801a      	strh	r2, [r3, #0]
 80020e6:	e044      	b.n	8002172 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80020e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ea:	2b3e      	cmp	r3, #62	; 0x3e
 80020ec:	d811      	bhi.n	8002112 <HAL_PCD_EP_DB_Transmit+0x46c>
 80020ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <HAL_PCD_EP_DB_Transmit+0x45e>
 80020fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002100:	3301      	adds	r3, #1
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002106:	b29b      	uxth	r3, r3
 8002108:	029b      	lsls	r3, r3, #10
 800210a:	b29a      	uxth	r2, r3
 800210c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800210e:	801a      	strh	r2, [r3, #0]
 8002110:	e02f      	b.n	8002172 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_PCD_EP_DB_Transmit+0x482>
 8002122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002124:	3b01      	subs	r3, #1
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800212a:	b29b      	uxth	r3, r3
 800212c:	029b      	lsls	r3, r3, #10
 800212e:	b29b      	uxth	r3, r3
 8002130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002138:	b29a      	uxth	r2, r3
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	801a      	strh	r2, [r3, #0]
 800213e:	e018      	b.n	8002172 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d114      	bne.n	8002172 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002150:	b29b      	uxth	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002156:	4413      	add	r3, r2
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	011a      	lsls	r2, r3, #4
 8002160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002162:	4413      	add	r3, r2
 8002164:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
 800216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216c:	b29a      	uxth	r2, r3
 800216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002170:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	6959      	ldr	r1, [r3, #20]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	895a      	ldrh	r2, [r3, #10]
 800217e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002180:	b29b      	uxth	r3, r3
 8002182:	f002 fd2f 	bl	8004be4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800219c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021a0:	823b      	strh	r3, [r7, #16]
 80021a2:	8a3b      	ldrh	r3, [r7, #16]
 80021a4:	f083 0310 	eor.w	r3, r3, #16
 80021a8:	823b      	strh	r3, [r7, #16]
 80021aa:	8a3b      	ldrh	r3, [r7, #16]
 80021ac:	f083 0320 	eor.w	r3, r3, #32
 80021b0:	823b      	strh	r3, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	441a      	add	r2, r3
 80021c0:	8a3b      	ldrh	r3, [r7, #16]
 80021c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3748      	adds	r7, #72	; 0x48
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	817b      	strh	r3, [r7, #10]
 80021ee:	4613      	mov	r3, r2
 80021f0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80021f2:	897b      	ldrh	r3, [r7, #10]
 80021f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021fe:	897b      	ldrh	r3, [r7, #10]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4413      	add	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	e009      	b.n	800222a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002216:	897a      	ldrh	r2, [r7, #10]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800222a:	893b      	ldrh	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2200      	movs	r2, #0
 8002234:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	b29a      	uxth	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	80da      	strh	r2, [r3, #6]
 800223e:	e00b      	b.n	8002258 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2201      	movs	r2, #1
 8002244:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	b29a      	uxth	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	b29a      	uxth	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e26c      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8087 	beq.w	8002392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002284:	4b92      	ldr	r3, [pc, #584]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b04      	cmp	r3, #4
 800228e:	d00c      	beq.n	80022aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002290:	4b8f      	ldr	r3, [pc, #572]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b08      	cmp	r3, #8
 800229a:	d112      	bne.n	80022c2 <HAL_RCC_OscConfig+0x5e>
 800229c:	4b8c      	ldr	r3, [pc, #560]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d10b      	bne.n	80022c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022aa:	4b89      	ldr	r3, [pc, #548]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d06c      	beq.n	8002390 <HAL_RCC_OscConfig+0x12c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d168      	bne.n	8002390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e246      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x76>
 80022cc:	4b80      	ldr	r3, [pc, #512]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a7f      	ldr	r2, [pc, #508]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e02e      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x98>
 80022e2:	4b7b      	ldr	r3, [pc, #492]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a7a      	ldr	r2, [pc, #488]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b78      	ldr	r3, [pc, #480]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a77      	ldr	r2, [pc, #476]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0xbc>
 8002306:	4b72      	ldr	r3, [pc, #456]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a71      	ldr	r2, [pc, #452]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b6f      	ldr	r3, [pc, #444]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6e      	ldr	r2, [pc, #440]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xd4>
 8002320:	4b6b      	ldr	r3, [pc, #428]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a6a      	ldr	r2, [pc, #424]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b68      	ldr	r3, [pc, #416]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a67      	ldr	r2, [pc, #412]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002336:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7fe f96a 	bl	8000618 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe f966 	bl	8000618 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1fa      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b5d      	ldr	r3, [pc, #372]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0xe4>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe f956 	bl	8000618 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe f952 	bl	8000618 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1e6      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	4b53      	ldr	r3, [pc, #332]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x10c>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d063      	beq.n	8002466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800239e:	4b4c      	ldr	r3, [pc, #304]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023aa:	4b49      	ldr	r3, [pc, #292]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d11c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x18c>
 80023b6:	4b46      	ldr	r3, [pc, #280]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d116      	bne.n	80023f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_RCC_OscConfig+0x176>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e1ba      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4939      	ldr	r1, [pc, #228]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	e03a      	b.n	8002466 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f8:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7fe f90b 	bl	8000618 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002406:	f7fe f907 	bl	8000618 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e19b      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002424:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4927      	ldr	r1, [pc, #156]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]
 8002438:	e015      	b.n	8002466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe f8ea 	bl	8000618 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002448:	f7fe f8e6 	bl	8000618 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e17a      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d03a      	beq.n	80024e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d019      	beq.n	80024ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247a:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <HAL_RCC_OscConfig+0x274>)
 800247c:	2201      	movs	r2, #1
 800247e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002480:	f7fe f8ca 	bl	8000618 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002488:	f7fe f8c6 	bl	8000618 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e15a      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_RCC_OscConfig+0x26c>)
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f000 faa8 	bl	80029fc <RCC_Delay>
 80024ac:	e01c      	b.n	80024e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <HAL_RCC_OscConfig+0x274>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b4:	f7fe f8b0 	bl	8000618 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ba:	e00f      	b.n	80024dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024bc:	f7fe f8ac 	bl	8000618 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d908      	bls.n	80024dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e140      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	42420000 	.word	0x42420000
 80024d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	4b9e      	ldr	r3, [pc, #632]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e9      	bne.n	80024bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80a6 	beq.w	8002642 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b97      	ldr	r3, [pc, #604]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10d      	bne.n	8002522 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	4b94      	ldr	r3, [pc, #592]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a93      	ldr	r2, [pc, #588]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002510:	61d3      	str	r3, [r2, #28]
 8002512:	4b91      	ldr	r3, [pc, #580]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251e:	2301      	movs	r3, #1
 8002520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	4b8e      	ldr	r3, [pc, #568]	; (800275c <HAL_RCC_OscConfig+0x4f8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d118      	bne.n	8002560 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252e:	4b8b      	ldr	r3, [pc, #556]	; (800275c <HAL_RCC_OscConfig+0x4f8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a8a      	ldr	r2, [pc, #552]	; (800275c <HAL_RCC_OscConfig+0x4f8>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253a:	f7fe f86d 	bl	8000618 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002542:	f7fe f869 	bl	8000618 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b64      	cmp	r3, #100	; 0x64
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0fd      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	4b81      	ldr	r3, [pc, #516]	; (800275c <HAL_RCC_OscConfig+0x4f8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x312>
 8002568:	4b7b      	ldr	r3, [pc, #492]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a7a      	ldr	r2, [pc, #488]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6213      	str	r3, [r2, #32]
 8002574:	e02d      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x334>
 800257e:	4b76      	ldr	r3, [pc, #472]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a75      	ldr	r2, [pc, #468]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	4b73      	ldr	r3, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a72      	ldr	r2, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	e01c      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b05      	cmp	r3, #5
 800259e:	d10c      	bne.n	80025ba <HAL_RCC_OscConfig+0x356>
 80025a0:	4b6d      	ldr	r3, [pc, #436]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4a6c      	ldr	r2, [pc, #432]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	6213      	str	r3, [r2, #32]
 80025ac:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4a69      	ldr	r2, [pc, #420]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6213      	str	r3, [r2, #32]
 80025b8:	e00b      	b.n	80025d2 <HAL_RCC_OscConfig+0x36e>
 80025ba:	4b67      	ldr	r3, [pc, #412]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a66      	ldr	r2, [pc, #408]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6213      	str	r3, [r2, #32]
 80025c6:	4b64      	ldr	r3, [pc, #400]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a63      	ldr	r2, [pc, #396]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d015      	beq.n	8002606 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025da:	f7fe f81d 	bl	8000618 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7fe f819 	bl	8000618 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0ab      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	4b57      	ldr	r3, [pc, #348]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ee      	beq.n	80025e2 <HAL_RCC_OscConfig+0x37e>
 8002604:	e014      	b.n	8002630 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002606:	f7fe f807 	bl	8000618 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7fe f803 	bl	8000618 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f241 3288 	movw	r2, #5000	; 0x1388
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e095      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002624:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ee      	bne.n	800260e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d105      	bne.n	8002642 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b48      	ldr	r3, [pc, #288]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4a47      	ldr	r2, [pc, #284]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002640:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8081 	beq.w	800274e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800264c:	4b42      	ldr	r3, [pc, #264]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b08      	cmp	r3, #8
 8002656:	d061      	beq.n	800271c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d146      	bne.n	80026ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002660:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <HAL_RCC_OscConfig+0x4fc>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fd ffd7 	bl	8000618 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7fd ffd3 	bl	8000618 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e067      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002680:	4b35      	ldr	r3, [pc, #212]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	d108      	bne.n	80026a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002696:	4b30      	ldr	r3, [pc, #192]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	492d      	ldr	r1, [pc, #180]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a8:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a19      	ldr	r1, [r3, #32]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	430b      	orrs	r3, r1
 80026ba:	4927      	ldr	r1, [pc, #156]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <HAL_RCC_OscConfig+0x4fc>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7fd ffa7 	bl	8000618 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fd ffa3 	bl	8000618 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e037      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x46a>
 80026ec:	e02f      	b.n	800274e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_RCC_OscConfig+0x4fc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fd ff90 	bl	8000618 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fd ff8c 	bl	8000618 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e020      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x498>
 800271a:	e018      	b.n	800274e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e013      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	429a      	cmp	r2, r3
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	40007000 	.word	0x40007000
 8002760:	42420060 	.word	0x42420060

08002764 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0d0      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002778:	4b6a      	ldr	r3, [pc, #424]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d910      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b67      	ldr	r3, [pc, #412]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 0207 	bic.w	r2, r3, #7
 800278e:	4965      	ldr	r1, [pc, #404]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b63      	ldr	r3, [pc, #396]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0b8      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c0:	4b59      	ldr	r3, [pc, #356]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a58      	ldr	r2, [pc, #352]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a52      	ldr	r2, [pc, #328]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e4:	4b50      	ldr	r3, [pc, #320]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	494d      	ldr	r1, [pc, #308]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d040      	beq.n	8002884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d115      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e07f      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d107      	bne.n	8002832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002822:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e073      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002832:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e06b      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f023 0203 	bic.w	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4936      	ldr	r1, [pc, #216]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002854:	f7fd fee0 	bl	8000618 <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	e00a      	b.n	8002872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285c:	f7fd fedc 	bl	8000618 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	; 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e053      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 020c 	and.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	429a      	cmp	r2, r3
 8002882:	d1eb      	bne.n	800285c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002884:	4b27      	ldr	r3, [pc, #156]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d210      	bcs.n	80028b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 0207 	bic.w	r2, r3, #7
 800289a:	4922      	ldr	r1, [pc, #136]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e032      	b.n	800291a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4916      	ldr	r1, [pc, #88]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	490e      	ldr	r1, [pc, #56]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028f2:	f000 f821 	bl	8002938 <HAL_RCC_GetSysClockFreq>
 80028f6:	4601      	mov	r1, r0
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	fa21 f303 	lsr.w	r3, r1, r3
 800290a:	4a09      	ldr	r2, [pc, #36]	; (8002930 <HAL_RCC_ClockConfig+0x1cc>)
 800290c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_RCC_ClockConfig+0x1d0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fd fe3e 	bl	8000594 <HAL_InitTick>

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40022000 	.word	0x40022000
 8002928:	40021000 	.word	0x40021000
 800292c:	08009874 	.word	0x08009874
 8002930:	20000000 	.word	0x20000000
 8002934:	20000004 	.word	0x20000004

08002938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002938:	b490      	push	{r4, r7}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002940:	1d3c      	adds	r4, r7, #4
 8002942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002948:	4b28      	ldr	r3, [pc, #160]	; (80029ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	2300      	movs	r3, #0
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002962:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b04      	cmp	r3, #4
 8002970:	d002      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x40>
 8002972:	2b08      	cmp	r3, #8
 8002974:	d003      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0x46>
 8002976:	e02d      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002978:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800297a:	623b      	str	r3, [r7, #32]
      break;
 800297c:	e02d      	b.n	80029da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	0c9b      	lsrs	r3, r3, #18
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800298a:	4413      	add	r3, r2
 800298c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002990:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	0c5b      	lsrs	r3, r3, #17
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029aa:	4413      	add	r3, r2
 80029ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029b6:	fb02 f203 	mul.w	r2, r2, r3
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
 80029c2:	e004      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	623b      	str	r3, [r7, #32]
      break;
 80029d2:	e002      	b.n	80029da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029d6:	623b      	str	r3, [r7, #32]
      break;
 80029d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029da:	6a3b      	ldr	r3, [r7, #32]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3728      	adds	r7, #40	; 0x28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc90      	pop	{r4, r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	080097dc 	.word	0x080097dc
 80029ec:	080097ec 	.word	0x080097ec
 80029f0:	40021000 	.word	0x40021000
 80029f4:	007a1200 	.word	0x007a1200
 80029f8:	003d0900 	.word	0x003d0900

080029fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <RCC_Delay+0x34>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <RCC_Delay+0x38>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	0a5b      	lsrs	r3, r3, #9
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a18:	bf00      	nop
  }
  while (Delay --);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1e5a      	subs	r2, r3, #1
 8002a1e:	60fa      	str	r2, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f9      	bne.n	8002a18 <RCC_Delay+0x1c>
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000000 	.word	0x20000000
 8002a34:	10624dd3 	.word	0x10624dd3

08002a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d07d      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a54:	2300      	movs	r3, #0
 8002a56:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a58:	4b4f      	ldr	r3, [pc, #316]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10d      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a64:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	4a4b      	ldr	r2, [pc, #300]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	61d3      	str	r3, [r2, #28]
 8002a70:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b46      	ldr	r3, [pc, #280]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d118      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8c:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a42      	ldr	r2, [pc, #264]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a98:	f7fd fdbe 	bl	8000618 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa0:	f7fd fdba 	bl	8000618 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e06d      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab2:	4b3a      	ldr	r3, [pc, #232]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002abe:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d02e      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d027      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002adc:	4b2e      	ldr	r3, [pc, #184]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ae6:	4b2e      	ldr	r3, [pc, #184]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aec:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002af2:	4a29      	ldr	r2, [pc, #164]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d014      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fd fd89 	bl	8000618 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0a:	f7fd fd85 	bl	8000618 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e036      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ee      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4917      	ldr	r1, [pc, #92]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	490b      	ldr	r1, [pc, #44]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	4904      	ldr	r1, [pc, #16]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	42420440 	.word	0x42420440

08002ba4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	f107 0014 	add.w	r0, r7, #20
 8002bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	b004      	add	sp, #16
 8002bc2:	4770      	bx	lr

08002bc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002bd4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002bd8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002bf8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002bfc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4013      	ands	r3, r2
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	f107 0014 	add.w	r0, r7, #20
 8002c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	b004      	add	sp, #16
 8002c7a:	4770      	bx	lr

08002c7c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b09b      	sub	sp, #108	; 0x6c
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	78db      	ldrb	r3, [r3, #3]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d81f      	bhi.n	8002cee <USB_ActivateEndpoint+0x72>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <USB_ActivateEndpoint+0x38>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002ce1 	.word	0x08002ce1
 8002cbc:	08002cf7 	.word	0x08002cf7
 8002cc0:	08002cd3 	.word	0x08002cd3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002cc4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ccc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002cd0:	e012      	b.n	8002cf8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002cd2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002cd6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002cda:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002cde:	e00b      	b.n	8002cf8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002ce0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ce4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ce8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002cec:	e004      	b.n	8002cf8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002cf4:	e000      	b.n	8002cf8 <USB_ActivateEndpoint+0x7c>
      break;
 8002cf6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	441a      	add	r2, r3
 8002d02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	441a      	add	r2, r3
 8002d48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	7b1b      	ldrb	r3, [r3, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f040 8149 	bne.w	8002ffc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	785b      	ldrb	r3, [r3, #1]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8084 	beq.w	8002e7c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	461a      	mov	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	4413      	add	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	011a      	lsls	r2, r3, #4
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	88db      	ldrh	r3, [r3, #6]
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	81fb      	strh	r3, [r7, #14]
 8002db6:	89fb      	ldrh	r3, [r7, #14]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01b      	beq.n	8002df8 <USB_ActivateEndpoint+0x17c>
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	81bb      	strh	r3, [r7, #12]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	441a      	add	r2, r3
 8002de2:	89bb      	ldrh	r3, [r7, #12]
 8002de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	78db      	ldrb	r3, [r3, #3]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d020      	beq.n	8002e42 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e16:	813b      	strh	r3, [r7, #8]
 8002e18:	893b      	ldrh	r3, [r7, #8]
 8002e1a:	f083 0320 	eor.w	r3, r3, #32
 8002e1e:	813b      	strh	r3, [r7, #8]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	441a      	add	r2, r3
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	8013      	strh	r3, [r2, #0]
 8002e40:	e27f      	b.n	8003342 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e58:	817b      	strh	r3, [r7, #10]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	441a      	add	r2, r3
 8002e64:	897b      	ldrh	r3, [r7, #10]
 8002e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	8013      	strh	r3, [r2, #0]
 8002e7a:	e262      	b.n	8003342 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	4413      	add	r3, r2
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	011a      	lsls	r2, r3, #4
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	88db      	ldrh	r3, [r3, #6]
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	4413      	add	r3, r2
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	011a      	lsls	r2, r3, #4
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	4413      	add	r3, r2
 8002ece:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ed2:	623b      	str	r3, [r7, #32]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d112      	bne.n	8002f02 <USB_ActivateEndpoint+0x286>
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	801a      	strh	r2, [r3, #0]
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	e02f      	b.n	8002f62 <USB_ActivateEndpoint+0x2e6>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b3e      	cmp	r3, #62	; 0x3e
 8002f08:	d813      	bhi.n	8002f32 <USB_ActivateEndpoint+0x2b6>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	663b      	str	r3, [r7, #96]	; 0x60
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <USB_ActivateEndpoint+0x2a8>
 8002f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f20:	3301      	adds	r3, #1
 8002f22:	663b      	str	r3, [r7, #96]	; 0x60
 8002f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	029b      	lsls	r3, r3, #10
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	801a      	strh	r2, [r3, #0]
 8002f30:	e017      	b.n	8002f62 <USB_ActivateEndpoint+0x2e6>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	663b      	str	r3, [r7, #96]	; 0x60
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <USB_ActivateEndpoint+0x2d0>
 8002f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	029b      	lsls	r3, r3, #10
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	83fb      	strh	r3, [r7, #30]
 8002f70:	8bfb      	ldrh	r3, [r7, #30]
 8002f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01b      	beq.n	8002fb2 <USB_ActivateEndpoint+0x336>
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f90:	83bb      	strh	r3, [r7, #28]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	441a      	add	r2, r3
 8002f9c:	8bbb      	ldrh	r3, [r7, #28]
 8002f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc8:	837b      	strh	r3, [r7, #26]
 8002fca:	8b7b      	ldrh	r3, [r7, #26]
 8002fcc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002fd0:	837b      	strh	r3, [r7, #26]
 8002fd2:	8b7b      	ldrh	r3, [r7, #26]
 8002fd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fd8:	837b      	strh	r3, [r7, #26]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	441a      	add	r2, r3
 8002fe4:	8b7b      	ldrh	r3, [r7, #26]
 8002fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	8013      	strh	r3, [r2, #0]
 8002ffa:	e1a2      	b.n	8003342 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b29b      	uxth	r3, r3
 800300a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	441a      	add	r2, r3
 8003020:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800302c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003034:	b29b      	uxth	r3, r3
 8003036:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	65bb      	str	r3, [r7, #88]	; 0x58
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003042:	b29b      	uxth	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003048:	4413      	add	r3, r2
 800304a:	65bb      	str	r3, [r7, #88]	; 0x58
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	011a      	lsls	r2, r3, #4
 8003052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003054:	4413      	add	r3, r2
 8003056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800305a:	657b      	str	r3, [r7, #84]	; 0x54
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	891b      	ldrh	r3, [r3, #8]
 8003060:	085b      	lsrs	r3, r3, #1
 8003062:	b29b      	uxth	r3, r3
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800306a:	801a      	strh	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	653b      	str	r3, [r7, #80]	; 0x50
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003076:	b29b      	uxth	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800307c:	4413      	add	r3, r2
 800307e:	653b      	str	r3, [r7, #80]	; 0x50
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	011a      	lsls	r2, r3, #4
 8003086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003088:	4413      	add	r3, r2
 800308a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800308e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	895b      	ldrh	r3, [r3, #10]
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	b29b      	uxth	r3, r3
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	785b      	ldrb	r3, [r3, #1]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f040 8091 	bne.w	80031cc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80030b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80030ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d01b      	beq.n	80030fa <USB_ActivateEndpoint+0x47e>
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	441a      	add	r2, r3
 80030e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80030e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	873b      	strh	r3, [r7, #56]	; 0x38
 8003108:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d01b      	beq.n	800314a <USB_ActivateEndpoint+0x4ce>
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	b29b      	uxth	r3, r3
 8003120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003128:	86fb      	strh	r3, [r7, #54]	; 0x36
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	441a      	add	r2, r3
 8003134:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800313a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800313e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003142:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003146:	b29b      	uxth	r3, r3
 8003148:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003162:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003164:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003168:	86bb      	strh	r3, [r7, #52]	; 0x34
 800316a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800316c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003170:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	441a      	add	r2, r3
 800317c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800317e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318e:	b29b      	uxth	r3, r3
 8003190:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	441a      	add	r2, r3
 80031b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80031b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	8013      	strh	r3, [r2, #0]
 80031ca:	e0ba      	b.n	8003342 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80031dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01d      	beq.n	8003224 <USB_ActivateEndpoint+0x5a8>
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	441a      	add	r2, r3
 800320c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003220:	b29b      	uxth	r3, r3
 8003222:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003234:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01d      	beq.n	800327c <USB_ActivateEndpoint+0x600>
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	441a      	add	r2, r3
 8003264:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800326c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003274:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003278:	b29b      	uxth	r3, r3
 800327a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	78db      	ldrb	r3, [r3, #3]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d024      	beq.n	80032ce <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	b29b      	uxth	r3, r3
 8003292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800329a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800329e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032a2:	f083 0320 	eor.w	r3, r3, #32
 80032a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	441a      	add	r2, r3
 80032b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	8013      	strh	r3, [r2, #0]
 80032cc:	e01d      	b.n	800330a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80032f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003306:	b29b      	uxth	r3, r3
 8003308:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800331c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003320:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	441a      	add	r2, r3
 800332c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800332e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333e:	b29b      	uxth	r3, r3
 8003340:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003342:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003346:	4618      	mov	r0, r3
 8003348:	376c      	adds	r7, #108	; 0x6c
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003350:	b480      	push	{r7}
 8003352:	b08d      	sub	sp, #52	; 0x34
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	7b1b      	ldrb	r3, [r3, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 808e 	bne.w	8003480 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	785b      	ldrb	r3, [r3, #1]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d044      	beq.n	80033f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	81bb      	strh	r3, [r7, #12]
 800337a:	89bb      	ldrh	r3, [r7, #12]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01b      	beq.n	80033bc <USB_DeactivateEndpoint+0x6c>
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339a:	817b      	strh	r3, [r7, #10]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	441a      	add	r2, r3
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d2:	813b      	strh	r3, [r7, #8]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	441a      	add	r2, r3
 80033de:	893b      	ldrh	r3, [r7, #8]
 80033e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	8013      	strh	r3, [r2, #0]
 80033f4:	e192      	b.n	800371c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	827b      	strh	r3, [r7, #18]
 8003404:	8a7b      	ldrh	r3, [r7, #18]
 8003406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01b      	beq.n	8003446 <USB_DeactivateEndpoint+0xf6>
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003424:	823b      	strh	r3, [r7, #16]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	441a      	add	r2, r3
 8003430:	8a3b      	ldrh	r3, [r7, #16]
 8003432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800343a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800343e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003442:	b29b      	uxth	r3, r3
 8003444:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345c:	81fb      	strh	r3, [r7, #14]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	441a      	add	r2, r3
 8003468:	89fb      	ldrh	r3, [r7, #14]
 800346a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800346e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800347a:	b29b      	uxth	r3, r3
 800347c:	8013      	strh	r3, [r2, #0]
 800347e:	e14d      	b.n	800371c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	785b      	ldrb	r3, [r3, #1]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f040 80a5 	bne.w	80035d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	843b      	strh	r3, [r7, #32]
 8003498:	8c3b      	ldrh	r3, [r7, #32]
 800349a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01b      	beq.n	80034da <USB_DeactivateEndpoint+0x18a>
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b8:	83fb      	strh	r3, [r7, #30]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	441a      	add	r2, r3
 80034c4:	8bfb      	ldrh	r3, [r7, #30]
 80034c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	83bb      	strh	r3, [r7, #28]
 80034e8:	8bbb      	ldrh	r3, [r7, #28]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01b      	beq.n	800352a <USB_DeactivateEndpoint+0x1da>
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003508:	837b      	strh	r3, [r7, #26]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	441a      	add	r2, r3
 8003514:	8b7b      	ldrh	r3, [r7, #26]
 8003516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800351a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800351e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003522:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003526:	b29b      	uxth	r3, r3
 8003528:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003540:	833b      	strh	r3, [r7, #24]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	441a      	add	r2, r3
 800354c:	8b3b      	ldrh	r3, [r7, #24]
 800354e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800355e:	b29b      	uxth	r3, r3
 8003560:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003578:	82fb      	strh	r3, [r7, #22]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	441a      	add	r2, r3
 8003584:	8afb      	ldrh	r3, [r7, #22]
 8003586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800358a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800358e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003596:	b29b      	uxth	r3, r3
 8003598:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b0:	82bb      	strh	r3, [r7, #20]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	441a      	add	r2, r3
 80035bc:	8abb      	ldrh	r3, [r7, #20]
 80035be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	8013      	strh	r3, [r2, #0]
 80035d2:	e0a3      	b.n	800371c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80035e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01b      	beq.n	8003624 <USB_DeactivateEndpoint+0x2d4>
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003602:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	441a      	add	r2, r3
 800360e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800361c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003620:	b29b      	uxth	r3, r3
 8003622:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003632:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01b      	beq.n	8003674 <USB_DeactivateEndpoint+0x324>
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003652:	853b      	strh	r3, [r7, #40]	; 0x28
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	441a      	add	r2, r3
 800365e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003670:	b29b      	uxth	r3, r3
 8003672:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	441a      	add	r2, r3
 8003696:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800369c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	441a      	add	r2, r3
 80036ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800370c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003718:	b29b      	uxth	r3, r3
 800371a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3734      	adds	r7, #52	; 0x34
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b0c4      	sub	sp, #272	; 0x110
 800372c:	af00      	add	r7, sp, #0
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	6018      	str	r0, [r3, #0]
 8003732:	463b      	mov	r3, r7
 8003734:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003736:	463b      	mov	r3, r7
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	785b      	ldrb	r3, [r3, #1]
 800373c:	2b01      	cmp	r3, #1
 800373e:	f040 8557 	bne.w	80041f0 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003742:	463b      	mov	r3, r7
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699a      	ldr	r2, [r3, #24]
 8003748:	463b      	mov	r3, r7
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	429a      	cmp	r2, r3
 8003750:	d905      	bls.n	800375e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003752:	463b      	mov	r3, r7
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800375c:	e004      	b.n	8003768 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800375e:	463b      	mov	r3, r7
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003768:	463b      	mov	r3, r7
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	7b1b      	ldrb	r3, [r3, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d12c      	bne.n	80037cc <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003772:	463b      	mov	r3, r7
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6959      	ldr	r1, [r3, #20]
 8003778:	463b      	mov	r3, r7
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	88da      	ldrh	r2, [r3, #6]
 800377e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003782:	b29b      	uxth	r3, r3
 8003784:	1d38      	adds	r0, r7, #4
 8003786:	6800      	ldr	r0, [r0, #0]
 8003788:	f001 fa2c 	bl	8004be4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379a:	b29b      	uxth	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	4413      	add	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	463b      	mov	r3, r7
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	011a      	lsls	r2, r3, #4
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	4413      	add	r3, r2
 80037b0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80037b4:	f107 0310 	add.w	r3, r7, #16
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037be:	b29a      	uxth	r2, r3
 80037c0:	f107 0310 	add.w	r3, r7, #16
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	801a      	strh	r2, [r3, #0]
 80037c8:	f000 bcdd 	b.w	8004186 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80037cc:	463b      	mov	r3, r7
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	78db      	ldrb	r3, [r3, #3]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	f040 8347 	bne.w	8003e66 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80037d8:	463b      	mov	r3, r7
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6a1a      	ldr	r2, [r3, #32]
 80037de:	463b      	mov	r3, r7
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	f240 82eb 	bls.w	8003dc0 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80037ea:	1d3b      	adds	r3, r7, #4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	463b      	mov	r3, r7
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003804:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003808:	1d3b      	adds	r3, r7, #4
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	463b      	mov	r3, r7
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	441a      	add	r2, r3
 8003816:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800381a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800381e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003822:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382a:	b29b      	uxth	r3, r3
 800382c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800382e:	463b      	mov	r3, r7
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a1a      	ldr	r2, [r3, #32]
 8003834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003838:	1ad2      	subs	r2, r2, r3
 800383a:	463b      	mov	r3, r7
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003840:	1d3b      	adds	r3, r7, #4
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	463b      	mov	r3, r7
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	b29b      	uxth	r3, r3
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8159 	beq.w	8003b0e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800385c:	1d3b      	adds	r3, r7, #4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
 8003862:	463b      	mov	r3, r7
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	785b      	ldrb	r3, [r3, #1]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d164      	bne.n	8003936 <USB_EPStartXfer+0x20e>
 800386c:	1d3b      	adds	r3, r7, #4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800387a:	b29b      	uxth	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	4413      	add	r3, r2
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003884:	463b      	mov	r3, r7
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	011a      	lsls	r2, r3, #4
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	4413      	add	r3, r2
 8003890:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003894:	62bb      	str	r3, [r7, #40]	; 0x28
 8003896:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d112      	bne.n	80038c4 <USB_EPStartXfer+0x19c>
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ac:	801a      	strh	r2, [r3, #0]
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038bc:	b29a      	uxth	r2, r3
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	801a      	strh	r2, [r3, #0]
 80038c2:	e054      	b.n	800396e <USB_EPStartXfer+0x246>
 80038c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c8:	2b3e      	cmp	r3, #62	; 0x3e
 80038ca:	d817      	bhi.n	80038fc <USB_EPStartXfer+0x1d4>
 80038cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d0:	085b      	lsrs	r3, r3, #1
 80038d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <USB_EPStartXfer+0x1c4>
 80038e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038e6:	3301      	adds	r3, #1
 80038e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	029b      	lsls	r3, r3, #10
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	801a      	strh	r2, [r3, #0]
 80038fa:	e038      	b.n	800396e <USB_EPStartXfer+0x246>
 80038fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <USB_EPStartXfer+0x1f4>
 8003912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003916:	3b01      	subs	r3, #1
 8003918:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800391c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003920:	b29b      	uxth	r3, r3
 8003922:	029b      	lsls	r3, r3, #10
 8003924:	b29b      	uxth	r3, r3
 8003926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800392a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800392e:	b29a      	uxth	r2, r3
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	801a      	strh	r2, [r3, #0]
 8003934:	e01b      	b.n	800396e <USB_EPStartXfer+0x246>
 8003936:	463b      	mov	r3, r7
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d116      	bne.n	800396e <USB_EPStartXfer+0x246>
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003948:	b29b      	uxth	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394e:	4413      	add	r3, r2
 8003950:	637b      	str	r3, [r7, #52]	; 0x34
 8003952:	463b      	mov	r3, r7
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	011a      	lsls	r2, r3, #4
 800395a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395c:	4413      	add	r3, r2
 800395e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003962:	633b      	str	r3, [r7, #48]	; 0x30
 8003964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003968:	b29a      	uxth	r2, r3
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800396e:	463b      	mov	r3, r7
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	895b      	ldrh	r3, [r3, #10]
 8003974:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003978:	463b      	mov	r3, r7
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6959      	ldr	r1, [r3, #20]
 800397e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003982:	b29b      	uxth	r3, r3
 8003984:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003988:	1d38      	adds	r0, r7, #4
 800398a:	6800      	ldr	r0, [r0, #0]
 800398c:	f001 f92a 	bl	8004be4 <USB_WritePMA>
            ep->xfer_buff += len;
 8003990:	463b      	mov	r3, r7
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800399a:	441a      	add	r2, r3
 800399c:	463b      	mov	r3, r7
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80039a2:	463b      	mov	r3, r7
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	463b      	mov	r3, r7
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d909      	bls.n	80039c6 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80039b2:	463b      	mov	r3, r7
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a1a      	ldr	r2, [r3, #32]
 80039b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039bc:	1ad2      	subs	r2, r2, r3
 80039be:	463b      	mov	r3, r7
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	621a      	str	r2, [r3, #32]
 80039c4:	e008      	b.n	80039d8 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80039c6:	463b      	mov	r3, r7
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80039d0:	463b      	mov	r3, r7
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2200      	movs	r2, #0
 80039d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039d8:	463b      	mov	r3, r7
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	785b      	ldrb	r3, [r3, #1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d164      	bne.n	8003aac <USB_EPStartXfer+0x384>
 80039e2:	1d3b      	adds	r3, r7, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	1d3b      	adds	r3, r7, #4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	4413      	add	r3, r2
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	463b      	mov	r3, r7
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	011a      	lsls	r2, r3, #4
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d112      	bne.n	8003a3a <USB_EPStartXfer+0x312>
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	801a      	strh	r2, [r3, #0]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	801a      	strh	r2, [r3, #0]
 8003a38:	e057      	b.n	8003aea <USB_EPStartXfer+0x3c2>
 8003a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8003a40:	d817      	bhi.n	8003a72 <USB_EPStartXfer+0x34a>
 8003a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d004      	beq.n	8003a62 <USB_EPStartXfer+0x33a>
 8003a58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	029b      	lsls	r3, r3, #10
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	801a      	strh	r2, [r3, #0]
 8003a70:	e03b      	b.n	8003aea <USB_EPStartXfer+0x3c2>
 8003a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d104      	bne.n	8003a92 <USB_EPStartXfer+0x36a>
 8003a88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	029b      	lsls	r3, r3, #10
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	801a      	strh	r2, [r3, #0]
 8003aaa:	e01e      	b.n	8003aea <USB_EPStartXfer+0x3c2>
 8003aac:	463b      	mov	r3, r7
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	785b      	ldrb	r3, [r3, #1]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d119      	bne.n	8003aea <USB_EPStartXfer+0x3c2>
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
 8003abc:	1d3b      	adds	r3, r7, #4
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	4413      	add	r3, r2
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ace:	463b      	mov	r3, r7
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	011a      	lsls	r2, r3, #4
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	4413      	add	r3, r2
 8003ada:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ade:	623b      	str	r3, [r7, #32]
 8003ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003aea:	463b      	mov	r3, r7
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	891b      	ldrh	r3, [r3, #8]
 8003af0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003af4:	463b      	mov	r3, r7
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6959      	ldr	r1, [r3, #20]
 8003afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003b04:	1d38      	adds	r0, r7, #4
 8003b06:	6800      	ldr	r0, [r0, #0]
 8003b08:	f001 f86c 	bl	8004be4 <USB_WritePMA>
 8003b0c:	e33b      	b.n	8004186 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b0e:	463b      	mov	r3, r7
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	785b      	ldrb	r3, [r3, #1]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d164      	bne.n	8003be2 <USB_EPStartXfer+0x4ba>
 8003b18:	1d3b      	adds	r3, r7, #4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b1e:	1d3b      	adds	r3, r7, #4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2c:	4413      	add	r3, r2
 8003b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b30:	463b      	mov	r3, r7
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	011a      	lsls	r2, r3, #4
 8003b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d112      	bne.n	8003b70 <USB_EPStartXfer+0x448>
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b6c:	801a      	strh	r2, [r3, #0]
 8003b6e:	e057      	b.n	8003c20 <USB_EPStartXfer+0x4f8>
 8003b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b74:	2b3e      	cmp	r3, #62	; 0x3e
 8003b76:	d817      	bhi.n	8003ba8 <USB_EPStartXfer+0x480>
 8003b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d004      	beq.n	8003b98 <USB_EPStartXfer+0x470>
 8003b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b92:	3301      	adds	r3, #1
 8003b94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	029b      	lsls	r3, r3, #10
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	e03b      	b.n	8003c20 <USB_EPStartXfer+0x4f8>
 8003ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d104      	bne.n	8003bc8 <USB_EPStartXfer+0x4a0>
 8003bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	029b      	lsls	r3, r3, #10
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bde:	801a      	strh	r2, [r3, #0]
 8003be0:	e01e      	b.n	8003c20 <USB_EPStartXfer+0x4f8>
 8003be2:	463b      	mov	r3, r7
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d119      	bne.n	8003c20 <USB_EPStartXfer+0x4f8>
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf2:	1d3b      	adds	r3, r7, #4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c00:	4413      	add	r3, r2
 8003c02:	657b      	str	r3, [r7, #84]	; 0x54
 8003c04:	463b      	mov	r3, r7
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	011a      	lsls	r2, r3, #4
 8003c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c0e:	4413      	add	r3, r2
 8003c10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c14:	653b      	str	r3, [r7, #80]	; 0x50
 8003c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003c20:	463b      	mov	r3, r7
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	891b      	ldrh	r3, [r3, #8]
 8003c26:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c2a:	463b      	mov	r3, r7
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6959      	ldr	r1, [r3, #20]
 8003c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003c3a:	1d38      	adds	r0, r7, #4
 8003c3c:	6800      	ldr	r0, [r0, #0]
 8003c3e:	f000 ffd1 	bl	8004be4 <USB_WritePMA>
            ep->xfer_buff += len;
 8003c42:	463b      	mov	r3, r7
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4c:	441a      	add	r2, r3
 8003c4e:	463b      	mov	r3, r7
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003c54:	463b      	mov	r3, r7
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6a1a      	ldr	r2, [r3, #32]
 8003c5a:	463b      	mov	r3, r7
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d909      	bls.n	8003c78 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003c64:	463b      	mov	r3, r7
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a1a      	ldr	r2, [r3, #32]
 8003c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c6e:	1ad2      	subs	r2, r2, r3
 8003c70:	463b      	mov	r3, r7
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	621a      	str	r2, [r3, #32]
 8003c76:	e008      	b.n	8003c8a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c78:	463b      	mov	r3, r7
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003c82:	463b      	mov	r3, r7
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2200      	movs	r2, #0
 8003c88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c8a:	1d3b      	adds	r3, r7, #4
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c90:	463b      	mov	r3, r7
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d164      	bne.n	8003d64 <USB_EPStartXfer+0x63c>
 8003c9a:	1d3b      	adds	r3, r7, #4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca0:	1d3b      	adds	r3, r7, #4
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cae:	4413      	add	r3, r2
 8003cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	011a      	lsls	r2, r3, #4
 8003cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d112      	bne.n	8003cf2 <USB_EPStartXfer+0x5ca>
 8003ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	801a      	strh	r2, [r3, #0]
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cee:	801a      	strh	r2, [r3, #0]
 8003cf0:	e054      	b.n	8003d9c <USB_EPStartXfer+0x674>
 8003cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8003cf8:	d817      	bhi.n	8003d2a <USB_EPStartXfer+0x602>
 8003cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfe:	085b      	lsrs	r3, r3, #1
 8003d00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d004      	beq.n	8003d1a <USB_EPStartXfer+0x5f2>
 8003d10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d14:	3301      	adds	r3, #1
 8003d16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	029b      	lsls	r3, r3, #10
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d26:	801a      	strh	r2, [r3, #0]
 8003d28:	e038      	b.n	8003d9c <USB_EPStartXfer+0x674>
 8003d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d104      	bne.n	8003d4a <USB_EPStartXfer+0x622>
 8003d40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d44:	3b01      	subs	r3, #1
 8003d46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	029b      	lsls	r3, r3, #10
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	801a      	strh	r2, [r3, #0]
 8003d62:	e01b      	b.n	8003d9c <USB_EPStartXfer+0x674>
 8003d64:	463b      	mov	r3, r7
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	785b      	ldrb	r3, [r3, #1]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d116      	bne.n	8003d9c <USB_EPStartXfer+0x674>
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7c:	4413      	add	r3, r2
 8003d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d80:	463b      	mov	r3, r7
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	011a      	lsls	r2, r3, #4
 8003d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d90:	643b      	str	r3, [r7, #64]	; 0x40
 8003d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003d9c:	463b      	mov	r3, r7
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	895b      	ldrh	r3, [r3, #10]
 8003da2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003da6:	463b      	mov	r3, r7
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6959      	ldr	r1, [r3, #20]
 8003dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003db6:	1d38      	adds	r0, r7, #4
 8003db8:	6800      	ldr	r0, [r0, #0]
 8003dba:	f000 ff13 	bl	8004be4 <USB_WritePMA>
 8003dbe:	e1e2      	b.n	8004186 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	463b      	mov	r3, r7
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	463b      	mov	r3, r7
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	441a      	add	r2, r3
 8003df6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003e0e:	1d3b      	adds	r3, r7, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	663b      	str	r3, [r7, #96]	; 0x60
 8003e14:	1d3b      	adds	r3, r7, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e22:	4413      	add	r3, r2
 8003e24:	663b      	str	r3, [r7, #96]	; 0x60
 8003e26:	463b      	mov	r3, r7
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	011a      	lsls	r2, r3, #4
 8003e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e30:	4413      	add	r3, r2
 8003e32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003e42:	463b      	mov	r3, r7
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	891b      	ldrh	r3, [r3, #8]
 8003e48:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e4c:	463b      	mov	r3, r7
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6959      	ldr	r1, [r3, #20]
 8003e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e5c:	1d38      	adds	r0, r7, #4
 8003e5e:	6800      	ldr	r0, [r0, #0]
 8003e60:	f000 fec0 	bl	8004be4 <USB_WritePMA>
 8003e64:	e18f      	b.n	8004186 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	463b      	mov	r3, r7
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 808f 	beq.w	8003fa0 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e82:	1d3b      	adds	r3, r7, #4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e88:	463b      	mov	r3, r7
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d164      	bne.n	8003f5c <USB_EPStartXfer+0x834>
 8003e92:	1d3b      	adds	r3, r7, #4
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	673b      	str	r3, [r7, #112]	; 0x70
 8003e98:	1d3b      	adds	r3, r7, #4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ea6:	4413      	add	r3, r2
 8003ea8:	673b      	str	r3, [r7, #112]	; 0x70
 8003eaa:	463b      	mov	r3, r7
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	011a      	lsls	r2, r3, #4
 8003eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003eba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d112      	bne.n	8003eea <USB_EPStartXfer+0x7c2>
 8003ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed2:	801a      	strh	r2, [r3, #0]
 8003ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee6:	801a      	strh	r2, [r3, #0]
 8003ee8:	e054      	b.n	8003f94 <USB_EPStartXfer+0x86c>
 8003eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eee:	2b3e      	cmp	r3, #62	; 0x3e
 8003ef0:	d817      	bhi.n	8003f22 <USB_EPStartXfer+0x7fa>
 8003ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d004      	beq.n	8003f12 <USB_EPStartXfer+0x7ea>
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	029b      	lsls	r3, r3, #10
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	801a      	strh	r2, [r3, #0]
 8003f20:	e038      	b.n	8003f94 <USB_EPStartXfer+0x86c>
 8003f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d104      	bne.n	8003f42 <USB_EPStartXfer+0x81a>
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	029b      	lsls	r3, r3, #10
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	e01b      	b.n	8003f94 <USB_EPStartXfer+0x86c>
 8003f5c:	463b      	mov	r3, r7
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	785b      	ldrb	r3, [r3, #1]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d116      	bne.n	8003f94 <USB_EPStartXfer+0x86c>
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f74:	4413      	add	r3, r2
 8003f76:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f78:	463b      	mov	r3, r7
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	011a      	lsls	r2, r3, #4
 8003f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f82:	4413      	add	r3, r2
 8003f84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f88:	677b      	str	r3, [r7, #116]	; 0x74
 8003f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003f94:	463b      	mov	r3, r7
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	895b      	ldrh	r3, [r3, #10]
 8003f9a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8003f9e:	e097      	b.n	80040d0 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003fa0:	463b      	mov	r3, r7
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	785b      	ldrb	r3, [r3, #1]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d168      	bne.n	800407c <USB_EPStartXfer+0x954>
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fb2:	1d3b      	adds	r3, r7, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fc8:	463b      	mov	r3, r7
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	011a      	lsls	r2, r3, #4
 8003fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d112      	bne.n	800400a <USB_EPStartXfer+0x8e2>
 8003fe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004002:	b29a      	uxth	r2, r3
 8004004:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	e05d      	b.n	80040c6 <USB_EPStartXfer+0x99e>
 800400a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800400e:	2b3e      	cmp	r3, #62	; 0x3e
 8004010:	d817      	bhi.n	8004042 <USB_EPStartXfer+0x91a>
 8004012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800401c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d004      	beq.n	8004032 <USB_EPStartXfer+0x90a>
 8004028:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800402c:	3301      	adds	r3, #1
 800402e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004032:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004036:	b29b      	uxth	r3, r3
 8004038:	029b      	lsls	r3, r3, #10
 800403a:	b29a      	uxth	r2, r3
 800403c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800403e:	801a      	strh	r2, [r3, #0]
 8004040:	e041      	b.n	80040c6 <USB_EPStartXfer+0x99e>
 8004042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800404c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	2b00      	cmp	r3, #0
 8004056:	d104      	bne.n	8004062 <USB_EPStartXfer+0x93a>
 8004058:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800405c:	3b01      	subs	r3, #1
 800405e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004062:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004066:	b29b      	uxth	r3, r3
 8004068:	029b      	lsls	r3, r3, #10
 800406a:	b29b      	uxth	r3, r3
 800406c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004074:	b29a      	uxth	r2, r3
 8004076:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004078:	801a      	strh	r2, [r3, #0]
 800407a:	e024      	b.n	80040c6 <USB_EPStartXfer+0x99e>
 800407c:	463b      	mov	r3, r7
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	785b      	ldrb	r3, [r3, #1]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d11f      	bne.n	80040c6 <USB_EPStartXfer+0x99e>
 8004086:	1d3b      	adds	r3, r7, #4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800408e:	1d3b      	adds	r3, r7, #4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004096:	b29b      	uxth	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800409e:	4413      	add	r3, r2
 80040a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040a4:	463b      	mov	r3, r7
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	011a      	lsls	r2, r3, #4
 80040ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040b0:	4413      	add	r3, r2
 80040b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040be:	b29a      	uxth	r2, r3
 80040c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80040c6:	463b      	mov	r3, r7
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	891b      	ldrh	r3, [r3, #8]
 80040cc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040d0:	463b      	mov	r3, r7
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6959      	ldr	r1, [r3, #20]
 80040d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80040e0:	1d38      	adds	r0, r7, #4
 80040e2:	6800      	ldr	r0, [r0, #0]
 80040e4:	f000 fd7e 	bl	8004be4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80040e8:	463b      	mov	r3, r7
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	785b      	ldrb	r3, [r3, #1]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d122      	bne.n	8004138 <USB_EPStartXfer+0xa10>
 80040f2:	1d3b      	adds	r3, r7, #4
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	463b      	mov	r3, r7
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004110:	1d3b      	adds	r3, r7, #4
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	463b      	mov	r3, r7
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	441a      	add	r2, r3
 800411e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800412a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004132:	b29b      	uxth	r3, r3
 8004134:	8013      	strh	r3, [r2, #0]
 8004136:	e026      	b.n	8004186 <USB_EPStartXfer+0xa5e>
 8004138:	463b      	mov	r3, r7
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d121      	bne.n	8004186 <USB_EPStartXfer+0xa5e>
 8004142:	1d3b      	adds	r3, r7, #4
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	463b      	mov	r3, r7
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	463b      	mov	r3, r7
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	441a      	add	r2, r3
 800416e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800417a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800417e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004182:	b29b      	uxth	r3, r3
 8004184:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	463b      	mov	r3, r7
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	f107 020e 	add.w	r2, r7, #14
 800419c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a4:	8013      	strh	r3, [r2, #0]
 80041a6:	f107 030e 	add.w	r3, r7, #14
 80041aa:	f107 020e 	add.w	r2, r7, #14
 80041ae:	8812      	ldrh	r2, [r2, #0]
 80041b0:	f082 0210 	eor.w	r2, r2, #16
 80041b4:	801a      	strh	r2, [r3, #0]
 80041b6:	f107 030e 	add.w	r3, r7, #14
 80041ba:	f107 020e 	add.w	r2, r7, #14
 80041be:	8812      	ldrh	r2, [r2, #0]
 80041c0:	f082 0220 	eor.w	r2, r2, #32
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	1d3b      	adds	r3, r7, #4
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	463b      	mov	r3, r7
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	441a      	add	r2, r3
 80041d4:	f107 030e 	add.w	r3, r7, #14
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	8013      	strh	r3, [r2, #0]
 80041ee:	e3b5      	b.n	800495c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80041f0:	463b      	mov	r3, r7
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	7b1b      	ldrb	r3, [r3, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 8090 	bne.w	800431c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80041fc:	463b      	mov	r3, r7
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	463b      	mov	r3, r7
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	429a      	cmp	r2, r3
 800420a:	d90e      	bls.n	800422a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800420c:	463b      	mov	r3, r7
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004216:	463b      	mov	r3, r7
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699a      	ldr	r2, [r3, #24]
 800421c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004220:	1ad2      	subs	r2, r2, r3
 8004222:	463b      	mov	r3, r7
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	619a      	str	r2, [r3, #24]
 8004228:	e008      	b.n	800423c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800422a:	463b      	mov	r3, r7
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004234:	463b      	mov	r3, r7
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2200      	movs	r2, #0
 800423a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800423c:	1d3b      	adds	r3, r7, #4
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004244:	1d3b      	adds	r3, r7, #4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424c:	b29b      	uxth	r3, r3
 800424e:	461a      	mov	r2, r3
 8004250:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004254:	4413      	add	r3, r2
 8004256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800425a:	463b      	mov	r3, r7
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	011a      	lsls	r2, r3, #4
 8004262:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004266:	4413      	add	r3, r2
 8004268:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800426c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d116      	bne.n	80042a6 <USB_EPStartXfer+0xb7e>
 8004278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004284:	b29a      	uxth	r2, r3
 8004286:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800428a:	801a      	strh	r2, [r3, #0]
 800428c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800429c:	b29a      	uxth	r2, r3
 800429e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	e32c      	b.n	8004900 <USB_EPStartXfer+0x11d8>
 80042a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042aa:	2b3e      	cmp	r3, #62	; 0x3e
 80042ac:	d818      	bhi.n	80042e0 <USB_EPStartXfer+0xbb8>
 80042ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d004      	beq.n	80042ce <USB_EPStartXfer+0xba6>
 80042c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042c8:	3301      	adds	r3, #1
 80042ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	029b      	lsls	r3, r3, #10
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042dc:	801a      	strh	r2, [r3, #0]
 80042de:	e30f      	b.n	8004900 <USB_EPStartXfer+0x11d8>
 80042e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d104      	bne.n	8004300 <USB_EPStartXfer+0xbd8>
 80042f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042fa:	3b01      	subs	r3, #1
 80042fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004300:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004304:	b29b      	uxth	r3, r3
 8004306:	029b      	lsls	r3, r3, #10
 8004308:	b29b      	uxth	r3, r3
 800430a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004312:	b29a      	uxth	r2, r3
 8004314:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004318:	801a      	strh	r2, [r3, #0]
 800431a:	e2f1      	b.n	8004900 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800431c:	463b      	mov	r3, r7
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	78db      	ldrb	r3, [r3, #3]
 8004322:	2b02      	cmp	r3, #2
 8004324:	f040 818f 	bne.w	8004646 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004328:	463b      	mov	r3, r7
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d175      	bne.n	800441e <USB_EPStartXfer+0xcf6>
 8004332:	1d3b      	adds	r3, r7, #4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800433a:	1d3b      	adds	r3, r7, #4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004342:	b29b      	uxth	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800434a:	4413      	add	r3, r2
 800434c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004350:	463b      	mov	r3, r7
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	011a      	lsls	r2, r3, #4
 8004358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800435c:	4413      	add	r3, r2
 800435e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004366:	463b      	mov	r3, r7
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d116      	bne.n	800439e <USB_EPStartXfer+0xc76>
 8004370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800437c:	b29a      	uxth	r2, r3
 800437e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004382:	801a      	strh	r2, [r3, #0]
 8004384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004394:	b29a      	uxth	r2, r3
 8004396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800439a:	801a      	strh	r2, [r3, #0]
 800439c:	e065      	b.n	800446a <USB_EPStartXfer+0xd42>
 800439e:	463b      	mov	r3, r7
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b3e      	cmp	r3, #62	; 0x3e
 80043a6:	d81a      	bhi.n	80043de <USB_EPStartXfer+0xcb6>
 80043a8:	463b      	mov	r3, r7
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043b4:	463b      	mov	r3, r7
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <USB_EPStartXfer+0xca4>
 80043c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043c6:	3301      	adds	r3, #1
 80043c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	029b      	lsls	r3, r3, #10
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043da:	801a      	strh	r2, [r3, #0]
 80043dc:	e045      	b.n	800446a <USB_EPStartXfer+0xd42>
 80043de:	463b      	mov	r3, r7
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043ea:	463b      	mov	r3, r7
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d104      	bne.n	8004402 <USB_EPStartXfer+0xcda>
 80043f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043fc:	3b01      	subs	r3, #1
 80043fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004402:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004406:	b29b      	uxth	r3, r3
 8004408:	029b      	lsls	r3, r3, #10
 800440a:	b29b      	uxth	r3, r3
 800440c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004414:	b29a      	uxth	r2, r3
 8004416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800441a:	801a      	strh	r2, [r3, #0]
 800441c:	e025      	b.n	800446a <USB_EPStartXfer+0xd42>
 800441e:	463b      	mov	r3, r7
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	785b      	ldrb	r3, [r3, #1]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d120      	bne.n	800446a <USB_EPStartXfer+0xd42>
 8004428:	1d3b      	adds	r3, r7, #4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004430:	1d3b      	adds	r3, r7, #4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004438:	b29b      	uxth	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004440:	4413      	add	r3, r2
 8004442:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004446:	463b      	mov	r3, r7
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	011a      	lsls	r2, r3, #4
 800444e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004452:	4413      	add	r3, r2
 8004454:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800445c:	463b      	mov	r3, r7
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	b29a      	uxth	r2, r3
 8004464:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004468:	801a      	strh	r2, [r3, #0]
 800446a:	1d3b      	adds	r3, r7, #4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004472:	463b      	mov	r3, r7
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d175      	bne.n	8004568 <USB_EPStartXfer+0xe40>
 800447c:	1d3b      	adds	r3, r7, #4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004484:	1d3b      	adds	r3, r7, #4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800448c:	b29b      	uxth	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004494:	4413      	add	r3, r2
 8004496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800449a:	463b      	mov	r3, r7
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	011a      	lsls	r2, r3, #4
 80044a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044a6:	4413      	add	r3, r2
 80044a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044b0:	463b      	mov	r3, r7
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d116      	bne.n	80044e8 <USB_EPStartXfer+0xdc0>
 80044ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044cc:	801a      	strh	r2, [r3, #0]
 80044ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044de:	b29a      	uxth	r2, r3
 80044e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044e4:	801a      	strh	r2, [r3, #0]
 80044e6:	e061      	b.n	80045ac <USB_EPStartXfer+0xe84>
 80044e8:	463b      	mov	r3, r7
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b3e      	cmp	r3, #62	; 0x3e
 80044f0:	d81a      	bhi.n	8004528 <USB_EPStartXfer+0xe00>
 80044f2:	463b      	mov	r3, r7
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	085b      	lsrs	r3, r3, #1
 80044fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044fe:	463b      	mov	r3, r7
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d004      	beq.n	8004516 <USB_EPStartXfer+0xdee>
 800450c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004510:	3301      	adds	r3, #1
 8004512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451a:	b29b      	uxth	r3, r3
 800451c:	029b      	lsls	r3, r3, #10
 800451e:	b29a      	uxth	r2, r3
 8004520:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004524:	801a      	strh	r2, [r3, #0]
 8004526:	e041      	b.n	80045ac <USB_EPStartXfer+0xe84>
 8004528:	463b      	mov	r3, r7
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004534:	463b      	mov	r3, r7
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	2b00      	cmp	r3, #0
 8004540:	d104      	bne.n	800454c <USB_EPStartXfer+0xe24>
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004546:	3b01      	subs	r3, #1
 8004548:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800454c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004550:	b29b      	uxth	r3, r3
 8004552:	029b      	lsls	r3, r3, #10
 8004554:	b29b      	uxth	r3, r3
 8004556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800455a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800455e:	b29a      	uxth	r2, r3
 8004560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004564:	801a      	strh	r2, [r3, #0]
 8004566:	e021      	b.n	80045ac <USB_EPStartXfer+0xe84>
 8004568:	463b      	mov	r3, r7
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	785b      	ldrb	r3, [r3, #1]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d11c      	bne.n	80045ac <USB_EPStartXfer+0xe84>
 8004572:	1d3b      	adds	r3, r7, #4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800457a:	b29b      	uxth	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004582:	4413      	add	r3, r2
 8004584:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004588:	463b      	mov	r3, r7
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	011a      	lsls	r2, r3, #4
 8004590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004594:	4413      	add	r3, r2
 8004596:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800459a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800459e:	463b      	mov	r3, r7
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045aa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80045ac:	463b      	mov	r3, r7
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 81a4 	beq.w	8004900 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80045b8:	1d3b      	adds	r3, r7, #4
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	463b      	mov	r3, r7
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80045cc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80045d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <USB_EPStartXfer+0xebc>
 80045d8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10d      	bne.n	8004600 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80045e4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80045e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f040 8187 	bne.w	8004900 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80045f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f040 8180 	bne.w	8004900 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004600:	1d3b      	adds	r3, r7, #4
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	463b      	mov	r3, r7
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800461e:	1d3b      	adds	r3, r7, #4
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	463b      	mov	r3, r7
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	441a      	add	r2, r3
 800462c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004640:	b29b      	uxth	r3, r3
 8004642:	8013      	strh	r3, [r2, #0]
 8004644:	e15c      	b.n	8004900 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004646:	463b      	mov	r3, r7
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	78db      	ldrb	r3, [r3, #3]
 800464c:	2b01      	cmp	r3, #1
 800464e:	f040 8155 	bne.w	80048fc <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004652:	463b      	mov	r3, r7
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	463b      	mov	r3, r7
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	429a      	cmp	r2, r3
 8004660:	d90e      	bls.n	8004680 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8004662:	463b      	mov	r3, r7
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800466c:	463b      	mov	r3, r7
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699a      	ldr	r2, [r3, #24]
 8004672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004676:	1ad2      	subs	r2, r2, r3
 8004678:	463b      	mov	r3, r7
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	619a      	str	r2, [r3, #24]
 800467e:	e008      	b.n	8004692 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004680:	463b      	mov	r3, r7
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800468a:	463b      	mov	r3, r7
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004692:	463b      	mov	r3, r7
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	785b      	ldrb	r3, [r3, #1]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d16f      	bne.n	800477c <USB_EPStartXfer+0x1054>
 800469c:	1d3b      	adds	r3, r7, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046a4:	1d3b      	adds	r3, r7, #4
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046b4:	4413      	add	r3, r2
 80046b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046ba:	463b      	mov	r3, r7
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	011a      	lsls	r2, r3, #4
 80046c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046c6:	4413      	add	r3, r2
 80046c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d116      	bne.n	8004706 <USB_EPStartXfer+0xfde>
 80046d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046ea:	801a      	strh	r2, [r3, #0]
 80046ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	e05f      	b.n	80047c6 <USB_EPStartXfer+0x109e>
 8004706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800470a:	2b3e      	cmp	r3, #62	; 0x3e
 800470c:	d818      	bhi.n	8004740 <USB_EPStartXfer+0x1018>
 800470e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <USB_EPStartXfer+0x1006>
 8004724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004728:	3301      	adds	r3, #1
 800472a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800472e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004732:	b29b      	uxth	r3, r3
 8004734:	029b      	lsls	r3, r3, #10
 8004736:	b29a      	uxth	r2, r3
 8004738:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800473c:	801a      	strh	r2, [r3, #0]
 800473e:	e042      	b.n	80047c6 <USB_EPStartXfer+0x109e>
 8004740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800474a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2b00      	cmp	r3, #0
 8004754:	d104      	bne.n	8004760 <USB_EPStartXfer+0x1038>
 8004756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800475a:	3b01      	subs	r3, #1
 800475c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004764:	b29b      	uxth	r3, r3
 8004766:	029b      	lsls	r3, r3, #10
 8004768:	b29b      	uxth	r3, r3
 800476a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004772:	b29a      	uxth	r2, r3
 8004774:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004778:	801a      	strh	r2, [r3, #0]
 800477a:	e024      	b.n	80047c6 <USB_EPStartXfer+0x109e>
 800477c:	463b      	mov	r3, r7
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	785b      	ldrb	r3, [r3, #1]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d11f      	bne.n	80047c6 <USB_EPStartXfer+0x109e>
 8004786:	1d3b      	adds	r3, r7, #4
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800478e:	1d3b      	adds	r3, r7, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004796:	b29b      	uxth	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800479e:	4413      	add	r3, r2
 80047a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047a4:	463b      	mov	r3, r7
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	011a      	lsls	r2, r3, #4
 80047ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047b0:	4413      	add	r3, r2
 80047b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047be:	b29a      	uxth	r2, r3
 80047c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047c4:	801a      	strh	r2, [r3, #0]
 80047c6:	1d3b      	adds	r3, r7, #4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047ce:	463b      	mov	r3, r7
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	785b      	ldrb	r3, [r3, #1]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d16f      	bne.n	80048b8 <USB_EPStartXfer+0x1190>
 80047d8:	1d3b      	adds	r3, r7, #4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047e0:	1d3b      	adds	r3, r7, #4
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047f0:	4413      	add	r3, r2
 80047f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047f6:	463b      	mov	r3, r7
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	011a      	lsls	r2, r3, #4
 80047fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004802:	4413      	add	r3, r2
 8004804:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004808:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800480c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d116      	bne.n	8004842 <USB_EPStartXfer+0x111a>
 8004814:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	b29b      	uxth	r3, r3
 800481c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004820:	b29a      	uxth	r2, r3
 8004822:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004838:	b29a      	uxth	r2, r3
 800483a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	e05e      	b.n	8004900 <USB_EPStartXfer+0x11d8>
 8004842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004846:	2b3e      	cmp	r3, #62	; 0x3e
 8004848:	d818      	bhi.n	800487c <USB_EPStartXfer+0x1154>
 800484a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d004      	beq.n	800486a <USB_EPStartXfer+0x1142>
 8004860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004864:	3301      	adds	r3, #1
 8004866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800486a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800486e:	b29b      	uxth	r3, r3
 8004870:	029b      	lsls	r3, r3, #10
 8004872:	b29a      	uxth	r2, r3
 8004874:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004878:	801a      	strh	r2, [r3, #0]
 800487a:	e041      	b.n	8004900 <USB_EPStartXfer+0x11d8>
 800487c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800488a:	f003 031f 	and.w	r3, r3, #31
 800488e:	2b00      	cmp	r3, #0
 8004890:	d104      	bne.n	800489c <USB_EPStartXfer+0x1174>
 8004892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004896:	3b01      	subs	r3, #1
 8004898:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800489c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	029b      	lsls	r3, r3, #10
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048b4:	801a      	strh	r2, [r3, #0]
 80048b6:	e023      	b.n	8004900 <USB_EPStartXfer+0x11d8>
 80048b8:	463b      	mov	r3, r7
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	785b      	ldrb	r3, [r3, #1]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d11e      	bne.n	8004900 <USB_EPStartXfer+0x11d8>
 80048c2:	1d3b      	adds	r3, r7, #4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048d2:	4413      	add	r3, r2
 80048d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048d8:	463b      	mov	r3, r7
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	011a      	lsls	r2, r3, #4
 80048e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048e4:	4413      	add	r3, r2
 80048e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	e001      	b.n	8004900 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e02e      	b.n	800495e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004900:	1d3b      	adds	r3, r7, #4
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	463b      	mov	r3, r7
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800491e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004922:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004926:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800492a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800492e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004932:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004936:	1d3b      	adds	r3, r7, #4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	463b      	mov	r3, r7
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	441a      	add	r2, r3
 8004944:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800494c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004958:	b29b      	uxth	r3, r3
 800495a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d020      	beq.n	80049bc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29b      	uxth	r3, r3
 8004988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004990:	81bb      	strh	r3, [r7, #12]
 8004992:	89bb      	ldrh	r3, [r7, #12]
 8004994:	f083 0310 	eor.w	r3, r3, #16
 8004998:	81bb      	strh	r3, [r7, #12]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	89bb      	ldrh	r3, [r7, #12]
 80049a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	8013      	strh	r3, [r2, #0]
 80049ba:	e01f      	b.n	80049fc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	81fb      	strh	r3, [r7, #14]
 80049d4:	89fb      	ldrh	r3, [r7, #14]
 80049d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049da:	81fb      	strh	r3, [r7, #14]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	441a      	add	r2, r3
 80049e6:	89fb      	ldrh	r3, [r7, #14]
 80049e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr

08004a08 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	7b1b      	ldrb	r3, [r3, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f040 809d 	bne.w	8004b56 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d04c      	beq.n	8004abe <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	823b      	strh	r3, [r7, #16]
 8004a32:	8a3b      	ldrh	r3, [r7, #16]
 8004a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01b      	beq.n	8004a74 <USB_EPClearStall+0x6c>
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a52:	81fb      	strh	r3, [r7, #14]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	441a      	add	r2, r3
 8004a5e:	89fb      	ldrh	r3, [r7, #14]
 8004a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	78db      	ldrb	r3, [r3, #3]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d06c      	beq.n	8004b56 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a92:	81bb      	strh	r3, [r7, #12]
 8004a94:	89bb      	ldrh	r3, [r7, #12]
 8004a96:	f083 0320 	eor.w	r3, r3, #32
 8004a9a:	81bb      	strh	r3, [r7, #12]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	441a      	add	r2, r3
 8004aa6:	89bb      	ldrh	r3, [r7, #12]
 8004aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	8013      	strh	r3, [r2, #0]
 8004abc:	e04b      	b.n	8004b56 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	82fb      	strh	r3, [r7, #22]
 8004acc:	8afb      	ldrh	r3, [r7, #22]
 8004ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01b      	beq.n	8004b0e <USB_EPClearStall+0x106>
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aec:	82bb      	strh	r3, [r7, #20]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	441a      	add	r2, r3
 8004af8:	8abb      	ldrh	r3, [r7, #20]
 8004afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b24:	827b      	strh	r3, [r7, #18]
 8004b26:	8a7b      	ldrh	r3, [r7, #18]
 8004b28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b2c:	827b      	strh	r3, [r7, #18]
 8004b2e:	8a7b      	ldrh	r3, [r7, #18]
 8004b30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b34:	827b      	strh	r3, [r7, #18]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	441a      	add	r2, r3
 8004b40:	8a7b      	ldrh	r3, [r7, #18]
 8004b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d103      	bne.n	8004b7c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2280      	movs	r2, #128	; 0x80
 8004b78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr

08004bb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr

08004bce <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b08d      	sub	sp, #52	; 0x34
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	4611      	mov	r1, r2
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	80fb      	strh	r3, [r7, #6]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004bfa:	88bb      	ldrh	r3, [r7, #4]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	005a      	lsls	r2, r3, #1
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c1c:	e01e      	b.n	8004c5c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	3301      	adds	r3, #1
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	3302      	adds	r3, #2
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	3302      	adds	r3, #2
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	3301      	adds	r3, #1
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1dd      	bne.n	8004c1e <USB_WritePMA+0x3a>
  }
}
 8004c62:	bf00      	nop
 8004c64:	3734      	adds	r7, #52	; 0x34
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b08b      	sub	sp, #44	; 0x2c
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	4611      	mov	r1, r2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	80fb      	strh	r3, [r7, #6]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004c82:	88bb      	ldrh	r3, [r7, #4]
 8004c84:	085b      	lsrs	r3, r3, #1
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	005a      	lsls	r2, r3, #1
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c9e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca4:	e01b      	b.n	8004cde <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e0      	bne.n	8004ca6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004ce4:	88bb      	ldrh	r3, [r7, #4]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	701a      	strb	r2, [r3, #0]
  }
}
 8004d00:	bf00      	nop
 8004d02:	372c      	adds	r7, #44	; 0x2c
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr

08004d0a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	7c1b      	ldrb	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d115      	bne.n	8004d4e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d26:	2202      	movs	r2, #2
 8004d28:	2181      	movs	r1, #129	; 0x81
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f004 fb7f 	bl	800942e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f004 fb75 	bl	800942e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004d4c:	e012      	b.n	8004d74 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d4e:	2340      	movs	r3, #64	; 0x40
 8004d50:	2202      	movs	r2, #2
 8004d52:	2181      	movs	r1, #129	; 0x81
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f004 fb6a 	bl	800942e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d60:	2340      	movs	r3, #64	; 0x40
 8004d62:	2202      	movs	r2, #2
 8004d64:	2101      	movs	r1, #1
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f004 fb61 	bl	800942e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d74:	2308      	movs	r3, #8
 8004d76:	2203      	movs	r2, #3
 8004d78:	2182      	movs	r1, #130	; 0x82
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f004 fb57 	bl	800942e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d86:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d8a:	f004 fc77 	bl	800967c <USBD_static_malloc>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
 8004da4:	e026      	b.n	8004df4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dac:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	7c1b      	ldrb	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d109      	bne.n	8004de4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dda:	2101      	movs	r1, #1
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f004 fc17 	bl	8009610 <USBD_LL_PrepareReceive>
 8004de2:	e007      	b.n	8004df4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dea:	2340      	movs	r3, #64	; 0x40
 8004dec:	2101      	movs	r1, #1
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f004 fc0e 	bl	8009610 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b084      	sub	sp, #16
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	460b      	mov	r3, r1
 8004e08:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004e0e:	2181      	movs	r1, #129	; 0x81
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f004 fb32 	bl	800947a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f004 fb2b 	bl	800947a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004e2c:	2182      	movs	r1, #130	; 0x82
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f004 fb23 	bl	800947a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00e      	beq.n	8004e62 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e54:	4618      	mov	r0, r3
 8004e56:	f004 fc1d 	bl	8009694 <USBD_static_free>
    pdev->pClassData = NULL;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e7c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d039      	beq.n	8004f0a <USBD_CDC_Setup+0x9e>
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	d17c      	bne.n	8004f94 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	88db      	ldrh	r3, [r3, #6]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d029      	beq.n	8004ef6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b25b      	sxtb	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	da11      	bge.n	8004ed0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004eb8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	88d2      	ldrh	r2, [r2, #6]
 8004ebe:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004ec0:	6939      	ldr	r1, [r7, #16]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	88db      	ldrh	r3, [r3, #6]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f001 f9f9 	bl	80062c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004ece:	e068      	b.n	8004fa2 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	785a      	ldrb	r2, [r3, #1]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	88db      	ldrh	r3, [r3, #6]
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004ee6:	6939      	ldr	r1, [r7, #16]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	88db      	ldrh	r3, [r3, #6]
 8004eec:	461a      	mov	r2, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f001 fa14 	bl	800631c <USBD_CtlPrepareRx>
      break;
 8004ef4:	e055      	b.n	8004fa2 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	7850      	ldrb	r0, [r2, #1]
 8004f02:	2200      	movs	r2, #0
 8004f04:	6839      	ldr	r1, [r7, #0]
 8004f06:	4798      	blx	r3
      break;
 8004f08:	e04b      	b.n	8004fa2 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	785b      	ldrb	r3, [r3, #1]
 8004f0e:	2b0a      	cmp	r3, #10
 8004f10:	d017      	beq.n	8004f42 <USBD_CDC_Setup+0xd6>
 8004f12:	2b0b      	cmp	r3, #11
 8004f14:	d029      	beq.n	8004f6a <USBD_CDC_Setup+0xfe>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d133      	bne.n	8004f82 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d107      	bne.n	8004f34 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004f24:	f107 030c 	add.w	r3, r7, #12
 8004f28:	2202      	movs	r2, #2
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f001 f9c7 	bl	80062c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f32:	e02e      	b.n	8004f92 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004f34:	6839      	ldr	r1, [r7, #0]
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f001 f958 	bl	80061ec <USBD_CtlError>
            ret = USBD_FAIL;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	75fb      	strb	r3, [r7, #23]
          break;
 8004f40:	e027      	b.n	8004f92 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d107      	bne.n	8004f5c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f4c:	f107 030f 	add.w	r3, r7, #15
 8004f50:	2201      	movs	r2, #1
 8004f52:	4619      	mov	r1, r3
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f001 f9b3 	bl	80062c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f5a:	e01a      	b.n	8004f92 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004f5c:	6839      	ldr	r1, [r7, #0]
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f001 f944 	bl	80061ec <USBD_CtlError>
            ret = USBD_FAIL;
 8004f64:	2302      	movs	r3, #2
 8004f66:	75fb      	strb	r3, [r7, #23]
          break;
 8004f68:	e013      	b.n	8004f92 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d00d      	beq.n	8004f90 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004f74:	6839      	ldr	r1, [r7, #0]
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f001 f938 	bl	80061ec <USBD_CtlError>
            ret = USBD_FAIL;
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004f80:	e006      	b.n	8004f90 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f001 f931 	bl	80061ec <USBD_CtlError>
          ret = USBD_FAIL;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f8e:	e000      	b.n	8004f92 <USBD_CDC_Setup+0x126>
          break;
 8004f90:	bf00      	nop
      }
      break;
 8004f92:	e006      	b.n	8004fa2 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 f928 	bl	80061ec <USBD_CtlError>
      ret = USBD_FAIL;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa0:	bf00      	nop
  }

  return ret;
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fbe:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fc6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d03a      	beq.n	8005048 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004fd2:	78fa      	ldrb	r2, [r7, #3]
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	331c      	adds	r3, #28
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d029      	beq.n	800503c <USBD_CDC_DataIn+0x90>
 8004fe8:	78fa      	ldrb	r2, [r7, #3]
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	331c      	adds	r3, #28
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	78f9      	ldrb	r1, [r7, #3]
 8004ffc:	68b8      	ldr	r0, [r7, #8]
 8004ffe:	460b      	mov	r3, r1
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4403      	add	r3, r0
 8005008:	3338      	adds	r3, #56	; 0x38
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005010:	fb03 f301 	mul.w	r3, r3, r1
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d110      	bne.n	800503c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800501a:	78fa      	ldrb	r2, [r7, #3]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	331c      	adds	r3, #28
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800502e:	78f9      	ldrb	r1, [r7, #3]
 8005030:	2300      	movs	r3, #0
 8005032:	2200      	movs	r2, #0
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f004 fac8 	bl	80095ca <USBD_LL_Transmit>
 800503a:	e003      	b.n	8005044 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	e000      	b.n	800504a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005048:	2302      	movs	r3, #2
  }
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005064:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f004 faf3 	bl	8009656 <USBD_LL_GetRxDataSize>
 8005070:	4602      	mov	r2, r0
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00d      	beq.n	800509e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005096:	4611      	mov	r1, r2
 8005098:	4798      	blx	r3

    return USBD_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	e000      	b.n	80050a0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800509e:	2302      	movs	r3, #2
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050b6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d015      	beq.n	80050ee <USBD_CDC_EP0_RxReady+0x46>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80050c8:	2bff      	cmp	r3, #255	; 0xff
 80050ca:	d010      	beq.n	80050ee <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80050da:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80050e2:	b292      	uxth	r2, r2
 80050e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	22ff      	movs	r2, #255	; 0xff
 80050ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2243      	movs	r2, #67	; 0x43
 8005104:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005106:	4b03      	ldr	r3, [pc, #12]	; (8005114 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20000094 	.word	0x20000094

08005118 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2243      	movs	r2, #67	; 0x43
 8005124:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005126:	4b03      	ldr	r3, [pc, #12]	; (8005134 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000050 	.word	0x20000050

08005138 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2243      	movs	r2, #67	; 0x43
 8005144:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005146:	4b03      	ldr	r3, [pc, #12]	; (8005154 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	200000d8 	.word	0x200000d8

08005158 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	220a      	movs	r2, #10
 8005164:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005166:	4b03      	ldr	r3, [pc, #12]	; (8005174 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	2000000c 	.word	0x2000000c

08005178 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005182:	2302      	movs	r3, #2
 8005184:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005198:	7bfb      	ldrb	r3, [r7, #15]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr

080051d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051e6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr

080051fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800520a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d01c      	beq.n	8005250 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800521c:	2b00      	cmp	r3, #0
 800521e:	d115      	bne.n	800524c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800523e:	b29b      	uxth	r3, r3
 8005240:	2181      	movs	r1, #129	; 0x81
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f004 f9c1 	bl	80095ca <USBD_LL_Transmit>

      return USBD_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e002      	b.n	8005252 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005268:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005270:	2b00      	cmp	r3, #0
 8005272:	d017      	beq.n	80052a4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	7c1b      	ldrb	r3, [r3, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d109      	bne.n	8005290 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005286:	2101      	movs	r1, #1
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f004 f9c1 	bl	8009610 <USBD_LL_PrepareReceive>
 800528e:	e007      	b.n	80052a0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005296:	2340      	movs	r3, #64	; 0x40
 8005298:	2101      	movs	r1, #1
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f004 f9b8 	bl	8009610 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	e000      	b.n	80052a6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80052a4:	2302      	movs	r3, #2
  }
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	4613      	mov	r3, r2
 80052ba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80052c2:	2302      	movs	r3, #2
 80052c4:	e01a      	b.n	80052fc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	79fa      	ldrb	r2, [r7, #7]
 80052f2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f004 f825 	bl	8009344 <USBD_LL_Init>

  return USBD_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d006      	beq.n	8005326 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	73fb      	strb	r3, [r7, #15]
 8005324:	e001      	b.n	800532a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005326:	2302      	movs	r3, #2
 8005328:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800532a:	7bfb      	ldrb	r3, [r7, #15]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	bc80      	pop	{r7}
 8005334:	4770      	bx	lr

08005336 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f004 f85a 	bl	80093f8 <USBD_LL_Start>

  return USBD_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr

08005362 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	460b      	mov	r3, r1
 800536c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800536e:	2302      	movs	r3, #2
 8005370:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00c      	beq.n	8005396 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	78fa      	ldrb	r2, [r7, #3]
 8005386:	4611      	mov	r1, r2
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	4798      	blx	r3
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005396:	7bfb      	ldrb	r3, [r7, #15]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	4611      	mov	r1, r2
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4798      	blx	r3

  return USBD_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fecb 	bl	8006174 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80053ec:	461a      	mov	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d00c      	beq.n	800541c <USBD_LL_SetupStage+0x56>
 8005402:	2b01      	cmp	r3, #1
 8005404:	d302      	bcc.n	800540c <USBD_LL_SetupStage+0x46>
 8005406:	2b02      	cmp	r3, #2
 8005408:	d010      	beq.n	800542c <USBD_LL_SetupStage+0x66>
 800540a:	e017      	b.n	800543c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005412:	4619      	mov	r1, r3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f9cb 	bl	80057b0 <USBD_StdDevReq>
      break;
 800541a:	e01a      	b.n	8005452 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fa2d 	bl	8005884 <USBD_StdItfReq>
      break;
 800542a:	e012      	b.n	8005452 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fa6b 	bl	8005910 <USBD_StdEPReq>
      break;
 800543a:	e00a      	b.n	8005452 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005442:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005446:	b2db      	uxtb	r3, r3
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f004 f834 	bl	80094b8 <USBD_LL_StallEP>
      break;
 8005450:	bf00      	nop
  }

  return USBD_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	460b      	mov	r3, r1
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800546a:	7afb      	ldrb	r3, [r7, #11]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d14b      	bne.n	8005508 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005476:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800547e:	2b03      	cmp	r3, #3
 8005480:	d134      	bne.n	80054ec <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	429a      	cmp	r2, r3
 800548c:	d919      	bls.n	80054c2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	1ad2      	subs	r2, r2, r3
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d203      	bcs.n	80054b0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	e002      	b.n	80054b6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	461a      	mov	r2, r3
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 ff4c 	bl	8006358 <USBD_CtlContinueRx>
 80054c0:	e038      	b.n	8005534 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d105      	bne.n	80054e4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 ff49 	bl	800637c <USBD_CtlSendStatus>
 80054ea:	e023      	b.n	8005534 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	d11e      	bne.n	8005534 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80054fe:	2100      	movs	r1, #0
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f003 ffd9 	bl	80094b8 <USBD_LL_StallEP>
 8005506:	e015      	b.n	8005534 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00d      	beq.n	8005530 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800551a:	2b03      	cmp	r3, #3
 800551c:	d108      	bne.n	8005530 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	7afa      	ldrb	r2, [r7, #11]
 8005528:	4611      	mov	r1, r2
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	4798      	blx	r3
 800552e:	e001      	b.n	8005534 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005530:	2302      	movs	r3, #2
 8005532:	e000      	b.n	8005536 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b086      	sub	sp, #24
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	460b      	mov	r3, r1
 8005548:	607a      	str	r2, [r7, #4]
 800554a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800554c:	7afb      	ldrb	r3, [r7, #11]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d17f      	bne.n	8005652 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3314      	adds	r3, #20
 8005556:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800555e:	2b02      	cmp	r3, #2
 8005560:	d15c      	bne.n	800561c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	429a      	cmp	r2, r3
 800556c:	d915      	bls.n	800559a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	1ad2      	subs	r2, r2, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	b29b      	uxth	r3, r3
 8005582:	461a      	mov	r2, r3
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 feb6 	bl	80062f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800558c:	2300      	movs	r3, #0
 800558e:	2200      	movs	r2, #0
 8005590:	2100      	movs	r1, #0
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f004 f83c 	bl	8009610 <USBD_LL_PrepareReceive>
 8005598:	e04e      	b.n	8005638 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	6912      	ldr	r2, [r2, #16]
 80055a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80055a6:	fb02 f201 	mul.w	r2, r2, r1
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d11c      	bne.n	80055ea <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d316      	bcc.n	80055ea <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d20f      	bcs.n	80055ea <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055ca:	2200      	movs	r2, #0
 80055cc:	2100      	movs	r1, #0
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fe92 	bl	80062f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055dc:	2300      	movs	r3, #0
 80055de:	2200      	movs	r2, #0
 80055e0:	2100      	movs	r1, #0
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f004 f814 	bl	8009610 <USBD_LL_PrepareReceive>
 80055e8:	e026      	b.n	8005638 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d105      	bne.n	800560c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800560c:	2180      	movs	r1, #128	; 0x80
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f003 ff52 	bl	80094b8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fec4 	bl	80063a2 <USBD_CtlReceiveStatus>
 800561a:	e00d      	b.n	8005638 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005622:	2b04      	cmp	r3, #4
 8005624:	d004      	beq.n	8005630 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800562c:	2b00      	cmp	r3, #0
 800562e:	d103      	bne.n	8005638 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005630:	2180      	movs	r1, #128	; 0x80
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f003 ff40 	bl	80094b8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800563e:	2b01      	cmp	r3, #1
 8005640:	d11d      	bne.n	800567e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f7ff fe83 	bl	800534e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005650:	e015      	b.n	800567e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00d      	beq.n	800567a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005664:	2b03      	cmp	r3, #3
 8005666:	d108      	bne.n	800567a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	7afa      	ldrb	r2, [r7, #11]
 8005672:	4611      	mov	r1, r2
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	4798      	blx	r3
 8005678:	e001      	b.n	800567e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800567a:	2302      	movs	r3, #2
 800567c:	e000      	b.n	8005680 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005690:	2340      	movs	r3, #64	; 0x40
 8005692:	2200      	movs	r2, #0
 8005694:	2100      	movs	r1, #0
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f003 fec9 	bl	800942e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2240      	movs	r2, #64	; 0x40
 80056a8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056ac:	2340      	movs	r3, #64	; 0x40
 80056ae:	2200      	movs	r2, #0
 80056b0:	2180      	movs	r1, #128	; 0x80
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f003 febb 	bl	800942e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2240      	movs	r2, #64	; 0x40
 80056c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d009      	beq.n	8005700 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6852      	ldr	r2, [r2, #4]
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	4611      	mov	r1, r2
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	4798      	blx	r3
  }

  return USBD_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	78fa      	ldrb	r2, [r7, #3]
 800571a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr

08005728 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2204      	movs	r2, #4
 8005740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800575e:	2b04      	cmp	r3, #4
 8005760:	d105      	bne.n	800576e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr

0800577a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005788:	2b03      	cmp	r3, #3
 800578a:	d10b      	bne.n	80057a4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d004      	beq.n	80057d4 <USBD_StdDevReq+0x24>
 80057ca:	2b40      	cmp	r3, #64	; 0x40
 80057cc:	d002      	beq.n	80057d4 <USBD_StdDevReq+0x24>
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d008      	beq.n	80057e4 <USBD_StdDevReq+0x34>
 80057d2:	e04c      	b.n	800586e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	4798      	blx	r3
      break;
 80057e2:	e049      	b.n	8005878 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	2b09      	cmp	r3, #9
 80057ea:	d83a      	bhi.n	8005862 <USBD_StdDevReq+0xb2>
 80057ec:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <USBD_StdDevReq+0x44>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	08005845 	.word	0x08005845
 80057f8:	08005859 	.word	0x08005859
 80057fc:	08005863 	.word	0x08005863
 8005800:	0800584f 	.word	0x0800584f
 8005804:	08005863 	.word	0x08005863
 8005808:	08005827 	.word	0x08005827
 800580c:	0800581d 	.word	0x0800581d
 8005810:	08005863 	.word	0x08005863
 8005814:	0800583b 	.word	0x0800583b
 8005818:	08005831 	.word	0x08005831
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800581c:	6839      	ldr	r1, [r7, #0]
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f9d4 	bl	8005bcc <USBD_GetDescriptor>
          break;
 8005824:	e022      	b.n	800586c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005826:	6839      	ldr	r1, [r7, #0]
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fb37 	bl	8005e9c <USBD_SetAddress>
          break;
 800582e:	e01d      	b.n	800586c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fb74 	bl	8005f20 <USBD_SetConfig>
          break;
 8005838:	e018      	b.n	800586c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800583a:	6839      	ldr	r1, [r7, #0]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fbfd 	bl	800603c <USBD_GetConfig>
          break;
 8005842:	e013      	b.n	800586c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fc2c 	bl	80060a4 <USBD_GetStatus>
          break;
 800584c:	e00e      	b.n	800586c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fc5a 	bl	800610a <USBD_SetFeature>
          break;
 8005856:	e009      	b.n	800586c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fc69 	bl	8006132 <USBD_ClrFeature>
          break;
 8005860:	e004      	b.n	800586c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fcc1 	bl	80061ec <USBD_CtlError>
          break;
 800586a:	bf00      	nop
      }
      break;
 800586c:	e004      	b.n	8005878 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fcbb 	bl	80061ec <USBD_CtlError>
      break;
 8005876:	bf00      	nop
  }

  return ret;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop

08005884 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800589a:	2b20      	cmp	r3, #32
 800589c:	d003      	beq.n	80058a6 <USBD_StdItfReq+0x22>
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	d001      	beq.n	80058a6 <USBD_StdItfReq+0x22>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d12a      	bne.n	80058fc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ac:	3b01      	subs	r3, #1
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d81d      	bhi.n	80058ee <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	889b      	ldrh	r3, [r3, #4]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d813      	bhi.n	80058e4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	88db      	ldrh	r3, [r3, #6]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d110      	bne.n	80058f8 <USBD_StdItfReq+0x74>
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10d      	bne.n	80058f8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fd4d 	bl	800637c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058e2:	e009      	b.n	80058f8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fc80 	bl	80061ec <USBD_CtlError>
          break;
 80058ec:	e004      	b.n	80058f8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fc7b 	bl	80061ec <USBD_CtlError>
          break;
 80058f6:	e000      	b.n	80058fa <USBD_StdItfReq+0x76>
          break;
 80058f8:	bf00      	nop
      }
      break;
 80058fa:	e004      	b.n	8005906 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80058fc:	6839      	ldr	r1, [r7, #0]
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fc74 	bl	80061ec <USBD_CtlError>
      break;
 8005904:	bf00      	nop
  }

  return USBD_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	889b      	ldrh	r3, [r3, #4]
 8005922:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800592c:	2b20      	cmp	r3, #32
 800592e:	d004      	beq.n	800593a <USBD_StdEPReq+0x2a>
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d002      	beq.n	800593a <USBD_StdEPReq+0x2a>
 8005934:	2b00      	cmp	r3, #0
 8005936:	d008      	beq.n	800594a <USBD_StdEPReq+0x3a>
 8005938:	e13d      	b.n	8005bb6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	4798      	blx	r3
      break;
 8005948:	e13a      	b.n	8005bc0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005952:	2b20      	cmp	r3, #32
 8005954:	d10a      	bne.n	800596c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	e12a      	b.n	8005bc2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d03e      	beq.n	80059f2 <USBD_StdEPReq+0xe2>
 8005974:	2b03      	cmp	r3, #3
 8005976:	d002      	beq.n	800597e <USBD_StdEPReq+0x6e>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d070      	beq.n	8005a5e <USBD_StdEPReq+0x14e>
 800597c:	e115      	b.n	8005baa <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005984:	2b02      	cmp	r3, #2
 8005986:	d002      	beq.n	800598e <USBD_StdEPReq+0x7e>
 8005988:	2b03      	cmp	r3, #3
 800598a:	d015      	beq.n	80059b8 <USBD_StdEPReq+0xa8>
 800598c:	e02b      	b.n	80059e6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800598e:	7bbb      	ldrb	r3, [r7, #14]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00c      	beq.n	80059ae <USBD_StdEPReq+0x9e>
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	2b80      	cmp	r3, #128	; 0x80
 8005998:	d009      	beq.n	80059ae <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800599a:	7bbb      	ldrb	r3, [r7, #14]
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f003 fd8a 	bl	80094b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80059a4:	2180      	movs	r1, #128	; 0x80
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f003 fd86 	bl	80094b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059ac:	e020      	b.n	80059f0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fc1b 	bl	80061ec <USBD_CtlError>
              break;
 80059b6:	e01b      	b.n	80059f0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	885b      	ldrh	r3, [r3, #2]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10e      	bne.n	80059de <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80059c0:	7bbb      	ldrb	r3, [r7, #14]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00b      	beq.n	80059de <USBD_StdEPReq+0xce>
 80059c6:	7bbb      	ldrb	r3, [r7, #14]
 80059c8:	2b80      	cmp	r3, #128	; 0x80
 80059ca:	d008      	beq.n	80059de <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	88db      	ldrh	r3, [r3, #6]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80059d4:	7bbb      	ldrb	r3, [r7, #14]
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f003 fd6d 	bl	80094b8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fccc 	bl	800637c <USBD_CtlSendStatus>

              break;
 80059e4:	e004      	b.n	80059f0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fbff 	bl	80061ec <USBD_CtlError>
              break;
 80059ee:	bf00      	nop
          }
          break;
 80059f0:	e0e0      	b.n	8005bb4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d002      	beq.n	8005a02 <USBD_StdEPReq+0xf2>
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d015      	beq.n	8005a2c <USBD_StdEPReq+0x11c>
 8005a00:	e026      	b.n	8005a50 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00c      	beq.n	8005a22 <USBD_StdEPReq+0x112>
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	2b80      	cmp	r3, #128	; 0x80
 8005a0c:	d009      	beq.n	8005a22 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a0e:	7bbb      	ldrb	r3, [r7, #14]
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f003 fd50 	bl	80094b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a18:	2180      	movs	r1, #128	; 0x80
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f003 fd4c 	bl	80094b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a20:	e01c      	b.n	8005a5c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fbe1 	bl	80061ec <USBD_CtlError>
              break;
 8005a2a:	e017      	b.n	8005a5c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	885b      	ldrh	r3, [r3, #2]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d112      	bne.n	8005a5a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a34:	7bbb      	ldrb	r3, [r7, #14]
 8005a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a3e:	7bbb      	ldrb	r3, [r7, #14]
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f003 fd57 	bl	80094f6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fc97 	bl	800637c <USBD_CtlSendStatus>
              }
              break;
 8005a4e:	e004      	b.n	8005a5a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fbca 	bl	80061ec <USBD_CtlError>
              break;
 8005a58:	e000      	b.n	8005a5c <USBD_StdEPReq+0x14c>
              break;
 8005a5a:	bf00      	nop
          }
          break;
 8005a5c:	e0aa      	b.n	8005bb4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d002      	beq.n	8005a6e <USBD_StdEPReq+0x15e>
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d032      	beq.n	8005ad2 <USBD_StdEPReq+0x1c2>
 8005a6c:	e097      	b.n	8005b9e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a6e:	7bbb      	ldrb	r3, [r7, #14]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d007      	beq.n	8005a84 <USBD_StdEPReq+0x174>
 8005a74:	7bbb      	ldrb	r3, [r7, #14]
 8005a76:	2b80      	cmp	r3, #128	; 0x80
 8005a78:	d004      	beq.n	8005a84 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005a7a:	6839      	ldr	r1, [r7, #0]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fbb5 	bl	80061ec <USBD_CtlError>
                break;
 8005a82:	e091      	b.n	8005ba8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	da0b      	bge.n	8005aa4 <USBD_StdEPReq+0x194>
 8005a8c:	7bbb      	ldrb	r3, [r7, #14]
 8005a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	3310      	adds	r3, #16
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	e00b      	b.n	8005abc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005aa4:	7bbb      	ldrb	r3, [r7, #14]
 8005aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	4413      	add	r3, r2
 8005aba:	3304      	adds	r3, #4
 8005abc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fbf8 	bl	80062c0 <USBD_CtlSendData>
              break;
 8005ad0:	e06a      	b.n	8005ba8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005ad2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da11      	bge.n	8005afe <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ada:	7bbb      	ldrb	r3, [r7, #14]
 8005adc:	f003 020f 	and.w	r2, r3, #15
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	3318      	adds	r3, #24
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d117      	bne.n	8005b24 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fb78 	bl	80061ec <USBD_CtlError>
                  break;
 8005afc:	e054      	b.n	8005ba8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	f003 020f 	and.w	r2, r3, #15
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005b1a:	6839      	ldr	r1, [r7, #0]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fb65 	bl	80061ec <USBD_CtlError>
                  break;
 8005b22:	e041      	b.n	8005ba8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	da0b      	bge.n	8005b44 <USBD_StdEPReq+0x234>
 8005b2c:	7bbb      	ldrb	r3, [r7, #14]
 8005b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	3310      	adds	r3, #16
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	4413      	add	r3, r2
 8005b40:	3304      	adds	r3, #4
 8005b42:	e00b      	b.n	8005b5c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b44:	7bbb      	ldrb	r3, [r7, #14]
 8005b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	4413      	add	r3, r2
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b5e:	7bbb      	ldrb	r3, [r7, #14]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <USBD_StdEPReq+0x25a>
 8005b64:	7bbb      	ldrb	r3, [r7, #14]
 8005b66:	2b80      	cmp	r3, #128	; 0x80
 8005b68:	d103      	bne.n	8005b72 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	e00e      	b.n	8005b90 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005b72:	7bbb      	ldrb	r3, [r7, #14]
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f003 fcdc 	bl	8009534 <USBD_LL_IsStallEP>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2201      	movs	r2, #1
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	e002      	b.n	8005b90 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2202      	movs	r2, #2
 8005b94:	4619      	mov	r1, r3
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fb92 	bl	80062c0 <USBD_CtlSendData>
              break;
 8005b9c:	e004      	b.n	8005ba8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fb23 	bl	80061ec <USBD_CtlError>
              break;
 8005ba6:	bf00      	nop
          }
          break;
 8005ba8:	e004      	b.n	8005bb4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fb1d 	bl	80061ec <USBD_CtlError>
          break;
 8005bb2:	bf00      	nop
      }
      break;
 8005bb4:	e004      	b.n	8005bc0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fb17 	bl	80061ec <USBD_CtlError>
      break;
 8005bbe:	bf00      	nop
  }

  return ret;
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
	...

08005bcc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	885b      	ldrh	r3, [r3, #2]
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	2b06      	cmp	r3, #6
 8005bee:	f200 8128 	bhi.w	8005e42 <USBD_GetDescriptor+0x276>
 8005bf2:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <USBD_GetDescriptor+0x2c>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c15 	.word	0x08005c15
 8005bfc:	08005c2d 	.word	0x08005c2d
 8005c00:	08005c6d 	.word	0x08005c6d
 8005c04:	08005e43 	.word	0x08005e43
 8005c08:	08005e43 	.word	0x08005e43
 8005c0c:	08005de3 	.word	0x08005de3
 8005c10:	08005e0f 	.word	0x08005e0f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	7c12      	ldrb	r2, [r2, #16]
 8005c20:	f107 0108 	add.w	r1, r7, #8
 8005c24:	4610      	mov	r0, r2
 8005c26:	4798      	blx	r3
 8005c28:	60f8      	str	r0, [r7, #12]
      break;
 8005c2a:	e112      	b.n	8005e52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	7c1b      	ldrb	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10d      	bne.n	8005c50 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	f107 0208 	add.w	r2, r7, #8
 8005c40:	4610      	mov	r0, r2
 8005c42:	4798      	blx	r3
 8005c44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005c4e:	e100      	b.n	8005e52 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	f107 0208 	add.w	r2, r7, #8
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	4798      	blx	r3
 8005c60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3301      	adds	r3, #1
 8005c66:	2202      	movs	r2, #2
 8005c68:	701a      	strb	r2, [r3, #0]
      break;
 8005c6a:	e0f2      	b.n	8005e52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	885b      	ldrh	r3, [r3, #2]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b05      	cmp	r3, #5
 8005c74:	f200 80ac 	bhi.w	8005dd0 <USBD_GetDescriptor+0x204>
 8005c78:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <USBD_GetDescriptor+0xb4>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005c99 	.word	0x08005c99
 8005c84:	08005ccd 	.word	0x08005ccd
 8005c88:	08005d01 	.word	0x08005d01
 8005c8c:	08005d35 	.word	0x08005d35
 8005c90:	08005d69 	.word	0x08005d69
 8005c94:	08005d9d 	.word	0x08005d9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00b      	beq.n	8005cbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	7c12      	ldrb	r2, [r2, #16]
 8005cb0:	f107 0108 	add.w	r1, r7, #8
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4798      	blx	r3
 8005cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cba:	e091      	b.n	8005de0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fa94 	bl	80061ec <USBD_CtlError>
            err++;
 8005cc4:	7afb      	ldrb	r3, [r7, #11]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8005cca:	e089      	b.n	8005de0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	7c12      	ldrb	r2, [r2, #16]
 8005ce4:	f107 0108 	add.w	r1, r7, #8
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4798      	blx	r3
 8005cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cee:	e077      	b.n	8005de0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa7a 	bl	80061ec <USBD_CtlError>
            err++;
 8005cf8:	7afb      	ldrb	r3, [r7, #11]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cfe:	e06f      	b.n	8005de0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00b      	beq.n	8005d24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	7c12      	ldrb	r2, [r2, #16]
 8005d18:	f107 0108 	add.w	r1, r7, #8
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
 8005d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d22:	e05d      	b.n	8005de0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fa60 	bl	80061ec <USBD_CtlError>
            err++;
 8005d2c:	7afb      	ldrb	r3, [r7, #11]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	72fb      	strb	r3, [r7, #11]
          break;
 8005d32:	e055      	b.n	8005de0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	7c12      	ldrb	r2, [r2, #16]
 8005d4c:	f107 0108 	add.w	r1, r7, #8
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d56:	e043      	b.n	8005de0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fa46 	bl	80061ec <USBD_CtlError>
            err++;
 8005d60:	7afb      	ldrb	r3, [r7, #11]
 8005d62:	3301      	adds	r3, #1
 8005d64:	72fb      	strb	r3, [r7, #11]
          break;
 8005d66:	e03b      	b.n	8005de0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	7c12      	ldrb	r2, [r2, #16]
 8005d80:	f107 0108 	add.w	r1, r7, #8
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
 8005d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d8a:	e029      	b.n	8005de0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa2c 	bl	80061ec <USBD_CtlError>
            err++;
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	3301      	adds	r3, #1
 8005d98:	72fb      	strb	r3, [r7, #11]
          break;
 8005d9a:	e021      	b.n	8005de0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	7c12      	ldrb	r2, [r2, #16]
 8005db4:	f107 0108 	add.w	r1, r7, #8
 8005db8:	4610      	mov	r0, r2
 8005dba:	4798      	blx	r3
 8005dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dbe:	e00f      	b.n	8005de0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa12 	bl	80061ec <USBD_CtlError>
            err++;
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8005dce:	e007      	b.n	8005de0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa0a 	bl	80061ec <USBD_CtlError>
          err++;
 8005dd8:	7afb      	ldrb	r3, [r7, #11]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005dde:	e038      	b.n	8005e52 <USBD_GetDescriptor+0x286>
 8005de0:	e037      	b.n	8005e52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	7c1b      	ldrb	r3, [r3, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d109      	bne.n	8005dfe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df2:	f107 0208 	add.w	r2, r7, #8
 8005df6:	4610      	mov	r0, r2
 8005df8:	4798      	blx	r3
 8005dfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dfc:	e029      	b.n	8005e52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f9f3 	bl	80061ec <USBD_CtlError>
        err++;
 8005e06:	7afb      	ldrb	r3, [r7, #11]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	72fb      	strb	r3, [r7, #11]
      break;
 8005e0c:	e021      	b.n	8005e52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	7c1b      	ldrb	r3, [r3, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10d      	bne.n	8005e32 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	f107 0208 	add.w	r2, r7, #8
 8005e22:	4610      	mov	r0, r2
 8005e24:	4798      	blx	r3
 8005e26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	2207      	movs	r2, #7
 8005e2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e30:	e00f      	b.n	8005e52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f9d9 	bl	80061ec <USBD_CtlError>
        err++;
 8005e3a:	7afb      	ldrb	r3, [r7, #11]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	72fb      	strb	r3, [r7, #11]
      break;
 8005e40:	e007      	b.n	8005e52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f9d1 	bl	80061ec <USBD_CtlError>
      err++;
 8005e4a:	7afb      	ldrb	r3, [r7, #11]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	72fb      	strb	r3, [r7, #11]
      break;
 8005e50:	bf00      	nop
  }

  if (err != 0U)
 8005e52:	7afb      	ldrb	r3, [r7, #11]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d11c      	bne.n	8005e92 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005e58:	893b      	ldrh	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d011      	beq.n	8005e82 <USBD_GetDescriptor+0x2b6>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	88db      	ldrh	r3, [r3, #6]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00d      	beq.n	8005e82 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	88da      	ldrh	r2, [r3, #6]
 8005e6a:	893b      	ldrh	r3, [r7, #8]
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	bf28      	it	cs
 8005e70:	4613      	movcs	r3, r2
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e76:	893b      	ldrh	r3, [r7, #8]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	68f9      	ldr	r1, [r7, #12]
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fa1f 	bl	80062c0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	88db      	ldrh	r3, [r3, #6]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa76 	bl	800637c <USBD_CtlSendStatus>
 8005e90:	e000      	b.n	8005e94 <USBD_GetDescriptor+0x2c8>
    return;
 8005e92:	bf00      	nop
    }
  }
}
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop

08005e9c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	889b      	ldrh	r3, [r3, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d130      	bne.n	8005f10 <USBD_SetAddress+0x74>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	88db      	ldrh	r3, [r3, #6]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d12c      	bne.n	8005f10 <USBD_SetAddress+0x74>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	885b      	ldrh	r3, [r3, #2]
 8005eba:	2b7f      	cmp	r3, #127	; 0x7f
 8005ebc:	d828      	bhi.n	8005f10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	885b      	ldrh	r3, [r3, #2]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d104      	bne.n	8005ede <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f988 	bl	80061ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005edc:	e01c      	b.n	8005f18 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	7bfa      	ldrb	r2, [r7, #15]
 8005ee2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f003 fb4e 	bl	800958c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fa43 	bl	800637c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f04:	e008      	b.n	8005f18 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f0e:	e003      	b.n	8005f18 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f96a 	bl	80061ec <USBD_CtlError>
  }
}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	885b      	ldrh	r3, [r3, #2]
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	4b41      	ldr	r3, [pc, #260]	; (8006038 <USBD_SetConfig+0x118>)
 8005f32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f34:	4b40      	ldr	r3, [pc, #256]	; (8006038 <USBD_SetConfig+0x118>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d904      	bls.n	8005f46 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f954 	bl	80061ec <USBD_CtlError>
 8005f44:	e075      	b.n	8006032 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d002      	beq.n	8005f56 <USBD_SetConfig+0x36>
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d023      	beq.n	8005f9c <USBD_SetConfig+0x7c>
 8005f54:	e062      	b.n	800601c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005f56:	4b38      	ldr	r3, [pc, #224]	; (8006038 <USBD_SetConfig+0x118>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d01a      	beq.n	8005f94 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005f5e:	4b36      	ldr	r3, [pc, #216]	; (8006038 <USBD_SetConfig+0x118>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	461a      	mov	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f70:	4b31      	ldr	r3, [pc, #196]	; (8006038 <USBD_SetConfig+0x118>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7ff f9f3 	bl	8005362 <USBD_SetClassConfig>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d104      	bne.n	8005f8c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005f82:	6839      	ldr	r1, [r7, #0]
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f931 	bl	80061ec <USBD_CtlError>
            return;
 8005f8a:	e052      	b.n	8006032 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f9f5 	bl	800637c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005f92:	e04e      	b.n	8006032 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f9f1 	bl	800637c <USBD_CtlSendStatus>
        break;
 8005f9a:	e04a      	b.n	8006032 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005f9c:	4b26      	ldr	r3, [pc, #152]	; (8006038 <USBD_SetConfig+0x118>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d112      	bne.n	8005fca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005fac:	4b22      	ldr	r3, [pc, #136]	; (8006038 <USBD_SetConfig+0x118>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005fb6:	4b20      	ldr	r3, [pc, #128]	; (8006038 <USBD_SetConfig+0x118>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff f9ef 	bl	80053a0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f9da 	bl	800637c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005fc8:	e033      	b.n	8006032 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005fca:	4b1b      	ldr	r3, [pc, #108]	; (8006038 <USBD_SetConfig+0x118>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d01d      	beq.n	8006014 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff f9dd 	bl	80053a0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005fe6:	4b14      	ldr	r3, [pc, #80]	; (8006038 <USBD_SetConfig+0x118>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005ff0:	4b11      	ldr	r3, [pc, #68]	; (8006038 <USBD_SetConfig+0x118>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff f9b3 	bl	8005362 <USBD_SetClassConfig>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d104      	bne.n	800600c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f8f1 	bl	80061ec <USBD_CtlError>
            return;
 800600a:	e012      	b.n	8006032 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f9b5 	bl	800637c <USBD_CtlSendStatus>
        break;
 8006012:	e00e      	b.n	8006032 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f9b1 	bl	800637c <USBD_CtlSendStatus>
        break;
 800601a:	e00a      	b.n	8006032 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f8e4 	bl	80061ec <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006024:	4b04      	ldr	r3, [pc, #16]	; (8006038 <USBD_SetConfig+0x118>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff f9b8 	bl	80053a0 <USBD_ClrClassConfig>
        break;
 8006030:	bf00      	nop
    }
  }
}
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	2000019c 	.word	0x2000019c

0800603c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	88db      	ldrh	r3, [r3, #6]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d004      	beq.n	8006058 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f8cb 	bl	80061ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006056:	e021      	b.n	800609c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800605e:	2b01      	cmp	r3, #1
 8006060:	db17      	blt.n	8006092 <USBD_GetConfig+0x56>
 8006062:	2b02      	cmp	r3, #2
 8006064:	dd02      	ble.n	800606c <USBD_GetConfig+0x30>
 8006066:	2b03      	cmp	r3, #3
 8006068:	d00b      	beq.n	8006082 <USBD_GetConfig+0x46>
 800606a:	e012      	b.n	8006092 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3308      	adds	r3, #8
 8006076:	2201      	movs	r2, #1
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f920 	bl	80062c0 <USBD_CtlSendData>
        break;
 8006080:	e00c      	b.n	800609c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3304      	adds	r3, #4
 8006086:	2201      	movs	r2, #1
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f918 	bl	80062c0 <USBD_CtlSendData>
        break;
 8006090:	e004      	b.n	800609c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f8a9 	bl	80061ec <USBD_CtlError>
        break;
 800609a:	bf00      	nop
}
 800609c:	bf00      	nop
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b4:	3b01      	subs	r3, #1
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d81e      	bhi.n	80060f8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	88db      	ldrh	r3, [r3, #6]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d004      	beq.n	80060cc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f891 	bl	80061ec <USBD_CtlError>
        break;
 80060ca:	e01a      	b.n	8006102 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f043 0202 	orr.w	r2, r3, #2
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	330c      	adds	r3, #12
 80060ec:	2202      	movs	r2, #2
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f8e5 	bl	80062c0 <USBD_CtlSendData>
      break;
 80060f6:	e004      	b.n	8006102 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f876 	bl	80061ec <USBD_CtlError>
      break;
 8006100:	bf00      	nop
  }
}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	885b      	ldrh	r3, [r3, #2]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d106      	bne.n	800612a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f929 	bl	800637c <USBD_CtlSendStatus>
  }
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006142:	3b01      	subs	r3, #1
 8006144:	2b02      	cmp	r3, #2
 8006146:	d80b      	bhi.n	8006160 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	885b      	ldrh	r3, [r3, #2]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d10c      	bne.n	800616a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f90f 	bl	800637c <USBD_CtlSendStatus>
      }
      break;
 800615e:	e004      	b.n	800616a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f842 	bl	80061ec <USBD_CtlError>
      break;
 8006168:	e000      	b.n	800616c <USBD_ClrFeature+0x3a>
      break;
 800616a:	bf00      	nop
  }
}
 800616c:	bf00      	nop
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781a      	ldrb	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	785a      	ldrb	r2, [r3, #1]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	3302      	adds	r3, #2
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	b29a      	uxth	r2, r3
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	3303      	adds	r3, #3
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	021b      	lsls	r3, r3, #8
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	4413      	add	r3, r2
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	3304      	adds	r3, #4
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	3305      	adds	r3, #5
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	b29b      	uxth	r3, r3
 80061be:	4413      	add	r3, r2
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	3306      	adds	r3, #6
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	3307      	adds	r3, #7
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	021b      	lsls	r3, r3, #8
 80061d8:	b29b      	uxth	r3, r3
 80061da:	4413      	add	r3, r2
 80061dc:	b29a      	uxth	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	80da      	strh	r2, [r3, #6]

}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80061f6:	2180      	movs	r1, #128	; 0x80
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f003 f95d 	bl	80094b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80061fe:	2100      	movs	r1, #0
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f003 f959 	bl	80094b8 <USBD_LL_StallEP>
}
 8006206:	bf00      	nop
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b086      	sub	sp, #24
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d032      	beq.n	800628a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f834 	bl	8006292 <USBD_GetLen>
 800622a:	4603      	mov	r3, r0
 800622c:	3301      	adds	r3, #1
 800622e:	b29b      	uxth	r3, r3
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006238:	7dfb      	ldrb	r3, [r7, #23]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	75fa      	strb	r2, [r7, #23]
 800623e:	461a      	mov	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4413      	add	r3, r2
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	7812      	ldrb	r2, [r2, #0]
 8006248:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	75fa      	strb	r2, [r7, #23]
 8006250:	461a      	mov	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4413      	add	r3, r2
 8006256:	2203      	movs	r2, #3
 8006258:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800625a:	e012      	b.n	8006282 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	60fa      	str	r2, [r7, #12]
 8006262:	7dfa      	ldrb	r2, [r7, #23]
 8006264:	1c51      	adds	r1, r2, #1
 8006266:	75f9      	strb	r1, [r7, #23]
 8006268:	4611      	mov	r1, r2
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	440a      	add	r2, r1
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	75fa      	strb	r2, [r7, #23]
 8006278:	461a      	mov	r2, r3
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4413      	add	r3, r2
 800627e:	2200      	movs	r2, #0
 8006280:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1e8      	bne.n	800625c <USBD_GetString+0x4e>
    }
  }
}
 800628a:	bf00      	nop
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006292:	b480      	push	{r7}
 8006294:	b085      	sub	sp, #20
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800629e:	e005      	b.n	80062ac <USBD_GetLen+0x1a>
  {
    len++;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	3301      	adds	r3, #1
 80062a4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3301      	adds	r3, #1
 80062aa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1f5      	bne.n	80062a0 <USBD_GetLen+0xe>
  }

  return len;
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr

080062c0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	4613      	mov	r3, r2
 80062cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2202      	movs	r2, #2
 80062d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80062d6:	88fa      	ldrh	r2, [r7, #6]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80062dc:	88fa      	ldrh	r2, [r7, #6]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062e2:	88fb      	ldrh	r3, [r7, #6]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	2100      	movs	r1, #0
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f003 f96e 	bl	80095ca <USBD_LL_Transmit>

  return USBD_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006306:	88fb      	ldrh	r3, [r7, #6]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	2100      	movs	r1, #0
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f003 f95c 	bl	80095ca <USBD_LL_Transmit>

  return USBD_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	4613      	mov	r3, r2
 8006328:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2203      	movs	r2, #3
 800632e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006332:	88fa      	ldrh	r2, [r7, #6]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800633a:	88fa      	ldrh	r2, [r7, #6]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	2100      	movs	r1, #0
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f003 f961 	bl	8009610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4613      	mov	r3, r2
 8006364:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	2100      	movs	r1, #0
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f003 f94f 	bl	8009610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2204      	movs	r2, #4
 8006388:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800638c:	2300      	movs	r3, #0
 800638e:	2200      	movs	r2, #0
 8006390:	2100      	movs	r1, #0
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f003 f919 	bl	80095ca <USBD_LL_Transmit>

  return USBD_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b082      	sub	sp, #8
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2205      	movs	r2, #5
 80063ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063b2:	2300      	movs	r3, #0
 80063b4:	2200      	movs	r2, #0
 80063b6:	2100      	movs	r1, #0
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f003 f929 	bl	8009610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ce:	f3ef 8305 	mrs	r3, IPSR
 80063d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80063d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10f      	bne.n	80063fa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063da:	f3ef 8310 	mrs	r3, PRIMASK
 80063de:	607b      	str	r3, [r7, #4]
  return(result);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <osKernelInitialize+0x32>
 80063e6:	4b10      	ldr	r3, [pc, #64]	; (8006428 <osKernelInitialize+0x60>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d109      	bne.n	8006402 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063ee:	f3ef 8311 	mrs	r3, BASEPRI
 80063f2:	603b      	str	r3, [r7, #0]
  return(result);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80063fa:	f06f 0305 	mvn.w	r3, #5
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	e00c      	b.n	800641c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <osKernelInitialize+0x60>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d105      	bne.n	8006416 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800640a:	4b07      	ldr	r3, [pc, #28]	; (8006428 <osKernelInitialize+0x60>)
 800640c:	2201      	movs	r2, #1
 800640e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	e002      	b.n	800641c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006416:	f04f 33ff 	mov.w	r3, #4294967295
 800641a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800641c:	68fb      	ldr	r3, [r7, #12]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr
 8006428:	200001a0 	.word	0x200001a0

0800642c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006432:	f3ef 8305 	mrs	r3, IPSR
 8006436:	60bb      	str	r3, [r7, #8]
  return(result);
 8006438:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10f      	bne.n	800645e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643e:	f3ef 8310 	mrs	r3, PRIMASK
 8006442:	607b      	str	r3, [r7, #4]
  return(result);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <osKernelStart+0x32>
 800644a:	4b11      	ldr	r3, [pc, #68]	; (8006490 <osKernelStart+0x64>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d109      	bne.n	8006466 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006452:	f3ef 8311 	mrs	r3, BASEPRI
 8006456:	603b      	str	r3, [r7, #0]
  return(result);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <osKernelStart+0x3a>
    stat = osErrorISR;
 800645e:	f06f 0305 	mvn.w	r3, #5
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	e00e      	b.n	8006484 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006466:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <osKernelStart+0x64>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d107      	bne.n	800647e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800646e:	4b08      	ldr	r3, [pc, #32]	; (8006490 <osKernelStart+0x64>)
 8006470:	2202      	movs	r2, #2
 8006472:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006474:	f001 f8d6 	bl	8007624 <vTaskStartScheduler>
      stat = osOK;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	e002      	b.n	8006484 <osKernelStart+0x58>
    } else {
      stat = osError;
 800647e:	f04f 33ff 	mov.w	r3, #4294967295
 8006482:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006484:	68fb      	ldr	r3, [r7, #12]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	200001a0 	.word	0x200001a0

08006494 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b092      	sub	sp, #72	; 0x48
 8006498:	af04      	add	r7, sp, #16
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064a4:	f3ef 8305 	mrs	r3, IPSR
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f040 8094 	bne.w	80065da <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b2:	f3ef 8310 	mrs	r3, PRIMASK
 80064b6:	623b      	str	r3, [r7, #32]
  return(result);
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f040 808d 	bne.w	80065da <osThreadNew+0x146>
 80064c0:	4b48      	ldr	r3, [pc, #288]	; (80065e4 <osThreadNew+0x150>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d106      	bne.n	80064d6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064c8:	f3ef 8311 	mrs	r3, BASEPRI
 80064cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f040 8082 	bne.w	80065da <osThreadNew+0x146>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d07e      	beq.n	80065da <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80064dc:	2380      	movs	r3, #128	; 0x80
 80064de:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80064e0:	2318      	movs	r3, #24
 80064e2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80064e4:	2300      	movs	r3, #0
 80064e6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80064e8:	f107 031b 	add.w	r3, r7, #27
 80064ec:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80064ee:	f04f 33ff 	mov.w	r3, #4294967295
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d045      	beq.n	8006586 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <osThreadNew+0x74>
        name = attr->name;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	2b00      	cmp	r3, #0
 800651a:	d008      	beq.n	800652e <osThreadNew+0x9a>
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	2b38      	cmp	r3, #56	; 0x38
 8006520:	d805      	bhi.n	800652e <osThreadNew+0x9a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <osThreadNew+0x9e>
        return (NULL);
 800652e:	2300      	movs	r3, #0
 8006530:	e054      	b.n	80065dc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	089b      	lsrs	r3, r3, #2
 8006540:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00e      	beq.n	8006568 <osThreadNew+0xd4>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b5b      	cmp	r3, #91	; 0x5b
 8006550:	d90a      	bls.n	8006568 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006556:	2b00      	cmp	r3, #0
 8006558:	d006      	beq.n	8006568 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <osThreadNew+0xd4>
        mem = 1;
 8006562:	2301      	movs	r3, #1
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
 8006566:	e010      	b.n	800658a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10c      	bne.n	800658a <osThreadNew+0xf6>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d108      	bne.n	800658a <osThreadNew+0xf6>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d104      	bne.n	800658a <osThreadNew+0xf6>
          mem = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
 8006584:	e001      	b.n	800658a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006586:	2300      	movs	r3, #0
 8006588:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	2b01      	cmp	r3, #1
 800658e:	d110      	bne.n	80065b2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006598:	9202      	str	r2, [sp, #8]
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 fe02 	bl	80071b0 <xTaskCreateStatic>
 80065ac:	4603      	mov	r3, r0
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	e013      	b.n	80065da <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d110      	bne.n	80065da <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	f107 0314 	add.w	r3, r7, #20
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fe49 	bl	8007262 <xTaskCreate>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d001      	beq.n	80065da <osThreadNew+0x146>
          hTask = NULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065da:	697b      	ldr	r3, [r7, #20]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3738      	adds	r7, #56	; 0x38
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200001a0 	.word	0x200001a0

080065e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065f0:	f3ef 8305 	mrs	r3, IPSR
 80065f4:	613b      	str	r3, [r7, #16]
  return(result);
 80065f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10f      	bne.n	800661c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006600:	60fb      	str	r3, [r7, #12]
  return(result);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d109      	bne.n	800661c <osDelay+0x34>
 8006608:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <osDelay+0x58>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d109      	bne.n	8006624 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006610:	f3ef 8311 	mrs	r3, BASEPRI
 8006614:	60bb      	str	r3, [r7, #8]
  return(result);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <osDelay+0x3c>
    stat = osErrorISR;
 800661c:	f06f 0305 	mvn.w	r3, #5
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	e007      	b.n	8006634 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006624:	2300      	movs	r3, #0
 8006626:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <osDelay+0x4c>
      vTaskDelay(ticks);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 ffc4 	bl	80075bc <vTaskDelay>
    }
  }

  return (stat);
 8006634:	697b      	ldr	r3, [r7, #20]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	200001a0 	.word	0x200001a0

08006644 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4a06      	ldr	r2, [pc, #24]	; (800666c <vApplicationGetIdleTaskMemory+0x28>)
 8006654:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	4a05      	ldr	r2, [pc, #20]	; (8006670 <vApplicationGetIdleTaskMemory+0x2c>)
 800665a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2280      	movs	r2, #128	; 0x80
 8006660:	601a      	str	r2, [r3, #0]
}
 8006662:	bf00      	nop
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr
 800666c:	200001a4 	.word	0x200001a4
 8006670:	20000200 	.word	0x20000200

08006674 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4a07      	ldr	r2, [pc, #28]	; (80066a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006684:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4a06      	ldr	r2, [pc, #24]	; (80066a4 <vApplicationGetTimerTaskMemory+0x30>)
 800668a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006692:	601a      	str	r2, [r3, #0]
}
 8006694:	bf00      	nop
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	20000400 	.word	0x20000400
 80066a4:	2000045c 	.word	0x2000045c

080066a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f103 0208 	add.w	r2, r3, #8
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f04f 32ff 	mov.w	r2, #4294967295
 80066c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f103 0208 	add.w	r2, r3, #8
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f103 0208 	add.w	r2, r3, #8
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr

080066e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr

080066fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
}
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr

08006744 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675a:	d103      	bne.n	8006764 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	60fb      	str	r3, [r7, #12]
 8006762:	e00c      	b.n	800677e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3308      	adds	r3, #8
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	e002      	b.n	8006772 <vListInsert+0x2e>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	429a      	cmp	r2, r3
 800677c:	d2f6      	bcs.n	800676c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	601a      	str	r2, [r3, #0]
}
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bc80      	pop	{r7}
 80067b2:	4770      	bx	lr

080067b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6892      	ldr	r2, [r2, #8]
 80067ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6852      	ldr	r2, [r2, #4]
 80067d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d103      	bne.n	80067e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	1e5a      	subs	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr
	...

08006808 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d109      	bne.n	8006830 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	e7fe      	b.n	800682e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006830:	f002 f80a 	bl	8008848 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683c:	68f9      	ldr	r1, [r7, #12]
 800683e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006840:	fb01 f303 	mul.w	r3, r1, r3
 8006844:	441a      	add	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006860:	3b01      	subs	r3, #1
 8006862:	68f9      	ldr	r1, [r7, #12]
 8006864:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006866:	fb01 f303 	mul.w	r3, r1, r3
 800686a:	441a      	add	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	22ff      	movs	r2, #255	; 0xff
 8006874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	22ff      	movs	r2, #255	; 0xff
 800687c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d114      	bne.n	80068b0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d01a      	beq.n	80068c4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3310      	adds	r3, #16
 8006892:	4618      	mov	r0, r3
 8006894:	f001 f94a 	bl	8007b2c <xTaskRemoveFromEventList>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d012      	beq.n	80068c4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800689e:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <xQueueGenericReset+0xcc>)
 80068a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	e009      	b.n	80068c4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3310      	adds	r3, #16
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff fef7 	bl	80066a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3324      	adds	r3, #36	; 0x24
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff fef2 	bl	80066a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068c4:	f001 ffee 	bl	80088a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068c8:	2301      	movs	r3, #1
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	e000ed04 	.word	0xe000ed04

080068d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08e      	sub	sp, #56	; 0x38
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d109      	bne.n	8006900 <xQueueGenericCreateStatic+0x28>
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80068fe:	e7fe      	b.n	80068fe <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <xQueueGenericCreateStatic+0x42>
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
 8006918:	e7fe      	b.n	8006918 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <xQueueGenericCreateStatic+0x4e>
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <xQueueGenericCreateStatic+0x52>
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <xQueueGenericCreateStatic+0x54>
 800692a:	2300      	movs	r3, #0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d109      	bne.n	8006944 <xQueueGenericCreateStatic+0x6c>
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	623b      	str	r3, [r7, #32]
 8006942:	e7fe      	b.n	8006942 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d102      	bne.n	8006950 <xQueueGenericCreateStatic+0x78>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <xQueueGenericCreateStatic+0x7c>
 8006950:	2301      	movs	r3, #1
 8006952:	e000      	b.n	8006956 <xQueueGenericCreateStatic+0x7e>
 8006954:	2300      	movs	r3, #0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <xQueueGenericCreateStatic+0x96>
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	e7fe      	b.n	800696c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800696e:	2350      	movs	r3, #80	; 0x50
 8006970:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b50      	cmp	r3, #80	; 0x50
 8006976:	d009      	beq.n	800698c <xQueueGenericCreateStatic+0xb4>
 8006978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	61bb      	str	r3, [r7, #24]
 800698a:	e7fe      	b.n	800698a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00d      	beq.n	80069b2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800699e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	4613      	mov	r3, r2
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	68b9      	ldr	r1, [r7, #8]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f805 	bl	80069bc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3730      	adds	r7, #48	; 0x30
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d103      	bne.n	80069d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	e002      	b.n	80069de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069ea:	2101      	movs	r1, #1
 80069ec:	69b8      	ldr	r0, [r7, #24]
 80069ee:	f7ff ff0b 	bl	8006808 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	78fa      	ldrb	r2, [r7, #3]
 80069f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069fa:	bf00      	nop
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08e      	sub	sp, #56	; 0x38
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a12:	2300      	movs	r3, #0
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d109      	bne.n	8006a34 <xQueueGenericSend+0x30>
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a32:	e7fe      	b.n	8006a32 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d103      	bne.n	8006a42 <xQueueGenericSend+0x3e>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <xQueueGenericSend+0x42>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <xQueueGenericSend+0x44>
 8006a46:	2300      	movs	r3, #0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d109      	bne.n	8006a60 <xQueueGenericSend+0x5c>
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5e:	e7fe      	b.n	8006a5e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d103      	bne.n	8006a6e <xQueueGenericSend+0x6a>
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <xQueueGenericSend+0x6e>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <xQueueGenericSend+0x70>
 8006a72:	2300      	movs	r3, #0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <xQueueGenericSend+0x88>
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	623b      	str	r3, [r7, #32]
 8006a8a:	e7fe      	b.n	8006a8a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a8c:	f001 fa08 	bl	8007ea0 <xTaskGetSchedulerState>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <xQueueGenericSend+0x98>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <xQueueGenericSend+0x9c>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e000      	b.n	8006aa2 <xQueueGenericSend+0x9e>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <xQueueGenericSend+0xb6>
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	61fb      	str	r3, [r7, #28]
 8006ab8:	e7fe      	b.n	8006ab8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006aba:	f001 fec5 	bl	8008848 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d302      	bcc.n	8006ad0 <xQueueGenericSend+0xcc>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d129      	bne.n	8006b24 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ad6:	f000 f9ff 	bl	8006ed8 <prvCopyDataToQueue>
 8006ada:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d010      	beq.n	8006b06 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	3324      	adds	r3, #36	; 0x24
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f001 f81f 	bl	8007b2c <xTaskRemoveFromEventList>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d013      	beq.n	8006b1c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006af4:	4b3f      	ldr	r3, [pc, #252]	; (8006bf4 <xQueueGenericSend+0x1f0>)
 8006af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	e00a      	b.n	8006b1c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b0c:	4b39      	ldr	r3, [pc, #228]	; (8006bf4 <xQueueGenericSend+0x1f0>)
 8006b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b1c:	f001 fec2 	bl	80088a4 <vPortExitCritical>
				return pdPASS;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e063      	b.n	8006bec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d103      	bne.n	8006b32 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b2a:	f001 febb 	bl	80088a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	e05c      	b.n	8006bec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d106      	bne.n	8006b46 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b38:	f107 0314 	add.w	r3, r7, #20
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f001 f857 	bl	8007bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b42:	2301      	movs	r3, #1
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b46:	f001 fead 	bl	80088a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b4a:	f000 fdcf 	bl	80076ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b4e:	f001 fe7b 	bl	8008848 <vPortEnterCritical>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b58:	b25b      	sxtb	r3, r3
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5e:	d103      	bne.n	8006b68 <xQueueGenericSend+0x164>
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b6e:	b25b      	sxtb	r3, r3
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b74:	d103      	bne.n	8006b7e <xQueueGenericSend+0x17a>
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b7e:	f001 fe91 	bl	80088a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b82:	1d3a      	adds	r2, r7, #4
 8006b84:	f107 0314 	add.w	r3, r7, #20
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f001 f846 	bl	8007c1c <xTaskCheckForTimeOut>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d124      	bne.n	8006be0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b98:	f000 fa96 	bl	80070c8 <prvIsQueueFull>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d018      	beq.n	8006bd4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	3310      	adds	r3, #16
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	4611      	mov	r1, r2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 ff70 	bl	8007a90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb2:	f000 fa21 	bl	8006ff8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bb6:	f000 fda7 	bl	8007708 <xTaskResumeAll>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f47f af7c 	bne.w	8006aba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <xQueueGenericSend+0x1f0>)
 8006bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	e772      	b.n	8006aba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bd6:	f000 fa0f 	bl	8006ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bda:	f000 fd95 	bl	8007708 <xTaskResumeAll>
 8006bde:	e76c      	b.n	8006aba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006be2:	f000 fa09 	bl	8006ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006be6:	f000 fd8f 	bl	8007708 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bea:	2300      	movs	r3, #0
		}
	}
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3738      	adds	r7, #56	; 0x38
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	e000ed04 	.word	0xe000ed04

08006bf8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08e      	sub	sp, #56	; 0x38
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <xQueueGenericSendFromISR+0x2c>
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
 8006c22:	e7fe      	b.n	8006c22 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d103      	bne.n	8006c32 <xQueueGenericSendFromISR+0x3a>
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <xQueueGenericSendFromISR+0x3e>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <xQueueGenericSendFromISR+0x40>
 8006c36:	2300      	movs	r3, #0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d109      	bne.n	8006c50 <xQueueGenericSendFromISR+0x58>
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	623b      	str	r3, [r7, #32]
 8006c4e:	e7fe      	b.n	8006c4e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d103      	bne.n	8006c5e <xQueueGenericSendFromISR+0x66>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <xQueueGenericSendFromISR+0x6a>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <xQueueGenericSendFromISR+0x6c>
 8006c62:	2300      	movs	r3, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d109      	bne.n	8006c7c <xQueueGenericSendFromISR+0x84>
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	61fb      	str	r3, [r7, #28]
 8006c7a:	e7fe      	b.n	8006c7a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c7c:	f001 fe9e 	bl	80089bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c80:	f3ef 8211 	mrs	r2, BASEPRI
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	61ba      	str	r2, [r7, #24]
 8006c96:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c98:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d302      	bcc.n	8006cae <xQueueGenericSendFromISR+0xb6>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d12c      	bne.n	8006d08 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cbe:	f000 f90b 	bl	8006ed8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cc2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d112      	bne.n	8006cf2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d016      	beq.n	8006d02 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	3324      	adds	r3, #36	; 0x24
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 ff27 	bl	8007b2c <xTaskRemoveFromEventList>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00e      	beq.n	8006d02 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	e007      	b.n	8006d02 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	b25a      	sxtb	r2, r3
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d02:	2301      	movs	r3, #1
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006d06:	e001      	b.n	8006d0c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3738      	adds	r7, #56	; 0x38
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08c      	sub	sp, #48	; 0x30
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <xQueueReceive+0x2e>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	623b      	str	r3, [r7, #32]
 8006d4c:	e7fe      	b.n	8006d4c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d103      	bne.n	8006d5c <xQueueReceive+0x3c>
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <xQueueReceive+0x40>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e000      	b.n	8006d62 <xQueueReceive+0x42>
 8006d60:	2300      	movs	r3, #0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d109      	bne.n	8006d7a <xQueueReceive+0x5a>
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	61fb      	str	r3, [r7, #28]
 8006d78:	e7fe      	b.n	8006d78 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d7a:	f001 f891 	bl	8007ea0 <xTaskGetSchedulerState>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d102      	bne.n	8006d8a <xQueueReceive+0x6a>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <xQueueReceive+0x6e>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <xQueueReceive+0x70>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d109      	bne.n	8006da8 <xQueueReceive+0x88>
 8006d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	e7fe      	b.n	8006da6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006da8:	f001 fd4e 	bl	8008848 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01f      	beq.n	8006df8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006db8:	68b9      	ldr	r1, [r7, #8]
 8006dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dbc:	f000 f8f6 	bl	8006fac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	1e5a      	subs	r2, r3, #1
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00f      	beq.n	8006df0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	3310      	adds	r3, #16
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fea9 	bl	8007b2c <xTaskRemoveFromEventList>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d007      	beq.n	8006df0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006de0:	4b3c      	ldr	r3, [pc, #240]	; (8006ed4 <xQueueReceive+0x1b4>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006df0:	f001 fd58 	bl	80088a4 <vPortExitCritical>
				return pdPASS;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e069      	b.n	8006ecc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d103      	bne.n	8006e06 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dfe:	f001 fd51 	bl	80088a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e062      	b.n	8006ecc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d106      	bne.n	8006e1a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e0c:	f107 0310 	add.w	r3, r7, #16
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 feed 	bl	8007bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e16:	2301      	movs	r3, #1
 8006e18:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e1a:	f001 fd43 	bl	80088a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e1e:	f000 fc65 	bl	80076ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e22:	f001 fd11 	bl	8008848 <vPortEnterCritical>
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e2c:	b25b      	sxtb	r3, r3
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e32:	d103      	bne.n	8006e3c <xQueueReceive+0x11c>
 8006e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e42:	b25b      	sxtb	r3, r3
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d103      	bne.n	8006e52 <xQueueReceive+0x132>
 8006e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e52:	f001 fd27 	bl	80088a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e56:	1d3a      	adds	r2, r7, #4
 8006e58:	f107 0310 	add.w	r3, r7, #16
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fedc 	bl	8007c1c <xTaskCheckForTimeOut>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d123      	bne.n	8006eb2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e6c:	f000 f916 	bl	800709c <prvIsQueueEmpty>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d017      	beq.n	8006ea6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	3324      	adds	r3, #36	; 0x24
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fe06 	bl	8007a90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e86:	f000 f8b7 	bl	8006ff8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e8a:	f000 fc3d 	bl	8007708 <xTaskResumeAll>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d189      	bne.n	8006da8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006e94:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <xQueueReceive+0x1b4>)
 8006e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	e780      	b.n	8006da8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea8:	f000 f8a6 	bl	8006ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eac:	f000 fc2c 	bl	8007708 <xTaskResumeAll>
 8006eb0:	e77a      	b.n	8006da8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb4:	f000 f8a0 	bl	8006ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eb8:	f000 fc26 	bl	8007708 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ebe:	f000 f8ed 	bl	800709c <prvIsQueueEmpty>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f43f af6f 	beq.w	8006da8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006eca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3730      	adds	r7, #48	; 0x30
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10d      	bne.n	8006f12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d14d      	bne.n	8006f9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 ffea 	bl	8007edc <xTaskPriorityDisinherit>
 8006f08:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	605a      	str	r2, [r3, #4]
 8006f10:	e043      	b.n	8006f9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d119      	bne.n	8006f4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6898      	ldr	r0, [r3, #8]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f20:	461a      	mov	r2, r3
 8006f22:	68b9      	ldr	r1, [r7, #8]
 8006f24:	f002 fc1a 	bl	800975c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	441a      	add	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d32b      	bcc.n	8006f9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	609a      	str	r2, [r3, #8]
 8006f4a:	e026      	b.n	8006f9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	68d8      	ldr	r0, [r3, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	461a      	mov	r2, r3
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	f002 fc00 	bl	800975c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	425b      	negs	r3, r3
 8006f66:	441a      	add	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d207      	bcs.n	8006f88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f80:	425b      	negs	r3, r3
 8006f82:	441a      	add	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d105      	bne.n	8006f9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006fa2:	697b      	ldr	r3, [r7, #20]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d018      	beq.n	8006ff0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	441a      	add	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d303      	bcc.n	8006fe0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68d9      	ldr	r1, [r3, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6838      	ldr	r0, [r7, #0]
 8006fec:	f002 fbb6 	bl	800975c <memcpy>
	}
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007000:	f001 fc22 	bl	8008848 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800700a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800700c:	e011      	b.n	8007032 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	2b00      	cmp	r3, #0
 8007014:	d012      	beq.n	800703c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3324      	adds	r3, #36	; 0x24
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fd86 	bl	8007b2c <xTaskRemoveFromEventList>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007026:	f000 fe59 	bl	8007cdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	3b01      	subs	r3, #1
 800702e:	b2db      	uxtb	r3, r3
 8007030:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007036:	2b00      	cmp	r3, #0
 8007038:	dce9      	bgt.n	800700e <prvUnlockQueue+0x16>
 800703a:	e000      	b.n	800703e <prvUnlockQueue+0x46>
					break;
 800703c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	22ff      	movs	r2, #255	; 0xff
 8007042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007046:	f001 fc2d 	bl	80088a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800704a:	f001 fbfd 	bl	8008848 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007054:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007056:	e011      	b.n	800707c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d012      	beq.n	8007086 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3310      	adds	r3, #16
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fd61 	bl	8007b2c <xTaskRemoveFromEventList>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007070:	f000 fe34 	bl	8007cdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	3b01      	subs	r3, #1
 8007078:	b2db      	uxtb	r3, r3
 800707a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800707c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007080:	2b00      	cmp	r3, #0
 8007082:	dce9      	bgt.n	8007058 <prvUnlockQueue+0x60>
 8007084:	e000      	b.n	8007088 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007086:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	22ff      	movs	r2, #255	; 0xff
 800708c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007090:	f001 fc08 	bl	80088a4 <vPortExitCritical>
}
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070a4:	f001 fbd0 	bl	8008848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d102      	bne.n	80070b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070b0:	2301      	movs	r3, #1
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	e001      	b.n	80070ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ba:	f001 fbf3 	bl	80088a4 <vPortExitCritical>

	return xReturn;
 80070be:	68fb      	ldr	r3, [r7, #12]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070d0:	f001 fbba 	bl	8008848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070dc:	429a      	cmp	r2, r3
 80070de:	d102      	bne.n	80070e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070e0:	2301      	movs	r3, #1
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	e001      	b.n	80070ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ea:	f001 fbdb 	bl	80088a4 <vPortExitCritical>

	return xReturn;
 80070ee:	68fb      	ldr	r3, [r7, #12]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	e014      	b.n	8007132 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007108:	4a0e      	ldr	r2, [pc, #56]	; (8007144 <vQueueAddToRegistry+0x4c>)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10b      	bne.n	800712c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007114:	490b      	ldr	r1, [pc, #44]	; (8007144 <vQueueAddToRegistry+0x4c>)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800711e:	4a09      	ldr	r2, [pc, #36]	; (8007144 <vQueueAddToRegistry+0x4c>)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	4413      	add	r3, r2
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800712a:	e005      	b.n	8007138 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3301      	adds	r3, #1
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b07      	cmp	r3, #7
 8007136:	d9e7      	bls.n	8007108 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	bc80      	pop	{r7}
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	20001cf0 	.word	0x20001cf0

08007148 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007158:	f001 fb76 	bl	8008848 <vPortEnterCritical>
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007162:	b25b      	sxtb	r3, r3
 8007164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007168:	d103      	bne.n	8007172 <vQueueWaitForMessageRestricted+0x2a>
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007178:	b25b      	sxtb	r3, r3
 800717a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717e:	d103      	bne.n	8007188 <vQueueWaitForMessageRestricted+0x40>
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007188:	f001 fb8c 	bl	80088a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	2b00      	cmp	r3, #0
 8007192:	d106      	bne.n	80071a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	3324      	adds	r3, #36	; 0x24
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fc9b 	bl	8007ad8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071a2:	6978      	ldr	r0, [r7, #20]
 80071a4:	f7ff ff28 	bl	8006ff8 <prvUnlockQueue>
	}
 80071a8:	bf00      	nop
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08e      	sub	sp, #56	; 0x38
 80071b4:	af04      	add	r7, sp, #16
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d109      	bne.n	80071d8 <xTaskCreateStatic+0x28>
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	623b      	str	r3, [r7, #32]
 80071d6:	e7fe      	b.n	80071d6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d109      	bne.n	80071f2 <xTaskCreateStatic+0x42>
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	61fb      	str	r3, [r7, #28]
 80071f0:	e7fe      	b.n	80071f0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071f2:	235c      	movs	r3, #92	; 0x5c
 80071f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b5c      	cmp	r3, #92	; 0x5c
 80071fa:	d009      	beq.n	8007210 <xTaskCreateStatic+0x60>
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	61bb      	str	r3, [r7, #24]
 800720e:	e7fe      	b.n	800720e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	2b00      	cmp	r3, #0
 8007214:	d01e      	beq.n	8007254 <xTaskCreateStatic+0xa4>
 8007216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01b      	beq.n	8007254 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007224:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	2202      	movs	r2, #2
 800722a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800722e:	2300      	movs	r3, #0
 8007230:	9303      	str	r3, [sp, #12]
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	9302      	str	r3, [sp, #8]
 8007236:	f107 0314 	add.w	r3, r7, #20
 800723a:	9301      	str	r3, [sp, #4]
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	68b9      	ldr	r1, [r7, #8]
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 f850 	bl	80072ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800724c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800724e:	f000 f8d3 	bl	80073f8 <prvAddNewTaskToReadyList>
 8007252:	e001      	b.n	8007258 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007254:	2300      	movs	r3, #0
 8007256:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007258:	697b      	ldr	r3, [r7, #20]
	}
 800725a:	4618      	mov	r0, r3
 800725c:	3728      	adds	r7, #40	; 0x28
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007262:	b580      	push	{r7, lr}
 8007264:	b08c      	sub	sp, #48	; 0x30
 8007266:	af04      	add	r7, sp, #16
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	603b      	str	r3, [r7, #0]
 800726e:	4613      	mov	r3, r2
 8007270:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4618      	mov	r0, r3
 8007278:	f001 fbdc 	bl	8008a34 <pvPortMalloc>
 800727c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00e      	beq.n	80072a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007284:	205c      	movs	r0, #92	; 0x5c
 8007286:	f001 fbd5 	bl	8008a34 <pvPortMalloc>
 800728a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	631a      	str	r2, [r3, #48]	; 0x30
 8007298:	e005      	b.n	80072a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800729a:	6978      	ldr	r0, [r7, #20]
 800729c:	f001 fc8c 	bl	8008bb8 <vPortFree>
 80072a0:	e001      	b.n	80072a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d017      	beq.n	80072dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072b4:	88fa      	ldrh	r2, [r7, #6]
 80072b6:	2300      	movs	r3, #0
 80072b8:	9303      	str	r3, [sp, #12]
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	9302      	str	r3, [sp, #8]
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f80e 	bl	80072ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072d0:	69f8      	ldr	r0, [r7, #28]
 80072d2:	f000 f891 	bl	80073f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072d6:	2301      	movs	r3, #1
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	e002      	b.n	80072e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072dc:	f04f 33ff 	mov.w	r3, #4294967295
 80072e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072e2:	69bb      	ldr	r3, [r7, #24]
	}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3720      	adds	r7, #32
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	461a      	mov	r2, r3
 8007304:	21a5      	movs	r1, #165	; 0xa5
 8007306:	f002 fa34 	bl	8009772 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007314:	3b01      	subs	r3, #1
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f023 0307 	bic.w	r3, r3, #7
 8007322:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <prvInitialiseNewTask+0x56>
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	e7fe      	b.n	8007340 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007342:	2300      	movs	r3, #0
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	e012      	b.n	800736e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	7819      	ldrb	r1, [r3, #0]
 8007350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	4413      	add	r3, r2
 8007356:	3334      	adds	r3, #52	; 0x34
 8007358:	460a      	mov	r2, r1
 800735a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	4413      	add	r3, r2
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d006      	beq.n	8007376 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	3301      	adds	r3, #1
 800736c:	61fb      	str	r3, [r7, #28]
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	2b0f      	cmp	r3, #15
 8007372:	d9e9      	bls.n	8007348 <prvInitialiseNewTask+0x5c>
 8007374:	e000      	b.n	8007378 <prvInitialiseNewTask+0x8c>
		{
			break;
 8007376:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	2b37      	cmp	r3, #55	; 0x37
 8007384:	d901      	bls.n	800738a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007386:	2337      	movs	r3, #55	; 0x37
 8007388:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800738e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007394:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	2200      	movs	r2, #0
 800739a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	3304      	adds	r3, #4
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff f9a0 	bl	80066e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	3318      	adds	r3, #24
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7ff f99b 	bl	80066e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	2200      	movs	r2, #0
 80073ca:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	69b8      	ldr	r0, [r7, #24]
 80073da:	f001 f949 	bl	8008670 <pxPortInitialiseStack>
 80073de:	4602      	mov	r2, r0
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073f0:	bf00      	nop
 80073f2:	3720      	adds	r7, #32
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007400:	f001 fa22 	bl	8008848 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007404:	4b2d      	ldr	r3, [pc, #180]	; (80074bc <prvAddNewTaskToReadyList+0xc4>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3301      	adds	r3, #1
 800740a:	4a2c      	ldr	r2, [pc, #176]	; (80074bc <prvAddNewTaskToReadyList+0xc4>)
 800740c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800740e:	4b2c      	ldr	r3, [pc, #176]	; (80074c0 <prvAddNewTaskToReadyList+0xc8>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d109      	bne.n	800742a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007416:	4a2a      	ldr	r2, [pc, #168]	; (80074c0 <prvAddNewTaskToReadyList+0xc8>)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800741c:	4b27      	ldr	r3, [pc, #156]	; (80074bc <prvAddNewTaskToReadyList+0xc4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d110      	bne.n	8007446 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007424:	f000 fc7e 	bl	8007d24 <prvInitialiseTaskLists>
 8007428:	e00d      	b.n	8007446 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800742a:	4b26      	ldr	r3, [pc, #152]	; (80074c4 <prvAddNewTaskToReadyList+0xcc>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d109      	bne.n	8007446 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007432:	4b23      	ldr	r3, [pc, #140]	; (80074c0 <prvAddNewTaskToReadyList+0xc8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	429a      	cmp	r2, r3
 800743e:	d802      	bhi.n	8007446 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007440:	4a1f      	ldr	r2, [pc, #124]	; (80074c0 <prvAddNewTaskToReadyList+0xc8>)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007446:	4b20      	ldr	r3, [pc, #128]	; (80074c8 <prvAddNewTaskToReadyList+0xd0>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3301      	adds	r3, #1
 800744c:	4a1e      	ldr	r2, [pc, #120]	; (80074c8 <prvAddNewTaskToReadyList+0xd0>)
 800744e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007450:	4b1d      	ldr	r3, [pc, #116]	; (80074c8 <prvAddNewTaskToReadyList+0xd0>)
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745c:	4b1b      	ldr	r3, [pc, #108]	; (80074cc <prvAddNewTaskToReadyList+0xd4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d903      	bls.n	800746c <prvAddNewTaskToReadyList+0x74>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	4a18      	ldr	r2, [pc, #96]	; (80074cc <prvAddNewTaskToReadyList+0xd4>)
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4a15      	ldr	r2, [pc, #84]	; (80074d0 <prvAddNewTaskToReadyList+0xd8>)
 800747a:	441a      	add	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3304      	adds	r3, #4
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f7ff f93b 	bl	80066fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007488:	f001 fa0c 	bl	80088a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800748c:	4b0d      	ldr	r3, [pc, #52]	; (80074c4 <prvAddNewTaskToReadyList+0xcc>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00e      	beq.n	80074b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007494:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <prvAddNewTaskToReadyList+0xc8>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749e:	429a      	cmp	r2, r3
 80074a0:	d207      	bcs.n	80074b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074a2:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <prvAddNewTaskToReadyList+0xdc>)
 80074a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20000d30 	.word	0x20000d30
 80074c0:	2000085c 	.word	0x2000085c
 80074c4:	20000d3c 	.word	0x20000d3c
 80074c8:	20000d4c 	.word	0x20000d4c
 80074cc:	20000d38 	.word	0x20000d38
 80074d0:	20000860 	.word	0x20000860
 80074d4:	e000ed04 	.word	0xe000ed04

080074d8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80074e0:	f001 f9b2 	bl	8008848 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d102      	bne.n	80074f0 <vTaskDelete+0x18>
 80074ea:	4b2c      	ldr	r3, [pc, #176]	; (800759c <vTaskDelete+0xc4>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	e000      	b.n	80074f2 <vTaskDelete+0x1a>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3304      	adds	r3, #4
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff f95b 	bl	80067b4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007502:	2b00      	cmp	r3, #0
 8007504:	d004      	beq.n	8007510 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3318      	adds	r3, #24
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff f952 	bl	80067b4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007510:	4b23      	ldr	r3, [pc, #140]	; (80075a0 <vTaskDelete+0xc8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	4a22      	ldr	r2, [pc, #136]	; (80075a0 <vTaskDelete+0xc8>)
 8007518:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800751a:	4b20      	ldr	r3, [pc, #128]	; (800759c <vTaskDelete+0xc4>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	429a      	cmp	r2, r3
 8007522:	d10b      	bne.n	800753c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	3304      	adds	r3, #4
 8007528:	4619      	mov	r1, r3
 800752a:	481e      	ldr	r0, [pc, #120]	; (80075a4 <vTaskDelete+0xcc>)
 800752c:	f7ff f8e7 	bl	80066fe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007530:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <vTaskDelete+0xd0>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3301      	adds	r3, #1
 8007536:	4a1c      	ldr	r2, [pc, #112]	; (80075a8 <vTaskDelete+0xd0>)
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	e009      	b.n	8007550 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800753c:	4b1b      	ldr	r3, [pc, #108]	; (80075ac <vTaskDelete+0xd4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3b01      	subs	r3, #1
 8007542:	4a1a      	ldr	r2, [pc, #104]	; (80075ac <vTaskDelete+0xd4>)
 8007544:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 fc58 	bl	8007dfc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800754c:	f000 fc84 	bl	8007e58 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007550:	f001 f9a8 	bl	80088a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007554:	4b16      	ldr	r3, [pc, #88]	; (80075b0 <vTaskDelete+0xd8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01a      	beq.n	8007592 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 800755c:	4b0f      	ldr	r3, [pc, #60]	; (800759c <vTaskDelete+0xc4>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	429a      	cmp	r2, r3
 8007564:	d115      	bne.n	8007592 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007566:	4b13      	ldr	r3, [pc, #76]	; (80075b4 <vTaskDelete+0xdc>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d009      	beq.n	8007582 <vTaskDelete+0xaa>
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	60bb      	str	r3, [r7, #8]
 8007580:	e7fe      	b.n	8007580 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8007582:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <vTaskDelete+0xe0>)
 8007584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007592:	bf00      	nop
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	2000085c 	.word	0x2000085c
 80075a0:	20000d4c 	.word	0x20000d4c
 80075a4:	20000d04 	.word	0x20000d04
 80075a8:	20000d18 	.word	0x20000d18
 80075ac:	20000d30 	.word	0x20000d30
 80075b0:	20000d3c 	.word	0x20000d3c
 80075b4:	20000d58 	.word	0x20000d58
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d016      	beq.n	80075fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075ce:	4b13      	ldr	r3, [pc, #76]	; (800761c <vTaskDelay+0x60>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d009      	beq.n	80075ea <vTaskDelay+0x2e>
 80075d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	60bb      	str	r3, [r7, #8]
 80075e8:	e7fe      	b.n	80075e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80075ea:	f000 f87f 	bl	80076ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075ee:	2100      	movs	r1, #0
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fcdf 	bl	8007fb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075f6:	f000 f887 	bl	8007708 <xTaskResumeAll>
 80075fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d107      	bne.n	8007612 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007602:	4b07      	ldr	r3, [pc, #28]	; (8007620 <vTaskDelay+0x64>)
 8007604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007612:	bf00      	nop
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20000d58 	.word	0x20000d58
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b08a      	sub	sp, #40	; 0x28
 8007628:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800762e:	2300      	movs	r3, #0
 8007630:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007632:	463a      	mov	r2, r7
 8007634:	1d39      	adds	r1, r7, #4
 8007636:	f107 0308 	add.w	r3, r7, #8
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff f802 	bl	8006644 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	9202      	str	r2, [sp, #8]
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	2300      	movs	r3, #0
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	2300      	movs	r3, #0
 8007650:	460a      	mov	r2, r1
 8007652:	4920      	ldr	r1, [pc, #128]	; (80076d4 <vTaskStartScheduler+0xb0>)
 8007654:	4820      	ldr	r0, [pc, #128]	; (80076d8 <vTaskStartScheduler+0xb4>)
 8007656:	f7ff fdab 	bl	80071b0 <xTaskCreateStatic>
 800765a:	4602      	mov	r2, r0
 800765c:	4b1f      	ldr	r3, [pc, #124]	; (80076dc <vTaskStartScheduler+0xb8>)
 800765e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007660:	4b1e      	ldr	r3, [pc, #120]	; (80076dc <vTaskStartScheduler+0xb8>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007668:	2301      	movs	r3, #1
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	e001      	b.n	8007672 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d102      	bne.n	800767e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007678:	f000 fcf0 	bl	800805c <xTimerCreateTimerTask>
 800767c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d115      	bne.n	80076b0 <vTaskStartScheduler+0x8c>
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007696:	4b12      	ldr	r3, [pc, #72]	; (80076e0 <vTaskStartScheduler+0xbc>)
 8007698:	f04f 32ff 	mov.w	r2, #4294967295
 800769c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800769e:	4b11      	ldr	r3, [pc, #68]	; (80076e4 <vTaskStartScheduler+0xc0>)
 80076a0:	2201      	movs	r2, #1
 80076a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80076a4:	4b10      	ldr	r3, [pc, #64]	; (80076e8 <vTaskStartScheduler+0xc4>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076aa:	f001 f85d 	bl	8008768 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076ae:	e00d      	b.n	80076cc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d109      	bne.n	80076cc <vTaskStartScheduler+0xa8>
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	e7fe      	b.n	80076ca <vTaskStartScheduler+0xa6>
}
 80076cc:	bf00      	nop
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	080097f0 	.word	0x080097f0
 80076d8:	08007cf5 	.word	0x08007cf5
 80076dc:	20000d54 	.word	0x20000d54
 80076e0:	20000d50 	.word	0x20000d50
 80076e4:	20000d3c 	.word	0x20000d3c
 80076e8:	20000d34 	.word	0x20000d34

080076ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80076f0:	4b04      	ldr	r3, [pc, #16]	; (8007704 <vTaskSuspendAll+0x18>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3301      	adds	r3, #1
 80076f6:	4a03      	ldr	r2, [pc, #12]	; (8007704 <vTaskSuspendAll+0x18>)
 80076f8:	6013      	str	r3, [r2, #0]
}
 80076fa:	bf00      	nop
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bc80      	pop	{r7}
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20000d58 	.word	0x20000d58

08007708 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007712:	2300      	movs	r3, #0
 8007714:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007716:	4b41      	ldr	r3, [pc, #260]	; (800781c <xTaskResumeAll+0x114>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d109      	bne.n	8007732 <xTaskResumeAll+0x2a>
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	603b      	str	r3, [r7, #0]
 8007730:	e7fe      	b.n	8007730 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007732:	f001 f889 	bl	8008848 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007736:	4b39      	ldr	r3, [pc, #228]	; (800781c <xTaskResumeAll+0x114>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3b01      	subs	r3, #1
 800773c:	4a37      	ldr	r2, [pc, #220]	; (800781c <xTaskResumeAll+0x114>)
 800773e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007740:	4b36      	ldr	r3, [pc, #216]	; (800781c <xTaskResumeAll+0x114>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d162      	bne.n	800780e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007748:	4b35      	ldr	r3, [pc, #212]	; (8007820 <xTaskResumeAll+0x118>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d05e      	beq.n	800780e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007750:	e02f      	b.n	80077b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007752:	4b34      	ldr	r3, [pc, #208]	; (8007824 <xTaskResumeAll+0x11c>)
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3318      	adds	r3, #24
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff f828 	bl	80067b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3304      	adds	r3, #4
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff f823 	bl	80067b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007772:	4b2d      	ldr	r3, [pc, #180]	; (8007828 <xTaskResumeAll+0x120>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d903      	bls.n	8007782 <xTaskResumeAll+0x7a>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	4a2a      	ldr	r2, [pc, #168]	; (8007828 <xTaskResumeAll+0x120>)
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4a27      	ldr	r2, [pc, #156]	; (800782c <xTaskResumeAll+0x124>)
 8007790:	441a      	add	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3304      	adds	r3, #4
 8007796:	4619      	mov	r1, r3
 8007798:	4610      	mov	r0, r2
 800779a:	f7fe ffb0 	bl	80066fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a2:	4b23      	ldr	r3, [pc, #140]	; (8007830 <xTaskResumeAll+0x128>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d302      	bcc.n	80077b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80077ac:	4b21      	ldr	r3, [pc, #132]	; (8007834 <xTaskResumeAll+0x12c>)
 80077ae:	2201      	movs	r2, #1
 80077b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077b2:	4b1c      	ldr	r3, [pc, #112]	; (8007824 <xTaskResumeAll+0x11c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1cb      	bne.n	8007752 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077c0:	f000 fb4a 	bl	8007e58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80077c4:	4b1c      	ldr	r3, [pc, #112]	; (8007838 <xTaskResumeAll+0x130>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d010      	beq.n	80077f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077d0:	f000 f844 	bl	800785c <xTaskIncrementTick>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80077da:	4b16      	ldr	r3, [pc, #88]	; (8007834 <xTaskResumeAll+0x12c>)
 80077dc:	2201      	movs	r2, #1
 80077de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1f1      	bne.n	80077d0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80077ec:	4b12      	ldr	r3, [pc, #72]	; (8007838 <xTaskResumeAll+0x130>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077f2:	4b10      	ldr	r3, [pc, #64]	; (8007834 <xTaskResumeAll+0x12c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d009      	beq.n	800780e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077fa:	2301      	movs	r3, #1
 80077fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077fe:	4b0f      	ldr	r3, [pc, #60]	; (800783c <xTaskResumeAll+0x134>)
 8007800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800780e:	f001 f849 	bl	80088a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007812:	68bb      	ldr	r3, [r7, #8]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20000d58 	.word	0x20000d58
 8007820:	20000d30 	.word	0x20000d30
 8007824:	20000cf0 	.word	0x20000cf0
 8007828:	20000d38 	.word	0x20000d38
 800782c:	20000860 	.word	0x20000860
 8007830:	2000085c 	.word	0x2000085c
 8007834:	20000d44 	.word	0x20000d44
 8007838:	20000d40 	.word	0x20000d40
 800783c:	e000ed04 	.word	0xe000ed04

08007840 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007846:	4b04      	ldr	r3, [pc, #16]	; (8007858 <xTaskGetTickCount+0x18>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800784c:	687b      	ldr	r3, [r7, #4]
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	bc80      	pop	{r7}
 8007856:	4770      	bx	lr
 8007858:	20000d34 	.word	0x20000d34

0800785c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007862:	2300      	movs	r3, #0
 8007864:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007866:	4b51      	ldr	r3, [pc, #324]	; (80079ac <xTaskIncrementTick+0x150>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f040 808d 	bne.w	800798a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007870:	4b4f      	ldr	r3, [pc, #316]	; (80079b0 <xTaskIncrementTick+0x154>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007878:	4a4d      	ldr	r2, [pc, #308]	; (80079b0 <xTaskIncrementTick+0x154>)
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d11f      	bne.n	80078c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007884:	4b4b      	ldr	r3, [pc, #300]	; (80079b4 <xTaskIncrementTick+0x158>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d009      	beq.n	80078a2 <xTaskIncrementTick+0x46>
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	e7fe      	b.n	80078a0 <xTaskIncrementTick+0x44>
 80078a2:	4b44      	ldr	r3, [pc, #272]	; (80079b4 <xTaskIncrementTick+0x158>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	4b43      	ldr	r3, [pc, #268]	; (80079b8 <xTaskIncrementTick+0x15c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a41      	ldr	r2, [pc, #260]	; (80079b4 <xTaskIncrementTick+0x158>)
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	4a41      	ldr	r2, [pc, #260]	; (80079b8 <xTaskIncrementTick+0x15c>)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	4b41      	ldr	r3, [pc, #260]	; (80079bc <xTaskIncrementTick+0x160>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3301      	adds	r3, #1
 80078bc:	4a3f      	ldr	r2, [pc, #252]	; (80079bc <xTaskIncrementTick+0x160>)
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	f000 faca 	bl	8007e58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078c4:	4b3e      	ldr	r3, [pc, #248]	; (80079c0 <xTaskIncrementTick+0x164>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d34e      	bcc.n	800796c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078ce:	4b39      	ldr	r3, [pc, #228]	; (80079b4 <xTaskIncrementTick+0x158>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <xTaskIncrementTick+0x80>
 80078d8:	2301      	movs	r3, #1
 80078da:	e000      	b.n	80078de <xTaskIncrementTick+0x82>
 80078dc:	2300      	movs	r3, #0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d004      	beq.n	80078ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078e2:	4b37      	ldr	r3, [pc, #220]	; (80079c0 <xTaskIncrementTick+0x164>)
 80078e4:	f04f 32ff 	mov.w	r2, #4294967295
 80078e8:	601a      	str	r2, [r3, #0]
					break;
 80078ea:	e03f      	b.n	800796c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078ec:	4b31      	ldr	r3, [pc, #196]	; (80079b4 <xTaskIncrementTick+0x158>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	429a      	cmp	r2, r3
 8007902:	d203      	bcs.n	800790c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007904:	4a2e      	ldr	r2, [pc, #184]	; (80079c0 <xTaskIncrementTick+0x164>)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6013      	str	r3, [r2, #0]
						break;
 800790a:	e02f      	b.n	800796c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3304      	adds	r3, #4
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe ff4f 	bl	80067b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791a:	2b00      	cmp	r3, #0
 800791c:	d004      	beq.n	8007928 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	3318      	adds	r3, #24
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe ff46 	bl	80067b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792c:	4b25      	ldr	r3, [pc, #148]	; (80079c4 <xTaskIncrementTick+0x168>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	429a      	cmp	r2, r3
 8007932:	d903      	bls.n	800793c <xTaskIncrementTick+0xe0>
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	4a22      	ldr	r2, [pc, #136]	; (80079c4 <xTaskIncrementTick+0x168>)
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4a1f      	ldr	r2, [pc, #124]	; (80079c8 <xTaskIncrementTick+0x16c>)
 800794a:	441a      	add	r2, r3
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	3304      	adds	r3, #4
 8007950:	4619      	mov	r1, r3
 8007952:	4610      	mov	r0, r2
 8007954:	f7fe fed3 	bl	80066fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795c:	4b1b      	ldr	r3, [pc, #108]	; (80079cc <xTaskIncrementTick+0x170>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	429a      	cmp	r2, r3
 8007964:	d3b3      	bcc.n	80078ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007966:	2301      	movs	r3, #1
 8007968:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800796a:	e7b0      	b.n	80078ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800796c:	4b17      	ldr	r3, [pc, #92]	; (80079cc <xTaskIncrementTick+0x170>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007972:	4915      	ldr	r1, [pc, #84]	; (80079c8 <xTaskIncrementTick+0x16c>)
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	440b      	add	r3, r1
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d907      	bls.n	8007994 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007984:	2301      	movs	r3, #1
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	e004      	b.n	8007994 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800798a:	4b11      	ldr	r3, [pc, #68]	; (80079d0 <xTaskIncrementTick+0x174>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3301      	adds	r3, #1
 8007990:	4a0f      	ldr	r2, [pc, #60]	; (80079d0 <xTaskIncrementTick+0x174>)
 8007992:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007994:	4b0f      	ldr	r3, [pc, #60]	; (80079d4 <xTaskIncrementTick+0x178>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800799c:	2301      	movs	r3, #1
 800799e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80079a0:	697b      	ldr	r3, [r7, #20]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20000d58 	.word	0x20000d58
 80079b0:	20000d34 	.word	0x20000d34
 80079b4:	20000ce8 	.word	0x20000ce8
 80079b8:	20000cec 	.word	0x20000cec
 80079bc:	20000d48 	.word	0x20000d48
 80079c0:	20000d50 	.word	0x20000d50
 80079c4:	20000d38 	.word	0x20000d38
 80079c8:	20000860 	.word	0x20000860
 80079cc:	2000085c 	.word	0x2000085c
 80079d0:	20000d40 	.word	0x20000d40
 80079d4:	20000d44 	.word	0x20000d44

080079d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079de:	4b27      	ldr	r3, [pc, #156]	; (8007a7c <vTaskSwitchContext+0xa4>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079e6:	4b26      	ldr	r3, [pc, #152]	; (8007a80 <vTaskSwitchContext+0xa8>)
 80079e8:	2201      	movs	r2, #1
 80079ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079ec:	e040      	b.n	8007a70 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80079ee:	4b24      	ldr	r3, [pc, #144]	; (8007a80 <vTaskSwitchContext+0xa8>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80079f4:	4b23      	ldr	r3, [pc, #140]	; (8007a84 <vTaskSwitchContext+0xac>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	e00f      	b.n	8007a1c <vTaskSwitchContext+0x44>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d109      	bne.n	8007a16 <vTaskSwitchContext+0x3e>
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	607b      	str	r3, [r7, #4]
 8007a14:	e7fe      	b.n	8007a14 <vTaskSwitchContext+0x3c>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	491a      	ldr	r1, [pc, #104]	; (8007a88 <vTaskSwitchContext+0xb0>)
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0e5      	beq.n	80079fc <vTaskSwitchContext+0x24>
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4a13      	ldr	r2, [pc, #76]	; (8007a88 <vTaskSwitchContext+0xb0>)
 8007a3c:	4413      	add	r3, r2
 8007a3e:	60bb      	str	r3, [r7, #8]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	605a      	str	r2, [r3, #4]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	3308      	adds	r3, #8
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d104      	bne.n	8007a60 <vTaskSwitchContext+0x88>
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	605a      	str	r2, [r3, #4]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	4a09      	ldr	r2, [pc, #36]	; (8007a8c <vTaskSwitchContext+0xb4>)
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	4a06      	ldr	r2, [pc, #24]	; (8007a84 <vTaskSwitchContext+0xac>)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6013      	str	r3, [r2, #0]
}
 8007a70:	bf00      	nop
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	20000d58 	.word	0x20000d58
 8007a80:	20000d44 	.word	0x20000d44
 8007a84:	20000d38 	.word	0x20000d38
 8007a88:	20000860 	.word	0x20000860
 8007a8c:	2000085c 	.word	0x2000085c

08007a90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d109      	bne.n	8007ab4 <vTaskPlaceOnEventList+0x24>
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	e7fe      	b.n	8007ab2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ab4:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <vTaskPlaceOnEventList+0x44>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3318      	adds	r3, #24
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7fe fe41 	bl	8006744 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	6838      	ldr	r0, [r7, #0]
 8007ac6:	f000 fa75 	bl	8007fb4 <prvAddCurrentTaskToDelayedList>
}
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	2000085c 	.word	0x2000085c

08007ad8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d109      	bne.n	8007afe <vTaskPlaceOnEventListRestricted+0x26>
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	e7fe      	b.n	8007afc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007afe:	4b0a      	ldr	r3, [pc, #40]	; (8007b28 <vTaskPlaceOnEventListRestricted+0x50>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3318      	adds	r3, #24
 8007b04:	4619      	mov	r1, r3
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7fe fdf9 	bl	80066fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007b12:	f04f 33ff 	mov.w	r3, #4294967295
 8007b16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	68b8      	ldr	r0, [r7, #8]
 8007b1c:	f000 fa4a 	bl	8007fb4 <prvAddCurrentTaskToDelayedList>
	}
 8007b20:	bf00      	nop
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	2000085c 	.word	0x2000085c

08007b2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <xTaskRemoveFromEventList+0x2a>
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	e7fe      	b.n	8007b54 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	3318      	adds	r3, #24
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fe fe2a 	bl	80067b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b60:	4b1d      	ldr	r3, [pc, #116]	; (8007bd8 <xTaskRemoveFromEventList+0xac>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d11d      	bne.n	8007ba4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fe fe21 	bl	80067b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b76:	4b19      	ldr	r3, [pc, #100]	; (8007bdc <xTaskRemoveFromEventList+0xb0>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d903      	bls.n	8007b86 <xTaskRemoveFromEventList+0x5a>
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	4a16      	ldr	r2, [pc, #88]	; (8007bdc <xTaskRemoveFromEventList+0xb0>)
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4a13      	ldr	r2, [pc, #76]	; (8007be0 <xTaskRemoveFromEventList+0xb4>)
 8007b94:	441a      	add	r2, r3
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	f7fe fdae 	bl	80066fe <vListInsertEnd>
 8007ba2:	e005      	b.n	8007bb0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	3318      	adds	r3, #24
 8007ba8:	4619      	mov	r1, r3
 8007baa:	480e      	ldr	r0, [pc, #56]	; (8007be4 <xTaskRemoveFromEventList+0xb8>)
 8007bac:	f7fe fda7 	bl	80066fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb4:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <xTaskRemoveFromEventList+0xbc>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d905      	bls.n	8007bca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bc2:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <xTaskRemoveFromEventList+0xc0>)
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	e001      	b.n	8007bce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007bce:	697b      	ldr	r3, [r7, #20]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	20000d58 	.word	0x20000d58
 8007bdc:	20000d38 	.word	0x20000d38
 8007be0:	20000860 	.word	0x20000860
 8007be4:	20000cf0 	.word	0x20000cf0
 8007be8:	2000085c 	.word	0x2000085c
 8007bec:	20000d44 	.word	0x20000d44

08007bf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bf8:	4b06      	ldr	r3, [pc, #24]	; (8007c14 <vTaskInternalSetTimeOutState+0x24>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c00:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <vTaskInternalSetTimeOutState+0x28>)
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	605a      	str	r2, [r3, #4]
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bc80      	pop	{r7}
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	20000d48 	.word	0x20000d48
 8007c18:	20000d34 	.word	0x20000d34

08007c1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d109      	bne.n	8007c40 <xTaskCheckForTimeOut+0x24>
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	613b      	str	r3, [r7, #16]
 8007c3e:	e7fe      	b.n	8007c3e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d109      	bne.n	8007c5a <xTaskCheckForTimeOut+0x3e>
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	e7fe      	b.n	8007c58 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007c5a:	f000 fdf5 	bl	8008848 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c5e:	4b1d      	ldr	r3, [pc, #116]	; (8007cd4 <xTaskCheckForTimeOut+0xb8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c76:	d102      	bne.n	8007c7e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	61fb      	str	r3, [r7, #28]
 8007c7c:	e023      	b.n	8007cc6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <xTaskCheckForTimeOut+0xbc>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d007      	beq.n	8007c9a <xTaskCheckForTimeOut+0x7e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d302      	bcc.n	8007c9a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c94:	2301      	movs	r3, #1
 8007c96:	61fb      	str	r3, [r7, #28]
 8007c98:	e015      	b.n	8007cc6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d20b      	bcs.n	8007cbc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	1ad2      	subs	r2, r2, r3
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff ff9d 	bl	8007bf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	61fb      	str	r3, [r7, #28]
 8007cba:	e004      	b.n	8007cc6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cc6:	f000 fded 	bl	80088a4 <vPortExitCritical>

	return xReturn;
 8007cca:	69fb      	ldr	r3, [r7, #28]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3720      	adds	r7, #32
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	20000d34 	.word	0x20000d34
 8007cd8:	20000d48 	.word	0x20000d48

08007cdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ce0:	4b03      	ldr	r3, [pc, #12]	; (8007cf0 <vTaskMissedYield+0x14>)
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
}
 8007ce6:	bf00      	nop
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	20000d44 	.word	0x20000d44

08007cf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cfc:	f000 f852 	bl	8007da4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d00:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <prvIdleTask+0x28>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d9f9      	bls.n	8007cfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d08:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <prvIdleTask+0x2c>)
 8007d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d18:	e7f0      	b.n	8007cfc <prvIdleTask+0x8>
 8007d1a:	bf00      	nop
 8007d1c:	20000860 	.word	0x20000860
 8007d20:	e000ed04 	.word	0xe000ed04

08007d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	607b      	str	r3, [r7, #4]
 8007d2e:	e00c      	b.n	8007d4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	4613      	mov	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4a12      	ldr	r2, [pc, #72]	; (8007d84 <prvInitialiseTaskLists+0x60>)
 8007d3c:	4413      	add	r3, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fe fcb2 	bl	80066a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3301      	adds	r3, #1
 8007d48:	607b      	str	r3, [r7, #4]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b37      	cmp	r3, #55	; 0x37
 8007d4e:	d9ef      	bls.n	8007d30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d50:	480d      	ldr	r0, [pc, #52]	; (8007d88 <prvInitialiseTaskLists+0x64>)
 8007d52:	f7fe fca9 	bl	80066a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d56:	480d      	ldr	r0, [pc, #52]	; (8007d8c <prvInitialiseTaskLists+0x68>)
 8007d58:	f7fe fca6 	bl	80066a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d5c:	480c      	ldr	r0, [pc, #48]	; (8007d90 <prvInitialiseTaskLists+0x6c>)
 8007d5e:	f7fe fca3 	bl	80066a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d62:	480c      	ldr	r0, [pc, #48]	; (8007d94 <prvInitialiseTaskLists+0x70>)
 8007d64:	f7fe fca0 	bl	80066a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d68:	480b      	ldr	r0, [pc, #44]	; (8007d98 <prvInitialiseTaskLists+0x74>)
 8007d6a:	f7fe fc9d 	bl	80066a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d6e:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <prvInitialiseTaskLists+0x78>)
 8007d70:	4a05      	ldr	r2, [pc, #20]	; (8007d88 <prvInitialiseTaskLists+0x64>)
 8007d72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d74:	4b0a      	ldr	r3, [pc, #40]	; (8007da0 <prvInitialiseTaskLists+0x7c>)
 8007d76:	4a05      	ldr	r2, [pc, #20]	; (8007d8c <prvInitialiseTaskLists+0x68>)
 8007d78:	601a      	str	r2, [r3, #0]
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000860 	.word	0x20000860
 8007d88:	20000cc0 	.word	0x20000cc0
 8007d8c:	20000cd4 	.word	0x20000cd4
 8007d90:	20000cf0 	.word	0x20000cf0
 8007d94:	20000d04 	.word	0x20000d04
 8007d98:	20000d1c 	.word	0x20000d1c
 8007d9c:	20000ce8 	.word	0x20000ce8
 8007da0:	20000cec 	.word	0x20000cec

08007da4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007daa:	e019      	b.n	8007de0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007dac:	f000 fd4c 	bl	8008848 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007db0:	4b0f      	ldr	r3, [pc, #60]	; (8007df0 <prvCheckTasksWaitingTermination+0x4c>)
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe fcf9 	bl	80067b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dc2:	4b0c      	ldr	r3, [pc, #48]	; (8007df4 <prvCheckTasksWaitingTermination+0x50>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	4a0a      	ldr	r2, [pc, #40]	; (8007df4 <prvCheckTasksWaitingTermination+0x50>)
 8007dca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007dcc:	4b0a      	ldr	r3, [pc, #40]	; (8007df8 <prvCheckTasksWaitingTermination+0x54>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	4a09      	ldr	r2, [pc, #36]	; (8007df8 <prvCheckTasksWaitingTermination+0x54>)
 8007dd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dd6:	f000 fd65 	bl	80088a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f80e 	bl	8007dfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007de0:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <prvCheckTasksWaitingTermination+0x54>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e1      	bne.n	8007dac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	20000d04 	.word	0x20000d04
 8007df4:	20000d30 	.word	0x20000d30
 8007df8:	20000d18 	.word	0x20000d18

08007dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d108      	bne.n	8007e20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fed0 	bl	8008bb8 <vPortFree>
				vPortFree( pxTCB );
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fecd 	bl	8008bb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e1e:	e017      	b.n	8007e50 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d103      	bne.n	8007e32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fec4 	bl	8008bb8 <vPortFree>
	}
 8007e30:	e00e      	b.n	8007e50 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d009      	beq.n	8007e50 <prvDeleteTCB+0x54>
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	e7fe      	b.n	8007e4e <prvDeleteTCB+0x52>
	}
 8007e50:	bf00      	nop
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e5e:	4b0e      	ldr	r3, [pc, #56]	; (8007e98 <prvResetNextTaskUnblockTime+0x40>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <prvResetNextTaskUnblockTime+0x14>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e000      	b.n	8007e6e <prvResetNextTaskUnblockTime+0x16>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d004      	beq.n	8007e7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e72:	4b0a      	ldr	r3, [pc, #40]	; (8007e9c <prvResetNextTaskUnblockTime+0x44>)
 8007e74:	f04f 32ff 	mov.w	r2, #4294967295
 8007e78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e7a:	e008      	b.n	8007e8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <prvResetNextTaskUnblockTime+0x40>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4a04      	ldr	r2, [pc, #16]	; (8007e9c <prvResetNextTaskUnblockTime+0x44>)
 8007e8c:	6013      	str	r3, [r2, #0]
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bc80      	pop	{r7}
 8007e96:	4770      	bx	lr
 8007e98:	20000ce8 	.word	0x20000ce8
 8007e9c:	20000d50 	.word	0x20000d50

08007ea0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <xTaskGetSchedulerState+0x34>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d102      	bne.n	8007eb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	607b      	str	r3, [r7, #4]
 8007eb2:	e008      	b.n	8007ec6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eb4:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <xTaskGetSchedulerState+0x38>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	607b      	str	r3, [r7, #4]
 8007ec0:	e001      	b.n	8007ec6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ec6:	687b      	ldr	r3, [r7, #4]
	}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bc80      	pop	{r7}
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20000d3c 	.word	0x20000d3c
 8007ed8:	20000d58 	.word	0x20000d58

08007edc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d054      	beq.n	8007f9c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ef2:	4b2d      	ldr	r3, [pc, #180]	; (8007fa8 <xTaskPriorityDisinherit+0xcc>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d009      	beq.n	8007f10 <xTaskPriorityDisinherit+0x34>
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	60fb      	str	r3, [r7, #12]
 8007f0e:	e7fe      	b.n	8007f0e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d109      	bne.n	8007f2c <xTaskPriorityDisinherit+0x50>
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	e7fe      	b.n	8007f2a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f30:	1e5a      	subs	r2, r3, #1
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d02c      	beq.n	8007f9c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d128      	bne.n	8007f9c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe fc30 	bl	80067b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6c:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <xTaskPriorityDisinherit+0xd0>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d903      	bls.n	8007f7c <xTaskPriorityDisinherit+0xa0>
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	4a0c      	ldr	r2, [pc, #48]	; (8007fac <xTaskPriorityDisinherit+0xd0>)
 8007f7a:	6013      	str	r3, [r2, #0]
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f80:	4613      	mov	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4a09      	ldr	r2, [pc, #36]	; (8007fb0 <xTaskPriorityDisinherit+0xd4>)
 8007f8a:	441a      	add	r2, r3
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	3304      	adds	r3, #4
 8007f90:	4619      	mov	r1, r3
 8007f92:	4610      	mov	r0, r2
 8007f94:	f7fe fbb3 	bl	80066fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f9c:	697b      	ldr	r3, [r7, #20]
	}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	2000085c 	.word	0x2000085c
 8007fac:	20000d38 	.word	0x20000d38
 8007fb0:	20000860 	.word	0x20000860

08007fb4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fbe:	4b21      	ldr	r3, [pc, #132]	; (8008044 <prvAddCurrentTaskToDelayedList+0x90>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fc4:	4b20      	ldr	r3, [pc, #128]	; (8008048 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fbf2 	bl	80067b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd6:	d10a      	bne.n	8007fee <prvAddCurrentTaskToDelayedList+0x3a>
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d007      	beq.n	8007fee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fde:	4b1a      	ldr	r3, [pc, #104]	; (8008048 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4819      	ldr	r0, [pc, #100]	; (800804c <prvAddCurrentTaskToDelayedList+0x98>)
 8007fe8:	f7fe fb89 	bl	80066fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fec:	e026      	b.n	800803c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ff6:	4b14      	ldr	r3, [pc, #80]	; (8008048 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	429a      	cmp	r2, r3
 8008004:	d209      	bcs.n	800801a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008006:	4b12      	ldr	r3, [pc, #72]	; (8008050 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	4b0f      	ldr	r3, [pc, #60]	; (8008048 <prvAddCurrentTaskToDelayedList+0x94>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3304      	adds	r3, #4
 8008010:	4619      	mov	r1, r3
 8008012:	4610      	mov	r0, r2
 8008014:	f7fe fb96 	bl	8006744 <vListInsert>
}
 8008018:	e010      	b.n	800803c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800801a:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <prvAddCurrentTaskToDelayedList+0xa0>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b0a      	ldr	r3, [pc, #40]	; (8008048 <prvAddCurrentTaskToDelayedList+0x94>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3304      	adds	r3, #4
 8008024:	4619      	mov	r1, r3
 8008026:	4610      	mov	r0, r2
 8008028:	f7fe fb8c 	bl	8006744 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800802c:	4b0a      	ldr	r3, [pc, #40]	; (8008058 <prvAddCurrentTaskToDelayedList+0xa4>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	429a      	cmp	r2, r3
 8008034:	d202      	bcs.n	800803c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008036:	4a08      	ldr	r2, [pc, #32]	; (8008058 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	6013      	str	r3, [r2, #0]
}
 800803c:	bf00      	nop
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	20000d34 	.word	0x20000d34
 8008048:	2000085c 	.word	0x2000085c
 800804c:	20000d1c 	.word	0x20000d1c
 8008050:	20000cec 	.word	0x20000cec
 8008054:	20000ce8 	.word	0x20000ce8
 8008058:	20000d50 	.word	0x20000d50

0800805c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b08a      	sub	sp, #40	; 0x28
 8008060:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008062:	2300      	movs	r3, #0
 8008064:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008066:	f000 fac3 	bl	80085f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800806a:	4b1c      	ldr	r3, [pc, #112]	; (80080dc <xTimerCreateTimerTask+0x80>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d021      	beq.n	80080b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008076:	2300      	movs	r3, #0
 8008078:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800807a:	1d3a      	adds	r2, r7, #4
 800807c:	f107 0108 	add.w	r1, r7, #8
 8008080:	f107 030c 	add.w	r3, r7, #12
 8008084:	4618      	mov	r0, r3
 8008086:	f7fe faf5 	bl	8006674 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800808a:	6879      	ldr	r1, [r7, #4]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	9202      	str	r2, [sp, #8]
 8008092:	9301      	str	r3, [sp, #4]
 8008094:	2302      	movs	r3, #2
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	2300      	movs	r3, #0
 800809a:	460a      	mov	r2, r1
 800809c:	4910      	ldr	r1, [pc, #64]	; (80080e0 <xTimerCreateTimerTask+0x84>)
 800809e:	4811      	ldr	r0, [pc, #68]	; (80080e4 <xTimerCreateTimerTask+0x88>)
 80080a0:	f7ff f886 	bl	80071b0 <xTaskCreateStatic>
 80080a4:	4602      	mov	r2, r0
 80080a6:	4b10      	ldr	r3, [pc, #64]	; (80080e8 <xTimerCreateTimerTask+0x8c>)
 80080a8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80080aa:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <xTimerCreateTimerTask+0x8c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80080b2:	2301      	movs	r3, #1
 80080b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d109      	bne.n	80080d0 <xTimerCreateTimerTask+0x74>
 80080bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	e7fe      	b.n	80080ce <xTimerCreateTimerTask+0x72>
	return xReturn;
 80080d0:	697b      	ldr	r3, [r7, #20]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000d8c 	.word	0x20000d8c
 80080e0:	080097f8 	.word	0x080097f8
 80080e4:	08008205 	.word	0x08008205
 80080e8:	20000d90 	.word	0x20000d90

080080ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	; 0x28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d109      	bne.n	8008118 <xTimerGenericCommand+0x2c>
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	623b      	str	r3, [r7, #32]
 8008116:	e7fe      	b.n	8008116 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008118:	4b19      	ldr	r3, [pc, #100]	; (8008180 <xTimerGenericCommand+0x94>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d02a      	beq.n	8008176 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2b05      	cmp	r3, #5
 8008130:	dc18      	bgt.n	8008164 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008132:	f7ff feb5 	bl	8007ea0 <xTaskGetSchedulerState>
 8008136:	4603      	mov	r3, r0
 8008138:	2b02      	cmp	r3, #2
 800813a:	d109      	bne.n	8008150 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800813c:	4b10      	ldr	r3, [pc, #64]	; (8008180 <xTimerGenericCommand+0x94>)
 800813e:	6818      	ldr	r0, [r3, #0]
 8008140:	f107 0110 	add.w	r1, r7, #16
 8008144:	2300      	movs	r3, #0
 8008146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008148:	f7fe fc5c 	bl	8006a04 <xQueueGenericSend>
 800814c:	6278      	str	r0, [r7, #36]	; 0x24
 800814e:	e012      	b.n	8008176 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008150:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <xTimerGenericCommand+0x94>)
 8008152:	6818      	ldr	r0, [r3, #0]
 8008154:	f107 0110 	add.w	r1, r7, #16
 8008158:	2300      	movs	r3, #0
 800815a:	2200      	movs	r2, #0
 800815c:	f7fe fc52 	bl	8006a04 <xQueueGenericSend>
 8008160:	6278      	str	r0, [r7, #36]	; 0x24
 8008162:	e008      	b.n	8008176 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008164:	4b06      	ldr	r3, [pc, #24]	; (8008180 <xTimerGenericCommand+0x94>)
 8008166:	6818      	ldr	r0, [r3, #0]
 8008168:	f107 0110 	add.w	r1, r7, #16
 800816c:	2300      	movs	r3, #0
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	f7fe fd42 	bl	8006bf8 <xQueueGenericSendFromISR>
 8008174:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008178:	4618      	mov	r0, r3
 800817a:	3728      	adds	r7, #40	; 0x28
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20000d8c 	.word	0x20000d8c

08008184 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af02      	add	r7, sp, #8
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800818e:	4b1c      	ldr	r3, [pc, #112]	; (8008200 <prvProcessExpiredTimer+0x7c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	3304      	adds	r3, #4
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe fb09 	bl	80067b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d121      	bne.n	80081ee <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	699a      	ldr	r2, [r3, #24]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	18d1      	adds	r1, r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	6978      	ldr	r0, [r7, #20]
 80081b8:	f000 f8c8 	bl	800834c <prvInsertTimerInActiveList>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d015      	beq.n	80081ee <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081c2:	2300      	movs	r3, #0
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	2300      	movs	r3, #0
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	2100      	movs	r1, #0
 80081cc:	6978      	ldr	r0, [r7, #20]
 80081ce:	f7ff ff8d 	bl	80080ec <xTimerGenericCommand>
 80081d2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d109      	bne.n	80081ee <prvProcessExpiredTimer+0x6a>
 80081da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	e7fe      	b.n	80081ec <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	6978      	ldr	r0, [r7, #20]
 80081f4:	4798      	blx	r3
}
 80081f6:	bf00      	nop
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000d84 	.word	0x20000d84

08008204 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800820c:	f107 0308 	add.w	r3, r7, #8
 8008210:	4618      	mov	r0, r3
 8008212:	f000 f857 	bl	80082c4 <prvGetNextExpireTime>
 8008216:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4619      	mov	r1, r3
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 f803 	bl	8008228 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008222:	f000 f8d5 	bl	80083d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008226:	e7f1      	b.n	800820c <prvTimerTask+0x8>

08008228 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008232:	f7ff fa5b 	bl	80076ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008236:	f107 0308 	add.w	r3, r7, #8
 800823a:	4618      	mov	r0, r3
 800823c:	f000 f866 	bl	800830c <prvSampleTimeNow>
 8008240:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d130      	bne.n	80082aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10a      	bne.n	8008264 <prvProcessTimerOrBlockTask+0x3c>
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	429a      	cmp	r2, r3
 8008254:	d806      	bhi.n	8008264 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008256:	f7ff fa57 	bl	8007708 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800825a:	68f9      	ldr	r1, [r7, #12]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff ff91 	bl	8008184 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008262:	e024      	b.n	80082ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d008      	beq.n	800827c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800826a:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <prvProcessTimerOrBlockTask+0x90>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	bf0c      	ite	eq
 8008274:	2301      	moveq	r3, #1
 8008276:	2300      	movne	r3, #0
 8008278:	b2db      	uxtb	r3, r3
 800827a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800827c:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <prvProcessTimerOrBlockTask+0x94>)
 800827e:	6818      	ldr	r0, [r3, #0]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	4619      	mov	r1, r3
 800828a:	f7fe ff5d 	bl	8007148 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800828e:	f7ff fa3b 	bl	8007708 <xTaskResumeAll>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10a      	bne.n	80082ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008298:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <prvProcessTimerOrBlockTask+0x98>)
 800829a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	f3bf 8f6f 	isb	sy
}
 80082a8:	e001      	b.n	80082ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80082aa:	f7ff fa2d 	bl	8007708 <xTaskResumeAll>
}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20000d88 	.word	0x20000d88
 80082bc:	20000d8c 	.word	0x20000d8c
 80082c0:	e000ed04 	.word	0xe000ed04

080082c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80082cc:	4b0e      	ldr	r3, [pc, #56]	; (8008308 <prvGetNextExpireTime+0x44>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	bf0c      	ite	eq
 80082d6:	2301      	moveq	r3, #1
 80082d8:	2300      	movne	r3, #0
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	461a      	mov	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082ea:	4b07      	ldr	r3, [pc, #28]	; (8008308 <prvGetNextExpireTime+0x44>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	e001      	b.n	80082fa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80082fa:	68fb      	ldr	r3, [r7, #12]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	20000d84 	.word	0x20000d84

0800830c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008314:	f7ff fa94 	bl	8007840 <xTaskGetTickCount>
 8008318:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800831a:	4b0b      	ldr	r3, [pc, #44]	; (8008348 <prvSampleTimeNow+0x3c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	429a      	cmp	r2, r3
 8008322:	d205      	bcs.n	8008330 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008324:	f000 f904 	bl	8008530 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	e002      	b.n	8008336 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008336:	4a04      	ldr	r2, [pc, #16]	; (8008348 <prvSampleTimeNow+0x3c>)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800833c:	68fb      	ldr	r3, [r7, #12]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000d94 	.word	0x20000d94

0800834c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800835a:	2300      	movs	r3, #0
 800835c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	429a      	cmp	r2, r3
 8008370:	d812      	bhi.n	8008398 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	1ad2      	subs	r2, r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	429a      	cmp	r2, r3
 800837e:	d302      	bcc.n	8008386 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008380:	2301      	movs	r3, #1
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	e01b      	b.n	80083be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008386:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <prvInsertTimerInActiveList+0x7c>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3304      	adds	r3, #4
 800838e:	4619      	mov	r1, r3
 8008390:	4610      	mov	r0, r2
 8008392:	f7fe f9d7 	bl	8006744 <vListInsert>
 8008396:	e012      	b.n	80083be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	429a      	cmp	r2, r3
 800839e:	d206      	bcs.n	80083ae <prvInsertTimerInActiveList+0x62>
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d302      	bcc.n	80083ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80083a8:	2301      	movs	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	e007      	b.n	80083be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083ae:	4b07      	ldr	r3, [pc, #28]	; (80083cc <prvInsertTimerInActiveList+0x80>)
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3304      	adds	r3, #4
 80083b6:	4619      	mov	r1, r3
 80083b8:	4610      	mov	r0, r2
 80083ba:	f7fe f9c3 	bl	8006744 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80083be:	697b      	ldr	r3, [r7, #20]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	20000d88 	.word	0x20000d88
 80083cc:	20000d84 	.word	0x20000d84

080083d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08e      	sub	sp, #56	; 0x38
 80083d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083d6:	e099      	b.n	800850c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	da17      	bge.n	800840e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80083de:	1d3b      	adds	r3, r7, #4
 80083e0:	3304      	adds	r3, #4
 80083e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80083e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d109      	bne.n	80083fe <prvProcessReceivedCommands+0x2e>
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	61fb      	str	r3, [r7, #28]
 80083fc:	e7fe      	b.n	80083fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80083fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008404:	6850      	ldr	r0, [r2, #4]
 8008406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008408:	6892      	ldr	r2, [r2, #8]
 800840a:	4611      	mov	r1, r2
 800840c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	db7a      	blt.n	800850a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008422:	3304      	adds	r3, #4
 8008424:	4618      	mov	r0, r3
 8008426:	f7fe f9c5 	bl	80067b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800842a:	463b      	mov	r3, r7
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff ff6d 	bl	800830c <prvSampleTimeNow>
 8008432:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b09      	cmp	r3, #9
 8008438:	d868      	bhi.n	800850c <prvProcessReceivedCommands+0x13c>
 800843a:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <prvProcessReceivedCommands+0x70>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	08008469 	.word	0x08008469
 8008444:	08008469 	.word	0x08008469
 8008448:	08008469 	.word	0x08008469
 800844c:	0800850d 	.word	0x0800850d
 8008450:	080084c3 	.word	0x080084c3
 8008454:	080084f9 	.word	0x080084f9
 8008458:	08008469 	.word	0x08008469
 800845c:	08008469 	.word	0x08008469
 8008460:	0800850d 	.word	0x0800850d
 8008464:	080084c3 	.word	0x080084c3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	18d1      	adds	r1, r2, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008476:	f7ff ff69 	bl	800834c <prvInsertTimerInActiveList>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d045      	beq.n	800850c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008486:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	69db      	ldr	r3, [r3, #28]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d13d      	bne.n	800850c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	441a      	add	r2, r3
 8008498:	2300      	movs	r3, #0
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	2300      	movs	r3, #0
 800849e:	2100      	movs	r1, #0
 80084a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084a2:	f7ff fe23 	bl	80080ec <xTimerGenericCommand>
 80084a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d12e      	bne.n	800850c <prvProcessReceivedCommands+0x13c>
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	61bb      	str	r3, [r7, #24]
 80084c0:	e7fe      	b.n	80084c0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d109      	bne.n	80084e4 <prvProcessReceivedCommands+0x114>
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	e7fe      	b.n	80084e2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	699a      	ldr	r2, [r3, #24]
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	18d1      	adds	r1, r2, r3
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084f2:	f7ff ff2b 	bl	800834c <prvInsertTimerInActiveList>
					break;
 80084f6:	e009      	b.n	800850c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80084f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008504:	f000 fb58 	bl	8008bb8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008508:	e000      	b.n	800850c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800850a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800850c:	4b07      	ldr	r3, [pc, #28]	; (800852c <prvProcessReceivedCommands+0x15c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	1d39      	adds	r1, r7, #4
 8008512:	2200      	movs	r2, #0
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe fc03 	bl	8006d20 <xQueueReceive>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	f47f af5b 	bne.w	80083d8 <prvProcessReceivedCommands+0x8>
	}
}
 8008522:	bf00      	nop
 8008524:	3730      	adds	r7, #48	; 0x30
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000d8c 	.word	0x20000d8c

08008530 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008536:	e044      	b.n	80085c2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008538:	4b2b      	ldr	r3, [pc, #172]	; (80085e8 <prvSwitchTimerLists+0xb8>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008542:	4b29      	ldr	r3, [pc, #164]	; (80085e8 <prvSwitchTimerLists+0xb8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3304      	adds	r3, #4
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe f92f 	bl	80067b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d12d      	bne.n	80085c2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4413      	add	r3, r2
 800856e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	429a      	cmp	r2, r3
 8008576:	d90e      	bls.n	8008596 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008584:	4b18      	ldr	r3, [pc, #96]	; (80085e8 <prvSwitchTimerLists+0xb8>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	3304      	adds	r3, #4
 800858c:	4619      	mov	r1, r3
 800858e:	4610      	mov	r0, r2
 8008590:	f7fe f8d8 	bl	8006744 <vListInsert>
 8008594:	e015      	b.n	80085c2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008596:	2300      	movs	r3, #0
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	2300      	movs	r3, #0
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	2100      	movs	r1, #0
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7ff fda3 	bl	80080ec <xTimerGenericCommand>
 80085a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d109      	bne.n	80085c2 <prvSwitchTimerLists+0x92>
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	603b      	str	r3, [r7, #0]
 80085c0:	e7fe      	b.n	80085c0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085c2:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <prvSwitchTimerLists+0xb8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1b5      	bne.n	8008538 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80085cc:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <prvSwitchTimerLists+0xb8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80085d2:	4b06      	ldr	r3, [pc, #24]	; (80085ec <prvSwitchTimerLists+0xbc>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a04      	ldr	r2, [pc, #16]	; (80085e8 <prvSwitchTimerLists+0xb8>)
 80085d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085da:	4a04      	ldr	r2, [pc, #16]	; (80085ec <prvSwitchTimerLists+0xbc>)
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	6013      	str	r3, [r2, #0]
}
 80085e0:	bf00      	nop
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	20000d84 	.word	0x20000d84
 80085ec:	20000d88 	.word	0x20000d88

080085f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085f6:	f000 f927 	bl	8008848 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085fa:	4b15      	ldr	r3, [pc, #84]	; (8008650 <prvCheckForValidListAndQueue+0x60>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d120      	bne.n	8008644 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008602:	4814      	ldr	r0, [pc, #80]	; (8008654 <prvCheckForValidListAndQueue+0x64>)
 8008604:	f7fe f850 	bl	80066a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008608:	4813      	ldr	r0, [pc, #76]	; (8008658 <prvCheckForValidListAndQueue+0x68>)
 800860a:	f7fe f84d 	bl	80066a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800860e:	4b13      	ldr	r3, [pc, #76]	; (800865c <prvCheckForValidListAndQueue+0x6c>)
 8008610:	4a10      	ldr	r2, [pc, #64]	; (8008654 <prvCheckForValidListAndQueue+0x64>)
 8008612:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008614:	4b12      	ldr	r3, [pc, #72]	; (8008660 <prvCheckForValidListAndQueue+0x70>)
 8008616:	4a10      	ldr	r2, [pc, #64]	; (8008658 <prvCheckForValidListAndQueue+0x68>)
 8008618:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800861a:	2300      	movs	r3, #0
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	4b11      	ldr	r3, [pc, #68]	; (8008664 <prvCheckForValidListAndQueue+0x74>)
 8008620:	4a11      	ldr	r2, [pc, #68]	; (8008668 <prvCheckForValidListAndQueue+0x78>)
 8008622:	2110      	movs	r1, #16
 8008624:	200a      	movs	r0, #10
 8008626:	f7fe f957 	bl	80068d8 <xQueueGenericCreateStatic>
 800862a:	4602      	mov	r2, r0
 800862c:	4b08      	ldr	r3, [pc, #32]	; (8008650 <prvCheckForValidListAndQueue+0x60>)
 800862e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008630:	4b07      	ldr	r3, [pc, #28]	; (8008650 <prvCheckForValidListAndQueue+0x60>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008638:	4b05      	ldr	r3, [pc, #20]	; (8008650 <prvCheckForValidListAndQueue+0x60>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	490b      	ldr	r1, [pc, #44]	; (800866c <prvCheckForValidListAndQueue+0x7c>)
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe fd5a 	bl	80070f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008644:	f000 f92e 	bl	80088a4 <vPortExitCritical>
}
 8008648:	bf00      	nop
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20000d8c 	.word	0x20000d8c
 8008654:	20000d5c 	.word	0x20000d5c
 8008658:	20000d70 	.word	0x20000d70
 800865c:	20000d84 	.word	0x20000d84
 8008660:	20000d88 	.word	0x20000d88
 8008664:	20000e38 	.word	0x20000e38
 8008668:	20000d98 	.word	0x20000d98
 800866c:	08009800 	.word	0x08009800

08008670 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	3b04      	subs	r3, #4
 8008680:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3b04      	subs	r3, #4
 800868e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	f023 0201 	bic.w	r2, r3, #1
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3b04      	subs	r3, #4
 800869e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086a0:	4a08      	ldr	r2, [pc, #32]	; (80086c4 <pxPortInitialiseStack+0x54>)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3b14      	subs	r3, #20
 80086aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3b20      	subs	r3, #32
 80086b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086b8:	68fb      	ldr	r3, [r7, #12]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	bc80      	pop	{r7}
 80086c2:	4770      	bx	lr
 80086c4:	080086c9 	.word	0x080086c9

080086c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086d2:	4b10      	ldr	r3, [pc, #64]	; (8008714 <prvTaskExitError+0x4c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086da:	d009      	beq.n	80086f0 <prvTaskExitError+0x28>
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	e7fe      	b.n	80086ee <prvTaskExitError+0x26>
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008702:	bf00      	nop
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d0fc      	beq.n	8008704 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr
 8008714:	2000011c 	.word	0x2000011c
	...

08008720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008720:	4b07      	ldr	r3, [pc, #28]	; (8008740 <pxCurrentTCBConst2>)
 8008722:	6819      	ldr	r1, [r3, #0]
 8008724:	6808      	ldr	r0, [r1, #0]
 8008726:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800872a:	f380 8809 	msr	PSP, r0
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f04f 0000 	mov.w	r0, #0
 8008736:	f380 8811 	msr	BASEPRI, r0
 800873a:	f04e 0e0d 	orr.w	lr, lr, #13
 800873e:	4770      	bx	lr

08008740 <pxCurrentTCBConst2>:
 8008740:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008744:	bf00      	nop
 8008746:	bf00      	nop

08008748 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008748:	4806      	ldr	r0, [pc, #24]	; (8008764 <prvPortStartFirstTask+0x1c>)
 800874a:	6800      	ldr	r0, [r0, #0]
 800874c:	6800      	ldr	r0, [r0, #0]
 800874e:	f380 8808 	msr	MSP, r0
 8008752:	b662      	cpsie	i
 8008754:	b661      	cpsie	f
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	df00      	svc	0
 8008760:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008762:	bf00      	nop
 8008764:	e000ed08 	.word	0xe000ed08

08008768 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800876e:	4b31      	ldr	r3, [pc, #196]	; (8008834 <xPortStartScheduler+0xcc>)
 8008770:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	b2db      	uxtb	r3, r3
 8008778:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	22ff      	movs	r2, #255	; 0xff
 800877e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	b2db      	uxtb	r3, r3
 8008786:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	b2db      	uxtb	r3, r3
 800878c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008790:	b2da      	uxtb	r2, r3
 8008792:	4b29      	ldr	r3, [pc, #164]	; (8008838 <xPortStartScheduler+0xd0>)
 8008794:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008796:	4b29      	ldr	r3, [pc, #164]	; (800883c <xPortStartScheduler+0xd4>)
 8008798:	2207      	movs	r2, #7
 800879a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800879c:	e009      	b.n	80087b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800879e:	4b27      	ldr	r3, [pc, #156]	; (800883c <xPortStartScheduler+0xd4>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3b01      	subs	r3, #1
 80087a4:	4a25      	ldr	r2, [pc, #148]	; (800883c <xPortStartScheduler+0xd4>)
 80087a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087a8:	78fb      	ldrb	r3, [r7, #3]
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ba:	2b80      	cmp	r3, #128	; 0x80
 80087bc:	d0ef      	beq.n	800879e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087be:	4b1f      	ldr	r3, [pc, #124]	; (800883c <xPortStartScheduler+0xd4>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f1c3 0307 	rsb	r3, r3, #7
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d009      	beq.n	80087de <xPortStartScheduler+0x76>
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	60bb      	str	r3, [r7, #8]
 80087dc:	e7fe      	b.n	80087dc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087de:	4b17      	ldr	r3, [pc, #92]	; (800883c <xPortStartScheduler+0xd4>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	021b      	lsls	r3, r3, #8
 80087e4:	4a15      	ldr	r2, [pc, #84]	; (800883c <xPortStartScheduler+0xd4>)
 80087e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087e8:	4b14      	ldr	r3, [pc, #80]	; (800883c <xPortStartScheduler+0xd4>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087f0:	4a12      	ldr	r2, [pc, #72]	; (800883c <xPortStartScheduler+0xd4>)
 80087f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087fc:	4b10      	ldr	r3, [pc, #64]	; (8008840 <xPortStartScheduler+0xd8>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a0f      	ldr	r2, [pc, #60]	; (8008840 <xPortStartScheduler+0xd8>)
 8008802:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008806:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008808:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <xPortStartScheduler+0xd8>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a0c      	ldr	r2, [pc, #48]	; (8008840 <xPortStartScheduler+0xd8>)
 800880e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008812:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008814:	f000 f8b0 	bl	8008978 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <xPortStartScheduler+0xdc>)
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800881e:	f7ff ff93 	bl	8008748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008822:	f7ff f8d9 	bl	80079d8 <vTaskSwitchContext>
	prvTaskExitError();
 8008826:	f7ff ff4f 	bl	80086c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	e000e400 	.word	0xe000e400
 8008838:	20000e88 	.word	0x20000e88
 800883c:	20000e8c 	.word	0x20000e8c
 8008840:	e000ed20 	.word	0xe000ed20
 8008844:	2000011c 	.word	0x2000011c

08008848 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008860:	4b0e      	ldr	r3, [pc, #56]	; (800889c <vPortEnterCritical+0x54>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3301      	adds	r3, #1
 8008866:	4a0d      	ldr	r2, [pc, #52]	; (800889c <vPortEnterCritical+0x54>)
 8008868:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800886a:	4b0c      	ldr	r3, [pc, #48]	; (800889c <vPortEnterCritical+0x54>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d10e      	bne.n	8008890 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008872:	4b0b      	ldr	r3, [pc, #44]	; (80088a0 <vPortEnterCritical+0x58>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b00      	cmp	r3, #0
 800887a:	d009      	beq.n	8008890 <vPortEnterCritical+0x48>
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	603b      	str	r3, [r7, #0]
 800888e:	e7fe      	b.n	800888e <vPortEnterCritical+0x46>
	}
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	bc80      	pop	{r7}
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	2000011c 	.word	0x2000011c
 80088a0:	e000ed04 	.word	0xe000ed04

080088a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088aa:	4b10      	ldr	r3, [pc, #64]	; (80088ec <vPortExitCritical+0x48>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d109      	bne.n	80088c6 <vPortExitCritical+0x22>
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	e7fe      	b.n	80088c4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80088c6:	4b09      	ldr	r3, [pc, #36]	; (80088ec <vPortExitCritical+0x48>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	4a07      	ldr	r2, [pc, #28]	; (80088ec <vPortExitCritical+0x48>)
 80088ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088d0:	4b06      	ldr	r3, [pc, #24]	; (80088ec <vPortExitCritical+0x48>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d104      	bne.n	80088e2 <vPortExitCritical+0x3e>
 80088d8:	2300      	movs	r3, #0
 80088da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bc80      	pop	{r7}
 80088ea:	4770      	bx	lr
 80088ec:	2000011c 	.word	0x2000011c

080088f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088f0:	f3ef 8009 	mrs	r0, PSP
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	4b0d      	ldr	r3, [pc, #52]	; (8008930 <pxCurrentTCBConst>)
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008900:	6010      	str	r0, [r2, #0]
 8008902:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008906:	f04f 0050 	mov.w	r0, #80	; 0x50
 800890a:	f380 8811 	msr	BASEPRI, r0
 800890e:	f7ff f863 	bl	80079d8 <vTaskSwitchContext>
 8008912:	f04f 0000 	mov.w	r0, #0
 8008916:	f380 8811 	msr	BASEPRI, r0
 800891a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800891e:	6819      	ldr	r1, [r3, #0]
 8008920:	6808      	ldr	r0, [r1, #0]
 8008922:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008926:	f380 8809 	msr	PSP, r0
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	4770      	bx	lr

08008930 <pxCurrentTCBConst>:
 8008930:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008934:	bf00      	nop
 8008936:	bf00      	nop

08008938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008950:	f7fe ff84 	bl	800785c <xTaskIncrementTick>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d003      	beq.n	8008962 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800895a:	4b06      	ldr	r3, [pc, #24]	; (8008974 <xPortSysTickHandler+0x3c>)
 800895c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	2300      	movs	r3, #0
 8008964:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800896c:	bf00      	nop
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	e000ed04 	.word	0xe000ed04

08008978 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008978:	b480      	push	{r7}
 800897a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800897c:	4b0a      	ldr	r3, [pc, #40]	; (80089a8 <vPortSetupTimerInterrupt+0x30>)
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008982:	4b0a      	ldr	r3, [pc, #40]	; (80089ac <vPortSetupTimerInterrupt+0x34>)
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008988:	4b09      	ldr	r3, [pc, #36]	; (80089b0 <vPortSetupTimerInterrupt+0x38>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a09      	ldr	r2, [pc, #36]	; (80089b4 <vPortSetupTimerInterrupt+0x3c>)
 800898e:	fba2 2303 	umull	r2, r3, r2, r3
 8008992:	099b      	lsrs	r3, r3, #6
 8008994:	4a08      	ldr	r2, [pc, #32]	; (80089b8 <vPortSetupTimerInterrupt+0x40>)
 8008996:	3b01      	subs	r3, #1
 8008998:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800899a:	4b03      	ldr	r3, [pc, #12]	; (80089a8 <vPortSetupTimerInterrupt+0x30>)
 800899c:	2207      	movs	r2, #7
 800899e:	601a      	str	r2, [r3, #0]
}
 80089a0:	bf00      	nop
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bc80      	pop	{r7}
 80089a6:	4770      	bx	lr
 80089a8:	e000e010 	.word	0xe000e010
 80089ac:	e000e018 	.word	0xe000e018
 80089b0:	20000000 	.word	0x20000000
 80089b4:	10624dd3 	.word	0x10624dd3
 80089b8:	e000e014 	.word	0xe000e014

080089bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089c2:	f3ef 8305 	mrs	r3, IPSR
 80089c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b0f      	cmp	r3, #15
 80089cc:	d913      	bls.n	80089f6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089ce:	4a15      	ldr	r2, [pc, #84]	; (8008a24 <vPortValidateInterruptPriority+0x68>)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4413      	add	r3, r2
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089d8:	4b13      	ldr	r3, [pc, #76]	; (8008a28 <vPortValidateInterruptPriority+0x6c>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	7afa      	ldrb	r2, [r7, #11]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d209      	bcs.n	80089f6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	607b      	str	r3, [r7, #4]
 80089f4:	e7fe      	b.n	80089f4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089f6:	4b0d      	ldr	r3, [pc, #52]	; (8008a2c <vPortValidateInterruptPriority+0x70>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089fe:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <vPortValidateInterruptPriority+0x74>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d909      	bls.n	8008a1a <vPortValidateInterruptPriority+0x5e>
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	603b      	str	r3, [r7, #0]
 8008a18:	e7fe      	b.n	8008a18 <vPortValidateInterruptPriority+0x5c>
	}
 8008a1a:	bf00      	nop
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bc80      	pop	{r7}
 8008a22:	4770      	bx	lr
 8008a24:	e000e3f0 	.word	0xe000e3f0
 8008a28:	20000e88 	.word	0x20000e88
 8008a2c:	e000ed0c 	.word	0xe000ed0c
 8008a30:	20000e8c 	.word	0x20000e8c

08008a34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08a      	sub	sp, #40	; 0x28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a40:	f7fe fe54 	bl	80076ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a44:	4b57      	ldr	r3, [pc, #348]	; (8008ba4 <pvPortMalloc+0x170>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a4c:	f000 f90c 	bl	8008c68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a50:	4b55      	ldr	r3, [pc, #340]	; (8008ba8 <pvPortMalloc+0x174>)
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4013      	ands	r3, r2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f040 808c 	bne.w	8008b76 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d01c      	beq.n	8008a9e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008a64:	2208      	movs	r2, #8
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4413      	add	r3, r2
 8008a6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f003 0307 	and.w	r3, r3, #7
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d013      	beq.n	8008a9e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f023 0307 	bic.w	r3, r3, #7
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f003 0307 	and.w	r3, r3, #7
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d009      	beq.n	8008a9e <pvPortMalloc+0x6a>
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	e7fe      	b.n	8008a9c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d068      	beq.n	8008b76 <pvPortMalloc+0x142>
 8008aa4:	4b41      	ldr	r3, [pc, #260]	; (8008bac <pvPortMalloc+0x178>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d863      	bhi.n	8008b76 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008aae:	4b40      	ldr	r3, [pc, #256]	; (8008bb0 <pvPortMalloc+0x17c>)
 8008ab0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ab2:	4b3f      	ldr	r3, [pc, #252]	; (8008bb0 <pvPortMalloc+0x17c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ab8:	e004      	b.n	8008ac4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d903      	bls.n	8008ad6 <pvPortMalloc+0xa2>
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1f1      	bne.n	8008aba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ad6:	4b33      	ldr	r3, [pc, #204]	; (8008ba4 <pvPortMalloc+0x170>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d04a      	beq.n	8008b76 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2208      	movs	r2, #8
 8008ae6:	4413      	add	r3, r2
 8008ae8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	1ad2      	subs	r2, r2, r3
 8008afa:	2308      	movs	r3, #8
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d91e      	bls.n	8008b40 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4413      	add	r3, r2
 8008b08:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	f003 0307 	and.w	r3, r3, #7
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d009      	beq.n	8008b28 <pvPortMalloc+0xf4>
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	613b      	str	r3, [r7, #16]
 8008b26:	e7fe      	b.n	8008b26 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	1ad2      	subs	r2, r2, r3
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b3a:	69b8      	ldr	r0, [r7, #24]
 8008b3c:	f000 f8f6 	bl	8008d2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b40:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <pvPortMalloc+0x178>)
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	4a18      	ldr	r2, [pc, #96]	; (8008bac <pvPortMalloc+0x178>)
 8008b4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b4e:	4b17      	ldr	r3, [pc, #92]	; (8008bac <pvPortMalloc+0x178>)
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	4b18      	ldr	r3, [pc, #96]	; (8008bb4 <pvPortMalloc+0x180>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d203      	bcs.n	8008b62 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b5a:	4b14      	ldr	r3, [pc, #80]	; (8008bac <pvPortMalloc+0x178>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a15      	ldr	r2, [pc, #84]	; (8008bb4 <pvPortMalloc+0x180>)
 8008b60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	4b10      	ldr	r3, [pc, #64]	; (8008ba8 <pvPortMalloc+0x174>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b76:	f7fe fdc7 	bl	8007708 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d009      	beq.n	8008b98 <pvPortMalloc+0x164>
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	e7fe      	b.n	8008b96 <pvPortMalloc+0x162>
	return pvReturn;
 8008b98:	69fb      	ldr	r3, [r7, #28]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3728      	adds	r7, #40	; 0x28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20001a98 	.word	0x20001a98
 8008ba8:	20001aa4 	.word	0x20001aa4
 8008bac:	20001a9c 	.word	0x20001a9c
 8008bb0:	20001a90 	.word	0x20001a90
 8008bb4:	20001aa0 	.word	0x20001aa0

08008bb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d046      	beq.n	8008c58 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bca:	2308      	movs	r3, #8
 8008bcc:	425b      	negs	r3, r3
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	4b20      	ldr	r3, [pc, #128]	; (8008c60 <vPortFree+0xa8>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4013      	ands	r3, r2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d109      	bne.n	8008bfa <vPortFree+0x42>
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	e7fe      	b.n	8008bf8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d009      	beq.n	8008c16 <vPortFree+0x5e>
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	60bb      	str	r3, [r7, #8]
 8008c14:	e7fe      	b.n	8008c14 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	4b11      	ldr	r3, [pc, #68]	; (8008c60 <vPortFree+0xa8>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4013      	ands	r3, r2
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d019      	beq.n	8008c58 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d115      	bne.n	8008c58 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <vPortFree+0xa8>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	43db      	mvns	r3, r3
 8008c36:	401a      	ands	r2, r3
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c3c:	f7fe fd56 	bl	80076ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	4b07      	ldr	r3, [pc, #28]	; (8008c64 <vPortFree+0xac>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4413      	add	r3, r2
 8008c4a:	4a06      	ldr	r2, [pc, #24]	; (8008c64 <vPortFree+0xac>)
 8008c4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c4e:	6938      	ldr	r0, [r7, #16]
 8008c50:	f000 f86c 	bl	8008d2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c54:	f7fe fd58 	bl	8007708 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c58:	bf00      	nop
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20001aa4 	.word	0x20001aa4
 8008c64:	20001a9c 	.word	0x20001a9c

08008c68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008c72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c74:	4b27      	ldr	r3, [pc, #156]	; (8008d14 <prvHeapInit+0xac>)
 8008c76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00c      	beq.n	8008c9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3307      	adds	r3, #7
 8008c86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f023 0307 	bic.w	r3, r3, #7
 8008c8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	4a1f      	ldr	r2, [pc, #124]	; (8008d14 <prvHeapInit+0xac>)
 8008c98:	4413      	add	r3, r2
 8008c9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ca0:	4a1d      	ldr	r2, [pc, #116]	; (8008d18 <prvHeapInit+0xb0>)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ca6:	4b1c      	ldr	r3, [pc, #112]	; (8008d18 <prvHeapInit+0xb0>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cb4:	2208      	movs	r2, #8
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	1a9b      	subs	r3, r3, r2
 8008cba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f023 0307 	bic.w	r3, r3, #7
 8008cc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4a15      	ldr	r2, [pc, #84]	; (8008d1c <prvHeapInit+0xb4>)
 8008cc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cca:	4b14      	ldr	r3, [pc, #80]	; (8008d1c <prvHeapInit+0xb4>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cd2:	4b12      	ldr	r3, [pc, #72]	; (8008d1c <prvHeapInit+0xb4>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	1ad2      	subs	r2, r2, r3
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ce8:	4b0c      	ldr	r3, [pc, #48]	; (8008d1c <prvHeapInit+0xb4>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	4a0a      	ldr	r2, [pc, #40]	; (8008d20 <prvHeapInit+0xb8>)
 8008cf6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	4a09      	ldr	r2, [pc, #36]	; (8008d24 <prvHeapInit+0xbc>)
 8008cfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d00:	4b09      	ldr	r3, [pc, #36]	; (8008d28 <prvHeapInit+0xc0>)
 8008d02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d06:	601a      	str	r2, [r3, #0]
}
 8008d08:	bf00      	nop
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bc80      	pop	{r7}
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	20000e90 	.word	0x20000e90
 8008d18:	20001a90 	.word	0x20001a90
 8008d1c:	20001a98 	.word	0x20001a98
 8008d20:	20001aa0 	.word	0x20001aa0
 8008d24:	20001a9c 	.word	0x20001a9c
 8008d28:	20001aa4 	.word	0x20001aa4

08008d2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d34:	4b27      	ldr	r3, [pc, #156]	; (8008dd4 <prvInsertBlockIntoFreeList+0xa8>)
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	e002      	b.n	8008d40 <prvInsertBlockIntoFreeList+0x14>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d8f7      	bhi.n	8008d3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	4413      	add	r3, r2
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d108      	bne.n	8008d6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	441a      	add	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	441a      	add	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d118      	bne.n	8008db4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	4b14      	ldr	r3, [pc, #80]	; (8008dd8 <prvInsertBlockIntoFreeList+0xac>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d00d      	beq.n	8008daa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	441a      	add	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	e008      	b.n	8008dbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008daa:	4b0b      	ldr	r3, [pc, #44]	; (8008dd8 <prvInsertBlockIntoFreeList+0xac>)
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	601a      	str	r2, [r3, #0]
 8008db2:	e003      	b.n	8008dbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d002      	beq.n	8008dca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dca:	bf00      	nop
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bc80      	pop	{r7}
 8008dd2:	4770      	bx	lr
 8008dd4:	20001a90 	.word	0x20001a90
 8008dd8:	20001a98 	.word	0x20001a98

08008ddc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008de0:	2200      	movs	r2, #0
 8008de2:	4912      	ldr	r1, [pc, #72]	; (8008e2c <MX_USB_DEVICE_Init+0x50>)
 8008de4:	4812      	ldr	r0, [pc, #72]	; (8008e30 <MX_USB_DEVICE_Init+0x54>)
 8008de6:	f7fc fa62 	bl	80052ae <USBD_Init>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008df0:	f7f7 fb26 	bl	8000440 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008df4:	490f      	ldr	r1, [pc, #60]	; (8008e34 <MX_USB_DEVICE_Init+0x58>)
 8008df6:	480e      	ldr	r0, [pc, #56]	; (8008e30 <MX_USB_DEVICE_Init+0x54>)
 8008df8:	f7fc fa84 	bl	8005304 <USBD_RegisterClass>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e02:	f7f7 fb1d 	bl	8000440 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e06:	490c      	ldr	r1, [pc, #48]	; (8008e38 <MX_USB_DEVICE_Init+0x5c>)
 8008e08:	4809      	ldr	r0, [pc, #36]	; (8008e30 <MX_USB_DEVICE_Init+0x54>)
 8008e0a:	f7fc f9b5 	bl	8005178 <USBD_CDC_RegisterInterface>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e14:	f7f7 fb14 	bl	8000440 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e18:	4805      	ldr	r0, [pc, #20]	; (8008e30 <MX_USB_DEVICE_Init+0x54>)
 8008e1a:	f7fc fa8c 	bl	8005336 <USBD_Start>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e24:	f7f7 fb0c 	bl	8000440 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e28:	bf00      	nop
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20000130 	.word	0x20000130
 8008e30:	20001d30 	.word	0x20001d30
 8008e34:	20000018 	.word	0x20000018
 8008e38:	20000120 	.word	0x20000120

08008e3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e40:	2200      	movs	r2, #0
 8008e42:	4905      	ldr	r1, [pc, #20]	; (8008e58 <CDC_Init_FS+0x1c>)
 8008e44:	4805      	ldr	r0, [pc, #20]	; (8008e5c <CDC_Init_FS+0x20>)
 8008e46:	f7fc f9ad 	bl	80051a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e4a:	4905      	ldr	r1, [pc, #20]	; (8008e60 <CDC_Init_FS+0x24>)
 8008e4c:	4803      	ldr	r0, [pc, #12]	; (8008e5c <CDC_Init_FS+0x20>)
 8008e4e:	f7fc f9c2 	bl	80051d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	20002034 	.word	0x20002034
 8008e5c:	20001d30 	.word	0x20001d30
 8008e60:	20001ff4 	.word	0x20001ff4

08008e64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e64:	b480      	push	{r7}
 8008e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bc80      	pop	{r7}
 8008e70:	4770      	bx	lr
	...

08008e74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	71fb      	strb	r3, [r7, #7]
 8008e80:	4613      	mov	r3, r2
 8008e82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	2b23      	cmp	r3, #35	; 0x23
 8008e88:	d84a      	bhi.n	8008f20 <CDC_Control_FS+0xac>
 8008e8a:	a201      	add	r2, pc, #4	; (adr r2, 8008e90 <CDC_Control_FS+0x1c>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008f21 	.word	0x08008f21
 8008e94:	08008f21 	.word	0x08008f21
 8008e98:	08008f21 	.word	0x08008f21
 8008e9c:	08008f21 	.word	0x08008f21
 8008ea0:	08008f21 	.word	0x08008f21
 8008ea4:	08008f21 	.word	0x08008f21
 8008ea8:	08008f21 	.word	0x08008f21
 8008eac:	08008f21 	.word	0x08008f21
 8008eb0:	08008f21 	.word	0x08008f21
 8008eb4:	08008f21 	.word	0x08008f21
 8008eb8:	08008f21 	.word	0x08008f21
 8008ebc:	08008f21 	.word	0x08008f21
 8008ec0:	08008f21 	.word	0x08008f21
 8008ec4:	08008f21 	.word	0x08008f21
 8008ec8:	08008f21 	.word	0x08008f21
 8008ecc:	08008f21 	.word	0x08008f21
 8008ed0:	08008f21 	.word	0x08008f21
 8008ed4:	08008f21 	.word	0x08008f21
 8008ed8:	08008f21 	.word	0x08008f21
 8008edc:	08008f21 	.word	0x08008f21
 8008ee0:	08008f21 	.word	0x08008f21
 8008ee4:	08008f21 	.word	0x08008f21
 8008ee8:	08008f21 	.word	0x08008f21
 8008eec:	08008f21 	.word	0x08008f21
 8008ef0:	08008f21 	.word	0x08008f21
 8008ef4:	08008f21 	.word	0x08008f21
 8008ef8:	08008f21 	.word	0x08008f21
 8008efc:	08008f21 	.word	0x08008f21
 8008f00:	08008f21 	.word	0x08008f21
 8008f04:	08008f21 	.word	0x08008f21
 8008f08:	08008f21 	.word	0x08008f21
 8008f0c:	08008f21 	.word	0x08008f21
 8008f10:	08008f21 	.word	0x08008f21
 8008f14:	08008f21 	.word	0x08008f21
 8008f18:	08008f21 	.word	0x08008f21
 8008f1c:	08008f21 	.word	0x08008f21
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f20:	bf00      	nop
  }

  return (USBD_OK);
 8008f22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bc80      	pop	{r7}
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop

08008f30 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	4805      	ldr	r0, [pc, #20]	; (8008f54 <CDC_Receive_FS+0x24>)
 8008f3e:	f7fc f94a 	bl	80051d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f42:	4804      	ldr	r0, [pc, #16]	; (8008f54 <CDC_Receive_FS+0x24>)
 8008f44:	f7fc f989 	bl	800525a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008f48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20001d30 	.word	0x20001d30

08008f58 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f68:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <CDC_Transmit_FS+0x48>)
 8008f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e00b      	b.n	8008f96 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f7e:	887b      	ldrh	r3, [r7, #2]
 8008f80:	461a      	mov	r2, r3
 8008f82:	6879      	ldr	r1, [r7, #4]
 8008f84:	4806      	ldr	r0, [pc, #24]	; (8008fa0 <CDC_Transmit_FS+0x48>)
 8008f86:	f7fc f90d 	bl	80051a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f8a:	4805      	ldr	r0, [pc, #20]	; (8008fa0 <CDC_Transmit_FS+0x48>)
 8008f8c:	f7fc f936 	bl	80051fc <USBD_CDC_TransmitPacket>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20001d30 	.word	0x20001d30

08008fa4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	6039      	str	r1, [r7, #0]
 8008fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	2212      	movs	r2, #18
 8008fb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008fb6:	4b03      	ldr	r3, [pc, #12]	; (8008fc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bc80      	pop	{r7}
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	2000014c 	.word	0x2000014c

08008fc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	6039      	str	r1, [r7, #0]
 8008fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	2204      	movs	r2, #4
 8008fd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fda:	4b03      	ldr	r3, [pc, #12]	; (8008fe8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bc80      	pop	{r7}
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	20000160 	.word	0x20000160

08008fec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	6039      	str	r1, [r7, #0]
 8008ff6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ff8:	79fb      	ldrb	r3, [r7, #7]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d105      	bne.n	800900a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	4907      	ldr	r1, [pc, #28]	; (8009020 <USBD_FS_ProductStrDescriptor+0x34>)
 8009002:	4808      	ldr	r0, [pc, #32]	; (8009024 <USBD_FS_ProductStrDescriptor+0x38>)
 8009004:	f7fd f903 	bl	800620e <USBD_GetString>
 8009008:	e004      	b.n	8009014 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	4904      	ldr	r1, [pc, #16]	; (8009020 <USBD_FS_ProductStrDescriptor+0x34>)
 800900e:	4805      	ldr	r0, [pc, #20]	; (8009024 <USBD_FS_ProductStrDescriptor+0x38>)
 8009010:	f7fd f8fd 	bl	800620e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009014:	4b02      	ldr	r3, [pc, #8]	; (8009020 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20002074 	.word	0x20002074
 8009024:	08009808 	.word	0x08009808

08009028 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	4603      	mov	r3, r0
 8009030:	6039      	str	r1, [r7, #0]
 8009032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	4904      	ldr	r1, [pc, #16]	; (8009048 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009038:	4804      	ldr	r0, [pc, #16]	; (800904c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800903a:	f7fd f8e8 	bl	800620e <USBD_GetString>
  return USBD_StrDesc;
 800903e:	4b02      	ldr	r3, [pc, #8]	; (8009048 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009040:	4618      	mov	r0, r3
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	20002074 	.word	0x20002074
 800904c:	08009820 	.word	0x08009820

08009050 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	6039      	str	r1, [r7, #0]
 800905a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	221a      	movs	r2, #26
 8009060:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009062:	f000 f843 	bl	80090ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009066:	4b02      	ldr	r3, [pc, #8]	; (8009070 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009068:	4618      	mov	r0, r3
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	20000164 	.word	0x20000164

08009074 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	4603      	mov	r3, r0
 800907c:	6039      	str	r1, [r7, #0]
 800907e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009080:	79fb      	ldrb	r3, [r7, #7]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d105      	bne.n	8009092 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	4907      	ldr	r1, [pc, #28]	; (80090a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800908a:	4808      	ldr	r0, [pc, #32]	; (80090ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800908c:	f7fd f8bf 	bl	800620e <USBD_GetString>
 8009090:	e004      	b.n	800909c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	4904      	ldr	r1, [pc, #16]	; (80090a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009096:	4805      	ldr	r0, [pc, #20]	; (80090ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8009098:	f7fd f8b9 	bl	800620e <USBD_GetString>
  }
  return USBD_StrDesc;
 800909c:	4b02      	ldr	r3, [pc, #8]	; (80090a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20002074 	.word	0x20002074
 80090ac:	08009834 	.word	0x08009834

080090b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	4603      	mov	r3, r0
 80090b8:	6039      	str	r1, [r7, #0]
 80090ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d105      	bne.n	80090ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	4907      	ldr	r1, [pc, #28]	; (80090e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090c6:	4808      	ldr	r0, [pc, #32]	; (80090e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090c8:	f7fd f8a1 	bl	800620e <USBD_GetString>
 80090cc:	e004      	b.n	80090d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	4904      	ldr	r1, [pc, #16]	; (80090e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090d2:	4805      	ldr	r0, [pc, #20]	; (80090e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090d4:	f7fd f89b 	bl	800620e <USBD_GetString>
  }
  return USBD_StrDesc;
 80090d8:	4b02      	ldr	r3, [pc, #8]	; (80090e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20002074 	.word	0x20002074
 80090e8:	08009840 	.word	0x08009840

080090ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090f2:	4b0f      	ldr	r3, [pc, #60]	; (8009130 <Get_SerialNum+0x44>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090f8:	4b0e      	ldr	r3, [pc, #56]	; (8009134 <Get_SerialNum+0x48>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090fe:	4b0e      	ldr	r3, [pc, #56]	; (8009138 <Get_SerialNum+0x4c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4413      	add	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d009      	beq.n	8009126 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009112:	2208      	movs	r2, #8
 8009114:	4909      	ldr	r1, [pc, #36]	; (800913c <Get_SerialNum+0x50>)
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f000 f814 	bl	8009144 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800911c:	2204      	movs	r2, #4
 800911e:	4908      	ldr	r1, [pc, #32]	; (8009140 <Get_SerialNum+0x54>)
 8009120:	68b8      	ldr	r0, [r7, #8]
 8009122:	f000 f80f 	bl	8009144 <IntToUnicode>
  }
}
 8009126:	bf00      	nop
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	1ffff7e8 	.word	0x1ffff7e8
 8009134:	1ffff7ec 	.word	0x1ffff7ec
 8009138:	1ffff7f0 	.word	0x1ffff7f0
 800913c:	20000166 	.word	0x20000166
 8009140:	20000176 	.word	0x20000176

08009144 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	4613      	mov	r3, r2
 8009150:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009156:	2300      	movs	r3, #0
 8009158:	75fb      	strb	r3, [r7, #23]
 800915a:	e027      	b.n	80091ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	0f1b      	lsrs	r3, r3, #28
 8009160:	2b09      	cmp	r3, #9
 8009162:	d80b      	bhi.n	800917c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	0f1b      	lsrs	r3, r3, #28
 8009168:	b2da      	uxtb	r2, r3
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	4619      	mov	r1, r3
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	440b      	add	r3, r1
 8009174:	3230      	adds	r2, #48	; 0x30
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	701a      	strb	r2, [r3, #0]
 800917a:	e00a      	b.n	8009192 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	0f1b      	lsrs	r3, r3, #28
 8009180:	b2da      	uxtb	r2, r3
 8009182:	7dfb      	ldrb	r3, [r7, #23]
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	4619      	mov	r1, r3
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	440b      	add	r3, r1
 800918c:	3237      	adds	r2, #55	; 0x37
 800918e:	b2d2      	uxtb	r2, r2
 8009190:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	011b      	lsls	r3, r3, #4
 8009196:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009198:	7dfb      	ldrb	r3, [r7, #23]
 800919a:	005b      	lsls	r3, r3, #1
 800919c:	3301      	adds	r3, #1
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	4413      	add	r3, r2
 80091a2:	2200      	movs	r2, #0
 80091a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	3301      	adds	r3, #1
 80091aa:	75fb      	strb	r3, [r7, #23]
 80091ac:	7dfa      	ldrb	r2, [r7, #23]
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d3d3      	bcc.n	800915c <IntToUnicode+0x18>
  }
}
 80091b4:	bf00      	nop
 80091b6:	371c      	adds	r7, #28
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bc80      	pop	{r7}
 80091bc:	4770      	bx	lr
	...

080091c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a0d      	ldr	r2, [pc, #52]	; (8009204 <HAL_PCD_MspInit+0x44>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d113      	bne.n	80091fa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80091d2:	4b0d      	ldr	r3, [pc, #52]	; (8009208 <HAL_PCD_MspInit+0x48>)
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	4a0c      	ldr	r2, [pc, #48]	; (8009208 <HAL_PCD_MspInit+0x48>)
 80091d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80091dc:	61d3      	str	r3, [r2, #28]
 80091de:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <HAL_PCD_MspInit+0x48>)
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80091ea:	2200      	movs	r2, #0
 80091ec:	2105      	movs	r1, #5
 80091ee:	2014      	movs	r0, #20
 80091f0:	f7f7 faf3 	bl	80007da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80091f4:	2014      	movs	r0, #20
 80091f6:	f7f7 fb0c 	bl	8000812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80091fa:	bf00      	nop
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	40005c00 	.word	0x40005c00
 8009208:	40021000 	.word	0x40021000

0800920c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f7fc f8cf 	bl	80053c6 <USBD_LL_SetupStage>
}
 8009228:	bf00      	nop
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	6879      	ldr	r1, [r7, #4]
 8009246:	4613      	mov	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	440b      	add	r3, r1
 8009250:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	78fb      	ldrb	r3, [r7, #3]
 8009258:	4619      	mov	r1, r3
 800925a:	f7fc f8ff 	bl	800545c <USBD_LL_DataOutStage>
}
 800925e:	bf00      	nop
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	460b      	mov	r3, r1
 8009270:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	440b      	add	r3, r1
 8009286:	333c      	adds	r3, #60	; 0x3c
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	4619      	mov	r1, r3
 800928e:	f7fc f956 	bl	800553e <USBD_LL_DataInStage>
}
 8009292:	bf00      	nop
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b082      	sub	sp, #8
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fc fa66 	bl	800577a <USBD_LL_SOF>
}
 80092ae:	bf00      	nop
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092be:	2301      	movs	r3, #1
 80092c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d001      	beq.n	80092ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80092ca:	f7f7 f8b9 	bl	8000440 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80092d4:	7bfa      	ldrb	r2, [r7, #15]
 80092d6:	4611      	mov	r1, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fc fa16 	bl	800570a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fc f9cf 	bl	8005688 <USBD_LL_Reset>
}
 80092ea:	bf00      	nop
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
	...

080092f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009302:	4618      	mov	r0, r3
 8009304:	f7fc fa10 	bl	8005728 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d005      	beq.n	800931c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009310:	4b04      	ldr	r3, [pc, #16]	; (8009324 <HAL_PCD_SuspendCallback+0x30>)
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	4a03      	ldr	r2, [pc, #12]	; (8009324 <HAL_PCD_SuspendCallback+0x30>)
 8009316:	f043 0306 	orr.w	r3, r3, #6
 800931a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	e000ed00 	.word	0xe000ed00

08009328 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009336:	4618      	mov	r0, r3
 8009338:	f7fc fa0a 	bl	8005750 <USBD_LL_Resume>
}
 800933c:	bf00      	nop
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800934c:	4a28      	ldr	r2, [pc, #160]	; (80093f0 <USBD_LL_Init+0xac>)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a26      	ldr	r2, [pc, #152]	; (80093f0 <USBD_LL_Init+0xac>)
 8009358:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800935c:	4b24      	ldr	r3, [pc, #144]	; (80093f0 <USBD_LL_Init+0xac>)
 800935e:	4a25      	ldr	r2, [pc, #148]	; (80093f4 <USBD_LL_Init+0xb0>)
 8009360:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009362:	4b23      	ldr	r3, [pc, #140]	; (80093f0 <USBD_LL_Init+0xac>)
 8009364:	2208      	movs	r2, #8
 8009366:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009368:	4b21      	ldr	r3, [pc, #132]	; (80093f0 <USBD_LL_Init+0xac>)
 800936a:	2202      	movs	r2, #2
 800936c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800936e:	4b20      	ldr	r3, [pc, #128]	; (80093f0 <USBD_LL_Init+0xac>)
 8009370:	2200      	movs	r2, #0
 8009372:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009374:	4b1e      	ldr	r3, [pc, #120]	; (80093f0 <USBD_LL_Init+0xac>)
 8009376:	2200      	movs	r2, #0
 8009378:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800937a:	4b1d      	ldr	r3, [pc, #116]	; (80093f0 <USBD_LL_Init+0xac>)
 800937c:	2200      	movs	r2, #0
 800937e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009380:	481b      	ldr	r0, [pc, #108]	; (80093f0 <USBD_LL_Init+0xac>)
 8009382:	f7f7 fbec 	bl	8000b5e <HAL_PCD_Init>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800938c:	f7f7 f858 	bl	8000440 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009396:	2318      	movs	r3, #24
 8009398:	2200      	movs	r2, #0
 800939a:	2100      	movs	r1, #0
 800939c:	f7f8 ff20 	bl	80021e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093a6:	2358      	movs	r3, #88	; 0x58
 80093a8:	2200      	movs	r2, #0
 80093aa:	2180      	movs	r1, #128	; 0x80
 80093ac:	f7f8 ff18 	bl	80021e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093b6:	23c0      	movs	r3, #192	; 0xc0
 80093b8:	2200      	movs	r2, #0
 80093ba:	2181      	movs	r1, #129	; 0x81
 80093bc:	f7f8 ff10 	bl	80021e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80093ca:	2200      	movs	r2, #0
 80093cc:	2101      	movs	r1, #1
 80093ce:	f7f8 ff07 	bl	80021e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093dc:	2200      	movs	r2, #0
 80093de:	2182      	movs	r1, #130	; 0x82
 80093e0:	f7f8 fefe 	bl	80021e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	20002274 	.word	0x20002274
 80093f4:	40005c00 	.word	0x40005c00

080093f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800940e:	4618      	mov	r0, r3
 8009410:	f7f7 fcb0 	bl	8000d74 <HAL_PCD_Start>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	4618      	mov	r0, r3
 800941c:	f000 f94e 	bl	80096bc <USBD_Get_USB_Status>
 8009420:	4603      	mov	r3, r0
 8009422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009424:	7bbb      	ldrb	r3, [r7, #14]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	4608      	mov	r0, r1
 8009438:	4611      	mov	r1, r2
 800943a:	461a      	mov	r2, r3
 800943c:	4603      	mov	r3, r0
 800943e:	70fb      	strb	r3, [r7, #3]
 8009440:	460b      	mov	r3, r1
 8009442:	70bb      	strb	r3, [r7, #2]
 8009444:	4613      	mov	r3, r2
 8009446:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009456:	78bb      	ldrb	r3, [r7, #2]
 8009458:	883a      	ldrh	r2, [r7, #0]
 800945a:	78f9      	ldrb	r1, [r7, #3]
 800945c:	f7f7 fe2a 	bl	80010b4 <HAL_PCD_EP_Open>
 8009460:	4603      	mov	r3, r0
 8009462:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	4618      	mov	r0, r3
 8009468:	f000 f928 	bl	80096bc <USBD_Get_USB_Status>
 800946c:	4603      	mov	r3, r0
 800946e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009470:	7bbb      	ldrb	r3, [r7, #14]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	460b      	mov	r3, r1
 8009484:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009494:	78fa      	ldrb	r2, [r7, #3]
 8009496:	4611      	mov	r1, r2
 8009498:	4618      	mov	r0, r3
 800949a:	f7f7 fe71 	bl	8001180 <HAL_PCD_EP_Close>
 800949e:	4603      	mov	r3, r0
 80094a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 f909 	bl	80096bc <USBD_Get_USB_Status>
 80094aa:	4603      	mov	r3, r0
 80094ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094d2:	78fa      	ldrb	r2, [r7, #3]
 80094d4:	4611      	mov	r1, r2
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7f7 ff31 	bl	800133e <HAL_PCD_EP_SetStall>
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 f8ea 	bl	80096bc <USBD_Get_USB_Status>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	460b      	mov	r3, r1
 8009500:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009510:	78fa      	ldrb	r2, [r7, #3]
 8009512:	4611      	mov	r1, r2
 8009514:	4618      	mov	r0, r3
 8009516:	f7f7 ff72 	bl	80013fe <HAL_PCD_EP_ClrStall>
 800951a:	4603      	mov	r3, r0
 800951c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	4618      	mov	r0, r3
 8009522:	f000 f8cb 	bl	80096bc <USBD_Get_USB_Status>
 8009526:	4603      	mov	r3, r0
 8009528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800952a:	7bbb      	ldrb	r3, [r7, #14]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009546:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800954c:	2b00      	cmp	r3, #0
 800954e:	da0c      	bge.n	800956a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009550:	78fb      	ldrb	r3, [r7, #3]
 8009552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009556:	68f9      	ldr	r1, [r7, #12]
 8009558:	1c5a      	adds	r2, r3, #1
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	440b      	add	r3, r1
 8009564:	3302      	adds	r3, #2
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	e00b      	b.n	8009582 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009570:	68f9      	ldr	r1, [r7, #12]
 8009572:	4613      	mov	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	440b      	add	r3, r1
 800957c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009580:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009582:	4618      	mov	r0, r3
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	bc80      	pop	{r7}
 800958a:	4770      	bx	lr

0800958c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	4611      	mov	r1, r2
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7f7 fd5d 	bl	800106a <HAL_PCD_SetAddress>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 f880 	bl	80096bc <USBD_Get_USB_Status>
 80095bc:	4603      	mov	r3, r0
 80095be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b086      	sub	sp, #24
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	461a      	mov	r2, r3
 80095d6:	460b      	mov	r3, r1
 80095d8:	72fb      	strb	r3, [r7, #11]
 80095da:	4613      	mov	r3, r2
 80095dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095ec:	893b      	ldrh	r3, [r7, #8]
 80095ee:	7af9      	ldrb	r1, [r7, #11]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	f7f7 fe61 	bl	80012b8 <HAL_PCD_EP_Transmit>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f85d 	bl	80096bc <USBD_Get_USB_Status>
 8009602:	4603      	mov	r3, r0
 8009604:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009606:	7dbb      	ldrb	r3, [r7, #22]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	607a      	str	r2, [r7, #4]
 800961a:	461a      	mov	r2, r3
 800961c:	460b      	mov	r3, r1
 800961e:	72fb      	strb	r3, [r7, #11]
 8009620:	4613      	mov	r3, r2
 8009622:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009632:	893b      	ldrh	r3, [r7, #8]
 8009634:	7af9      	ldrb	r1, [r7, #11]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	f7f7 fdea 	bl	8001210 <HAL_PCD_EP_Receive>
 800963c:	4603      	mov	r3, r0
 800963e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	4618      	mov	r0, r3
 8009644:	f000 f83a 	bl	80096bc <USBD_Get_USB_Status>
 8009648:	4603      	mov	r3, r0
 800964a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800964c:	7dbb      	ldrb	r3, [r7, #22]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	460b      	mov	r3, r1
 8009660:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	4611      	mov	r1, r2
 800966c:	4618      	mov	r0, r3
 800966e:	f7f7 fe0c 	bl	800128a <HAL_PCD_EP_GetRxCount>
 8009672:	4603      	mov	r3, r0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009684:	4b02      	ldr	r3, [pc, #8]	; (8009690 <USBD_static_malloc+0x14>)
}
 8009686:	4618      	mov	r0, r3
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	bc80      	pop	{r7}
 800968e:	4770      	bx	lr
 8009690:	20001aa8 	.word	0x20001aa8

08009694 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]

}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bc80      	pop	{r7}
 80096a4:	4770      	bx	lr

080096a6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	460b      	mov	r3, r1
 80096b0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80096b2:	bf00      	nop
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bc80      	pop	{r7}
 80096ba:	4770      	bx	lr

080096bc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096ca:	79fb      	ldrb	r3, [r7, #7]
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	d817      	bhi.n	8009700 <USBD_Get_USB_Status+0x44>
 80096d0:	a201      	add	r2, pc, #4	; (adr r2, 80096d8 <USBD_Get_USB_Status+0x1c>)
 80096d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d6:	bf00      	nop
 80096d8:	080096e9 	.word	0x080096e9
 80096dc:	080096ef 	.word	0x080096ef
 80096e0:	080096f5 	.word	0x080096f5
 80096e4:	080096fb 	.word	0x080096fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]
    break;
 80096ec:	e00b      	b.n	8009706 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096ee:	2302      	movs	r3, #2
 80096f0:	73fb      	strb	r3, [r7, #15]
    break;
 80096f2:	e008      	b.n	8009706 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096f4:	2301      	movs	r3, #1
 80096f6:	73fb      	strb	r3, [r7, #15]
    break;
 80096f8:	e005      	b.n	8009706 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096fa:	2302      	movs	r3, #2
 80096fc:	73fb      	strb	r3, [r7, #15]
    break;
 80096fe:	e002      	b.n	8009706 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009700:	2302      	movs	r3, #2
 8009702:	73fb      	strb	r3, [r7, #15]
    break;
 8009704:	bf00      	nop
  }
  return usb_status;
 8009706:	7bfb      	ldrb	r3, [r7, #15]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	bc80      	pop	{r7}
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop

08009714 <__libc_init_array>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	2500      	movs	r5, #0
 8009718:	4e0c      	ldr	r6, [pc, #48]	; (800974c <__libc_init_array+0x38>)
 800971a:	4c0d      	ldr	r4, [pc, #52]	; (8009750 <__libc_init_array+0x3c>)
 800971c:	1ba4      	subs	r4, r4, r6
 800971e:	10a4      	asrs	r4, r4, #2
 8009720:	42a5      	cmp	r5, r4
 8009722:	d109      	bne.n	8009738 <__libc_init_array+0x24>
 8009724:	f000 f82e 	bl	8009784 <_init>
 8009728:	2500      	movs	r5, #0
 800972a:	4e0a      	ldr	r6, [pc, #40]	; (8009754 <__libc_init_array+0x40>)
 800972c:	4c0a      	ldr	r4, [pc, #40]	; (8009758 <__libc_init_array+0x44>)
 800972e:	1ba4      	subs	r4, r4, r6
 8009730:	10a4      	asrs	r4, r4, #2
 8009732:	42a5      	cmp	r5, r4
 8009734:	d105      	bne.n	8009742 <__libc_init_array+0x2e>
 8009736:	bd70      	pop	{r4, r5, r6, pc}
 8009738:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800973c:	4798      	blx	r3
 800973e:	3501      	adds	r5, #1
 8009740:	e7ee      	b.n	8009720 <__libc_init_array+0xc>
 8009742:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009746:	4798      	blx	r3
 8009748:	3501      	adds	r5, #1
 800974a:	e7f2      	b.n	8009732 <__libc_init_array+0x1e>
 800974c:	08009884 	.word	0x08009884
 8009750:	08009884 	.word	0x08009884
 8009754:	08009884 	.word	0x08009884
 8009758:	08009888 	.word	0x08009888

0800975c <memcpy>:
 800975c:	b510      	push	{r4, lr}
 800975e:	1e43      	subs	r3, r0, #1
 8009760:	440a      	add	r2, r1
 8009762:	4291      	cmp	r1, r2
 8009764:	d100      	bne.n	8009768 <memcpy+0xc>
 8009766:	bd10      	pop	{r4, pc}
 8009768:	f811 4b01 	ldrb.w	r4, [r1], #1
 800976c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009770:	e7f7      	b.n	8009762 <memcpy+0x6>

08009772 <memset>:
 8009772:	4603      	mov	r3, r0
 8009774:	4402      	add	r2, r0
 8009776:	4293      	cmp	r3, r2
 8009778:	d100      	bne.n	800977c <memset+0xa>
 800977a:	4770      	bx	lr
 800977c:	f803 1b01 	strb.w	r1, [r3], #1
 8009780:	e7f9      	b.n	8009776 <memset+0x4>
	...

08009784 <_init>:
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	bf00      	nop
 8009788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978a:	bc08      	pop	{r3}
 800978c:	469e      	mov	lr, r3
 800978e:	4770      	bx	lr

08009790 <_fini>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	bf00      	nop
 8009794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009796:	bc08      	pop	{r3}
 8009798:	469e      	mov	lr, r3
 800979a:	4770      	bx	lr
