
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e08  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08009f18  08009f18  00019f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0a8  0800a0a8  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800a0a8  0800a0a8  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a0a8  0800a0a8  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0a8  0800a0a8  0001a0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a0b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003864  20000180  0800a230  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039e4  0800a230  000239e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f18f  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000041a2  00000000  00000000  0003f338  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  000434e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  00044750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bd85  00000000  00000000  000457d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014237  00000000  00000000  0006155d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e602  00000000  00000000  00075794  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103d96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004900  00000000  00000000  00103e14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08009f00 	.word	0x08009f00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08009f00 	.word	0x08009f00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <PCB_Init>:

#include "usb_device.h"
#include "usbd_cdc_if.h"

void PCB_Init()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016a:	4802      	ldr	r0, [pc, #8]	; (8000174 <PCB_Init+0x14>)
 800016c:	f000 fd42 	bl	8000bf4 <HAL_GPIO_WritePin>
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}
 8000174:	40011000 	.word	0x40011000

08000178 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800017c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000180:	4802      	ldr	r0, [pc, #8]	; (800018c <PCB_LED_Toggle+0x14>)
 8000182:	f000 fd4f 	bl	8000c24 <HAL_GPIO_TogglePin>
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40011000 	.word	0x40011000

08000190 <PCB_OutString_VCP>:

void PCB_OutString_VCP (unsigned char *out_str)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS(out_str, strlen((char*)out_str));
 8000198:	6878      	ldr	r0, [r7, #4]
 800019a:	f7ff ffd9 	bl	8000150 <strlen>
 800019e:	4603      	mov	r3, r0
 80001a0:	b29b      	uxth	r3, r3
 80001a2:	4619      	mov	r1, r3
 80001a4:	6878      	ldr	r0, [r7, #4]
 80001a6:	f009 fa81 	bl	80096ac <CDC_Transmit_FS>
}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}

080001b2 <PCB_OutData_VCP>:

void PCB_OutData_VCP(uint8_t* data, uint16_t len)
{
 80001b2:	b580      	push	{r7, lr}
 80001b4:	b082      	sub	sp, #8
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
 80001ba:	460b      	mov	r3, r1
 80001bc:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS(data, len);
 80001be:	887b      	ldrh	r3, [r7, #2]
 80001c0:	4619      	mov	r1, r3
 80001c2:	6878      	ldr	r0, [r7, #4]
 80001c4:	f009 fa72 	bl	80096ac <CDC_Transmit_FS>
}
 80001c8:	bf00      	nop
 80001ca:	3708      	adds	r7, #8
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <freeRTOS_Tasks_Ini>:
xQueueHandle xQueue1; // Декларирование переменной xQueueHandle т.е. создание ссылки на будущую очередь

// Внимание! QueueHandle_t является более современным аналогом xQueueHandle. Разобраться с этим позже

void freeRTOS_Tasks_Ini (void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af02      	add	r7, sp, #8
	xQueue1 = xQueueCreate(4, sizeof(char)); // Создание очереди из 4 элементов размерностью 8 бит
 80001d6:	2200      	movs	r2, #0
 80001d8:	2101      	movs	r1, #1
 80001da:	2004      	movs	r0, #4
 80001dc:	f006 fc6a 	bl	8006ab4 <xQueueGenericCreate>
 80001e0:	4602      	mov	r2, r0
 80001e2:	4b27      	ldr	r3, [pc, #156]	; (8000280 <freeRTOS_Tasks_Ini+0xb0>)
 80001e4:	601a      	str	r2, [r3, #0]

	vSemaphoreCreateBinary(xSemaphoreBinary1); // Создание двоичного семафора
 80001e6:	2203      	movs	r2, #3
 80001e8:	2100      	movs	r1, #0
 80001ea:	2001      	movs	r0, #1
 80001ec:	f006 fc62 	bl	8006ab4 <xQueueGenericCreate>
 80001f0:	4602      	mov	r2, r0
 80001f2:	4b24      	ldr	r3, [pc, #144]	; (8000284 <freeRTOS_Tasks_Ini+0xb4>)
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	4b23      	ldr	r3, [pc, #140]	; (8000284 <freeRTOS_Tasks_Ini+0xb4>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d006      	beq.n	800020c <freeRTOS_Tasks_Ini+0x3c>
 80001fe:	4b21      	ldr	r3, [pc, #132]	; (8000284 <freeRTOS_Tasks_Ini+0xb4>)
 8000200:	6818      	ldr	r0, [r3, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2200      	movs	r2, #0
 8000206:	2100      	movs	r1, #0
 8000208:	f006 fcb4 	bl	8006b74 <xQueueGenericSend>

	xTaskCreate(vTask_USB_Init, "Task_USB_Init", 100, NULL, 2, NULL); // З-а сброса лнии D+ после каждого запуска МК. Необхадимо для определения устройсва на шине USB.
 800020c:	2300      	movs	r3, #0
 800020e:	9301      	str	r3, [sp, #4]
 8000210:	2302      	movs	r3, #2
 8000212:	9300      	str	r3, [sp, #0]
 8000214:	2300      	movs	r3, #0
 8000216:	2264      	movs	r2, #100	; 0x64
 8000218:	491b      	ldr	r1, [pc, #108]	; (8000288 <freeRTOS_Tasks_Ini+0xb8>)
 800021a:	481c      	ldr	r0, [pc, #112]	; (800028c <freeRTOS_Tasks_Ini+0xbc>)
 800021c:	f007 fa83 	bl	8007726 <xTaskCreate>
	//xTaskCreate(vTask_Transmit_VCP, "Task_Transmit_VCP", 120, NULL, 1, NULL); // З-а переиодческой отправки сообщения в VCP. Задача должна быть запущена после удаления vTask_USB_Init.
	//xTaskCreate(vTask_Transmit_VCP_2, "Task_Transmit_VCP_2", 120, (void*) USB_Tx_Buf_Task2, 1, NULL); // Вывод второго тестового сообщения
	xTaskCreate(vTask_Sync_Recieve_VCP, "Task_Sync_Recieve_VCP", 120, NULL, 2, NULL);
 8000220:	2300      	movs	r3, #0
 8000222:	9301      	str	r3, [sp, #4]
 8000224:	2302      	movs	r3, #2
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2300      	movs	r3, #0
 800022a:	2278      	movs	r2, #120	; 0x78
 800022c:	4918      	ldr	r1, [pc, #96]	; (8000290 <freeRTOS_Tasks_Ini+0xc0>)
 800022e:	4819      	ldr	r0, [pc, #100]	; (8000294 <freeRTOS_Tasks_Ini+0xc4>)
 8000230:	f007 fa79 	bl	8007726 <xTaskCreate>

	Delay_LED = 500;
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <freeRTOS_Tasks_Ini+0xc8>)
 8000236:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800023a:	801a      	strh	r2, [r3, #0]
	pDelay_LED = &Delay_LED;
 800023c:	4b17      	ldr	r3, [pc, #92]	; (800029c <freeRTOS_Tasks_Ini+0xcc>)
 800023e:	4a16      	ldr	r2, [pc, #88]	; (8000298 <freeRTOS_Tasks_Ini+0xc8>)
 8000240:	601a      	str	r2, [r3, #0]


	if(xQueue1 != NULL) // Если очередь создалась успешно (хватило место в куче), то создать задачи отправки получения данных
 8000242:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <freeRTOS_Tasks_Ini+0xb0>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d015      	beq.n	8000276 <freeRTOS_Tasks_Ini+0xa6>
	{
		//xTaskCreate(vTask_Queue_Data_Send, "Task_Queue_Data_Send", 90, NULL, 1, NULL); // З-а отправки данных в очередь
		//xTaskCreate(vTask_Queue_Data_Recieve, "Task_Queue_Data_Recieve", 90, NULL, 1, NULL); // З-а которая получает данные из очереди и отправляет тестовое сообщение.

		if (xTaskCreate(vTask_PCB_LED_Blink, "Task_PCB_LED_Blink", 40, (void*) pDelay_LED, 1, NULL) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY) // З-а мигания LED
 800024a:	4b14      	ldr	r3, [pc, #80]	; (800029c <freeRTOS_Tasks_Ini+0xcc>)
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	2300      	movs	r3, #0
 8000250:	9301      	str	r3, [sp, #4]
 8000252:	2301      	movs	r3, #1
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	4613      	mov	r3, r2
 8000258:	2228      	movs	r2, #40	; 0x28
 800025a:	4911      	ldr	r1, [pc, #68]	; (80002a0 <freeRTOS_Tasks_Ini+0xd0>)
 800025c:	4811      	ldr	r0, [pc, #68]	; (80002a4 <freeRTOS_Tasks_Ini+0xd4>)
 800025e:	f007 fa62 	bl	8007726 <xTaskCreate>
 8000262:	4603      	mov	r3, r0
 8000264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000268:	d105      	bne.n	8000276 <freeRTOS_Tasks_Ini+0xa6>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <freeRTOS_Tasks_Ini+0xd8>)
 8000272:	f000 fcbf 	bl	8000bf4 <HAL_GPIO_WritePin>
	{
		//Если все хорошо то ветка else не исполнится, что означает что очередь создана.

	}

	osKernelStart();
 8000276:	f006 f955 	bl	8006524 <osKernelStart>

}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20003164 	.word	0x20003164
 8000284:	20003160 	.word	0x20003160
 8000288:	08009f28 	.word	0x08009f28
 800028c:	080002fd 	.word	0x080002fd
 8000290:	08009f38 	.word	0x08009f38
 8000294:	080002ad 	.word	0x080002ad
 8000298:	20003168 	.word	0x20003168
 800029c:	2000315c 	.word	0x2000315c
 80002a0:	08009f50 	.word	0x08009f50
 80002a4:	0800035d 	.word	0x0800035d
 80002a8:	40011000 	.word	0x40011000

080002ac <vTask_Sync_Recieve_VCP>:

void vTask_Sync_Recieve_VCP(void *pvParameters)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		//vTaskDelay(1000 / portTICK_RATE_MS );

		xSemaphoreTake( xSemaphoreBinary1, portMAX_DELAY );
 80002b4:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <vTask_Sync_Recieve_VCP+0x40>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f04f 31ff 	mov.w	r1, #4294967295
 80002bc:	4618      	mov	r0, r3
 80002be:	f006 ff4d 	bl	800715c <xQueueSemaphoreTake>

		PCB_OutString_VCP((unsigned char*) "Data received from VCP = ");
 80002c2:	480b      	ldr	r0, [pc, #44]	; (80002f0 <vTask_Sync_Recieve_VCP+0x44>)
 80002c4:	f7ff ff64 	bl	8000190 <PCB_OutString_VCP>

		//(CDC_Transmit_FS((unsigned char*)"Data received from VCP = ", strlen("Data received from VCP = ")));
		vTaskDelay(50 / portTICK_RATE_MS );
 80002c8:	2032      	movs	r0, #50	; 0x32
 80002ca:	f007 fbdf 	bl	8007a8c <vTaskDelay>
		//(CDC_Transmit_FS((unsigned char*) &VCP_Rx_Buf, 10));
		PCB_OutData_VCP((unsigned char*) &VCP_Rx_Buf, 10);
 80002ce:	210a      	movs	r1, #10
 80002d0:	4808      	ldr	r0, [pc, #32]	; (80002f4 <vTask_Sync_Recieve_VCP+0x48>)
 80002d2:	f7ff ff6e 	bl	80001b2 <PCB_OutData_VCP>
		vTaskDelay(50 / portTICK_RATE_MS );
 80002d6:	2032      	movs	r0, #50	; 0x32
 80002d8:	f007 fbd8 	bl	8007a8c <vTaskDelay>

		PCB_OutString_VCP((unsigned char*) "\r\n");
 80002dc:	4806      	ldr	r0, [pc, #24]	; (80002f8 <vTask_Sync_Recieve_VCP+0x4c>)
 80002de:	f7ff ff57 	bl	8000190 <PCB_OutString_VCP>

		//(CDC_Transmit_FS((unsigned char*)"\r\n", strlen("\r\n")));
		vTaskDelay(50 / portTICK_RATE_MS );
 80002e2:	2032      	movs	r0, #50	; 0x32
 80002e4:	f007 fbd2 	bl	8007a8c <vTaskDelay>
		xSemaphoreTake( xSemaphoreBinary1, portMAX_DELAY );
 80002e8:	e7e4      	b.n	80002b4 <vTask_Sync_Recieve_VCP+0x8>
 80002ea:	bf00      	nop
 80002ec:	20003160 	.word	0x20003160
 80002f0:	08009f64 	.word	0x08009f64
 80002f4:	20003104 	.word	0x20003104
 80002f8:	08009f80 	.word	0x08009f80

080002fc <vTask_USB_Init>:
	vTaskDelete(NULL);

}

void vTask_USB_Init(void *pvParameters)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	// НЕ ЗАБЫТЬ ЗАКОММЕНТИТЬ ВЫЗОВ MX_USB_DEVICE_Init(); ИЗ ЗАДАЧИ StartDefaultTask (main.c) ПОСЛЕ КАЖДОЙ ГЕНЕРАЦИИ ПРОЕКТА!!!

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000304:	f107 0308 	add.w	r3, r7, #8
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000316:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000318:	2301      	movs	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031c:	2300      	movs	r3, #0
 800031e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000320:	2302      	movs	r3, #2
 8000322:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000324:	f107 0308 	add.w	r3, r7, #8
 8000328:	4619      	mov	r1, r3
 800032a:	480b      	ldr	r0, [pc, #44]	; (8000358 <vTask_USB_Init+0x5c>)
 800032c:	f000 fb08 	bl	8000940 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 8000330:	2200      	movs	r2, #0
 8000332:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000336:	4808      	ldr	r0, [pc, #32]	; (8000358 <vTask_USB_Init+0x5c>)
 8000338:	f000 fc5c 	bl	8000bf4 <HAL_GPIO_WritePin>

	  vTaskDelay(2000 / portTICK_RATE_MS );
 800033c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000340:	f007 fba4 	bl	8007a8c <vTaskDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 8000344:	f009 f8d2 	bl	80094ec <MX_USB_DEVICE_Init>

	  vTaskDelete(NULL); // Удаленеи задачи самой себя
 8000348:	2000      	movs	r0, #0
 800034a:	f007 fb2d 	bl	80079a8 <vTaskDelete>

	for(;;)
	{
		vTaskDelay(1000 / portTICK_RATE_MS );
 800034e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000352:	f007 fb9b 	bl	8007a8c <vTaskDelay>
 8000356:	e7fa      	b.n	800034e <vTask_USB_Init+0x52>
 8000358:	40010800 	.word	0x40010800

0800035c <vTask_PCB_LED_Blink>:
	}
	vTaskDelete(NULL);
}

void vTask_PCB_LED_Blink(void *pvParameters)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]

	uint16_t *pDelay_LED = (uint16_t*) pvParameters; // Получение параметра с привденем к иходному типу данных - uint16_t
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
	PCB_LED_Toggle();
 8000368:	f7ff ff06 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(*pDelay_LED / portTICK_RATE_MS ); // Разыменование т.е. передача значения задержки
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	4618      	mov	r0, r3
 8000372:	f007 fb8b 	bl	8007a8c <vTaskDelay>
	PCB_LED_Toggle();
 8000376:	f7ff feff 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(*(uint16_t*)pvParameters / portTICK_RATE_MS ); // Можно и без промежуточных переменных, привести pvParameters к указателю uint16_t "(uint16_t*)pvParameters", а затем разименовать
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	881b      	ldrh	r3, [r3, #0]
 800037e:	4618      	mov	r0, r3
 8000380:	f007 fb84 	bl	8007a8c <vTaskDelay>
	PCB_LED_Toggle();
 8000384:	e7f0      	b.n	8000368 <vTask_PCB_LED_Blink+0xc>

08000386 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr

08000392 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
return 0;
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a4:	f000 f95c 	bl	8000660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a8:	f000 f818 	bl	80003dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ac:	f000 f870 	bl	8000490 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003b0:	f006 f886 	bl	80064c0 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003b4:	4a06      	ldr	r2, [pc, #24]	; (80003d0 <main+0x30>)
 80003b6:	2100      	movs	r1, #0
 80003b8:	4806      	ldr	r0, [pc, #24]	; (80003d4 <main+0x34>)
 80003ba:	f006 f8e7 	bl	800658c <osThreadNew>
 80003be:	4602      	mov	r2, r0
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <main+0x38>)
 80003c2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  PCB_Init();
 80003c4:	f7ff fecc 	bl	8000160 <PCB_Init>
  freeRTOS_Tasks_Ini();
 80003c8:	f7ff ff02 	bl	80001d0 <freeRTOS_Tasks_Ini>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <main+0x2c>
 80003ce:	bf00      	nop
 80003d0:	0800a074 	.word	0x0800a074
 80003d4:	08000529 	.word	0x08000529
 80003d8:	2000316c 	.word	0x2000316c

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b094      	sub	sp, #80	; 0x50
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e6:	2228      	movs	r2, #40	; 0x28
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f009 fd6b 	bl	8009ec6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800040c:	2301      	movs	r3, #1
 800040e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000414:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041a:	2301      	movs	r3, #1
 800041c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041e:	2302      	movs	r3, #2
 8000420:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000426:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000428:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800042c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000432:	4618      	mov	r0, r3
 8000434:	f001 ff92 	bl	800235c <HAL_RCC_OscConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800043e:	f000 f87b 	bl	8000538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000442:	230f      	movs	r3, #15
 8000444:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000446:	2302      	movs	r3, #2
 8000448:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000452:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	2102      	movs	r1, #2
 800045e:	4618      	mov	r0, r3
 8000460:	f002 f9fc 	bl	800285c <HAL_RCC_ClockConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800046a:	f000 f865 	bl	8000538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800046e:	2310      	movs	r3, #16
 8000470:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4618      	mov	r0, r3
 800047a:	f002 fb59 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000484:	f000 f858 	bl	8000538 <Error_Handler>
  }
}
 8000488:	bf00      	nop
 800048a:	3750      	adds	r7, #80	; 0x50
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a4:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <MX_GPIO_Init+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a1d      	ldr	r2, [pc, #116]	; (8000520 <MX_GPIO_Init+0x90>)
 80004aa:	f043 0310 	orr.w	r3, r3, #16
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <MX_GPIO_Init+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0310 	and.w	r3, r3, #16
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <MX_GPIO_Init+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a17      	ldr	r2, [pc, #92]	; (8000520 <MX_GPIO_Init+0x90>)
 80004c2:	f043 0320 	orr.w	r3, r3, #32
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <MX_GPIO_Init+0x90>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0320 	and.w	r3, r3, #32
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <MX_GPIO_Init+0x90>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a11      	ldr	r2, [pc, #68]	; (8000520 <MX_GPIO_Init+0x90>)
 80004da:	f043 0304 	orr.w	r3, r3, #4
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_GPIO_Init+0x90>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0304 	and.w	r3, r3, #4
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f2:	480c      	ldr	r0, [pc, #48]	; (8000524 <MX_GPIO_Init+0x94>)
 80004f4:	f000 fb7e 	bl	8000bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2302      	movs	r3, #2
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	4804      	ldr	r0, [pc, #16]	; (8000524 <MX_GPIO_Init+0x94>)
 8000512:	f000 fa15 	bl	8000940 <HAL_GPIO_Init>

}
 8000516:	bf00      	nop
 8000518:	3720      	adds	r7, #32
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	40011000 	.word	0x40011000

08000528 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
osDelay(1);
 8000530:	2001      	movs	r0, #1
 8000532:	f006 f8d5 	bl	80066e0 <osDelay>
 8000536:	e7fb      	b.n	8000530 <StartDefaultTask+0x8>

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800053e:	e7fe      	b.n	800053e <Error_Handler+0x6>

08000540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <HAL_MspInit+0x68>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <HAL_MspInit+0x68>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <HAL_MspInit+0x68>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_MspInit+0x68>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4a11      	ldr	r2, [pc, #68]	; (80005a8 <HAL_MspInit+0x68>)
 8000564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000568:	61d3      	str	r3, [r2, #28]
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <HAL_MspInit+0x68>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	210f      	movs	r1, #15
 800057a:	f06f 0001 	mvn.w	r0, #1
 800057e:	f000 f9a8 	bl	80008d2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <HAL_MspInit+0x6c>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_MspInit+0x6c>)
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010000 	.word	0x40010000

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <NMI_Handler+0x4>

080005b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <MemManage_Handler+0x4>

080005c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler+0x4>

080005ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr

080005da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005de:	f000 f885 	bl	80006ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80005e2:	f007 fee3 	bl	80083ac <xTaskGetSchedulerState>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d001      	beq.n	80005f0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80005ec:	f008 fd2c 	bl	8009048 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005fa:	f000 fc5d 	bl	8000eb8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200036f8 	.word	0x200036f8

08000608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000614:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000616:	e003      	b.n	8000620 <LoopCopyDataInit>

08000618 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800061a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800061c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800061e:	3104      	adds	r1, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000624:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000626:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000628:	d3f6      	bcc.n	8000618 <CopyDataInit>
  ldr r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800062c:	e002      	b.n	8000634 <LoopFillZerobss>

0800062e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000630:	f842 3b04 	str.w	r3, [r2], #4

08000634 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000636:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000638:	d3f9      	bcc.n	800062e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800063a:	f7ff ffe5 	bl	8000608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800063e:	f009 fc13 	bl	8009e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000642:	f7ff fead 	bl	80003a0 <main>
  bx lr
 8000646:	4770      	bx	lr
  ldr r3, =_sidata
 8000648:	0800a0b0 	.word	0x0800a0b0
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000650:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000654:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8000658:	200039e4 	.word	0x200039e4

0800065c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_2_IRQHandler>
	...

08000660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <HAL_Init+0x28>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_Init+0x28>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000670:	2003      	movs	r0, #3
 8000672:	f000 f923 	bl	80008bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000676:	200f      	movs	r0, #15
 8000678:	f000 f808 	bl	800068c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800067c:	f7ff ff60 	bl	8000540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40022000 	.word	0x40022000

0800068c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_InitTick+0x54>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x58>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f93b 	bl	8000926 <HAL_SYSTICK_Config>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e00e      	b.n	80006d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d80a      	bhi.n	80006d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c0:	2200      	movs	r2, #0
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295
 80006c8:	f000 f903 	bl	80008d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <HAL_InitTick+0x5c>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e000      	b.n	80006d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <HAL_IncTick+0x1c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x20>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <HAL_IncTick+0x20>)
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	20000008 	.word	0x20000008
 800070c:	20003170 	.word	0x20003170

08000710 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return uwTick;
 8000714:	4b02      	ldr	r3, [pc, #8]	; (8000720 <HAL_GetTick+0x10>)
 8000716:	681b      	ldr	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	20003170 	.word	0x20003170

08000724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <__NVIC_SetPriorityGrouping+0x44>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000740:	4013      	ands	r3, r2
 8000742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800074c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000756:	4a04      	ldr	r2, [pc, #16]	; (8000768 <__NVIC_SetPriorityGrouping+0x44>)
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	60d3      	str	r3, [r2, #12]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <__NVIC_GetPriorityGrouping+0x18>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	0a1b      	lsrs	r3, r3, #8
 8000776:	f003 0307 	and.w	r3, r3, #7
}
 800077a:	4618      	mov	r0, r3
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	2b00      	cmp	r3, #0
 8000798:	db0b      	blt.n	80007b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	f003 021f 	and.w	r2, r3, #31
 80007a0:	4906      	ldr	r1, [pc, #24]	; (80007bc <__NVIC_EnableIRQ+0x34>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	095b      	lsrs	r3, r3, #5
 80007a8:	2001      	movs	r0, #1
 80007aa:	fa00 f202 	lsl.w	r2, r0, r2
 80007ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	e000e100 	.word	0xe000e100

080007c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	db0a      	blt.n	80007ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	490c      	ldr	r1, [pc, #48]	; (800080c <__NVIC_SetPriority+0x4c>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	0112      	lsls	r2, r2, #4
 80007e0:	b2d2      	uxtb	r2, r2
 80007e2:	440b      	add	r3, r1
 80007e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e8:	e00a      	b.n	8000800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4908      	ldr	r1, [pc, #32]	; (8000810 <__NVIC_SetPriority+0x50>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 030f 	and.w	r3, r3, #15
 80007f6:	3b04      	subs	r3, #4
 80007f8:	0112      	lsls	r2, r2, #4
 80007fa:	b2d2      	uxtb	r2, r2
 80007fc:	440b      	add	r3, r1
 80007fe:	761a      	strb	r2, [r3, #24]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	f1c3 0307 	rsb	r3, r3, #7
 800082e:	2b04      	cmp	r3, #4
 8000830:	bf28      	it	cs
 8000832:	2304      	movcs	r3, #4
 8000834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3304      	adds	r3, #4
 800083a:	2b06      	cmp	r3, #6
 800083c:	d902      	bls.n	8000844 <NVIC_EncodePriority+0x30>
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3b03      	subs	r3, #3
 8000842:	e000      	b.n	8000846 <NVIC_EncodePriority+0x32>
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	f04f 32ff 	mov.w	r2, #4294967295
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43da      	mvns	r2, r3
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	401a      	ands	r2, r3
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800085c:	f04f 31ff 	mov.w	r1, #4294967295
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	43d9      	mvns	r1, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	4313      	orrs	r3, r2
         );
}
 800086e:	4618      	mov	r0, r3
 8000870:	3724      	adds	r7, #36	; 0x24
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000888:	d301      	bcc.n	800088e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088a:	2301      	movs	r3, #1
 800088c:	e00f      	b.n	80008ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <SysTick_Config+0x40>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000896:	210f      	movs	r1, #15
 8000898:	f04f 30ff 	mov.w	r0, #4294967295
 800089c:	f7ff ff90 	bl	80007c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <SysTick_Config+0x40>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <SysTick_Config+0x40>)
 80008a8:	2207      	movs	r2, #7
 80008aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	e000e010 	.word	0xe000e010

080008bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ff2d 	bl	8000724 <__NVIC_SetPriorityGrouping>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
 80008de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e4:	f7ff ff42 	bl	800076c <__NVIC_GetPriorityGrouping>
 80008e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	68b9      	ldr	r1, [r7, #8]
 80008ee:	6978      	ldr	r0, [r7, #20]
 80008f0:	f7ff ff90 	bl	8000814 <NVIC_EncodePriority>
 80008f4:	4602      	mov	r2, r0
 80008f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff5f 	bl	80007c0 <__NVIC_SetPriority>
}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff35 	bl	8000788 <__NVIC_EnableIRQ>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ffa2 	bl	8000878 <SysTick_Config>
 8000934:	4603      	mov	r3, r0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000940:	b480      	push	{r7}
 8000942:	b08b      	sub	sp, #44	; 0x2c
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000952:	e127      	b.n	8000ba4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000954:	2201      	movs	r2, #1
 8000956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	429a      	cmp	r2, r3
 800096e:	f040 8116 	bne.w	8000b9e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2b12      	cmp	r3, #18
 8000978:	d034      	beq.n	80009e4 <HAL_GPIO_Init+0xa4>
 800097a:	2b12      	cmp	r3, #18
 800097c:	d80d      	bhi.n	800099a <HAL_GPIO_Init+0x5a>
 800097e:	2b02      	cmp	r3, #2
 8000980:	d02b      	beq.n	80009da <HAL_GPIO_Init+0x9a>
 8000982:	2b02      	cmp	r3, #2
 8000984:	d804      	bhi.n	8000990 <HAL_GPIO_Init+0x50>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d031      	beq.n	80009ee <HAL_GPIO_Init+0xae>
 800098a:	2b01      	cmp	r3, #1
 800098c:	d01c      	beq.n	80009c8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800098e:	e048      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000990:	2b03      	cmp	r3, #3
 8000992:	d043      	beq.n	8000a1c <HAL_GPIO_Init+0xdc>
 8000994:	2b11      	cmp	r3, #17
 8000996:	d01b      	beq.n	80009d0 <HAL_GPIO_Init+0x90>
          break;
 8000998:	e043      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800099a:	4a89      	ldr	r2, [pc, #548]	; (8000bc0 <HAL_GPIO_Init+0x280>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d026      	beq.n	80009ee <HAL_GPIO_Init+0xae>
 80009a0:	4a87      	ldr	r2, [pc, #540]	; (8000bc0 <HAL_GPIO_Init+0x280>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d806      	bhi.n	80009b4 <HAL_GPIO_Init+0x74>
 80009a6:	4a87      	ldr	r2, [pc, #540]	; (8000bc4 <HAL_GPIO_Init+0x284>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d020      	beq.n	80009ee <HAL_GPIO_Init+0xae>
 80009ac:	4a86      	ldr	r2, [pc, #536]	; (8000bc8 <HAL_GPIO_Init+0x288>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d01d      	beq.n	80009ee <HAL_GPIO_Init+0xae>
          break;
 80009b2:	e036      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009b4:	4a85      	ldr	r2, [pc, #532]	; (8000bcc <HAL_GPIO_Init+0x28c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d019      	beq.n	80009ee <HAL_GPIO_Init+0xae>
 80009ba:	4a85      	ldr	r2, [pc, #532]	; (8000bd0 <HAL_GPIO_Init+0x290>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d016      	beq.n	80009ee <HAL_GPIO_Init+0xae>
 80009c0:	4a84      	ldr	r2, [pc, #528]	; (8000bd4 <HAL_GPIO_Init+0x294>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d013      	beq.n	80009ee <HAL_GPIO_Init+0xae>
          break;
 80009c6:	e02c      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	623b      	str	r3, [r7, #32]
          break;
 80009ce:	e028      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	3304      	adds	r3, #4
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	e023      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	3308      	adds	r3, #8
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e01e      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	330c      	adds	r3, #12
 80009ea:	623b      	str	r3, [r7, #32]
          break;
 80009ec:	e019      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009f6:	2304      	movs	r3, #4
 80009f8:	623b      	str	r3, [r7, #32]
          break;
 80009fa:	e012      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d105      	bne.n	8000a10 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a04:	2308      	movs	r3, #8
 8000a06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	611a      	str	r2, [r3, #16]
          break;
 8000a0e:	e008      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a10:	2308      	movs	r3, #8
 8000a12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	69fa      	ldr	r2, [r7, #28]
 8000a18:	615a      	str	r2, [r3, #20]
          break;
 8000a1a:	e002      	b.n	8000a22 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
          break;
 8000a20:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	2bff      	cmp	r3, #255	; 0xff
 8000a26:	d801      	bhi.n	8000a2c <HAL_GPIO_Init+0xec>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	e001      	b.n	8000a30 <HAL_GPIO_Init+0xf0>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3304      	adds	r3, #4
 8000a30:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	2bff      	cmp	r3, #255	; 0xff
 8000a36:	d802      	bhi.n	8000a3e <HAL_GPIO_Init+0xfe>
 8000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	e002      	b.n	8000a44 <HAL_GPIO_Init+0x104>
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	3b08      	subs	r3, #8
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	401a      	ands	r2, r3
 8000a56:	6a39      	ldr	r1, [r7, #32]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f000 8096 	beq.w	8000b9e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a72:	4b59      	ldr	r3, [pc, #356]	; (8000bd8 <HAL_GPIO_Init+0x298>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a58      	ldr	r2, [pc, #352]	; (8000bd8 <HAL_GPIO_Init+0x298>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b56      	ldr	r3, [pc, #344]	; (8000bd8 <HAL_GPIO_Init+0x298>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a8a:	4a54      	ldr	r2, [pc, #336]	; (8000bdc <HAL_GPIO_Init+0x29c>)
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a4b      	ldr	r2, [pc, #300]	; (8000be0 <HAL_GPIO_Init+0x2a0>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d013      	beq.n	8000ade <HAL_GPIO_Init+0x19e>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a4a      	ldr	r2, [pc, #296]	; (8000be4 <HAL_GPIO_Init+0x2a4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d00d      	beq.n	8000ada <HAL_GPIO_Init+0x19a>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a49      	ldr	r2, [pc, #292]	; (8000be8 <HAL_GPIO_Init+0x2a8>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d007      	beq.n	8000ad6 <HAL_GPIO_Init+0x196>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a48      	ldr	r2, [pc, #288]	; (8000bec <HAL_GPIO_Init+0x2ac>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_GPIO_Init+0x192>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e006      	b.n	8000ae0 <HAL_GPIO_Init+0x1a0>
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	e004      	b.n	8000ae0 <HAL_GPIO_Init+0x1a0>
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	e002      	b.n	8000ae0 <HAL_GPIO_Init+0x1a0>
 8000ada:	2301      	movs	r3, #1
 8000adc:	e000      	b.n	8000ae0 <HAL_GPIO_Init+0x1a0>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ae2:	f002 0203 	and.w	r2, r2, #3
 8000ae6:	0092      	lsls	r2, r2, #2
 8000ae8:	4093      	lsls	r3, r2
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000af0:	493a      	ldr	r1, [pc, #232]	; (8000bdc <HAL_GPIO_Init+0x29c>)
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b0a:	4b39      	ldr	r3, [pc, #228]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4938      	ldr	r1, [pc, #224]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	600b      	str	r3, [r1, #0]
 8000b16:	e006      	b.n	8000b26 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b18:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	4933      	ldr	r1, [pc, #204]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d006      	beq.n	8000b40 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b32:	4b2f      	ldr	r3, [pc, #188]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	492e      	ldr	r1, [pc, #184]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	604b      	str	r3, [r1, #4]
 8000b3e:	e006      	b.n	8000b4e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	4929      	ldr	r1, [pc, #164]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b5a:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	4924      	ldr	r1, [pc, #144]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	608b      	str	r3, [r1, #8]
 8000b66:	e006      	b.n	8000b76 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	491f      	ldr	r1, [pc, #124]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b72:	4013      	ands	r3, r2
 8000b74:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d006      	beq.n	8000b90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	491a      	ldr	r1, [pc, #104]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	60cb      	str	r3, [r1, #12]
 8000b8e:	e006      	b.n	8000b9e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	4915      	ldr	r1, [pc, #84]	; (8000bf0 <HAL_GPIO_Init+0x2b0>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	fa22 f303 	lsr.w	r3, r2, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f47f aed0 	bne.w	8000954 <HAL_GPIO_Init+0x14>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	372c      	adds	r7, #44	; 0x2c
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	10210000 	.word	0x10210000
 8000bc4:	10110000 	.word	0x10110000
 8000bc8:	10120000 	.word	0x10120000
 8000bcc:	10310000 	.word	0x10310000
 8000bd0:	10320000 	.word	0x10320000
 8000bd4:	10220000 	.word	0x10220000
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	40010800 	.word	0x40010800
 8000be4:	40010c00 	.word	0x40010c00
 8000be8:	40011000 	.word	0x40011000
 8000bec:	40011400 	.word	0x40011400
 8000bf0:	40010400 	.word	0x40010400

08000bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]
 8000c00:	4613      	mov	r3, r2
 8000c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c04:	787b      	ldrb	r3, [r7, #1]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c0a:	887a      	ldrh	r2, [r7, #2]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c10:	e003      	b.n	8000c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c12:	887b      	ldrh	r3, [r7, #2]
 8000c14:	041a      	lsls	r2, r3, #16
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	611a      	str	r2, [r3, #16]
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	041a      	lsls	r2, r3, #16
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	43d9      	mvns	r1, r3
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	400b      	ands	r3, r1
 8000c46:	431a      	orrs	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	611a      	str	r2, [r3, #16]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c58:	b08b      	sub	sp, #44	; 0x2c
 8000c5a:	af06      	add	r7, sp, #24
 8000c5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e0fd      	b.n	8000e64 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d106      	bne.n	8000c82 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f008 fe49 	bl	8009914 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2203      	movs	r2, #3
 8000c86:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f002 f82a 	bl	8002ce8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	687e      	ldr	r6, [r7, #4]
 8000c9c:	466d      	mov	r5, sp
 8000c9e:	f106 0410 	add.w	r4, r6, #16
 8000ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	602b      	str	r3, [r5, #0]
 8000caa:	1d33      	adds	r3, r6, #4
 8000cac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cae:	6838      	ldr	r0, [r7, #0]
 8000cb0:	f001 fff4 	bl	8002c9c <USB_CoreInit>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d005      	beq.n	8000cc6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e0ce      	b.n	8000e64 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f002 f825 	bl	8002d1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e04c      	b.n	8000d72 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	1c5a      	adds	r2, r3, #1
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3301      	adds	r3, #1
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	440b      	add	r3, r1
 8000cfe:	7bfa      	ldrb	r2, [r7, #15]
 8000d00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d02:	7bfa      	ldrb	r2, [r7, #15]
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	b298      	uxth	r0, r3
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	440b      	add	r3, r1
 8000d14:	3336      	adds	r3, #54	; 0x36
 8000d16:	4602      	mov	r2, r0
 8000d18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	440b      	add	r3, r1
 8000d2a:	3303      	adds	r3, #3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	440b      	add	r3, r1
 8000d3e:	3338      	adds	r3, #56	; 0x38
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	440b      	add	r3, r1
 8000d52:	333c      	adds	r3, #60	; 0x3c
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d58:	7bfa      	ldrb	r2, [r7, #15]
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	440b      	add	r3, r1
 8000d66:	3340      	adds	r3, #64	; 0x40
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	73fb      	strb	r3, [r7, #15]
 8000d72:	7bfa      	ldrb	r2, [r7, #15]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d3ad      	bcc.n	8000cd8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e044      	b.n	8000e0c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d82:	7bfa      	ldrb	r2, [r7, #15]
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	440b      	add	r3, r1
 8000d90:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d98:	7bfa      	ldrb	r2, [r7, #15]
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	440b      	add	r3, r1
 8000da6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000daa:	7bfa      	ldrb	r2, [r7, #15]
 8000dac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	440b      	add	r3, r1
 8000dbc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000dc4:	7bfa      	ldrb	r2, [r7, #15]
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	440b      	add	r3, r1
 8000dd2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dda:	7bfa      	ldrb	r2, [r7, #15]
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	440b      	add	r3, r1
 8000de8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000df0:	7bfa      	ldrb	r2, [r7, #15]
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	440b      	add	r3, r1
 8000dfe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d3b5      	bcc.n	8000d82 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	687e      	ldr	r6, [r7, #4]
 8000e1e:	466d      	mov	r5, sp
 8000e20:	f106 0410 	add.w	r4, r6, #16
 8000e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	602b      	str	r3, [r5, #0]
 8000e2c:	1d33      	adds	r3, r6, #4
 8000e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e30:	6838      	ldr	r0, [r7, #0]
 8000e32:	f001 ff7f 	bl	8002d34 <USB_DevInit>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d005      	beq.n	8000e48 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e00d      	b.n	8000e64 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f003 ff19 	bl	8004c94 <USB_DevDisconnect>

  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d101      	bne.n	8000e82 <HAL_PCD_Start+0x16>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	e016      	b.n	8000eb0 <HAL_PCD_Start+0x44>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 ff14 	bl	8002cbc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e94:	2101      	movs	r1, #1
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f008 ffaf 	bl	8009dfa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 feed 	bl	8004c80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 feef 	bl	8004ca8 <USB_ReadInterrupts>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ed4:	d102      	bne.n	8000edc <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 fb61 	bl	800159e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 fee1 	bl	8004ca8 <USB_ReadInterrupts>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef0:	d112      	bne.n	8000f18 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f04:	b292      	uxth	r2, r2
 8000f06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f008 fd7d 	bl	8009a0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f10:	2100      	movs	r1, #0
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f925 	bl	8001162 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f003 fec3 	bl	8004ca8 <USB_ReadInterrupts>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f2c:	d10b      	bne.n	8000f46 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f40:	b292      	uxth	r2, r2
 8000f42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f003 feac 	bl	8004ca8 <USB_ReadInterrupts>
 8000f50:	4603      	mov	r3, r0
 8000f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f5a:	d10b      	bne.n	8000f74 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 fe95 	bl	8004ca8 <USB_ReadInterrupts>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f88:	d126      	bne.n	8000fd8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0204 	bic.w	r2, r2, #4
 8000f9c:	b292      	uxth	r2, r2
 8000f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0208 	bic.w	r2, r2, #8
 8000fb4:	b292      	uxth	r2, r2
 8000fb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f008 fd5e 	bl	8009a7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 fe63 	bl	8004ca8 <USB_ReadInterrupts>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fec:	f040 8084 	bne.w	80010f8 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	77fb      	strb	r3, [r7, #31]
 8000ff4:	e011      	b.n	800101a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	7ffb      	ldrb	r3, [r7, #31]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	441a      	add	r2, r3
 8001002:	7ffb      	ldrb	r3, [r7, #31]
 8001004:	8812      	ldrh	r2, [r2, #0]
 8001006:	b292      	uxth	r2, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	f107 0120 	add.w	r1, r7, #32
 800100e:	440b      	add	r3, r1
 8001010:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001014:	7ffb      	ldrb	r3, [r7, #31]
 8001016:	3301      	adds	r3, #1
 8001018:	77fb      	strb	r3, [r7, #31]
 800101a:	7ffb      	ldrb	r3, [r7, #31]
 800101c:	2b07      	cmp	r3, #7
 800101e:	d9ea      	bls.n	8000ff6 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001028:	b29a      	uxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0201 	orr.w	r2, r2, #1
 8001032:	b292      	uxth	r2, r2
 8001034:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001040:	b29a      	uxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	b292      	uxth	r2, r2
 800104c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001050:	bf00      	nop
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800105a:	b29b      	uxth	r3, r3
 800105c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f6      	beq.n	8001052 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800106c:	b29a      	uxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001076:	b292      	uxth	r2, r2
 8001078:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	77fb      	strb	r3, [r7, #31]
 8001080:	e010      	b.n	80010a4 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001082:	7ffb      	ldrb	r3, [r7, #31]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	4611      	mov	r1, r2
 800108a:	7ffa      	ldrb	r2, [r7, #31]
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	440a      	add	r2, r1
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	f107 0120 	add.w	r1, r7, #32
 8001096:	440b      	add	r3, r1
 8001098:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800109c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800109e:	7ffb      	ldrb	r3, [r7, #31]
 80010a0:	3301      	adds	r3, #1
 80010a2:	77fb      	strb	r3, [r7, #31]
 80010a4:	7ffb      	ldrb	r3, [r7, #31]
 80010a6:	2b07      	cmp	r3, #7
 80010a8:	d9eb      	bls.n	8001082 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 0208 	orr.w	r2, r2, #8
 80010bc:	b292      	uxth	r2, r2
 80010be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010d4:	b292      	uxth	r2, r2
 80010d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f042 0204 	orr.w	r2, r2, #4
 80010ec:	b292      	uxth	r2, r2
 80010ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f008 fca8 	bl	8009a48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fdd3 	bl	8004ca8 <USB_ReadInterrupts>
 8001102:	4603      	mov	r3, r0
 8001104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800110c:	d10e      	bne.n	800112c <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001116:	b29a      	uxth	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001120:	b292      	uxth	r2, r2
 8001122:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f008 fc61 	bl	80099ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f003 fdb9 	bl	8004ca8 <USB_ReadInterrupts>
 8001136:	4603      	mov	r3, r0
 8001138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001140:	d10b      	bne.n	800115a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800114a:	b29a      	uxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001154:	b292      	uxth	r2, r2
 8001156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800115a:	bf00      	nop
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <HAL_PCD_SetAddress+0x1a>
 8001178:	2302      	movs	r3, #2
 800117a:	e013      	b.n	80011a4 <HAL_PCD_SetAddress+0x42>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	78fa      	ldrb	r2, [r7, #3]
 8001188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	78fa      	ldrb	r2, [r7, #3]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f003 fd60 	bl	8004c5a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4608      	mov	r0, r1
 80011b6:	4611      	mov	r1, r2
 80011b8:	461a      	mov	r2, r3
 80011ba:	4603      	mov	r3, r0
 80011bc:	70fb      	strb	r3, [r7, #3]
 80011be:	460b      	mov	r3, r1
 80011c0:	803b      	strh	r3, [r7, #0]
 80011c2:	4613      	mov	r3, r2
 80011c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da0e      	bge.n	80011f0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2201      	movs	r2, #1
 80011ec:	705a      	strb	r2, [r3, #1]
 80011ee:	e00e      	b.n	800120e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	f003 0207 	and.w	r2, r3, #7
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2200      	movs	r2, #0
 800120c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	b2da      	uxtb	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800121a:	883a      	ldrh	r2, [r7, #0]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	78ba      	ldrb	r2, [r7, #2]
 8001224:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	785b      	ldrb	r3, [r3, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d004      	beq.n	8001238 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b29a      	uxth	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001238:	78bb      	ldrb	r3, [r7, #2]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d102      	bne.n	8001244 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2200      	movs	r2, #0
 8001242:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800124a:	2b01      	cmp	r3, #1
 800124c:	d101      	bne.n	8001252 <HAL_PCD_EP_Open+0xa6>
 800124e:	2302      	movs	r3, #2
 8001250:	e00e      	b.n	8001270 <HAL_PCD_EP_Open+0xc4>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68f9      	ldr	r1, [r7, #12]
 8001260:	4618      	mov	r0, r3
 8001262:	f001 fd87 	bl	8002d74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800126e:	7afb      	ldrb	r3, [r7, #11]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001288:	2b00      	cmp	r3, #0
 800128a:	da0e      	bge.n	80012aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2201      	movs	r2, #1
 80012a6:	705a      	strb	r2, [r3, #1]
 80012a8:	e00e      	b.n	80012c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	f003 0207 	and.w	r2, r3, #7
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2200      	movs	r2, #0
 80012c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_PCD_EP_Close+0x6a>
 80012de:	2302      	movs	r3, #2
 80012e0:	e00e      	b.n	8001300 <HAL_PCD_EP_Close+0x88>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68f9      	ldr	r1, [r7, #12]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 f8a9 	bl	8003448 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	460b      	mov	r3, r1
 8001316:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001318:	7afb      	ldrb	r3, [r7, #11]
 800131a:	f003 0207 	and.w	r2, r3, #7
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4413      	add	r3, r2
 800132e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2200      	movs	r2, #0
 8001346:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001348:	7afb      	ldrb	r3, [r7, #11]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	b2da      	uxtb	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	2b00      	cmp	r3, #0
 800135c:	d106      	bne.n	800136c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6979      	ldr	r1, [r7, #20]
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fa5b 	bl	8003820 <USB_EPStartXfer>
 800136a:	e005      	b.n	8001378 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6979      	ldr	r1, [r7, #20]
 8001372:	4618      	mov	r0, r3
 8001374:	f002 fa54 	bl	8003820 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	f003 0207 	and.w	r2, r3, #7
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80013a4:	681b      	ldr	r3, [r3, #0]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	460b      	mov	r3, r1
 80013be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013c0:	7afb      	ldrb	r3, [r7, #11]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2201      	movs	r2, #1
 80013fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013fc:	7afb      	ldrb	r3, [r7, #11]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	b2da      	uxtb	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001408:	7afb      	ldrb	r3, [r7, #11]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6979      	ldr	r1, [r7, #20]
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fa01 	bl	8003820 <USB_EPStartXfer>
 800141e:	e005      	b.n	800142c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6979      	ldr	r1, [r7, #20]
 8001426:	4618      	mov	r0, r3
 8001428:	f002 f9fa 	bl	8003820 <USB_EPStartXfer>
  }

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	f003 0207 	and.w	r2, r3, #7
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	d901      	bls.n	8001454 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e04c      	b.n	80014ee <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001458:	2b00      	cmp	r3, #0
 800145a:	da0e      	bge.n	800147a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2201      	movs	r2, #1
 8001476:	705a      	strb	r2, [r3, #1]
 8001478:	e00c      	b.n	8001494 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800147a:	78fa      	ldrb	r2, [r7, #3]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2201      	movs	r2, #1
 8001498:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d101      	bne.n	80014b4 <HAL_PCD_EP_SetStall+0x7e>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e01c      	b.n	80014ee <HAL_PCD_EP_SetStall+0xb8>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68f9      	ldr	r1, [r7, #12]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 facc 	bl	8004a60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d108      	bne.n	80014e4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80014dc:	4619      	mov	r1, r3
 80014de:	4610      	mov	r0, r2
 80014e0:	f003 fbf1 	bl	8004cc6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	f003 020f 	and.w	r2, r3, #15
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	d901      	bls.n	8001514 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e040      	b.n	8001596 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001518:	2b00      	cmp	r3, #0
 800151a:	da0e      	bge.n	800153a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2201      	movs	r2, #1
 8001536:	705a      	strb	r2, [r3, #1]
 8001538:	e00e      	b.n	8001558 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	f003 0207 	and.w	r2, r3, #7
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	b2da      	uxtb	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_PCD_EP_ClrStall+0x82>
 8001574:	2302      	movs	r3, #2
 8001576:	e00e      	b.n	8001596 <HAL_PCD_EP_ClrStall+0xa0>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68f9      	ldr	r1, [r7, #12]
 8001586:	4618      	mov	r0, r3
 8001588:	f003 faba 	bl	8004b00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b08e      	sub	sp, #56	; 0x38
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015a6:	e2df      	b.n	8001b68 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80015b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80015be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 8158 	bne.w	8001878 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80015c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d152      	bne.n	8001678 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80015de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015e2:	81fb      	strh	r3, [r7, #14]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	89fb      	ldrh	r3, [r7, #14]
 80015ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3328      	adds	r3, #40	; 0x28
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001604:	b29b      	uxth	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	3302      	adds	r3, #2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	4413      	add	r3, r2
 800161a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	441a      	add	r2, r3
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001636:	2100      	movs	r1, #0
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f008 f9be 	bl	80099ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 828e 	beq.w	8001b68 <PCD_EP_ISR_Handler+0x5ca>
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	f040 8289 	bne.w	8001b68 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001662:	b2da      	uxtb	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b292      	uxth	r2, r2
 800166a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001676:	e277      	b.n	8001b68 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001688:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800168a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800168e:	2b00      	cmp	r3, #0
 8001690:	d034      	beq.n	80016fc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800169a:	b29b      	uxth	r3, r3
 800169c:	461a      	mov	r2, r3
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4413      	add	r3, r2
 80016a6:	3306      	adds	r3, #6
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	f003 fb47 	bl	8004d64 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016e2:	4013      	ands	r3, r2
 80016e4:	823b      	strh	r3, [r7, #16]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	8a3a      	ldrh	r2, [r7, #16]
 80016ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016f0:	b292      	uxth	r2, r2
 80016f2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f008 f933 	bl	8009960 <HAL_PCD_SetupStageCallback>
 80016fa:	e235      	b.n	8001b68 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001700:	2b00      	cmp	r3, #0
 8001702:	f280 8231 	bge.w	8001b68 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	b29a      	uxth	r2, r3
 800170e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001712:	4013      	ands	r3, r2
 8001714:	83bb      	strh	r3, [r7, #28]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	8bba      	ldrh	r2, [r7, #28]
 800171c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001720:	b292      	uxth	r2, r2
 8001722:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800172c:	b29b      	uxth	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	3306      	adds	r3, #6
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	4413      	add	r3, r2
 8001742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d019      	beq.n	800178c <PCD_EP_ISR_Handler+0x1ee>
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d015      	beq.n	800178c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	6959      	ldr	r1, [r3, #20]
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001770:	b29b      	uxth	r3, r3
 8001772:	f003 faf7 	bl	8004d64 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	695a      	ldr	r2, [r3, #20]
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	441a      	add	r2, r3
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001784:	2100      	movs	r1, #0
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f008 f8fc 	bl	8009984 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800179a:	b29b      	uxth	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4413      	add	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d112      	bne.n	80017da <PCD_EP_ISR_Handler+0x23c>
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80017be:	b29a      	uxth	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	801a      	strh	r2, [r3, #0]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	801a      	strh	r2, [r3, #0]
 80017d8:	e02f      	b.n	800183a <PCD_EP_ISR_Handler+0x29c>
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	2b3e      	cmp	r3, #62	; 0x3e
 80017e0:	d813      	bhi.n	800180a <PCD_EP_ISR_Handler+0x26c>
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	085b      	lsrs	r3, r3, #1
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <PCD_EP_ISR_Handler+0x25e>
 80017f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f8:	3301      	adds	r3, #1
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30
 80017fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fe:	b29b      	uxth	r3, r3
 8001800:	029b      	lsls	r3, r3, #10
 8001802:	b29a      	uxth	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	801a      	strh	r2, [r3, #0]
 8001808:	e017      	b.n	800183a <PCD_EP_ISR_Handler+0x29c>
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <PCD_EP_ISR_Handler+0x286>
 800181e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001820:	3b01      	subs	r3, #1
 8001822:	633b      	str	r3, [r7, #48]	; 0x30
 8001824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001826:	b29b      	uxth	r3, r3
 8001828:	029b      	lsls	r3, r3, #10
 800182a:	b29b      	uxth	r3, r3
 800182c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001834:	b29a      	uxth	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800184a:	827b      	strh	r3, [r7, #18]
 800184c:	8a7b      	ldrh	r3, [r7, #18]
 800184e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001852:	827b      	strh	r3, [r7, #18]
 8001854:	8a7b      	ldrh	r3, [r7, #18]
 8001856:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800185a:	827b      	strh	r3, [r7, #18]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	8a7b      	ldrh	r3, [r7, #18]
 8001862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800186a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800186e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001872:	b29b      	uxth	r3, r3
 8001874:	8013      	strh	r3, [r2, #0]
 8001876:	e177      	b.n	8001b68 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800188a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800188e:	2b00      	cmp	r3, #0
 8001890:	f280 80ea 	bge.w	8001a68 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018aa:	4013      	ands	r3, r2
 80018ac:	853b      	strh	r3, [r7, #40]	; 0x28
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018c2:	b292      	uxth	r2, r2
 80018c4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80018c6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	7b1b      	ldrb	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d122      	bne.n	800192a <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4413      	add	r3, r2
 80018f8:	3306      	adds	r3, #6
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	4413      	add	r3, r2
 8001902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800190c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800190e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 8087 	beq.w	8001a24 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	6959      	ldr	r1, [r3, #20]
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	88da      	ldrh	r2, [r3, #6]
 8001922:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001924:	f003 fa1e 	bl	8004d64 <USB_ReadPMA>
 8001928:	e07c      	b.n	8001a24 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	78db      	ldrb	r3, [r3, #3]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d108      	bne.n	8001944 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001932:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001934:	461a      	mov	r2, r3
 8001936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f923 	bl	8001b84 <HAL_PCD_EP_DB_Receive>
 800193e:	4603      	mov	r3, r0
 8001940:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001942:	e06f      	b.n	8001a24 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800195a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800195e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	441a      	add	r2, r3
 800196e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800197c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001980:	b29b      	uxth	r3, r3
 8001982:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b29b      	uxth	r3, r3
 8001996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d021      	beq.n	80019e2 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4413      	add	r3, r2
 80019b2:	3302      	adds	r3, #2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019c6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80019c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d02a      	beq.n	8001a24 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	6959      	ldr	r1, [r3, #20]
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	891a      	ldrh	r2, [r3, #8]
 80019da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019dc:	f003 f9c2 	bl	8004d64 <USB_ReadPMA>
 80019e0:	e020      	b.n	8001a24 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4413      	add	r3, r2
 80019f6:	3306      	adds	r3, #6
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a0a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001a0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	6959      	ldr	r1, [r3, #20]
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	895a      	ldrh	r2, [r3, #10]
 8001a1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a20:	f003 f9a0 	bl	8004d64 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	69da      	ldr	r2, [r3, #28]
 8001a28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a2a:	441a      	add	r2, r3
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a36:	441a      	add	r2, r3
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <PCD_EP_ISR_Handler+0x4b0>
 8001a44:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d206      	bcs.n	8001a5c <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	4619      	mov	r1, r3
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f007 ff95 	bl	8009984 <HAL_PCD_DataOutStageCallback>
 8001a5a:	e005      	b.n	8001a68 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 fedc 	bl	8003820 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d07a      	beq.n	8001b68 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa0:	843b      	strh	r3, [r7, #32]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	441a      	add	r2, r3
 8001ab0:	8c3b      	ldrh	r3, [r7, #32]
 8001ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	78db      	ldrb	r3, [r3, #3]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d108      	bne.n	8001ad8 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d146      	bne.n	8001b5c <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ace:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d141      	bne.n	8001b5c <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	3302      	adds	r3, #2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b00:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	8bfb      	ldrh	r3, [r7, #30]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d906      	bls.n	8001b1a <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	699a      	ldr	r2, [r3, #24]
 8001b10:	8bfb      	ldrh	r3, [r7, #30]
 8001b12:	1ad2      	subs	r2, r2, r3
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	619a      	str	r2, [r3, #24]
 8001b18:	e002      	b.n	8001b20 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d106      	bne.n	8001b36 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f007 ff43 	bl	80099ba <HAL_PCD_DataInStageCallback>
 8001b34:	e018      	b.n	8001b68 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	8bfb      	ldrh	r3, [r7, #30]
 8001b3c:	441a      	add	r2, r3
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	69da      	ldr	r2, [r3, #28]
 8001b46:	8bfb      	ldrh	r3, [r7, #30]
 8001b48:	441a      	add	r2, r3
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fe63 	bl	8003820 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001b5a:	e005      	b.n	8001b68 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b5e:	461a      	mov	r2, r3
 8001b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f91b 	bl	8001d9e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f6ff ad17 	blt.w	80015a8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3738      	adds	r7, #56	; 0x38
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d07e      	beq.n	8001c9a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	4413      	add	r3, r2
 8001bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bc4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	8b7b      	ldrh	r3, [r7, #26]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d306      	bcc.n	8001bde <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	699a      	ldr	r2, [r3, #24]
 8001bd4:	8b7b      	ldrh	r3, [r7, #26]
 8001bd6:	1ad2      	subs	r2, r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	619a      	str	r2, [r3, #24]
 8001bdc:	e002      	b.n	8001be4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d123      	bne.n	8001c34 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c06:	833b      	strh	r3, [r7, #24]
 8001c08:	8b3b      	ldrh	r3, [r7, #24]
 8001c0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c0e:	833b      	strh	r3, [r7, #24]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	441a      	add	r2, r3
 8001c1e:	8b3b      	ldrh	r3, [r7, #24]
 8001c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d01f      	beq.n	8001c7e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c58:	82fb      	strh	r3, [r7, #22]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	441a      	add	r2, r3
 8001c68:	8afb      	ldrh	r3, [r7, #22]
 8001c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c7e:	8b7b      	ldrh	r3, [r7, #26]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8087 	beq.w	8001d94 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	6959      	ldr	r1, [r3, #20]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	891a      	ldrh	r2, [r3, #8]
 8001c92:	8b7b      	ldrh	r3, [r7, #26]
 8001c94:	f003 f866 	bl	8004d64 <USB_ReadPMA>
 8001c98:	e07c      	b.n	8001d94 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	3306      	adds	r3, #6
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cc2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	8b7b      	ldrh	r3, [r7, #26]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d306      	bcc.n	8001cdc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	699a      	ldr	r2, [r3, #24]
 8001cd2:	8b7b      	ldrh	r3, [r7, #26]
 8001cd4:	1ad2      	subs	r2, r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	619a      	str	r2, [r3, #24]
 8001cda:	e002      	b.n	8001ce2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d123      	bne.n	8001d32 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d04:	83fb      	strh	r3, [r7, #30]
 8001d06:	8bfb      	ldrh	r3, [r7, #30]
 8001d08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d0c:	83fb      	strh	r3, [r7, #30]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	441a      	add	r2, r3
 8001d1c:	8bfb      	ldrh	r3, [r7, #30]
 8001d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d11f      	bne.n	8001d7c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d56:	83bb      	strh	r3, [r7, #28]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	441a      	add	r2, r3
 8001d66:	8bbb      	ldrh	r3, [r7, #28]
 8001d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d7c:	8b7b      	ldrh	r3, [r7, #26]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	6959      	ldr	r1, [r3, #20]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	895a      	ldrh	r2, [r3, #10]
 8001d8e:	8b7b      	ldrh	r3, [r7, #26]
 8001d90:	f002 ffe8 	bl	8004d64 <USB_ReadPMA>
    }
  }

  return count;
 8001d94:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3720      	adds	r7, #32
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b092      	sub	sp, #72	; 0x48
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	4613      	mov	r3, r2
 8001daa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8132 	beq.w	800201c <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4413      	add	r3, r2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	699a      	ldr	r2, [r3, #24]
 8001de6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d906      	bls.n	8001dfa <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001df2:	1ad2      	subs	r2, r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	619a      	str	r2, [r3, #24]
 8001df8:	e002      	b.n	8001e00 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d12c      	bne.n	8001e62 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f007 fdd3 	bl	80099ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 822f 	beq.w	800227e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3a:	827b      	strh	r3, [r7, #18]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	441a      	add	r2, r3
 8001e4a:	8a7b      	ldrh	r3, [r7, #18]
 8001e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	8013      	strh	r3, [r2, #0]
 8001e60:	e20d      	b.n	800227e <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01f      	beq.n	8001eac <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	441a      	add	r2, r3
 8001e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	f040 81e3 	bne.w	800227e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ebe:	441a      	add	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	69da      	ldr	r2, [r3, #28]
 8001ec8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001eca:	441a      	add	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	6a1a      	ldr	r2, [r3, #32]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d309      	bcc.n	8001ef0 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	6a1a      	ldr	r2, [r3, #32]
 8001ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee8:	1ad2      	subs	r2, r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	621a      	str	r2, [r3, #32]
 8001eee:	e014      	b.n	8001f1a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d106      	bne.n	8001f06 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001ef8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001efa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f04:	e009      	b.n	8001f1a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2200      	movs	r2, #0
 8001f18:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	785b      	ldrb	r3, [r3, #1]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d155      	bne.n	8001fce <HAL_PCD_EP_DB_Transmit+0x230>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	4413      	add	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	011a      	lsls	r2, r3, #4
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	4413      	add	r3, r2
 8001f44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d112      	bne.n	8001f76 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	801a      	strh	r2, [r3, #0]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	801a      	strh	r2, [r3, #0]
 8001f74:	e047      	b.n	8002006 <HAL_PCD_EP_DB_Transmit+0x268>
 8001f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f78:	2b3e      	cmp	r3, #62	; 0x3e
 8001f7a:	d811      	bhi.n	8001fa0 <HAL_PCD_EP_DB_Transmit+0x202>
 8001f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	3301      	adds	r3, #1
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	029b      	lsls	r3, r3, #10
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	801a      	strh	r2, [r3, #0]
 8001f9e:	e032      	b.n	8002006 <HAL_PCD_EP_DB_Transmit+0x268>
 8001fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d102      	bne.n	8001fb6 <HAL_PCD_EP_DB_Transmit+0x218>
 8001fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	029b      	lsls	r3, r3, #10
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	801a      	strh	r2, [r3, #0]
 8001fcc:	e01b      	b.n	8002006 <HAL_PCD_EP_DB_Transmit+0x268>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d117      	bne.n	8002006 <HAL_PCD_EP_DB_Transmit+0x268>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	623b      	str	r3, [r7, #32]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	4413      	add	r3, r2
 8001fec:	623b      	str	r3, [r7, #32]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	011a      	lsls	r2, r3, #4
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002000:	b29a      	uxth	r2, r3
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	6959      	ldr	r1, [r3, #20]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	891a      	ldrh	r2, [r3, #8]
 8002012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002014:	b29b      	uxth	r3, r3
 8002016:	f002 fe61 	bl	8004cdc <USB_WritePMA>
 800201a:	e130      	b.n	800227e <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002024:	b29b      	uxth	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	3306      	adds	r3, #6
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	4413      	add	r3, r2
 800203a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002044:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800204c:	429a      	cmp	r2, r3
 800204e:	d306      	bcc.n	800205e <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	699a      	ldr	r2, [r3, #24]
 8002054:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002056:	1ad2      	subs	r2, r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	619a      	str	r2, [r3, #24]
 800205c:	e002      	b.n	8002064 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d12c      	bne.n	80020c6 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f007 fca1 	bl	80099ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207e:	2b00      	cmp	r3, #0
 8002080:	f040 80fd 	bne.w	800227e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800209a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80020b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	8013      	strh	r3, [r2, #0]
 80020c4:	e0db      	b.n	800227e <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d11f      	bne.n	8002110 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80020fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002104:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800210c:	b29b      	uxth	r3, r3
 800210e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002116:	2b01      	cmp	r3, #1
 8002118:	f040 80b1 	bne.w	800227e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002122:	441a      	add	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	69da      	ldr	r2, [r3, #28]
 800212c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800212e:	441a      	add	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	6a1a      	ldr	r2, [r3, #32]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	429a      	cmp	r2, r3
 800213e:	d309      	bcc.n	8002154 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	6a1a      	ldr	r2, [r3, #32]
 800214a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214c:	1ad2      	subs	r2, r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	621a      	str	r2, [r3, #32]
 8002152:	e014      	b.n	800217e <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800215c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800215e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002168:	e009      	b.n	800217e <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2200      	movs	r2, #0
 8002174:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	637b      	str	r3, [r7, #52]	; 0x34
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	785b      	ldrb	r3, [r3, #1]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d155      	bne.n	8002238 <HAL_PCD_EP_DB_Transmit+0x49a>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	647b      	str	r3, [r7, #68]	; 0x44
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219a:	b29b      	uxth	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021a0:	4413      	add	r3, r2
 80021a2:	647b      	str	r3, [r7, #68]	; 0x44
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	011a      	lsls	r2, r3, #4
 80021aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ac:	4413      	add	r3, r2
 80021ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021b2:	643b      	str	r3, [r7, #64]	; 0x40
 80021b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d112      	bne.n	80021e0 <HAL_PCD_EP_DB_Transmit+0x442>
 80021ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c8:	801a      	strh	r2, [r3, #0]
 80021ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d8:	b29a      	uxth	r2, r3
 80021da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021dc:	801a      	strh	r2, [r3, #0]
 80021de:	e044      	b.n	800226a <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e2:	2b3e      	cmp	r3, #62	; 0x3e
 80021e4:	d811      	bhi.n	800220a <HAL_PCD_EP_DB_Transmit+0x46c>
 80021e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <HAL_PCD_EP_DB_Transmit+0x45e>
 80021f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f8:	3301      	adds	r3, #1
 80021fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fe:	b29b      	uxth	r3, r3
 8002200:	029b      	lsls	r3, r3, #10
 8002202:	b29a      	uxth	r2, r3
 8002204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002206:	801a      	strh	r2, [r3, #0]
 8002208:	e02f      	b.n	800226a <HAL_PCD_EP_DB_Transmit+0x4cc>
 800220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <HAL_PCD_EP_DB_Transmit+0x482>
 800221a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221c:	3b01      	subs	r3, #1
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002222:	b29b      	uxth	r3, r3
 8002224:	029b      	lsls	r3, r3, #10
 8002226:	b29b      	uxth	r3, r3
 8002228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800222c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002230:	b29a      	uxth	r2, r3
 8002232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	e018      	b.n	800226a <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	785b      	ldrb	r3, [r3, #1]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d114      	bne.n	800226a <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002248:	b29b      	uxth	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224e:	4413      	add	r3, r2
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	011a      	lsls	r2, r3, #4
 8002258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225a:	4413      	add	r3, r2
 800225c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002260:	633b      	str	r3, [r7, #48]	; 0x30
 8002262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002264:	b29a      	uxth	r2, r3
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	6959      	ldr	r1, [r3, #20]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	895a      	ldrh	r2, [r3, #10]
 8002276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002278:	b29b      	uxth	r3, r3
 800227a:	f002 fd2f 	bl	8004cdc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002298:	823b      	strh	r3, [r7, #16]
 800229a:	8a3b      	ldrh	r3, [r7, #16]
 800229c:	f083 0310 	eor.w	r3, r3, #16
 80022a0:	823b      	strh	r3, [r7, #16]
 80022a2:	8a3b      	ldrh	r3, [r7, #16]
 80022a4:	f083 0320 	eor.w	r3, r3, #32
 80022a8:	823b      	strh	r3, [r7, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	441a      	add	r2, r3
 80022b8:	8a3b      	ldrh	r3, [r7, #16]
 80022ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3748      	adds	r7, #72	; 0x48
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	817b      	strh	r3, [r7, #10]
 80022e6:	4613      	mov	r3, r2
 80022e8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80022ea:	897b      	ldrh	r3, [r7, #10]
 80022ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f6:	897b      	ldrh	r3, [r7, #10]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4413      	add	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	e009      	b.n	8002322 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800230e:	897a      	ldrh	r2, [r7, #10]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002322:	893b      	ldrh	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d107      	bne.n	8002338 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2200      	movs	r2, #0
 800232c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	b29a      	uxth	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	80da      	strh	r2, [r3, #6]
 8002336:	e00b      	b.n	8002350 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2201      	movs	r2, #1
 800233c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	b29a      	uxth	r2, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	b29a      	uxth	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e26c      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8087 	beq.w	800248a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800237c:	4b92      	ldr	r3, [pc, #584]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b04      	cmp	r3, #4
 8002386:	d00c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002388:	4b8f      	ldr	r3, [pc, #572]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b08      	cmp	r3, #8
 8002392:	d112      	bne.n	80023ba <HAL_RCC_OscConfig+0x5e>
 8002394:	4b8c      	ldr	r3, [pc, #560]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d10b      	bne.n	80023ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a2:	4b89      	ldr	r3, [pc, #548]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d06c      	beq.n	8002488 <HAL_RCC_OscConfig+0x12c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d168      	bne.n	8002488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e246      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x76>
 80023c4:	4b80      	ldr	r3, [pc, #512]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a7f      	ldr	r2, [pc, #508]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	e02e      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x98>
 80023da:	4b7b      	ldr	r3, [pc, #492]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a7a      	ldr	r2, [pc, #488]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b78      	ldr	r3, [pc, #480]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a77      	ldr	r2, [pc, #476]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e01d      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0xbc>
 80023fe:	4b72      	ldr	r3, [pc, #456]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a71      	ldr	r2, [pc, #452]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b6f      	ldr	r3, [pc, #444]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 8002418:	4b6b      	ldr	r3, [pc, #428]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a6a      	ldr	r2, [pc, #424]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a67      	ldr	r2, [pc, #412]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800242a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7fe f96a 	bl	8000710 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7fe f966 	bl	8000710 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1fa      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0xe4>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7fe f956 	bl	8000710 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002468:	f7fe f952 	bl	8000710 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1e6      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247a:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x10c>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d063      	beq.n	800255e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002496:	4b4c      	ldr	r3, [pc, #304]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024a2:	4b49      	ldr	r3, [pc, #292]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d11c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x18c>
 80024ae:	4b46      	ldr	r3, [pc, #280]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d116      	bne.n	80024e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	4b43      	ldr	r3, [pc, #268]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_RCC_OscConfig+0x176>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e1ba      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4939      	ldr	r1, [pc, #228]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	e03a      	b.n	800255e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f0:	4b36      	ldr	r3, [pc, #216]	; (80025cc <HAL_RCC_OscConfig+0x270>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe f90b 	bl	8000710 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fe:	f7fe f907 	bl	8000710 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e19b      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4927      	ldr	r1, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <HAL_RCC_OscConfig+0x270>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7fe f8ea 	bl	8000710 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002540:	f7fe f8e6 	bl	8000710 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e17a      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d03a      	beq.n	80025e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d019      	beq.n	80025a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7fe f8ca 	bl	8000710 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002580:	f7fe f8c6 	bl	8000710 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e15a      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800259e:	2001      	movs	r0, #1
 80025a0:	f000 faa8 	bl	8002af4 <RCC_Delay>
 80025a4:	e01c      	b.n	80025e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_RCC_OscConfig+0x274>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ac:	f7fe f8b0 	bl	8000710 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b2:	e00f      	b.n	80025d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b4:	f7fe f8ac 	bl	8000710 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d908      	bls.n	80025d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e140      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	42420000 	.word	0x42420000
 80025d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	4b9e      	ldr	r3, [pc, #632]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e9      	bne.n	80025b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a6 	beq.w	800273a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f2:	4b97      	ldr	r3, [pc, #604]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10d      	bne.n	800261a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	4b94      	ldr	r3, [pc, #592]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a93      	ldr	r2, [pc, #588]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002608:	61d3      	str	r3, [r2, #28]
 800260a:	4b91      	ldr	r3, [pc, #580]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4b8e      	ldr	r3, [pc, #568]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d118      	bne.n	8002658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002626:	4b8b      	ldr	r3, [pc, #556]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a8a      	ldr	r2, [pc, #552]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002632:	f7fe f86d 	bl	8000710 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263a:	f7fe f869 	bl	8000710 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b64      	cmp	r3, #100	; 0x64
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0fd      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	4b81      	ldr	r3, [pc, #516]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x312>
 8002660:	4b7b      	ldr	r3, [pc, #492]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4a7a      	ldr	r2, [pc, #488]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6213      	str	r3, [r2, #32]
 800266c:	e02d      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x334>
 8002676:	4b76      	ldr	r3, [pc, #472]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a75      	ldr	r2, [pc, #468]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6213      	str	r3, [r2, #32]
 8002682:	4b73      	ldr	r3, [pc, #460]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	4a72      	ldr	r2, [pc, #456]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	6213      	str	r3, [r2, #32]
 800268e:	e01c      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d10c      	bne.n	80026b2 <HAL_RCC_OscConfig+0x356>
 8002698:	4b6d      	ldr	r3, [pc, #436]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4a6c      	ldr	r2, [pc, #432]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	6213      	str	r3, [r2, #32]
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a69      	ldr	r2, [pc, #420]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6213      	str	r3, [r2, #32]
 80026b0:	e00b      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 80026b2:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a66      	ldr	r2, [pc, #408]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6213      	str	r3, [r2, #32]
 80026be:	4b64      	ldr	r3, [pc, #400]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4a63      	ldr	r2, [pc, #396]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d015      	beq.n	80026fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7fe f81d 	bl	8000710 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe f819 	bl	8000710 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0ab      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	4b57      	ldr	r3, [pc, #348]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ee      	beq.n	80026da <HAL_RCC_OscConfig+0x37e>
 80026fc:	e014      	b.n	8002728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7fe f807 	bl	8000710 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7fe f803 	bl	8000710 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	; 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e095      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271c:	4b4c      	ldr	r3, [pc, #304]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ee      	bne.n	8002706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272e:	4b48      	ldr	r3, [pc, #288]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a47      	ldr	r2, [pc, #284]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8081 	beq.w	8002846 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002744:	4b42      	ldr	r3, [pc, #264]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b08      	cmp	r3, #8
 800274e:	d061      	beq.n	8002814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d146      	bne.n	80027e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002758:	4b3f      	ldr	r3, [pc, #252]	; (8002858 <HAL_RCC_OscConfig+0x4fc>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7fd ffd7 	bl	8000710 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002766:	f7fd ffd3 	bl	8000710 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e067      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002778:	4b35      	ldr	r3, [pc, #212]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f0      	bne.n	8002766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d108      	bne.n	80027a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800278e:	4b30      	ldr	r3, [pc, #192]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	492d      	ldr	r1, [pc, #180]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a19      	ldr	r1, [r3, #32]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	430b      	orrs	r3, r1
 80027b2:	4927      	ldr	r1, [pc, #156]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_RCC_OscConfig+0x4fc>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fd ffa7 	bl	8000710 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fd ffa3 	bl	8000710 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e037      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d8:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x46a>
 80027e4:	e02f      	b.n	8002846 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <HAL_RCC_OscConfig+0x4fc>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fd ff90 	bl	8000710 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fd ff8c 	bl	8000710 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e020      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x498>
 8002812:	e018      	b.n	8002846 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e013      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
 8002858:	42420060 	.word	0x42420060

0800285c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0d0      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002870:	4b6a      	ldr	r3, [pc, #424]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d910      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0207 	bic.w	r2, r3, #7
 8002886:	4965      	ldr	r1, [pc, #404]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b8      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d020      	beq.n	80028ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b8:	4b59      	ldr	r3, [pc, #356]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a52      	ldr	r2, [pc, #328]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028dc:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	494d      	ldr	r1, [pc, #308]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d040      	beq.n	800297c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d115      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291a:	4b41      	ldr	r3, [pc, #260]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e073      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e06b      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293a:	4b39      	ldr	r3, [pc, #228]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4936      	ldr	r1, [pc, #216]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800294c:	f7fd fee0 	bl	8000710 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	e00a      	b.n	800296a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7fd fedc 	bl	8000710 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e053      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 020c 	and.w	r2, r3, #12
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	429a      	cmp	r2, r3
 800297a:	d1eb      	bne.n	8002954 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800297c:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d210      	bcs.n	80029ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 0207 	bic.w	r2, r3, #7
 8002992:	4922      	ldr	r1, [pc, #136]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e032      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4916      	ldr	r1, [pc, #88]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	490e      	ldr	r1, [pc, #56]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ea:	f000 f821 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 80029ee:	4601      	mov	r1, r0
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	5cd3      	ldrb	r3, [r2, r3]
 80029fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x1cc>)
 8002a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1d0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fe3e 	bl	800068c <HAL_InitTick>

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40022000 	.word	0x40022000
 8002a20:	40021000 	.word	0x40021000
 8002a24:	0800a098 	.word	0x0800a098
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	20000004 	.word	0x20000004

08002a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a30:	b490      	push	{r4, r7}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a38:	1d3c      	adds	r4, r7, #4
 8002a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a40:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a5a:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d002      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x40>
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x46>
 8002a6e:	e02d      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a72:	623b      	str	r3, [r7, #32]
      break;
 8002a74:	e02d      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	0c9b      	lsrs	r3, r3, #18
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a82:	4413      	add	r3, r2
 8002a84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a88:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d013      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	0c5b      	lsrs	r3, r3, #17
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aa8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4a0f      	ldr	r2, [pc, #60]	; (8002aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aae:	fb02 f203 	mul.w	r2, r2, r3
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aba:	e004      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	623b      	str	r3, [r7, #32]
      break;
 8002aca:	e002      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b07      	ldr	r3, [pc, #28]	; (8002aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ace:	623b      	str	r3, [r7, #32]
      break;
 8002ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3728      	adds	r7, #40	; 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc90      	pop	{r4, r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	0800a000 	.word	0x0800a000
 8002ae4:	0800a010 	.word	0x0800a010
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	007a1200 	.word	0x007a1200
 8002af0:	003d0900 	.word	0x003d0900

08002af4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002afc:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <RCC_Delay+0x34>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <RCC_Delay+0x38>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0a5b      	lsrs	r3, r3, #9
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b10:	bf00      	nop
  }
  while (Delay --);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1e5a      	subs	r2, r3, #1
 8002b16:	60fa      	str	r2, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f9      	bne.n	8002b10 <RCC_Delay+0x1c>
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	10624dd3 	.word	0x10624dd3

08002b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d07d      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b50:	4b4f      	ldr	r3, [pc, #316]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10d      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	4a4b      	ldr	r2, [pc, #300]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b66:	61d3      	str	r3, [r2, #28]
 8002b68:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b74:	2301      	movs	r3, #1
 8002b76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	4b46      	ldr	r3, [pc, #280]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d118      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b84:	4b43      	ldr	r3, [pc, #268]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a42      	ldr	r2, [pc, #264]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b90:	f7fd fdbe 	bl	8000710 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	e008      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b98:	f7fd fdba 	bl	8000710 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e06d      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002baa:	4b3a      	ldr	r3, [pc, #232]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bb6:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d02e      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d027      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bd4:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bdc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bde:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002be4:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bea:	4a29      	ldr	r2, [pc, #164]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d014      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fd fd89 	bl	8000710 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fd fd85 	bl	8000710 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e036      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0ee      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c24:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4917      	ldr	r1, [pc, #92]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c54:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	490b      	ldr	r1, [pc, #44]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	4904      	ldr	r1, [pc, #16]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40007000 	.word	0x40007000
 8002c98:	42420440 	.word	0x42420440

08002c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	f107 0014 	add.w	r0, r7, #20
 8002caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	b004      	add	sp, #16
 8002cba:	4770      	bx	lr

08002cbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ccc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002cd0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cf0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002cf4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	4013      	ands	r3, r2
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d34:	b084      	sub	sp, #16
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	f107 0014 	add.w	r0, r7, #20
 8002d42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	b004      	add	sp, #16
 8002d72:	4770      	bx	lr

08002d74 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b09b      	sub	sp, #108	; 0x6c
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	78db      	ldrb	r3, [r3, #3]
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d81f      	bhi.n	8002de6 <USB_ActivateEndpoint+0x72>
 8002da6:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <USB_ActivateEndpoint+0x38>)
 8002da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dac:	08002dbd 	.word	0x08002dbd
 8002db0:	08002dd9 	.word	0x08002dd9
 8002db4:	08002def 	.word	0x08002def
 8002db8:	08002dcb 	.word	0x08002dcb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002dbc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dc4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002dc8:	e012      	b.n	8002df0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002dca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002dd2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002dd6:	e00b      	b.n	8002df0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002dd8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ddc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002de4:	e004      	b.n	8002df0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002dec:	e000      	b.n	8002df0 <USB_ActivateEndpoint+0x7c>
      break;
 8002dee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	441a      	add	r2, r3
 8002dfa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	441a      	add	r2, r3
 8002e40:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	7b1b      	ldrb	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 8149 	bne.w	80030f4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8084 	beq.w	8002f74 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	011a      	lsls	r2, r3, #4
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	88db      	ldrh	r3, [r3, #6]
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	81fb      	strh	r3, [r7, #14]
 8002eae:	89fb      	ldrh	r3, [r7, #14]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01b      	beq.n	8002ef0 <USB_ActivateEndpoint+0x17c>
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ece:	81bb      	strh	r3, [r7, #12]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	89bb      	ldrh	r3, [r7, #12]
 8002edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	78db      	ldrb	r3, [r3, #3]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d020      	beq.n	8002f3a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f0e:	813b      	strh	r3, [r7, #8]
 8002f10:	893b      	ldrh	r3, [r7, #8]
 8002f12:	f083 0320 	eor.w	r3, r3, #32
 8002f16:	813b      	strh	r3, [r7, #8]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	441a      	add	r2, r3
 8002f22:	893b      	ldrh	r3, [r7, #8]
 8002f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	8013      	strh	r3, [r2, #0]
 8002f38:	e27f      	b.n	800343a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f50:	817b      	strh	r3, [r7, #10]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	441a      	add	r2, r3
 8002f5c:	897b      	ldrh	r3, [r7, #10]
 8002f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	8013      	strh	r3, [r2, #0]
 8002f72:	e262      	b.n	800343a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	4413      	add	r3, r2
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	011a      	lsls	r2, r3, #4
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	88db      	ldrh	r3, [r3, #6]
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	4413      	add	r3, r2
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	011a      	lsls	r2, r3, #4
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fca:	623b      	str	r3, [r7, #32]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d112      	bne.n	8002ffa <USB_ActivateEndpoint+0x286>
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	801a      	strh	r2, [r3, #0]
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	801a      	strh	r2, [r3, #0]
 8002ff8:	e02f      	b.n	800305a <USB_ActivateEndpoint+0x2e6>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	2b3e      	cmp	r3, #62	; 0x3e
 8003000:	d813      	bhi.n	800302a <USB_ActivateEndpoint+0x2b6>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	085b      	lsrs	r3, r3, #1
 8003008:	663b      	str	r3, [r7, #96]	; 0x60
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <USB_ActivateEndpoint+0x2a8>
 8003016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003018:	3301      	adds	r3, #1
 800301a:	663b      	str	r3, [r7, #96]	; 0x60
 800301c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800301e:	b29b      	uxth	r3, r3
 8003020:	029b      	lsls	r3, r3, #10
 8003022:	b29a      	uxth	r2, r3
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	801a      	strh	r2, [r3, #0]
 8003028:	e017      	b.n	800305a <USB_ActivateEndpoint+0x2e6>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	663b      	str	r3, [r7, #96]	; 0x60
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <USB_ActivateEndpoint+0x2d0>
 800303e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003040:	3b01      	subs	r3, #1
 8003042:	663b      	str	r3, [r7, #96]	; 0x60
 8003044:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003046:	b29b      	uxth	r3, r3
 8003048:	029b      	lsls	r3, r3, #10
 800304a:	b29b      	uxth	r3, r3
 800304c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003054:	b29a      	uxth	r2, r3
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	83fb      	strh	r3, [r7, #30]
 8003068:	8bfb      	ldrh	r3, [r7, #30]
 800306a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01b      	beq.n	80030aa <USB_ActivateEndpoint+0x336>
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003088:	83bb      	strh	r3, [r7, #28]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	441a      	add	r2, r3
 8003094:	8bbb      	ldrh	r3, [r7, #28]
 8003096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800309a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800309e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c0:	837b      	strh	r3, [r7, #26]
 80030c2:	8b7b      	ldrh	r3, [r7, #26]
 80030c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030c8:	837b      	strh	r3, [r7, #26]
 80030ca:	8b7b      	ldrh	r3, [r7, #26]
 80030cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030d0:	837b      	strh	r3, [r7, #26]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	441a      	add	r2, r3
 80030dc:	8b7b      	ldrh	r3, [r7, #26]
 80030de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	8013      	strh	r3, [r2, #0]
 80030f2:	e1a2      	b.n	800343a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	441a      	add	r2, r3
 8003118:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800311c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003124:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312c:	b29b      	uxth	r3, r3
 800312e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	65bb      	str	r3, [r7, #88]	; 0x58
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313a:	b29b      	uxth	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003140:	4413      	add	r3, r2
 8003142:	65bb      	str	r3, [r7, #88]	; 0x58
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	011a      	lsls	r2, r3, #4
 800314a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800314c:	4413      	add	r3, r2
 800314e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003152:	657b      	str	r3, [r7, #84]	; 0x54
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	891b      	ldrh	r3, [r3, #8]
 8003158:	085b      	lsrs	r3, r3, #1
 800315a:	b29b      	uxth	r3, r3
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003162:	801a      	strh	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	653b      	str	r3, [r7, #80]	; 0x50
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316e:	b29b      	uxth	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003174:	4413      	add	r3, r2
 8003176:	653b      	str	r3, [r7, #80]	; 0x50
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	011a      	lsls	r2, r3, #4
 800317e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003180:	4413      	add	r3, r2
 8003182:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	895b      	ldrh	r3, [r3, #10]
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	b29b      	uxth	r3, r3
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003196:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f040 8091 	bne.w	80032c4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80031b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80031b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d01b      	beq.n	80031f2 <USB_ActivateEndpoint+0x47e>
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	441a      	add	r2, r3
 80031dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8003200:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01b      	beq.n	8003242 <USB_ActivateEndpoint+0x4ce>
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800321c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003220:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	441a      	add	r2, r3
 800322c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800322e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800323e:	b29b      	uxth	r3, r3
 8003240:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	b29b      	uxth	r3, r3
 8003250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003258:	86bb      	strh	r3, [r7, #52]	; 0x34
 800325a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800325c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003260:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003262:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003264:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003268:	86bb      	strh	r3, [r7, #52]	; 0x34
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	441a      	add	r2, r3
 8003274:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800327a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800327e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003286:	b29b      	uxth	r3, r3
 8003288:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	b29b      	uxth	r3, r3
 8003298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a0:	867b      	strh	r3, [r7, #50]	; 0x32
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	441a      	add	r2, r3
 80032ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80032ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032be:	b29b      	uxth	r3, r3
 80032c0:	8013      	strh	r3, [r2, #0]
 80032c2:	e0ba      	b.n	800343a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80032d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01d      	beq.n	800331c <USB_ActivateEndpoint+0x5a8>
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	441a      	add	r2, r3
 8003304:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800330c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003318:	b29b      	uxth	r3, r3
 800331a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800332c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01d      	beq.n	8003374 <USB_ActivateEndpoint+0x600>
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	b29b      	uxth	r3, r3
 8003346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	441a      	add	r2, r3
 800335c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003370:	b29b      	uxth	r3, r3
 8003372:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	78db      	ldrb	r3, [r3, #3]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d024      	beq.n	80033c6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003392:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003396:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800339a:	f083 0320 	eor.w	r3, r3, #32
 800339e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	441a      	add	r2, r3
 80033ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80033b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	8013      	strh	r3, [r2, #0]
 80033c4:	e01d      	b.n	8003402 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	441a      	add	r2, r3
 80033ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80033ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033fe:	b29b      	uxth	r3, r3
 8003400:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003418:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	441a      	add	r2, r3
 8003424:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800342a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800342e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003436:	b29b      	uxth	r3, r3
 8003438:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800343a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800343e:	4618      	mov	r0, r3
 8003440:	376c      	adds	r7, #108	; 0x6c
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003448:	b480      	push	{r7}
 800344a:	b08d      	sub	sp, #52	; 0x34
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	7b1b      	ldrb	r3, [r3, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f040 808e 	bne.w	8003578 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	785b      	ldrb	r3, [r3, #1]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d044      	beq.n	80034ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	81bb      	strh	r3, [r7, #12]
 8003472:	89bb      	ldrh	r3, [r7, #12]
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01b      	beq.n	80034b4 <USB_DeactivateEndpoint+0x6c>
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	817b      	strh	r3, [r7, #10]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	441a      	add	r2, r3
 800349e:	897b      	ldrh	r3, [r7, #10]
 80034a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ca:	813b      	strh	r3, [r7, #8]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	441a      	add	r2, r3
 80034d6:	893b      	ldrh	r3, [r7, #8]
 80034d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	8013      	strh	r3, [r2, #0]
 80034ec:	e192      	b.n	8003814 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	827b      	strh	r3, [r7, #18]
 80034fc:	8a7b      	ldrh	r3, [r7, #18]
 80034fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01b      	beq.n	800353e <USB_DeactivateEndpoint+0xf6>
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351c:	823b      	strh	r3, [r7, #16]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	441a      	add	r2, r3
 8003528:	8a3b      	ldrh	r3, [r7, #16]
 800352a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800352e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353a:	b29b      	uxth	r3, r3
 800353c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003554:	81fb      	strh	r3, [r7, #14]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	441a      	add	r2, r3
 8003560:	89fb      	ldrh	r3, [r7, #14]
 8003562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800356a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003572:	b29b      	uxth	r3, r3
 8003574:	8013      	strh	r3, [r2, #0]
 8003576:	e14d      	b.n	8003814 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	785b      	ldrb	r3, [r3, #1]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f040 80a5 	bne.w	80036cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	843b      	strh	r3, [r7, #32]
 8003590:	8c3b      	ldrh	r3, [r7, #32]
 8003592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01b      	beq.n	80035d2 <USB_DeactivateEndpoint+0x18a>
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b0:	83fb      	strh	r3, [r7, #30]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	441a      	add	r2, r3
 80035bc:	8bfb      	ldrh	r3, [r7, #30]
 80035be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	83bb      	strh	r3, [r7, #28]
 80035e0:	8bbb      	ldrh	r3, [r7, #28]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01b      	beq.n	8003622 <USB_DeactivateEndpoint+0x1da>
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003600:	837b      	strh	r3, [r7, #26]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	441a      	add	r2, r3
 800360c:	8b7b      	ldrh	r3, [r7, #26]
 800360e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800361e:	b29b      	uxth	r3, r3
 8003620:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003638:	833b      	strh	r3, [r7, #24]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	441a      	add	r2, r3
 8003644:	8b3b      	ldrh	r3, [r7, #24]
 8003646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800364a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800364e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003652:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003656:	b29b      	uxth	r3, r3
 8003658:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	b29b      	uxth	r3, r3
 8003668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800366c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003670:	82fb      	strh	r3, [r7, #22]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	441a      	add	r2, r3
 800367c:	8afb      	ldrh	r3, [r7, #22]
 800367e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368e:	b29b      	uxth	r3, r3
 8003690:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a8:	82bb      	strh	r3, [r7, #20]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	441a      	add	r2, r3
 80036b4:	8abb      	ldrh	r3, [r7, #20]
 80036b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	8013      	strh	r3, [r2, #0]
 80036ca:	e0a3      	b.n	8003814 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80036da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01b      	beq.n	800371c <USB_DeactivateEndpoint+0x2d4>
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800370c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003718:	b29b      	uxth	r3, r3
 800371a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	857b      	strh	r3, [r7, #42]	; 0x2a
 800372a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01b      	beq.n	800376c <USB_DeactivateEndpoint+0x324>
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	853b      	strh	r3, [r7, #40]	; 0x28
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800375c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003764:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003768:	b29b      	uxth	r3, r3
 800376a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	b29b      	uxth	r3, r3
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003782:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	441a      	add	r2, r3
 800378e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800379c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d8:	b29b      	uxth	r3, r3
 80037da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	441a      	add	r2, r3
 80037fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003810:	b29b      	uxth	r3, r3
 8003812:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3734      	adds	r7, #52	; 0x34
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr

08003820 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b0c4      	sub	sp, #272	; 0x110
 8003824:	af00      	add	r7, sp, #0
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	6018      	str	r0, [r3, #0]
 800382a:	463b      	mov	r3, r7
 800382c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800382e:	463b      	mov	r3, r7
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	785b      	ldrb	r3, [r3, #1]
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 8557 	bne.w	80042e8 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800383a:	463b      	mov	r3, r7
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	463b      	mov	r3, r7
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	429a      	cmp	r2, r3
 8003848:	d905      	bls.n	8003856 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800384a:	463b      	mov	r3, r7
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003854:	e004      	b.n	8003860 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003856:	463b      	mov	r3, r7
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003860:	463b      	mov	r3, r7
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	7b1b      	ldrb	r3, [r3, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d12c      	bne.n	80038c4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800386a:	463b      	mov	r3, r7
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6959      	ldr	r1, [r3, #20]
 8003870:	463b      	mov	r3, r7
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	88da      	ldrh	r2, [r3, #6]
 8003876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800387a:	b29b      	uxth	r3, r3
 800387c:	1d38      	adds	r0, r7, #4
 800387e:	6800      	ldr	r0, [r0, #0]
 8003880:	f001 fa2c 	bl	8004cdc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003884:	1d3b      	adds	r3, r7, #4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	4413      	add	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	463b      	mov	r3, r7
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	011a      	lsls	r2, r3, #4
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	4413      	add	r3, r2
 80038a8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80038ac:	f107 0310 	add.w	r3, r7, #16
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	f107 0310 	add.w	r3, r7, #16
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	801a      	strh	r2, [r3, #0]
 80038c0:	f000 bcdd 	b.w	800427e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80038c4:	463b      	mov	r3, r7
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	78db      	ldrb	r3, [r3, #3]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	f040 8347 	bne.w	8003f5e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80038d0:	463b      	mov	r3, r7
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6a1a      	ldr	r2, [r3, #32]
 80038d6:	463b      	mov	r3, r7
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	429a      	cmp	r2, r3
 80038de:	f240 82eb 	bls.w	8003eb8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	463b      	mov	r3, r7
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003900:	1d3b      	adds	r3, r7, #4
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	463b      	mov	r3, r7
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	441a      	add	r2, r3
 800390e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800391a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800391e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003922:	b29b      	uxth	r3, r3
 8003924:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003926:	463b      	mov	r3, r7
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a1a      	ldr	r2, [r3, #32]
 800392c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003930:	1ad2      	subs	r2, r2, r3
 8003932:	463b      	mov	r3, r7
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	463b      	mov	r3, r7
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 8159 	beq.w	8003c06 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003954:	1d3b      	adds	r3, r7, #4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	637b      	str	r3, [r7, #52]	; 0x34
 800395a:	463b      	mov	r3, r7
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	785b      	ldrb	r3, [r3, #1]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d164      	bne.n	8003a2e <USB_EPStartXfer+0x20e>
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396a:	1d3b      	adds	r3, r7, #4
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003972:	b29b      	uxth	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	4413      	add	r3, r2
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800397c:	463b      	mov	r3, r7
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	011a      	lsls	r2, r3, #4
 8003984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003986:	4413      	add	r3, r2
 8003988:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
 800398e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d112      	bne.n	80039bc <USB_EPStartXfer+0x19c>
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	801a      	strh	r2, [r3, #0]
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	801a      	strh	r2, [r3, #0]
 80039ba:	e054      	b.n	8003a66 <USB_EPStartXfer+0x246>
 80039bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c0:	2b3e      	cmp	r3, #62	; 0x3e
 80039c2:	d817      	bhi.n	80039f4 <USB_EPStartXfer+0x1d4>
 80039c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c8:	085b      	lsrs	r3, r3, #1
 80039ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d004      	beq.n	80039e4 <USB_EPStartXfer+0x1c4>
 80039da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039de:	3301      	adds	r3, #1
 80039e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	029b      	lsls	r3, r3, #10
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	801a      	strh	r2, [r3, #0]
 80039f2:	e038      	b.n	8003a66 <USB_EPStartXfer+0x246>
 80039f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d104      	bne.n	8003a14 <USB_EPStartXfer+0x1f4>
 8003a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	029b      	lsls	r3, r3, #10
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	801a      	strh	r2, [r3, #0]
 8003a2c:	e01b      	b.n	8003a66 <USB_EPStartXfer+0x246>
 8003a2e:	463b      	mov	r3, r7
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	785b      	ldrb	r3, [r3, #1]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d116      	bne.n	8003a66 <USB_EPStartXfer+0x246>
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a46:	4413      	add	r3, r2
 8003a48:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4a:	463b      	mov	r3, r7
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	011a      	lsls	r2, r3, #4
 8003a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a54:	4413      	add	r3, r2
 8003a56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003a66:	463b      	mov	r3, r7
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	895b      	ldrh	r3, [r3, #10]
 8003a6c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a70:	463b      	mov	r3, r7
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6959      	ldr	r1, [r3, #20]
 8003a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003a80:	1d38      	adds	r0, r7, #4
 8003a82:	6800      	ldr	r0, [r0, #0]
 8003a84:	f001 f92a 	bl	8004cdc <USB_WritePMA>
            ep->xfer_buff += len;
 8003a88:	463b      	mov	r3, r7
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a92:	441a      	add	r2, r3
 8003a94:	463b      	mov	r3, r7
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	463b      	mov	r3, r7
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d909      	bls.n	8003abe <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003aaa:	463b      	mov	r3, r7
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6a1a      	ldr	r2, [r3, #32]
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab4:	1ad2      	subs	r2, r2, r3
 8003ab6:	463b      	mov	r3, r7
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	621a      	str	r2, [r3, #32]
 8003abc:	e008      	b.n	8003ad0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003abe:	463b      	mov	r3, r7
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003ac8:	463b      	mov	r3, r7
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2200      	movs	r2, #0
 8003ace:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ad0:	463b      	mov	r3, r7
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	785b      	ldrb	r3, [r3, #1]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d164      	bne.n	8003ba4 <USB_EPStartXfer+0x384>
 8003ada:	1d3b      	adds	r3, r7, #4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	1d3b      	adds	r3, r7, #4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	4413      	add	r3, r2
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	463b      	mov	r3, r7
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	011a      	lsls	r2, r3, #4
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	4413      	add	r3, r2
 8003afe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d112      	bne.n	8003b32 <USB_EPStartXfer+0x312>
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	801a      	strh	r2, [r3, #0]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	801a      	strh	r2, [r3, #0]
 8003b30:	e057      	b.n	8003be2 <USB_EPStartXfer+0x3c2>
 8003b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b36:	2b3e      	cmp	r3, #62	; 0x3e
 8003b38:	d817      	bhi.n	8003b6a <USB_EPStartXfer+0x34a>
 8003b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <USB_EPStartXfer+0x33a>
 8003b50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b54:	3301      	adds	r3, #1
 8003b56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	029b      	lsls	r3, r3, #10
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	801a      	strh	r2, [r3, #0]
 8003b68:	e03b      	b.n	8003be2 <USB_EPStartXfer+0x3c2>
 8003b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d104      	bne.n	8003b8a <USB_EPStartXfer+0x36a>
 8003b80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b84:	3b01      	subs	r3, #1
 8003b86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	029b      	lsls	r3, r3, #10
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	801a      	strh	r2, [r3, #0]
 8003ba2:	e01e      	b.n	8003be2 <USB_EPStartXfer+0x3c2>
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	785b      	ldrb	r3, [r3, #1]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d119      	bne.n	8003be2 <USB_EPStartXfer+0x3c2>
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb4:	1d3b      	adds	r3, r7, #4
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	4413      	add	r3, r2
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc6:	463b      	mov	r3, r7
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	011a      	lsls	r2, r3, #4
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bd6:	623b      	str	r3, [r7, #32]
 8003bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003be2:	463b      	mov	r3, r7
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	891b      	ldrh	r3, [r3, #8]
 8003be8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bec:	463b      	mov	r3, r7
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6959      	ldr	r1, [r3, #20]
 8003bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003bfc:	1d38      	adds	r0, r7, #4
 8003bfe:	6800      	ldr	r0, [r0, #0]
 8003c00:	f001 f86c 	bl	8004cdc <USB_WritePMA>
 8003c04:	e33b      	b.n	800427e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c06:	463b      	mov	r3, r7
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	785b      	ldrb	r3, [r3, #1]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d164      	bne.n	8003cda <USB_EPStartXfer+0x4ba>
 8003c10:	1d3b      	adds	r3, r7, #4
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c16:	1d3b      	adds	r3, r7, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c24:	4413      	add	r3, r2
 8003c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c28:	463b      	mov	r3, r7
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	011a      	lsls	r2, r3, #4
 8003c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c32:	4413      	add	r3, r2
 8003c34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d112      	bne.n	8003c68 <USB_EPStartXfer+0x448>
 8003c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c64:	801a      	strh	r2, [r3, #0]
 8003c66:	e057      	b.n	8003d18 <USB_EPStartXfer+0x4f8>
 8003c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c6c:	2b3e      	cmp	r3, #62	; 0x3e
 8003c6e:	d817      	bhi.n	8003ca0 <USB_EPStartXfer+0x480>
 8003c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <USB_EPStartXfer+0x470>
 8003c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	029b      	lsls	r3, r3, #10
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9c:	801a      	strh	r2, [r3, #0]
 8003c9e:	e03b      	b.n	8003d18 <USB_EPStartXfer+0x4f8>
 8003ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cae:	f003 031f 	and.w	r3, r3, #31
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d104      	bne.n	8003cc0 <USB_EPStartXfer+0x4a0>
 8003cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	029b      	lsls	r3, r3, #10
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	e01e      	b.n	8003d18 <USB_EPStartXfer+0x4f8>
 8003cda:	463b      	mov	r3, r7
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	785b      	ldrb	r3, [r3, #1]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d119      	bne.n	8003d18 <USB_EPStartXfer+0x4f8>
 8003ce4:	1d3b      	adds	r3, r7, #4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	657b      	str	r3, [r7, #84]	; 0x54
 8003cea:	1d3b      	adds	r3, r7, #4
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf8:	4413      	add	r3, r2
 8003cfa:	657b      	str	r3, [r7, #84]	; 0x54
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	011a      	lsls	r2, r3, #4
 8003d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d06:	4413      	add	r3, r2
 8003d08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d0c:	653b      	str	r3, [r7, #80]	; 0x50
 8003d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d18:	463b      	mov	r3, r7
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	891b      	ldrh	r3, [r3, #8]
 8003d1e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d22:	463b      	mov	r3, r7
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6959      	ldr	r1, [r3, #20]
 8003d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003d32:	1d38      	adds	r0, r7, #4
 8003d34:	6800      	ldr	r0, [r0, #0]
 8003d36:	f000 ffd1 	bl	8004cdc <USB_WritePMA>
            ep->xfer_buff += len;
 8003d3a:	463b      	mov	r3, r7
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d44:	441a      	add	r2, r3
 8003d46:	463b      	mov	r3, r7
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003d4c:	463b      	mov	r3, r7
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6a1a      	ldr	r2, [r3, #32]
 8003d52:	463b      	mov	r3, r7
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d909      	bls.n	8003d70 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003d5c:	463b      	mov	r3, r7
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6a1a      	ldr	r2, [r3, #32]
 8003d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d66:	1ad2      	subs	r2, r2, r3
 8003d68:	463b      	mov	r3, r7
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	621a      	str	r2, [r3, #32]
 8003d6e:	e008      	b.n	8003d82 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003d70:	463b      	mov	r3, r7
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d82:	1d3b      	adds	r3, r7, #4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	647b      	str	r3, [r7, #68]	; 0x44
 8003d88:	463b      	mov	r3, r7
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	785b      	ldrb	r3, [r3, #1]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d164      	bne.n	8003e5c <USB_EPStartXfer+0x63c>
 8003d92:	1d3b      	adds	r3, r7, #4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da6:	4413      	add	r3, r2
 8003da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003daa:	463b      	mov	r3, r7
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	011a      	lsls	r2, r3, #4
 8003db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db4:	4413      	add	r3, r2
 8003db6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d112      	bne.n	8003dea <USB_EPStartXfer+0x5ca>
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	801a      	strh	r2, [r3, #0]
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	801a      	strh	r2, [r3, #0]
 8003de8:	e054      	b.n	8003e94 <USB_EPStartXfer+0x674>
 8003dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dee:	2b3e      	cmp	r3, #62	; 0x3e
 8003df0:	d817      	bhi.n	8003e22 <USB_EPStartXfer+0x602>
 8003df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <USB_EPStartXfer+0x5f2>
 8003e08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	029b      	lsls	r3, r3, #10
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	e038      	b.n	8003e94 <USB_EPStartXfer+0x674>
 8003e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <USB_EPStartXfer+0x622>
 8003e38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	029b      	lsls	r3, r3, #10
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	801a      	strh	r2, [r3, #0]
 8003e5a:	e01b      	b.n	8003e94 <USB_EPStartXfer+0x674>
 8003e5c:	463b      	mov	r3, r7
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	785b      	ldrb	r3, [r3, #1]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d116      	bne.n	8003e94 <USB_EPStartXfer+0x674>
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e74:	4413      	add	r3, r2
 8003e76:	647b      	str	r3, [r7, #68]	; 0x44
 8003e78:	463b      	mov	r3, r7
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	011a      	lsls	r2, r3, #4
 8003e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e82:	4413      	add	r3, r2
 8003e84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e88:	643b      	str	r3, [r7, #64]	; 0x40
 8003e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003e94:	463b      	mov	r3, r7
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	895b      	ldrh	r3, [r3, #10]
 8003e9a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6959      	ldr	r1, [r3, #20]
 8003ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003eae:	1d38      	adds	r0, r7, #4
 8003eb0:	6800      	ldr	r0, [r0, #0]
 8003eb2:	f000 ff13 	bl	8004cdc <USB_WritePMA>
 8003eb6:	e1e2      	b.n	800427e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003eb8:	463b      	mov	r3, r7
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003ec2:	1d3b      	adds	r3, r7, #4
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	463b      	mov	r3, r7
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003edc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003ee0:	1d3b      	adds	r3, r7, #4
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	463b      	mov	r3, r7
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	441a      	add	r2, r3
 8003eee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f0c:	1d3b      	adds	r3, r7, #4
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f1a:	4413      	add	r3, r2
 8003f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f1e:	463b      	mov	r3, r7
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	011a      	lsls	r2, r3, #4
 8003f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f28:	4413      	add	r3, r2
 8003f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003f3a:	463b      	mov	r3, r7
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	891b      	ldrh	r3, [r3, #8]
 8003f40:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f44:	463b      	mov	r3, r7
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6959      	ldr	r1, [r3, #20]
 8003f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003f54:	1d38      	adds	r0, r7, #4
 8003f56:	6800      	ldr	r0, [r0, #0]
 8003f58:	f000 fec0 	bl	8004cdc <USB_WritePMA>
 8003f5c:	e18f      	b.n	800427e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	463b      	mov	r3, r7
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 808f 	beq.w	8004098 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f7a:	1d3b      	adds	r3, r7, #4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f80:	463b      	mov	r3, r7
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	785b      	ldrb	r3, [r3, #1]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d164      	bne.n	8004054 <USB_EPStartXfer+0x834>
 8003f8a:	1d3b      	adds	r3, r7, #4
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f90:	1d3b      	adds	r3, r7, #4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f9e:	4413      	add	r3, r2
 8003fa0:	673b      	str	r3, [r7, #112]	; 0x70
 8003fa2:	463b      	mov	r3, r7
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	011a      	lsls	r2, r3, #4
 8003faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fac:	4413      	add	r3, r2
 8003fae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d112      	bne.n	8003fe2 <USB_EPStartXfer+0x7c2>
 8003fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fca:	801a      	strh	r2, [r3, #0]
 8003fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fde:	801a      	strh	r2, [r3, #0]
 8003fe0:	e054      	b.n	800408c <USB_EPStartXfer+0x86c>
 8003fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8003fe8:	d817      	bhi.n	800401a <USB_EPStartXfer+0x7fa>
 8003fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <USB_EPStartXfer+0x7ea>
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	3301      	adds	r3, #1
 8004006:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400e:	b29b      	uxth	r3, r3
 8004010:	029b      	lsls	r3, r3, #10
 8004012:	b29a      	uxth	r2, r3
 8004014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004016:	801a      	strh	r2, [r3, #0]
 8004018:	e038      	b.n	800408c <USB_EPStartXfer+0x86c>
 800401a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	2b00      	cmp	r3, #0
 800402e:	d104      	bne.n	800403a <USB_EPStartXfer+0x81a>
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	3b01      	subs	r3, #1
 8004036:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403e:	b29b      	uxth	r3, r3
 8004040:	029b      	lsls	r3, r3, #10
 8004042:	b29b      	uxth	r3, r3
 8004044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800404c:	b29a      	uxth	r2, r3
 800404e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004050:	801a      	strh	r2, [r3, #0]
 8004052:	e01b      	b.n	800408c <USB_EPStartXfer+0x86c>
 8004054:	463b      	mov	r3, r7
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	785b      	ldrb	r3, [r3, #1]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d116      	bne.n	800408c <USB_EPStartXfer+0x86c>
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004066:	b29b      	uxth	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800406c:	4413      	add	r3, r2
 800406e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004070:	463b      	mov	r3, r7
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	011a      	lsls	r2, r3, #4
 8004078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800407a:	4413      	add	r3, r2
 800407c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004080:	677b      	str	r3, [r7, #116]	; 0x74
 8004082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004086:	b29a      	uxth	r2, r3
 8004088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800408c:	463b      	mov	r3, r7
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	895b      	ldrh	r3, [r3, #10]
 8004092:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004096:	e097      	b.n	80041c8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004098:	463b      	mov	r3, r7
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d168      	bne.n	8004174 <USB_EPStartXfer+0x954>
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040ba:	4413      	add	r3, r2
 80040bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040c0:	463b      	mov	r3, r7
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	011a      	lsls	r2, r3, #4
 80040c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040cc:	4413      	add	r3, r2
 80040ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d112      	bne.n	8004102 <USB_EPStartXfer+0x8e2>
 80040dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ea:	801a      	strh	r2, [r3, #0]
 80040ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	e05d      	b.n	80041be <USB_EPStartXfer+0x99e>
 8004102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004106:	2b3e      	cmp	r3, #62	; 0x3e
 8004108:	d817      	bhi.n	800413a <USB_EPStartXfer+0x91a>
 800410a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <USB_EPStartXfer+0x90a>
 8004120:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004124:	3301      	adds	r3, #1
 8004126:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800412a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800412e:	b29b      	uxth	r3, r3
 8004130:	029b      	lsls	r3, r3, #10
 8004132:	b29a      	uxth	r2, r3
 8004134:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004136:	801a      	strh	r2, [r3, #0]
 8004138:	e041      	b.n	80041be <USB_EPStartXfer+0x99e>
 800413a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	2b00      	cmp	r3, #0
 800414e:	d104      	bne.n	800415a <USB_EPStartXfer+0x93a>
 8004150:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004154:	3b01      	subs	r3, #1
 8004156:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800415a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800415e:	b29b      	uxth	r3, r3
 8004160:	029b      	lsls	r3, r3, #10
 8004162:	b29b      	uxth	r3, r3
 8004164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800416c:	b29a      	uxth	r2, r3
 800416e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004170:	801a      	strh	r2, [r3, #0]
 8004172:	e024      	b.n	80041be <USB_EPStartXfer+0x99e>
 8004174:	463b      	mov	r3, r7
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	785b      	ldrb	r3, [r3, #1]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d11f      	bne.n	80041be <USB_EPStartXfer+0x99e>
 800417e:	1d3b      	adds	r3, r7, #4
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800418e:	b29b      	uxth	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004196:	4413      	add	r3, r2
 8004198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800419c:	463b      	mov	r3, r7
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	011a      	lsls	r2, r3, #4
 80041a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041a8:	4413      	add	r3, r2
 80041aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80041be:	463b      	mov	r3, r7
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	891b      	ldrh	r3, [r3, #8]
 80041c4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041c8:	463b      	mov	r3, r7
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6959      	ldr	r1, [r3, #20]
 80041ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80041d8:	1d38      	adds	r0, r7, #4
 80041da:	6800      	ldr	r0, [r0, #0]
 80041dc:	f000 fd7e 	bl	8004cdc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80041e0:	463b      	mov	r3, r7
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	785b      	ldrb	r3, [r3, #1]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d122      	bne.n	8004230 <USB_EPStartXfer+0xa10>
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	463b      	mov	r3, r7
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004204:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004208:	1d3b      	adds	r3, r7, #4
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	463b      	mov	r3, r7
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	441a      	add	r2, r3
 8004216:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800421a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800421e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800422a:	b29b      	uxth	r3, r3
 800422c:	8013      	strh	r3, [r2, #0]
 800422e:	e026      	b.n	800427e <USB_EPStartXfer+0xa5e>
 8004230:	463b      	mov	r3, r7
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	785b      	ldrb	r3, [r3, #1]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d121      	bne.n	800427e <USB_EPStartXfer+0xa5e>
 800423a:	1d3b      	adds	r3, r7, #4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	463b      	mov	r3, r7
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004254:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004258:	1d3b      	adds	r3, r7, #4
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	463b      	mov	r3, r7
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	441a      	add	r2, r3
 8004266:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800426a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800426e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427a:	b29b      	uxth	r3, r3
 800427c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	463b      	mov	r3, r7
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	f107 020e 	add.w	r2, r7, #14
 8004294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429c:	8013      	strh	r3, [r2, #0]
 800429e:	f107 030e 	add.w	r3, r7, #14
 80042a2:	f107 020e 	add.w	r2, r7, #14
 80042a6:	8812      	ldrh	r2, [r2, #0]
 80042a8:	f082 0210 	eor.w	r2, r2, #16
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	f107 030e 	add.w	r3, r7, #14
 80042b2:	f107 020e 	add.w	r2, r7, #14
 80042b6:	8812      	ldrh	r2, [r2, #0]
 80042b8:	f082 0220 	eor.w	r2, r2, #32
 80042bc:	801a      	strh	r2, [r3, #0]
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	463b      	mov	r3, r7
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	441a      	add	r2, r3
 80042cc:	f107 030e 	add.w	r3, r7, #14
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	8013      	strh	r3, [r2, #0]
 80042e6:	e3b5      	b.n	8004a54 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80042e8:	463b      	mov	r3, r7
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	7b1b      	ldrb	r3, [r3, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f040 8090 	bne.w	8004414 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80042f4:	463b      	mov	r3, r7
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	463b      	mov	r3, r7
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	429a      	cmp	r2, r3
 8004302:	d90e      	bls.n	8004322 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004304:	463b      	mov	r3, r7
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800430e:	463b      	mov	r3, r7
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699a      	ldr	r2, [r3, #24]
 8004314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004318:	1ad2      	subs	r2, r2, r3
 800431a:	463b      	mov	r3, r7
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	619a      	str	r2, [r3, #24]
 8004320:	e008      	b.n	8004334 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004322:	463b      	mov	r3, r7
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800432c:	463b      	mov	r3, r7
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2200      	movs	r2, #0
 8004332:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004334:	1d3b      	adds	r3, r7, #4
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800433c:	1d3b      	adds	r3, r7, #4
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004344:	b29b      	uxth	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800434c:	4413      	add	r3, r2
 800434e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004352:	463b      	mov	r3, r7
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	011a      	lsls	r2, r3, #4
 800435a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800435e:	4413      	add	r3, r2
 8004360:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d116      	bne.n	800439e <USB_EPStartXfer+0xb7e>
 8004370:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800437c:	b29a      	uxth	r2, r3
 800437e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004382:	801a      	strh	r2, [r3, #0]
 8004384:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004394:	b29a      	uxth	r2, r3
 8004396:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800439a:	801a      	strh	r2, [r3, #0]
 800439c:	e32c      	b.n	80049f8 <USB_EPStartXfer+0x11d8>
 800439e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a2:	2b3e      	cmp	r3, #62	; 0x3e
 80043a4:	d818      	bhi.n	80043d8 <USB_EPStartXfer+0xbb8>
 80043a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <USB_EPStartXfer+0xba6>
 80043bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043c0:	3301      	adds	r3, #1
 80043c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	029b      	lsls	r3, r3, #10
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043d4:	801a      	strh	r2, [r3, #0]
 80043d6:	e30f      	b.n	80049f8 <USB_EPStartXfer+0x11d8>
 80043d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d104      	bne.n	80043f8 <USB_EPStartXfer+0xbd8>
 80043ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043f2:	3b01      	subs	r3, #1
 80043f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	029b      	lsls	r3, r3, #10
 8004400:	b29b      	uxth	r3, r3
 8004402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800440a:	b29a      	uxth	r2, r3
 800440c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004410:	801a      	strh	r2, [r3, #0]
 8004412:	e2f1      	b.n	80049f8 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004414:	463b      	mov	r3, r7
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	78db      	ldrb	r3, [r3, #3]
 800441a:	2b02      	cmp	r3, #2
 800441c:	f040 818f 	bne.w	800473e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004420:	463b      	mov	r3, r7
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	785b      	ldrb	r3, [r3, #1]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d175      	bne.n	8004516 <USB_EPStartXfer+0xcf6>
 800442a:	1d3b      	adds	r3, r7, #4
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443a:	b29b      	uxth	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004442:	4413      	add	r3, r2
 8004444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004448:	463b      	mov	r3, r7
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	011a      	lsls	r2, r3, #4
 8004450:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004454:	4413      	add	r3, r2
 8004456:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800445a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800445e:	463b      	mov	r3, r7
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d116      	bne.n	8004496 <USB_EPStartXfer+0xc76>
 8004468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004474:	b29a      	uxth	r2, r3
 8004476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800447a:	801a      	strh	r2, [r3, #0]
 800447c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448c:	b29a      	uxth	r2, r3
 800448e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004492:	801a      	strh	r2, [r3, #0]
 8004494:	e065      	b.n	8004562 <USB_EPStartXfer+0xd42>
 8004496:	463b      	mov	r3, r7
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b3e      	cmp	r3, #62	; 0x3e
 800449e:	d81a      	bhi.n	80044d6 <USB_EPStartXfer+0xcb6>
 80044a0:	463b      	mov	r3, r7
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044ac:	463b      	mov	r3, r7
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d004      	beq.n	80044c4 <USB_EPStartXfer+0xca4>
 80044ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044be:	3301      	adds	r3, #1
 80044c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	029b      	lsls	r3, r3, #10
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	e045      	b.n	8004562 <USB_EPStartXfer+0xd42>
 80044d6:	463b      	mov	r3, r7
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044e2:	463b      	mov	r3, r7
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <USB_EPStartXfer+0xcda>
 80044f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044f4:	3b01      	subs	r3, #1
 80044f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044fe:	b29b      	uxth	r3, r3
 8004500:	029b      	lsls	r3, r3, #10
 8004502:	b29b      	uxth	r3, r3
 8004504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800450c:	b29a      	uxth	r2, r3
 800450e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004512:	801a      	strh	r2, [r3, #0]
 8004514:	e025      	b.n	8004562 <USB_EPStartXfer+0xd42>
 8004516:	463b      	mov	r3, r7
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d120      	bne.n	8004562 <USB_EPStartXfer+0xd42>
 8004520:	1d3b      	adds	r3, r7, #4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004530:	b29b      	uxth	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004538:	4413      	add	r3, r2
 800453a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800453e:	463b      	mov	r3, r7
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	011a      	lsls	r2, r3, #4
 8004546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800454a:	4413      	add	r3, r2
 800454c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004554:	463b      	mov	r3, r7
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	b29a      	uxth	r2, r3
 800455c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004560:	801a      	strh	r2, [r3, #0]
 8004562:	1d3b      	adds	r3, r7, #4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800456a:	463b      	mov	r3, r7
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	785b      	ldrb	r3, [r3, #1]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d175      	bne.n	8004660 <USB_EPStartXfer+0xe40>
 8004574:	1d3b      	adds	r3, r7, #4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800457c:	1d3b      	adds	r3, r7, #4
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004584:	b29b      	uxth	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800458c:	4413      	add	r3, r2
 800458e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004592:	463b      	mov	r3, r7
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	011a      	lsls	r2, r3, #4
 800459a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800459e:	4413      	add	r3, r2
 80045a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045a8:	463b      	mov	r3, r7
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d116      	bne.n	80045e0 <USB_EPStartXfer+0xdc0>
 80045b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045be:	b29a      	uxth	r2, r3
 80045c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045c4:	801a      	strh	r2, [r3, #0]
 80045c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045dc:	801a      	strh	r2, [r3, #0]
 80045de:	e061      	b.n	80046a4 <USB_EPStartXfer+0xe84>
 80045e0:	463b      	mov	r3, r7
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b3e      	cmp	r3, #62	; 0x3e
 80045e8:	d81a      	bhi.n	8004620 <USB_EPStartXfer+0xe00>
 80045ea:	463b      	mov	r3, r7
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045f6:	463b      	mov	r3, r7
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d004      	beq.n	800460e <USB_EPStartXfer+0xdee>
 8004604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004608:	3301      	adds	r3, #1
 800460a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800460e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004612:	b29b      	uxth	r3, r3
 8004614:	029b      	lsls	r3, r3, #10
 8004616:	b29a      	uxth	r2, r3
 8004618:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	e041      	b.n	80046a4 <USB_EPStartXfer+0xe84>
 8004620:	463b      	mov	r3, r7
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800462c:	463b      	mov	r3, r7
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	2b00      	cmp	r3, #0
 8004638:	d104      	bne.n	8004644 <USB_EPStartXfer+0xe24>
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463e:	3b01      	subs	r3, #1
 8004640:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004648:	b29b      	uxth	r3, r3
 800464a:	029b      	lsls	r3, r3, #10
 800464c:	b29b      	uxth	r3, r3
 800464e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004656:	b29a      	uxth	r2, r3
 8004658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800465c:	801a      	strh	r2, [r3, #0]
 800465e:	e021      	b.n	80046a4 <USB_EPStartXfer+0xe84>
 8004660:	463b      	mov	r3, r7
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d11c      	bne.n	80046a4 <USB_EPStartXfer+0xe84>
 800466a:	1d3b      	adds	r3, r7, #4
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004672:	b29b      	uxth	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800467a:	4413      	add	r3, r2
 800467c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004680:	463b      	mov	r3, r7
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	011a      	lsls	r2, r3, #4
 8004688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800468c:	4413      	add	r3, r2
 800468e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004696:	463b      	mov	r3, r7
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	b29a      	uxth	r2, r3
 800469e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046a2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80046a4:	463b      	mov	r3, r7
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 81a4 	beq.w	80049f8 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80046b0:	1d3b      	adds	r3, r7, #4
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	463b      	mov	r3, r7
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80046c4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <USB_EPStartXfer+0xebc>
 80046d0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10d      	bne.n	80046f8 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80046dc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f040 8187 	bne.w	80049f8 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80046ea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f040 8180 	bne.w	80049f8 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80046f8:	1d3b      	adds	r3, r7, #4
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	463b      	mov	r3, r7
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8004716:	1d3b      	adds	r3, r7, #4
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	463b      	mov	r3, r7
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004734:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004738:	b29b      	uxth	r3, r3
 800473a:	8013      	strh	r3, [r2, #0]
 800473c:	e15c      	b.n	80049f8 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800473e:	463b      	mov	r3, r7
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	78db      	ldrb	r3, [r3, #3]
 8004744:	2b01      	cmp	r3, #1
 8004746:	f040 8155 	bne.w	80049f4 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800474a:	463b      	mov	r3, r7
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699a      	ldr	r2, [r3, #24]
 8004750:	463b      	mov	r3, r7
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	429a      	cmp	r2, r3
 8004758:	d90e      	bls.n	8004778 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800475a:	463b      	mov	r3, r7
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004764:	463b      	mov	r3, r7
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	463b      	mov	r3, r7
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	619a      	str	r2, [r3, #24]
 8004776:	e008      	b.n	800478a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004778:	463b      	mov	r3, r7
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004782:	463b      	mov	r3, r7
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2200      	movs	r2, #0
 8004788:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800478a:	463b      	mov	r3, r7
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d16f      	bne.n	8004874 <USB_EPStartXfer+0x1054>
 8004794:	1d3b      	adds	r3, r7, #4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800479c:	1d3b      	adds	r3, r7, #4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80047ac:	4413      	add	r3, r2
 80047ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047b2:	463b      	mov	r3, r7
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	011a      	lsls	r2, r3, #4
 80047ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80047be:	4413      	add	r3, r2
 80047c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d116      	bne.n	80047fe <USB_EPStartXfer+0xfde>
 80047d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047dc:	b29a      	uxth	r2, r3
 80047de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047e2:	801a      	strh	r2, [r3, #0]
 80047e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047fa:	801a      	strh	r2, [r3, #0]
 80047fc:	e05f      	b.n	80048be <USB_EPStartXfer+0x109e>
 80047fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004802:	2b3e      	cmp	r3, #62	; 0x3e
 8004804:	d818      	bhi.n	8004838 <USB_EPStartXfer+0x1018>
 8004806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <USB_EPStartXfer+0x1006>
 800481c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004820:	3301      	adds	r3, #1
 8004822:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482a:	b29b      	uxth	r3, r3
 800482c:	029b      	lsls	r3, r3, #10
 800482e:	b29a      	uxth	r2, r3
 8004830:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	e042      	b.n	80048be <USB_EPStartXfer+0x109e>
 8004838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <USB_EPStartXfer+0x1038>
 800484e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004852:	3b01      	subs	r3, #1
 8004854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800485c:	b29b      	uxth	r3, r3
 800485e:	029b      	lsls	r3, r3, #10
 8004860:	b29b      	uxth	r3, r3
 8004862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486a:	b29a      	uxth	r2, r3
 800486c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	e024      	b.n	80048be <USB_EPStartXfer+0x109e>
 8004874:	463b      	mov	r3, r7
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	785b      	ldrb	r3, [r3, #1]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d11f      	bne.n	80048be <USB_EPStartXfer+0x109e>
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004886:	1d3b      	adds	r3, r7, #4
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800488e:	b29b      	uxth	r3, r3
 8004890:	461a      	mov	r2, r3
 8004892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004896:	4413      	add	r3, r2
 8004898:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800489c:	463b      	mov	r3, r7
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	011a      	lsls	r2, r3, #4
 80048a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048a8:	4413      	add	r3, r2
 80048aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80048b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048bc:	801a      	strh	r2, [r3, #0]
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048c6:	463b      	mov	r3, r7
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d16f      	bne.n	80049b0 <USB_EPStartXfer+0x1190>
 80048d0:	1d3b      	adds	r3, r7, #4
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048d8:	1d3b      	adds	r3, r7, #4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048e8:	4413      	add	r3, r2
 80048ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048ee:	463b      	mov	r3, r7
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	011a      	lsls	r2, r3, #4
 80048f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048fa:	4413      	add	r3, r2
 80048fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d116      	bne.n	800493a <USB_EPStartXfer+0x111a>
 800490c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004918:	b29a      	uxth	r2, r3
 800491a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800491e:	801a      	strh	r2, [r3, #0]
 8004920:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800492c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004930:	b29a      	uxth	r2, r3
 8004932:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004936:	801a      	strh	r2, [r3, #0]
 8004938:	e05e      	b.n	80049f8 <USB_EPStartXfer+0x11d8>
 800493a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800493e:	2b3e      	cmp	r3, #62	; 0x3e
 8004940:	d818      	bhi.n	8004974 <USB_EPStartXfer+0x1154>
 8004942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800494c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d004      	beq.n	8004962 <USB_EPStartXfer+0x1142>
 8004958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800495c:	3301      	adds	r3, #1
 800495e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004966:	b29b      	uxth	r3, r3
 8004968:	029b      	lsls	r3, r3, #10
 800496a:	b29a      	uxth	r2, r3
 800496c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	e041      	b.n	80049f8 <USB_EPStartXfer+0x11d8>
 8004974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800497e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <USB_EPStartXfer+0x1174>
 800498a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800498e:	3b01      	subs	r3, #1
 8004990:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004998:	b29b      	uxth	r3, r3
 800499a:	029b      	lsls	r3, r3, #10
 800499c:	b29b      	uxth	r3, r3
 800499e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	e023      	b.n	80049f8 <USB_EPStartXfer+0x11d8>
 80049b0:	463b      	mov	r3, r7
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	785b      	ldrb	r3, [r3, #1]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d11e      	bne.n	80049f8 <USB_EPStartXfer+0x11d8>
 80049ba:	1d3b      	adds	r3, r7, #4
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049ca:	4413      	add	r3, r2
 80049cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049d0:	463b      	mov	r3, r7
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	011a      	lsls	r2, r3, #4
 80049d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049dc:	4413      	add	r3, r2
 80049de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049f0:	801a      	strh	r2, [r3, #0]
 80049f2:	e001      	b.n	80049f8 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e02e      	b.n	8004a56 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049f8:	1d3b      	adds	r3, r7, #4
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	463b      	mov	r3, r7
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004a16:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a1e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004a22:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a2a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004a2e:	1d3b      	adds	r3, r7, #4
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	463b      	mov	r3, r7
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	441a      	add	r2, r3
 8004a3c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	785b      	ldrb	r3, [r3, #1]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d020      	beq.n	8004ab4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a88:	81bb      	strh	r3, [r7, #12]
 8004a8a:	89bb      	ldrh	r3, [r7, #12]
 8004a8c:	f083 0310 	eor.w	r3, r3, #16
 8004a90:	81bb      	strh	r3, [r7, #12]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	441a      	add	r2, r3
 8004a9c:	89bb      	ldrh	r3, [r7, #12]
 8004a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	8013      	strh	r3, [r2, #0]
 8004ab2:	e01f      	b.n	8004af4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	81fb      	strh	r3, [r7, #14]
 8004acc:	89fb      	ldrh	r3, [r7, #14]
 8004ace:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ad2:	81fb      	strh	r3, [r7, #14]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	441a      	add	r2, r3
 8004ade:	89fb      	ldrh	r3, [r7, #14]
 8004ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	7b1b      	ldrb	r3, [r3, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f040 809d 	bne.w	8004c4e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	785b      	ldrb	r3, [r3, #1]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d04c      	beq.n	8004bb6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	823b      	strh	r3, [r7, #16]
 8004b2a:	8a3b      	ldrh	r3, [r7, #16]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01b      	beq.n	8004b6c <USB_EPClearStall+0x6c>
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	81fb      	strh	r3, [r7, #14]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	441a      	add	r2, r3
 8004b56:	89fb      	ldrh	r3, [r7, #14]
 8004b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	78db      	ldrb	r3, [r3, #3]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d06c      	beq.n	8004c4e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8a:	81bb      	strh	r3, [r7, #12]
 8004b8c:	89bb      	ldrh	r3, [r7, #12]
 8004b8e:	f083 0320 	eor.w	r3, r3, #32
 8004b92:	81bb      	strh	r3, [r7, #12]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	441a      	add	r2, r3
 8004b9e:	89bb      	ldrh	r3, [r7, #12]
 8004ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	8013      	strh	r3, [r2, #0]
 8004bb4:	e04b      	b.n	8004c4e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	82fb      	strh	r3, [r7, #22]
 8004bc4:	8afb      	ldrh	r3, [r7, #22]
 8004bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01b      	beq.n	8004c06 <USB_EPClearStall+0x106>
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be4:	82bb      	strh	r3, [r7, #20]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	441a      	add	r2, r3
 8004bf0:	8abb      	ldrh	r3, [r7, #20]
 8004bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1c:	827b      	strh	r3, [r7, #18]
 8004c1e:	8a7b      	ldrh	r3, [r7, #18]
 8004c20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c24:	827b      	strh	r3, [r7, #18]
 8004c26:	8a7b      	ldrh	r3, [r7, #18]
 8004c28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c2c:	827b      	strh	r3, [r7, #18]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	441a      	add	r2, r3
 8004c38:	8a7b      	ldrh	r3, [r7, #18]
 8004c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr

08004c5a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	460b      	mov	r3, r1
 8004c64:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d103      	bne.n	8004c74 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2280      	movs	r2, #128	; 0x80
 8004c70:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr

08004c94 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004cba:	68fb      	ldr	r3, [r7, #12]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr

08004cc6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b08d      	sub	sp, #52	; 0x34
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	460b      	mov	r3, r1
 8004cec:	80fb      	strh	r3, [r7, #6]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004cf2:	88bb      	ldrh	r3, [r7, #4]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	085b      	lsrs	r3, r3, #1
 8004cf8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	005a      	lsls	r2, r3, #1
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d14:	e01e      	b.n	8004d54 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	3301      	adds	r3, #1
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	3302      	adds	r3, #2
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	3302      	adds	r3, #2
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	3b01      	subs	r3, #1
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1dd      	bne.n	8004d16 <USB_WritePMA+0x3a>
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	3734      	adds	r7, #52	; 0x34
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b08b      	sub	sp, #44	; 0x2c
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	4611      	mov	r1, r2
 8004d70:	461a      	mov	r2, r3
 8004d72:	460b      	mov	r3, r1
 8004d74:	80fb      	strh	r3, [r7, #6]
 8004d76:	4613      	mov	r3, r2
 8004d78:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004d7a:	88bb      	ldrh	r3, [r7, #4]
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	005a      	lsls	r2, r3, #1
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d96:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9c:	e01b      	b.n	8004dd6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	3302      	adds	r3, #2
 8004daa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	3301      	adds	r3, #1
 8004db8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	0a1b      	lsrs	r3, r3, #8
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	3302      	adds	r3, #2
 8004dce:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e0      	bne.n	8004d9e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004ddc:	88bb      	ldrh	r3, [r7, #4]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	701a      	strb	r2, [r3, #0]
  }
}
 8004df8:	bf00      	nop
 8004dfa:	372c      	adds	r7, #44	; 0x2c
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr

08004e02 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	7c1b      	ldrb	r3, [r3, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d115      	bne.n	8004e46 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e1e:	2202      	movs	r2, #2
 8004e20:	2181      	movs	r1, #129	; 0x81
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f004 fead 	bl	8009b82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e32:	2202      	movs	r2, #2
 8004e34:	2101      	movs	r1, #1
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f004 fea3 	bl	8009b82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004e44:	e012      	b.n	8004e6c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e46:	2340      	movs	r3, #64	; 0x40
 8004e48:	2202      	movs	r2, #2
 8004e4a:	2181      	movs	r1, #129	; 0x81
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f004 fe98 	bl	8009b82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e58:	2340      	movs	r3, #64	; 0x40
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f004 fe8f 	bl	8009b82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e6c:	2308      	movs	r3, #8
 8004e6e:	2203      	movs	r2, #3
 8004e70:	2182      	movs	r1, #130	; 0x82
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f004 fe85 	bl	8009b82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e7e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e82:	f004 ffa5 	bl	8009dd0 <USBD_static_malloc>
 8004e86:	4602      	mov	r2, r0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	73fb      	strb	r3, [r7, #15]
 8004e9c:	e026      	b.n	8004eec <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ea4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	7c1b      	ldrb	r3, [r3, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f004 ff45 	bl	8009d64 <USBD_LL_PrepareReceive>
 8004eda:	e007      	b.n	8004eec <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ee2:	2340      	movs	r3, #64	; 0x40
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f004 ff3c 	bl	8009d64 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	460b      	mov	r3, r1
 8004f00:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004f06:	2181      	movs	r1, #129	; 0x81
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f004 fe60 	bl	8009bce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004f14:	2101      	movs	r1, #1
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f004 fe59 	bl	8009bce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004f24:	2182      	movs	r1, #130	; 0x82
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f004 fe51 	bl	8009bce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00e      	beq.n	8004f5a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f004 ff4b 	bl	8009de8 <USBD_static_free>
    pdev->pClassData = NULL;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f74:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d039      	beq.n	8005002 <USBD_CDC_Setup+0x9e>
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d17c      	bne.n	800508c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	88db      	ldrh	r3, [r3, #6]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d029      	beq.n	8004fee <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	b25b      	sxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	da11      	bge.n	8004fc8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004fb0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	88d2      	ldrh	r2, [r2, #6]
 8004fb6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004fb8:	6939      	ldr	r1, [r7, #16]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	88db      	ldrh	r3, [r3, #6]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 f9f9 	bl	80063b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004fc6:	e068      	b.n	800509a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	785a      	ldrb	r2, [r3, #1]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	88db      	ldrh	r3, [r3, #6]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004fde:	6939      	ldr	r1, [r7, #16]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	88db      	ldrh	r3, [r3, #6]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f001 fa14 	bl	8006414 <USBD_CtlPrepareRx>
      break;
 8004fec:	e055      	b.n	800509a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	7850      	ldrb	r0, [r2, #1]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	6839      	ldr	r1, [r7, #0]
 8004ffe:	4798      	blx	r3
      break;
 8005000:	e04b      	b.n	800509a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	785b      	ldrb	r3, [r3, #1]
 8005006:	2b0a      	cmp	r3, #10
 8005008:	d017      	beq.n	800503a <USBD_CDC_Setup+0xd6>
 800500a:	2b0b      	cmp	r3, #11
 800500c:	d029      	beq.n	8005062 <USBD_CDC_Setup+0xfe>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d133      	bne.n	800507a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005018:	2b03      	cmp	r3, #3
 800501a:	d107      	bne.n	800502c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800501c:	f107 030c 	add.w	r3, r7, #12
 8005020:	2202      	movs	r2, #2
 8005022:	4619      	mov	r1, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f001 f9c7 	bl	80063b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800502a:	e02e      	b.n	800508a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800502c:	6839      	ldr	r1, [r7, #0]
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 f958 	bl	80062e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005034:	2302      	movs	r3, #2
 8005036:	75fb      	strb	r3, [r7, #23]
          break;
 8005038:	e027      	b.n	800508a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005040:	2b03      	cmp	r3, #3
 8005042:	d107      	bne.n	8005054 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005044:	f107 030f 	add.w	r3, r7, #15
 8005048:	2201      	movs	r2, #1
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 f9b3 	bl	80063b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005052:	e01a      	b.n	800508a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005054:	6839      	ldr	r1, [r7, #0]
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 f944 	bl	80062e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800505c:	2302      	movs	r3, #2
 800505e:	75fb      	strb	r3, [r7, #23]
          break;
 8005060:	e013      	b.n	800508a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005068:	2b03      	cmp	r3, #3
 800506a:	d00d      	beq.n	8005088 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f001 f938 	bl	80062e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005074:	2302      	movs	r3, #2
 8005076:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005078:	e006      	b.n	8005088 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800507a:	6839      	ldr	r1, [r7, #0]
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f001 f931 	bl	80062e4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005082:	2302      	movs	r3, #2
 8005084:	75fb      	strb	r3, [r7, #23]
          break;
 8005086:	e000      	b.n	800508a <USBD_CDC_Setup+0x126>
          break;
 8005088:	bf00      	nop
      }
      break;
 800508a:	e006      	b.n	800509a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800508c:	6839      	ldr	r1, [r7, #0]
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f001 f928 	bl	80062e4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005094:	2302      	movs	r3, #2
 8005096:	75fb      	strb	r3, [r7, #23]
      break;
 8005098:	bf00      	nop
  }

  return ret;
 800509a:	7dfb      	ldrb	r3, [r7, #23]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050b6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050be:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d03a      	beq.n	8005140 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80050ca:	78fa      	ldrb	r2, [r7, #3]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	331c      	adds	r3, #28
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d029      	beq.n	8005134 <USBD_CDC_DataIn+0x90>
 80050e0:	78fa      	ldrb	r2, [r7, #3]
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	331c      	adds	r3, #28
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	78f9      	ldrb	r1, [r7, #3]
 80050f4:	68b8      	ldr	r0, [r7, #8]
 80050f6:	460b      	mov	r3, r1
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	4403      	add	r3, r0
 8005100:	3338      	adds	r3, #56	; 0x38
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	fbb2 f1f3 	udiv	r1, r2, r3
 8005108:	fb03 f301 	mul.w	r3, r3, r1
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d110      	bne.n	8005134 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005112:	78fa      	ldrb	r2, [r7, #3]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	331c      	adds	r3, #28
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005126:	78f9      	ldrb	r1, [r7, #3]
 8005128:	2300      	movs	r3, #0
 800512a:	2200      	movs	r2, #0
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f004 fdf6 	bl	8009d1e <USBD_LL_Transmit>
 8005132:	e003      	b.n	800513c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	e000      	b.n	8005142 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005140:	2302      	movs	r3, #2
  }
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	460b      	mov	r3, r1
 8005154:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800515c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	4619      	mov	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f004 fe21 	bl	8009daa <USBD_LL_GetRxDataSize>
 8005168:	4602      	mov	r2, r0
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00d      	beq.n	8005196 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800518e:	4611      	mov	r1, r2
 8005190:	4798      	blx	r3

    return USBD_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	e000      	b.n	8005198 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005196:	2302      	movs	r3, #2
  }
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d015      	beq.n	80051e6 <USBD_CDC_EP0_RxReady+0x46>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80051c0:	2bff      	cmp	r3, #255	; 0xff
 80051c2:	d010      	beq.n	80051e6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80051d2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051da:	b292      	uxth	r2, r2
 80051dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	22ff      	movs	r2, #255	; 0xff
 80051e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2243      	movs	r2, #67	; 0x43
 80051fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80051fe:	4b03      	ldr	r3, [pc, #12]	; (800520c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	20000094 	.word	0x20000094

08005210 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2243      	movs	r2, #67	; 0x43
 800521c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800521e:	4b03      	ldr	r3, [pc, #12]	; (800522c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	20000050 	.word	0x20000050

08005230 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2243      	movs	r2, #67	; 0x43
 800523c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800523e:	4b03      	ldr	r3, [pc, #12]	; (800524c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	200000d8 	.word	0x200000d8

08005250 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	220a      	movs	r2, #10
 800525c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800525e:	4b03      	ldr	r3, [pc, #12]	; (800526c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	2000000c 	.word	0x2000000c

08005270 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800527a:	2302      	movs	r3, #2
 800527c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005290:	7bfb      	ldrb	r3, [r7, #15]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr

0800529c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	4613      	mov	r3, r2
 80052a8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80052ba:	88fa      	ldrh	r2, [r7, #6]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr

080052ce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052de:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005302:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d01c      	beq.n	8005348 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005314:	2b00      	cmp	r3, #0
 8005316:	d115      	bne.n	8005344 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005336:	b29b      	uxth	r3, r3
 8005338:	2181      	movs	r1, #129	; 0x81
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f004 fcef 	bl	8009d1e <USBD_LL_Transmit>

      return USBD_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	e002      	b.n	800534a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005348:	2302      	movs	r3, #2
  }
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005360:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d017      	beq.n	800539c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	7c1b      	ldrb	r3, [r3, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d109      	bne.n	8005388 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800537a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800537e:	2101      	movs	r1, #1
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f004 fcef 	bl	8009d64 <USBD_LL_PrepareReceive>
 8005386:	e007      	b.n	8005398 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800538e:	2340      	movs	r3, #64	; 0x40
 8005390:	2101      	movs	r1, #1
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f004 fce6 	bl	8009d64 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	e000      	b.n	800539e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800539c:	2302      	movs	r3, #2
  }
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	4613      	mov	r3, r2
 80053b2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80053ba:	2302      	movs	r3, #2
 80053bc:	e01a      	b.n	80053f4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	79fa      	ldrb	r2, [r7, #7]
 80053ea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f004 fb53 	bl	8009a98 <USBD_LL_Init>

  return USBD_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d006      	beq.n	800541e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	73fb      	strb	r3, [r7, #15]
 800541c:	e001      	b.n	8005422 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800541e:	2302      	movs	r3, #2
 8005420:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005422:	7bfb      	ldrb	r3, [r7, #15]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f004 fb88 	bl	8009b4c <USBD_LL_Start>

  return USBD_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr

0800545a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005466:	2302      	movs	r3, #2
 8005468:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00c      	beq.n	800548e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	78fa      	ldrb	r2, [r7, #3]
 800547e:	4611      	mov	r1, r2
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	4798      	blx	r3
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800548e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	4611      	mov	r1, r2
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	4798      	blx	r3

  return USBD_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fecb 	bl	800626c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054e4:	461a      	mov	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d00c      	beq.n	8005514 <USBD_LL_SetupStage+0x56>
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d302      	bcc.n	8005504 <USBD_LL_SetupStage+0x46>
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d010      	beq.n	8005524 <USBD_LL_SetupStage+0x66>
 8005502:	e017      	b.n	8005534 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f9cb 	bl	80058a8 <USBD_StdDevReq>
      break;
 8005512:	e01a      	b.n	800554a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800551a:	4619      	mov	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fa2d 	bl	800597c <USBD_StdItfReq>
      break;
 8005522:	e012      	b.n	800554a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fa6b 	bl	8005a08 <USBD_StdEPReq>
      break;
 8005532:	e00a      	b.n	800554a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800553a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800553e:	b2db      	uxtb	r3, r3
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f004 fb62 	bl	8009c0c <USBD_LL_StallEP>
      break;
 8005548:	bf00      	nop
  }

  return USBD_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	460b      	mov	r3, r1
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005562:	7afb      	ldrb	r3, [r7, #11]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d14b      	bne.n	8005600 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800556e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005576:	2b03      	cmp	r3, #3
 8005578:	d134      	bne.n	80055e4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	429a      	cmp	r2, r3
 8005584:	d919      	bls.n	80055ba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	1ad2      	subs	r2, r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800559c:	429a      	cmp	r2, r3
 800559e:	d203      	bcs.n	80055a8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	e002      	b.n	80055ae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 ff4c 	bl	8006450 <USBD_CtlContinueRx>
 80055b8:	e038      	b.n	800562c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d105      	bne.n	80055dc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 ff49 	bl	8006474 <USBD_CtlSendStatus>
 80055e2:	e023      	b.n	800562c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055ea:	2b05      	cmp	r3, #5
 80055ec:	d11e      	bne.n	800562c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80055f6:	2100      	movs	r1, #0
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f004 fb07 	bl	8009c0c <USBD_LL_StallEP>
 80055fe:	e015      	b.n	800562c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00d      	beq.n	8005628 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005612:	2b03      	cmp	r3, #3
 8005614:	d108      	bne.n	8005628 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	7afa      	ldrb	r2, [r7, #11]
 8005620:	4611      	mov	r1, r2
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	4798      	blx	r3
 8005626:	e001      	b.n	800562c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005628:	2302      	movs	r3, #2
 800562a:	e000      	b.n	800562e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b086      	sub	sp, #24
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	460b      	mov	r3, r1
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005644:	7afb      	ldrb	r3, [r7, #11]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d17f      	bne.n	800574a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3314      	adds	r3, #20
 800564e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005656:	2b02      	cmp	r3, #2
 8005658:	d15c      	bne.n	8005714 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	429a      	cmp	r2, r3
 8005664:	d915      	bls.n	8005692 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	1ad2      	subs	r2, r2, r3
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	b29b      	uxth	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 feb6 	bl	80063f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005684:	2300      	movs	r3, #0
 8005686:	2200      	movs	r2, #0
 8005688:	2100      	movs	r1, #0
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f004 fb6a 	bl	8009d64 <USBD_LL_PrepareReceive>
 8005690:	e04e      	b.n	8005730 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	6912      	ldr	r2, [r2, #16]
 800569a:	fbb3 f1f2 	udiv	r1, r3, r2
 800569e:	fb02 f201 	mul.w	r2, r2, r1
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11c      	bne.n	80056e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d316      	bcc.n	80056e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80056be:	429a      	cmp	r2, r3
 80056c0:	d20f      	bcs.n	80056e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80056c2:	2200      	movs	r2, #0
 80056c4:	2100      	movs	r1, #0
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 fe92 	bl	80063f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056d4:	2300      	movs	r3, #0
 80056d6:	2200      	movs	r2, #0
 80056d8:	2100      	movs	r1, #0
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f004 fb42 	bl	8009d64 <USBD_LL_PrepareReceive>
 80056e0:	e026      	b.n	8005730 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d105      	bne.n	8005704 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005704:	2180      	movs	r1, #128	; 0x80
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f004 fa80 	bl	8009c0c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fec4 	bl	800649a <USBD_CtlReceiveStatus>
 8005712:	e00d      	b.n	8005730 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800571a:	2b04      	cmp	r3, #4
 800571c:	d004      	beq.n	8005728 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005724:	2b00      	cmp	r3, #0
 8005726:	d103      	bne.n	8005730 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005728:	2180      	movs	r1, #128	; 0x80
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f004 fa6e 	bl	8009c0c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005736:	2b01      	cmp	r3, #1
 8005738:	d11d      	bne.n	8005776 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff fe83 	bl	8005446 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005748:	e015      	b.n	8005776 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00d      	beq.n	8005772 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800575c:	2b03      	cmp	r3, #3
 800575e:	d108      	bne.n	8005772 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	7afa      	ldrb	r2, [r7, #11]
 800576a:	4611      	mov	r1, r2
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	4798      	blx	r3
 8005770:	e001      	b.n	8005776 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005772:	2302      	movs	r3, #2
 8005774:	e000      	b.n	8005778 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005788:	2340      	movs	r3, #64	; 0x40
 800578a:	2200      	movs	r2, #0
 800578c:	2100      	movs	r1, #0
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f004 f9f7 	bl	8009b82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2240      	movs	r2, #64	; 0x40
 80057a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057a4:	2340      	movs	r3, #64	; 0x40
 80057a6:	2200      	movs	r2, #0
 80057a8:	2180      	movs	r1, #128	; 0x80
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f004 f9e9 	bl	8009b82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2240      	movs	r2, #64	; 0x40
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d009      	beq.n	80057f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6852      	ldr	r2, [r2, #4]
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	4611      	mov	r1, r2
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	4798      	blx	r3
  }

  return USBD_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	460b      	mov	r3, r1
 800580c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr

08005820 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2204      	movs	r2, #4
 8005838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005856:	2b04      	cmp	r3, #4
 8005858:	d105      	bne.n	8005866 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr

08005872 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005880:	2b03      	cmp	r3, #3
 8005882:	d10b      	bne.n	800589c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d004      	beq.n	80058cc <USBD_StdDevReq+0x24>
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d002      	beq.n	80058cc <USBD_StdDevReq+0x24>
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <USBD_StdDevReq+0x34>
 80058ca:	e04c      	b.n	8005966 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	4798      	blx	r3
      break;
 80058da:	e049      	b.n	8005970 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	2b09      	cmp	r3, #9
 80058e2:	d83a      	bhi.n	800595a <USBD_StdDevReq+0xb2>
 80058e4:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <USBD_StdDevReq+0x44>)
 80058e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ea:	bf00      	nop
 80058ec:	0800593d 	.word	0x0800593d
 80058f0:	08005951 	.word	0x08005951
 80058f4:	0800595b 	.word	0x0800595b
 80058f8:	08005947 	.word	0x08005947
 80058fc:	0800595b 	.word	0x0800595b
 8005900:	0800591f 	.word	0x0800591f
 8005904:	08005915 	.word	0x08005915
 8005908:	0800595b 	.word	0x0800595b
 800590c:	08005933 	.word	0x08005933
 8005910:	08005929 	.word	0x08005929
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f9d4 	bl	8005cc4 <USBD_GetDescriptor>
          break;
 800591c:	e022      	b.n	8005964 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fb37 	bl	8005f94 <USBD_SetAddress>
          break;
 8005926:	e01d      	b.n	8005964 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fb74 	bl	8006018 <USBD_SetConfig>
          break;
 8005930:	e018      	b.n	8005964 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fbfd 	bl	8006134 <USBD_GetConfig>
          break;
 800593a:	e013      	b.n	8005964 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fc2c 	bl	800619c <USBD_GetStatus>
          break;
 8005944:	e00e      	b.n	8005964 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fc5a 	bl	8006202 <USBD_SetFeature>
          break;
 800594e:	e009      	b.n	8005964 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fc69 	bl	800622a <USBD_ClrFeature>
          break;
 8005958:	e004      	b.n	8005964 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800595a:	6839      	ldr	r1, [r7, #0]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fcc1 	bl	80062e4 <USBD_CtlError>
          break;
 8005962:	bf00      	nop
      }
      break;
 8005964:	e004      	b.n	8005970 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fcbb 	bl	80062e4 <USBD_CtlError>
      break;
 800596e:	bf00      	nop
  }

  return ret;
 8005970:	7bfb      	ldrb	r3, [r7, #15]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop

0800597c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005992:	2b20      	cmp	r3, #32
 8005994:	d003      	beq.n	800599e <USBD_StdItfReq+0x22>
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d001      	beq.n	800599e <USBD_StdItfReq+0x22>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d12a      	bne.n	80059f4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a4:	3b01      	subs	r3, #1
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d81d      	bhi.n	80059e6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	889b      	ldrh	r3, [r3, #4]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d813      	bhi.n	80059dc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	6839      	ldr	r1, [r7, #0]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	4798      	blx	r3
 80059c2:	4603      	mov	r3, r0
 80059c4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	88db      	ldrh	r3, [r3, #6]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d110      	bne.n	80059f0 <USBD_StdItfReq+0x74>
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10d      	bne.n	80059f0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fd4d 	bl	8006474 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80059da:	e009      	b.n	80059f0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fc80 	bl	80062e4 <USBD_CtlError>
          break;
 80059e4:	e004      	b.n	80059f0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fc7b 	bl	80062e4 <USBD_CtlError>
          break;
 80059ee:	e000      	b.n	80059f2 <USBD_StdItfReq+0x76>
          break;
 80059f0:	bf00      	nop
      }
      break;
 80059f2:	e004      	b.n	80059fe <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fc74 	bl	80062e4 <USBD_CtlError>
      break;
 80059fc:	bf00      	nop
  }

  return USBD_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	889b      	ldrh	r3, [r3, #4]
 8005a1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d004      	beq.n	8005a32 <USBD_StdEPReq+0x2a>
 8005a28:	2b40      	cmp	r3, #64	; 0x40
 8005a2a:	d002      	beq.n	8005a32 <USBD_StdEPReq+0x2a>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d008      	beq.n	8005a42 <USBD_StdEPReq+0x3a>
 8005a30:	e13d      	b.n	8005cae <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	6839      	ldr	r1, [r7, #0]
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	4798      	blx	r3
      break;
 8005a40:	e13a      	b.n	8005cb8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d10a      	bne.n	8005a64 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	4798      	blx	r3
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	e12a      	b.n	8005cba <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d03e      	beq.n	8005aea <USBD_StdEPReq+0xe2>
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d002      	beq.n	8005a76 <USBD_StdEPReq+0x6e>
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d070      	beq.n	8005b56 <USBD_StdEPReq+0x14e>
 8005a74:	e115      	b.n	8005ca2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d002      	beq.n	8005a86 <USBD_StdEPReq+0x7e>
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d015      	beq.n	8005ab0 <USBD_StdEPReq+0xa8>
 8005a84:	e02b      	b.n	8005ade <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a86:	7bbb      	ldrb	r3, [r7, #14]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00c      	beq.n	8005aa6 <USBD_StdEPReq+0x9e>
 8005a8c:	7bbb      	ldrb	r3, [r7, #14]
 8005a8e:	2b80      	cmp	r3, #128	; 0x80
 8005a90:	d009      	beq.n	8005aa6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a92:	7bbb      	ldrb	r3, [r7, #14]
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f004 f8b8 	bl	8009c0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a9c:	2180      	movs	r1, #128	; 0x80
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f004 f8b4 	bl	8009c0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005aa4:	e020      	b.n	8005ae8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005aa6:	6839      	ldr	r1, [r7, #0]
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fc1b 	bl	80062e4 <USBD_CtlError>
              break;
 8005aae:	e01b      	b.n	8005ae8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	885b      	ldrh	r3, [r3, #2]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10e      	bne.n	8005ad6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <USBD_StdEPReq+0xce>
 8005abe:	7bbb      	ldrb	r3, [r7, #14]
 8005ac0:	2b80      	cmp	r3, #128	; 0x80
 8005ac2:	d008      	beq.n	8005ad6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	88db      	ldrh	r3, [r3, #6]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005acc:	7bbb      	ldrb	r3, [r7, #14]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f004 f89b 	bl	8009c0c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fccc 	bl	8006474 <USBD_CtlSendStatus>

              break;
 8005adc:	e004      	b.n	8005ae8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fbff 	bl	80062e4 <USBD_CtlError>
              break;
 8005ae6:	bf00      	nop
          }
          break;
 8005ae8:	e0e0      	b.n	8005cac <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d002      	beq.n	8005afa <USBD_StdEPReq+0xf2>
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d015      	beq.n	8005b24 <USBD_StdEPReq+0x11c>
 8005af8:	e026      	b.n	8005b48 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005afa:	7bbb      	ldrb	r3, [r7, #14]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00c      	beq.n	8005b1a <USBD_StdEPReq+0x112>
 8005b00:	7bbb      	ldrb	r3, [r7, #14]
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d009      	beq.n	8005b1a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005b06:	7bbb      	ldrb	r3, [r7, #14]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f004 f87e 	bl	8009c0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005b10:	2180      	movs	r1, #128	; 0x80
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f004 f87a 	bl	8009c0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b18:	e01c      	b.n	8005b54 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005b1a:	6839      	ldr	r1, [r7, #0]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fbe1 	bl	80062e4 <USBD_CtlError>
              break;
 8005b22:	e017      	b.n	8005b54 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	885b      	ldrh	r3, [r3, #2]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d112      	bne.n	8005b52 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005b2c:	7bbb      	ldrb	r3, [r7, #14]
 8005b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005b36:	7bbb      	ldrb	r3, [r7, #14]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f004 f885 	bl	8009c4a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fc97 	bl	8006474 <USBD_CtlSendStatus>
              }
              break;
 8005b46:	e004      	b.n	8005b52 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fbca 	bl	80062e4 <USBD_CtlError>
              break;
 8005b50:	e000      	b.n	8005b54 <USBD_StdEPReq+0x14c>
              break;
 8005b52:	bf00      	nop
          }
          break;
 8005b54:	e0aa      	b.n	8005cac <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d002      	beq.n	8005b66 <USBD_StdEPReq+0x15e>
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d032      	beq.n	8005bca <USBD_StdEPReq+0x1c2>
 8005b64:	e097      	b.n	8005c96 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b66:	7bbb      	ldrb	r3, [r7, #14]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <USBD_StdEPReq+0x174>
 8005b6c:	7bbb      	ldrb	r3, [r7, #14]
 8005b6e:	2b80      	cmp	r3, #128	; 0x80
 8005b70:	d004      	beq.n	8005b7c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fbb5 	bl	80062e4 <USBD_CtlError>
                break;
 8005b7a:	e091      	b.n	8005ca0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	da0b      	bge.n	8005b9c <USBD_StdEPReq+0x194>
 8005b84:	7bbb      	ldrb	r3, [r7, #14]
 8005b86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	3310      	adds	r3, #16
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4413      	add	r3, r2
 8005b98:	3304      	adds	r3, #4
 8005b9a:	e00b      	b.n	8005bb4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b9c:	7bbb      	ldrb	r3, [r7, #14]
 8005b9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fbf8 	bl	80063b8 <USBD_CtlSendData>
              break;
 8005bc8:	e06a      	b.n	8005ca0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005bca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	da11      	bge.n	8005bf6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005bd2:	7bbb      	ldrb	r3, [r7, #14]
 8005bd4:	f003 020f 	and.w	r2, r3, #15
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	3318      	adds	r3, #24
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d117      	bne.n	8005c1c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fb78 	bl	80062e4 <USBD_CtlError>
                  break;
 8005bf4:	e054      	b.n	8005ca0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	f003 020f 	and.w	r2, r3, #15
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	440b      	add	r3, r1
 8005c08:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d104      	bne.n	8005c1c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fb65 	bl	80062e4 <USBD_CtlError>
                  break;
 8005c1a:	e041      	b.n	8005ca0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	da0b      	bge.n	8005c3c <USBD_StdEPReq+0x234>
 8005c24:	7bbb      	ldrb	r3, [r7, #14]
 8005c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	3310      	adds	r3, #16
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	3304      	adds	r3, #4
 8005c3a:	e00b      	b.n	8005c54 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c3c:	7bbb      	ldrb	r3, [r7, #14]
 8005c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	4413      	add	r3, r2
 8005c52:	3304      	adds	r3, #4
 8005c54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c56:	7bbb      	ldrb	r3, [r7, #14]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <USBD_StdEPReq+0x25a>
 8005c5c:	7bbb      	ldrb	r3, [r7, #14]
 8005c5e:	2b80      	cmp	r3, #128	; 0x80
 8005c60:	d103      	bne.n	8005c6a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	e00e      	b.n	8005c88 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005c6a:	7bbb      	ldrb	r3, [r7, #14]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f004 f80a 	bl	8009c88 <USBD_LL_IsStallEP>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	e002      	b.n	8005c88 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fb92 	bl	80063b8 <USBD_CtlSendData>
              break;
 8005c94:	e004      	b.n	8005ca0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005c96:	6839      	ldr	r1, [r7, #0]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fb23 	bl	80062e4 <USBD_CtlError>
              break;
 8005c9e:	bf00      	nop
          }
          break;
 8005ca0:	e004      	b.n	8005cac <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fb1d 	bl	80062e4 <USBD_CtlError>
          break;
 8005caa:	bf00      	nop
      }
      break;
 8005cac:	e004      	b.n	8005cb8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fb17 	bl	80062e4 <USBD_CtlError>
      break;
 8005cb6:	bf00      	nop
  }

  return ret;
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	885b      	ldrh	r3, [r3, #2]
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	2b06      	cmp	r3, #6
 8005ce6:	f200 8128 	bhi.w	8005f3a <USBD_GetDescriptor+0x276>
 8005cea:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <USBD_GetDescriptor+0x2c>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005d0d 	.word	0x08005d0d
 8005cf4:	08005d25 	.word	0x08005d25
 8005cf8:	08005d65 	.word	0x08005d65
 8005cfc:	08005f3b 	.word	0x08005f3b
 8005d00:	08005f3b 	.word	0x08005f3b
 8005d04:	08005edb 	.word	0x08005edb
 8005d08:	08005f07 	.word	0x08005f07
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	7c12      	ldrb	r2, [r2, #16]
 8005d18:	f107 0108 	add.w	r1, r7, #8
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
 8005d20:	60f8      	str	r0, [r7, #12]
      break;
 8005d22:	e112      	b.n	8005f4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	7c1b      	ldrb	r3, [r3, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10d      	bne.n	8005d48 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	f107 0208 	add.w	r2, r7, #8
 8005d38:	4610      	mov	r0, r2
 8005d3a:	4798      	blx	r3
 8005d3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3301      	adds	r3, #1
 8005d42:	2202      	movs	r2, #2
 8005d44:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005d46:	e100      	b.n	8005f4a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	f107 0208 	add.w	r2, r7, #8
 8005d54:	4610      	mov	r0, r2
 8005d56:	4798      	blx	r3
 8005d58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	2202      	movs	r2, #2
 8005d60:	701a      	strb	r2, [r3, #0]
      break;
 8005d62:	e0f2      	b.n	8005f4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	885b      	ldrh	r3, [r3, #2]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b05      	cmp	r3, #5
 8005d6c:	f200 80ac 	bhi.w	8005ec8 <USBD_GetDescriptor+0x204>
 8005d70:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <USBD_GetDescriptor+0xb4>)
 8005d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d76:	bf00      	nop
 8005d78:	08005d91 	.word	0x08005d91
 8005d7c:	08005dc5 	.word	0x08005dc5
 8005d80:	08005df9 	.word	0x08005df9
 8005d84:	08005e2d 	.word	0x08005e2d
 8005d88:	08005e61 	.word	0x08005e61
 8005d8c:	08005e95 	.word	0x08005e95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	7c12      	ldrb	r2, [r2, #16]
 8005da8:	f107 0108 	add.w	r1, r7, #8
 8005dac:	4610      	mov	r0, r2
 8005dae:	4798      	blx	r3
 8005db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005db2:	e091      	b.n	8005ed8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005db4:	6839      	ldr	r1, [r7, #0]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa94 	bl	80062e4 <USBD_CtlError>
            err++;
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8005dc2:	e089      	b.n	8005ed8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00b      	beq.n	8005de8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	7c12      	ldrb	r2, [r2, #16]
 8005ddc:	f107 0108 	add.w	r1, r7, #8
 8005de0:	4610      	mov	r0, r2
 8005de2:	4798      	blx	r3
 8005de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005de6:	e077      	b.n	8005ed8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa7a 	bl	80062e4 <USBD_CtlError>
            err++;
 8005df0:	7afb      	ldrb	r3, [r7, #11]
 8005df2:	3301      	adds	r3, #1
 8005df4:	72fb      	strb	r3, [r7, #11]
          break;
 8005df6:	e06f      	b.n	8005ed8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	7c12      	ldrb	r2, [r2, #16]
 8005e10:	f107 0108 	add.w	r1, r7, #8
 8005e14:	4610      	mov	r0, r2
 8005e16:	4798      	blx	r3
 8005e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e1a:	e05d      	b.n	8005ed8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fa60 	bl	80062e4 <USBD_CtlError>
            err++;
 8005e24:	7afb      	ldrb	r3, [r7, #11]
 8005e26:	3301      	adds	r3, #1
 8005e28:	72fb      	strb	r3, [r7, #11]
          break;
 8005e2a:	e055      	b.n	8005ed8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	7c12      	ldrb	r2, [r2, #16]
 8005e44:	f107 0108 	add.w	r1, r7, #8
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4798      	blx	r3
 8005e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e4e:	e043      	b.n	8005ed8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fa46 	bl	80062e4 <USBD_CtlError>
            err++;
 8005e58:	7afb      	ldrb	r3, [r7, #11]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e5e:	e03b      	b.n	8005ed8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	7c12      	ldrb	r2, [r2, #16]
 8005e78:	f107 0108 	add.w	r1, r7, #8
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4798      	blx	r3
 8005e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e82:	e029      	b.n	8005ed8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fa2c 	bl	80062e4 <USBD_CtlError>
            err++;
 8005e8c:	7afb      	ldrb	r3, [r7, #11]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	72fb      	strb	r3, [r7, #11]
          break;
 8005e92:	e021      	b.n	8005ed8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00b      	beq.n	8005eb8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	7c12      	ldrb	r2, [r2, #16]
 8005eac:	f107 0108 	add.w	r1, r7, #8
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	4798      	blx	r3
 8005eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005eb6:	e00f      	b.n	8005ed8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fa12 	bl	80062e4 <USBD_CtlError>
            err++;
 8005ec0:	7afb      	ldrb	r3, [r7, #11]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ec6:	e007      	b.n	8005ed8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fa0a 	bl	80062e4 <USBD_CtlError>
          err++;
 8005ed0:	7afb      	ldrb	r3, [r7, #11]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005ed6:	e038      	b.n	8005f4a <USBD_GetDescriptor+0x286>
 8005ed8:	e037      	b.n	8005f4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	7c1b      	ldrb	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eea:	f107 0208 	add.w	r2, r7, #8
 8005eee:	4610      	mov	r0, r2
 8005ef0:	4798      	blx	r3
 8005ef2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ef4:	e029      	b.n	8005f4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f9f3 	bl	80062e4 <USBD_CtlError>
        err++;
 8005efe:	7afb      	ldrb	r3, [r7, #11]
 8005f00:	3301      	adds	r3, #1
 8005f02:	72fb      	strb	r3, [r7, #11]
      break;
 8005f04:	e021      	b.n	8005f4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7c1b      	ldrb	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10d      	bne.n	8005f2a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	f107 0208 	add.w	r2, r7, #8
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	4798      	blx	r3
 8005f1e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3301      	adds	r3, #1
 8005f24:	2207      	movs	r2, #7
 8005f26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f28:	e00f      	b.n	8005f4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f9d9 	bl	80062e4 <USBD_CtlError>
        err++;
 8005f32:	7afb      	ldrb	r3, [r7, #11]
 8005f34:	3301      	adds	r3, #1
 8005f36:	72fb      	strb	r3, [r7, #11]
      break;
 8005f38:	e007      	b.n	8005f4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f9d1 	bl	80062e4 <USBD_CtlError>
      err++;
 8005f42:	7afb      	ldrb	r3, [r7, #11]
 8005f44:	3301      	adds	r3, #1
 8005f46:	72fb      	strb	r3, [r7, #11]
      break;
 8005f48:	bf00      	nop
  }

  if (err != 0U)
 8005f4a:	7afb      	ldrb	r3, [r7, #11]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d11c      	bne.n	8005f8a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005f50:	893b      	ldrh	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d011      	beq.n	8005f7a <USBD_GetDescriptor+0x2b6>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	88db      	ldrh	r3, [r3, #6]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00d      	beq.n	8005f7a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	88da      	ldrh	r2, [r3, #6]
 8005f62:	893b      	ldrh	r3, [r7, #8]
 8005f64:	4293      	cmp	r3, r2
 8005f66:	bf28      	it	cs
 8005f68:	4613      	movcs	r3, r2
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f6e:	893b      	ldrh	r3, [r7, #8]
 8005f70:	461a      	mov	r2, r3
 8005f72:	68f9      	ldr	r1, [r7, #12]
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fa1f 	bl	80063b8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	88db      	ldrh	r3, [r3, #6]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d104      	bne.n	8005f8c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fa76 	bl	8006474 <USBD_CtlSendStatus>
 8005f88:	e000      	b.n	8005f8c <USBD_GetDescriptor+0x2c8>
    return;
 8005f8a:	bf00      	nop
    }
  }
}
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop

08005f94 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	889b      	ldrh	r3, [r3, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d130      	bne.n	8006008 <USBD_SetAddress+0x74>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	88db      	ldrh	r3, [r3, #6]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d12c      	bne.n	8006008 <USBD_SetAddress+0x74>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	885b      	ldrh	r3, [r3, #2]
 8005fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fb4:	d828      	bhi.n	8006008 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	885b      	ldrh	r3, [r3, #2]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d104      	bne.n	8005fd6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f988 	bl	80062e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd4:	e01c      	b.n	8006010 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	7bfa      	ldrb	r2, [r7, #15]
 8005fda:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f003 fe7c 	bl	8009ce0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fa43 	bl	8006474 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d004      	beq.n	8005ffe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ffc:	e008      	b.n	8006010 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006006:	e003      	b.n	8006010 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f96a 	bl	80062e4 <USBD_CtlError>
  }
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	885b      	ldrh	r3, [r3, #2]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	4b41      	ldr	r3, [pc, #260]	; (8006130 <USBD_SetConfig+0x118>)
 800602a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800602c:	4b40      	ldr	r3, [pc, #256]	; (8006130 <USBD_SetConfig+0x118>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d904      	bls.n	800603e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f954 	bl	80062e4 <USBD_CtlError>
 800603c:	e075      	b.n	800612a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006044:	2b02      	cmp	r3, #2
 8006046:	d002      	beq.n	800604e <USBD_SetConfig+0x36>
 8006048:	2b03      	cmp	r3, #3
 800604a:	d023      	beq.n	8006094 <USBD_SetConfig+0x7c>
 800604c:	e062      	b.n	8006114 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800604e:	4b38      	ldr	r3, [pc, #224]	; (8006130 <USBD_SetConfig+0x118>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01a      	beq.n	800608c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006056:	4b36      	ldr	r3, [pc, #216]	; (8006130 <USBD_SetConfig+0x118>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2203      	movs	r2, #3
 8006064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006068:	4b31      	ldr	r3, [pc, #196]	; (8006130 <USBD_SetConfig+0x118>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff f9f3 	bl	800545a <USBD_SetClassConfig>
 8006074:	4603      	mov	r3, r0
 8006076:	2b02      	cmp	r3, #2
 8006078:	d104      	bne.n	8006084 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f931 	bl	80062e4 <USBD_CtlError>
            return;
 8006082:	e052      	b.n	800612a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f9f5 	bl	8006474 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800608a:	e04e      	b.n	800612a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f9f1 	bl	8006474 <USBD_CtlSendStatus>
        break;
 8006092:	e04a      	b.n	800612a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006094:	4b26      	ldr	r3, [pc, #152]	; (8006130 <USBD_SetConfig+0x118>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d112      	bne.n	80060c2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80060a4:	4b22      	ldr	r3, [pc, #136]	; (8006130 <USBD_SetConfig+0x118>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80060ae:	4b20      	ldr	r3, [pc, #128]	; (8006130 <USBD_SetConfig+0x118>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff f9ef 	bl	8005498 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f9da 	bl	8006474 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80060c0:	e033      	b.n	800612a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80060c2:	4b1b      	ldr	r3, [pc, #108]	; (8006130 <USBD_SetConfig+0x118>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d01d      	beq.n	800610c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff f9dd 	bl	8005498 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80060de:	4b14      	ldr	r3, [pc, #80]	; (8006130 <USBD_SetConfig+0x118>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80060e8:	4b11      	ldr	r3, [pc, #68]	; (8006130 <USBD_SetConfig+0x118>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff f9b3 	bl	800545a <USBD_SetClassConfig>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d104      	bne.n	8006104 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f8f1 	bl	80062e4 <USBD_CtlError>
            return;
 8006102:	e012      	b.n	800612a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f9b5 	bl	8006474 <USBD_CtlSendStatus>
        break;
 800610a:	e00e      	b.n	800612a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f9b1 	bl	8006474 <USBD_CtlSendStatus>
        break;
 8006112:	e00a      	b.n	800612a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f8e4 	bl	80062e4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800611c:	4b04      	ldr	r3, [pc, #16]	; (8006130 <USBD_SetConfig+0x118>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7ff f9b8 	bl	8005498 <USBD_ClrClassConfig>
        break;
 8006128:	bf00      	nop
    }
  }
}
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	2000019c 	.word	0x2000019c

08006134 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	88db      	ldrh	r3, [r3, #6]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d004      	beq.n	8006150 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f8cb 	bl	80062e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800614e:	e021      	b.n	8006194 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006156:	2b01      	cmp	r3, #1
 8006158:	db17      	blt.n	800618a <USBD_GetConfig+0x56>
 800615a:	2b02      	cmp	r3, #2
 800615c:	dd02      	ble.n	8006164 <USBD_GetConfig+0x30>
 800615e:	2b03      	cmp	r3, #3
 8006160:	d00b      	beq.n	800617a <USBD_GetConfig+0x46>
 8006162:	e012      	b.n	800618a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3308      	adds	r3, #8
 800616e:	2201      	movs	r2, #1
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f920 	bl	80063b8 <USBD_CtlSendData>
        break;
 8006178:	e00c      	b.n	8006194 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3304      	adds	r3, #4
 800617e:	2201      	movs	r2, #1
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f918 	bl	80063b8 <USBD_CtlSendData>
        break;
 8006188:	e004      	b.n	8006194 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f8a9 	bl	80062e4 <USBD_CtlError>
        break;
 8006192:	bf00      	nop
}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ac:	3b01      	subs	r3, #1
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d81e      	bhi.n	80061f0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	88db      	ldrh	r3, [r3, #6]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d004      	beq.n	80061c4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f891 	bl	80062e4 <USBD_CtlError>
        break;
 80061c2:	e01a      	b.n	80061fa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f043 0202 	orr.w	r2, r3, #2
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	330c      	adds	r3, #12
 80061e4:	2202      	movs	r2, #2
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f8e5 	bl	80063b8 <USBD_CtlSendData>
      break;
 80061ee:	e004      	b.n	80061fa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f876 	bl	80062e4 <USBD_CtlError>
      break;
 80061f8:	bf00      	nop
  }
}
 80061fa:	bf00      	nop
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	885b      	ldrh	r3, [r3, #2]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d106      	bne.n	8006222 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f929 	bl	8006474 <USBD_CtlSendStatus>
  }
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800623a:	3b01      	subs	r3, #1
 800623c:	2b02      	cmp	r3, #2
 800623e:	d80b      	bhi.n	8006258 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	885b      	ldrh	r3, [r3, #2]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d10c      	bne.n	8006262 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f90f 	bl	8006474 <USBD_CtlSendStatus>
      }
      break;
 8006256:	e004      	b.n	8006262 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f842 	bl	80062e4 <USBD_CtlError>
      break;
 8006260:	e000      	b.n	8006264 <USBD_ClrFeature+0x3a>
      break;
 8006262:	bf00      	nop
  }
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781a      	ldrb	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	785a      	ldrb	r2, [r3, #1]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	3302      	adds	r3, #2
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	b29a      	uxth	r2, r3
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	3303      	adds	r3, #3
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	b29b      	uxth	r3, r3
 800629a:	4413      	add	r3, r2
 800629c:	b29a      	uxth	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	3304      	adds	r3, #4
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	3305      	adds	r3, #5
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	021b      	lsls	r3, r3, #8
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	4413      	add	r3, r2
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	3306      	adds	r3, #6
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	3307      	adds	r3, #7
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	021b      	lsls	r3, r3, #8
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	4413      	add	r3, r2
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	80da      	strh	r2, [r3, #6]

}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr

080062e4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80062ee:	2180      	movs	r1, #128	; 0x80
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f003 fc8b 	bl	8009c0c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80062f6:	2100      	movs	r1, #0
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f003 fc87 	bl	8009c0c <USBD_LL_StallEP>
}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b086      	sub	sp, #24
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d032      	beq.n	8006382 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f834 	bl	800638a <USBD_GetLen>
 8006322:	4603      	mov	r3, r0
 8006324:	3301      	adds	r3, #1
 8006326:	b29b      	uxth	r3, r3
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	75fa      	strb	r2, [r7, #23]
 8006336:	461a      	mov	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4413      	add	r3, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	7812      	ldrb	r2, [r2, #0]
 8006340:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006342:	7dfb      	ldrb	r3, [r7, #23]
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	75fa      	strb	r2, [r7, #23]
 8006348:	461a      	mov	r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4413      	add	r3, r2
 800634e:	2203      	movs	r2, #3
 8006350:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006352:	e012      	b.n	800637a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	60fa      	str	r2, [r7, #12]
 800635a:	7dfa      	ldrb	r2, [r7, #23]
 800635c:	1c51      	adds	r1, r2, #1
 800635e:	75f9      	strb	r1, [r7, #23]
 8006360:	4611      	mov	r1, r2
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	440a      	add	r2, r1
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	75fa      	strb	r2, [r7, #23]
 8006370:	461a      	mov	r2, r3
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	4413      	add	r3, r2
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e8      	bne.n	8006354 <USBD_GetString+0x4e>
    }
  }
}
 8006382:	bf00      	nop
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006396:	e005      	b.n	80063a4 <USBD_GetLen+0x1a>
  {
    len++;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	3301      	adds	r3, #1
 800639c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3301      	adds	r3, #1
 80063a2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1f5      	bne.n	8006398 <USBD_GetLen+0xe>
  }

  return len;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr

080063b8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2202      	movs	r2, #2
 80063ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80063ce:	88fa      	ldrh	r2, [r7, #6]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80063d4:	88fa      	ldrh	r2, [r7, #6]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	2100      	movs	r1, #0
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f003 fc9c 	bl	8009d1e <USBD_LL_Transmit>

  return USBD_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	4613      	mov	r3, r2
 80063fc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063fe:	88fb      	ldrh	r3, [r7, #6]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	2100      	movs	r1, #0
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f003 fc8a 	bl	8009d1e <USBD_LL_Transmit>

  return USBD_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	4613      	mov	r3, r2
 8006420:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2203      	movs	r2, #3
 8006426:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006432:	88fa      	ldrh	r2, [r7, #6]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800643a:	88fb      	ldrh	r3, [r7, #6]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	2100      	movs	r1, #0
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f003 fc8f 	bl	8009d64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	4613      	mov	r3, r2
 800645c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	2100      	movs	r1, #0
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f003 fc7d 	bl	8009d64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2204      	movs	r2, #4
 8006480:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006484:	2300      	movs	r3, #0
 8006486:	2200      	movs	r2, #0
 8006488:	2100      	movs	r1, #0
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f003 fc47 	bl	8009d1e <USBD_LL_Transmit>

  return USBD_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2205      	movs	r2, #5
 80064a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064aa:	2300      	movs	r3, #0
 80064ac:	2200      	movs	r2, #0
 80064ae:	2100      	movs	r1, #0
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f003 fc57 	bl	8009d64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c6:	f3ef 8305 	mrs	r3, IPSR
 80064ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80064cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10f      	bne.n	80064f2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d2:	f3ef 8310 	mrs	r3, PRIMASK
 80064d6:	607b      	str	r3, [r7, #4]
  return(result);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <osKernelInitialize+0x32>
 80064de:	4b10      	ldr	r3, [pc, #64]	; (8006520 <osKernelInitialize+0x60>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d109      	bne.n	80064fa <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064e6:	f3ef 8311 	mrs	r3, BASEPRI
 80064ea:	603b      	str	r3, [r7, #0]
  return(result);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80064f2:	f06f 0305 	mvn.w	r3, #5
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	e00c      	b.n	8006514 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064fa:	4b09      	ldr	r3, [pc, #36]	; (8006520 <osKernelInitialize+0x60>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d105      	bne.n	800650e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006502:	4b07      	ldr	r3, [pc, #28]	; (8006520 <osKernelInitialize+0x60>)
 8006504:	2201      	movs	r2, #1
 8006506:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	e002      	b.n	8006514 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800650e:	f04f 33ff 	mov.w	r3, #4294967295
 8006512:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006514:	68fb      	ldr	r3, [r7, #12]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr
 8006520:	200001a0 	.word	0x200001a0

08006524 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800652a:	f3ef 8305 	mrs	r3, IPSR
 800652e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006530:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10f      	bne.n	8006556 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006536:	f3ef 8310 	mrs	r3, PRIMASK
 800653a:	607b      	str	r3, [r7, #4]
  return(result);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d109      	bne.n	8006556 <osKernelStart+0x32>
 8006542:	4b11      	ldr	r3, [pc, #68]	; (8006588 <osKernelStart+0x64>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d109      	bne.n	800655e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800654a:	f3ef 8311 	mrs	r3, BASEPRI
 800654e:	603b      	str	r3, [r7, #0]
  return(result);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006556:	f06f 0305 	mvn.w	r3, #5
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	e00e      	b.n	800657c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800655e:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <osKernelStart+0x64>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d107      	bne.n	8006576 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006566:	4b08      	ldr	r3, [pc, #32]	; (8006588 <osKernelStart+0x64>)
 8006568:	2202      	movs	r2, #2
 800656a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800656c:	f001 fac2 	bl	8007af4 <vTaskStartScheduler>
      stat = osOK;
 8006570:	2300      	movs	r3, #0
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e002      	b.n	800657c <osKernelStart+0x58>
    } else {
      stat = osError;
 8006576:	f04f 33ff 	mov.w	r3, #4294967295
 800657a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800657c:	68fb      	ldr	r3, [r7, #12]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	200001a0 	.word	0x200001a0

0800658c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b092      	sub	sp, #72	; 0x48
 8006590:	af04      	add	r7, sp, #16
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800659c:	f3ef 8305 	mrs	r3, IPSR
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f040 8094 	bne.w	80066d2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065aa:	f3ef 8310 	mrs	r3, PRIMASK
 80065ae:	623b      	str	r3, [r7, #32]
  return(result);
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f040 808d 	bne.w	80066d2 <osThreadNew+0x146>
 80065b8:	4b48      	ldr	r3, [pc, #288]	; (80066dc <osThreadNew+0x150>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d106      	bne.n	80065ce <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065c0:	f3ef 8311 	mrs	r3, BASEPRI
 80065c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f040 8082 	bne.w	80066d2 <osThreadNew+0x146>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d07e      	beq.n	80066d2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80065d4:	2380      	movs	r3, #128	; 0x80
 80065d6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80065d8:	2318      	movs	r3, #24
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80065dc:	2300      	movs	r3, #0
 80065de:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80065e0:	f107 031b 	add.w	r3, r7, #27
 80065e4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80065e6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d045      	beq.n	800667e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <osThreadNew+0x74>
        name = attr->name;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	2b00      	cmp	r3, #0
 8006612:	d008      	beq.n	8006626 <osThreadNew+0x9a>
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	2b38      	cmp	r3, #56	; 0x38
 8006618:	d805      	bhi.n	8006626 <osThreadNew+0x9a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <osThreadNew+0x9e>
        return (NULL);
 8006626:	2300      	movs	r3, #0
 8006628:	e054      	b.n	80066d4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	089b      	lsrs	r3, r3, #2
 8006638:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00e      	beq.n	8006660 <osThreadNew+0xd4>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	2b73      	cmp	r3, #115	; 0x73
 8006648:	d90a      	bls.n	8006660 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800664e:	2b00      	cmp	r3, #0
 8006650:	d006      	beq.n	8006660 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <osThreadNew+0xd4>
        mem = 1;
 800665a:	2301      	movs	r3, #1
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
 800665e:	e010      	b.n	8006682 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10c      	bne.n	8006682 <osThreadNew+0xf6>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d108      	bne.n	8006682 <osThreadNew+0xf6>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <osThreadNew+0xf6>
          mem = 0;
 8006678:	2300      	movs	r3, #0
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
 800667c:	e001      	b.n	8006682 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800667e:	2300      	movs	r3, #0
 8006680:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	2b01      	cmp	r3, #1
 8006686:	d110      	bne.n	80066aa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006690:	9202      	str	r2, [sp, #8]
 8006692:	9301      	str	r3, [sp, #4]
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 ffe8 	bl	8007674 <xTaskCreateStatic>
 80066a4:	4603      	mov	r3, r0
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	e013      	b.n	80066d2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d110      	bne.n	80066d2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f107 0314 	add.w	r3, r7, #20
 80066b8:	9301      	str	r3, [sp, #4]
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f001 f82f 	bl	8007726 <xTaskCreate>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d001      	beq.n	80066d2 <osThreadNew+0x146>
          hTask = NULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066d2:	697b      	ldr	r3, [r7, #20]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3738      	adds	r7, #56	; 0x38
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	200001a0 	.word	0x200001a0

080066e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066e8:	f3ef 8305 	mrs	r3, IPSR
 80066ec:	613b      	str	r3, [r7, #16]
  return(result);
 80066ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10f      	bne.n	8006714 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066f4:	f3ef 8310 	mrs	r3, PRIMASK
 80066f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d109      	bne.n	8006714 <osDelay+0x34>
 8006700:	4b0d      	ldr	r3, [pc, #52]	; (8006738 <osDelay+0x58>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d109      	bne.n	800671c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006708:	f3ef 8311 	mrs	r3, BASEPRI
 800670c:	60bb      	str	r3, [r7, #8]
  return(result);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <osDelay+0x3c>
    stat = osErrorISR;
 8006714:	f06f 0305 	mvn.w	r3, #5
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	e007      	b.n	800672c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800671c:	2300      	movs	r3, #0
 800671e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 f9b0 	bl	8007a8c <vTaskDelay>
    }
  }

  return (stat);
 800672c:	697b      	ldr	r3, [r7, #20]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	200001a0 	.word	0x200001a0

0800673c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4a06      	ldr	r2, [pc, #24]	; (8006764 <vApplicationGetIdleTaskMemory+0x28>)
 800674c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	4a05      	ldr	r2, [pc, #20]	; (8006768 <vApplicationGetIdleTaskMemory+0x2c>)
 8006752:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2280      	movs	r2, #128	; 0x80
 8006758:	601a      	str	r2, [r3, #0]
}
 800675a:	bf00      	nop
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr
 8006764:	200001a4 	.word	0x200001a4
 8006768:	20000218 	.word	0x20000218

0800676c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4a07      	ldr	r2, [pc, #28]	; (8006798 <vApplicationGetTimerTaskMemory+0x2c>)
 800677c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4a06      	ldr	r2, [pc, #24]	; (800679c <vApplicationGetTimerTaskMemory+0x30>)
 8006782:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800678a:	601a      	str	r2, [r3, #0]
}
 800678c:	bf00      	nop
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	bc80      	pop	{r7}
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20000418 	.word	0x20000418
 800679c:	2000048c 	.word	0x2000048c

080067a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f103 0208 	add.w	r2, r3, #8
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f04f 32ff 	mov.w	r2, #4294967295
 80067b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f103 0208 	add.w	r2, r3, #8
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f103 0208 	add.w	r2, r3, #8
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc80      	pop	{r7}
 80067dc:	4770      	bx	lr

080067de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	601a      	str	r2, [r3, #0]
}
 8006832:	bf00      	nop
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr

0800683c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	d103      	bne.n	800685c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	e00c      	b.n	8006876 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3308      	adds	r3, #8
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e002      	b.n	800686a <vListInsert+0x2e>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	429a      	cmp	r2, r3
 8006874:	d2f6      	bcs.n	8006864 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	601a      	str	r2, [r3, #0]
}
 80068a2:	bf00      	nop
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr

080068ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6892      	ldr	r2, [r2, #8]
 80068c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	6852      	ldr	r2, [r2, #4]
 80068cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d103      	bne.n	80068e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	1e5a      	subs	r2, r3, #1
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr
	...

08006900 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d109      	bne.n	8006928 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	e7fe      	b.n	8006926 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006928:	f002 fb16 	bl	8008f58 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006934:	68f9      	ldr	r1, [r7, #12]
 8006936:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006938:	fb01 f303 	mul.w	r3, r1, r3
 800693c:	441a      	add	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006958:	3b01      	subs	r3, #1
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800695e:	fb01 f303 	mul.w	r3, r1, r3
 8006962:	441a      	add	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	22ff      	movs	r2, #255	; 0xff
 800696c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	22ff      	movs	r2, #255	; 0xff
 8006974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d114      	bne.n	80069a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01a      	beq.n	80069bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3310      	adds	r3, #16
 800698a:	4618      	mov	r0, r3
 800698c:	f001 fb54 	bl	8008038 <xTaskRemoveFromEventList>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d012      	beq.n	80069bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006996:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <xQueueGenericReset+0xcc>)
 8006998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	e009      	b.n	80069bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3310      	adds	r3, #16
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff fef7 	bl	80067a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3324      	adds	r3, #36	; 0x24
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff fef2 	bl	80067a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069bc:	f002 fafa 	bl	8008fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069c0:	2301      	movs	r3, #1
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	e000ed04 	.word	0xe000ed04

080069d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08e      	sub	sp, #56	; 0x38
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d109      	bne.n	80069f8 <xQueueGenericCreateStatic+0x28>
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f6:	e7fe      	b.n	80069f6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d109      	bne.n	8006a12 <xQueueGenericCreateStatic+0x42>
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a10:	e7fe      	b.n	8006a10 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <xQueueGenericCreateStatic+0x4e>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <xQueueGenericCreateStatic+0x52>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <xQueueGenericCreateStatic+0x54>
 8006a22:	2300      	movs	r3, #0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d109      	bne.n	8006a3c <xQueueGenericCreateStatic+0x6c>
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	623b      	str	r3, [r7, #32]
 8006a3a:	e7fe      	b.n	8006a3a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d102      	bne.n	8006a48 <xQueueGenericCreateStatic+0x78>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <xQueueGenericCreateStatic+0x7c>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <xQueueGenericCreateStatic+0x7e>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d109      	bne.n	8006a66 <xQueueGenericCreateStatic+0x96>
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	e7fe      	b.n	8006a64 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a66:	2350      	movs	r3, #80	; 0x50
 8006a68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b50      	cmp	r3, #80	; 0x50
 8006a6e:	d009      	beq.n	8006a84 <xQueueGenericCreateStatic+0xb4>
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	e7fe      	b.n	8006a82 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00d      	beq.n	8006aaa <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f842 	bl	8006b2e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3730      	adds	r7, #48	; 0x30
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08a      	sub	sp, #40	; 0x28
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d109      	bne.n	8006adc <xQueueGenericCreate+0x28>
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	e7fe      	b.n	8006ada <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d102      	bne.n	8006ae8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	e004      	b.n	8006af2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	fb02 f303 	mul.w	r3, r2, r3
 8006af0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	3350      	adds	r3, #80	; 0x50
 8006af6:	4618      	mov	r0, r3
 8006af8:	f002 fb24 	bl	8009144 <pvPortMalloc>
 8006afc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00f      	beq.n	8006b24 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	3350      	adds	r3, #80	; 0x50
 8006b08:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b12:	79fa      	ldrb	r2, [r7, #7]
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 f805 	bl	8006b2e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006b24:	69bb      	ldr	r3, [r7, #24]
	}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3720      	adds	r7, #32
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	607a      	str	r2, [r7, #4]
 8006b3a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d103      	bne.n	8006b4a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	e002      	b.n	8006b50 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	69b8      	ldr	r0, [r7, #24]
 8006b60:	f7ff fece 	bl	8006900 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	78fa      	ldrb	r2, [r7, #3]
 8006b68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08e      	sub	sp, #56	; 0x38
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
 8006b80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b82:	2300      	movs	r3, #0
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d109      	bne.n	8006ba4 <xQueueGenericSend+0x30>
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ba2:	e7fe      	b.n	8006ba2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d103      	bne.n	8006bb2 <xQueueGenericSend+0x3e>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <xQueueGenericSend+0x42>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e000      	b.n	8006bb8 <xQueueGenericSend+0x44>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d109      	bne.n	8006bd0 <xQueueGenericSend+0x5c>
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bce:	e7fe      	b.n	8006bce <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d103      	bne.n	8006bde <xQueueGenericSend+0x6a>
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d101      	bne.n	8006be2 <xQueueGenericSend+0x6e>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e000      	b.n	8006be4 <xQueueGenericSend+0x70>
 8006be2:	2300      	movs	r3, #0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d109      	bne.n	8006bfc <xQueueGenericSend+0x88>
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	f383 8811 	msr	BASEPRI, r3
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	623b      	str	r3, [r7, #32]
 8006bfa:	e7fe      	b.n	8006bfa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bfc:	f001 fbd6 	bl	80083ac <xTaskGetSchedulerState>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d102      	bne.n	8006c0c <xQueueGenericSend+0x98>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <xQueueGenericSend+0x9c>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e000      	b.n	8006c12 <xQueueGenericSend+0x9e>
 8006c10:	2300      	movs	r3, #0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d109      	bne.n	8006c2a <xQueueGenericSend+0xb6>
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	61fb      	str	r3, [r7, #28]
 8006c28:	e7fe      	b.n	8006c28 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c2a:	f002 f995 	bl	8008f58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d302      	bcc.n	8006c40 <xQueueGenericSend+0xcc>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d129      	bne.n	8006c94 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	68b9      	ldr	r1, [r7, #8]
 8006c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c46:	f000 fba8 	bl	800739a <prvCopyDataToQueue>
 8006c4a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d010      	beq.n	8006c76 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	3324      	adds	r3, #36	; 0x24
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f001 f9ed 	bl	8008038 <xTaskRemoveFromEventList>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d013      	beq.n	8006c8c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c64:	4b3f      	ldr	r3, [pc, #252]	; (8006d64 <xQueueGenericSend+0x1f0>)
 8006c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	e00a      	b.n	8006c8c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d007      	beq.n	8006c8c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c7c:	4b39      	ldr	r3, [pc, #228]	; (8006d64 <xQueueGenericSend+0x1f0>)
 8006c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c8c:	f002 f992 	bl	8008fb4 <vPortExitCritical>
				return pdPASS;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e063      	b.n	8006d5c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c9a:	f002 f98b 	bl	8008fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	e05c      	b.n	8006d5c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d106      	bne.n	8006cb6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ca8:	f107 0314 	add.w	r3, r7, #20
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 fa25 	bl	80080fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cb6:	f002 f97d 	bl	8008fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cba:	f000 ff81 	bl	8007bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cbe:	f002 f94b 	bl	8008f58 <vPortEnterCritical>
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cc8:	b25b      	sxtb	r3, r3
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cce:	d103      	bne.n	8006cd8 <xQueueGenericSend+0x164>
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cde:	b25b      	sxtb	r3, r3
 8006ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce4:	d103      	bne.n	8006cee <xQueueGenericSend+0x17a>
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cee:	f002 f961 	bl	8008fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cf2:	1d3a      	adds	r2, r7, #4
 8006cf4:	f107 0314 	add.w	r3, r7, #20
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f001 fa14 	bl	8008128 <xTaskCheckForTimeOut>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d124      	bne.n	8006d50 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d08:	f000 fc3f 	bl	800758a <prvIsQueueFull>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d018      	beq.n	8006d44 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	3310      	adds	r3, #16
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	4611      	mov	r1, r2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 f93e 	bl	8007f9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d22:	f000 fbca 	bl	80074ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d26:	f000 ff59 	bl	8007bdc <xTaskResumeAll>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f47f af7c 	bne.w	8006c2a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006d32:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <xQueueGenericSend+0x1f0>)
 8006d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	e772      	b.n	8006c2a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d46:	f000 fbb8 	bl	80074ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d4a:	f000 ff47 	bl	8007bdc <xTaskResumeAll>
 8006d4e:	e76c      	b.n	8006c2a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d52:	f000 fbb2 	bl	80074ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d56:	f000 ff41 	bl	8007bdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d5a:	2300      	movs	r3, #0
		}
	}
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3738      	adds	r7, #56	; 0x38
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	e000ed04 	.word	0xe000ed04

08006d68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08e      	sub	sp, #56	; 0x38
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d109      	bne.n	8006d94 <xQueueGenericSendFromISR+0x2c>
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
 8006d92:	e7fe      	b.n	8006d92 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <xQueueGenericSendFromISR+0x3a>
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <xQueueGenericSendFromISR+0x3e>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <xQueueGenericSendFromISR+0x40>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d109      	bne.n	8006dc0 <xQueueGenericSendFromISR+0x58>
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	623b      	str	r3, [r7, #32]
 8006dbe:	e7fe      	b.n	8006dbe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d103      	bne.n	8006dce <xQueueGenericSendFromISR+0x66>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d101      	bne.n	8006dd2 <xQueueGenericSendFromISR+0x6a>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e000      	b.n	8006dd4 <xQueueGenericSendFromISR+0x6c>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d109      	bne.n	8006dec <xQueueGenericSendFromISR+0x84>
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	61fb      	str	r3, [r7, #28]
 8006dea:	e7fe      	b.n	8006dea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dec:	f002 f96e 	bl	80090cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006df0:	f3ef 8211 	mrs	r2, BASEPRI
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	61ba      	str	r2, [r7, #24]
 8006e06:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e08:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d302      	bcc.n	8006e1e <xQueueGenericSendFromISR+0xb6>
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d12c      	bne.n	8006e78 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	68b9      	ldr	r1, [r7, #8]
 8006e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e2e:	f000 fab4 	bl	800739a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e32:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3a:	d112      	bne.n	8006e62 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d016      	beq.n	8006e72 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	3324      	adds	r3, #36	; 0x24
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 f8f5 	bl	8008038 <xTaskRemoveFromEventList>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00e      	beq.n	8006e72 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00b      	beq.n	8006e72 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	e007      	b.n	8006e72 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e66:	3301      	adds	r3, #1
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	b25a      	sxtb	r2, r3
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e72:	2301      	movs	r3, #1
 8006e74:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006e76:	e001      	b.n	8006e7c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3738      	adds	r7, #56	; 0x38
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08e      	sub	sp, #56	; 0x38
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d109      	bne.n	8006eb8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	623b      	str	r3, [r7, #32]
 8006eb6:	e7fe      	b.n	8006eb6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d009      	beq.n	8006ed4 <xQueueGiveFromISR+0x44>
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	e7fe      	b.n	8006ed2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d103      	bne.n	8006ee4 <xQueueGiveFromISR+0x54>
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <xQueueGiveFromISR+0x58>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e000      	b.n	8006eea <xQueueGiveFromISR+0x5a>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d109      	bne.n	8006f02 <xQueueGiveFromISR+0x72>
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	e7fe      	b.n	8006f00 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f02:	f002 f8e3 	bl	80090cc <vPortValidateInterruptPriority>
	__asm volatile
 8006f06:	f3ef 8211 	mrs	r2, BASEPRI
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	617a      	str	r2, [r7, #20]
 8006f1c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006f1e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d22b      	bcs.n	8006f8a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4c:	d112      	bne.n	8006f74 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d016      	beq.n	8006f84 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	3324      	adds	r3, #36	; 0x24
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 f86c 	bl	8008038 <xTaskRemoveFromEventList>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00e      	beq.n	8006f84 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	e007      	b.n	8006f84 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f78:	3301      	adds	r3, #1
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	b25a      	sxtb	r2, r3
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f84:	2301      	movs	r3, #1
 8006f86:	637b      	str	r3, [r7, #52]	; 0x34
 8006f88:	e001      	b.n	8006f8e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3738      	adds	r7, #56	; 0x38
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08c      	sub	sp, #48	; 0x30
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d109      	bne.n	8006fd2 <xQueueReceive+0x2e>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	623b      	str	r3, [r7, #32]
 8006fd0:	e7fe      	b.n	8006fd0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d103      	bne.n	8006fe0 <xQueueReceive+0x3c>
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <xQueueReceive+0x40>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <xQueueReceive+0x42>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d109      	bne.n	8006ffe <xQueueReceive+0x5a>
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	61fb      	str	r3, [r7, #28]
 8006ffc:	e7fe      	b.n	8006ffc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ffe:	f001 f9d5 	bl	80083ac <xTaskGetSchedulerState>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d102      	bne.n	800700e <xQueueReceive+0x6a>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <xQueueReceive+0x6e>
 800700e:	2301      	movs	r3, #1
 8007010:	e000      	b.n	8007014 <xQueueReceive+0x70>
 8007012:	2300      	movs	r3, #0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d109      	bne.n	800702c <xQueueReceive+0x88>
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	61bb      	str	r3, [r7, #24]
 800702a:	e7fe      	b.n	800702a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800702c:	f001 ff94 	bl	8008f58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007034:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d01f      	beq.n	800707c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007040:	f000 fa15 	bl	800746e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	1e5a      	subs	r2, r3, #1
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00f      	beq.n	8007074 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007056:	3310      	adds	r3, #16
 8007058:	4618      	mov	r0, r3
 800705a:	f000 ffed 	bl	8008038 <xTaskRemoveFromEventList>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d007      	beq.n	8007074 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007064:	4b3c      	ldr	r3, [pc, #240]	; (8007158 <xQueueReceive+0x1b4>)
 8007066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007074:	f001 ff9e 	bl	8008fb4 <vPortExitCritical>
				return pdPASS;
 8007078:	2301      	movs	r3, #1
 800707a:	e069      	b.n	8007150 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d103      	bne.n	800708a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007082:	f001 ff97 	bl	8008fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007086:	2300      	movs	r3, #0
 8007088:	e062      	b.n	8007150 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800708a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d106      	bne.n	800709e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007090:	f107 0310 	add.w	r3, r7, #16
 8007094:	4618      	mov	r0, r3
 8007096:	f001 f831 	bl	80080fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800709a:	2301      	movs	r3, #1
 800709c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800709e:	f001 ff89 	bl	8008fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070a2:	f000 fd8d 	bl	8007bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070a6:	f001 ff57 	bl	8008f58 <vPortEnterCritical>
 80070aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070b0:	b25b      	sxtb	r3, r3
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b6:	d103      	bne.n	80070c0 <xQueueReceive+0x11c>
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070c6:	b25b      	sxtb	r3, r3
 80070c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070cc:	d103      	bne.n	80070d6 <xQueueReceive+0x132>
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d6:	f001 ff6d 	bl	8008fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070da:	1d3a      	adds	r2, r7, #4
 80070dc:	f107 0310 	add.w	r3, r7, #16
 80070e0:	4611      	mov	r1, r2
 80070e2:	4618      	mov	r0, r3
 80070e4:	f001 f820 	bl	8008128 <xTaskCheckForTimeOut>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d123      	bne.n	8007136 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070f0:	f000 fa35 	bl	800755e <prvIsQueueEmpty>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d017      	beq.n	800712a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fc:	3324      	adds	r3, #36	; 0x24
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	4611      	mov	r1, r2
 8007102:	4618      	mov	r0, r3
 8007104:	f000 ff4a 	bl	8007f9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800710a:	f000 f9d6 	bl	80074ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800710e:	f000 fd65 	bl	8007bdc <xTaskResumeAll>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d189      	bne.n	800702c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007118:	4b0f      	ldr	r3, [pc, #60]	; (8007158 <xQueueReceive+0x1b4>)
 800711a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	e780      	b.n	800702c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800712a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800712c:	f000 f9c5 	bl	80074ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007130:	f000 fd54 	bl	8007bdc <xTaskResumeAll>
 8007134:	e77a      	b.n	800702c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007138:	f000 f9bf 	bl	80074ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800713c:	f000 fd4e 	bl	8007bdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007142:	f000 fa0c 	bl	800755e <prvIsQueueEmpty>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	f43f af6f 	beq.w	800702c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800714e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007150:	4618      	mov	r0, r3
 8007152:	3730      	adds	r7, #48	; 0x30
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08e      	sub	sp, #56	; 0x38
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007166:	2300      	movs	r3, #0
 8007168:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800716e:	2300      	movs	r3, #0
 8007170:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d109      	bne.n	800718c <xQueueSemaphoreTake+0x30>
 8007178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717c:	f383 8811 	msr	BASEPRI, r3
 8007180:	f3bf 8f6f 	isb	sy
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	623b      	str	r3, [r7, #32]
 800718a:	e7fe      	b.n	800718a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d009      	beq.n	80071a8 <xQueueSemaphoreTake+0x4c>
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	e7fe      	b.n	80071a6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071a8:	f001 f900 	bl	80083ac <xTaskGetSchedulerState>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d102      	bne.n	80071b8 <xQueueSemaphoreTake+0x5c>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <xQueueSemaphoreTake+0x60>
 80071b8:	2301      	movs	r3, #1
 80071ba:	e000      	b.n	80071be <xQueueSemaphoreTake+0x62>
 80071bc:	2300      	movs	r3, #0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d109      	bne.n	80071d6 <xQueueSemaphoreTake+0x7a>
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	e7fe      	b.n	80071d4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80071d6:	f001 febf 	bl	8008f58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d024      	beq.n	8007230 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	1e5a      	subs	r2, r3, #1
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d104      	bne.n	8007200 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80071f6:	f001 fa55 	bl	80086a4 <pvTaskIncrementMutexHeldCount>
 80071fa:	4602      	mov	r2, r0
 80071fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fe:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00f      	beq.n	8007228 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720a:	3310      	adds	r3, #16
 800720c:	4618      	mov	r0, r3
 800720e:	f000 ff13 	bl	8008038 <xTaskRemoveFromEventList>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007218:	4b53      	ldr	r3, [pc, #332]	; (8007368 <xQueueSemaphoreTake+0x20c>)
 800721a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007228:	f001 fec4 	bl	8008fb4 <vPortExitCritical>
				return pdPASS;
 800722c:	2301      	movs	r3, #1
 800722e:	e096      	b.n	800735e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d110      	bne.n	8007258 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	2b00      	cmp	r3, #0
 800723a:	d009      	beq.n	8007250 <xQueueSemaphoreTake+0xf4>
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	e7fe      	b.n	800724e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007250:	f001 feb0 	bl	8008fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007254:	2300      	movs	r3, #0
 8007256:	e082      	b.n	800735e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800725a:	2b00      	cmp	r3, #0
 800725c:	d106      	bne.n	800726c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800725e:	f107 030c 	add.w	r3, r7, #12
 8007262:	4618      	mov	r0, r3
 8007264:	f000 ff4a 	bl	80080fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007268:	2301      	movs	r3, #1
 800726a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800726c:	f001 fea2 	bl	8008fb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007270:	f000 fca6 	bl	8007bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007274:	f001 fe70 	bl	8008f58 <vPortEnterCritical>
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800727e:	b25b      	sxtb	r3, r3
 8007280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007284:	d103      	bne.n	800728e <xQueueSemaphoreTake+0x132>
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800728e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007294:	b25b      	sxtb	r3, r3
 8007296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729a:	d103      	bne.n	80072a4 <xQueueSemaphoreTake+0x148>
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072a4:	f001 fe86 	bl	8008fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072a8:	463a      	mov	r2, r7
 80072aa:	f107 030c 	add.w	r3, r7, #12
 80072ae:	4611      	mov	r1, r2
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 ff39 	bl	8008128 <xTaskCheckForTimeOut>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d132      	bne.n	8007322 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072be:	f000 f94e 	bl	800755e <prvIsQueueEmpty>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d026      	beq.n	8007316 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d109      	bne.n	80072e4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80072d0:	f001 fe42 	bl	8008f58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 f885 	bl	80083e8 <xTaskPriorityInherit>
 80072de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80072e0:	f001 fe68 	bl	8008fb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	3324      	adds	r3, #36	; 0x24
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	4611      	mov	r1, r2
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fe55 	bl	8007f9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072f4:	f000 f8e1 	bl	80074ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072f8:	f000 fc70 	bl	8007bdc <xTaskResumeAll>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f47f af69 	bne.w	80071d6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007304:	4b18      	ldr	r3, [pc, #96]	; (8007368 <xQueueSemaphoreTake+0x20c>)
 8007306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	e75f      	b.n	80071d6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007316:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007318:	f000 f8cf 	bl	80074ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800731c:	f000 fc5e 	bl	8007bdc <xTaskResumeAll>
 8007320:	e759      	b.n	80071d6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007324:	f000 f8c9 	bl	80074ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007328:	f000 fc58 	bl	8007bdc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800732c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800732e:	f000 f916 	bl	800755e <prvIsQueueEmpty>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	f43f af4e 	beq.w	80071d6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00d      	beq.n	800735c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007340:	f001 fe0a 	bl	8008f58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007346:	f000 f811 	bl	800736c <prvGetDisinheritPriorityAfterTimeout>
 800734a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007352:	4618      	mov	r0, r3
 8007354:	f001 f922 	bl	800859c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007358:	f001 fe2c 	bl	8008fb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800735c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800735e:	4618      	mov	r0, r3
 8007360:	3738      	adds	r7, #56	; 0x38
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	2b00      	cmp	r3, #0
 800737a:	d006      	beq.n	800738a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	e001      	b.n	800738e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800738e:	68fb      	ldr	r3, [r7, #12]
	}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr

0800739a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b086      	sub	sp, #24
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10d      	bne.n	80073d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d14d      	bne.n	800745c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f001 f87d 	bl	80084c4 <xTaskPriorityDisinherit>
 80073ca:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	605a      	str	r2, [r3, #4]
 80073d2:	e043      	b.n	800745c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d119      	bne.n	800740e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6898      	ldr	r0, [r3, #8]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	461a      	mov	r2, r3
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	f002 fd63 	bl	8009eb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689a      	ldr	r2, [r3, #8]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	441a      	add	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	429a      	cmp	r2, r3
 8007402:	d32b      	bcc.n	800745c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	609a      	str	r2, [r3, #8]
 800740c:	e026      	b.n	800745c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	68d8      	ldr	r0, [r3, #12]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	461a      	mov	r2, r3
 8007418:	68b9      	ldr	r1, [r7, #8]
 800741a:	f002 fd49 	bl	8009eb0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	425b      	negs	r3, r3
 8007428:	441a      	add	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d207      	bcs.n	800744a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	425b      	negs	r3, r3
 8007444:	441a      	add	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b02      	cmp	r3, #2
 800744e:	d105      	bne.n	800745c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	3b01      	subs	r3, #1
 800745a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007464:	697b      	ldr	r3, [r7, #20]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	2b00      	cmp	r3, #0
 800747e:	d018      	beq.n	80074b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007488:	441a      	add	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	429a      	cmp	r2, r3
 8007498:	d303      	bcc.n	80074a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68d9      	ldr	r1, [r3, #12]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	461a      	mov	r2, r3
 80074ac:	6838      	ldr	r0, [r7, #0]
 80074ae:	f002 fcff 	bl	8009eb0 <memcpy>
	}
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074c2:	f001 fd49 	bl	8008f58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074ce:	e011      	b.n	80074f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d012      	beq.n	80074fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3324      	adds	r3, #36	; 0x24
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fdab 	bl	8008038 <xTaskRemoveFromEventList>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074e8:	f000 fe7e 	bl	80081e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	dce9      	bgt.n	80074d0 <prvUnlockQueue+0x16>
 80074fc:	e000      	b.n	8007500 <prvUnlockQueue+0x46>
					break;
 80074fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	22ff      	movs	r2, #255	; 0xff
 8007504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007508:	f001 fd54 	bl	8008fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800750c:	f001 fd24 	bl	8008f58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007516:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007518:	e011      	b.n	800753e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d012      	beq.n	8007548 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3310      	adds	r3, #16
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fd86 	bl	8008038 <xTaskRemoveFromEventList>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007532:	f000 fe59 	bl	80081e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007536:	7bbb      	ldrb	r3, [r7, #14]
 8007538:	3b01      	subs	r3, #1
 800753a:	b2db      	uxtb	r3, r3
 800753c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800753e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007542:	2b00      	cmp	r3, #0
 8007544:	dce9      	bgt.n	800751a <prvUnlockQueue+0x60>
 8007546:	e000      	b.n	800754a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007548:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	22ff      	movs	r2, #255	; 0xff
 800754e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007552:	f001 fd2f 	bl	8008fb4 <vPortExitCritical>
}
 8007556:	bf00      	nop
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007566:	f001 fcf7 	bl	8008f58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756e:	2b00      	cmp	r3, #0
 8007570:	d102      	bne.n	8007578 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007572:	2301      	movs	r3, #1
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	e001      	b.n	800757c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800757c:	f001 fd1a 	bl	8008fb4 <vPortExitCritical>

	return xReturn;
 8007580:	68fb      	ldr	r3, [r7, #12]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007592:	f001 fce1 	bl	8008f58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759e:	429a      	cmp	r2, r3
 80075a0:	d102      	bne.n	80075a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075a2:	2301      	movs	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	e001      	b.n	80075ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075ac:	f001 fd02 	bl	8008fb4 <vPortExitCritical>

	return xReturn;
 80075b0:	68fb      	ldr	r3, [r7, #12]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	e014      	b.n	80075f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075cc:	4a0e      	ldr	r2, [pc, #56]	; (8007608 <vQueueAddToRegistry+0x4c>)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10b      	bne.n	80075f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075d8:	490b      	ldr	r1, [pc, #44]	; (8007608 <vQueueAddToRegistry+0x4c>)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075e2:	4a09      	ldr	r2, [pc, #36]	; (8007608 <vQueueAddToRegistry+0x4c>)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	4413      	add	r3, r2
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075ee:	e005      	b.n	80075fc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3301      	adds	r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2b07      	cmp	r3, #7
 80075fa:	d9e7      	bls.n	80075cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075fc:	bf00      	nop
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	bc80      	pop	{r7}
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	20003174 	.word	0x20003174

0800760c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800761c:	f001 fc9c 	bl	8008f58 <vPortEnterCritical>
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007626:	b25b      	sxtb	r3, r3
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d103      	bne.n	8007636 <vQueueWaitForMessageRestricted+0x2a>
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800763c:	b25b      	sxtb	r3, r3
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d103      	bne.n	800764c <vQueueWaitForMessageRestricted+0x40>
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800764c:	f001 fcb2 	bl	8008fb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	3324      	adds	r3, #36	; 0x24
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	4618      	mov	r0, r3
 8007662:	f000 fcbf 	bl	8007fe4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007666:	6978      	ldr	r0, [r7, #20]
 8007668:	f7ff ff27 	bl	80074ba <prvUnlockQueue>
	}
 800766c:	bf00      	nop
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08e      	sub	sp, #56	; 0x38
 8007678:	af04      	add	r7, sp, #16
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007684:	2b00      	cmp	r3, #0
 8007686:	d109      	bne.n	800769c <xTaskCreateStatic+0x28>
 8007688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	623b      	str	r3, [r7, #32]
 800769a:	e7fe      	b.n	800769a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d109      	bne.n	80076b6 <xTaskCreateStatic+0x42>
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	61fb      	str	r3, [r7, #28]
 80076b4:	e7fe      	b.n	80076b4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076b6:	2374      	movs	r3, #116	; 0x74
 80076b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	2b74      	cmp	r3, #116	; 0x74
 80076be:	d009      	beq.n	80076d4 <xTaskCreateStatic+0x60>
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	61bb      	str	r3, [r7, #24]
 80076d2:	e7fe      	b.n	80076d2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d01e      	beq.n	8007718 <xTaskCreateStatic+0xa4>
 80076da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01b      	beq.n	8007718 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	2202      	movs	r2, #2
 80076ee:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076f2:	2300      	movs	r3, #0
 80076f4:	9303      	str	r3, [sp, #12]
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	9302      	str	r3, [sp, #8]
 80076fa:	f107 0314 	add.w	r3, r7, #20
 80076fe:	9301      	str	r3, [sp, #4]
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 f850 	bl	80077b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007712:	f000 f8d9 	bl	80078c8 <prvAddNewTaskToReadyList>
 8007716:	e001      	b.n	800771c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007718:	2300      	movs	r3, #0
 800771a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800771c:	697b      	ldr	r3, [r7, #20]
	}
 800771e:	4618      	mov	r0, r3
 8007720:	3728      	adds	r7, #40	; 0x28
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007726:	b580      	push	{r7, lr}
 8007728:	b08c      	sub	sp, #48	; 0x30
 800772a:	af04      	add	r7, sp, #16
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	603b      	str	r3, [r7, #0]
 8007732:	4613      	mov	r3, r2
 8007734:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007736:	88fb      	ldrh	r3, [r7, #6]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4618      	mov	r0, r3
 800773c:	f001 fd02 	bl	8009144 <pvPortMalloc>
 8007740:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00e      	beq.n	8007766 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007748:	2074      	movs	r0, #116	; 0x74
 800774a:	f001 fcfb 	bl	8009144 <pvPortMalloc>
 800774e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	631a      	str	r2, [r3, #48]	; 0x30
 800775c:	e005      	b.n	800776a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800775e:	6978      	ldr	r0, [r7, #20]
 8007760:	f001 fdb2 	bl	80092c8 <vPortFree>
 8007764:	e001      	b.n	800776a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007766:	2300      	movs	r3, #0
 8007768:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d017      	beq.n	80077a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007778:	88fa      	ldrh	r2, [r7, #6]
 800777a:	2300      	movs	r3, #0
 800777c:	9303      	str	r3, [sp, #12]
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	9302      	str	r3, [sp, #8]
 8007782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68b9      	ldr	r1, [r7, #8]
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 f80e 	bl	80077b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007794:	69f8      	ldr	r0, [r7, #28]
 8007796:	f000 f897 	bl	80078c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800779a:	2301      	movs	r3, #1
 800779c:	61bb      	str	r3, [r7, #24]
 800779e:	e002      	b.n	80077a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077a0:	f04f 33ff 	mov.w	r3, #4294967295
 80077a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077a6:	69bb      	ldr	r3, [r7, #24]
	}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3720      	adds	r7, #32
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	461a      	mov	r2, r3
 80077c8:	21a5      	movs	r1, #165	; 0xa5
 80077ca:	f002 fb7c 	bl	8009ec6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077d8:	3b01      	subs	r3, #1
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	f023 0307 	bic.w	r3, r3, #7
 80077e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d009      	beq.n	8007806 <prvInitialiseNewTask+0x56>
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	e7fe      	b.n	8007804 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800780c:	2300      	movs	r3, #0
 800780e:	61fb      	str	r3, [r7, #28]
 8007810:	e012      	b.n	8007838 <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	4413      	add	r3, r2
 8007818:	7819      	ldrb	r1, [r3, #0]
 800781a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	4413      	add	r3, r2
 8007820:	3334      	adds	r3, #52	; 0x34
 8007822:	460a      	mov	r2, r1
 8007824:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	4413      	add	r3, r2
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d006      	beq.n	8007840 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	3301      	adds	r3, #1
 8007836:	61fb      	str	r3, [r7, #28]
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	2b1f      	cmp	r3, #31
 800783c:	d9e9      	bls.n	8007812 <prvInitialiseNewTask+0x62>
 800783e:	e000      	b.n	8007842 <prvInitialiseNewTask+0x92>
		{
			break;
 8007840:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	2b37      	cmp	r3, #55	; 0x37
 800784e:	d901      	bls.n	8007854 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007850:	2337      	movs	r3, #55	; 0x37
 8007852:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007858:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800785e:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->uxMutexesHeld = 0;
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	2200      	movs	r2, #0
 8007864:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	3304      	adds	r3, #4
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe ffb7 	bl	80067de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	3318      	adds	r3, #24
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe ffb2 	bl	80067de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800787e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007888:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800788e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	2200      	movs	r2, #0
 8007894:	669a      	str	r2, [r3, #104]	; 0x68
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	2200      	movs	r2, #0
 800789a:	66da      	str	r2, [r3, #108]	; 0x6c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800789c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	68f9      	ldr	r1, [r7, #12]
 80078a8:	69b8      	ldr	r0, [r7, #24]
 80078aa:	f001 fa6d 	bl	8008d88 <pxPortInitialiseStack>
 80078ae:	4602      	mov	r2, r0
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078c0:	bf00      	nop
 80078c2:	3720      	adds	r7, #32
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078d0:	f001 fb42 	bl	8008f58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078d4:	4b2d      	ldr	r3, [pc, #180]	; (800798c <prvAddNewTaskToReadyList+0xc4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3301      	adds	r3, #1
 80078da:	4a2c      	ldr	r2, [pc, #176]	; (800798c <prvAddNewTaskToReadyList+0xc4>)
 80078dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078de:	4b2c      	ldr	r3, [pc, #176]	; (8007990 <prvAddNewTaskToReadyList+0xc8>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d109      	bne.n	80078fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078e6:	4a2a      	ldr	r2, [pc, #168]	; (8007990 <prvAddNewTaskToReadyList+0xc8>)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078ec:	4b27      	ldr	r3, [pc, #156]	; (800798c <prvAddNewTaskToReadyList+0xc4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d110      	bne.n	8007916 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078f4:	f000 fc9c 	bl	8008230 <prvInitialiseTaskLists>
 80078f8:	e00d      	b.n	8007916 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078fa:	4b26      	ldr	r3, [pc, #152]	; (8007994 <prvAddNewTaskToReadyList+0xcc>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d109      	bne.n	8007916 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007902:	4b23      	ldr	r3, [pc, #140]	; (8007990 <prvAddNewTaskToReadyList+0xc8>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	429a      	cmp	r2, r3
 800790e:	d802      	bhi.n	8007916 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007910:	4a1f      	ldr	r2, [pc, #124]	; (8007990 <prvAddNewTaskToReadyList+0xc8>)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007916:	4b20      	ldr	r3, [pc, #128]	; (8007998 <prvAddNewTaskToReadyList+0xd0>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3301      	adds	r3, #1
 800791c:	4a1e      	ldr	r2, [pc, #120]	; (8007998 <prvAddNewTaskToReadyList+0xd0>)
 800791e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007920:	4b1d      	ldr	r3, [pc, #116]	; (8007998 <prvAddNewTaskToReadyList+0xd0>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	659a      	str	r2, [r3, #88]	; 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792c:	4b1b      	ldr	r3, [pc, #108]	; (800799c <prvAddNewTaskToReadyList+0xd4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	429a      	cmp	r2, r3
 8007932:	d903      	bls.n	800793c <prvAddNewTaskToReadyList+0x74>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	4a18      	ldr	r2, [pc, #96]	; (800799c <prvAddNewTaskToReadyList+0xd4>)
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4a15      	ldr	r2, [pc, #84]	; (80079a0 <prvAddNewTaskToReadyList+0xd8>)
 800794a:	441a      	add	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3304      	adds	r3, #4
 8007950:	4619      	mov	r1, r3
 8007952:	4610      	mov	r0, r2
 8007954:	f7fe ff4f 	bl	80067f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007958:	f001 fb2c 	bl	8008fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800795c:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <prvAddNewTaskToReadyList+0xcc>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00e      	beq.n	8007982 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007964:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <prvAddNewTaskToReadyList+0xc8>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796e:	429a      	cmp	r2, r3
 8007970:	d207      	bcs.n	8007982 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007972:	4b0c      	ldr	r3, [pc, #48]	; (80079a4 <prvAddNewTaskToReadyList+0xdc>)
 8007974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000d60 	.word	0x20000d60
 8007990:	2000088c 	.word	0x2000088c
 8007994:	20000d6c 	.word	0x20000d6c
 8007998:	20000d7c 	.word	0x20000d7c
 800799c:	20000d68 	.word	0x20000d68
 80079a0:	20000890 	.word	0x20000890
 80079a4:	e000ed04 	.word	0xe000ed04

080079a8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80079b0:	f001 fad2 	bl	8008f58 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d102      	bne.n	80079c0 <vTaskDelete+0x18>
 80079ba:	4b2c      	ldr	r3, [pc, #176]	; (8007a6c <vTaskDelete+0xc4>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	e000      	b.n	80079c2 <vTaskDelete+0x1a>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fe ff6f 	bl	80068ac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3318      	adds	r3, #24
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe ff66 	bl	80068ac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80079e0:	4b23      	ldr	r3, [pc, #140]	; (8007a70 <vTaskDelete+0xc8>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3301      	adds	r3, #1
 80079e6:	4a22      	ldr	r2, [pc, #136]	; (8007a70 <vTaskDelete+0xc8>)
 80079e8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80079ea:	4b20      	ldr	r3, [pc, #128]	; (8007a6c <vTaskDelete+0xc4>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d10b      	bne.n	8007a0c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4619      	mov	r1, r3
 80079fa:	481e      	ldr	r0, [pc, #120]	; (8007a74 <vTaskDelete+0xcc>)
 80079fc:	f7fe fefb 	bl	80067f6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007a00:	4b1d      	ldr	r3, [pc, #116]	; (8007a78 <vTaskDelete+0xd0>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	4a1c      	ldr	r2, [pc, #112]	; (8007a78 <vTaskDelete+0xd0>)
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	e009      	b.n	8007a20 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007a0c:	4b1b      	ldr	r3, [pc, #108]	; (8007a7c <vTaskDelete+0xd4>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	4a1a      	ldr	r2, [pc, #104]	; (8007a7c <vTaskDelete+0xd4>)
 8007a14:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 fc76 	bl	8008308 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007a1c:	f000 fca2 	bl	8008364 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007a20:	f001 fac8 	bl	8008fb4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007a24:	4b16      	ldr	r3, [pc, #88]	; (8007a80 <vTaskDelete+0xd8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d01a      	beq.n	8007a62 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <vTaskDelete+0xc4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d115      	bne.n	8007a62 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007a36:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <vTaskDelete+0xdc>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d009      	beq.n	8007a52 <vTaskDelete+0xaa>
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	60bb      	str	r3, [r7, #8]
 8007a50:	e7fe      	b.n	8007a50 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8007a52:	4b0d      	ldr	r3, [pc, #52]	; (8007a88 <vTaskDelete+0xe0>)
 8007a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a62:	bf00      	nop
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	2000088c 	.word	0x2000088c
 8007a70:	20000d7c 	.word	0x20000d7c
 8007a74:	20000d34 	.word	0x20000d34
 8007a78:	20000d48 	.word	0x20000d48
 8007a7c:	20000d60 	.word	0x20000d60
 8007a80:	20000d6c 	.word	0x20000d6c
 8007a84:	20000d88 	.word	0x20000d88
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a94:	2300      	movs	r3, #0
 8007a96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d016      	beq.n	8007acc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a9e:	4b13      	ldr	r3, [pc, #76]	; (8007aec <vTaskDelay+0x60>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d009      	beq.n	8007aba <vTaskDelay+0x2e>
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	60bb      	str	r3, [r7, #8]
 8007ab8:	e7fe      	b.n	8007ab8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007aba:	f000 f881 	bl	8007bc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007abe:	2100      	movs	r1, #0
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fe03 	bl	80086cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ac6:	f000 f889 	bl	8007bdc <xTaskResumeAll>
 8007aca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d107      	bne.n	8007ae2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007ad2:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <vTaskDelay+0x64>)
 8007ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ae2:	bf00      	nop
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20000d88 	.word	0x20000d88
 8007af0:	e000ed04 	.word	0xe000ed04

08007af4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08a      	sub	sp, #40	; 0x28
 8007af8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b02:	463a      	mov	r2, r7
 8007b04:	1d39      	adds	r1, r7, #4
 8007b06:	f107 0308 	add.w	r3, r7, #8
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fe16 	bl	800673c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	9202      	str	r2, [sp, #8]
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	460a      	mov	r2, r1
 8007b22:	4921      	ldr	r1, [pc, #132]	; (8007ba8 <vTaskStartScheduler+0xb4>)
 8007b24:	4821      	ldr	r0, [pc, #132]	; (8007bac <vTaskStartScheduler+0xb8>)
 8007b26:	f7ff fda5 	bl	8007674 <xTaskCreateStatic>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	4b20      	ldr	r3, [pc, #128]	; (8007bb0 <vTaskStartScheduler+0xbc>)
 8007b2e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b30:	4b1f      	ldr	r3, [pc, #124]	; (8007bb0 <vTaskStartScheduler+0xbc>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	e001      	b.n	8007b42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d102      	bne.n	8007b4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b48:	f000 fe14 	bl	8008774 <xTimerCreateTimerTask>
 8007b4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d117      	bne.n	8007b84 <vTaskStartScheduler+0x90>
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b66:	4b13      	ldr	r3, [pc, #76]	; (8007bb4 <vTaskStartScheduler+0xc0>)
 8007b68:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b6e:	4b12      	ldr	r3, [pc, #72]	; (8007bb8 <vTaskStartScheduler+0xc4>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007b74:	4b11      	ldr	r3, [pc, #68]	; (8007bbc <vTaskStartScheduler+0xc8>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007b7a:	f7f8 fc04 	bl	8000386 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b7e:	f001 f97b 	bl	8008e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b82:	e00d      	b.n	8007ba0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8a:	d109      	bne.n	8007ba0 <vTaskStartScheduler+0xac>
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	e7fe      	b.n	8007b9e <vTaskStartScheduler+0xaa>
}
 8007ba0:	bf00      	nop
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	0800a014 	.word	0x0800a014
 8007bac:	08008201 	.word	0x08008201
 8007bb0:	20000d84 	.word	0x20000d84
 8007bb4:	20000d80 	.word	0x20000d80
 8007bb8:	20000d6c 	.word	0x20000d6c
 8007bbc:	20000d64 	.word	0x20000d64

08007bc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007bc4:	4b04      	ldr	r3, [pc, #16]	; (8007bd8 <vTaskSuspendAll+0x18>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	4a03      	ldr	r2, [pc, #12]	; (8007bd8 <vTaskSuspendAll+0x18>)
 8007bcc:	6013      	str	r3, [r2, #0]
}
 8007bce:	bf00      	nop
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	20000d88 	.word	0x20000d88

08007bdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007bea:	4b41      	ldr	r3, [pc, #260]	; (8007cf0 <xTaskResumeAll+0x114>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d109      	bne.n	8007c06 <xTaskResumeAll+0x2a>
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	e7fe      	b.n	8007c04 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c06:	f001 f9a7 	bl	8008f58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c0a:	4b39      	ldr	r3, [pc, #228]	; (8007cf0 <xTaskResumeAll+0x114>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	4a37      	ldr	r2, [pc, #220]	; (8007cf0 <xTaskResumeAll+0x114>)
 8007c12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c14:	4b36      	ldr	r3, [pc, #216]	; (8007cf0 <xTaskResumeAll+0x114>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d162      	bne.n	8007ce2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c1c:	4b35      	ldr	r3, [pc, #212]	; (8007cf4 <xTaskResumeAll+0x118>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d05e      	beq.n	8007ce2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c24:	e02f      	b.n	8007c86 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007c26:	4b34      	ldr	r3, [pc, #208]	; (8007cf8 <xTaskResumeAll+0x11c>)
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3318      	adds	r3, #24
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fe fe3a 	bl	80068ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe fe35 	bl	80068ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c46:	4b2d      	ldr	r3, [pc, #180]	; (8007cfc <xTaskResumeAll+0x120>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d903      	bls.n	8007c56 <xTaskResumeAll+0x7a>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c52:	4a2a      	ldr	r2, [pc, #168]	; (8007cfc <xTaskResumeAll+0x120>)
 8007c54:	6013      	str	r3, [r2, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4a27      	ldr	r2, [pc, #156]	; (8007d00 <xTaskResumeAll+0x124>)
 8007c64:	441a      	add	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	f7fe fdc2 	bl	80067f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c76:	4b23      	ldr	r3, [pc, #140]	; (8007d04 <xTaskResumeAll+0x128>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d302      	bcc.n	8007c86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007c80:	4b21      	ldr	r3, [pc, #132]	; (8007d08 <xTaskResumeAll+0x12c>)
 8007c82:	2201      	movs	r2, #1
 8007c84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c86:	4b1c      	ldr	r3, [pc, #112]	; (8007cf8 <xTaskResumeAll+0x11c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1cb      	bne.n	8007c26 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c94:	f000 fb66 	bl	8008364 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007c98:	4b1c      	ldr	r3, [pc, #112]	; (8007d0c <xTaskResumeAll+0x130>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d010      	beq.n	8007cc6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ca4:	f000 f844 	bl	8007d30 <xTaskIncrementTick>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d002      	beq.n	8007cb4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007cae:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <xTaskResumeAll+0x12c>)
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1f1      	bne.n	8007ca4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007cc0:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <xTaskResumeAll+0x130>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007cc6:	4b10      	ldr	r3, [pc, #64]	; (8007d08 <xTaskResumeAll+0x12c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007cd2:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <xTaskResumeAll+0x134>)
 8007cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ce2:	f001 f967 	bl	8008fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20000d88 	.word	0x20000d88
 8007cf4:	20000d60 	.word	0x20000d60
 8007cf8:	20000d20 	.word	0x20000d20
 8007cfc:	20000d68 	.word	0x20000d68
 8007d00:	20000890 	.word	0x20000890
 8007d04:	2000088c 	.word	0x2000088c
 8007d08:	20000d74 	.word	0x20000d74
 8007d0c:	20000d70 	.word	0x20000d70
 8007d10:	e000ed04 	.word	0xe000ed04

08007d14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d1a:	4b04      	ldr	r3, [pc, #16]	; (8007d2c <xTaskGetTickCount+0x18>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d20:	687b      	ldr	r3, [r7, #4]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr
 8007d2c:	20000d64 	.word	0x20000d64

08007d30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d36:	2300      	movs	r3, #0
 8007d38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d3a:	4b51      	ldr	r3, [pc, #324]	; (8007e80 <xTaskIncrementTick+0x150>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f040 808d 	bne.w	8007e5e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d44:	4b4f      	ldr	r3, [pc, #316]	; (8007e84 <xTaskIncrementTick+0x154>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d4c:	4a4d      	ldr	r2, [pc, #308]	; (8007e84 <xTaskIncrementTick+0x154>)
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d11f      	bne.n	8007d98 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d58:	4b4b      	ldr	r3, [pc, #300]	; (8007e88 <xTaskIncrementTick+0x158>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <xTaskIncrementTick+0x46>
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	e7fe      	b.n	8007d74 <xTaskIncrementTick+0x44>
 8007d76:	4b44      	ldr	r3, [pc, #272]	; (8007e88 <xTaskIncrementTick+0x158>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	4b43      	ldr	r3, [pc, #268]	; (8007e8c <xTaskIncrementTick+0x15c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a41      	ldr	r2, [pc, #260]	; (8007e88 <xTaskIncrementTick+0x158>)
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	4a41      	ldr	r2, [pc, #260]	; (8007e8c <xTaskIncrementTick+0x15c>)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	4b41      	ldr	r3, [pc, #260]	; (8007e90 <xTaskIncrementTick+0x160>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	4a3f      	ldr	r2, [pc, #252]	; (8007e90 <xTaskIncrementTick+0x160>)
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	f000 fae6 	bl	8008364 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d98:	4b3e      	ldr	r3, [pc, #248]	; (8007e94 <xTaskIncrementTick+0x164>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d34e      	bcc.n	8007e40 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007da2:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <xTaskIncrementTick+0x158>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <xTaskIncrementTick+0x80>
 8007dac:	2301      	movs	r3, #1
 8007dae:	e000      	b.n	8007db2 <xTaskIncrementTick+0x82>
 8007db0:	2300      	movs	r3, #0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d004      	beq.n	8007dc0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007db6:	4b37      	ldr	r3, [pc, #220]	; (8007e94 <xTaskIncrementTick+0x164>)
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbc:	601a      	str	r2, [r3, #0]
					break;
 8007dbe:	e03f      	b.n	8007e40 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007dc0:	4b31      	ldr	r3, [pc, #196]	; (8007e88 <xTaskIncrementTick+0x158>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d203      	bcs.n	8007de0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007dd8:	4a2e      	ldr	r2, [pc, #184]	; (8007e94 <xTaskIncrementTick+0x164>)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6013      	str	r3, [r2, #0]
						break;
 8007dde:	e02f      	b.n	8007e40 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe fd61 	bl	80068ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d004      	beq.n	8007dfc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	3318      	adds	r3, #24
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe fd58 	bl	80068ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e00:	4b25      	ldr	r3, [pc, #148]	; (8007e98 <xTaskIncrementTick+0x168>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d903      	bls.n	8007e10 <xTaskIncrementTick+0xe0>
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	4a22      	ldr	r2, [pc, #136]	; (8007e98 <xTaskIncrementTick+0x168>)
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4a1f      	ldr	r2, [pc, #124]	; (8007e9c <xTaskIncrementTick+0x16c>)
 8007e1e:	441a      	add	r2, r3
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	3304      	adds	r3, #4
 8007e24:	4619      	mov	r1, r3
 8007e26:	4610      	mov	r0, r2
 8007e28:	f7fe fce5 	bl	80067f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e30:	4b1b      	ldr	r3, [pc, #108]	; (8007ea0 <xTaskIncrementTick+0x170>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d3b3      	bcc.n	8007da2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e3e:	e7b0      	b.n	8007da2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e40:	4b17      	ldr	r3, [pc, #92]	; (8007ea0 <xTaskIncrementTick+0x170>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e46:	4915      	ldr	r1, [pc, #84]	; (8007e9c <xTaskIncrementTick+0x16c>)
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d907      	bls.n	8007e68 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e004      	b.n	8007e68 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e5e:	4b11      	ldr	r3, [pc, #68]	; (8007ea4 <xTaskIncrementTick+0x174>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3301      	adds	r3, #1
 8007e64:	4a0f      	ldr	r2, [pc, #60]	; (8007ea4 <xTaskIncrementTick+0x174>)
 8007e66:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007e68:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <xTaskIncrementTick+0x178>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e74:	697b      	ldr	r3, [r7, #20]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000d88 	.word	0x20000d88
 8007e84:	20000d64 	.word	0x20000d64
 8007e88:	20000d18 	.word	0x20000d18
 8007e8c:	20000d1c 	.word	0x20000d1c
 8007e90:	20000d78 	.word	0x20000d78
 8007e94:	20000d80 	.word	0x20000d80
 8007e98:	20000d68 	.word	0x20000d68
 8007e9c:	20000890 	.word	0x20000890
 8007ea0:	2000088c 	.word	0x2000088c
 8007ea4:	20000d70 	.word	0x20000d70
 8007ea8:	20000d74 	.word	0x20000d74

08007eac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007eb2:	4b33      	ldr	r3, [pc, #204]	; (8007f80 <vTaskSwitchContext+0xd4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007eba:	4b32      	ldr	r3, [pc, #200]	; (8007f84 <vTaskSwitchContext+0xd8>)
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ec0:	e059      	b.n	8007f76 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8007ec2:	4b30      	ldr	r3, [pc, #192]	; (8007f84 <vTaskSwitchContext+0xd8>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007ec8:	f7f8 fa63 	bl	8000392 <getRunTimeCounterValue>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	4b2e      	ldr	r3, [pc, #184]	; (8007f88 <vTaskSwitchContext+0xdc>)
 8007ed0:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007ed2:	4b2d      	ldr	r3, [pc, #180]	; (8007f88 <vTaskSwitchContext+0xdc>)
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	4b2d      	ldr	r3, [pc, #180]	; (8007f8c <vTaskSwitchContext+0xe0>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d909      	bls.n	8007ef2 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007ede:	4b2c      	ldr	r3, [pc, #176]	; (8007f90 <vTaskSwitchContext+0xe4>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8007ee4:	4a28      	ldr	r2, [pc, #160]	; (8007f88 <vTaskSwitchContext+0xdc>)
 8007ee6:	6810      	ldr	r0, [r2, #0]
 8007ee8:	4a28      	ldr	r2, [pc, #160]	; (8007f8c <vTaskSwitchContext+0xe0>)
 8007eea:	6812      	ldr	r2, [r2, #0]
 8007eec:	1a82      	subs	r2, r0, r2
 8007eee:	440a      	add	r2, r1
 8007ef0:	669a      	str	r2, [r3, #104]	; 0x68
				ulTaskSwitchedInTime = ulTotalRunTime;
 8007ef2:	4b25      	ldr	r3, [pc, #148]	; (8007f88 <vTaskSwitchContext+0xdc>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a25      	ldr	r2, [pc, #148]	; (8007f8c <vTaskSwitchContext+0xe0>)
 8007ef8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007efa:	4b26      	ldr	r3, [pc, #152]	; (8007f94 <vTaskSwitchContext+0xe8>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	e00f      	b.n	8007f22 <vTaskSwitchContext+0x76>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d109      	bne.n	8007f1c <vTaskSwitchContext+0x70>
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	607b      	str	r3, [r7, #4]
 8007f1a:	e7fe      	b.n	8007f1a <vTaskSwitchContext+0x6e>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	491d      	ldr	r1, [pc, #116]	; (8007f98 <vTaskSwitchContext+0xec>)
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	440b      	add	r3, r1
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0e5      	beq.n	8007f02 <vTaskSwitchContext+0x56>
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4a15      	ldr	r2, [pc, #84]	; (8007f98 <vTaskSwitchContext+0xec>)
 8007f42:	4413      	add	r3, r2
 8007f44:	60bb      	str	r3, [r7, #8]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	605a      	str	r2, [r3, #4]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	3308      	adds	r3, #8
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d104      	bne.n	8007f66 <vTaskSwitchContext+0xba>
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	605a      	str	r2, [r3, #4]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	4a08      	ldr	r2, [pc, #32]	; (8007f90 <vTaskSwitchContext+0xe4>)
 8007f6e:	6013      	str	r3, [r2, #0]
 8007f70:	4a08      	ldr	r2, [pc, #32]	; (8007f94 <vTaskSwitchContext+0xe8>)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6013      	str	r3, [r2, #0]
}
 8007f76:	bf00      	nop
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20000d88 	.word	0x20000d88
 8007f84:	20000d74 	.word	0x20000d74
 8007f88:	20000d90 	.word	0x20000d90
 8007f8c:	20000d8c 	.word	0x20000d8c
 8007f90:	2000088c 	.word	0x2000088c
 8007f94:	20000d68 	.word	0x20000d68
 8007f98:	20000890 	.word	0x20000890

08007f9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d109      	bne.n	8007fc0 <vTaskPlaceOnEventList+0x24>
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	e7fe      	b.n	8007fbe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fc0:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <vTaskPlaceOnEventList+0x44>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3318      	adds	r3, #24
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7fe fc37 	bl	800683c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007fce:	2101      	movs	r1, #1
 8007fd0:	6838      	ldr	r0, [r7, #0]
 8007fd2:	f000 fb7b 	bl	80086cc <prvAddCurrentTaskToDelayedList>
}
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	2000088c 	.word	0x2000088c

08007fe4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d109      	bne.n	800800a <vTaskPlaceOnEventListRestricted+0x26>
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	e7fe      	b.n	8008008 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800800a:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <vTaskPlaceOnEventListRestricted+0x50>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3318      	adds	r3, #24
 8008010:	4619      	mov	r1, r3
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f7fe fbef 	bl	80067f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800801e:	f04f 33ff 	mov.w	r3, #4294967295
 8008022:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	68b8      	ldr	r0, [r7, #8]
 8008028:	f000 fb50 	bl	80086cc <prvAddCurrentTaskToDelayedList>
	}
 800802c:	bf00      	nop
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	2000088c 	.word	0x2000088c

08008038 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d109      	bne.n	8008062 <xTaskRemoveFromEventList+0x2a>
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	e7fe      	b.n	8008060 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	3318      	adds	r3, #24
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fc20 	bl	80068ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800806c:	4b1d      	ldr	r3, [pc, #116]	; (80080e4 <xTaskRemoveFromEventList+0xac>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d11d      	bne.n	80080b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	3304      	adds	r3, #4
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe fc17 	bl	80068ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008082:	4b19      	ldr	r3, [pc, #100]	; (80080e8 <xTaskRemoveFromEventList+0xb0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	429a      	cmp	r2, r3
 8008088:	d903      	bls.n	8008092 <xTaskRemoveFromEventList+0x5a>
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808e:	4a16      	ldr	r2, [pc, #88]	; (80080e8 <xTaskRemoveFromEventList+0xb0>)
 8008090:	6013      	str	r3, [r2, #0]
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008096:	4613      	mov	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4a13      	ldr	r2, [pc, #76]	; (80080ec <xTaskRemoveFromEventList+0xb4>)
 80080a0:	441a      	add	r2, r3
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	3304      	adds	r3, #4
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f7fe fba4 	bl	80067f6 <vListInsertEnd>
 80080ae:	e005      	b.n	80080bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	3318      	adds	r3, #24
 80080b4:	4619      	mov	r1, r3
 80080b6:	480e      	ldr	r0, [pc, #56]	; (80080f0 <xTaskRemoveFromEventList+0xb8>)
 80080b8:	f7fe fb9d 	bl	80067f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c0:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <xTaskRemoveFromEventList+0xbc>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d905      	bls.n	80080d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80080ca:	2301      	movs	r3, #1
 80080cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80080ce:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <xTaskRemoveFromEventList+0xc0>)
 80080d0:	2201      	movs	r2, #1
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	e001      	b.n	80080da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80080d6:	2300      	movs	r3, #0
 80080d8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80080da:	697b      	ldr	r3, [r7, #20]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	20000d88 	.word	0x20000d88
 80080e8:	20000d68 	.word	0x20000d68
 80080ec:	20000890 	.word	0x20000890
 80080f0:	20000d20 	.word	0x20000d20
 80080f4:	2000088c 	.word	0x2000088c
 80080f8:	20000d74 	.word	0x20000d74

080080fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008104:	4b06      	ldr	r3, [pc, #24]	; (8008120 <vTaskInternalSetTimeOutState+0x24>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800810c:	4b05      	ldr	r3, [pc, #20]	; (8008124 <vTaskInternalSetTimeOutState+0x28>)
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	605a      	str	r2, [r3, #4]
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	bc80      	pop	{r7}
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	20000d78 	.word	0x20000d78
 8008124:	20000d64 	.word	0x20000d64

08008128 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d109      	bne.n	800814c <xTaskCheckForTimeOut+0x24>
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	613b      	str	r3, [r7, #16]
 800814a:	e7fe      	b.n	800814a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d109      	bne.n	8008166 <xTaskCheckForTimeOut+0x3e>
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	60fb      	str	r3, [r7, #12]
 8008164:	e7fe      	b.n	8008164 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008166:	f000 fef7 	bl	8008f58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800816a:	4b1d      	ldr	r3, [pc, #116]	; (80081e0 <xTaskCheckForTimeOut+0xb8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008182:	d102      	bne.n	800818a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008184:	2300      	movs	r3, #0
 8008186:	61fb      	str	r3, [r7, #28]
 8008188:	e023      	b.n	80081d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4b15      	ldr	r3, [pc, #84]	; (80081e4 <xTaskCheckForTimeOut+0xbc>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	429a      	cmp	r2, r3
 8008194:	d007      	beq.n	80081a6 <xTaskCheckForTimeOut+0x7e>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	69ba      	ldr	r2, [r7, #24]
 800819c:	429a      	cmp	r2, r3
 800819e:	d302      	bcc.n	80081a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80081a0:	2301      	movs	r3, #1
 80081a2:	61fb      	str	r3, [r7, #28]
 80081a4:	e015      	b.n	80081d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d20b      	bcs.n	80081c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	1ad2      	subs	r2, r2, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff ff9d 	bl	80080fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80081c2:	2300      	movs	r3, #0
 80081c4:	61fb      	str	r3, [r7, #28]
 80081c6:	e004      	b.n	80081d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80081ce:	2301      	movs	r3, #1
 80081d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80081d2:	f000 feef 	bl	8008fb4 <vPortExitCritical>

	return xReturn;
 80081d6:	69fb      	ldr	r3, [r7, #28]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3720      	adds	r7, #32
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20000d64 	.word	0x20000d64
 80081e4:	20000d78 	.word	0x20000d78

080081e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081e8:	b480      	push	{r7}
 80081ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081ec:	4b03      	ldr	r3, [pc, #12]	; (80081fc <vTaskMissedYield+0x14>)
 80081ee:	2201      	movs	r2, #1
 80081f0:	601a      	str	r2, [r3, #0]
}
 80081f2:	bf00      	nop
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	20000d74 	.word	0x20000d74

08008200 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008208:	f000 f852 	bl	80082b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800820c:	4b06      	ldr	r3, [pc, #24]	; (8008228 <prvIdleTask+0x28>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d9f9      	bls.n	8008208 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008214:	4b05      	ldr	r3, [pc, #20]	; (800822c <prvIdleTask+0x2c>)
 8008216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008224:	e7f0      	b.n	8008208 <prvIdleTask+0x8>
 8008226:	bf00      	nop
 8008228:	20000890 	.word	0x20000890
 800822c:	e000ed04 	.word	0xe000ed04

08008230 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008236:	2300      	movs	r3, #0
 8008238:	607b      	str	r3, [r7, #4]
 800823a:	e00c      	b.n	8008256 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	4613      	mov	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4a12      	ldr	r2, [pc, #72]	; (8008290 <prvInitialiseTaskLists+0x60>)
 8008248:	4413      	add	r3, r2
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe faa8 	bl	80067a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	3301      	adds	r3, #1
 8008254:	607b      	str	r3, [r7, #4]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b37      	cmp	r3, #55	; 0x37
 800825a:	d9ef      	bls.n	800823c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800825c:	480d      	ldr	r0, [pc, #52]	; (8008294 <prvInitialiseTaskLists+0x64>)
 800825e:	f7fe fa9f 	bl	80067a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008262:	480d      	ldr	r0, [pc, #52]	; (8008298 <prvInitialiseTaskLists+0x68>)
 8008264:	f7fe fa9c 	bl	80067a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008268:	480c      	ldr	r0, [pc, #48]	; (800829c <prvInitialiseTaskLists+0x6c>)
 800826a:	f7fe fa99 	bl	80067a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800826e:	480c      	ldr	r0, [pc, #48]	; (80082a0 <prvInitialiseTaskLists+0x70>)
 8008270:	f7fe fa96 	bl	80067a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008274:	480b      	ldr	r0, [pc, #44]	; (80082a4 <prvInitialiseTaskLists+0x74>)
 8008276:	f7fe fa93 	bl	80067a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800827a:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <prvInitialiseTaskLists+0x78>)
 800827c:	4a05      	ldr	r2, [pc, #20]	; (8008294 <prvInitialiseTaskLists+0x64>)
 800827e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008280:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <prvInitialiseTaskLists+0x7c>)
 8008282:	4a05      	ldr	r2, [pc, #20]	; (8008298 <prvInitialiseTaskLists+0x68>)
 8008284:	601a      	str	r2, [r3, #0]
}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20000890 	.word	0x20000890
 8008294:	20000cf0 	.word	0x20000cf0
 8008298:	20000d04 	.word	0x20000d04
 800829c:	20000d20 	.word	0x20000d20
 80082a0:	20000d34 	.word	0x20000d34
 80082a4:	20000d4c 	.word	0x20000d4c
 80082a8:	20000d18 	.word	0x20000d18
 80082ac:	20000d1c 	.word	0x20000d1c

080082b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082b6:	e019      	b.n	80082ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082b8:	f000 fe4e 	bl	8008f58 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80082bc:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <prvCheckTasksWaitingTermination+0x4c>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fe faef 	bl	80068ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80082ce:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <prvCheckTasksWaitingTermination+0x50>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	4a0a      	ldr	r2, [pc, #40]	; (8008300 <prvCheckTasksWaitingTermination+0x50>)
 80082d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80082d8:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <prvCheckTasksWaitingTermination+0x54>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3b01      	subs	r3, #1
 80082de:	4a09      	ldr	r2, [pc, #36]	; (8008304 <prvCheckTasksWaitingTermination+0x54>)
 80082e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80082e2:	f000 fe67 	bl	8008fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f80e 	bl	8008308 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082ec:	4b05      	ldr	r3, [pc, #20]	; (8008304 <prvCheckTasksWaitingTermination+0x54>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e1      	bne.n	80082b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20000d34 	.word	0x20000d34
 8008300:	20000d60 	.word	0x20000d60
 8008304:	20000d48 	.word	0x20000d48

08008308 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008316:	2b00      	cmp	r3, #0
 8008318:	d108      	bne.n	800832c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831e:	4618      	mov	r0, r3
 8008320:	f000 ffd2 	bl	80092c8 <vPortFree>
				vPortFree( pxTCB );
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 ffcf 	bl	80092c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800832a:	e017      	b.n	800835c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008332:	2b01      	cmp	r3, #1
 8008334:	d103      	bne.n	800833e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 ffc6 	bl	80092c8 <vPortFree>
	}
 800833c:	e00e      	b.n	800835c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008344:	2b02      	cmp	r3, #2
 8008346:	d009      	beq.n	800835c <prvDeleteTCB+0x54>
 8008348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	e7fe      	b.n	800835a <prvDeleteTCB+0x52>
	}
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800836a:	4b0e      	ldr	r3, [pc, #56]	; (80083a4 <prvResetNextTaskUnblockTime+0x40>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <prvResetNextTaskUnblockTime+0x14>
 8008374:	2301      	movs	r3, #1
 8008376:	e000      	b.n	800837a <prvResetNextTaskUnblockTime+0x16>
 8008378:	2300      	movs	r3, #0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d004      	beq.n	8008388 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800837e:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <prvResetNextTaskUnblockTime+0x44>)
 8008380:	f04f 32ff 	mov.w	r2, #4294967295
 8008384:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008386:	e008      	b.n	800839a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008388:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <prvResetNextTaskUnblockTime+0x40>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	4a04      	ldr	r2, [pc, #16]	; (80083a8 <prvResetNextTaskUnblockTime+0x44>)
 8008398:	6013      	str	r3, [r2, #0]
}
 800839a:	bf00      	nop
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	bc80      	pop	{r7}
 80083a2:	4770      	bx	lr
 80083a4:	20000d18 	.word	0x20000d18
 80083a8:	20000d80 	.word	0x20000d80

080083ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80083b2:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <xTaskGetSchedulerState+0x34>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d102      	bne.n	80083c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083ba:	2301      	movs	r3, #1
 80083bc:	607b      	str	r3, [r7, #4]
 80083be:	e008      	b.n	80083d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083c0:	4b08      	ldr	r3, [pc, #32]	; (80083e4 <xTaskGetSchedulerState+0x38>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d102      	bne.n	80083ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083c8:	2302      	movs	r3, #2
 80083ca:	607b      	str	r3, [r7, #4]
 80083cc:	e001      	b.n	80083d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083ce:	2300      	movs	r3, #0
 80083d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083d2:	687b      	ldr	r3, [r7, #4]
	}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20000d6c 	.word	0x20000d6c
 80083e4:	20000d88 	.word	0x20000d88

080083e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80083f4:	2300      	movs	r3, #0
 80083f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d056      	beq.n	80084ac <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008402:	4b2d      	ldr	r3, [pc, #180]	; (80084b8 <xTaskPriorityInherit+0xd0>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	429a      	cmp	r2, r3
 800840a:	d246      	bcs.n	800849a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	db06      	blt.n	8008422 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008414:	4b28      	ldr	r3, [pc, #160]	; (80084b8 <xTaskPriorityInherit+0xd0>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	6959      	ldr	r1, [r3, #20]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842a:	4613      	mov	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4a22      	ldr	r2, [pc, #136]	; (80084bc <xTaskPriorityInherit+0xd4>)
 8008434:	4413      	add	r3, r2
 8008436:	4299      	cmp	r1, r3
 8008438:	d101      	bne.n	800843e <xTaskPriorityInherit+0x56>
 800843a:	2301      	movs	r3, #1
 800843c:	e000      	b.n	8008440 <xTaskPriorityInherit+0x58>
 800843e:	2300      	movs	r3, #0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d022      	beq.n	800848a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	3304      	adds	r3, #4
 8008448:	4618      	mov	r0, r3
 800844a:	f7fe fa2f 	bl	80068ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800844e:	4b1a      	ldr	r3, [pc, #104]	; (80084b8 <xTaskPriorityInherit+0xd0>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845c:	4b18      	ldr	r3, [pc, #96]	; (80084c0 <xTaskPriorityInherit+0xd8>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d903      	bls.n	800846c <xTaskPriorityInherit+0x84>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	4a15      	ldr	r2, [pc, #84]	; (80084c0 <xTaskPriorityInherit+0xd8>)
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008470:	4613      	mov	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4a10      	ldr	r2, [pc, #64]	; (80084bc <xTaskPriorityInherit+0xd4>)
 800847a:	441a      	add	r2, r3
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	3304      	adds	r3, #4
 8008480:	4619      	mov	r1, r3
 8008482:	4610      	mov	r0, r2
 8008484:	f7fe f9b7 	bl	80067f6 <vListInsertEnd>
 8008488:	e004      	b.n	8008494 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800848a:	4b0b      	ldr	r3, [pc, #44]	; (80084b8 <xTaskPriorityInherit+0xd0>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008494:	2301      	movs	r3, #1
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	e008      	b.n	80084ac <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800849e:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <xTaskPriorityInherit+0xd0>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d201      	bcs.n	80084ac <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80084a8:	2301      	movs	r3, #1
 80084aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084ac:	68fb      	ldr	r3, [r7, #12]
	}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	2000088c 	.word	0x2000088c
 80084bc:	20000890 	.word	0x20000890
 80084c0:	20000d68 	.word	0x20000d68

080084c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084d0:	2300      	movs	r3, #0
 80084d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d054      	beq.n	8008584 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084da:	4b2d      	ldr	r3, [pc, #180]	; (8008590 <xTaskPriorityDisinherit+0xcc>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d009      	beq.n	80084f8 <xTaskPriorityDisinherit+0x34>
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	60fb      	str	r3, [r7, #12]
 80084f6:	e7fe      	b.n	80084f6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d109      	bne.n	8008514 <xTaskPriorityDisinherit+0x50>
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	60bb      	str	r3, [r7, #8]
 8008512:	e7fe      	b.n	8008512 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008518:	1e5a      	subs	r2, r3, #1
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	665a      	str	r2, [r3, #100]	; 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008526:	429a      	cmp	r2, r3
 8008528:	d02c      	beq.n	8008584 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800852e:	2b00      	cmp	r3, #0
 8008530:	d128      	bne.n	8008584 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	3304      	adds	r3, #4
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe f9b8 	bl	80068ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008554:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <xTaskPriorityDisinherit+0xd0>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	429a      	cmp	r2, r3
 800855a:	d903      	bls.n	8008564 <xTaskPriorityDisinherit+0xa0>
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	4a0c      	ldr	r2, [pc, #48]	; (8008594 <xTaskPriorityDisinherit+0xd0>)
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4a09      	ldr	r2, [pc, #36]	; (8008598 <xTaskPriorityDisinherit+0xd4>)
 8008572:	441a      	add	r2, r3
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	3304      	adds	r3, #4
 8008578:	4619      	mov	r1, r3
 800857a:	4610      	mov	r0, r2
 800857c:	f7fe f93b 	bl	80067f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008580:	2301      	movs	r3, #1
 8008582:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008584:	697b      	ldr	r3, [r7, #20]
	}
 8008586:	4618      	mov	r0, r3
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	2000088c 	.word	0x2000088c
 8008594:	20000d68 	.word	0x20000d68
 8008598:	20000890 	.word	0x20000890

0800859c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80085aa:	2301      	movs	r3, #1
 80085ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d06d      	beq.n	8008690 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d109      	bne.n	80085d0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	e7fe      	b.n	80085ce <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d902      	bls.n	80085e0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	61fb      	str	r3, [r7, #28]
 80085de:	e002      	b.n	80085e6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d04f      	beq.n	8008690 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d14a      	bne.n	8008690 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80085fa:	4b27      	ldr	r3, [pc, #156]	; (8008698 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	429a      	cmp	r2, r3
 8008602:	d109      	bne.n	8008618 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	60bb      	str	r3, [r7, #8]
 8008616:	e7fe      	b.n	8008616 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	69fa      	ldr	r2, [r7, #28]
 8008622:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	2b00      	cmp	r3, #0
 800862a:	db04      	blt.n	8008636 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	6959      	ldr	r1, [r3, #20]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	4613      	mov	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4a15      	ldr	r2, [pc, #84]	; (800869c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008646:	4413      	add	r3, r2
 8008648:	4299      	cmp	r1, r3
 800864a:	d101      	bne.n	8008650 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800864c:	2301      	movs	r3, #1
 800864e:	e000      	b.n	8008652 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8008650:	2300      	movs	r3, #0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d01c      	beq.n	8008690 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	3304      	adds	r3, #4
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe f926 	bl	80068ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008664:	4b0e      	ldr	r3, [pc, #56]	; (80086a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	429a      	cmp	r2, r3
 800866a:	d903      	bls.n	8008674 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008670:	4a0b      	ldr	r2, [pc, #44]	; (80086a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008672:	6013      	str	r3, [r2, #0]
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008678:	4613      	mov	r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4a06      	ldr	r2, [pc, #24]	; (800869c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008682:	441a      	add	r2, r3
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	3304      	adds	r3, #4
 8008688:	4619      	mov	r1, r3
 800868a:	4610      	mov	r0, r2
 800868c:	f7fe f8b3 	bl	80067f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008690:	bf00      	nop
 8008692:	3720      	adds	r7, #32
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	2000088c 	.word	0x2000088c
 800869c:	20000890 	.word	0x20000890
 80086a0:	20000d68 	.word	0x20000d68

080086a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80086a8:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d004      	beq.n	80086ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80086b0:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80086b6:	3201      	adds	r2, #1
 80086b8:	665a      	str	r2, [r3, #100]	; 0x64
		}

		return pxCurrentTCB;
 80086ba:	4b03      	ldr	r3, [pc, #12]	; (80086c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80086bc:	681b      	ldr	r3, [r3, #0]
	}
 80086be:	4618      	mov	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	2000088c 	.word	0x2000088c

080086cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086d6:	4b21      	ldr	r3, [pc, #132]	; (800875c <prvAddCurrentTaskToDelayedList+0x90>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086dc:	4b20      	ldr	r3, [pc, #128]	; (8008760 <prvAddCurrentTaskToDelayedList+0x94>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3304      	adds	r3, #4
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe f8e2 	bl	80068ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ee:	d10a      	bne.n	8008706 <prvAddCurrentTaskToDelayedList+0x3a>
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d007      	beq.n	8008706 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086f6:	4b1a      	ldr	r3, [pc, #104]	; (8008760 <prvAddCurrentTaskToDelayedList+0x94>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3304      	adds	r3, #4
 80086fc:	4619      	mov	r1, r3
 80086fe:	4819      	ldr	r0, [pc, #100]	; (8008764 <prvAddCurrentTaskToDelayedList+0x98>)
 8008700:	f7fe f879 	bl	80067f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008704:	e026      	b.n	8008754 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4413      	add	r3, r2
 800870c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800870e:	4b14      	ldr	r3, [pc, #80]	; (8008760 <prvAddCurrentTaskToDelayedList+0x94>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	429a      	cmp	r2, r3
 800871c:	d209      	bcs.n	8008732 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800871e:	4b12      	ldr	r3, [pc, #72]	; (8008768 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	4b0f      	ldr	r3, [pc, #60]	; (8008760 <prvAddCurrentTaskToDelayedList+0x94>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3304      	adds	r3, #4
 8008728:	4619      	mov	r1, r3
 800872a:	4610      	mov	r0, r2
 800872c:	f7fe f886 	bl	800683c <vListInsert>
}
 8008730:	e010      	b.n	8008754 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008732:	4b0e      	ldr	r3, [pc, #56]	; (800876c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	4b0a      	ldr	r3, [pc, #40]	; (8008760 <prvAddCurrentTaskToDelayedList+0x94>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3304      	adds	r3, #4
 800873c:	4619      	mov	r1, r3
 800873e:	4610      	mov	r0, r2
 8008740:	f7fe f87c 	bl	800683c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008744:	4b0a      	ldr	r3, [pc, #40]	; (8008770 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	429a      	cmp	r2, r3
 800874c:	d202      	bcs.n	8008754 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800874e:	4a08      	ldr	r2, [pc, #32]	; (8008770 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	6013      	str	r3, [r2, #0]
}
 8008754:	bf00      	nop
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20000d64 	.word	0x20000d64
 8008760:	2000088c 	.word	0x2000088c
 8008764:	20000d4c 	.word	0x20000d4c
 8008768:	20000d1c 	.word	0x20000d1c
 800876c:	20000d18 	.word	0x20000d18
 8008770:	20000d80 	.word	0x20000d80

08008774 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800877a:	2300      	movs	r3, #0
 800877c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800877e:	f000 fac3 	bl	8008d08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008782:	4b1c      	ldr	r3, [pc, #112]	; (80087f4 <xTimerCreateTimerTask+0x80>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d021      	beq.n	80087ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800878e:	2300      	movs	r3, #0
 8008790:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008792:	1d3a      	adds	r2, r7, #4
 8008794:	f107 0108 	add.w	r1, r7, #8
 8008798:	f107 030c 	add.w	r3, r7, #12
 800879c:	4618      	mov	r0, r3
 800879e:	f7fd ffe5 	bl	800676c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80087a2:	6879      	ldr	r1, [r7, #4]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	9202      	str	r2, [sp, #8]
 80087aa:	9301      	str	r3, [sp, #4]
 80087ac:	2302      	movs	r3, #2
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	2300      	movs	r3, #0
 80087b2:	460a      	mov	r2, r1
 80087b4:	4910      	ldr	r1, [pc, #64]	; (80087f8 <xTimerCreateTimerTask+0x84>)
 80087b6:	4811      	ldr	r0, [pc, #68]	; (80087fc <xTimerCreateTimerTask+0x88>)
 80087b8:	f7fe ff5c 	bl	8007674 <xTaskCreateStatic>
 80087bc:	4602      	mov	r2, r0
 80087be:	4b10      	ldr	r3, [pc, #64]	; (8008800 <xTimerCreateTimerTask+0x8c>)
 80087c0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80087c2:	4b0f      	ldr	r3, [pc, #60]	; (8008800 <xTimerCreateTimerTask+0x8c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087ca:	2301      	movs	r3, #1
 80087cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d109      	bne.n	80087e8 <xTimerCreateTimerTask+0x74>
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	613b      	str	r3, [r7, #16]
 80087e6:	e7fe      	b.n	80087e6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80087e8:	697b      	ldr	r3, [r7, #20]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20000dc4 	.word	0x20000dc4
 80087f8:	0800a01c 	.word	0x0800a01c
 80087fc:	0800891d 	.word	0x0800891d
 8008800:	20000dc8 	.word	0x20000dc8

08008804 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08a      	sub	sp, #40	; 0x28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008812:	2300      	movs	r3, #0
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d109      	bne.n	8008830 <xTimerGenericCommand+0x2c>
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	623b      	str	r3, [r7, #32]
 800882e:	e7fe      	b.n	800882e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008830:	4b19      	ldr	r3, [pc, #100]	; (8008898 <xTimerGenericCommand+0x94>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d02a      	beq.n	800888e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2b05      	cmp	r3, #5
 8008848:	dc18      	bgt.n	800887c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800884a:	f7ff fdaf 	bl	80083ac <xTaskGetSchedulerState>
 800884e:	4603      	mov	r3, r0
 8008850:	2b02      	cmp	r3, #2
 8008852:	d109      	bne.n	8008868 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008854:	4b10      	ldr	r3, [pc, #64]	; (8008898 <xTimerGenericCommand+0x94>)
 8008856:	6818      	ldr	r0, [r3, #0]
 8008858:	f107 0110 	add.w	r1, r7, #16
 800885c:	2300      	movs	r3, #0
 800885e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008860:	f7fe f988 	bl	8006b74 <xQueueGenericSend>
 8008864:	6278      	str	r0, [r7, #36]	; 0x24
 8008866:	e012      	b.n	800888e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008868:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <xTimerGenericCommand+0x94>)
 800886a:	6818      	ldr	r0, [r3, #0]
 800886c:	f107 0110 	add.w	r1, r7, #16
 8008870:	2300      	movs	r3, #0
 8008872:	2200      	movs	r2, #0
 8008874:	f7fe f97e 	bl	8006b74 <xQueueGenericSend>
 8008878:	6278      	str	r0, [r7, #36]	; 0x24
 800887a:	e008      	b.n	800888e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <xTimerGenericCommand+0x94>)
 800887e:	6818      	ldr	r0, [r3, #0]
 8008880:	f107 0110 	add.w	r1, r7, #16
 8008884:	2300      	movs	r3, #0
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	f7fe fa6e 	bl	8006d68 <xQueueGenericSendFromISR>
 800888c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008890:	4618      	mov	r0, r3
 8008892:	3728      	adds	r7, #40	; 0x28
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20000dc4 	.word	0x20000dc4

0800889c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b088      	sub	sp, #32
 80088a0:	af02      	add	r7, sp, #8
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088a6:	4b1c      	ldr	r3, [pc, #112]	; (8008918 <prvProcessExpiredTimer+0x7c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fd fff9 	bl	80068ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d121      	bne.n	8008906 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	699a      	ldr	r2, [r3, #24]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	18d1      	adds	r1, r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	6978      	ldr	r0, [r7, #20]
 80088d0:	f000 f8c8 	bl	8008a64 <prvInsertTimerInActiveList>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d015      	beq.n	8008906 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088da:	2300      	movs	r3, #0
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	2300      	movs	r3, #0
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	2100      	movs	r1, #0
 80088e4:	6978      	ldr	r0, [r7, #20]
 80088e6:	f7ff ff8d 	bl	8008804 <xTimerGenericCommand>
 80088ea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d109      	bne.n	8008906 <prvProcessExpiredTimer+0x6a>
 80088f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	e7fe      	b.n	8008904 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	6978      	ldr	r0, [r7, #20]
 800890c:	4798      	blx	r3
}
 800890e:	bf00      	nop
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20000dbc 	.word	0x20000dbc

0800891c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008924:	f107 0308 	add.w	r3, r7, #8
 8008928:	4618      	mov	r0, r3
 800892a:	f000 f857 	bl	80089dc <prvGetNextExpireTime>
 800892e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4619      	mov	r1, r3
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 f803 	bl	8008940 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800893a:	f000 f8d5 	bl	8008ae8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800893e:	e7f1      	b.n	8008924 <prvTimerTask+0x8>

08008940 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800894a:	f7ff f939 	bl	8007bc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800894e:	f107 0308 	add.w	r3, r7, #8
 8008952:	4618      	mov	r0, r3
 8008954:	f000 f866 	bl	8008a24 <prvSampleTimeNow>
 8008958:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d130      	bne.n	80089c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10a      	bne.n	800897c <prvProcessTimerOrBlockTask+0x3c>
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	429a      	cmp	r2, r3
 800896c:	d806      	bhi.n	800897c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800896e:	f7ff f935 	bl	8007bdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008972:	68f9      	ldr	r1, [r7, #12]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff ff91 	bl	800889c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800897a:	e024      	b.n	80089c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d008      	beq.n	8008994 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008982:	4b13      	ldr	r3, [pc, #76]	; (80089d0 <prvProcessTimerOrBlockTask+0x90>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	bf0c      	ite	eq
 800898c:	2301      	moveq	r3, #1
 800898e:	2300      	movne	r3, #0
 8008990:	b2db      	uxtb	r3, r3
 8008992:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008994:	4b0f      	ldr	r3, [pc, #60]	; (80089d4 <prvProcessTimerOrBlockTask+0x94>)
 8008996:	6818      	ldr	r0, [r3, #0]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	4619      	mov	r1, r3
 80089a2:	f7fe fe33 	bl	800760c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089a6:	f7ff f919 	bl	8007bdc <xTaskResumeAll>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10a      	bne.n	80089c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089b0:	4b09      	ldr	r3, [pc, #36]	; (80089d8 <prvProcessTimerOrBlockTask+0x98>)
 80089b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	f3bf 8f6f 	isb	sy
}
 80089c0:	e001      	b.n	80089c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089c2:	f7ff f90b 	bl	8007bdc <xTaskResumeAll>
}
 80089c6:	bf00      	nop
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20000dc0 	.word	0x20000dc0
 80089d4:	20000dc4 	.word	0x20000dc4
 80089d8:	e000ed04 	.word	0xe000ed04

080089dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089e4:	4b0e      	ldr	r3, [pc, #56]	; (8008a20 <prvGetNextExpireTime+0x44>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	bf0c      	ite	eq
 80089ee:	2301      	moveq	r3, #1
 80089f0:	2300      	movne	r3, #0
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d105      	bne.n	8008a0e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a02:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <prvGetNextExpireTime+0x44>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	e001      	b.n	8008a12 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a12:	68fb      	ldr	r3, [r7, #12]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bc80      	pop	{r7}
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	20000dbc 	.word	0x20000dbc

08008a24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a2c:	f7ff f972 	bl	8007d14 <xTaskGetTickCount>
 8008a30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a32:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <prvSampleTimeNow+0x3c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d205      	bcs.n	8008a48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a3c:	f000 f904 	bl	8008c48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	e002      	b.n	8008a4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a4e:	4a04      	ldr	r2, [pc, #16]	; (8008a60 <prvSampleTimeNow+0x3c>)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a54:	68fb      	ldr	r3, [r7, #12]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000dcc 	.word	0x20000dcc

08008a64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
 8008a70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d812      	bhi.n	8008ab0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	1ad2      	subs	r2, r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d302      	bcc.n	8008a9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	e01b      	b.n	8008ad6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a9e:	4b10      	ldr	r3, [pc, #64]	; (8008ae0 <prvInsertTimerInActiveList+0x7c>)
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	f7fd fec7 	bl	800683c <vListInsert>
 8008aae:	e012      	b.n	8008ad6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d206      	bcs.n	8008ac6 <prvInsertTimerInActiveList+0x62>
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d302      	bcc.n	8008ac6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	617b      	str	r3, [r7, #20]
 8008ac4:	e007      	b.n	8008ad6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ac6:	4b07      	ldr	r3, [pc, #28]	; (8008ae4 <prvInsertTimerInActiveList+0x80>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3304      	adds	r3, #4
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	f7fd feb3 	bl	800683c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ad6:	697b      	ldr	r3, [r7, #20]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	20000dc0 	.word	0x20000dc0
 8008ae4:	20000dbc 	.word	0x20000dbc

08008ae8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08e      	sub	sp, #56	; 0x38
 8008aec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008aee:	e099      	b.n	8008c24 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	da17      	bge.n	8008b26 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008af6:	1d3b      	adds	r3, r7, #4
 8008af8:	3304      	adds	r3, #4
 8008afa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d109      	bne.n	8008b16 <prvProcessReceivedCommands+0x2e>
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	61fb      	str	r3, [r7, #28]
 8008b14:	e7fe      	b.n	8008b14 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b1c:	6850      	ldr	r0, [r2, #4]
 8008b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b20:	6892      	ldr	r2, [r2, #8]
 8008b22:	4611      	mov	r1, r2
 8008b24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	db7a      	blt.n	8008c22 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d004      	beq.n	8008b42 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fd feb5 	bl	80068ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b42:	463b      	mov	r3, r7
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff ff6d 	bl	8008a24 <prvSampleTimeNow>
 8008b4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b09      	cmp	r3, #9
 8008b50:	d868      	bhi.n	8008c24 <prvProcessReceivedCommands+0x13c>
 8008b52:	a201      	add	r2, pc, #4	; (adr r2, 8008b58 <prvProcessReceivedCommands+0x70>)
 8008b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b58:	08008b81 	.word	0x08008b81
 8008b5c:	08008b81 	.word	0x08008b81
 8008b60:	08008b81 	.word	0x08008b81
 8008b64:	08008c25 	.word	0x08008c25
 8008b68:	08008bdb 	.word	0x08008bdb
 8008b6c:	08008c11 	.word	0x08008c11
 8008b70:	08008b81 	.word	0x08008b81
 8008b74:	08008b81 	.word	0x08008b81
 8008b78:	08008c25 	.word	0x08008c25
 8008b7c:	08008bdb 	.word	0x08008bdb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	18d1      	adds	r1, r2, r3
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b8e:	f7ff ff69 	bl	8008a64 <prvInsertTimerInActiveList>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d045      	beq.n	8008c24 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b9e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d13d      	bne.n	8008c24 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	441a      	add	r2, r3
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bba:	f7ff fe23 	bl	8008804 <xTimerGenericCommand>
 8008bbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d12e      	bne.n	8008c24 <prvProcessReceivedCommands+0x13c>
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	61bb      	str	r3, [r7, #24]
 8008bd8:	e7fe      	b.n	8008bd8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d109      	bne.n	8008bfc <prvProcessReceivedCommands+0x114>
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	617b      	str	r3, [r7, #20]
 8008bfa:	e7fe      	b.n	8008bfa <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	699a      	ldr	r2, [r3, #24]
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	18d1      	adds	r1, r2, r3
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c0a:	f7ff ff2b 	bl	8008a64 <prvInsertTimerInActiveList>
					break;
 8008c0e:	e009      	b.n	8008c24 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d104      	bne.n	8008c24 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008c1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c1c:	f000 fb54 	bl	80092c8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c20:	e000      	b.n	8008c24 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c22:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c24:	4b07      	ldr	r3, [pc, #28]	; (8008c44 <prvProcessReceivedCommands+0x15c>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	1d39      	adds	r1, r7, #4
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fe f9b9 	bl	8006fa4 <xQueueReceive>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f47f af5b 	bne.w	8008af0 <prvProcessReceivedCommands+0x8>
	}
}
 8008c3a:	bf00      	nop
 8008c3c:	3730      	adds	r7, #48	; 0x30
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000dc4 	.word	0x20000dc4

08008c48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c4e:	e044      	b.n	8008cda <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c50:	4b2b      	ldr	r3, [pc, #172]	; (8008d00 <prvSwitchTimerLists+0xb8>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c5a:	4b29      	ldr	r3, [pc, #164]	; (8008d00 <prvSwitchTimerLists+0xb8>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3304      	adds	r3, #4
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fd fe1f 	bl	80068ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d12d      	bne.n	8008cda <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	4413      	add	r3, r2
 8008c86:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d90e      	bls.n	8008cae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c9c:	4b18      	ldr	r3, [pc, #96]	; (8008d00 <prvSwitchTimerLists+0xb8>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	f7fd fdc8 	bl	800683c <vListInsert>
 8008cac:	e015      	b.n	8008cda <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cae:	2300      	movs	r3, #0
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f7ff fda3 	bl	8008804 <xTimerGenericCommand>
 8008cbe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d109      	bne.n	8008cda <prvSwitchTimerLists+0x92>
 8008cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	e7fe      	b.n	8008cd8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cda:	4b09      	ldr	r3, [pc, #36]	; (8008d00 <prvSwitchTimerLists+0xb8>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1b5      	bne.n	8008c50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ce4:	4b06      	ldr	r3, [pc, #24]	; (8008d00 <prvSwitchTimerLists+0xb8>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008cea:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <prvSwitchTimerLists+0xbc>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a04      	ldr	r2, [pc, #16]	; (8008d00 <prvSwitchTimerLists+0xb8>)
 8008cf0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008cf2:	4a04      	ldr	r2, [pc, #16]	; (8008d04 <prvSwitchTimerLists+0xbc>)
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	6013      	str	r3, [r2, #0]
}
 8008cf8:	bf00      	nop
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	20000dbc 	.word	0x20000dbc
 8008d04:	20000dc0 	.word	0x20000dc0

08008d08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d0e:	f000 f923 	bl	8008f58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d12:	4b15      	ldr	r3, [pc, #84]	; (8008d68 <prvCheckForValidListAndQueue+0x60>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d120      	bne.n	8008d5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d1a:	4814      	ldr	r0, [pc, #80]	; (8008d6c <prvCheckForValidListAndQueue+0x64>)
 8008d1c:	f7fd fd40 	bl	80067a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d20:	4813      	ldr	r0, [pc, #76]	; (8008d70 <prvCheckForValidListAndQueue+0x68>)
 8008d22:	f7fd fd3d 	bl	80067a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d26:	4b13      	ldr	r3, [pc, #76]	; (8008d74 <prvCheckForValidListAndQueue+0x6c>)
 8008d28:	4a10      	ldr	r2, [pc, #64]	; (8008d6c <prvCheckForValidListAndQueue+0x64>)
 8008d2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d2c:	4b12      	ldr	r3, [pc, #72]	; (8008d78 <prvCheckForValidListAndQueue+0x70>)
 8008d2e:	4a10      	ldr	r2, [pc, #64]	; (8008d70 <prvCheckForValidListAndQueue+0x68>)
 8008d30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d32:	2300      	movs	r3, #0
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	4b11      	ldr	r3, [pc, #68]	; (8008d7c <prvCheckForValidListAndQueue+0x74>)
 8008d38:	4a11      	ldr	r2, [pc, #68]	; (8008d80 <prvCheckForValidListAndQueue+0x78>)
 8008d3a:	2110      	movs	r1, #16
 8008d3c:	200a      	movs	r0, #10
 8008d3e:	f7fd fe47 	bl	80069d0 <xQueueGenericCreateStatic>
 8008d42:	4602      	mov	r2, r0
 8008d44:	4b08      	ldr	r3, [pc, #32]	; (8008d68 <prvCheckForValidListAndQueue+0x60>)
 8008d46:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d48:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <prvCheckForValidListAndQueue+0x60>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d005      	beq.n	8008d5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d50:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <prvCheckForValidListAndQueue+0x60>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	490b      	ldr	r1, [pc, #44]	; (8008d84 <prvCheckForValidListAndQueue+0x7c>)
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe fc30 	bl	80075bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d5c:	f000 f92a 	bl	8008fb4 <vPortExitCritical>
}
 8008d60:	bf00      	nop
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20000dc4 	.word	0x20000dc4
 8008d6c:	20000d94 	.word	0x20000d94
 8008d70:	20000da8 	.word	0x20000da8
 8008d74:	20000dbc 	.word	0x20000dbc
 8008d78:	20000dc0 	.word	0x20000dc0
 8008d7c:	20000e70 	.word	0x20000e70
 8008d80:	20000dd0 	.word	0x20000dd0
 8008d84:	0800a024 	.word	0x0800a024

08008d88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3b04      	subs	r3, #4
 8008d98:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	3b04      	subs	r3, #4
 8008da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	f023 0201 	bic.w	r2, r3, #1
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3b04      	subs	r3, #4
 8008db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008db8:	4a08      	ldr	r2, [pc, #32]	; (8008ddc <pxPortInitialiseStack+0x54>)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3b14      	subs	r3, #20
 8008dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3b20      	subs	r3, #32
 8008dce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bc80      	pop	{r7}
 8008dda:	4770      	bx	lr
 8008ddc:	08008de1 	.word	0x08008de1

08008de0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008dea:	4b10      	ldr	r3, [pc, #64]	; (8008e2c <prvTaskExitError+0x4c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df2:	d009      	beq.n	8008e08 <prvTaskExitError+0x28>
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	60fb      	str	r3, [r7, #12]
 8008e06:	e7fe      	b.n	8008e06 <prvTaskExitError+0x26>
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e1a:	bf00      	nop
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0fc      	beq.n	8008e1c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e22:	bf00      	nop
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bc80      	pop	{r7}
 8008e2a:	4770      	bx	lr
 8008e2c:	2000011c 	.word	0x2000011c

08008e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e30:	4b07      	ldr	r3, [pc, #28]	; (8008e50 <pxCurrentTCBConst2>)
 8008e32:	6819      	ldr	r1, [r3, #0]
 8008e34:	6808      	ldr	r0, [r1, #0]
 8008e36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e3a:	f380 8809 	msr	PSP, r0
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f04f 0000 	mov.w	r0, #0
 8008e46:	f380 8811 	msr	BASEPRI, r0
 8008e4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008e4e:	4770      	bx	lr

08008e50 <pxCurrentTCBConst2>:
 8008e50:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop

08008e58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008e58:	4806      	ldr	r0, [pc, #24]	; (8008e74 <prvPortStartFirstTask+0x1c>)
 8008e5a:	6800      	ldr	r0, [r0, #0]
 8008e5c:	6800      	ldr	r0, [r0, #0]
 8008e5e:	f380 8808 	msr	MSP, r0
 8008e62:	b662      	cpsie	i
 8008e64:	b661      	cpsie	f
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	df00      	svc	0
 8008e70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e72:	bf00      	nop
 8008e74:	e000ed08 	.word	0xe000ed08

08008e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e7e:	4b31      	ldr	r3, [pc, #196]	; (8008f44 <xPortStartScheduler+0xcc>)
 8008e80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	22ff      	movs	r2, #255	; 0xff
 8008e8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	4b29      	ldr	r3, [pc, #164]	; (8008f48 <xPortStartScheduler+0xd0>)
 8008ea4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ea6:	4b29      	ldr	r3, [pc, #164]	; (8008f4c <xPortStartScheduler+0xd4>)
 8008ea8:	2207      	movs	r2, #7
 8008eaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eac:	e009      	b.n	8008ec2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008eae:	4b27      	ldr	r3, [pc, #156]	; (8008f4c <xPortStartScheduler+0xd4>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	4a25      	ldr	r2, [pc, #148]	; (8008f4c <xPortStartScheduler+0xd4>)
 8008eb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ec2:	78fb      	ldrb	r3, [r7, #3]
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eca:	2b80      	cmp	r3, #128	; 0x80
 8008ecc:	d0ef      	beq.n	8008eae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ece:	4b1f      	ldr	r3, [pc, #124]	; (8008f4c <xPortStartScheduler+0xd4>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f1c3 0307 	rsb	r3, r3, #7
 8008ed6:	2b04      	cmp	r3, #4
 8008ed8:	d009      	beq.n	8008eee <xPortStartScheduler+0x76>
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	60bb      	str	r3, [r7, #8]
 8008eec:	e7fe      	b.n	8008eec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008eee:	4b17      	ldr	r3, [pc, #92]	; (8008f4c <xPortStartScheduler+0xd4>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	021b      	lsls	r3, r3, #8
 8008ef4:	4a15      	ldr	r2, [pc, #84]	; (8008f4c <xPortStartScheduler+0xd4>)
 8008ef6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ef8:	4b14      	ldr	r3, [pc, #80]	; (8008f4c <xPortStartScheduler+0xd4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f00:	4a12      	ldr	r2, [pc, #72]	; (8008f4c <xPortStartScheduler+0xd4>)
 8008f02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f0c:	4b10      	ldr	r3, [pc, #64]	; (8008f50 <xPortStartScheduler+0xd8>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a0f      	ldr	r2, [pc, #60]	; (8008f50 <xPortStartScheduler+0xd8>)
 8008f12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f18:	4b0d      	ldr	r3, [pc, #52]	; (8008f50 <xPortStartScheduler+0xd8>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a0c      	ldr	r2, [pc, #48]	; (8008f50 <xPortStartScheduler+0xd8>)
 8008f1e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f24:	f000 f8b0 	bl	8009088 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f28:	4b0a      	ldr	r3, [pc, #40]	; (8008f54 <xPortStartScheduler+0xdc>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f2e:	f7ff ff93 	bl	8008e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f32:	f7fe ffbb 	bl	8007eac <vTaskSwitchContext>
	prvTaskExitError();
 8008f36:	f7ff ff53 	bl	8008de0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	e000e400 	.word	0xe000e400
 8008f48:	20000ec0 	.word	0x20000ec0
 8008f4c:	20000ec4 	.word	0x20000ec4
 8008f50:	e000ed20 	.word	0xe000ed20
 8008f54:	2000011c 	.word	0x2000011c

08008f58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f70:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <vPortEnterCritical+0x54>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3301      	adds	r3, #1
 8008f76:	4a0d      	ldr	r2, [pc, #52]	; (8008fac <vPortEnterCritical+0x54>)
 8008f78:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f7a:	4b0c      	ldr	r3, [pc, #48]	; (8008fac <vPortEnterCritical+0x54>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d10e      	bne.n	8008fa0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f82:	4b0b      	ldr	r3, [pc, #44]	; (8008fb0 <vPortEnterCritical+0x58>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d009      	beq.n	8008fa0 <vPortEnterCritical+0x48>
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	603b      	str	r3, [r7, #0]
 8008f9e:	e7fe      	b.n	8008f9e <vPortEnterCritical+0x46>
	}
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bc80      	pop	{r7}
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	2000011c 	.word	0x2000011c
 8008fb0:	e000ed04 	.word	0xe000ed04

08008fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008fba:	4b10      	ldr	r3, [pc, #64]	; (8008ffc <vPortExitCritical+0x48>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d109      	bne.n	8008fd6 <vPortExitCritical+0x22>
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	607b      	str	r3, [r7, #4]
 8008fd4:	e7fe      	b.n	8008fd4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008fd6:	4b09      	ldr	r3, [pc, #36]	; (8008ffc <vPortExitCritical+0x48>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	4a07      	ldr	r2, [pc, #28]	; (8008ffc <vPortExitCritical+0x48>)
 8008fde:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fe0:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <vPortExitCritical+0x48>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d104      	bne.n	8008ff2 <vPortExitCritical+0x3e>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bc80      	pop	{r7}
 8008ffa:	4770      	bx	lr
 8008ffc:	2000011c 	.word	0x2000011c

08009000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009000:	f3ef 8009 	mrs	r0, PSP
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	4b0d      	ldr	r3, [pc, #52]	; (8009040 <pxCurrentTCBConst>)
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009010:	6010      	str	r0, [r2, #0]
 8009012:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009016:	f04f 0050 	mov.w	r0, #80	; 0x50
 800901a:	f380 8811 	msr	BASEPRI, r0
 800901e:	f7fe ff45 	bl	8007eac <vTaskSwitchContext>
 8009022:	f04f 0000 	mov.w	r0, #0
 8009026:	f380 8811 	msr	BASEPRI, r0
 800902a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800902e:	6819      	ldr	r1, [r3, #0]
 8009030:	6808      	ldr	r0, [r1, #0]
 8009032:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009036:	f380 8809 	msr	PSP, r0
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	4770      	bx	lr

08009040 <pxCurrentTCBConst>:
 8009040:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop

08009048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009060:	f7fe fe66 	bl	8007d30 <xTaskIncrementTick>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800906a:	4b06      	ldr	r3, [pc, #24]	; (8009084 <xPortSysTickHandler+0x3c>)
 800906c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	2300      	movs	r3, #0
 8009074:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800907c:	bf00      	nop
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	e000ed04 	.word	0xe000ed04

08009088 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009088:	b480      	push	{r7}
 800908a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800908c:	4b0a      	ldr	r3, [pc, #40]	; (80090b8 <vPortSetupTimerInterrupt+0x30>)
 800908e:	2200      	movs	r2, #0
 8009090:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009092:	4b0a      	ldr	r3, [pc, #40]	; (80090bc <vPortSetupTimerInterrupt+0x34>)
 8009094:	2200      	movs	r2, #0
 8009096:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009098:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <vPortSetupTimerInterrupt+0x38>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a09      	ldr	r2, [pc, #36]	; (80090c4 <vPortSetupTimerInterrupt+0x3c>)
 800909e:	fba2 2303 	umull	r2, r3, r2, r3
 80090a2:	099b      	lsrs	r3, r3, #6
 80090a4:	4a08      	ldr	r2, [pc, #32]	; (80090c8 <vPortSetupTimerInterrupt+0x40>)
 80090a6:	3b01      	subs	r3, #1
 80090a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090aa:	4b03      	ldr	r3, [pc, #12]	; (80090b8 <vPortSetupTimerInterrupt+0x30>)
 80090ac:	2207      	movs	r2, #7
 80090ae:	601a      	str	r2, [r3, #0]
}
 80090b0:	bf00      	nop
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bc80      	pop	{r7}
 80090b6:	4770      	bx	lr
 80090b8:	e000e010 	.word	0xe000e010
 80090bc:	e000e018 	.word	0xe000e018
 80090c0:	20000000 	.word	0x20000000
 80090c4:	10624dd3 	.word	0x10624dd3
 80090c8:	e000e014 	.word	0xe000e014

080090cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090d2:	f3ef 8305 	mrs	r3, IPSR
 80090d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b0f      	cmp	r3, #15
 80090dc:	d913      	bls.n	8009106 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090de:	4a15      	ldr	r2, [pc, #84]	; (8009134 <vPortValidateInterruptPriority+0x68>)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4413      	add	r3, r2
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090e8:	4b13      	ldr	r3, [pc, #76]	; (8009138 <vPortValidateInterruptPriority+0x6c>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	7afa      	ldrb	r2, [r7, #11]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d209      	bcs.n	8009106 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	607b      	str	r3, [r7, #4]
 8009104:	e7fe      	b.n	8009104 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009106:	4b0d      	ldr	r3, [pc, #52]	; (800913c <vPortValidateInterruptPriority+0x70>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800910e:	4b0c      	ldr	r3, [pc, #48]	; (8009140 <vPortValidateInterruptPriority+0x74>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	429a      	cmp	r2, r3
 8009114:	d909      	bls.n	800912a <vPortValidateInterruptPriority+0x5e>
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	603b      	str	r3, [r7, #0]
 8009128:	e7fe      	b.n	8009128 <vPortValidateInterruptPriority+0x5c>
	}
 800912a:	bf00      	nop
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	bc80      	pop	{r7}
 8009132:	4770      	bx	lr
 8009134:	e000e3f0 	.word	0xe000e3f0
 8009138:	20000ec0 	.word	0x20000ec0
 800913c:	e000ed0c 	.word	0xe000ed0c
 8009140:	20000ec4 	.word	0x20000ec4

08009144 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b08a      	sub	sp, #40	; 0x28
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800914c:	2300      	movs	r3, #0
 800914e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009150:	f7fe fd36 	bl	8007bc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009154:	4b57      	ldr	r3, [pc, #348]	; (80092b4 <pvPortMalloc+0x170>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800915c:	f000 f90c 	bl	8009378 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009160:	4b55      	ldr	r3, [pc, #340]	; (80092b8 <pvPortMalloc+0x174>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4013      	ands	r3, r2
 8009168:	2b00      	cmp	r3, #0
 800916a:	f040 808c 	bne.w	8009286 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01c      	beq.n	80091ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009174:	2208      	movs	r2, #8
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4413      	add	r3, r2
 800917a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f003 0307 	and.w	r3, r3, #7
 8009182:	2b00      	cmp	r3, #0
 8009184:	d013      	beq.n	80091ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f023 0307 	bic.w	r3, r3, #7
 800918c:	3308      	adds	r3, #8
 800918e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	2b00      	cmp	r3, #0
 8009198:	d009      	beq.n	80091ae <pvPortMalloc+0x6a>
 800919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	617b      	str	r3, [r7, #20]
 80091ac:	e7fe      	b.n	80091ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d068      	beq.n	8009286 <pvPortMalloc+0x142>
 80091b4:	4b41      	ldr	r3, [pc, #260]	; (80092bc <pvPortMalloc+0x178>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d863      	bhi.n	8009286 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091be:	4b40      	ldr	r3, [pc, #256]	; (80092c0 <pvPortMalloc+0x17c>)
 80091c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091c2:	4b3f      	ldr	r3, [pc, #252]	; (80092c0 <pvPortMalloc+0x17c>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091c8:	e004      	b.n	80091d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d903      	bls.n	80091e6 <pvPortMalloc+0xa2>
 80091de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1f1      	bne.n	80091ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091e6:	4b33      	ldr	r3, [pc, #204]	; (80092b4 <pvPortMalloc+0x170>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d04a      	beq.n	8009286 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091f0:	6a3b      	ldr	r3, [r7, #32]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2208      	movs	r2, #8
 80091f6:	4413      	add	r3, r2
 80091f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	1ad2      	subs	r2, r2, r3
 800920a:	2308      	movs	r3, #8
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	429a      	cmp	r2, r3
 8009210:	d91e      	bls.n	8009250 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4413      	add	r3, r2
 8009218:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	f003 0307 	and.w	r3, r3, #7
 8009220:	2b00      	cmp	r3, #0
 8009222:	d009      	beq.n	8009238 <pvPortMalloc+0xf4>
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	613b      	str	r3, [r7, #16]
 8009236:	e7fe      	b.n	8009236 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	1ad2      	subs	r2, r2, r3
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800924a:	69b8      	ldr	r0, [r7, #24]
 800924c:	f000 f8f6 	bl	800943c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009250:	4b1a      	ldr	r3, [pc, #104]	; (80092bc <pvPortMalloc+0x178>)
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	4a18      	ldr	r2, [pc, #96]	; (80092bc <pvPortMalloc+0x178>)
 800925c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800925e:	4b17      	ldr	r3, [pc, #92]	; (80092bc <pvPortMalloc+0x178>)
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	4b18      	ldr	r3, [pc, #96]	; (80092c4 <pvPortMalloc+0x180>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d203      	bcs.n	8009272 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800926a:	4b14      	ldr	r3, [pc, #80]	; (80092bc <pvPortMalloc+0x178>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a15      	ldr	r2, [pc, #84]	; (80092c4 <pvPortMalloc+0x180>)
 8009270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	685a      	ldr	r2, [r3, #4]
 8009276:	4b10      	ldr	r3, [pc, #64]	; (80092b8 <pvPortMalloc+0x174>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	431a      	orrs	r2, r3
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009282:	2200      	movs	r2, #0
 8009284:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009286:	f7fe fca9 	bl	8007bdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	f003 0307 	and.w	r3, r3, #7
 8009290:	2b00      	cmp	r3, #0
 8009292:	d009      	beq.n	80092a8 <pvPortMalloc+0x164>
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	60fb      	str	r3, [r7, #12]
 80092a6:	e7fe      	b.n	80092a6 <pvPortMalloc+0x162>
	return pvReturn;
 80092a8:	69fb      	ldr	r3, [r7, #28]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3728      	adds	r7, #40	; 0x28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20002ed0 	.word	0x20002ed0
 80092b8:	20002edc 	.word	0x20002edc
 80092bc:	20002ed4 	.word	0x20002ed4
 80092c0:	20002ec8 	.word	0x20002ec8
 80092c4:	20002ed8 	.word	0x20002ed8

080092c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d046      	beq.n	8009368 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092da:	2308      	movs	r3, #8
 80092dc:	425b      	negs	r3, r3
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	4413      	add	r3, r2
 80092e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	4b20      	ldr	r3, [pc, #128]	; (8009370 <vPortFree+0xa8>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4013      	ands	r3, r2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d109      	bne.n	800930a <vPortFree+0x42>
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	e7fe      	b.n	8009308 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d009      	beq.n	8009326 <vPortFree+0x5e>
 8009312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	60bb      	str	r3, [r7, #8]
 8009324:	e7fe      	b.n	8009324 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	4b11      	ldr	r3, [pc, #68]	; (8009370 <vPortFree+0xa8>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4013      	ands	r3, r2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d019      	beq.n	8009368 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d115      	bne.n	8009368 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <vPortFree+0xa8>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	43db      	mvns	r3, r3
 8009346:	401a      	ands	r2, r3
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800934c:	f7fe fc38 	bl	8007bc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	4b07      	ldr	r3, [pc, #28]	; (8009374 <vPortFree+0xac>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4413      	add	r3, r2
 800935a:	4a06      	ldr	r2, [pc, #24]	; (8009374 <vPortFree+0xac>)
 800935c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800935e:	6938      	ldr	r0, [r7, #16]
 8009360:	f000 f86c 	bl	800943c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009364:	f7fe fc3a 	bl	8007bdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009368:	bf00      	nop
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	20002edc 	.word	0x20002edc
 8009374:	20002ed4 	.word	0x20002ed4

08009378 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800937e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009382:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009384:	4b27      	ldr	r3, [pc, #156]	; (8009424 <prvHeapInit+0xac>)
 8009386:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f003 0307 	and.w	r3, r3, #7
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00c      	beq.n	80093ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3307      	adds	r3, #7
 8009396:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0307 	bic.w	r3, r3, #7
 800939e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	4a1f      	ldr	r2, [pc, #124]	; (8009424 <prvHeapInit+0xac>)
 80093a8:	4413      	add	r3, r2
 80093aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093b0:	4a1d      	ldr	r2, [pc, #116]	; (8009428 <prvHeapInit+0xb0>)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093b6:	4b1c      	ldr	r3, [pc, #112]	; (8009428 <prvHeapInit+0xb0>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	4413      	add	r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093c4:	2208      	movs	r2, #8
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	1a9b      	subs	r3, r3, r2
 80093ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f023 0307 	bic.w	r3, r3, #7
 80093d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4a15      	ldr	r2, [pc, #84]	; (800942c <prvHeapInit+0xb4>)
 80093d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093da:	4b14      	ldr	r3, [pc, #80]	; (800942c <prvHeapInit+0xb4>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2200      	movs	r2, #0
 80093e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093e2:	4b12      	ldr	r3, [pc, #72]	; (800942c <prvHeapInit+0xb4>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2200      	movs	r2, #0
 80093e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	1ad2      	subs	r2, r2, r3
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093f8:	4b0c      	ldr	r3, [pc, #48]	; (800942c <prvHeapInit+0xb4>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	4a0a      	ldr	r2, [pc, #40]	; (8009430 <prvHeapInit+0xb8>)
 8009406:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	4a09      	ldr	r2, [pc, #36]	; (8009434 <prvHeapInit+0xbc>)
 800940e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009410:	4b09      	ldr	r3, [pc, #36]	; (8009438 <prvHeapInit+0xc0>)
 8009412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009416:	601a      	str	r2, [r3, #0]
}
 8009418:	bf00      	nop
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	bc80      	pop	{r7}
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	20000ec8 	.word	0x20000ec8
 8009428:	20002ec8 	.word	0x20002ec8
 800942c:	20002ed0 	.word	0x20002ed0
 8009430:	20002ed8 	.word	0x20002ed8
 8009434:	20002ed4 	.word	0x20002ed4
 8009438:	20002edc 	.word	0x20002edc

0800943c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009444:	4b27      	ldr	r3, [pc, #156]	; (80094e4 <prvInsertBlockIntoFreeList+0xa8>)
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	e002      	b.n	8009450 <prvInsertBlockIntoFreeList+0x14>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	429a      	cmp	r2, r3
 8009458:	d8f7      	bhi.n	800944a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	4413      	add	r3, r2
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	429a      	cmp	r2, r3
 800946a:	d108      	bne.n	800947e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	441a      	add	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	441a      	add	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	429a      	cmp	r2, r3
 8009490:	d118      	bne.n	80094c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	4b14      	ldr	r3, [pc, #80]	; (80094e8 <prvInsertBlockIntoFreeList+0xac>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	d00d      	beq.n	80094ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	441a      	add	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	e008      	b.n	80094cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094ba:	4b0b      	ldr	r3, [pc, #44]	; (80094e8 <prvInsertBlockIntoFreeList+0xac>)
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	e003      	b.n	80094cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d002      	beq.n	80094da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094da:	bf00      	nop
 80094dc:	3714      	adds	r7, #20
 80094de:	46bd      	mov	sp, r7
 80094e0:	bc80      	pop	{r7}
 80094e2:	4770      	bx	lr
 80094e4:	20002ec8 	.word	0x20002ec8
 80094e8:	20002ed0 	.word	0x20002ed0

080094ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80094f0:	2200      	movs	r2, #0
 80094f2:	4912      	ldr	r1, [pc, #72]	; (800953c <MX_USB_DEVICE_Init+0x50>)
 80094f4:	4812      	ldr	r0, [pc, #72]	; (8009540 <MX_USB_DEVICE_Init+0x54>)
 80094f6:	f7fb ff56 	bl	80053a6 <USBD_Init>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009500:	f7f7 f81a 	bl	8000538 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009504:	490f      	ldr	r1, [pc, #60]	; (8009544 <MX_USB_DEVICE_Init+0x58>)
 8009506:	480e      	ldr	r0, [pc, #56]	; (8009540 <MX_USB_DEVICE_Init+0x54>)
 8009508:	f7fb ff78 	bl	80053fc <USBD_RegisterClass>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009512:	f7f7 f811 	bl	8000538 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009516:	490c      	ldr	r1, [pc, #48]	; (8009548 <MX_USB_DEVICE_Init+0x5c>)
 8009518:	4809      	ldr	r0, [pc, #36]	; (8009540 <MX_USB_DEVICE_Init+0x54>)
 800951a:	f7fb fea9 	bl	8005270 <USBD_CDC_RegisterInterface>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009524:	f7f7 f808 	bl	8000538 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009528:	4805      	ldr	r0, [pc, #20]	; (8009540 <MX_USB_DEVICE_Init+0x54>)
 800952a:	f7fb ff80 	bl	800542e <USBD_Start>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d001      	beq.n	8009538 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009534:	f7f7 f800 	bl	8000538 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009538:	bf00      	nop
 800953a:	bd80      	pop	{r7, pc}
 800953c:	20000130 	.word	0x20000130
 8009540:	200031b4 	.word	0x200031b4
 8009544:	20000018 	.word	0x20000018
 8009548:	20000120 	.word	0x20000120

0800954c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009550:	2200      	movs	r2, #0
 8009552:	4905      	ldr	r1, [pc, #20]	; (8009568 <CDC_Init_FS+0x1c>)
 8009554:	4805      	ldr	r0, [pc, #20]	; (800956c <CDC_Init_FS+0x20>)
 8009556:	f7fb fea1 	bl	800529c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800955a:	4905      	ldr	r1, [pc, #20]	; (8009570 <CDC_Init_FS+0x24>)
 800955c:	4803      	ldr	r0, [pc, #12]	; (800956c <CDC_Init_FS+0x20>)
 800955e:	f7fb feb6 	bl	80052ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009562:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009564:	4618      	mov	r0, r3
 8009566:	bd80      	pop	{r7, pc}
 8009568:	200034b8 	.word	0x200034b8
 800956c:	200031b4 	.word	0x200031b4
 8009570:	20003478 	.word	0x20003478

08009574 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009574:	b480      	push	{r7}
 8009576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009578:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800957a:	4618      	mov	r0, r3
 800957c:	46bd      	mov	sp, r7
 800957e:	bc80      	pop	{r7}
 8009580:	4770      	bx	lr
	...

08009584 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	6039      	str	r1, [r7, #0]
 800958e:	71fb      	strb	r3, [r7, #7]
 8009590:	4613      	mov	r3, r2
 8009592:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	2b23      	cmp	r3, #35	; 0x23
 8009598:	d84a      	bhi.n	8009630 <CDC_Control_FS+0xac>
 800959a:	a201      	add	r2, pc, #4	; (adr r2, 80095a0 <CDC_Control_FS+0x1c>)
 800959c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a0:	08009631 	.word	0x08009631
 80095a4:	08009631 	.word	0x08009631
 80095a8:	08009631 	.word	0x08009631
 80095ac:	08009631 	.word	0x08009631
 80095b0:	08009631 	.word	0x08009631
 80095b4:	08009631 	.word	0x08009631
 80095b8:	08009631 	.word	0x08009631
 80095bc:	08009631 	.word	0x08009631
 80095c0:	08009631 	.word	0x08009631
 80095c4:	08009631 	.word	0x08009631
 80095c8:	08009631 	.word	0x08009631
 80095cc:	08009631 	.word	0x08009631
 80095d0:	08009631 	.word	0x08009631
 80095d4:	08009631 	.word	0x08009631
 80095d8:	08009631 	.word	0x08009631
 80095dc:	08009631 	.word	0x08009631
 80095e0:	08009631 	.word	0x08009631
 80095e4:	08009631 	.word	0x08009631
 80095e8:	08009631 	.word	0x08009631
 80095ec:	08009631 	.word	0x08009631
 80095f0:	08009631 	.word	0x08009631
 80095f4:	08009631 	.word	0x08009631
 80095f8:	08009631 	.word	0x08009631
 80095fc:	08009631 	.word	0x08009631
 8009600:	08009631 	.word	0x08009631
 8009604:	08009631 	.word	0x08009631
 8009608:	08009631 	.word	0x08009631
 800960c:	08009631 	.word	0x08009631
 8009610:	08009631 	.word	0x08009631
 8009614:	08009631 	.word	0x08009631
 8009618:	08009631 	.word	0x08009631
 800961c:	08009631 	.word	0x08009631
 8009620:	08009631 	.word	0x08009631
 8009624:	08009631 	.word	0x08009631
 8009628:	08009631 	.word	0x08009631
 800962c:	08009631 	.word	0x08009631
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009630:	bf00      	nop
  }

  return (USBD_OK);
 8009632:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	bc80      	pop	{r7}
 800963c:	4770      	bx	lr
 800963e:	bf00      	nop

08009640 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);

	static portBASE_TYPE xHigherPriorityTaskWoken;
	  xHigherPriorityTaskWoken = pdFALSE;
 800964a:	4b14      	ldr	r3, [pc, #80]	; (800969c <CDC_Receive_FS+0x5c>)
 800964c:	2200      	movs	r2, #0
 800964e:	601a      	str	r2, [r3, #0]

	xSemaphoreGiveFromISR(xSemaphoreBinary1,&xHigherPriorityTaskWoken);
 8009650:	4b13      	ldr	r3, [pc, #76]	; (80096a0 <CDC_Receive_FS+0x60>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4911      	ldr	r1, [pc, #68]	; (800969c <CDC_Receive_FS+0x5c>)
 8009656:	4618      	mov	r0, r3
 8009658:	f7fd fc1a 	bl	8006e90 <xQueueGiveFromISR>

	if( xHigherPriorityTaskWoken == pdTRUE )
 800965c:	4b0f      	ldr	r3, [pc, #60]	; (800969c <CDC_Receive_FS+0x5c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d101      	bne.n	8009668 <CDC_Receive_FS+0x28>
	        используемого синтаксиса обратитесь к примерам, предоставленным
	        вместе с портом FreeRTOS. */
	     //portSWITCH_CONTEXT();
		//vTaskSwitchContext();
		//portYIELD_FROM_ISR(NULL);
		vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно это ошибка
 8009664:	f7fe fdc0 	bl	80081e8 <vTaskMissedYield>

	  }


	memset(VCP_Rx_Buf, (int32_t) ' ', 64); // Очитска буфера
 8009668:	2240      	movs	r2, #64	; 0x40
 800966a:	2120      	movs	r1, #32
 800966c:	480d      	ldr	r0, [pc, #52]	; (80096a4 <CDC_Receive_FS+0x64>)
 800966e:	f000 fc2a 	bl	8009ec6 <memset>


  strncpy(VCP_Rx_Buf, (char*)Buf, *Len);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	461a      	mov	r2, r3
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	480a      	ldr	r0, [pc, #40]	; (80096a4 <CDC_Receive_FS+0x64>)
 800967c:	f000 fc2b 	bl	8009ed6 <strncpy>
  VCP_Rx_Buf[*Len] = 0; //Конец строки
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a07      	ldr	r2, [pc, #28]	; (80096a4 <CDC_Receive_FS+0x64>)
 8009686:	2100      	movs	r1, #0
 8009688:	54d1      	strb	r1, [r2, r3]

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800968a:	4807      	ldr	r0, [pc, #28]	; (80096a8 <CDC_Receive_FS+0x68>)
 800968c:	f7fb fe61 	bl	8005352 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009690:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20002ee0 	.word	0x20002ee0
 80096a0:	20003160 	.word	0x20003160
 80096a4:	20003104 	.word	0x20003104
 80096a8:	200031b4 	.word	0x200031b4

080096ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096bc:	4b0d      	ldr	r3, [pc, #52]	; (80096f4 <CDC_Transmit_FS+0x48>)
 80096be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e00b      	b.n	80096ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096d2:	887b      	ldrh	r3, [r7, #2]
 80096d4:	461a      	mov	r2, r3
 80096d6:	6879      	ldr	r1, [r7, #4]
 80096d8:	4806      	ldr	r0, [pc, #24]	; (80096f4 <CDC_Transmit_FS+0x48>)
 80096da:	f7fb fddf 	bl	800529c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096de:	4805      	ldr	r0, [pc, #20]	; (80096f4 <CDC_Transmit_FS+0x48>)
 80096e0:	f7fb fe08 	bl	80052f4 <USBD_CDC_TransmitPacket>
 80096e4:	4603      	mov	r3, r0
 80096e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	200031b4 	.word	0x200031b4

080096f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	6039      	str	r1, [r7, #0]
 8009702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2212      	movs	r2, #18
 8009708:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800970a:	4b03      	ldr	r3, [pc, #12]	; (8009718 <USBD_FS_DeviceDescriptor+0x20>)
}
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	bc80      	pop	{r7}
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	2000014c 	.word	0x2000014c

0800971c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	6039      	str	r1, [r7, #0]
 8009726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2204      	movs	r2, #4
 800972c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800972e:	4b03      	ldr	r3, [pc, #12]	; (800973c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009730:	4618      	mov	r0, r3
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	bc80      	pop	{r7}
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	20000160 	.word	0x20000160

08009740 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	4603      	mov	r3, r0
 8009748:	6039      	str	r1, [r7, #0]
 800974a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800974c:	79fb      	ldrb	r3, [r7, #7]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d105      	bne.n	800975e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	4907      	ldr	r1, [pc, #28]	; (8009774 <USBD_FS_ProductStrDescriptor+0x34>)
 8009756:	4808      	ldr	r0, [pc, #32]	; (8009778 <USBD_FS_ProductStrDescriptor+0x38>)
 8009758:	f7fc fdd5 	bl	8006306 <USBD_GetString>
 800975c:	e004      	b.n	8009768 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	4904      	ldr	r1, [pc, #16]	; (8009774 <USBD_FS_ProductStrDescriptor+0x34>)
 8009762:	4805      	ldr	r0, [pc, #20]	; (8009778 <USBD_FS_ProductStrDescriptor+0x38>)
 8009764:	f7fc fdcf 	bl	8006306 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009768:	4b02      	ldr	r3, [pc, #8]	; (8009774 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800976a:	4618      	mov	r0, r3
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	200034f8 	.word	0x200034f8
 8009778:	0800a02c 	.word	0x0800a02c

0800977c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	6039      	str	r1, [r7, #0]
 8009786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	4904      	ldr	r1, [pc, #16]	; (800979c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800978c:	4804      	ldr	r0, [pc, #16]	; (80097a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800978e:	f7fc fdba 	bl	8006306 <USBD_GetString>
  return USBD_StrDesc;
 8009792:	4b02      	ldr	r3, [pc, #8]	; (800979c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009794:	4618      	mov	r0, r3
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	200034f8 	.word	0x200034f8
 80097a0:	0800a044 	.word	0x0800a044

080097a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	221a      	movs	r2, #26
 80097b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097b6:	f000 f843 	bl	8009840 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097ba:	4b02      	ldr	r3, [pc, #8]	; (80097c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20000164 	.word	0x20000164

080097c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	6039      	str	r1, [r7, #0]
 80097d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097d4:	79fb      	ldrb	r3, [r7, #7]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d105      	bne.n	80097e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	4907      	ldr	r1, [pc, #28]	; (80097fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80097de:	4808      	ldr	r0, [pc, #32]	; (8009800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097e0:	f7fc fd91 	bl	8006306 <USBD_GetString>
 80097e4:	e004      	b.n	80097f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	4904      	ldr	r1, [pc, #16]	; (80097fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80097ea:	4805      	ldr	r0, [pc, #20]	; (8009800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097ec:	f7fc fd8b 	bl	8006306 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097f0:	4b02      	ldr	r3, [pc, #8]	; (80097fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	200034f8 	.word	0x200034f8
 8009800:	0800a058 	.word	0x0800a058

08009804 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	6039      	str	r1, [r7, #0]
 800980e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d105      	bne.n	8009822 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	4907      	ldr	r1, [pc, #28]	; (8009838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800981a:	4808      	ldr	r0, [pc, #32]	; (800983c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800981c:	f7fc fd73 	bl	8006306 <USBD_GetString>
 8009820:	e004      	b.n	800982c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	4904      	ldr	r1, [pc, #16]	; (8009838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009826:	4805      	ldr	r0, [pc, #20]	; (800983c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009828:	f7fc fd6d 	bl	8006306 <USBD_GetString>
  }
  return USBD_StrDesc;
 800982c:	4b02      	ldr	r3, [pc, #8]	; (8009838 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	200034f8 	.word	0x200034f8
 800983c:	0800a064 	.word	0x0800a064

08009840 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009846:	4b0f      	ldr	r3, [pc, #60]	; (8009884 <Get_SerialNum+0x44>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800984c:	4b0e      	ldr	r3, [pc, #56]	; (8009888 <Get_SerialNum+0x48>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009852:	4b0e      	ldr	r3, [pc, #56]	; (800988c <Get_SerialNum+0x4c>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4413      	add	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d009      	beq.n	800987a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009866:	2208      	movs	r2, #8
 8009868:	4909      	ldr	r1, [pc, #36]	; (8009890 <Get_SerialNum+0x50>)
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 f814 	bl	8009898 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009870:	2204      	movs	r2, #4
 8009872:	4908      	ldr	r1, [pc, #32]	; (8009894 <Get_SerialNum+0x54>)
 8009874:	68b8      	ldr	r0, [r7, #8]
 8009876:	f000 f80f 	bl	8009898 <IntToUnicode>
  }
}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	1ffff7e8 	.word	0x1ffff7e8
 8009888:	1ffff7ec 	.word	0x1ffff7ec
 800988c:	1ffff7f0 	.word	0x1ffff7f0
 8009890:	20000166 	.word	0x20000166
 8009894:	20000176 	.word	0x20000176

08009898 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	4613      	mov	r3, r2
 80098a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098aa:	2300      	movs	r3, #0
 80098ac:	75fb      	strb	r3, [r7, #23]
 80098ae:	e027      	b.n	8009900 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	0f1b      	lsrs	r3, r3, #28
 80098b4:	2b09      	cmp	r3, #9
 80098b6:	d80b      	bhi.n	80098d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	0f1b      	lsrs	r3, r3, #28
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	4619      	mov	r1, r3
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	440b      	add	r3, r1
 80098c8:	3230      	adds	r2, #48	; 0x30
 80098ca:	b2d2      	uxtb	r2, r2
 80098cc:	701a      	strb	r2, [r3, #0]
 80098ce:	e00a      	b.n	80098e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	0f1b      	lsrs	r3, r3, #28
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	7dfb      	ldrb	r3, [r7, #23]
 80098d8:	005b      	lsls	r3, r3, #1
 80098da:	4619      	mov	r1, r3
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	440b      	add	r3, r1
 80098e0:	3237      	adds	r2, #55	; 0x37
 80098e2:	b2d2      	uxtb	r2, r2
 80098e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	005b      	lsls	r3, r3, #1
 80098f0:	3301      	adds	r3, #1
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	4413      	add	r3, r2
 80098f6:	2200      	movs	r2, #0
 80098f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098fa:	7dfb      	ldrb	r3, [r7, #23]
 80098fc:	3301      	adds	r3, #1
 80098fe:	75fb      	strb	r3, [r7, #23]
 8009900:	7dfa      	ldrb	r2, [r7, #23]
 8009902:	79fb      	ldrb	r3, [r7, #7]
 8009904:	429a      	cmp	r2, r3
 8009906:	d3d3      	bcc.n	80098b0 <IntToUnicode+0x18>
  }
}
 8009908:	bf00      	nop
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	bc80      	pop	{r7}
 8009910:	4770      	bx	lr
	...

08009914 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a0d      	ldr	r2, [pc, #52]	; (8009958 <HAL_PCD_MspInit+0x44>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d113      	bne.n	800994e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009926:	4b0d      	ldr	r3, [pc, #52]	; (800995c <HAL_PCD_MspInit+0x48>)
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	4a0c      	ldr	r2, [pc, #48]	; (800995c <HAL_PCD_MspInit+0x48>)
 800992c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009930:	61d3      	str	r3, [r2, #28]
 8009932:	4b0a      	ldr	r3, [pc, #40]	; (800995c <HAL_PCD_MspInit+0x48>)
 8009934:	69db      	ldr	r3, [r3, #28]
 8009936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800993a:	60fb      	str	r3, [r7, #12]
 800993c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800993e:	2200      	movs	r2, #0
 8009940:	2105      	movs	r1, #5
 8009942:	2014      	movs	r0, #20
 8009944:	f7f6 ffc5 	bl	80008d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009948:	2014      	movs	r0, #20
 800994a:	f7f6 ffde 	bl	800090a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800994e:	bf00      	nop
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	40005c00 	.word	0x40005c00
 800995c:	40021000 	.word	0x40021000

08009960 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009974:	4619      	mov	r1, r3
 8009976:	4610      	mov	r0, r2
 8009978:	f7fb fda1 	bl	80054be <USBD_LL_SetupStage>
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009996:	78fa      	ldrb	r2, [r7, #3]
 8009998:	6879      	ldr	r1, [r7, #4]
 800999a:	4613      	mov	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	00db      	lsls	r3, r3, #3
 80099a2:	440b      	add	r3, r1
 80099a4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	78fb      	ldrb	r3, [r7, #3]
 80099ac:	4619      	mov	r1, r3
 80099ae:	f7fb fdd1 	bl	8005554 <USBD_LL_DataOutStage>
}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	460b      	mov	r3, r1
 80099c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80099cc:	78fa      	ldrb	r2, [r7, #3]
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	00db      	lsls	r3, r3, #3
 80099d8:	440b      	add	r3, r1
 80099da:	333c      	adds	r3, #60	; 0x3c
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	78fb      	ldrb	r3, [r7, #3]
 80099e0:	4619      	mov	r1, r3
 80099e2:	f7fb fe28 	bl	8005636 <USBD_LL_DataInStage>
}
 80099e6:	bf00      	nop
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fb ff38 	bl	8005872 <USBD_LL_SOF>
}
 8009a02:	bf00      	nop
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a12:	2301      	movs	r3, #1
 8009a14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d001      	beq.n	8009a22 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a1e:	f7f6 fd8b 	bl	8000538 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a28:	7bfa      	ldrb	r2, [r7, #15]
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fb fee8 	bl	8005802 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fb fea1 	bl	8005780 <USBD_LL_Reset>
}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fb fee2 	bl	8005820 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d005      	beq.n	8009a70 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a64:	4b04      	ldr	r3, [pc, #16]	; (8009a78 <HAL_PCD_SuspendCallback+0x30>)
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	4a03      	ldr	r2, [pc, #12]	; (8009a78 <HAL_PCD_SuspendCallback+0x30>)
 8009a6a:	f043 0306 	orr.w	r3, r3, #6
 8009a6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	e000ed00 	.word	0xe000ed00

08009a7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fb fedc 	bl	8005848 <USBD_LL_Resume>
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009aa0:	4a28      	ldr	r2, [pc, #160]	; (8009b44 <USBD_LL_Init+0xac>)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a26      	ldr	r2, [pc, #152]	; (8009b44 <USBD_LL_Init+0xac>)
 8009aac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009ab0:	4b24      	ldr	r3, [pc, #144]	; (8009b44 <USBD_LL_Init+0xac>)
 8009ab2:	4a25      	ldr	r2, [pc, #148]	; (8009b48 <USBD_LL_Init+0xb0>)
 8009ab4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009ab6:	4b23      	ldr	r3, [pc, #140]	; (8009b44 <USBD_LL_Init+0xac>)
 8009ab8:	2208      	movs	r2, #8
 8009aba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009abc:	4b21      	ldr	r3, [pc, #132]	; (8009b44 <USBD_LL_Init+0xac>)
 8009abe:	2202      	movs	r2, #2
 8009ac0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009ac2:	4b20      	ldr	r3, [pc, #128]	; (8009b44 <USBD_LL_Init+0xac>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009ac8:	4b1e      	ldr	r3, [pc, #120]	; (8009b44 <USBD_LL_Init+0xac>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009ace:	4b1d      	ldr	r3, [pc, #116]	; (8009b44 <USBD_LL_Init+0xac>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009ad4:	481b      	ldr	r0, [pc, #108]	; (8009b44 <USBD_LL_Init+0xac>)
 8009ad6:	f7f7 f8be 	bl	8000c56 <HAL_PCD_Init>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009ae0:	f7f6 fd2a 	bl	8000538 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009aea:	2318      	movs	r3, #24
 8009aec:	2200      	movs	r2, #0
 8009aee:	2100      	movs	r1, #0
 8009af0:	f7f8 fbf2 	bl	80022d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009afa:	2358      	movs	r3, #88	; 0x58
 8009afc:	2200      	movs	r2, #0
 8009afe:	2180      	movs	r1, #128	; 0x80
 8009b00:	f7f8 fbea 	bl	80022d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b0a:	23c0      	movs	r3, #192	; 0xc0
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	2181      	movs	r1, #129	; 0x81
 8009b10:	f7f8 fbe2 	bl	80022d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b1a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009b1e:	2200      	movs	r2, #0
 8009b20:	2101      	movs	r1, #1
 8009b22:	f7f8 fbd9 	bl	80022d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b30:	2200      	movs	r2, #0
 8009b32:	2182      	movs	r1, #130	; 0x82
 8009b34:	f7f8 fbd0 	bl	80022d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	200036f8 	.word	0x200036f8
 8009b48:	40005c00 	.word	0x40005c00

08009b4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7f7 f982 	bl	8000e6c <HAL_PCD_Start>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 f94e 	bl	8009e10 <USBD_Get_USB_Status>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b084      	sub	sp, #16
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	4608      	mov	r0, r1
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	461a      	mov	r2, r3
 8009b90:	4603      	mov	r3, r0
 8009b92:	70fb      	strb	r3, [r7, #3]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70bb      	strb	r3, [r7, #2]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009baa:	78bb      	ldrb	r3, [r7, #2]
 8009bac:	883a      	ldrh	r2, [r7, #0]
 8009bae:	78f9      	ldrb	r1, [r7, #3]
 8009bb0:	f7f7 fafc 	bl	80011ac <HAL_PCD_EP_Open>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 f928 	bl	8009e10 <USBD_Get_USB_Status>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b084      	sub	sp, #16
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009be8:	78fa      	ldrb	r2, [r7, #3]
 8009bea:	4611      	mov	r1, r2
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7f7 fb43 	bl	8001278 <HAL_PCD_EP_Close>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 f909 	bl	8009e10 <USBD_Get_USB_Status>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c02:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	460b      	mov	r3, r1
 8009c16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c26:	78fa      	ldrb	r2, [r7, #3]
 8009c28:	4611      	mov	r1, r2
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7f7 fc03 	bl	8001436 <HAL_PCD_EP_SetStall>
 8009c30:	4603      	mov	r3, r0
 8009c32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 f8ea 	bl	8009e10 <USBD_Get_USB_Status>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c40:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b084      	sub	sp, #16
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	460b      	mov	r3, r1
 8009c54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c64:	78fa      	ldrb	r2, [r7, #3]
 8009c66:	4611      	mov	r1, r2
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7f7 fc44 	bl	80014f6 <HAL_PCD_EP_ClrStall>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f000 f8cb 	bl	8009e10 <USBD_Get_USB_Status>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	da0c      	bge.n	8009cbe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ca4:	78fb      	ldrb	r3, [r7, #3]
 8009ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009caa:	68f9      	ldr	r1, [r7, #12]
 8009cac:	1c5a      	adds	r2, r3, #1
 8009cae:	4613      	mov	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	00db      	lsls	r3, r3, #3
 8009cb6:	440b      	add	r3, r1
 8009cb8:	3302      	adds	r3, #2
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	e00b      	b.n	8009cd6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009cbe:	78fb      	ldrb	r3, [r7, #3]
 8009cc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cc4:	68f9      	ldr	r1, [r7, #12]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	00db      	lsls	r3, r3, #3
 8009cce:	440b      	add	r3, r1
 8009cd0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009cd4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bc80      	pop	{r7}
 8009cde:	4770      	bx	lr

08009ce0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cfa:	78fa      	ldrb	r2, [r7, #3]
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7f7 fa2f 	bl	8001162 <HAL_PCD_SetAddress>
 8009d04:	4603      	mov	r3, r0
 8009d06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 f880 	bl	8009e10 <USBD_Get_USB_Status>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b086      	sub	sp, #24
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	607a      	str	r2, [r7, #4]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	72fb      	strb	r3, [r7, #11]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d40:	893b      	ldrh	r3, [r7, #8]
 8009d42:	7af9      	ldrb	r1, [r7, #11]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	f7f7 fb33 	bl	80013b0 <HAL_PCD_EP_Transmit>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 f85d 	bl	8009e10 <USBD_Get_USB_Status>
 8009d56:	4603      	mov	r3, r0
 8009d58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d5a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	607a      	str	r2, [r7, #4]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	460b      	mov	r3, r1
 8009d72:	72fb      	strb	r3, [r7, #11]
 8009d74:	4613      	mov	r3, r2
 8009d76:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d86:	893b      	ldrh	r3, [r7, #8]
 8009d88:	7af9      	ldrb	r1, [r7, #11]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	f7f7 fabc 	bl	8001308 <HAL_PCD_EP_Receive>
 8009d90:	4603      	mov	r3, r0
 8009d92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 f83a 	bl	8009e10 <USBD_Get_USB_Status>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009da0:	7dbb      	ldrb	r3, [r7, #22]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3718      	adds	r7, #24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b082      	sub	sp, #8
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	460b      	mov	r3, r1
 8009db4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dbc:	78fa      	ldrb	r2, [r7, #3]
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7f7 fade 	bl	8001382 <HAL_PCD_EP_GetRxCount>
 8009dc6:	4603      	mov	r3, r0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009dd8:	4b02      	ldr	r3, [pc, #8]	; (8009de4 <USBD_static_malloc+0x14>)
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bc80      	pop	{r7}
 8009de2:	4770      	bx	lr
 8009de4:	20002ee4 	.word	0x20002ee4

08009de8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]

}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bc80      	pop	{r7}
 8009df8:	4770      	bx	lr

08009dfa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b083      	sub	sp, #12
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	460b      	mov	r3, r1
 8009e04:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009e06:	bf00      	nop
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bc80      	pop	{r7}
 8009e0e:	4770      	bx	lr

08009e10 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e1e:	79fb      	ldrb	r3, [r7, #7]
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	d817      	bhi.n	8009e54 <USBD_Get_USB_Status+0x44>
 8009e24:	a201      	add	r2, pc, #4	; (adr r2, 8009e2c <USBD_Get_USB_Status+0x1c>)
 8009e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2a:	bf00      	nop
 8009e2c:	08009e3d 	.word	0x08009e3d
 8009e30:	08009e43 	.word	0x08009e43
 8009e34:	08009e49 	.word	0x08009e49
 8009e38:	08009e4f 	.word	0x08009e4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e40:	e00b      	b.n	8009e5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e42:	2302      	movs	r3, #2
 8009e44:	73fb      	strb	r3, [r7, #15]
    break;
 8009e46:	e008      	b.n	8009e5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e4c:	e005      	b.n	8009e5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e4e:	2302      	movs	r3, #2
 8009e50:	73fb      	strb	r3, [r7, #15]
    break;
 8009e52:	e002      	b.n	8009e5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e54:	2302      	movs	r3, #2
 8009e56:	73fb      	strb	r3, [r7, #15]
    break;
 8009e58:	bf00      	nop
  }
  return usb_status;
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bc80      	pop	{r7}
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop

08009e68 <__libc_init_array>:
 8009e68:	b570      	push	{r4, r5, r6, lr}
 8009e6a:	2500      	movs	r5, #0
 8009e6c:	4e0c      	ldr	r6, [pc, #48]	; (8009ea0 <__libc_init_array+0x38>)
 8009e6e:	4c0d      	ldr	r4, [pc, #52]	; (8009ea4 <__libc_init_array+0x3c>)
 8009e70:	1ba4      	subs	r4, r4, r6
 8009e72:	10a4      	asrs	r4, r4, #2
 8009e74:	42a5      	cmp	r5, r4
 8009e76:	d109      	bne.n	8009e8c <__libc_init_array+0x24>
 8009e78:	f000 f842 	bl	8009f00 <_init>
 8009e7c:	2500      	movs	r5, #0
 8009e7e:	4e0a      	ldr	r6, [pc, #40]	; (8009ea8 <__libc_init_array+0x40>)
 8009e80:	4c0a      	ldr	r4, [pc, #40]	; (8009eac <__libc_init_array+0x44>)
 8009e82:	1ba4      	subs	r4, r4, r6
 8009e84:	10a4      	asrs	r4, r4, #2
 8009e86:	42a5      	cmp	r5, r4
 8009e88:	d105      	bne.n	8009e96 <__libc_init_array+0x2e>
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}
 8009e8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e90:	4798      	blx	r3
 8009e92:	3501      	adds	r5, #1
 8009e94:	e7ee      	b.n	8009e74 <__libc_init_array+0xc>
 8009e96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e9a:	4798      	blx	r3
 8009e9c:	3501      	adds	r5, #1
 8009e9e:	e7f2      	b.n	8009e86 <__libc_init_array+0x1e>
 8009ea0:	0800a0a8 	.word	0x0800a0a8
 8009ea4:	0800a0a8 	.word	0x0800a0a8
 8009ea8:	0800a0a8 	.word	0x0800a0a8
 8009eac:	0800a0ac 	.word	0x0800a0ac

08009eb0 <memcpy>:
 8009eb0:	b510      	push	{r4, lr}
 8009eb2:	1e43      	subs	r3, r0, #1
 8009eb4:	440a      	add	r2, r1
 8009eb6:	4291      	cmp	r1, r2
 8009eb8:	d100      	bne.n	8009ebc <memcpy+0xc>
 8009eba:	bd10      	pop	{r4, pc}
 8009ebc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ec0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ec4:	e7f7      	b.n	8009eb6 <memcpy+0x6>

08009ec6 <memset>:
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	4402      	add	r2, r0
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d100      	bne.n	8009ed0 <memset+0xa>
 8009ece:	4770      	bx	lr
 8009ed0:	f803 1b01 	strb.w	r1, [r3], #1
 8009ed4:	e7f9      	b.n	8009eca <memset+0x4>

08009ed6 <strncpy>:
 8009ed6:	b570      	push	{r4, r5, r6, lr}
 8009ed8:	4604      	mov	r4, r0
 8009eda:	3901      	subs	r1, #1
 8009edc:	b902      	cbnz	r2, 8009ee0 <strncpy+0xa>
 8009ede:	bd70      	pop	{r4, r5, r6, pc}
 8009ee0:	4623      	mov	r3, r4
 8009ee2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009ee6:	1e56      	subs	r6, r2, #1
 8009ee8:	f803 5b01 	strb.w	r5, [r3], #1
 8009eec:	b92d      	cbnz	r5, 8009efa <strncpy+0x24>
 8009eee:	4414      	add	r4, r2
 8009ef0:	42a3      	cmp	r3, r4
 8009ef2:	d0f4      	beq.n	8009ede <strncpy+0x8>
 8009ef4:	f803 5b01 	strb.w	r5, [r3], #1
 8009ef8:	e7fa      	b.n	8009ef0 <strncpy+0x1a>
 8009efa:	461c      	mov	r4, r3
 8009efc:	4632      	mov	r2, r6
 8009efe:	e7ed      	b.n	8009edc <strncpy+0x6>

08009f00 <_init>:
 8009f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f02:	bf00      	nop
 8009f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f06:	bc08      	pop	{r3}
 8009f08:	469e      	mov	lr, r3
 8009f0a:	4770      	bx	lr

08009f0c <_fini>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	bf00      	nop
 8009f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f12:	bc08      	pop	{r3}
 8009f14:	469e      	mov	lr, r3
 8009f16:	4770      	bx	lr
