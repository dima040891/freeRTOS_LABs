
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dc8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08009ed8  08009ed8  00019ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a068  0800a068  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800a068  0800a068  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a068  0800a068  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a068  0800a068  0001a068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a06c  0800a06c  0001a06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003864  20000180  0800a1f0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039e4  0800a1f0  000239e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e47d  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004085  00000000  00000000  0003e626  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001260  00000000  00000000  000426b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001078  00000000  00000000  00043910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bb4d  00000000  00000000  00044988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013eda  00000000  00000000  000604d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e5d8  00000000  00000000  000743af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102987  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b8  00000000  00000000  00102a04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08009ec0 	.word	0x08009ec0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08009ec0 	.word	0x08009ec0

08000150 <PCB_Init>:

#include "PCB_BluePill.h"
#include "main.h"

void PCB_Init()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000154:	2201      	movs	r2, #1
 8000156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015a:	4802      	ldr	r0, [pc, #8]	; (8000164 <PCB_Init+0x14>)
 800015c:	f000 fd24 	bl	8000ba8 <HAL_GPIO_WritePin>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	40011000 	.word	0x40011000

08000168 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	4802      	ldr	r0, [pc, #8]	; (800017c <PCB_LED_Toggle+0x14>)
 8000172:	f000 fd31 	bl	8000bd8 <HAL_GPIO_TogglePin>
}
 8000176:	bf00      	nop
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	40011000 	.word	0x40011000

08000180 <freeRTOS_Tasks_Ini>:
xQueueHandle xQueue1; // Декларирование переменной xQueueHandle т.е. создание ссылки на будущую очередь

// Внимание! QueueHandle_t является более современным аналогом xQueueHandle. Разобраться с этим позже

void freeRTOS_Tasks_Ini (void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8
	xQueue1 = xQueueCreate(4, sizeof(char)); // Создание очереди из 4 элементов размерностью 8 бит
 8000186:	2200      	movs	r2, #0
 8000188:	2101      	movs	r1, #1
 800018a:	2004      	movs	r0, #4
 800018c:	f006 fc6c 	bl	8006a68 <xQueueGenericCreate>
 8000190:	4602      	mov	r2, r0
 8000192:	4b27      	ldr	r3, [pc, #156]	; (8000230 <freeRTOS_Tasks_Ini+0xb0>)
 8000194:	601a      	str	r2, [r3, #0]

	vSemaphoreCreateBinary(xSemaphoreBinary1); // Создание двоичного семафора
 8000196:	2203      	movs	r2, #3
 8000198:	2100      	movs	r1, #0
 800019a:	2001      	movs	r0, #1
 800019c:	f006 fc64 	bl	8006a68 <xQueueGenericCreate>
 80001a0:	4602      	mov	r2, r0
 80001a2:	4b24      	ldr	r3, [pc, #144]	; (8000234 <freeRTOS_Tasks_Ini+0xb4>)
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	4b23      	ldr	r3, [pc, #140]	; (8000234 <freeRTOS_Tasks_Ini+0xb4>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d006      	beq.n	80001bc <freeRTOS_Tasks_Ini+0x3c>
 80001ae:	4b21      	ldr	r3, [pc, #132]	; (8000234 <freeRTOS_Tasks_Ini+0xb4>)
 80001b0:	6818      	ldr	r0, [r3, #0]
 80001b2:	2300      	movs	r3, #0
 80001b4:	2200      	movs	r2, #0
 80001b6:	2100      	movs	r1, #0
 80001b8:	f006 fcb6 	bl	8006b28 <xQueueGenericSend>

	xTaskCreate(vTask_USB_Init, "Task_USB_Init", 100, NULL, 2, NULL); // З-а сброса лнии D+ после каждого запуска МК. Необхадимо для определения устройсва на шине USB.
 80001bc:	2300      	movs	r3, #0
 80001be:	9301      	str	r3, [sp, #4]
 80001c0:	2302      	movs	r3, #2
 80001c2:	9300      	str	r3, [sp, #0]
 80001c4:	2300      	movs	r3, #0
 80001c6:	2264      	movs	r2, #100	; 0x64
 80001c8:	491b      	ldr	r1, [pc, #108]	; (8000238 <freeRTOS_Tasks_Ini+0xb8>)
 80001ca:	481c      	ldr	r0, [pc, #112]	; (800023c <freeRTOS_Tasks_Ini+0xbc>)
 80001cc:	f007 fa85 	bl	80076da <xTaskCreate>
	//xTaskCreate(vTask_Transmit_VCP, "Task_Transmit_VCP", 120, NULL, 1, NULL); // З-а переиодческой отправки сообщения в VCP. Задача должна быть запущена после удаления vTask_USB_Init.
	//xTaskCreate(vTask_Transmit_VCP_2, "Task_Transmit_VCP_2", 120, (void*) USB_Tx_Buf_Task2, 1, NULL); // Вывод второго тестового сообщения
	xTaskCreate(vTask_Sync_Recieve_VCP, "Task_Sync_Recieve_VCP", 120, NULL, 2, NULL);
 80001d0:	2300      	movs	r3, #0
 80001d2:	9301      	str	r3, [sp, #4]
 80001d4:	2302      	movs	r3, #2
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	2300      	movs	r3, #0
 80001da:	2278      	movs	r2, #120	; 0x78
 80001dc:	4918      	ldr	r1, [pc, #96]	; (8000240 <freeRTOS_Tasks_Ini+0xc0>)
 80001de:	4819      	ldr	r0, [pc, #100]	; (8000244 <freeRTOS_Tasks_Ini+0xc4>)
 80001e0:	f007 fa7b 	bl	80076da <xTaskCreate>

	Delay_LED = 500;
 80001e4:	4b18      	ldr	r3, [pc, #96]	; (8000248 <freeRTOS_Tasks_Ini+0xc8>)
 80001e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001ea:	801a      	strh	r2, [r3, #0]
	pDelay_LED = &Delay_LED;
 80001ec:	4b17      	ldr	r3, [pc, #92]	; (800024c <freeRTOS_Tasks_Ini+0xcc>)
 80001ee:	4a16      	ldr	r2, [pc, #88]	; (8000248 <freeRTOS_Tasks_Ini+0xc8>)
 80001f0:	601a      	str	r2, [r3, #0]


	if(xQueue1 != NULL) // Если очередь создалась успешно (хватило место в куче), то создать задачи отправки получения данных
 80001f2:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <freeRTOS_Tasks_Ini+0xb0>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d015      	beq.n	8000226 <freeRTOS_Tasks_Ini+0xa6>
	{
		//xTaskCreate(vTask_Queue_Data_Send, "Task_Queue_Data_Send", 90, NULL, 1, NULL); // З-а отправки данных в очередь
		//xTaskCreate(vTask_Queue_Data_Recieve, "Task_Queue_Data_Recieve", 90, NULL, 1, NULL); // З-а которая получает данные из очереди и отправляет тестовое сообщение.

		if (xTaskCreate(vTask_PCB_LED_Blink, "Task_PCB_LED_Blink", 40, (void*) pDelay_LED, 1, NULL) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY) // З-а мигания LED
 80001fa:	4b14      	ldr	r3, [pc, #80]	; (800024c <freeRTOS_Tasks_Ini+0xcc>)
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	2300      	movs	r3, #0
 8000200:	9301      	str	r3, [sp, #4]
 8000202:	2301      	movs	r3, #1
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	4613      	mov	r3, r2
 8000208:	2228      	movs	r2, #40	; 0x28
 800020a:	4911      	ldr	r1, [pc, #68]	; (8000250 <freeRTOS_Tasks_Ini+0xd0>)
 800020c:	4811      	ldr	r0, [pc, #68]	; (8000254 <freeRTOS_Tasks_Ini+0xd4>)
 800020e:	f007 fa64 	bl	80076da <xTaskCreate>
 8000212:	4603      	mov	r3, r0
 8000214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000218:	d105      	bne.n	8000226 <freeRTOS_Tasks_Ini+0xa6>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <freeRTOS_Tasks_Ini+0xd8>)
 8000222:	f000 fcc1 	bl	8000ba8 <HAL_GPIO_WritePin>
	{
		//Если все хорошо то ветка else не исполнится, что означает что очередь создана.

	}

	osKernelStart();
 8000226:	f006 f957 	bl	80064d8 <osKernelStart>

}
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20003124 	.word	0x20003124
 8000234:	20003120 	.word	0x20003120
 8000238:	08009ee8 	.word	0x08009ee8
 800023c:	080002b1 	.word	0x080002b1
 8000240:	08009ef8 	.word	0x08009ef8
 8000244:	0800025d 	.word	0x0800025d
 8000248:	20003168 	.word	0x20003168
 800024c:	2000311c 	.word	0x2000311c
 8000250:	08009f10 	.word	0x08009f10
 8000254:	08000311 	.word	0x08000311
 8000258:	40011000 	.word	0x40011000

0800025c <vTask_Sync_Recieve_VCP>:

void vTask_Sync_Recieve_VCP(void *pvParameters)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		//vTaskDelay(1000 / portTICK_RATE_MS );

		xSemaphoreTake( xSemaphoreBinary1, portMAX_DELAY );
 8000264:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <vTask_Sync_Recieve_VCP+0x44>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f04f 31ff 	mov.w	r1, #4294967295
 800026c:	4618      	mov	r0, r3
 800026e:	f006 ff4f 	bl	8007110 <xQueueSemaphoreTake>

		(CDC_Transmit_FS((unsigned char*)"Data received from VCP = ", strlen("Data received from VCP = ")));
 8000272:	2119      	movs	r1, #25
 8000274:	480b      	ldr	r0, [pc, #44]	; (80002a4 <vTask_Sync_Recieve_VCP+0x48>)
 8000276:	f009 f9f9 	bl	800966c <CDC_Transmit_FS>
		vTaskDelay(50 / portTICK_RATE_MS );
 800027a:	2032      	movs	r0, #50	; 0x32
 800027c:	f007 fbe0 	bl	8007a40 <vTaskDelay>
		(CDC_Transmit_FS((unsigned char*) &VCP_Rx_Buf, 10));
 8000280:	210a      	movs	r1, #10
 8000282:	4809      	ldr	r0, [pc, #36]	; (80002a8 <vTask_Sync_Recieve_VCP+0x4c>)
 8000284:	f009 f9f2 	bl	800966c <CDC_Transmit_FS>
		vTaskDelay(50 / portTICK_RATE_MS );
 8000288:	2032      	movs	r0, #50	; 0x32
 800028a:	f007 fbd9 	bl	8007a40 <vTaskDelay>
		(CDC_Transmit_FS((unsigned char*)"\r\n", strlen("\r\n")));
 800028e:	2102      	movs	r1, #2
 8000290:	4806      	ldr	r0, [pc, #24]	; (80002ac <vTask_Sync_Recieve_VCP+0x50>)
 8000292:	f009 f9eb 	bl	800966c <CDC_Transmit_FS>
		vTaskDelay(50 / portTICK_RATE_MS );
 8000296:	2032      	movs	r0, #50	; 0x32
 8000298:	f007 fbd2 	bl	8007a40 <vTaskDelay>
		xSemaphoreTake( xSemaphoreBinary1, portMAX_DELAY );
 800029c:	e7e2      	b.n	8000264 <vTask_Sync_Recieve_VCP+0x8>
 800029e:	bf00      	nop
 80002a0:	20003120 	.word	0x20003120
 80002a4:	08009f24 	.word	0x08009f24
 80002a8:	20003128 	.word	0x20003128
 80002ac:	08009f40 	.word	0x08009f40

080002b0 <vTask_USB_Init>:
	vTaskDelete(NULL);

}

void vTask_USB_Init(void *pvParameters)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	// НЕ ЗАБЫТЬ ЗАКОММЕНТИТЬ ВЫЗОВ MX_USB_DEVICE_Init(); ИЗ ЗАДАЧИ StartDefaultTask (main.c) ПОСЛЕ КАЖДОЙ ГЕНЕРАЦИИ ПРОЕКТА!!!

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b8:	f107 0308 	add.w	r3, r7, #8
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002ca:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002cc:	2301      	movs	r3, #1
 80002ce:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d4:	2302      	movs	r3, #2
 80002d6:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d8:	f107 0308 	add.w	r3, r7, #8
 80002dc:	4619      	mov	r1, r3
 80002de:	480b      	ldr	r0, [pc, #44]	; (800030c <vTask_USB_Init+0x5c>)
 80002e0:	f000 fb08 	bl	80008f4 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ea:	4808      	ldr	r0, [pc, #32]	; (800030c <vTask_USB_Init+0x5c>)
 80002ec:	f000 fc5c 	bl	8000ba8 <HAL_GPIO_WritePin>

	  vTaskDelay(2000 / portTICK_RATE_MS );
 80002f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002f4:	f007 fba4 	bl	8007a40 <vTaskDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 80002f8:	f009 f8d8 	bl	80094ac <MX_USB_DEVICE_Init>

	  vTaskDelete(NULL); // Удаленеи задачи самой себя
 80002fc:	2000      	movs	r0, #0
 80002fe:	f007 fb2d 	bl	800795c <vTaskDelete>

	for(;;)
	{
		vTaskDelay(1000 / portTICK_RATE_MS );
 8000302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000306:	f007 fb9b 	bl	8007a40 <vTaskDelay>
 800030a:	e7fa      	b.n	8000302 <vTask_USB_Init+0x52>
 800030c:	40010800 	.word	0x40010800

08000310 <vTask_PCB_LED_Blink>:
	}
	vTaskDelete(NULL);
}

void vTask_PCB_LED_Blink(void *pvParameters)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]

	uint16_t *pDelay_LED = (uint16_t*) pvParameters; // Получение параметра с привденем к иходному типу данных - uint16_t
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
	PCB_LED_Toggle();
 800031c:	f7ff ff24 	bl	8000168 <PCB_LED_Toggle>
	vTaskDelay(*pDelay_LED / portTICK_RATE_MS ); // Разыменование т.е. передача значения задержки
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	4618      	mov	r0, r3
 8000326:	f007 fb8b 	bl	8007a40 <vTaskDelay>
	PCB_LED_Toggle();
 800032a:	f7ff ff1d 	bl	8000168 <PCB_LED_Toggle>
	vTaskDelay(*(uint16_t*)pvParameters / portTICK_RATE_MS ); // Можно и без промежуточных переменных, привести pvParameters к указателю uint16_t "(uint16_t*)pvParameters", а затем разименовать
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	4618      	mov	r0, r3
 8000334:	f007 fb84 	bl	8007a40 <vTaskDelay>
	PCB_LED_Toggle();
 8000338:	e7f0      	b.n	800031c <vTask_PCB_LED_Blink+0xc>

0800033a <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0

}
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr

08000346 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
return 0;
 800034a:	2300      	movs	r3, #0
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 f95c 	bl	8000614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f818 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f000 f870 	bl	8000444 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000364:	f006 f886 	bl	8006474 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000368:	4a06      	ldr	r2, [pc, #24]	; (8000384 <main+0x30>)
 800036a:	2100      	movs	r1, #0
 800036c:	4806      	ldr	r0, [pc, #24]	; (8000388 <main+0x34>)
 800036e:	f006 f8e7 	bl	8006540 <osThreadNew>
 8000372:	4602      	mov	r2, r0
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <main+0x38>)
 8000376:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  PCB_Init();
 8000378:	f7ff feea 	bl	8000150 <PCB_Init>
  freeRTOS_Tasks_Ini();
 800037c:	f7ff ff00 	bl	8000180 <freeRTOS_Tasks_Ini>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000380:	e7fe      	b.n	8000380 <main+0x2c>
 8000382:	bf00      	nop
 8000384:	0800a034 	.word	0x0800a034
 8000388:	080004dd 	.word	0x080004dd
 800038c:	2000316c 	.word	0x2000316c

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b094      	sub	sp, #80	; 0x50
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039a:	2228      	movs	r2, #40	; 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f009 fd71 	bl	8009e86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	f107 0314 	add.w	r3, r7, #20
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
 80003b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c0:	2301      	movs	r3, #1
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d2:	2302      	movs	r3, #2
 80003d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 ff92 	bl	8002310 <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003f2:	f000 f87b 	bl	80004ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f6:	230f      	movs	r3, #15
 80003f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000406:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f002 f9fc 	bl	8002810 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800041e:	f000 f865 	bl	80004ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000422:	2310      	movs	r3, #16
 8000424:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4618      	mov	r0, r3
 800042e:	f002 fb59 	bl	8002ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000438:	f000 f858 	bl	80004ec <Error_Handler>
  }
}
 800043c:	bf00      	nop
 800043e:	3750      	adds	r7, #80	; 0x50
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <MX_GPIO_Init+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a1d      	ldr	r2, [pc, #116]	; (80004d4 <MX_GPIO_Init+0x90>)
 800045e:	f043 0310 	orr.w	r3, r3, #16
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MX_GPIO_Init+0x90>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0310 	and.w	r3, r3, #16
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <MX_GPIO_Init+0x90>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a17      	ldr	r2, [pc, #92]	; (80004d4 <MX_GPIO_Init+0x90>)
 8000476:	f043 0320 	orr.w	r3, r3, #32
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <MX_GPIO_Init+0x90>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0320 	and.w	r3, r3, #32
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <MX_GPIO_Init+0x90>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a11      	ldr	r2, [pc, #68]	; (80004d4 <MX_GPIO_Init+0x90>)
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <MX_GPIO_Init+0x90>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0304 	and.w	r3, r3, #4
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a6:	480c      	ldr	r0, [pc, #48]	; (80004d8 <MX_GPIO_Init+0x94>)
 80004a8:	f000 fb7e 	bl	8000ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b2:	2301      	movs	r3, #1
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	2302      	movs	r3, #2
 80004bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	4804      	ldr	r0, [pc, #16]	; (80004d8 <MX_GPIO_Init+0x94>)
 80004c6:	f000 fa15 	bl	80008f4 <HAL_GPIO_Init>

}
 80004ca:	bf00      	nop
 80004cc:	3720      	adds	r7, #32
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40011000 	.word	0x40011000

080004dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
osDelay(1);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f006 f8d5 	bl	8006694 <osDelay>
 80004ea:	e7fb      	b.n	80004e4 <StartDefaultTask+0x8>

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <Error_Handler+0x6>

080004f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fa:	4b18      	ldr	r3, [pc, #96]	; (800055c <HAL_MspInit+0x68>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a17      	ldr	r2, [pc, #92]	; (800055c <HAL_MspInit+0x68>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <HAL_MspInit+0x68>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_MspInit+0x68>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a11      	ldr	r2, [pc, #68]	; (800055c <HAL_MspInit+0x68>)
 8000518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <HAL_MspInit+0x68>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	210f      	movs	r1, #15
 800052e:	f06f 0001 	mvn.w	r0, #1
 8000532:	f000 f9a8 	bl	8000886 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <HAL_MspInit+0x6c>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <HAL_MspInit+0x6c>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	40010000 	.word	0x40010000

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <NMI_Handler+0x4>

0800056a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <HardFault_Handler+0x4>

08000570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <MemManage_Handler+0x4>

08000576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <BusFault_Handler+0x4>

0800057c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <UsageFault_Handler+0x4>

08000582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000592:	f000 f885 	bl	80006a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000596:	f007 fee3 	bl	8008360 <xTaskGetSchedulerState>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d001      	beq.n	80005a4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80005a0:	f008 fd32 	bl	8009008 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005ae:	f000 fc5d 	bl	8000e6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200036f8 	.word	0x200036f8

080005bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ca:	e003      	b.n	80005d4 <LoopCopyDataInit>

080005cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005d2:	3104      	adds	r1, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005dc:	d3f6      	bcc.n	80005cc <CopyDataInit>
  ldr r2, =_sbss
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005e0:	e002      	b.n	80005e8 <LoopFillZerobss>

080005e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005e4:	f842 3b04 	str.w	r3, [r2], #4

080005e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005ec:	d3f9      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ee:	f7ff ffe5 	bl	80005bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005f2:	f009 fc19 	bl	8009e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f6:	f7ff fead 	bl	8000354 <main>
  bx lr
 80005fa:	4770      	bx	lr
  ldr r3, =_sidata
 80005fc:	0800a070 	.word	0x0800a070
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000604:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000608:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 800060c:	200039e4 	.word	0x200039e4

08000610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_2_IRQHandler>
	...

08000614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_Init+0x28>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_Init+0x28>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f923 	bl	8000870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	200f      	movs	r0, #15
 800062c:	f000 f808 	bl	8000640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000630:	f7ff ff60 	bl	80004f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x54>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_InitTick+0x58>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f93b 	bl	80008da <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e00e      	b.n	800068c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d80a      	bhi.n	800068a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295
 800067c:	f000 f903 	bl	8000886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4a06      	ldr	r2, [pc, #24]	; (800069c <HAL_InitTick+0x5c>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	20000008 	.word	0x20000008
 800069c:	20000004 	.word	0x20000004

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x1c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_IncTick+0x20>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <HAL_IncTick+0x20>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	20000008 	.word	0x20000008
 80006c0:	20003170 	.word	0x20003170

080006c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;
 80006c8:	4b02      	ldr	r3, [pc, #8]	; (80006d4 <HAL_GetTick+0x10>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	20003170 	.word	0x20003170

080006d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <__NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	2b00      	cmp	r3, #0
 800074c:	db0b      	blt.n	8000766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f003 021f 	and.w	r2, r3, #31
 8000754:	4906      	ldr	r1, [pc, #24]	; (8000770 <__NVIC_EnableIRQ+0x34>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	095b      	lsrs	r3, r3, #5
 800075c:	2001      	movs	r0, #1
 800075e:	fa00 f202 	lsl.w	r2, r0, r2
 8000762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	e000e100 	.word	0xe000e100

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	f1c3 0307 	rsb	r3, r3, #7
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	bf28      	it	cs
 80007e6:	2304      	movcs	r3, #4
 80007e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3304      	adds	r3, #4
 80007ee:	2b06      	cmp	r3, #6
 80007f0:	d902      	bls.n	80007f8 <NVIC_EncodePriority+0x30>
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3b03      	subs	r3, #3
 80007f6:	e000      	b.n	80007fa <NVIC_EncodePriority+0x32>
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43da      	mvns	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	401a      	ands	r2, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000810:	f04f 31ff 	mov.w	r1, #4294967295
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	43d9      	mvns	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	4313      	orrs	r3, r2
         );
}
 8000822:	4618      	mov	r0, r3
 8000824:	3724      	adds	r7, #36	; 0x24
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800083c:	d301      	bcc.n	8000842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083e:	2301      	movs	r3, #1
 8000840:	e00f      	b.n	8000862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <SysTick_Config+0x40>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084a:	210f      	movs	r1, #15
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f7ff ff90 	bl	8000774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <SysTick_Config+0x40>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <SysTick_Config+0x40>)
 800085c:	2207      	movs	r2, #7
 800085e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	e000e010 	.word	0xe000e010

08000870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ff2d 	bl	80006d8 <__NVIC_SetPriorityGrouping>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000898:	f7ff ff42 	bl	8000720 <__NVIC_GetPriorityGrouping>
 800089c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	6978      	ldr	r0, [r7, #20]
 80008a4:	f7ff ff90 	bl	80007c8 <NVIC_EncodePriority>
 80008a8:	4602      	mov	r2, r0
 80008aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff5f 	bl	8000774 <__NVIC_SetPriority>
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff35 	bl	800073c <__NVIC_EnableIRQ>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ffa2 	bl	800082c <SysTick_Config>
 80008e8:	4603      	mov	r3, r0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b08b      	sub	sp, #44	; 0x2c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000906:	e127      	b.n	8000b58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000908:	2201      	movs	r2, #1
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	69fa      	ldr	r2, [r7, #28]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	429a      	cmp	r2, r3
 8000922:	f040 8116 	bne.w	8000b52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b12      	cmp	r3, #18
 800092c:	d034      	beq.n	8000998 <HAL_GPIO_Init+0xa4>
 800092e:	2b12      	cmp	r3, #18
 8000930:	d80d      	bhi.n	800094e <HAL_GPIO_Init+0x5a>
 8000932:	2b02      	cmp	r3, #2
 8000934:	d02b      	beq.n	800098e <HAL_GPIO_Init+0x9a>
 8000936:	2b02      	cmp	r3, #2
 8000938:	d804      	bhi.n	8000944 <HAL_GPIO_Init+0x50>
 800093a:	2b00      	cmp	r3, #0
 800093c:	d031      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 800093e:	2b01      	cmp	r3, #1
 8000940:	d01c      	beq.n	800097c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000942:	e048      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000944:	2b03      	cmp	r3, #3
 8000946:	d043      	beq.n	80009d0 <HAL_GPIO_Init+0xdc>
 8000948:	2b11      	cmp	r3, #17
 800094a:	d01b      	beq.n	8000984 <HAL_GPIO_Init+0x90>
          break;
 800094c:	e043      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800094e:	4a89      	ldr	r2, [pc, #548]	; (8000b74 <HAL_GPIO_Init+0x280>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d026      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000954:	4a87      	ldr	r2, [pc, #540]	; (8000b74 <HAL_GPIO_Init+0x280>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d806      	bhi.n	8000968 <HAL_GPIO_Init+0x74>
 800095a:	4a87      	ldr	r2, [pc, #540]	; (8000b78 <HAL_GPIO_Init+0x284>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d020      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000960:	4a86      	ldr	r2, [pc, #536]	; (8000b7c <HAL_GPIO_Init+0x288>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d01d      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
          break;
 8000966:	e036      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000968:	4a85      	ldr	r2, [pc, #532]	; (8000b80 <HAL_GPIO_Init+0x28c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d019      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 800096e:	4a85      	ldr	r2, [pc, #532]	; (8000b84 <HAL_GPIO_Init+0x290>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d016      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000974:	4a84      	ldr	r2, [pc, #528]	; (8000b88 <HAL_GPIO_Init+0x294>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d013      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
          break;
 800097a:	e02c      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	623b      	str	r3, [r7, #32]
          break;
 8000982:	e028      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	3304      	adds	r3, #4
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	e023      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	3308      	adds	r3, #8
 8000994:	623b      	str	r3, [r7, #32]
          break;
 8000996:	e01e      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	330c      	adds	r3, #12
 800099e:	623b      	str	r3, [r7, #32]
          break;
 80009a0:	e019      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d102      	bne.n	80009b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009aa:	2304      	movs	r3, #4
 80009ac:	623b      	str	r3, [r7, #32]
          break;
 80009ae:	e012      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d105      	bne.n	80009c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b8:	2308      	movs	r3, #8
 80009ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	611a      	str	r2, [r3, #16]
          break;
 80009c2:	e008      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c4:	2308      	movs	r3, #8
 80009c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	69fa      	ldr	r2, [r7, #28]
 80009cc:	615a      	str	r2, [r3, #20]
          break;
 80009ce:	e002      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
          break;
 80009d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	2bff      	cmp	r3, #255	; 0xff
 80009da:	d801      	bhi.n	80009e0 <HAL_GPIO_Init+0xec>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	e001      	b.n	80009e4 <HAL_GPIO_Init+0xf0>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3304      	adds	r3, #4
 80009e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	2bff      	cmp	r3, #255	; 0xff
 80009ea:	d802      	bhi.n	80009f2 <HAL_GPIO_Init+0xfe>
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	e002      	b.n	80009f8 <HAL_GPIO_Init+0x104>
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	3b08      	subs	r3, #8
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	210f      	movs	r1, #15
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	401a      	ands	r2, r3
 8000a0a:	6a39      	ldr	r1, [r7, #32]
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	431a      	orrs	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f000 8096 	beq.w	8000b52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a26:	4b59      	ldr	r3, [pc, #356]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a58      	ldr	r2, [pc, #352]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6193      	str	r3, [r2, #24]
 8000a32:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a3e:	4a54      	ldr	r2, [pc, #336]	; (8000b90 <HAL_GPIO_Init+0x29c>)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	220f      	movs	r2, #15
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4b      	ldr	r2, [pc, #300]	; (8000b94 <HAL_GPIO_Init+0x2a0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d013      	beq.n	8000a92 <HAL_GPIO_Init+0x19e>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4a      	ldr	r2, [pc, #296]	; (8000b98 <HAL_GPIO_Init+0x2a4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d00d      	beq.n	8000a8e <HAL_GPIO_Init+0x19a>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a49      	ldr	r2, [pc, #292]	; (8000b9c <HAL_GPIO_Init+0x2a8>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d007      	beq.n	8000a8a <HAL_GPIO_Init+0x196>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a48      	ldr	r2, [pc, #288]	; (8000ba0 <HAL_GPIO_Init+0x2ac>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_GPIO_Init+0x192>
 8000a82:	2303      	movs	r3, #3
 8000a84:	e006      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a86:	2304      	movs	r3, #4
 8000a88:	e004      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	e002      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a92:	2300      	movs	r3, #0
 8000a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a96:	f002 0203 	and.w	r2, r2, #3
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	4093      	lsls	r3, r2
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aa4:	493a      	ldr	r1, [pc, #232]	; (8000b90 <HAL_GPIO_Init+0x29c>)
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	089b      	lsrs	r3, r3, #2
 8000aaa:	3302      	adds	r3, #2
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000abe:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4938      	ldr	r1, [pc, #224]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]
 8000aca:	e006      	b.n	8000ada <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000acc:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4933      	ldr	r1, [pc, #204]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d006      	beq.n	8000af4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	492e      	ldr	r1, [pc, #184]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	604b      	str	r3, [r1, #4]
 8000af2:	e006      	b.n	8000b02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	4929      	ldr	r1, [pc, #164]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	4924      	ldr	r1, [pc, #144]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	608b      	str	r3, [r1, #8]
 8000b1a:	e006      	b.n	8000b2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	491f      	ldr	r1, [pc, #124]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b26:	4013      	ands	r3, r2
 8000b28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	491a      	ldr	r1, [pc, #104]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60cb      	str	r3, [r1, #12]
 8000b42:	e006      	b.n	8000b52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	4915      	ldr	r1, [pc, #84]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	3301      	adds	r3, #1
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f47f aed0 	bne.w	8000908 <HAL_GPIO_Init+0x14>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	372c      	adds	r7, #44	; 0x2c
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	10210000 	.word	0x10210000
 8000b78:	10110000 	.word	0x10110000
 8000b7c:	10120000 	.word	0x10120000
 8000b80:	10310000 	.word	0x10310000
 8000b84:	10320000 	.word	0x10320000
 8000b88:	10220000 	.word	0x10220000
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000
 8000b94:	40010800 	.word	0x40010800
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40011400 	.word	0x40011400
 8000ba4:	40010400 	.word	0x40010400

08000ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bb8:	787b      	ldrb	r3, [r7, #1]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bbe:	887a      	ldrh	r2, [r7, #2]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bc4:	e003      	b.n	8000bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	041a      	lsls	r2, r3, #16
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	611a      	str	r2, [r3, #16]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bea:	887a      	ldrh	r2, [r7, #2]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	041a      	lsls	r2, r3, #16
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	43d9      	mvns	r1, r3
 8000bf6:	887b      	ldrh	r3, [r7, #2]
 8000bf8:	400b      	ands	r3, r1
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	611a      	str	r2, [r3, #16]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0c:	b08b      	sub	sp, #44	; 0x2c
 8000c0e:	af06      	add	r7, sp, #24
 8000c10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e0fd      	b.n	8000e18 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d106      	bne.n	8000c36 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f008 fe4f 	bl	80098d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2203      	movs	r2, #3
 8000c3a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 f82a 	bl	8002c9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	687e      	ldr	r6, [r7, #4]
 8000c50:	466d      	mov	r5, sp
 8000c52:	f106 0410 	add.w	r4, r6, #16
 8000c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c5a:	6823      	ldr	r3, [r4, #0]
 8000c5c:	602b      	str	r3, [r5, #0]
 8000c5e:	1d33      	adds	r3, r6, #4
 8000c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c62:	6838      	ldr	r0, [r7, #0]
 8000c64:	f001 fff4 	bl	8002c50 <USB_CoreInit>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2202      	movs	r2, #2
 8000c72:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e0ce      	b.n	8000e18 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 f825 	bl	8002cd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e04c      	b.n	8000d26 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	440b      	add	r3, r1
 8000cb2:	7bfa      	ldrb	r2, [r7, #15]
 8000cb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	b298      	uxth	r0, r3
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	440b      	add	r3, r1
 8000cc8:	3336      	adds	r3, #54	; 0x36
 8000cca:	4602      	mov	r2, r0
 8000ccc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	440b      	add	r3, r1
 8000cde:	3303      	adds	r3, #3
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ce4:	7bfa      	ldrb	r2, [r7, #15]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	3338      	adds	r3, #56	; 0x38
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cf8:	7bfa      	ldrb	r2, [r7, #15]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	333c      	adds	r3, #60	; 0x3c
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d0c:	7bfa      	ldrb	r2, [r7, #15]
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	440b      	add	r3, r1
 8000d1a:	3340      	adds	r3, #64	; 0x40
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	3301      	adds	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	7bfa      	ldrb	r2, [r7, #15]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d3ad      	bcc.n	8000c8c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e044      	b.n	8000dc0 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d36:	7bfa      	ldrb	r2, [r7, #15]
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d4c:	7bfa      	ldrb	r2, [r7, #15]
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d5e:	7bfa      	ldrb	r2, [r7, #15]
 8000d60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	440b      	add	r3, r1
 8000d70:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d78:	7bfa      	ldrb	r2, [r7, #15]
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	440b      	add	r3, r1
 8000d86:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d8e:	7bfa      	ldrb	r2, [r7, #15]
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	4613      	mov	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	440b      	add	r3, r1
 8000db2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d3b5      	bcc.n	8000d36 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	687e      	ldr	r6, [r7, #4]
 8000dd2:	466d      	mov	r5, sp
 8000dd4:	f106 0410 	add.w	r4, r6, #16
 8000dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	602b      	str	r3, [r5, #0]
 8000de0:	1d33      	adds	r3, r6, #4
 8000de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000de4:	6838      	ldr	r0, [r7, #0]
 8000de6:	f001 ff7f 	bl	8002ce8 <USB_DevInit>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d005      	beq.n	8000dfc <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2202      	movs	r2, #2
 8000df4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e00d      	b.n	8000e18 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 ff19 	bl	8004c48 <USB_DevDisconnect>

  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d101      	bne.n	8000e36 <HAL_PCD_Start+0x16>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e016      	b.n	8000e64 <HAL_PCD_Start+0x44>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 ff14 	bl	8002c70 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f008 ffb5 	bl	8009dba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f003 feed 	bl	8004c34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 feef 	bl	8004c5c <USB_ReadInterrupts>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e88:	d102      	bne.n	8000e90 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 fb61 	bl	8001552 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f003 fee1 	bl	8004c5c <USB_ReadInterrupts>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea4:	d112      	bne.n	8000ecc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000eb8:	b292      	uxth	r2, r2
 8000eba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f008 fd83 	bl	80099ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 f925 	bl	8001116 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 fec3 	bl	8004c5c <USB_ReadInterrupts>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000edc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ee0:	d10b      	bne.n	8000efa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ef4:	b292      	uxth	r2, r2
 8000ef6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 feac 	bl	8004c5c <USB_ReadInterrupts>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f0e:	d10b      	bne.n	8000f28 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f22:	b292      	uxth	r2, r2
 8000f24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 fe95 	bl	8004c5c <USB_ReadInterrupts>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f3c:	d126      	bne.n	8000f8c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0204 	bic.w	r2, r2, #4
 8000f50:	b292      	uxth	r2, r2
 8000f52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0208 	bic.w	r2, r2, #8
 8000f68:	b292      	uxth	r2, r2
 8000f6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f008 fd64 	bl	8009a3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f86:	b292      	uxth	r2, r2
 8000f88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 fe63 	bl	8004c5c <USB_ReadInterrupts>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fa0:	f040 8084 	bne.w	80010ac <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	77fb      	strb	r3, [r7, #31]
 8000fa8:	e011      	b.n	8000fce <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	7ffb      	ldrb	r3, [r7, #31]
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	441a      	add	r2, r3
 8000fb6:	7ffb      	ldrb	r3, [r7, #31]
 8000fb8:	8812      	ldrh	r2, [r2, #0]
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	f107 0120 	add.w	r1, r7, #32
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000fc8:	7ffb      	ldrb	r3, [r7, #31]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	77fb      	strb	r3, [r7, #31]
 8000fce:	7ffb      	ldrb	r3, [r7, #31]
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	d9ea      	bls.n	8000faa <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0201 	orr.w	r2, r2, #1
 8000fe6:	b292      	uxth	r2, r2
 8000fe8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0201 	bic.w	r2, r2, #1
 8000ffe:	b292      	uxth	r2, r2
 8001000:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001004:	bf00      	nop
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800100e:	b29b      	uxth	r3, r3
 8001010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f6      	beq.n	8001006 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001020:	b29a      	uxth	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800102a:	b292      	uxth	r2, r2
 800102c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	77fb      	strb	r3, [r7, #31]
 8001034:	e010      	b.n	8001058 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001036:	7ffb      	ldrb	r3, [r7, #31]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	4611      	mov	r1, r2
 800103e:	7ffa      	ldrb	r2, [r7, #31]
 8001040:	0092      	lsls	r2, r2, #2
 8001042:	440a      	add	r2, r1
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	f107 0120 	add.w	r1, r7, #32
 800104a:	440b      	add	r3, r1
 800104c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001050:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001052:	7ffb      	ldrb	r3, [r7, #31]
 8001054:	3301      	adds	r3, #1
 8001056:	77fb      	strb	r3, [r7, #31]
 8001058:	7ffb      	ldrb	r3, [r7, #31]
 800105a:	2b07      	cmp	r3, #7
 800105c:	d9eb      	bls.n	8001036 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001066:	b29a      	uxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 0208 	orr.w	r2, r2, #8
 8001070:	b292      	uxth	r2, r2
 8001072:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800107e:	b29a      	uxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001088:	b292      	uxth	r2, r2
 800108a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0204 	orr.w	r2, r2, #4
 80010a0:	b292      	uxth	r2, r2
 80010a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f008 fcae 	bl	8009a08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fdd3 	bl	8004c5c <USB_ReadInterrupts>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010c0:	d10e      	bne.n	80010e0 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010d4:	b292      	uxth	r2, r2
 80010d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f008 fc67 	bl	80099ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fdb9 	bl	8004c5c <USB_ReadInterrupts>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010f4:	d10b      	bne.n	800110e <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010fe:	b29a      	uxth	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001108:	b292      	uxth	r2, r2
 800110a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <HAL_PCD_SetAddress+0x1a>
 800112c:	2302      	movs	r3, #2
 800112e:	e013      	b.n	8001158 <HAL_PCD_SetAddress+0x42>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	78fa      	ldrb	r2, [r7, #3]
 800113c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	78fa      	ldrb	r2, [r7, #3]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f003 fd60 	bl	8004c0e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4603      	mov	r3, r0
 8001170:	70fb      	strb	r3, [r7, #3]
 8001172:	460b      	mov	r3, r1
 8001174:	803b      	strh	r3, [r7, #0]
 8001176:	4613      	mov	r3, r2
 8001178:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800117e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001182:	2b00      	cmp	r3, #0
 8001184:	da0e      	bge.n	80011a4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2201      	movs	r2, #1
 80011a0:	705a      	strb	r2, [r3, #1]
 80011a2:	e00e      	b.n	80011c2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	f003 0207 	and.w	r2, r3, #7
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80011ce:	883a      	ldrh	r2, [r7, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	78ba      	ldrb	r2, [r7, #2]
 80011d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d004      	beq.n	80011ec <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80011ec:	78bb      	ldrb	r3, [r7, #2]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d102      	bne.n	80011f8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_PCD_EP_Open+0xa6>
 8001202:	2302      	movs	r3, #2
 8001204:	e00e      	b.n	8001224 <HAL_PCD_EP_Open+0xc4>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68f9      	ldr	r1, [r7, #12]
 8001214:	4618      	mov	r0, r3
 8001216:	f001 fd87 	bl	8002d28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001222:	7afb      	ldrb	r3, [r7, #11]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800123c:	2b00      	cmp	r3, #0
 800123e:	da0e      	bge.n	800125e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2201      	movs	r2, #1
 800125a:	705a      	strb	r2, [r3, #1]
 800125c:	e00e      	b.n	800127c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	f003 0207 	and.w	r2, r3, #7
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2200      	movs	r2, #0
 800127a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	b2da      	uxtb	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_PCD_EP_Close+0x6a>
 8001292:	2302      	movs	r3, #2
 8001294:	e00e      	b.n	80012b4 <HAL_PCD_EP_Close+0x88>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68f9      	ldr	r1, [r7, #12]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 f8a9 	bl	80033fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	460b      	mov	r3, r1
 80012ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	f003 0207 	and.w	r2, r3, #7
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	2200      	movs	r2, #0
 80012fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012fc:	7afb      	ldrb	r3, [r7, #11]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	b2da      	uxtb	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001308:	7afb      	ldrb	r3, [r7, #11]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	2b00      	cmp	r3, #0
 8001310:	d106      	bne.n	8001320 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6979      	ldr	r1, [r7, #20]
 8001318:	4618      	mov	r0, r3
 800131a:	f002 fa5b 	bl	80037d4 <USB_EPStartXfer>
 800131e:	e005      	b.n	800132c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6979      	ldr	r1, [r7, #20]
 8001326:	4618      	mov	r0, r3
 8001328:	f002 fa54 	bl	80037d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	f003 0207 	and.w	r2, r3, #7
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001358:	681b      	ldr	r3, [r3, #0]
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	460b      	mov	r3, r1
 8001372:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001374:	7afb      	ldrb	r3, [r7, #11]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2201      	movs	r2, #1
 80013ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013bc:	7afb      	ldrb	r3, [r7, #11]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6979      	ldr	r1, [r7, #20]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 fa01 	bl	80037d4 <USB_EPStartXfer>
 80013d2:	e005      	b.n	80013e0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6979      	ldr	r1, [r7, #20]
 80013da:	4618      	mov	r0, r3
 80013dc:	f002 f9fa 	bl	80037d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	f003 0207 	and.w	r2, r3, #7
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d901      	bls.n	8001408 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e04c      	b.n	80014a2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da0e      	bge.n	800142e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	4413      	add	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2201      	movs	r2, #1
 800142a:	705a      	strb	r2, [r3, #1]
 800142c:	e00c      	b.n	8001448 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800142e:	78fa      	ldrb	r2, [r7, #3]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2200      	movs	r2, #0
 8001446:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2201      	movs	r2, #1
 800144c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	b2da      	uxtb	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_PCD_EP_SetStall+0x7e>
 8001464:	2302      	movs	r3, #2
 8001466:	e01c      	b.n	80014a2 <HAL_PCD_EP_SetStall+0xb8>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68f9      	ldr	r1, [r7, #12]
 8001476:	4618      	mov	r0, r3
 8001478:	f003 facc 	bl	8004a14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	2b00      	cmp	r3, #0
 8001484:	d108      	bne.n	8001498 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001490:	4619      	mov	r1, r3
 8001492:	4610      	mov	r0, r2
 8001494:	f003 fbf1 	bl	8004c7a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	f003 020f 	and.w	r2, r3, #15
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d901      	bls.n	80014c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e040      	b.n	800154a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	da0e      	bge.n	80014ee <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2201      	movs	r2, #1
 80014ea:	705a      	strb	r2, [r3, #1]
 80014ec:	e00e      	b.n	800150c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	f003 0207 	and.w	r2, r3, #7
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	b2da      	uxtb	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <HAL_PCD_EP_ClrStall+0x82>
 8001528:	2302      	movs	r3, #2
 800152a:	e00e      	b.n	800154a <HAL_PCD_EP_ClrStall+0xa0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	4618      	mov	r0, r3
 800153c:	f003 faba 	bl	8004ab4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b08e      	sub	sp, #56	; 0x38
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800155a:	e2df      	b.n	8001b1c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001564:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001566:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001572:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 8158 	bne.w	800182c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800157c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b00      	cmp	r3, #0
 8001584:	d152      	bne.n	800162c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001596:	81fb      	strh	r3, [r7, #14]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	89fb      	ldrh	r3, [r7, #14]
 800159e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3328      	adds	r3, #40	; 0x28
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	3302      	adds	r3, #2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	695a      	ldr	r2, [r3, #20]
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	441a      	add	r2, r3
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015ea:	2100      	movs	r1, #0
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f008 f9c4 	bl	800997a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 828e 	beq.w	8001b1c <PCD_EP_ISR_Handler+0x5ca>
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b00      	cmp	r3, #0
 8001606:	f040 8289 	bne.w	8001b1c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001616:	b2da      	uxtb	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	b292      	uxth	r2, r2
 800161e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800162a:	e277      	b.n	8001b1c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800163c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800163e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001642:	2b00      	cmp	r3, #0
 8001644:	d034      	beq.n	80016b0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800164e:	b29b      	uxth	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4413      	add	r3, r2
 800165a:	3306      	adds	r3, #6
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	4413      	add	r3, r2
 8001664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001684:	b29b      	uxth	r3, r3
 8001686:	f003 fb47 	bl	8004d18 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b29a      	uxth	r2, r3
 8001692:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001696:	4013      	ands	r3, r2
 8001698:	823b      	strh	r3, [r7, #16]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	8a3a      	ldrh	r2, [r7, #16]
 80016a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016a4:	b292      	uxth	r2, r2
 80016a6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f008 f939 	bl	8009920 <HAL_PCD_SetupStageCallback>
 80016ae:	e235      	b.n	8001b1c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016b0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f280 8231 	bge.w	8001b1c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016c6:	4013      	ands	r3, r2
 80016c8:	83bb      	strh	r3, [r7, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	8bba      	ldrh	r2, [r7, #28]
 80016d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016d4:	b292      	uxth	r2, r2
 80016d6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	3306      	adds	r3, #6
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d019      	beq.n	8001740 <PCD_EP_ISR_Handler+0x1ee>
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d015      	beq.n	8001740 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	6959      	ldr	r1, [r3, #20]
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001724:	b29b      	uxth	r3, r3
 8001726:	f003 faf7 	bl	8004d18 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	441a      	add	r2, r3
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001738:	2100      	movs	r1, #0
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f008 f902 	bl	8009944 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800174e:	b29b      	uxth	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4413      	add	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d112      	bne.n	800178e <PCD_EP_ISR_Handler+0x23c>
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001772:	b29a      	uxth	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	801a      	strh	r2, [r3, #0]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	b29b      	uxth	r3, r3
 800177e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001786:	b29a      	uxth	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	801a      	strh	r2, [r3, #0]
 800178c:	e02f      	b.n	80017ee <PCD_EP_ISR_Handler+0x29c>
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b3e      	cmp	r3, #62	; 0x3e
 8001794:	d813      	bhi.n	80017be <PCD_EP_ISR_Handler+0x26c>
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	085b      	lsrs	r3, r3, #1
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <PCD_EP_ISR_Handler+0x25e>
 80017aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ac:	3301      	adds	r3, #1
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
 80017b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	029b      	lsls	r3, r3, #10
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	801a      	strh	r2, [r3, #0]
 80017bc:	e017      	b.n	80017ee <PCD_EP_ISR_Handler+0x29c>
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <PCD_EP_ISR_Handler+0x286>
 80017d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d4:	3b01      	subs	r3, #1
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
 80017d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017da:	b29b      	uxth	r3, r3
 80017dc:	029b      	lsls	r3, r3, #10
 80017de:	b29b      	uxth	r3, r3
 80017e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fe:	827b      	strh	r3, [r7, #18]
 8001800:	8a7b      	ldrh	r3, [r7, #18]
 8001802:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001806:	827b      	strh	r3, [r7, #18]
 8001808:	8a7b      	ldrh	r3, [r7, #18]
 800180a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800180e:	827b      	strh	r3, [r7, #18]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	8a7b      	ldrh	r3, [r7, #18]
 8001816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800181a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800181e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001826:	b29b      	uxth	r3, r3
 8001828:	8013      	strh	r3, [r2, #0]
 800182a:	e177      	b.n	8001b1c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800183e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001842:	2b00      	cmp	r3, #0
 8001844:	f280 80ea 	bge.w	8001a1c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b29a      	uxth	r2, r3
 800185a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800185e:	4013      	ands	r3, r2
 8001860:	853b      	strh	r3, [r7, #40]	; 0x28
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001872:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001876:	b292      	uxth	r2, r2
 8001878:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800187a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	7b1b      	ldrb	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d122      	bne.n	80018de <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	3306      	adds	r3, #6
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80018c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 8087 	beq.w	80019d8 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	6959      	ldr	r1, [r3, #20]
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	88da      	ldrh	r2, [r3, #6]
 80018d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018d8:	f003 fa1e 	bl	8004d18 <USB_ReadPMA>
 80018dc:	e07c      	b.n	80019d8 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	78db      	ldrb	r3, [r3, #3]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d108      	bne.n	80018f8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80018e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018e8:	461a      	mov	r2, r3
 80018ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f923 	bl	8001b38 <HAL_PCD_EP_DB_Receive>
 80018f2:	4603      	mov	r3, r0
 80018f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80018f6:	e06f      	b.n	80019d8 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b29b      	uxth	r3, r3
 800190a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800190e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001912:	847b      	strh	r3, [r7, #34]	; 0x22
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	441a      	add	r2, r3
 8001922:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800192c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001930:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001934:	b29b      	uxth	r3, r3
 8001936:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d021      	beq.n	8001996 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800195a:	b29b      	uxth	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	3302      	adds	r3, #2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	4413      	add	r3, r2
 8001970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800197a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800197c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800197e:	2b00      	cmp	r3, #0
 8001980:	d02a      	beq.n	80019d8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	6959      	ldr	r1, [r3, #20]
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	891a      	ldrh	r2, [r3, #8]
 800198e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001990:	f003 f9c2 	bl	8004d18 <USB_ReadPMA>
 8001994:	e020      	b.n	80019d8 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800199e:	b29b      	uxth	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4413      	add	r3, r2
 80019aa:	3306      	adds	r3, #6
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019be:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80019c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d008      	beq.n	80019d8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	6959      	ldr	r1, [r3, #20]
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	895a      	ldrh	r2, [r3, #10]
 80019d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019d4:	f003 f9a0 	bl	8004d18 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	69da      	ldr	r2, [r3, #28]
 80019dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019de:	441a      	add	r2, r3
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019ea:	441a      	add	r2, r3
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <PCD_EP_ISR_Handler+0x4b0>
 80019f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d206      	bcs.n	8001a10 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	4619      	mov	r1, r3
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f007 ff9b 	bl	8009944 <HAL_PCD_DataOutStageCallback>
 8001a0e:	e005      	b.n	8001a1c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 fedc 	bl	80037d4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d07a      	beq.n	8001b1c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a54:	843b      	strh	r3, [r7, #32]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	441a      	add	r2, r3
 8001a64:	8c3b      	ldrh	r3, [r7, #32]
 8001a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	78db      	ldrb	r3, [r3, #3]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d108      	bne.n	8001a8c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d146      	bne.n	8001b10 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d141      	bne.n	8001b10 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ab4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	8bfb      	ldrh	r3, [r7, #30]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d906      	bls.n	8001ace <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	699a      	ldr	r2, [r3, #24]
 8001ac4:	8bfb      	ldrh	r3, [r7, #30]
 8001ac6:	1ad2      	subs	r2, r2, r3
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	619a      	str	r2, [r3, #24]
 8001acc:	e002      	b.n	8001ad4 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d106      	bne.n	8001aea <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f007 ff49 	bl	800997a <HAL_PCD_DataInStageCallback>
 8001ae8:	e018      	b.n	8001b1c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	8bfb      	ldrh	r3, [r7, #30]
 8001af0:	441a      	add	r2, r3
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	69da      	ldr	r2, [r3, #28]
 8001afa:	8bfb      	ldrh	r3, [r7, #30]
 8001afc:	441a      	add	r2, r3
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 fe63 	bl	80037d4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001b0e:	e005      	b.n	8001b1c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b12:	461a      	mov	r2, r3
 8001b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f91b 	bl	8001d52 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f6ff ad17 	blt.w	800155c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3738      	adds	r7, #56	; 0x38
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	4613      	mov	r3, r2
 8001b44:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d07e      	beq.n	8001c4e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	3302      	adds	r3, #2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b78:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	699a      	ldr	r2, [r3, #24]
 8001b7e:	8b7b      	ldrh	r3, [r7, #26]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d306      	bcc.n	8001b92 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	699a      	ldr	r2, [r3, #24]
 8001b88:	8b7b      	ldrh	r3, [r7, #26]
 8001b8a:	1ad2      	subs	r2, r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	619a      	str	r2, [r3, #24]
 8001b90:	e002      	b.n	8001b98 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d123      	bne.n	8001be8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bba:	833b      	strh	r3, [r7, #24]
 8001bbc:	8b3b      	ldrh	r3, [r7, #24]
 8001bbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bc2:	833b      	strh	r3, [r7, #24]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	441a      	add	r2, r3
 8001bd2:	8b3b      	ldrh	r3, [r7, #24]
 8001bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d01f      	beq.n	8001c32 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0c:	82fb      	strh	r3, [r7, #22]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	441a      	add	r2, r3
 8001c1c:	8afb      	ldrh	r3, [r7, #22]
 8001c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c32:	8b7b      	ldrh	r3, [r7, #26]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 8087 	beq.w	8001d48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	6959      	ldr	r1, [r3, #20]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	891a      	ldrh	r2, [r3, #8]
 8001c46:	8b7b      	ldrh	r3, [r7, #26]
 8001c48:	f003 f866 	bl	8004d18 <USB_ReadPMA>
 8001c4c:	e07c      	b.n	8001d48 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	3306      	adds	r3, #6
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c76:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	699a      	ldr	r2, [r3, #24]
 8001c7c:	8b7b      	ldrh	r3, [r7, #26]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d306      	bcc.n	8001c90 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	8b7b      	ldrh	r3, [r7, #26]
 8001c88:	1ad2      	subs	r2, r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	619a      	str	r2, [r3, #24]
 8001c8e:	e002      	b.n	8001c96 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d123      	bne.n	8001ce6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb8:	83fb      	strh	r3, [r7, #30]
 8001cba:	8bfb      	ldrh	r3, [r7, #30]
 8001cbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cc0:	83fb      	strh	r3, [r7, #30]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	441a      	add	r2, r3
 8001cd0:	8bfb      	ldrh	r3, [r7, #30]
 8001cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d11f      	bne.n	8001d30 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d0a:	83bb      	strh	r3, [r7, #28]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	441a      	add	r2, r3
 8001d1a:	8bbb      	ldrh	r3, [r7, #28]
 8001d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d30:	8b7b      	ldrh	r3, [r7, #26]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d008      	beq.n	8001d48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	6959      	ldr	r1, [r3, #20]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	895a      	ldrh	r2, [r3, #10]
 8001d42:	8b7b      	ldrh	r3, [r7, #26]
 8001d44:	f002 ffe8 	bl	8004d18 <USB_ReadPMA>
    }
  }

  return count;
 8001d48:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b092      	sub	sp, #72	; 0x48
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 8132 	beq.w	8001fd0 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	3302      	adds	r3, #2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d94:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d906      	bls.n	8001dae <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	699a      	ldr	r2, [r3, #24]
 8001da4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001da6:	1ad2      	subs	r2, r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	619a      	str	r2, [r3, #24]
 8001dac:	e002      	b.n	8001db4 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d12c      	bne.n	8001e16 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f007 fdd9 	bl	800997a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 822f 	beq.w	8002232 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dee:	827b      	strh	r3, [r7, #18]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	441a      	add	r2, r3
 8001dfe:	8a7b      	ldrh	r3, [r7, #18]
 8001e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	8013      	strh	r3, [r2, #0]
 8001e14:	e20d      	b.n	8002232 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01f      	beq.n	8001e60 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	441a      	add	r2, r3
 8001e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	f040 81e3 	bne.w	8002232 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	695a      	ldr	r2, [r3, #20]
 8001e70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e72:	441a      	add	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e7e:	441a      	add	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	6a1a      	ldr	r2, [r3, #32]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d309      	bcc.n	8001ea4 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	6a1a      	ldr	r2, [r3, #32]
 8001e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9c:	1ad2      	subs	r2, r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	621a      	str	r2, [r3, #32]
 8001ea2:	e014      	b.n	8001ece <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d106      	bne.n	8001eba <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001eac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001eae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001eb8:	e009      	b.n	8001ece <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d155      	bne.n	8001f82 <HAL_PCD_EP_DB_Transmit+0x230>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	4413      	add	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	011a      	lsls	r2, r3, #4
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d112      	bne.n	8001f2a <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	801a      	strh	r2, [r3, #0]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	801a      	strh	r2, [r3, #0]
 8001f28:	e047      	b.n	8001fba <HAL_PCD_EP_DB_Transmit+0x268>
 8001f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f2c:	2b3e      	cmp	r3, #62	; 0x3e
 8001f2e:	d811      	bhi.n	8001f54 <HAL_PCD_EP_DB_Transmit+0x202>
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f42:	3301      	adds	r3, #1
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	029b      	lsls	r3, r3, #10
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	801a      	strh	r2, [r3, #0]
 8001f52:	e032      	b.n	8001fba <HAL_PCD_EP_DB_Transmit+0x268>
 8001f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <HAL_PCD_EP_DB_Transmit+0x218>
 8001f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f66:	3b01      	subs	r3, #1
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	029b      	lsls	r3, r3, #10
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	801a      	strh	r2, [r3, #0]
 8001f80:	e01b      	b.n	8001fba <HAL_PCD_EP_DB_Transmit+0x268>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	785b      	ldrb	r3, [r3, #1]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d117      	bne.n	8001fba <HAL_PCD_EP_DB_Transmit+0x268>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	623b      	str	r3, [r7, #32]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	623b      	str	r3, [r7, #32]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	011a      	lsls	r2, r3, #4
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	4413      	add	r3, r2
 8001fac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	6959      	ldr	r1, [r3, #20]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	891a      	ldrh	r2, [r3, #8]
 8001fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f002 fe61 	bl	8004c90 <USB_WritePMA>
 8001fce:	e130      	b.n	8002232 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3306      	adds	r3, #6
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002000:	429a      	cmp	r2, r3
 8002002:	d306      	bcc.n	8002012 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800200a:	1ad2      	subs	r2, r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	619a      	str	r2, [r3, #24]
 8002010:	e002      	b.n	8002018 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d12c      	bne.n	800207a <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f007 fca7 	bl	800997a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 80fd 	bne.w	8002232 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800204e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002052:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	441a      	add	r2, r3
 8002062:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800206c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002074:	b29b      	uxth	r3, r3
 8002076:	8013      	strh	r3, [r2, #0]
 8002078:	e0db      	b.n	8002232 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d11f      	bne.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800209a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80020b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	f040 80b1 	bne.w	8002232 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020d6:	441a      	add	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020e2:	441a      	add	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	6a1a      	ldr	r2, [r3, #32]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d309      	bcc.n	8002108 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	6a1a      	ldr	r2, [r3, #32]
 80020fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002100:	1ad2      	subs	r2, r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	621a      	str	r2, [r3, #32]
 8002106:	e014      	b.n	8002132 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d106      	bne.n	800211e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002110:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002112:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800211c:	e009      	b.n	8002132 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2200      	movs	r2, #0
 8002128:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	785b      	ldrb	r3, [r3, #1]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d155      	bne.n	80021ec <HAL_PCD_EP_DB_Transmit+0x49a>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	647b      	str	r3, [r7, #68]	; 0x44
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800214e:	b29b      	uxth	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002154:	4413      	add	r3, r2
 8002156:	647b      	str	r3, [r7, #68]	; 0x44
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	011a      	lsls	r2, r3, #4
 800215e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002160:	4413      	add	r3, r2
 8002162:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
 8002168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216a:	2b00      	cmp	r3, #0
 800216c:	d112      	bne.n	8002194 <HAL_PCD_EP_DB_Transmit+0x442>
 800216e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002178:	b29a      	uxth	r2, r3
 800217a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800217c:	801a      	strh	r2, [r3, #0]
 800217e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218c:	b29a      	uxth	r2, r3
 800218e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002190:	801a      	strh	r2, [r3, #0]
 8002192:	e044      	b.n	800221e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002196:	2b3e      	cmp	r3, #62	; 0x3e
 8002198:	d811      	bhi.n	80021be <HAL_PCD_EP_DB_Transmit+0x46c>
 800219a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_PCD_EP_DB_Transmit+0x45e>
 80021aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ac:	3301      	adds	r3, #1
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	029b      	lsls	r3, r3, #10
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ba:	801a      	strh	r2, [r3, #0]
 80021bc:	e02f      	b.n	800221e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <HAL_PCD_EP_DB_Transmit+0x482>
 80021ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d0:	3b01      	subs	r3, #1
 80021d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	029b      	lsls	r3, r3, #10
 80021da:	b29b      	uxth	r3, r3
 80021dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e8:	801a      	strh	r2, [r3, #0]
 80021ea:	e018      	b.n	800221e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	785b      	ldrb	r3, [r3, #1]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d114      	bne.n	800221e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002202:	4413      	add	r3, r2
 8002204:	637b      	str	r3, [r7, #52]	; 0x34
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	011a      	lsls	r2, r3, #4
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	4413      	add	r3, r2
 8002210:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002214:	633b      	str	r3, [r7, #48]	; 0x30
 8002216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002218:	b29a      	uxth	r2, r3
 800221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	6959      	ldr	r1, [r3, #20]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	895a      	ldrh	r2, [r3, #10]
 800222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222c:	b29b      	uxth	r3, r3
 800222e:	f002 fd2f 	bl	8004c90 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800224c:	823b      	strh	r3, [r7, #16]
 800224e:	8a3b      	ldrh	r3, [r7, #16]
 8002250:	f083 0310 	eor.w	r3, r3, #16
 8002254:	823b      	strh	r3, [r7, #16]
 8002256:	8a3b      	ldrh	r3, [r7, #16]
 8002258:	f083 0320 	eor.w	r3, r3, #32
 800225c:	823b      	strh	r3, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	441a      	add	r2, r3
 800226c:	8a3b      	ldrh	r3, [r7, #16]
 800226e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227e:	b29b      	uxth	r3, r3
 8002280:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3748      	adds	r7, #72	; 0x48
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	817b      	strh	r3, [r7, #10]
 800229a:	4613      	mov	r3, r2
 800229c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800229e:	897b      	ldrh	r3, [r7, #10]
 80022a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022aa:	897b      	ldrh	r3, [r7, #10]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4413      	add	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e009      	b.n	80022d6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022c2:	897a      	ldrh	r2, [r7, #10]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80022d6:	893b      	ldrh	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2200      	movs	r2, #0
 80022e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	80da      	strh	r2, [r3, #6]
 80022ea:	e00b      	b.n	8002304 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2201      	movs	r2, #1
 80022f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	b29a      	uxth	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e26c      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8087 	beq.w	800243e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002330:	4b92      	ldr	r3, [pc, #584]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b04      	cmp	r3, #4
 800233a:	d00c      	beq.n	8002356 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800233c:	4b8f      	ldr	r3, [pc, #572]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d112      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
 8002348:	4b8c      	ldr	r3, [pc, #560]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d10b      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002356:	4b89      	ldr	r3, [pc, #548]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d06c      	beq.n	800243c <HAL_RCC_OscConfig+0x12c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d168      	bne.n	800243c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e246      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x76>
 8002378:	4b80      	ldr	r3, [pc, #512]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a7f      	ldr	r2, [pc, #508]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800237e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e02e      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x98>
 800238e:	4b7b      	ldr	r3, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a7a      	ldr	r2, [pc, #488]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b78      	ldr	r3, [pc, #480]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a77      	ldr	r2, [pc, #476]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e01d      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0xbc>
 80023b2:	4b72      	ldr	r3, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a71      	ldr	r2, [pc, #452]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b6f      	ldr	r3, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6e      	ldr	r2, [pc, #440]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023cc:	4b6b      	ldr	r3, [pc, #428]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6a      	ldr	r2, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b68      	ldr	r3, [pc, #416]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a67      	ldr	r2, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d013      	beq.n	8002414 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe f96a 	bl	80006c4 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7fe f966 	bl	80006c4 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e1fa      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b5d      	ldr	r3, [pc, #372]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0xe4>
 8002412:	e014      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7fe f956 	bl	80006c4 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe f952 	bl	80006c4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e1e6      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x10c>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d063      	beq.n	8002512 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800244a:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002456:	4b49      	ldr	r3, [pc, #292]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b08      	cmp	r3, #8
 8002460:	d11c      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
 8002462:	4b46      	ldr	r3, [pc, #280]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d116      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	4b43      	ldr	r3, [pc, #268]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e1ba      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4939      	ldr	r1, [pc, #228]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	e03a      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe f90b 	bl	80006c4 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b2:	f7fe f907 	bl	80006c4 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e19b      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4927      	ldr	r1, [pc, #156]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e015      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe f8ea 	bl	80006c4 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7fe f8e6 	bl	80006c4 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e17a      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d03a      	beq.n	8002594 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d019      	beq.n	800255a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002528:	2201      	movs	r2, #1
 800252a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252c:	f7fe f8ca 	bl	80006c4 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7fe f8c6 	bl	80006c4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e15a      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002552:	2001      	movs	r0, #1
 8002554:	f000 faa8 	bl	8002aa8 <RCC_Delay>
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002560:	f7fe f8b0 	bl	80006c4 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002566:	e00f      	b.n	8002588 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe f8ac 	bl	80006c4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d908      	bls.n	8002588 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e140      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	42420000 	.word	0x42420000
 8002584:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b9e      	ldr	r3, [pc, #632]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e9      	bne.n	8002568 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a6 	beq.w	80026ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b97      	ldr	r3, [pc, #604]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10d      	bne.n	80025ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b94      	ldr	r3, [pc, #592]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a93      	ldr	r2, [pc, #588]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025bc:	61d3      	str	r3, [r2, #28]
 80025be:	4b91      	ldr	r3, [pc, #580]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	4b8e      	ldr	r3, [pc, #568]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025da:	4b8b      	ldr	r3, [pc, #556]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a8a      	ldr	r2, [pc, #552]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e6:	f7fe f86d 	bl	80006c4 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ee:	f7fe f869 	bl	80006c4 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b64      	cmp	r3, #100	; 0x64
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0fd      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	4b81      	ldr	r3, [pc, #516]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x312>
 8002614:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a7a      	ldr	r2, [pc, #488]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	e02d      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x334>
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a75      	ldr	r2, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	4b73      	ldr	r3, [pc, #460]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a72      	ldr	r2, [pc, #456]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6213      	str	r3, [r2, #32]
 8002642:	e01c      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b05      	cmp	r3, #5
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_OscConfig+0x356>
 800264c:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a6c      	ldr	r2, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a69      	ldr	r2, [pc, #420]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	e00b      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a66      	ldr	r2, [pc, #408]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	4b64      	ldr	r3, [pc, #400]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a63      	ldr	r2, [pc, #396]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d015      	beq.n	80026b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7fe f81d 	bl	80006c4 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7fe f819 	bl	80006c4 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0ab      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	4b57      	ldr	r3, [pc, #348]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ee      	beq.n	800268e <HAL_RCC_OscConfig+0x37e>
 80026b0:	e014      	b.n	80026dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe f807 	bl	80006c4 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe f803 	bl	80006c4 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e095      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d0:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ee      	bne.n	80026ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d105      	bne.n	80026ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e2:	4b48      	ldr	r3, [pc, #288]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a47      	ldr	r2, [pc, #284]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8081 	beq.w	80027fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f8:	4b42      	ldr	r3, [pc, #264]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d061      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d146      	bne.n	800279a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270c:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7fd ffd7 	bl	80006c4 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271a:	f7fd ffd3 	bl	80006c4 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e067      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272c:	4b35      	ldr	r3, [pc, #212]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d108      	bne.n	8002754 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002742:	4b30      	ldr	r3, [pc, #192]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	492d      	ldr	r1, [pc, #180]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a19      	ldr	r1, [r3, #32]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	430b      	orrs	r3, r1
 8002766:	4927      	ldr	r1, [pc, #156]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fd ffa7 	bl	80006c4 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7fd ffa3 	bl	80006c4 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e037      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x46a>
 8002798:	e02f      	b.n	80027fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fd ff90 	bl	80006c4 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fd ff8c 	bl	80006c4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e020      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x498>
 80027c6:	e018      	b.n	80027fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e013      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	42420060 	.word	0x42420060

08002810 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0d0      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d910      	bls.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 0207 	bic.w	r2, r3, #7
 800283a:	4965      	ldr	r1, [pc, #404]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b8      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800286c:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002876:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a52      	ldr	r2, [pc, #328]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800288e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b50      	ldr	r3, [pc, #320]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	494d      	ldr	r1, [pc, #308]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d040      	beq.n	8002930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d115      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e073      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e06b      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ee:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f023 0203 	bic.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4936      	ldr	r1, [pc, #216]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002900:	f7fd fee0 	bl	80006c4 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	e00a      	b.n	800291e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002908:	f7fd fedc 	bl	80006c4 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e053      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 020c 	and.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	429a      	cmp	r2, r3
 800292e:	d1eb      	bne.n	8002908 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d210      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	4922      	ldr	r1, [pc, #136]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e032      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4916      	ldr	r1, [pc, #88]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490e      	ldr	r1, [pc, #56]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299e:	f000 f821 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80029a2:	4601      	mov	r1, r0
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	5cd3      	ldrb	r3, [r2, r3]
 80029b2:	fa21 f303 	lsr.w	r3, r1, r3
 80029b6:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1cc>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1d0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fe3e 	bl	8000640 <HAL_InitTick>

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	0800a058 	.word	0x0800a058
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000004 	.word	0x20000004

080029e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	b490      	push	{r4, r7}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029ea:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029ec:	1d3c      	adds	r4, r7, #4
 80029ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a0e:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d002      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x40>
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d003      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x46>
 8002a22:	e02d      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a26:	623b      	str	r3, [r7, #32]
      break;
 8002a28:	e02d      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	0c9b      	lsrs	r3, r3, #18
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a36:	4413      	add	r3, r2
 8002a38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	0c5b      	lsrs	r3, r3, #17
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a56:	4413      	add	r3, r2
 8002a58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a62:	fb02 f203 	mul.w	r2, r2, r3
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	e004      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	4a0c      	ldr	r2, [pc, #48]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	623b      	str	r3, [r7, #32]
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a82:	623b      	str	r3, [r7, #32]
      break;
 8002a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a86:	6a3b      	ldr	r3, [r7, #32]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3728      	adds	r7, #40	; 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc90      	pop	{r4, r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	08009fc0 	.word	0x08009fc0
 8002a98:	08009fd0 	.word	0x08009fd0
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	007a1200 	.word	0x007a1200
 8002aa4:	003d0900 	.word	0x003d0900

08002aa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <RCC_Delay+0x34>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <RCC_Delay+0x38>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0a5b      	lsrs	r3, r3, #9
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ac4:	bf00      	nop
  }
  while (Delay --);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1e5a      	subs	r2, r3, #1
 8002aca:	60fa      	str	r2, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f9      	bne.n	8002ac4 <RCC_Delay+0x1c>
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	10624dd3 	.word	0x10624dd3

08002ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d07d      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b04:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10d      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	4a4b      	ldr	r2, [pc, #300]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	61d3      	str	r3, [r2, #28]
 8002b1c:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d118      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b38:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b44:	f7fd fdbe 	bl	80006c4 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	e008      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4c:	f7fd fdba 	bl	80006c4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e06d      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b6a:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d02e      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d027      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b88:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b92:	4b2e      	ldr	r3, [pc, #184]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b98:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b9e:	4a29      	ldr	r2, [pc, #164]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d014      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fd fd89 	bl	80006c4 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fd fd85 	bl	80006c4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e036      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ee      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4917      	ldr	r1, [pc, #92]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c08:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	490b      	ldr	r1, [pc, #44]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4904      	ldr	r1, [pc, #16]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	42420440 	.word	0x42420440

08002c50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c50:	b084      	sub	sp, #16
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	f107 0014 	add.w	r0, r7, #20
 8002c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	b004      	add	sp, #16
 8002c6e:	4770      	bx	lr

08002c70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c80:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002c84:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ca4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002ca8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	4013      	ands	r3, r2
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ce8:	b084      	sub	sp, #16
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	f107 0014 	add.w	r0, r7, #20
 8002cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	b004      	add	sp, #16
 8002d26:	4770      	bx	lr

08002d28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b09b      	sub	sp, #108	; 0x6c
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	78db      	ldrb	r3, [r3, #3]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d81f      	bhi.n	8002d9a <USB_ActivateEndpoint+0x72>
 8002d5a:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <USB_ActivateEndpoint+0x38>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002d71 	.word	0x08002d71
 8002d64:	08002d8d 	.word	0x08002d8d
 8002d68:	08002da3 	.word	0x08002da3
 8002d6c:	08002d7f 	.word	0x08002d7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002d70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d7c:	e012      	b.n	8002da4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002d7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d82:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002d86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d8a:	e00b      	b.n	8002da4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002d8c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d94:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d98:	e004      	b.n	8002da4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002da0:	e000      	b.n	8002da4 <USB_ActivateEndpoint+0x7c>
      break;
 8002da2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	441a      	add	r2, r3
 8002dae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	441a      	add	r2, r3
 8002df4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	7b1b      	ldrb	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f040 8149 	bne.w	80030a8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8084 	beq.w	8002f28 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	4413      	add	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	011a      	lsls	r2, r3, #4
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	88db      	ldrh	r3, [r3, #6]
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	81fb      	strh	r3, [r7, #14]
 8002e62:	89fb      	ldrh	r3, [r7, #14]
 8002e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01b      	beq.n	8002ea4 <USB_ActivateEndpoint+0x17c>
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	81bb      	strh	r3, [r7, #12]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	441a      	add	r2, r3
 8002e8e:	89bb      	ldrh	r3, [r7, #12]
 8002e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	78db      	ldrb	r3, [r3, #3]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d020      	beq.n	8002eee <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec2:	813b      	strh	r3, [r7, #8]
 8002ec4:	893b      	ldrh	r3, [r7, #8]
 8002ec6:	f083 0320 	eor.w	r3, r3, #32
 8002eca:	813b      	strh	r3, [r7, #8]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	441a      	add	r2, r3
 8002ed6:	893b      	ldrh	r3, [r7, #8]
 8002ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	8013      	strh	r3, [r2, #0]
 8002eec:	e27f      	b.n	80033ee <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f04:	817b      	strh	r3, [r7, #10]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	441a      	add	r2, r3
 8002f10:	897b      	ldrh	r3, [r7, #10]
 8002f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	8013      	strh	r3, [r2, #0]
 8002f26:	e262      	b.n	80033ee <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	4413      	add	r3, r2
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	011a      	lsls	r2, r3, #4
 8002f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	88db      	ldrh	r3, [r3, #6]
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	4413      	add	r3, r2
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	011a      	lsls	r2, r3, #4
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	4413      	add	r3, r2
 8002f7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d112      	bne.n	8002fae <USB_ActivateEndpoint+0x286>
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	801a      	strh	r2, [r3, #0]
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	801a      	strh	r2, [r3, #0]
 8002fac:	e02f      	b.n	800300e <USB_ActivateEndpoint+0x2e6>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b3e      	cmp	r3, #62	; 0x3e
 8002fb4:	d813      	bhi.n	8002fde <USB_ActivateEndpoint+0x2b6>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <USB_ActivateEndpoint+0x2a8>
 8002fca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fcc:	3301      	adds	r3, #1
 8002fce:	663b      	str	r3, [r7, #96]	; 0x60
 8002fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	029b      	lsls	r3, r3, #10
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	801a      	strh	r2, [r3, #0]
 8002fdc:	e017      	b.n	800300e <USB_ActivateEndpoint+0x2e6>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	663b      	str	r3, [r7, #96]	; 0x60
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <USB_ActivateEndpoint+0x2d0>
 8002ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	029b      	lsls	r3, r3, #10
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003008:	b29a      	uxth	r2, r3
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	83fb      	strh	r3, [r7, #30]
 800301c:	8bfb      	ldrh	r3, [r7, #30]
 800301e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01b      	beq.n	800305e <USB_ActivateEndpoint+0x336>
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303c:	83bb      	strh	r3, [r7, #28]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	441a      	add	r2, r3
 8003048:	8bbb      	ldrh	r3, [r7, #28]
 800304a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800304e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003052:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305a:	b29b      	uxth	r3, r3
 800305c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003074:	837b      	strh	r3, [r7, #26]
 8003076:	8b7b      	ldrh	r3, [r7, #26]
 8003078:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800307c:	837b      	strh	r3, [r7, #26]
 800307e:	8b7b      	ldrh	r3, [r7, #26]
 8003080:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003084:	837b      	strh	r3, [r7, #26]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	441a      	add	r2, r3
 8003090:	8b7b      	ldrh	r3, [r7, #26]
 8003092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800309a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	8013      	strh	r3, [r2, #0]
 80030a6:	e1a2      	b.n	80033ee <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030be:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	441a      	add	r2, r3
 80030cc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80030d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80030dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030f4:	4413      	add	r3, r2
 80030f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	011a      	lsls	r2, r3, #4
 80030fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003100:	4413      	add	r3, r2
 8003102:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003106:	657b      	str	r3, [r7, #84]	; 0x54
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	891b      	ldrh	r3, [r3, #8]
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	b29b      	uxth	r3, r3
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003116:	801a      	strh	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	653b      	str	r3, [r7, #80]	; 0x50
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003122:	b29b      	uxth	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003128:	4413      	add	r3, r2
 800312a:	653b      	str	r3, [r7, #80]	; 0x50
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	011a      	lsls	r2, r3, #4
 8003132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003134:	4413      	add	r3, r2
 8003136:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800313a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	895b      	ldrh	r3, [r3, #10]
 8003140:	085b      	lsrs	r3, r3, #1
 8003142:	b29b      	uxth	r3, r3
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	785b      	ldrb	r3, [r3, #1]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 8091 	bne.w	8003278 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003164:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01b      	beq.n	80031a6 <USB_ActivateEndpoint+0x47e>
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003184:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	441a      	add	r2, r3
 8003190:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800319a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800319e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	873b      	strh	r3, [r7, #56]	; 0x38
 80031b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80031b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01b      	beq.n	80031f6 <USB_ActivateEndpoint+0x4ce>
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	441a      	add	r2, r3
 80031e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800320e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003210:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003214:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003216:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003218:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800321c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	441a      	add	r2, r3
 8003228:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800322a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800322e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323a:	b29b      	uxth	r3, r3
 800323c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003254:	867b      	strh	r3, [r7, #50]	; 0x32
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	441a      	add	r2, r3
 8003260:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800326a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003272:	b29b      	uxth	r3, r3
 8003274:	8013      	strh	r3, [r2, #0]
 8003276:	e0ba      	b.n	80033ee <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003288:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800328c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01d      	beq.n	80032d0 <USB_ActivateEndpoint+0x5a8>
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	441a      	add	r2, r3
 80032b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80032e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01d      	beq.n	8003328 <USB_ActivateEndpoint+0x600>
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003302:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	441a      	add	r2, r3
 8003310:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800331c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003320:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003324:	b29b      	uxth	r3, r3
 8003326:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	78db      	ldrb	r3, [r3, #3]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d024      	beq.n	800337a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003346:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800334a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800334e:	f083 0320 	eor.w	r3, r3, #32
 8003352:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	441a      	add	r2, r3
 8003360:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800336c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003374:	b29b      	uxth	r3, r3
 8003376:	8013      	strh	r3, [r2, #0]
 8003378:	e01d      	b.n	80033b6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003390:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	441a      	add	r2, r3
 800339e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80033a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	441a      	add	r2, r3
 80033d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80033ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	376c      	adds	r7, #108	; 0x6c
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b08d      	sub	sp, #52	; 0x34
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	7b1b      	ldrb	r3, [r3, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f040 808e 	bne.w	800352c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d044      	beq.n	80034a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	81bb      	strh	r3, [r7, #12]
 8003426:	89bb      	ldrh	r3, [r7, #12]
 8003428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01b      	beq.n	8003468 <USB_DeactivateEndpoint+0x6c>
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	817b      	strh	r3, [r7, #10]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	441a      	add	r2, r3
 8003452:	897b      	ldrh	r3, [r7, #10]
 8003454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800345c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003460:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003464:	b29b      	uxth	r3, r3
 8003466:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	b29b      	uxth	r3, r3
 8003476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347e:	813b      	strh	r3, [r7, #8]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	441a      	add	r2, r3
 800348a:	893b      	ldrh	r3, [r7, #8]
 800348c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349c:	b29b      	uxth	r3, r3
 800349e:	8013      	strh	r3, [r2, #0]
 80034a0:	e192      	b.n	80037c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	827b      	strh	r3, [r7, #18]
 80034b0:	8a7b      	ldrh	r3, [r7, #18]
 80034b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d01b      	beq.n	80034f2 <USB_DeactivateEndpoint+0xf6>
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d0:	823b      	strh	r3, [r7, #16]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	441a      	add	r2, r3
 80034dc:	8a3b      	ldrh	r3, [r7, #16]
 80034de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003508:	81fb      	strh	r3, [r7, #14]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	441a      	add	r2, r3
 8003514:	89fb      	ldrh	r3, [r7, #14]
 8003516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800351a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800351e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003526:	b29b      	uxth	r3, r3
 8003528:	8013      	strh	r3, [r2, #0]
 800352a:	e14d      	b.n	80037c8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	785b      	ldrb	r3, [r3, #1]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f040 80a5 	bne.w	8003680 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	843b      	strh	r3, [r7, #32]
 8003544:	8c3b      	ldrh	r3, [r7, #32]
 8003546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01b      	beq.n	8003586 <USB_DeactivateEndpoint+0x18a>
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003564:	83fb      	strh	r3, [r7, #30]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	441a      	add	r2, r3
 8003570:	8bfb      	ldrh	r3, [r7, #30]
 8003572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800357a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800357e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003582:	b29b      	uxth	r3, r3
 8003584:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	83bb      	strh	r3, [r7, #28]
 8003594:	8bbb      	ldrh	r3, [r7, #28]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01b      	beq.n	80035d6 <USB_DeactivateEndpoint+0x1da>
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b4:	837b      	strh	r3, [r7, #26]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	441a      	add	r2, r3
 80035c0:	8b7b      	ldrh	r3, [r7, #26]
 80035c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ec:	833b      	strh	r3, [r7, #24]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	441a      	add	r2, r3
 80035f8:	8b3b      	ldrh	r3, [r7, #24]
 80035fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003606:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800360a:	b29b      	uxth	r3, r3
 800360c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003624:	82fb      	strh	r3, [r7, #22]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	441a      	add	r2, r3
 8003630:	8afb      	ldrh	r3, [r7, #22]
 8003632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800363a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800363e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003642:	b29b      	uxth	r3, r3
 8003644:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800365c:	82bb      	strh	r3, [r7, #20]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	441a      	add	r2, r3
 8003668:	8abb      	ldrh	r3, [r7, #20]
 800366a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800366e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367a:	b29b      	uxth	r3, r3
 800367c:	8013      	strh	r3, [r2, #0]
 800367e:	e0a3      	b.n	80037c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800368e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01b      	beq.n	80036d0 <USB_DeactivateEndpoint+0x2d4>
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80036de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01b      	beq.n	8003720 <USB_DeactivateEndpoint+0x324>
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	441a      	add	r2, r3
 800370a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800370c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003718:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800371c:	b29b      	uxth	r3, r3
 800371e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	b29b      	uxth	r3, r3
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	441a      	add	r2, r3
 8003742:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800374c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003754:	b29b      	uxth	r3, r3
 8003756:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800376a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800376e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	441a      	add	r2, r3
 800377a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800377c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378c:	b29b      	uxth	r3, r3
 800378e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	b29b      	uxth	r3, r3
 800379e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3734      	adds	r7, #52	; 0x34
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b0c4      	sub	sp, #272	; 0x110
 80037d8:	af00      	add	r7, sp, #0
 80037da:	1d3b      	adds	r3, r7, #4
 80037dc:	6018      	str	r0, [r3, #0]
 80037de:	463b      	mov	r3, r7
 80037e0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037e2:	463b      	mov	r3, r7
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	f040 8557 	bne.w	800429c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80037ee:	463b      	mov	r3, r7
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699a      	ldr	r2, [r3, #24]
 80037f4:	463b      	mov	r3, r7
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d905      	bls.n	800380a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80037fe:	463b      	mov	r3, r7
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003808:	e004      	b.n	8003814 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800380a:	463b      	mov	r3, r7
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003814:	463b      	mov	r3, r7
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	7b1b      	ldrb	r3, [r3, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d12c      	bne.n	8003878 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800381e:	463b      	mov	r3, r7
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6959      	ldr	r1, [r3, #20]
 8003824:	463b      	mov	r3, r7
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	88da      	ldrh	r2, [r3, #6]
 800382a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800382e:	b29b      	uxth	r3, r3
 8003830:	1d38      	adds	r0, r7, #4
 8003832:	6800      	ldr	r0, [r0, #0]
 8003834:	f001 fa2c 	bl	8004c90 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003838:	1d3b      	adds	r3, r7, #4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	1d3b      	adds	r3, r7, #4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003846:	b29b      	uxth	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	4413      	add	r3, r2
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	463b      	mov	r3, r7
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	011a      	lsls	r2, r3, #4
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	4413      	add	r3, r2
 800385c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003860:	f107 0310 	add.w	r3, r7, #16
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800386a:	b29a      	uxth	r2, r3
 800386c:	f107 0310 	add.w	r3, r7, #16
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	f000 bcdd 	b.w	8004232 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003878:	463b      	mov	r3, r7
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	78db      	ldrb	r3, [r3, #3]
 800387e:	2b02      	cmp	r3, #2
 8003880:	f040 8347 	bne.w	8003f12 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003884:	463b      	mov	r3, r7
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6a1a      	ldr	r2, [r3, #32]
 800388a:	463b      	mov	r3, r7
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	429a      	cmp	r2, r3
 8003892:	f240 82eb 	bls.w	8003e6c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003896:	1d3b      	adds	r3, r7, #4
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	463b      	mov	r3, r7
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80038b4:	1d3b      	adds	r3, r7, #4
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	463b      	mov	r3, r7
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	441a      	add	r2, r3
 80038c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80038c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80038d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80038da:	463b      	mov	r3, r7
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a1a      	ldr	r2, [r3, #32]
 80038e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e4:	1ad2      	subs	r2, r2, r3
 80038e6:	463b      	mov	r3, r7
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	463b      	mov	r3, r7
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8159 	beq.w	8003bba <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003908:	1d3b      	adds	r3, r7, #4
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	637b      	str	r3, [r7, #52]	; 0x34
 800390e:	463b      	mov	r3, r7
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	785b      	ldrb	r3, [r3, #1]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d164      	bne.n	80039e2 <USB_EPStartXfer+0x20e>
 8003918:	1d3b      	adds	r3, r7, #4
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800391e:	1d3b      	adds	r3, r7, #4
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003926:	b29b      	uxth	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	4413      	add	r3, r2
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003930:	463b      	mov	r3, r7
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	011a      	lsls	r2, r3, #4
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	4413      	add	r3, r2
 800393c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
 8003942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d112      	bne.n	8003970 <USB_EPStartXfer+0x19c>
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	b29b      	uxth	r3, r3
 8003950:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003954:	b29a      	uxth	r2, r3
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	801a      	strh	r2, [r3, #0]
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003968:	b29a      	uxth	r2, r3
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	801a      	strh	r2, [r3, #0]
 800396e:	e054      	b.n	8003a1a <USB_EPStartXfer+0x246>
 8003970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003974:	2b3e      	cmp	r3, #62	; 0x3e
 8003976:	d817      	bhi.n	80039a8 <USB_EPStartXfer+0x1d4>
 8003978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <USB_EPStartXfer+0x1c4>
 800398e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003992:	3301      	adds	r3, #1
 8003994:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800399c:	b29b      	uxth	r3, r3
 800399e:	029b      	lsls	r3, r3, #10
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	801a      	strh	r2, [r3, #0]
 80039a6:	e038      	b.n	8003a1a <USB_EPStartXfer+0x246>
 80039a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <USB_EPStartXfer+0x1f4>
 80039be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039c2:	3b01      	subs	r3, #1
 80039c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	029b      	lsls	r3, r3, #10
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039da:	b29a      	uxth	r2, r3
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	e01b      	b.n	8003a1a <USB_EPStartXfer+0x246>
 80039e2:	463b      	mov	r3, r7
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	785b      	ldrb	r3, [r3, #1]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d116      	bne.n	8003a1a <USB_EPStartXfer+0x246>
 80039ec:	1d3b      	adds	r3, r7, #4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fa:	4413      	add	r3, r2
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
 80039fe:	463b      	mov	r3, r7
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	011a      	lsls	r2, r3, #4
 8003a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a08:	4413      	add	r3, r2
 8003a0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	895b      	ldrh	r3, [r3, #10]
 8003a20:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a24:	463b      	mov	r3, r7
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6959      	ldr	r1, [r3, #20]
 8003a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003a34:	1d38      	adds	r0, r7, #4
 8003a36:	6800      	ldr	r0, [r0, #0]
 8003a38:	f001 f92a 	bl	8004c90 <USB_WritePMA>
            ep->xfer_buff += len;
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a46:	441a      	add	r2, r3
 8003a48:	463b      	mov	r3, r7
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003a4e:	463b      	mov	r3, r7
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6a1a      	ldr	r2, [r3, #32]
 8003a54:	463b      	mov	r3, r7
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d909      	bls.n	8003a72 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003a5e:	463b      	mov	r3, r7
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a1a      	ldr	r2, [r3, #32]
 8003a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a68:	1ad2      	subs	r2, r2, r3
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	621a      	str	r2, [r3, #32]
 8003a70:	e008      	b.n	8003a84 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003a72:	463b      	mov	r3, r7
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003a7c:	463b      	mov	r3, r7
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2200      	movs	r2, #0
 8003a82:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a84:	463b      	mov	r3, r7
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	785b      	ldrb	r3, [r3, #1]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d164      	bne.n	8003b58 <USB_EPStartXfer+0x384>
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	1d3b      	adds	r3, r7, #4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	463b      	mov	r3, r7
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	011a      	lsls	r2, r3, #4
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d112      	bne.n	8003ae6 <USB_EPStartXfer+0x312>
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	801a      	strh	r2, [r3, #0]
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	801a      	strh	r2, [r3, #0]
 8003ae4:	e057      	b.n	8003b96 <USB_EPStartXfer+0x3c2>
 8003ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aea:	2b3e      	cmp	r3, #62	; 0x3e
 8003aec:	d817      	bhi.n	8003b1e <USB_EPStartXfer+0x34a>
 8003aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <USB_EPStartXfer+0x33a>
 8003b04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b08:	3301      	adds	r3, #1
 8003b0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	029b      	lsls	r3, r3, #10
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	801a      	strh	r2, [r3, #0]
 8003b1c:	e03b      	b.n	8003b96 <USB_EPStartXfer+0x3c2>
 8003b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <USB_EPStartXfer+0x36a>
 8003b34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	029b      	lsls	r3, r3, #10
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	e01e      	b.n	8003b96 <USB_EPStartXfer+0x3c2>
 8003b58:	463b      	mov	r3, r7
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	785b      	ldrb	r3, [r3, #1]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d119      	bne.n	8003b96 <USB_EPStartXfer+0x3c2>
 8003b62:	1d3b      	adds	r3, r7, #4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
 8003b68:	1d3b      	adds	r3, r7, #4
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	4413      	add	r3, r2
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7a:	463b      	mov	r3, r7
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	011a      	lsls	r2, r3, #4
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	4413      	add	r3, r2
 8003b86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b96:	463b      	mov	r3, r7
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	891b      	ldrh	r3, [r3, #8]
 8003b9c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ba0:	463b      	mov	r3, r7
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6959      	ldr	r1, [r3, #20]
 8003ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003bb0:	1d38      	adds	r0, r7, #4
 8003bb2:	6800      	ldr	r0, [r0, #0]
 8003bb4:	f001 f86c 	bl	8004c90 <USB_WritePMA>
 8003bb8:	e33b      	b.n	8004232 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003bba:	463b      	mov	r3, r7
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	785b      	ldrb	r3, [r3, #1]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d164      	bne.n	8003c8e <USB_EPStartXfer+0x4ba>
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd8:	4413      	add	r3, r2
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bdc:	463b      	mov	r3, r7
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	011a      	lsls	r2, r3, #4
 8003be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be6:	4413      	add	r3, r2
 8003be8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bec:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d112      	bne.n	8003c1c <USB_EPStartXfer+0x448>
 8003bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c04:	801a      	strh	r2, [r3, #0]
 8003c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	e057      	b.n	8003ccc <USB_EPStartXfer+0x4f8>
 8003c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c20:	2b3e      	cmp	r3, #62	; 0x3e
 8003c22:	d817      	bhi.n	8003c54 <USB_EPStartXfer+0x480>
 8003c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <USB_EPStartXfer+0x470>
 8003c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	029b      	lsls	r3, r3, #10
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	e03b      	b.n	8003ccc <USB_EPStartXfer+0x4f8>
 8003c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <USB_EPStartXfer+0x4a0>
 8003c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	029b      	lsls	r3, r3, #10
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c8a:	801a      	strh	r2, [r3, #0]
 8003c8c:	e01e      	b.n	8003ccc <USB_EPStartXfer+0x4f8>
 8003c8e:	463b      	mov	r3, r7
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	785b      	ldrb	r3, [r3, #1]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d119      	bne.n	8003ccc <USB_EPStartXfer+0x4f8>
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cac:	4413      	add	r3, r2
 8003cae:	657b      	str	r3, [r7, #84]	; 0x54
 8003cb0:	463b      	mov	r3, r7
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	011a      	lsls	r2, r3, #4
 8003cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cba:	4413      	add	r3, r2
 8003cbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cc0:	653b      	str	r3, [r7, #80]	; 0x50
 8003cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003ccc:	463b      	mov	r3, r7
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	891b      	ldrh	r3, [r3, #8]
 8003cd2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cd6:	463b      	mov	r3, r7
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6959      	ldr	r1, [r3, #20]
 8003cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003ce6:	1d38      	adds	r0, r7, #4
 8003ce8:	6800      	ldr	r0, [r0, #0]
 8003cea:	f000 ffd1 	bl	8004c90 <USB_WritePMA>
            ep->xfer_buff += len;
 8003cee:	463b      	mov	r3, r7
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf8:	441a      	add	r2, r3
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003d00:	463b      	mov	r3, r7
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6a1a      	ldr	r2, [r3, #32]
 8003d06:	463b      	mov	r3, r7
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d909      	bls.n	8003d24 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003d10:	463b      	mov	r3, r7
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6a1a      	ldr	r2, [r3, #32]
 8003d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d1a:	1ad2      	subs	r2, r2, r3
 8003d1c:	463b      	mov	r3, r7
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	621a      	str	r2, [r3, #32]
 8003d22:	e008      	b.n	8003d36 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003d24:	463b      	mov	r3, r7
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003d2e:	463b      	mov	r3, r7
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2200      	movs	r2, #0
 8003d34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d36:	1d3b      	adds	r3, r7, #4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d3c:	463b      	mov	r3, r7
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	785b      	ldrb	r3, [r3, #1]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d164      	bne.n	8003e10 <USB_EPStartXfer+0x63c>
 8003d46:	1d3b      	adds	r3, r7, #4
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d4c:	1d3b      	adds	r3, r7, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5a:	4413      	add	r3, r2
 8003d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d5e:	463b      	mov	r3, r7
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	011a      	lsls	r2, r3, #4
 8003d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d68:	4413      	add	r3, r2
 8003d6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d112      	bne.n	8003d9e <USB_EPStartXfer+0x5ca>
 8003d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d86:	801a      	strh	r2, [r3, #0]
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	801a      	strh	r2, [r3, #0]
 8003d9c:	e054      	b.n	8003e48 <USB_EPStartXfer+0x674>
 8003d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da2:	2b3e      	cmp	r3, #62	; 0x3e
 8003da4:	d817      	bhi.n	8003dd6 <USB_EPStartXfer+0x602>
 8003da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <USB_EPStartXfer+0x5f2>
 8003dbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	029b      	lsls	r3, r3, #10
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	801a      	strh	r2, [r3, #0]
 8003dd4:	e038      	b.n	8003e48 <USB_EPStartXfer+0x674>
 8003dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d104      	bne.n	8003df6 <USB_EPStartXfer+0x622>
 8003dec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003df0:	3b01      	subs	r3, #1
 8003df2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003df6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	029b      	lsls	r3, r3, #10
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0c:	801a      	strh	r2, [r3, #0]
 8003e0e:	e01b      	b.n	8003e48 <USB_EPStartXfer+0x674>
 8003e10:	463b      	mov	r3, r7
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	785b      	ldrb	r3, [r3, #1]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d116      	bne.n	8003e48 <USB_EPStartXfer+0x674>
 8003e1a:	1d3b      	adds	r3, r7, #4
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e28:	4413      	add	r3, r2
 8003e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e2c:	463b      	mov	r3, r7
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	011a      	lsls	r2, r3, #4
 8003e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e36:	4413      	add	r3, r2
 8003e38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003e48:	463b      	mov	r3, r7
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	895b      	ldrh	r3, [r3, #10]
 8003e4e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e52:	463b      	mov	r3, r7
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6959      	ldr	r1, [r3, #20]
 8003e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e62:	1d38      	adds	r0, r7, #4
 8003e64:	6800      	ldr	r0, [r0, #0]
 8003e66:	f000 ff13 	bl	8004c90 <USB_WritePMA>
 8003e6a:	e1e2      	b.n	8004232 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003e6c:	463b      	mov	r3, r7
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003e76:	1d3b      	adds	r3, r7, #4
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	463b      	mov	r3, r7
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	463b      	mov	r3, r7
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	441a      	add	r2, r3
 8003ea2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003eba:	1d3b      	adds	r3, r7, #4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ece:	4413      	add	r3, r2
 8003ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	011a      	lsls	r2, r3, #4
 8003eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003edc:	4413      	add	r3, r2
 8003ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003eee:	463b      	mov	r3, r7
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	891b      	ldrh	r3, [r3, #8]
 8003ef4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ef8:	463b      	mov	r3, r7
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6959      	ldr	r1, [r3, #20]
 8003efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003f08:	1d38      	adds	r0, r7, #4
 8003f0a:	6800      	ldr	r0, [r0, #0]
 8003f0c:	f000 fec0 	bl	8004c90 <USB_WritePMA>
 8003f10:	e18f      	b.n	8004232 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	463b      	mov	r3, r7
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 808f 	beq.w	800404c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f34:	463b      	mov	r3, r7
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	785b      	ldrb	r3, [r3, #1]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d164      	bne.n	8004008 <USB_EPStartXfer+0x834>
 8003f3e:	1d3b      	adds	r3, r7, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	673b      	str	r3, [r7, #112]	; 0x70
 8003f44:	1d3b      	adds	r3, r7, #4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f52:	4413      	add	r3, r2
 8003f54:	673b      	str	r3, [r7, #112]	; 0x70
 8003f56:	463b      	mov	r3, r7
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	011a      	lsls	r2, r3, #4
 8003f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f60:	4413      	add	r3, r2
 8003f62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d112      	bne.n	8003f96 <USB_EPStartXfer+0x7c2>
 8003f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7e:	801a      	strh	r2, [r3, #0]
 8003f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f92:	801a      	strh	r2, [r3, #0]
 8003f94:	e054      	b.n	8004040 <USB_EPStartXfer+0x86c>
 8003f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8003f9c:	d817      	bhi.n	8003fce <USB_EPStartXfer+0x7fa>
 8003f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <USB_EPStartXfer+0x7ea>
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb8:	3301      	adds	r3, #1
 8003fba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	029b      	lsls	r3, r3, #10
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fca:	801a      	strh	r2, [r3, #0]
 8003fcc:	e038      	b.n	8004040 <USB_EPStartXfer+0x86c>
 8003fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d104      	bne.n	8003fee <USB_EPStartXfer+0x81a>
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	029b      	lsls	r3, r3, #10
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004000:	b29a      	uxth	r2, r3
 8004002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004004:	801a      	strh	r2, [r3, #0]
 8004006:	e01b      	b.n	8004040 <USB_EPStartXfer+0x86c>
 8004008:	463b      	mov	r3, r7
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	785b      	ldrb	r3, [r3, #1]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d116      	bne.n	8004040 <USB_EPStartXfer+0x86c>
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800401a:	b29b      	uxth	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004020:	4413      	add	r3, r2
 8004022:	67bb      	str	r3, [r7, #120]	; 0x78
 8004024:	463b      	mov	r3, r7
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	011a      	lsls	r2, r3, #4
 800402c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800402e:	4413      	add	r3, r2
 8004030:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004034:	677b      	str	r3, [r7, #116]	; 0x74
 8004036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800403a:	b29a      	uxth	r2, r3
 800403c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800403e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004040:	463b      	mov	r3, r7
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	895b      	ldrh	r3, [r3, #10]
 8004046:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800404a:	e097      	b.n	800417c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800404c:	463b      	mov	r3, r7
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	785b      	ldrb	r3, [r3, #1]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d168      	bne.n	8004128 <USB_EPStartXfer+0x954>
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004066:	b29b      	uxth	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800406e:	4413      	add	r3, r2
 8004070:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004074:	463b      	mov	r3, r7
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	011a      	lsls	r2, r3, #4
 800407c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004080:	4413      	add	r3, r2
 8004082:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004086:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d112      	bne.n	80040b6 <USB_EPStartXfer+0x8e2>
 8004090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800409a:	b29a      	uxth	r2, r3
 800409c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800409e:	801a      	strh	r2, [r3, #0]
 80040a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040b2:	801a      	strh	r2, [r3, #0]
 80040b4:	e05d      	b.n	8004172 <USB_EPStartXfer+0x99e>
 80040b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ba:	2b3e      	cmp	r3, #62	; 0x3e
 80040bc:	d817      	bhi.n	80040ee <USB_EPStartXfer+0x91a>
 80040be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d004      	beq.n	80040de <USB_EPStartXfer+0x90a>
 80040d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040d8:	3301      	adds	r3, #1
 80040da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	029b      	lsls	r3, r3, #10
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ea:	801a      	strh	r2, [r3, #0]
 80040ec:	e041      	b.n	8004172 <USB_EPStartXfer+0x99e>
 80040ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <USB_EPStartXfer+0x93a>
 8004104:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004108:	3b01      	subs	r3, #1
 800410a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800410e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004112:	b29b      	uxth	r3, r3
 8004114:	029b      	lsls	r3, r3, #10
 8004116:	b29b      	uxth	r3, r3
 8004118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800411c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004120:	b29a      	uxth	r2, r3
 8004122:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004124:	801a      	strh	r2, [r3, #0]
 8004126:	e024      	b.n	8004172 <USB_EPStartXfer+0x99e>
 8004128:	463b      	mov	r3, r7
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	785b      	ldrb	r3, [r3, #1]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d11f      	bne.n	8004172 <USB_EPStartXfer+0x99e>
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800413a:	1d3b      	adds	r3, r7, #4
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004142:	b29b      	uxth	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800414a:	4413      	add	r3, r2
 800414c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004150:	463b      	mov	r3, r7
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	011a      	lsls	r2, r3, #4
 8004158:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800415c:	4413      	add	r3, r2
 800415e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800416a:	b29a      	uxth	r2, r3
 800416c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004170:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004172:	463b      	mov	r3, r7
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	891b      	ldrh	r3, [r3, #8]
 8004178:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800417c:	463b      	mov	r3, r7
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6959      	ldr	r1, [r3, #20]
 8004182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004186:	b29b      	uxth	r3, r3
 8004188:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800418c:	1d38      	adds	r0, r7, #4
 800418e:	6800      	ldr	r0, [r0, #0]
 8004190:	f000 fd7e 	bl	8004c90 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004194:	463b      	mov	r3, r7
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	785b      	ldrb	r3, [r3, #1]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d122      	bne.n	80041e4 <USB_EPStartXfer+0xa10>
 800419e:	1d3b      	adds	r3, r7, #4
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	463b      	mov	r3, r7
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80041bc:	1d3b      	adds	r3, r7, #4
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	463b      	mov	r3, r7
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	441a      	add	r2, r3
 80041ca:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80041ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8013      	strh	r3, [r2, #0]
 80041e2:	e026      	b.n	8004232 <USB_EPStartXfer+0xa5e>
 80041e4:	463b      	mov	r3, r7
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	785b      	ldrb	r3, [r3, #1]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d121      	bne.n	8004232 <USB_EPStartXfer+0xa5e>
 80041ee:	1d3b      	adds	r3, r7, #4
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	463b      	mov	r3, r7
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004208:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800420c:	1d3b      	adds	r3, r7, #4
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	463b      	mov	r3, r7
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	441a      	add	r2, r3
 800421a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800421e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800422a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422e:	b29b      	uxth	r3, r3
 8004230:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004232:	1d3b      	adds	r3, r7, #4
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	463b      	mov	r3, r7
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29b      	uxth	r3, r3
 8004244:	f107 020e 	add.w	r2, r7, #14
 8004248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004250:	8013      	strh	r3, [r2, #0]
 8004252:	f107 030e 	add.w	r3, r7, #14
 8004256:	f107 020e 	add.w	r2, r7, #14
 800425a:	8812      	ldrh	r2, [r2, #0]
 800425c:	f082 0210 	eor.w	r2, r2, #16
 8004260:	801a      	strh	r2, [r3, #0]
 8004262:	f107 030e 	add.w	r3, r7, #14
 8004266:	f107 020e 	add.w	r2, r7, #14
 800426a:	8812      	ldrh	r2, [r2, #0]
 800426c:	f082 0220 	eor.w	r2, r2, #32
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	1d3b      	adds	r3, r7, #4
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	463b      	mov	r3, r7
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	441a      	add	r2, r3
 8004280:	f107 030e 	add.w	r3, r7, #14
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800428e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004296:	b29b      	uxth	r3, r3
 8004298:	8013      	strh	r3, [r2, #0]
 800429a:	e3b5      	b.n	8004a08 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800429c:	463b      	mov	r3, r7
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	7b1b      	ldrb	r3, [r3, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f040 8090 	bne.w	80043c8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80042a8:	463b      	mov	r3, r7
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	463b      	mov	r3, r7
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d90e      	bls.n	80042d6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80042b8:	463b      	mov	r3, r7
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80042c2:	463b      	mov	r3, r7
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042cc:	1ad2      	subs	r2, r2, r3
 80042ce:	463b      	mov	r3, r7
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	619a      	str	r2, [r3, #24]
 80042d4:	e008      	b.n	80042e8 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80042d6:	463b      	mov	r3, r7
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80042e0:	463b      	mov	r3, r7
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2200      	movs	r2, #0
 80042e6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80042e8:	1d3b      	adds	r3, r7, #4
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042f0:	1d3b      	adds	r3, r7, #4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004300:	4413      	add	r3, r2
 8004302:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004306:	463b      	mov	r3, r7
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	011a      	lsls	r2, r3, #4
 800430e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004312:	4413      	add	r3, r2
 8004314:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800431c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d116      	bne.n	8004352 <USB_EPStartXfer+0xb7e>
 8004324:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004330:	b29a      	uxth	r2, r3
 8004332:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004336:	801a      	strh	r2, [r3, #0]
 8004338:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29b      	uxth	r3, r3
 8004340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004348:	b29a      	uxth	r2, r3
 800434a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	e32c      	b.n	80049ac <USB_EPStartXfer+0x11d8>
 8004352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004356:	2b3e      	cmp	r3, #62	; 0x3e
 8004358:	d818      	bhi.n	800438c <USB_EPStartXfer+0xbb8>
 800435a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <USB_EPStartXfer+0xba6>
 8004370:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004374:	3301      	adds	r3, #1
 8004376:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800437a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800437e:	b29b      	uxth	r3, r3
 8004380:	029b      	lsls	r3, r3, #10
 8004382:	b29a      	uxth	r2, r3
 8004384:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	e30f      	b.n	80049ac <USB_EPStartXfer+0x11d8>
 800438c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <USB_EPStartXfer+0xbd8>
 80043a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043a6:	3b01      	subs	r3, #1
 80043a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	029b      	lsls	r3, r3, #10
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043be:	b29a      	uxth	r2, r3
 80043c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043c4:	801a      	strh	r2, [r3, #0]
 80043c6:	e2f1      	b.n	80049ac <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80043c8:	463b      	mov	r3, r7
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	78db      	ldrb	r3, [r3, #3]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	f040 818f 	bne.w	80046f2 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80043d4:	463b      	mov	r3, r7
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	785b      	ldrb	r3, [r3, #1]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d175      	bne.n	80044ca <USB_EPStartXfer+0xcf6>
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043e6:	1d3b      	adds	r3, r7, #4
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043f6:	4413      	add	r3, r2
 80043f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043fc:	463b      	mov	r3, r7
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	011a      	lsls	r2, r3, #4
 8004404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004408:	4413      	add	r3, r2
 800440a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800440e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004412:	463b      	mov	r3, r7
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d116      	bne.n	800444a <USB_EPStartXfer+0xc76>
 800441c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004428:	b29a      	uxth	r2, r3
 800442a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800442e:	801a      	strh	r2, [r3, #0]
 8004430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004440:	b29a      	uxth	r2, r3
 8004442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	e065      	b.n	8004516 <USB_EPStartXfer+0xd42>
 800444a:	463b      	mov	r3, r7
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b3e      	cmp	r3, #62	; 0x3e
 8004452:	d81a      	bhi.n	800448a <USB_EPStartXfer+0xcb6>
 8004454:	463b      	mov	r3, r7
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	085b      	lsrs	r3, r3, #1
 800445c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004460:	463b      	mov	r3, r7
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <USB_EPStartXfer+0xca4>
 800446e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004472:	3301      	adds	r3, #1
 8004474:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004478:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800447c:	b29b      	uxth	r3, r3
 800447e:	029b      	lsls	r3, r3, #10
 8004480:	b29a      	uxth	r2, r3
 8004482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004486:	801a      	strh	r2, [r3, #0]
 8004488:	e045      	b.n	8004516 <USB_EPStartXfer+0xd42>
 800448a:	463b      	mov	r3, r7
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004496:	463b      	mov	r3, r7
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d104      	bne.n	80044ae <USB_EPStartXfer+0xcda>
 80044a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044a8:	3b01      	subs	r3, #1
 80044aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	029b      	lsls	r3, r3, #10
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044c6:	801a      	strh	r2, [r3, #0]
 80044c8:	e025      	b.n	8004516 <USB_EPStartXfer+0xd42>
 80044ca:	463b      	mov	r3, r7
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	785b      	ldrb	r3, [r3, #1]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d120      	bne.n	8004516 <USB_EPStartXfer+0xd42>
 80044d4:	1d3b      	adds	r3, r7, #4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044ec:	4413      	add	r3, r2
 80044ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044f2:	463b      	mov	r3, r7
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	011a      	lsls	r2, r3, #4
 80044fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044fe:	4413      	add	r3, r2
 8004500:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004508:	463b      	mov	r3, r7
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	b29a      	uxth	r2, r3
 8004510:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004514:	801a      	strh	r2, [r3, #0]
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800451e:	463b      	mov	r3, r7
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d175      	bne.n	8004614 <USB_EPStartXfer+0xe40>
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004530:	1d3b      	adds	r3, r7, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004538:	b29b      	uxth	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004540:	4413      	add	r3, r2
 8004542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004546:	463b      	mov	r3, r7
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	011a      	lsls	r2, r3, #4
 800454e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004552:	4413      	add	r3, r2
 8004554:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800455c:	463b      	mov	r3, r7
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <USB_EPStartXfer+0xdc0>
 8004566:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004572:	b29a      	uxth	r2, r3
 8004574:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29b      	uxth	r3, r3
 8004582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800458a:	b29a      	uxth	r2, r3
 800458c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004590:	801a      	strh	r2, [r3, #0]
 8004592:	e061      	b.n	8004658 <USB_EPStartXfer+0xe84>
 8004594:	463b      	mov	r3, r7
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b3e      	cmp	r3, #62	; 0x3e
 800459c:	d81a      	bhi.n	80045d4 <USB_EPStartXfer+0xe00>
 800459e:	463b      	mov	r3, r7
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045aa:	463b      	mov	r3, r7
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d004      	beq.n	80045c2 <USB_EPStartXfer+0xdee>
 80045b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045bc:	3301      	adds	r3, #1
 80045be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	029b      	lsls	r3, r3, #10
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045d0:	801a      	strh	r2, [r3, #0]
 80045d2:	e041      	b.n	8004658 <USB_EPStartXfer+0xe84>
 80045d4:	463b      	mov	r3, r7
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045e0:	463b      	mov	r3, r7
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <USB_EPStartXfer+0xe24>
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f2:	3b01      	subs	r3, #1
 80045f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	029b      	lsls	r3, r3, #10
 8004600:	b29b      	uxth	r3, r3
 8004602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800460a:	b29a      	uxth	r2, r3
 800460c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004610:	801a      	strh	r2, [r3, #0]
 8004612:	e021      	b.n	8004658 <USB_EPStartXfer+0xe84>
 8004614:	463b      	mov	r3, r7
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	785b      	ldrb	r3, [r3, #1]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d11c      	bne.n	8004658 <USB_EPStartXfer+0xe84>
 800461e:	1d3b      	adds	r3, r7, #4
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004626:	b29b      	uxth	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800462e:	4413      	add	r3, r2
 8004630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004634:	463b      	mov	r3, r7
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	011a      	lsls	r2, r3, #4
 800463c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004640:	4413      	add	r3, r2
 8004642:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800464a:	463b      	mov	r3, r7
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	b29a      	uxth	r2, r3
 8004652:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004656:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004658:	463b      	mov	r3, r7
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 81a4 	beq.w	80049ac <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004664:	1d3b      	adds	r3, r7, #4
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	463b      	mov	r3, r7
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004678:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800467c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <USB_EPStartXfer+0xebc>
 8004684:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10d      	bne.n	80046ac <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004690:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004698:	2b00      	cmp	r3, #0
 800469a:	f040 8187 	bne.w	80049ac <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800469e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f040 8180 	bne.w	80049ac <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80046ac:	1d3b      	adds	r3, r7, #4
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	463b      	mov	r3, r7
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80046ca:	1d3b      	adds	r3, r7, #4
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	463b      	mov	r3, r7
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	441a      	add	r2, r3
 80046d8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80046dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	8013      	strh	r3, [r2, #0]
 80046f0:	e15c      	b.n	80049ac <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80046f2:	463b      	mov	r3, r7
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	78db      	ldrb	r3, [r3, #3]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	f040 8155 	bne.w	80049a8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80046fe:	463b      	mov	r3, r7
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	463b      	mov	r3, r7
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	429a      	cmp	r2, r3
 800470c:	d90e      	bls.n	800472c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800470e:	463b      	mov	r3, r7
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004718:	463b      	mov	r3, r7
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004722:	1ad2      	subs	r2, r2, r3
 8004724:	463b      	mov	r3, r7
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	619a      	str	r2, [r3, #24]
 800472a:	e008      	b.n	800473e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800472c:	463b      	mov	r3, r7
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004736:	463b      	mov	r3, r7
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2200      	movs	r2, #0
 800473c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800473e:	463b      	mov	r3, r7
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d16f      	bne.n	8004828 <USB_EPStartXfer+0x1054>
 8004748:	1d3b      	adds	r3, r7, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004750:	1d3b      	adds	r3, r7, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004758:	b29b      	uxth	r3, r3
 800475a:	461a      	mov	r2, r3
 800475c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004760:	4413      	add	r3, r2
 8004762:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004766:	463b      	mov	r3, r7
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	011a      	lsls	r2, r3, #4
 800476e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004772:	4413      	add	r3, r2
 8004774:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800477c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d116      	bne.n	80047b2 <USB_EPStartXfer+0xfde>
 8004784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004790:	b29a      	uxth	r2, r3
 8004792:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047ae:	801a      	strh	r2, [r3, #0]
 80047b0:	e05f      	b.n	8004872 <USB_EPStartXfer+0x109e>
 80047b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b6:	2b3e      	cmp	r3, #62	; 0x3e
 80047b8:	d818      	bhi.n	80047ec <USB_EPStartXfer+0x1018>
 80047ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d004      	beq.n	80047da <USB_EPStartXfer+0x1006>
 80047d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d4:	3301      	adds	r3, #1
 80047d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047de:	b29b      	uxth	r3, r3
 80047e0:	029b      	lsls	r3, r3, #10
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	e042      	b.n	8004872 <USB_EPStartXfer+0x109e>
 80047ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f0:	095b      	lsrs	r3, r3, #5
 80047f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d104      	bne.n	800480c <USB_EPStartXfer+0x1038>
 8004802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004806:	3b01      	subs	r3, #1
 8004808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800480c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004810:	b29b      	uxth	r3, r3
 8004812:	029b      	lsls	r3, r3, #10
 8004814:	b29b      	uxth	r3, r3
 8004816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800481e:	b29a      	uxth	r2, r3
 8004820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	e024      	b.n	8004872 <USB_EPStartXfer+0x109e>
 8004828:	463b      	mov	r3, r7
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d11f      	bne.n	8004872 <USB_EPStartXfer+0x109e>
 8004832:	1d3b      	adds	r3, r7, #4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800483a:	1d3b      	adds	r3, r7, #4
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004842:	b29b      	uxth	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800484a:	4413      	add	r3, r2
 800484c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004850:	463b      	mov	r3, r7
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	011a      	lsls	r2, r3, #4
 8004858:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800485c:	4413      	add	r3, r2
 800485e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004862:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800486a:	b29a      	uxth	r2, r3
 800486c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	1d3b      	adds	r3, r7, #4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800487a:	463b      	mov	r3, r7
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d16f      	bne.n	8004964 <USB_EPStartXfer+0x1190>
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800488c:	1d3b      	adds	r3, r7, #4
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004894:	b29b      	uxth	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800489c:	4413      	add	r3, r2
 800489e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048a2:	463b      	mov	r3, r7
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	011a      	lsls	r2, r3, #4
 80048aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048ae:	4413      	add	r3, r2
 80048b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80048b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d116      	bne.n	80048ee <USB_EPStartXfer+0x111a>
 80048c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048d2:	801a      	strh	r2, [r3, #0]
 80048d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048ea:	801a      	strh	r2, [r3, #0]
 80048ec:	e05e      	b.n	80049ac <USB_EPStartXfer+0x11d8>
 80048ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f2:	2b3e      	cmp	r3, #62	; 0x3e
 80048f4:	d818      	bhi.n	8004928 <USB_EPStartXfer+0x1154>
 80048f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048fa:	085b      	lsrs	r3, r3, #1
 80048fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <USB_EPStartXfer+0x1142>
 800490c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004910:	3301      	adds	r3, #1
 8004912:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800491a:	b29b      	uxth	r3, r3
 800491c:	029b      	lsls	r3, r3, #10
 800491e:	b29a      	uxth	r2, r3
 8004920:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004924:	801a      	strh	r2, [r3, #0]
 8004926:	e041      	b.n	80049ac <USB_EPStartXfer+0x11d8>
 8004928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <USB_EPStartXfer+0x1174>
 800493e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004942:	3b01      	subs	r3, #1
 8004944:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800494c:	b29b      	uxth	r3, r3
 800494e:	029b      	lsls	r3, r3, #10
 8004950:	b29b      	uxth	r3, r3
 8004952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800495a:	b29a      	uxth	r2, r3
 800495c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	e023      	b.n	80049ac <USB_EPStartXfer+0x11d8>
 8004964:	463b      	mov	r3, r7
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d11e      	bne.n	80049ac <USB_EPStartXfer+0x11d8>
 800496e:	1d3b      	adds	r3, r7, #4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004976:	b29b      	uxth	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800497e:	4413      	add	r3, r2
 8004980:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004984:	463b      	mov	r3, r7
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	011a      	lsls	r2, r3, #4
 800498c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004990:	4413      	add	r3, r2
 8004992:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004996:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800499a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499e:	b29a      	uxth	r2, r3
 80049a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	e001      	b.n	80049ac <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e02e      	b.n	8004a0a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049ac:	1d3b      	adds	r3, r7, #4
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	463b      	mov	r3, r7
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80049ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049d2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80049d6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049de:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	463b      	mov	r3, r7
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	441a      	add	r2, r3
 80049f0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	785b      	ldrb	r3, [r3, #1]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d020      	beq.n	8004a68 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a3c:	81bb      	strh	r3, [r7, #12]
 8004a3e:	89bb      	ldrh	r3, [r7, #12]
 8004a40:	f083 0310 	eor.w	r3, r3, #16
 8004a44:	81bb      	strh	r3, [r7, #12]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	441a      	add	r2, r3
 8004a50:	89bb      	ldrh	r3, [r7, #12]
 8004a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	8013      	strh	r3, [r2, #0]
 8004a66:	e01f      	b.n	8004aa8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7e:	81fb      	strh	r3, [r7, #14]
 8004a80:	89fb      	ldrh	r3, [r7, #14]
 8004a82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a86:	81fb      	strh	r3, [r7, #14]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	441a      	add	r2, r3
 8004a92:	89fb      	ldrh	r3, [r7, #14]
 8004a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	7b1b      	ldrb	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f040 809d 	bne.w	8004c02 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	785b      	ldrb	r3, [r3, #1]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d04c      	beq.n	8004b6a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	823b      	strh	r3, [r7, #16]
 8004ade:	8a3b      	ldrh	r3, [r7, #16]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01b      	beq.n	8004b20 <USB_EPClearStall+0x6c>
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	81fb      	strh	r3, [r7, #14]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	441a      	add	r2, r3
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
 8004b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	78db      	ldrb	r3, [r3, #3]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d06c      	beq.n	8004c02 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3e:	81bb      	strh	r3, [r7, #12]
 8004b40:	89bb      	ldrh	r3, [r7, #12]
 8004b42:	f083 0320 	eor.w	r3, r3, #32
 8004b46:	81bb      	strh	r3, [r7, #12]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	441a      	add	r2, r3
 8004b52:	89bb      	ldrh	r3, [r7, #12]
 8004b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	8013      	strh	r3, [r2, #0]
 8004b68:	e04b      	b.n	8004c02 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	82fb      	strh	r3, [r7, #22]
 8004b78:	8afb      	ldrh	r3, [r7, #22]
 8004b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01b      	beq.n	8004bba <USB_EPClearStall+0x106>
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b98:	82bb      	strh	r3, [r7, #20]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	441a      	add	r2, r3
 8004ba4:	8abb      	ldrh	r3, [r7, #20]
 8004ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd0:	827b      	strh	r3, [r7, #18]
 8004bd2:	8a7b      	ldrh	r3, [r7, #18]
 8004bd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bd8:	827b      	strh	r3, [r7, #18]
 8004bda:	8a7b      	ldrh	r3, [r7, #18]
 8004bdc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004be0:	827b      	strh	r3, [r7, #18]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	441a      	add	r2, r3
 8004bec:	8a7b      	ldrh	r3, [r7, #18]
 8004bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr

08004c48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr

08004c7a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b08d      	sub	sp, #52	; 0x34
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	80fb      	strh	r3, [r7, #6]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004ca6:	88bb      	ldrh	r3, [r7, #4]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	005a      	lsls	r2, r3, #1
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc8:	e01e      	b.n	8004d08 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	3302      	adds	r3, #2
 8004cf4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	3302      	adds	r3, #2
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	3301      	adds	r3, #1
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	3b01      	subs	r3, #1
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1dd      	bne.n	8004cca <USB_WritePMA+0x3a>
  }
}
 8004d0e:	bf00      	nop
 8004d10:	3734      	adds	r7, #52	; 0x34
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr

08004d18 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b08b      	sub	sp, #44	; 0x2c
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	4611      	mov	r1, r2
 8004d24:	461a      	mov	r2, r3
 8004d26:	460b      	mov	r3, r1
 8004d28:	80fb      	strh	r3, [r7, #6]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004d2e:	88bb      	ldrh	r3, [r7, #4]
 8004d30:	085b      	lsrs	r3, r3, #1
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	005a      	lsls	r2, r3, #1
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d4a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d50:	e01b      	b.n	8004d8a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	3302      	adds	r3, #2
 8004d5e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	0a1b      	lsrs	r3, r3, #8
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	3302      	adds	r3, #2
 8004d82:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	3b01      	subs	r3, #1
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e0      	bne.n	8004d52 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004d90:	88bb      	ldrh	r3, [r7, #4]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	701a      	strb	r2, [r3, #0]
  }
}
 8004dac:	bf00      	nop
 8004dae:	372c      	adds	r7, #44	; 0x2c
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	7c1b      	ldrb	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d115      	bne.n	8004dfa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	2181      	movs	r1, #129	; 0x81
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f004 feb3 	bl	8009b42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004de6:	2202      	movs	r2, #2
 8004de8:	2101      	movs	r1, #1
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f004 fea9 	bl	8009b42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004df8:	e012      	b.n	8004e20 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004dfa:	2340      	movs	r3, #64	; 0x40
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	2181      	movs	r1, #129	; 0x81
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f004 fe9e 	bl	8009b42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e0c:	2340      	movs	r3, #64	; 0x40
 8004e0e:	2202      	movs	r2, #2
 8004e10:	2101      	movs	r1, #1
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f004 fe95 	bl	8009b42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e20:	2308      	movs	r3, #8
 8004e22:	2203      	movs	r2, #3
 8004e24:	2182      	movs	r1, #130	; 0x82
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f004 fe8b 	bl	8009b42 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e32:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e36:	f004 ffab 	bl	8009d90 <USBD_static_malloc>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
 8004e50:	e026      	b.n	8004ea0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e58:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	7c1b      	ldrb	r3, [r3, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d109      	bne.n	8004e90 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e86:	2101      	movs	r1, #1
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f004 ff4b 	bl	8009d24 <USBD_LL_PrepareReceive>
 8004e8e:	e007      	b.n	8004ea0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e96:	2340      	movs	r3, #64	; 0x40
 8004e98:	2101      	movs	r1, #1
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f004 ff42 	bl	8009d24 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004eba:	2181      	movs	r1, #129	; 0x81
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f004 fe66 	bl	8009b8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004ec8:	2101      	movs	r1, #1
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f004 fe5f 	bl	8009b8e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004ed8:	2182      	movs	r1, #130	; 0x82
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f004 fe57 	bl	8009b8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00e      	beq.n	8004f0e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f00:	4618      	mov	r0, r3
 8004f02:	f004 ff51 	bl	8009da8 <USBD_static_free>
    pdev->pClassData = NULL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f28:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d039      	beq.n	8004fb6 <USBD_CDC_Setup+0x9e>
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d17c      	bne.n	8005040 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	88db      	ldrh	r3, [r3, #6]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d029      	beq.n	8004fa2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	b25b      	sxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	da11      	bge.n	8004f7c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004f64:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	88d2      	ldrh	r2, [r2, #6]
 8004f6a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f6c:	6939      	ldr	r1, [r7, #16]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	88db      	ldrh	r3, [r3, #6]
 8004f72:	461a      	mov	r2, r3
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f001 f9f9 	bl	800636c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004f7a:	e068      	b.n	800504e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	785a      	ldrb	r2, [r3, #1]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	88db      	ldrh	r3, [r3, #6]
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f92:	6939      	ldr	r1, [r7, #16]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	88db      	ldrh	r3, [r3, #6]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f001 fa14 	bl	80063c8 <USBD_CtlPrepareRx>
      break;
 8004fa0:	e055      	b.n	800504e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	7850      	ldrb	r0, [r2, #1]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	4798      	blx	r3
      break;
 8004fb4:	e04b      	b.n	800504e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	2b0a      	cmp	r3, #10
 8004fbc:	d017      	beq.n	8004fee <USBD_CDC_Setup+0xd6>
 8004fbe:	2b0b      	cmp	r3, #11
 8004fc0:	d029      	beq.n	8005016 <USBD_CDC_Setup+0xfe>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d133      	bne.n	800502e <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d107      	bne.n	8004fe0 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004fd0:	f107 030c 	add.w	r3, r7, #12
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 f9c7 	bl	800636c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fde:	e02e      	b.n	800503e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004fe0:	6839      	ldr	r1, [r7, #0]
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f001 f958 	bl	8006298 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	75fb      	strb	r3, [r7, #23]
          break;
 8004fec:	e027      	b.n	800503e <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d107      	bne.n	8005008 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004ff8:	f107 030f 	add.w	r3, r7, #15
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	4619      	mov	r1, r3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f001 f9b3 	bl	800636c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005006:	e01a      	b.n	800503e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005008:	6839      	ldr	r1, [r7, #0]
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f001 f944 	bl	8006298 <USBD_CtlError>
            ret = USBD_FAIL;
 8005010:	2302      	movs	r3, #2
 8005012:	75fb      	strb	r3, [r7, #23]
          break;
 8005014:	e013      	b.n	800503e <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800501c:	2b03      	cmp	r3, #3
 800501e:	d00d      	beq.n	800503c <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005020:	6839      	ldr	r1, [r7, #0]
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f001 f938 	bl	8006298 <USBD_CtlError>
            ret = USBD_FAIL;
 8005028:	2302      	movs	r3, #2
 800502a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800502c:	e006      	b.n	800503c <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800502e:	6839      	ldr	r1, [r7, #0]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f001 f931 	bl	8006298 <USBD_CtlError>
          ret = USBD_FAIL;
 8005036:	2302      	movs	r3, #2
 8005038:	75fb      	strb	r3, [r7, #23]
          break;
 800503a:	e000      	b.n	800503e <USBD_CDC_Setup+0x126>
          break;
 800503c:	bf00      	nop
      }
      break;
 800503e:	e006      	b.n	800504e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005040:	6839      	ldr	r1, [r7, #0]
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 f928 	bl	8006298 <USBD_CtlError>
      ret = USBD_FAIL;
 8005048:	2302      	movs	r3, #2
 800504a:	75fb      	strb	r3, [r7, #23]
      break;
 800504c:	bf00      	nop
  }

  return ret;
 800504e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800506a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005072:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d03a      	beq.n	80050f4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800507e:	78fa      	ldrb	r2, [r7, #3]
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	331c      	adds	r3, #28
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d029      	beq.n	80050e8 <USBD_CDC_DataIn+0x90>
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	331c      	adds	r3, #28
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	78f9      	ldrb	r1, [r7, #3]
 80050a8:	68b8      	ldr	r0, [r7, #8]
 80050aa:	460b      	mov	r3, r1
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	4403      	add	r3, r0
 80050b4:	3338      	adds	r3, #56	; 0x38
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80050bc:	fb03 f301 	mul.w	r3, r3, r1
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d110      	bne.n	80050e8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80050c6:	78fa      	ldrb	r2, [r7, #3]
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	331c      	adds	r3, #28
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050da:	78f9      	ldrb	r1, [r7, #3]
 80050dc:	2300      	movs	r3, #0
 80050de:	2200      	movs	r2, #0
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f004 fdfc 	bl	8009cde <USBD_LL_Transmit>
 80050e6:	e003      	b.n	80050f0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	e000      	b.n	80050f6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80050f4:	2302      	movs	r3, #2
  }
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	460b      	mov	r3, r1
 8005108:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005110:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f004 fe27 	bl	8009d6a <USBD_LL_GetRxDataSize>
 800511c:	4602      	mov	r2, r0
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00d      	beq.n	800514a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005142:	4611      	mov	r1, r2
 8005144:	4798      	blx	r3

    return USBD_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e000      	b.n	800514c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800514a:	2302      	movs	r3, #2
  }
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005162:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800516a:	2b00      	cmp	r3, #0
 800516c:	d015      	beq.n	800519a <USBD_CDC_EP0_RxReady+0x46>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005174:	2bff      	cmp	r3, #255	; 0xff
 8005176:	d010      	beq.n	800519a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005186:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800518e:	b292      	uxth	r2, r2
 8005190:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	22ff      	movs	r2, #255	; 0xff
 8005196:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2243      	movs	r2, #67	; 0x43
 80051b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80051b2:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20000094 	.word	0x20000094

080051c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2243      	movs	r2, #67	; 0x43
 80051d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80051d2:	4b03      	ldr	r3, [pc, #12]	; (80051e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	20000050 	.word	0x20000050

080051e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2243      	movs	r2, #67	; 0x43
 80051f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80051f2:	4b03      	ldr	r3, [pc, #12]	; (8005200 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	200000d8 	.word	0x200000d8

08005204 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	220a      	movs	r2, #10
 8005210:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005212:	4b03      	ldr	r3, [pc, #12]	; (8005220 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	2000000c 	.word	0x2000000c

08005224 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800522e:	2302      	movs	r3, #2
 8005230:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005264:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800526e:	88fa      	ldrh	r2, [r7, #6]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr

08005282 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005292:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01c      	beq.n	80052fc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d115      	bne.n	80052f8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2181      	movs	r1, #129	; 0x81
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f004 fcf5 	bl	8009cde <USBD_LL_Transmit>

      return USBD_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	e002      	b.n	80052fe <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80052fc:	2302      	movs	r3, #2
  }
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005314:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800531c:	2b00      	cmp	r3, #0
 800531e:	d017      	beq.n	8005350 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	7c1b      	ldrb	r3, [r3, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d109      	bne.n	800533c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800532e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005332:	2101      	movs	r1, #1
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f004 fcf5 	bl	8009d24 <USBD_LL_PrepareReceive>
 800533a:	e007      	b.n	800534c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005342:	2340      	movs	r3, #64	; 0x40
 8005344:	2101      	movs	r1, #1
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f004 fcec 	bl	8009d24 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	e000      	b.n	8005352 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005350:	2302      	movs	r3, #2
  }
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	4613      	mov	r3, r2
 8005366:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800536e:	2302      	movs	r3, #2
 8005370:	e01a      	b.n	80053a8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	79fa      	ldrb	r2, [r7, #7]
 800539e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f004 fb59 	bl	8009a58 <USBD_LL_Init>

  return USBD_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d006      	beq.n	80053d2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	e001      	b.n	80053d6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80053d2:	2302      	movs	r3, #2
 80053d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f004 fb8e 	bl	8009b0c <USBD_LL_Start>

  return USBD_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr

0800540e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800541a:	2302      	movs	r3, #2
 800541c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00c      	beq.n	8005442 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	4611      	mov	r1, r2
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005442:	7bfb      	ldrb	r3, [r7, #15]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	78fa      	ldrb	r2, [r7, #3]
 8005462:	4611      	mov	r1, r2
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	4798      	blx	r3

  return USBD_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fecb 	bl	8006220 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005498:	461a      	mov	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054a6:	f003 031f 	and.w	r3, r3, #31
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d00c      	beq.n	80054c8 <USBD_LL_SetupStage+0x56>
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d302      	bcc.n	80054b8 <USBD_LL_SetupStage+0x46>
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d010      	beq.n	80054d8 <USBD_LL_SetupStage+0x66>
 80054b6:	e017      	b.n	80054e8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f9cb 	bl	800585c <USBD_StdDevReq>
      break;
 80054c6:	e01a      	b.n	80054fe <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054ce:	4619      	mov	r1, r3
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fa2d 	bl	8005930 <USBD_StdItfReq>
      break;
 80054d6:	e012      	b.n	80054fe <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fa6b 	bl	80059bc <USBD_StdEPReq>
      break;
 80054e6:	e00a      	b.n	80054fe <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f004 fb68 	bl	8009bcc <USBD_LL_StallEP>
      break;
 80054fc:	bf00      	nop
  }

  return USBD_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	460b      	mov	r3, r1
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005516:	7afb      	ldrb	r3, [r7, #11]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d14b      	bne.n	80055b4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005522:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800552a:	2b03      	cmp	r3, #3
 800552c:	d134      	bne.n	8005598 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	429a      	cmp	r2, r3
 8005538:	d919      	bls.n	800556e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	1ad2      	subs	r2, r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005550:	429a      	cmp	r2, r3
 8005552:	d203      	bcs.n	800555c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005558:	b29b      	uxth	r3, r3
 800555a:	e002      	b.n	8005562 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005560:	b29b      	uxth	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 ff4c 	bl	8006404 <USBD_CtlContinueRx>
 800556c:	e038      	b.n	80055e0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005580:	2b03      	cmp	r3, #3
 8005582:	d105      	bne.n	8005590 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 ff49 	bl	8006428 <USBD_CtlSendStatus>
 8005596:	e023      	b.n	80055e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800559e:	2b05      	cmp	r3, #5
 80055a0:	d11e      	bne.n	80055e0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80055aa:	2100      	movs	r1, #0
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f004 fb0d 	bl	8009bcc <USBD_LL_StallEP>
 80055b2:	e015      	b.n	80055e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00d      	beq.n	80055dc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d108      	bne.n	80055dc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	7afa      	ldrb	r2, [r7, #11]
 80055d4:	4611      	mov	r1, r2
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	4798      	blx	r3
 80055da:	e001      	b.n	80055e0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80055dc:	2302      	movs	r3, #2
 80055de:	e000      	b.n	80055e2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	460b      	mov	r3, r1
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80055f8:	7afb      	ldrb	r3, [r7, #11]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d17f      	bne.n	80056fe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3314      	adds	r3, #20
 8005602:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800560a:	2b02      	cmp	r3, #2
 800560c:	d15c      	bne.n	80056c8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	429a      	cmp	r2, r3
 8005618:	d915      	bls.n	8005646 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	1ad2      	subs	r2, r2, r3
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	b29b      	uxth	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 feb6 	bl	80063a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005638:	2300      	movs	r3, #0
 800563a:	2200      	movs	r2, #0
 800563c:	2100      	movs	r1, #0
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f004 fb70 	bl	8009d24 <USBD_LL_PrepareReceive>
 8005644:	e04e      	b.n	80056e4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	6912      	ldr	r2, [r2, #16]
 800564e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005652:	fb02 f201 	mul.w	r2, r2, r1
 8005656:	1a9b      	subs	r3, r3, r2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11c      	bne.n	8005696 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005664:	429a      	cmp	r2, r3
 8005666:	d316      	bcc.n	8005696 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005672:	429a      	cmp	r2, r3
 8005674:	d20f      	bcs.n	8005696 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005676:	2200      	movs	r2, #0
 8005678:	2100      	movs	r1, #0
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 fe92 	bl	80063a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005688:	2300      	movs	r3, #0
 800568a:	2200      	movs	r2, #0
 800568c:	2100      	movs	r1, #0
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f004 fb48 	bl	8009d24 <USBD_LL_PrepareReceive>
 8005694:	e026      	b.n	80056e4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d105      	bne.n	80056b8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80056b8:	2180      	movs	r1, #128	; 0x80
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f004 fa86 	bl	8009bcc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fec4 	bl	800644e <USBD_CtlReceiveStatus>
 80056c6:	e00d      	b.n	80056e4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d004      	beq.n	80056dc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d103      	bne.n	80056e4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f004 fa74 	bl	8009bcc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d11d      	bne.n	800572a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f7ff fe83 	bl	80053fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80056fc:	e015      	b.n	800572a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00d      	beq.n	8005726 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005710:	2b03      	cmp	r3, #3
 8005712:	d108      	bne.n	8005726 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	7afa      	ldrb	r2, [r7, #11]
 800571e:	4611      	mov	r1, r2
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	4798      	blx	r3
 8005724:	e001      	b.n	800572a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005726:	2302      	movs	r3, #2
 8005728:	e000      	b.n	800572c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800573c:	2340      	movs	r3, #64	; 0x40
 800573e:	2200      	movs	r2, #0
 8005740:	2100      	movs	r1, #0
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f004 f9fd 	bl	8009b42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2240      	movs	r2, #64	; 0x40
 8005754:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005758:	2340      	movs	r3, #64	; 0x40
 800575a:	2200      	movs	r2, #0
 800575c:	2180      	movs	r1, #128	; 0x80
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f004 f9ef 	bl	8009b42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2240      	movs	r2, #64	; 0x40
 800576e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d009      	beq.n	80057ac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6852      	ldr	r2, [r2, #4]
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	4611      	mov	r1, r2
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	4798      	blx	r3
  }

  return USBD_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	78fa      	ldrb	r2, [r7, #3]
 80057c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr

080057d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2204      	movs	r2, #4
 80057ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800580a:	2b04      	cmp	r3, #4
 800580c:	d105      	bne.n	800581a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr

08005826 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005834:	2b03      	cmp	r3, #3
 8005836:	d10b      	bne.n	8005850 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005872:	2b20      	cmp	r3, #32
 8005874:	d004      	beq.n	8005880 <USBD_StdDevReq+0x24>
 8005876:	2b40      	cmp	r3, #64	; 0x40
 8005878:	d002      	beq.n	8005880 <USBD_StdDevReq+0x24>
 800587a:	2b00      	cmp	r3, #0
 800587c:	d008      	beq.n	8005890 <USBD_StdDevReq+0x34>
 800587e:	e04c      	b.n	800591a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	4798      	blx	r3
      break;
 800588e:	e049      	b.n	8005924 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	2b09      	cmp	r3, #9
 8005896:	d83a      	bhi.n	800590e <USBD_StdDevReq+0xb2>
 8005898:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <USBD_StdDevReq+0x44>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	080058f1 	.word	0x080058f1
 80058a4:	08005905 	.word	0x08005905
 80058a8:	0800590f 	.word	0x0800590f
 80058ac:	080058fb 	.word	0x080058fb
 80058b0:	0800590f 	.word	0x0800590f
 80058b4:	080058d3 	.word	0x080058d3
 80058b8:	080058c9 	.word	0x080058c9
 80058bc:	0800590f 	.word	0x0800590f
 80058c0:	080058e7 	.word	0x080058e7
 80058c4:	080058dd 	.word	0x080058dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f9d4 	bl	8005c78 <USBD_GetDescriptor>
          break;
 80058d0:	e022      	b.n	8005918 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80058d2:	6839      	ldr	r1, [r7, #0]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fb37 	bl	8005f48 <USBD_SetAddress>
          break;
 80058da:	e01d      	b.n	8005918 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fb74 	bl	8005fcc <USBD_SetConfig>
          break;
 80058e4:	e018      	b.n	8005918 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fbfd 	bl	80060e8 <USBD_GetConfig>
          break;
 80058ee:	e013      	b.n	8005918 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fc2c 	bl	8006150 <USBD_GetStatus>
          break;
 80058f8:	e00e      	b.n	8005918 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fc5a 	bl	80061b6 <USBD_SetFeature>
          break;
 8005902:	e009      	b.n	8005918 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fc69 	bl	80061de <USBD_ClrFeature>
          break;
 800590c:	e004      	b.n	8005918 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800590e:	6839      	ldr	r1, [r7, #0]
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fcc1 	bl	8006298 <USBD_CtlError>
          break;
 8005916:	bf00      	nop
      }
      break;
 8005918:	e004      	b.n	8005924 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fcbb 	bl	8006298 <USBD_CtlError>
      break;
 8005922:	bf00      	nop
  }

  return ret;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop

08005930 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005946:	2b20      	cmp	r3, #32
 8005948:	d003      	beq.n	8005952 <USBD_StdItfReq+0x22>
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d001      	beq.n	8005952 <USBD_StdItfReq+0x22>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d12a      	bne.n	80059a8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005958:	3b01      	subs	r3, #1
 800595a:	2b02      	cmp	r3, #2
 800595c:	d81d      	bhi.n	800599a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	889b      	ldrh	r3, [r3, #4]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b01      	cmp	r3, #1
 8005966:	d813      	bhi.n	8005990 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
 8005976:	4603      	mov	r3, r0
 8005978:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	88db      	ldrh	r3, [r3, #6]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d110      	bne.n	80059a4 <USBD_StdItfReq+0x74>
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10d      	bne.n	80059a4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fd4d 	bl	8006428 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800598e:	e009      	b.n	80059a4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fc80 	bl	8006298 <USBD_CtlError>
          break;
 8005998:	e004      	b.n	80059a4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fc7b 	bl	8006298 <USBD_CtlError>
          break;
 80059a2:	e000      	b.n	80059a6 <USBD_StdItfReq+0x76>
          break;
 80059a4:	bf00      	nop
      }
      break;
 80059a6:	e004      	b.n	80059b2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fc74 	bl	8006298 <USBD_CtlError>
      break;
 80059b0:	bf00      	nop
  }

  return USBD_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	889b      	ldrh	r3, [r3, #4]
 80059ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d004      	beq.n	80059e6 <USBD_StdEPReq+0x2a>
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	d002      	beq.n	80059e6 <USBD_StdEPReq+0x2a>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <USBD_StdEPReq+0x3a>
 80059e4:	e13d      	b.n	8005c62 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	4798      	blx	r3
      break;
 80059f4:	e13a      	b.n	8005c6c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	d10a      	bne.n	8005a18 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	4798      	blx	r3
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	e12a      	b.n	8005c6e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d03e      	beq.n	8005a9e <USBD_StdEPReq+0xe2>
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d002      	beq.n	8005a2a <USBD_StdEPReq+0x6e>
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d070      	beq.n	8005b0a <USBD_StdEPReq+0x14e>
 8005a28:	e115      	b.n	8005c56 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d002      	beq.n	8005a3a <USBD_StdEPReq+0x7e>
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d015      	beq.n	8005a64 <USBD_StdEPReq+0xa8>
 8005a38:	e02b      	b.n	8005a92 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00c      	beq.n	8005a5a <USBD_StdEPReq+0x9e>
 8005a40:	7bbb      	ldrb	r3, [r7, #14]
 8005a42:	2b80      	cmp	r3, #128	; 0x80
 8005a44:	d009      	beq.n	8005a5a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a46:	7bbb      	ldrb	r3, [r7, #14]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f004 f8be 	bl	8009bcc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a50:	2180      	movs	r1, #128	; 0x80
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f004 f8ba 	bl	8009bcc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a58:	e020      	b.n	8005a9c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fc1b 	bl	8006298 <USBD_CtlError>
              break;
 8005a62:	e01b      	b.n	8005a9c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	885b      	ldrh	r3, [r3, #2]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10e      	bne.n	8005a8a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005a6c:	7bbb      	ldrb	r3, [r7, #14]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00b      	beq.n	8005a8a <USBD_StdEPReq+0xce>
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	2b80      	cmp	r3, #128	; 0x80
 8005a76:	d008      	beq.n	8005a8a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	88db      	ldrh	r3, [r3, #6]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005a80:	7bbb      	ldrb	r3, [r7, #14]
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f004 f8a1 	bl	8009bcc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fccc 	bl	8006428 <USBD_CtlSendStatus>

              break;
 8005a90:	e004      	b.n	8005a9c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fbff 	bl	8006298 <USBD_CtlError>
              break;
 8005a9a:	bf00      	nop
          }
          break;
 8005a9c:	e0e0      	b.n	8005c60 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d002      	beq.n	8005aae <USBD_StdEPReq+0xf2>
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d015      	beq.n	8005ad8 <USBD_StdEPReq+0x11c>
 8005aac:	e026      	b.n	8005afc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005aae:	7bbb      	ldrb	r3, [r7, #14]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00c      	beq.n	8005ace <USBD_StdEPReq+0x112>
 8005ab4:	7bbb      	ldrb	r3, [r7, #14]
 8005ab6:	2b80      	cmp	r3, #128	; 0x80
 8005ab8:	d009      	beq.n	8005ace <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005aba:	7bbb      	ldrb	r3, [r7, #14]
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f004 f884 	bl	8009bcc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ac4:	2180      	movs	r1, #128	; 0x80
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f004 f880 	bl	8009bcc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005acc:	e01c      	b.n	8005b08 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fbe1 	bl	8006298 <USBD_CtlError>
              break;
 8005ad6:	e017      	b.n	8005b08 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	885b      	ldrh	r3, [r3, #2]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d112      	bne.n	8005b06 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ae0:	7bbb      	ldrb	r3, [r7, #14]
 8005ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005aea:	7bbb      	ldrb	r3, [r7, #14]
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f004 f88b 	bl	8009c0a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fc97 	bl	8006428 <USBD_CtlSendStatus>
              }
              break;
 8005afa:	e004      	b.n	8005b06 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fbca 	bl	8006298 <USBD_CtlError>
              break;
 8005b04:	e000      	b.n	8005b08 <USBD_StdEPReq+0x14c>
              break;
 8005b06:	bf00      	nop
          }
          break;
 8005b08:	e0aa      	b.n	8005c60 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d002      	beq.n	8005b1a <USBD_StdEPReq+0x15e>
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d032      	beq.n	8005b7e <USBD_StdEPReq+0x1c2>
 8005b18:	e097      	b.n	8005c4a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b1a:	7bbb      	ldrb	r3, [r7, #14]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d007      	beq.n	8005b30 <USBD_StdEPReq+0x174>
 8005b20:	7bbb      	ldrb	r3, [r7, #14]
 8005b22:	2b80      	cmp	r3, #128	; 0x80
 8005b24:	d004      	beq.n	8005b30 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fbb5 	bl	8006298 <USBD_CtlError>
                break;
 8005b2e:	e091      	b.n	8005c54 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	da0b      	bge.n	8005b50 <USBD_StdEPReq+0x194>
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	3310      	adds	r3, #16
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	e00b      	b.n	8005b68 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	3304      	adds	r3, #4
 8005b68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2202      	movs	r2, #2
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fbf8 	bl	800636c <USBD_CtlSendData>
              break;
 8005b7c:	e06a      	b.n	8005c54 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	da11      	bge.n	8005baa <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b86:	7bbb      	ldrb	r3, [r7, #14]
 8005b88:	f003 020f 	and.w	r2, r3, #15
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	3318      	adds	r3, #24
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d117      	bne.n	8005bd0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fb78 	bl	8006298 <USBD_CtlError>
                  break;
 8005ba8:	e054      	b.n	8005c54 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005baa:	7bbb      	ldrb	r3, [r7, #14]
 8005bac:	f003 020f 	and.w	r2, r3, #15
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005bc6:	6839      	ldr	r1, [r7, #0]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fb65 	bl	8006298 <USBD_CtlError>
                  break;
 8005bce:	e041      	b.n	8005c54 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da0b      	bge.n	8005bf0 <USBD_StdEPReq+0x234>
 8005bd8:	7bbb      	ldrb	r3, [r7, #14]
 8005bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	3310      	adds	r3, #16
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	4413      	add	r3, r2
 8005bec:	3304      	adds	r3, #4
 8005bee:	e00b      	b.n	8005c08 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bf0:	7bbb      	ldrb	r3, [r7, #14]
 8005bf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4413      	add	r3, r2
 8005c06:	3304      	adds	r3, #4
 8005c08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c0a:	7bbb      	ldrb	r3, [r7, #14]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <USBD_StdEPReq+0x25a>
 8005c10:	7bbb      	ldrb	r3, [r7, #14]
 8005c12:	2b80      	cmp	r3, #128	; 0x80
 8005c14:	d103      	bne.n	8005c1e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	e00e      	b.n	8005c3c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005c1e:	7bbb      	ldrb	r3, [r7, #14]
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f004 f810 	bl	8009c48 <USBD_LL_IsStallEP>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2201      	movs	r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	e002      	b.n	8005c3c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	4619      	mov	r1, r3
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fb92 	bl	800636c <USBD_CtlSendData>
              break;
 8005c48:	e004      	b.n	8005c54 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fb23 	bl	8006298 <USBD_CtlError>
              break;
 8005c52:	bf00      	nop
          }
          break;
 8005c54:	e004      	b.n	8005c60 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005c56:	6839      	ldr	r1, [r7, #0]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fb1d 	bl	8006298 <USBD_CtlError>
          break;
 8005c5e:	bf00      	nop
      }
      break;
 8005c60:	e004      	b.n	8005c6c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fb17 	bl	8006298 <USBD_CtlError>
      break;
 8005c6a:	bf00      	nop
  }

  return ret;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	885b      	ldrh	r3, [r3, #2]
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	2b06      	cmp	r3, #6
 8005c9a:	f200 8128 	bhi.w	8005eee <USBD_GetDescriptor+0x276>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <USBD_GetDescriptor+0x2c>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cc1 	.word	0x08005cc1
 8005ca8:	08005cd9 	.word	0x08005cd9
 8005cac:	08005d19 	.word	0x08005d19
 8005cb0:	08005eef 	.word	0x08005eef
 8005cb4:	08005eef 	.word	0x08005eef
 8005cb8:	08005e8f 	.word	0x08005e8f
 8005cbc:	08005ebb 	.word	0x08005ebb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	7c12      	ldrb	r2, [r2, #16]
 8005ccc:	f107 0108 	add.w	r1, r7, #8
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4798      	blx	r3
 8005cd4:	60f8      	str	r0, [r7, #12]
      break;
 8005cd6:	e112      	b.n	8005efe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	7c1b      	ldrb	r3, [r3, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10d      	bne.n	8005cfc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	f107 0208 	add.w	r2, r7, #8
 8005cec:	4610      	mov	r0, r2
 8005cee:	4798      	blx	r3
 8005cf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005cfa:	e100      	b.n	8005efe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	f107 0208 	add.w	r2, r7, #8
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4798      	blx	r3
 8005d0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3301      	adds	r3, #1
 8005d12:	2202      	movs	r2, #2
 8005d14:	701a      	strb	r2, [r3, #0]
      break;
 8005d16:	e0f2      	b.n	8005efe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	885b      	ldrh	r3, [r3, #2]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b05      	cmp	r3, #5
 8005d20:	f200 80ac 	bhi.w	8005e7c <USBD_GetDescriptor+0x204>
 8005d24:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <USBD_GetDescriptor+0xb4>)
 8005d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2a:	bf00      	nop
 8005d2c:	08005d45 	.word	0x08005d45
 8005d30:	08005d79 	.word	0x08005d79
 8005d34:	08005dad 	.word	0x08005dad
 8005d38:	08005de1 	.word	0x08005de1
 8005d3c:	08005e15 	.word	0x08005e15
 8005d40:	08005e49 	.word	0x08005e49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	7c12      	ldrb	r2, [r2, #16]
 8005d5c:	f107 0108 	add.w	r1, r7, #8
 8005d60:	4610      	mov	r0, r2
 8005d62:	4798      	blx	r3
 8005d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d66:	e091      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fa94 	bl	8006298 <USBD_CtlError>
            err++;
 8005d70:	7afb      	ldrb	r3, [r7, #11]
 8005d72:	3301      	adds	r3, #1
 8005d74:	72fb      	strb	r3, [r7, #11]
          break;
 8005d76:	e089      	b.n	8005e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	7c12      	ldrb	r2, [r2, #16]
 8005d90:	f107 0108 	add.w	r1, r7, #8
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
 8005d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d9a:	e077      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa7a 	bl	8006298 <USBD_CtlError>
            err++;
 8005da4:	7afb      	ldrb	r3, [r7, #11]
 8005da6:	3301      	adds	r3, #1
 8005da8:	72fb      	strb	r3, [r7, #11]
          break;
 8005daa:	e06f      	b.n	8005e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00b      	beq.n	8005dd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	7c12      	ldrb	r2, [r2, #16]
 8005dc4:	f107 0108 	add.w	r1, r7, #8
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4798      	blx	r3
 8005dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dce:	e05d      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa60 	bl	8006298 <USBD_CtlError>
            err++;
 8005dd8:	7afb      	ldrb	r3, [r7, #11]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8005dde:	e055      	b.n	8005e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	7c12      	ldrb	r2, [r2, #16]
 8005df8:	f107 0108 	add.w	r1, r7, #8
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4798      	blx	r3
 8005e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e02:	e043      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa46 	bl	8006298 <USBD_CtlError>
            err++;
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	72fb      	strb	r3, [r7, #11]
          break;
 8005e12:	e03b      	b.n	8005e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	7c12      	ldrb	r2, [r2, #16]
 8005e2c:	f107 0108 	add.w	r1, r7, #8
 8005e30:	4610      	mov	r0, r2
 8005e32:	4798      	blx	r3
 8005e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e36:	e029      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa2c 	bl	8006298 <USBD_CtlError>
            err++;
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	3301      	adds	r3, #1
 8005e44:	72fb      	strb	r3, [r7, #11]
          break;
 8005e46:	e021      	b.n	8005e8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00b      	beq.n	8005e6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	7c12      	ldrb	r2, [r2, #16]
 8005e60:	f107 0108 	add.w	r1, r7, #8
 8005e64:	4610      	mov	r0, r2
 8005e66:	4798      	blx	r3
 8005e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e6a:	e00f      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fa12 	bl	8006298 <USBD_CtlError>
            err++;
 8005e74:	7afb      	ldrb	r3, [r7, #11]
 8005e76:	3301      	adds	r3, #1
 8005e78:	72fb      	strb	r3, [r7, #11]
          break;
 8005e7a:	e007      	b.n	8005e8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa0a 	bl	8006298 <USBD_CtlError>
          err++;
 8005e84:	7afb      	ldrb	r3, [r7, #11]
 8005e86:	3301      	adds	r3, #1
 8005e88:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005e8a:	e038      	b.n	8005efe <USBD_GetDescriptor+0x286>
 8005e8c:	e037      	b.n	8005efe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	7c1b      	ldrb	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9e:	f107 0208 	add.w	r2, r7, #8
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	4798      	blx	r3
 8005ea6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ea8:	e029      	b.n	8005efe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f9f3 	bl	8006298 <USBD_CtlError>
        err++;
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	72fb      	strb	r3, [r7, #11]
      break;
 8005eb8:	e021      	b.n	8005efe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	7c1b      	ldrb	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10d      	bne.n	8005ede <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	f107 0208 	add.w	r2, r7, #8
 8005ece:	4610      	mov	r0, r2
 8005ed0:	4798      	blx	r3
 8005ed2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	2207      	movs	r2, #7
 8005eda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005edc:	e00f      	b.n	8005efe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f9d9 	bl	8006298 <USBD_CtlError>
        err++;
 8005ee6:	7afb      	ldrb	r3, [r7, #11]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	72fb      	strb	r3, [r7, #11]
      break;
 8005eec:	e007      	b.n	8005efe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f9d1 	bl	8006298 <USBD_CtlError>
      err++;
 8005ef6:	7afb      	ldrb	r3, [r7, #11]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	72fb      	strb	r3, [r7, #11]
      break;
 8005efc:	bf00      	nop
  }

  if (err != 0U)
 8005efe:	7afb      	ldrb	r3, [r7, #11]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d11c      	bne.n	8005f3e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005f04:	893b      	ldrh	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d011      	beq.n	8005f2e <USBD_GetDescriptor+0x2b6>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	88db      	ldrh	r3, [r3, #6]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00d      	beq.n	8005f2e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	88da      	ldrh	r2, [r3, #6]
 8005f16:	893b      	ldrh	r3, [r7, #8]
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	bf28      	it	cs
 8005f1c:	4613      	movcs	r3, r2
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f22:	893b      	ldrh	r3, [r7, #8]
 8005f24:	461a      	mov	r2, r3
 8005f26:	68f9      	ldr	r1, [r7, #12]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fa1f 	bl	800636c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	88db      	ldrh	r3, [r3, #6]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa76 	bl	8006428 <USBD_CtlSendStatus>
 8005f3c:	e000      	b.n	8005f40 <USBD_GetDescriptor+0x2c8>
    return;
 8005f3e:	bf00      	nop
    }
  }
}
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop

08005f48 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	889b      	ldrh	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d130      	bne.n	8005fbc <USBD_SetAddress+0x74>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	88db      	ldrh	r3, [r3, #6]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d12c      	bne.n	8005fbc <USBD_SetAddress+0x74>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	885b      	ldrh	r3, [r3, #2]
 8005f66:	2b7f      	cmp	r3, #127	; 0x7f
 8005f68:	d828      	bhi.n	8005fbc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	885b      	ldrh	r3, [r3, #2]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d104      	bne.n	8005f8a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f988 	bl	8006298 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f88:	e01c      	b.n	8005fc4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	7bfa      	ldrb	r2, [r7, #15]
 8005f8e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f003 fe82 	bl	8009ca0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fa43 	bl	8006428 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb0:	e008      	b.n	8005fc4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fba:	e003      	b.n	8005fc4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f96a 	bl	8006298 <USBD_CtlError>
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	885b      	ldrh	r3, [r3, #2]
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	4b41      	ldr	r3, [pc, #260]	; (80060e4 <USBD_SetConfig+0x118>)
 8005fde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fe0:	4b40      	ldr	r3, [pc, #256]	; (80060e4 <USBD_SetConfig+0x118>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d904      	bls.n	8005ff2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f954 	bl	8006298 <USBD_CtlError>
 8005ff0:	e075      	b.n	80060de <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d002      	beq.n	8006002 <USBD_SetConfig+0x36>
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d023      	beq.n	8006048 <USBD_SetConfig+0x7c>
 8006000:	e062      	b.n	80060c8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006002:	4b38      	ldr	r3, [pc, #224]	; (80060e4 <USBD_SetConfig+0x118>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01a      	beq.n	8006040 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800600a:	4b36      	ldr	r3, [pc, #216]	; (80060e4 <USBD_SetConfig+0x118>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2203      	movs	r2, #3
 8006018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800601c:	4b31      	ldr	r3, [pc, #196]	; (80060e4 <USBD_SetConfig+0x118>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff f9f3 	bl	800540e <USBD_SetClassConfig>
 8006028:	4603      	mov	r3, r0
 800602a:	2b02      	cmp	r3, #2
 800602c:	d104      	bne.n	8006038 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f931 	bl	8006298 <USBD_CtlError>
            return;
 8006036:	e052      	b.n	80060de <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f9f5 	bl	8006428 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800603e:	e04e      	b.n	80060de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f9f1 	bl	8006428 <USBD_CtlSendStatus>
        break;
 8006046:	e04a      	b.n	80060de <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006048:	4b26      	ldr	r3, [pc, #152]	; (80060e4 <USBD_SetConfig+0x118>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d112      	bne.n	8006076 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006058:	4b22      	ldr	r3, [pc, #136]	; (80060e4 <USBD_SetConfig+0x118>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	461a      	mov	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006062:	4b20      	ldr	r3, [pc, #128]	; (80060e4 <USBD_SetConfig+0x118>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff f9ef 	bl	800544c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f9da 	bl	8006428 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006074:	e033      	b.n	80060de <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006076:	4b1b      	ldr	r3, [pc, #108]	; (80060e4 <USBD_SetConfig+0x118>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d01d      	beq.n	80060c0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff f9dd 	bl	800544c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006092:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <USBD_SetConfig+0x118>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800609c:	4b11      	ldr	r3, [pc, #68]	; (80060e4 <USBD_SetConfig+0x118>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff f9b3 	bl	800540e <USBD_SetClassConfig>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d104      	bne.n	80060b8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f8f1 	bl	8006298 <USBD_CtlError>
            return;
 80060b6:	e012      	b.n	80060de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f9b5 	bl	8006428 <USBD_CtlSendStatus>
        break;
 80060be:	e00e      	b.n	80060de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f9b1 	bl	8006428 <USBD_CtlSendStatus>
        break;
 80060c6:	e00a      	b.n	80060de <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f8e4 	bl	8006298 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80060d0:	4b04      	ldr	r3, [pc, #16]	; (80060e4 <USBD_SetConfig+0x118>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff f9b8 	bl	800544c <USBD_ClrClassConfig>
        break;
 80060dc:	bf00      	nop
    }
  }
}
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	2000019c 	.word	0x2000019c

080060e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	88db      	ldrh	r3, [r3, #6]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d004      	beq.n	8006104 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f8cb 	bl	8006298 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006102:	e021      	b.n	8006148 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800610a:	2b01      	cmp	r3, #1
 800610c:	db17      	blt.n	800613e <USBD_GetConfig+0x56>
 800610e:	2b02      	cmp	r3, #2
 8006110:	dd02      	ble.n	8006118 <USBD_GetConfig+0x30>
 8006112:	2b03      	cmp	r3, #3
 8006114:	d00b      	beq.n	800612e <USBD_GetConfig+0x46>
 8006116:	e012      	b.n	800613e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3308      	adds	r3, #8
 8006122:	2201      	movs	r2, #1
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f920 	bl	800636c <USBD_CtlSendData>
        break;
 800612c:	e00c      	b.n	8006148 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3304      	adds	r3, #4
 8006132:	2201      	movs	r2, #1
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f918 	bl	800636c <USBD_CtlSendData>
        break;
 800613c:	e004      	b.n	8006148 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f8a9 	bl	8006298 <USBD_CtlError>
        break;
 8006146:	bf00      	nop
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006160:	3b01      	subs	r3, #1
 8006162:	2b02      	cmp	r3, #2
 8006164:	d81e      	bhi.n	80061a4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	88db      	ldrh	r3, [r3, #6]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d004      	beq.n	8006178 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f891 	bl	8006298 <USBD_CtlError>
        break;
 8006176:	e01a      	b.n	80061ae <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f043 0202 	orr.w	r2, r3, #2
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	330c      	adds	r3, #12
 8006198:	2202      	movs	r2, #2
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f8e5 	bl	800636c <USBD_CtlSendData>
      break;
 80061a2:	e004      	b.n	80061ae <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f876 	bl	8006298 <USBD_CtlError>
      break;
 80061ac:	bf00      	nop
  }
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	885b      	ldrh	r3, [r3, #2]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d106      	bne.n	80061d6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f929 	bl	8006428 <USBD_CtlSendStatus>
  }
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ee:	3b01      	subs	r3, #1
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d80b      	bhi.n	800620c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	885b      	ldrh	r3, [r3, #2]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d10c      	bne.n	8006216 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f90f 	bl	8006428 <USBD_CtlSendStatus>
      }
      break;
 800620a:	e004      	b.n	8006216 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f842 	bl	8006298 <USBD_CtlError>
      break;
 8006214:	e000      	b.n	8006218 <USBD_ClrFeature+0x3a>
      break;
 8006216:	bf00      	nop
  }
}
 8006218:	bf00      	nop
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781a      	ldrb	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	785a      	ldrb	r2, [r3, #1]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	3302      	adds	r3, #2
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	b29a      	uxth	r2, r3
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	3303      	adds	r3, #3
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	b29b      	uxth	r3, r3
 800624e:	4413      	add	r3, r2
 8006250:	b29a      	uxth	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	3304      	adds	r3, #4
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b29a      	uxth	r2, r3
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	3305      	adds	r3, #5
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	021b      	lsls	r3, r3, #8
 8006268:	b29b      	uxth	r3, r3
 800626a:	4413      	add	r3, r2
 800626c:	b29a      	uxth	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	3306      	adds	r3, #6
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	b29a      	uxth	r2, r3
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	3307      	adds	r3, #7
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	b29b      	uxth	r3, r3
 8006286:	4413      	add	r3, r2
 8006288:	b29a      	uxth	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	80da      	strh	r2, [r3, #6]

}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr

08006298 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80062a2:	2180      	movs	r1, #128	; 0x80
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f003 fc91 	bl	8009bcc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80062aa:	2100      	movs	r1, #0
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f003 fc8d 	bl	8009bcc <USBD_LL_StallEP>
}
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b086      	sub	sp, #24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d032      	beq.n	8006336 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 f834 	bl	800633e <USBD_GetLen>
 80062d6:	4603      	mov	r3, r0
 80062d8:	3301      	adds	r3, #1
 80062da:	b29b      	uxth	r3, r3
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	75fa      	strb	r2, [r7, #23]
 80062ea:	461a      	mov	r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4413      	add	r3, r2
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	7812      	ldrb	r2, [r2, #0]
 80062f4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	75fa      	strb	r2, [r7, #23]
 80062fc:	461a      	mov	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	4413      	add	r3, r2
 8006302:	2203      	movs	r2, #3
 8006304:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006306:	e012      	b.n	800632e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	60fa      	str	r2, [r7, #12]
 800630e:	7dfa      	ldrb	r2, [r7, #23]
 8006310:	1c51      	adds	r1, r2, #1
 8006312:	75f9      	strb	r1, [r7, #23]
 8006314:	4611      	mov	r1, r2
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	440a      	add	r2, r1
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	75fa      	strb	r2, [r7, #23]
 8006324:	461a      	mov	r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4413      	add	r3, r2
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e8      	bne.n	8006308 <USBD_GetString+0x4e>
    }
  }
}
 8006336:	bf00      	nop
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800634a:	e005      	b.n	8006358 <USBD_GetLen+0x1a>
  {
    len++;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	3301      	adds	r3, #1
 8006350:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3301      	adds	r3, #1
 8006356:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1f5      	bne.n	800634c <USBD_GetLen+0xe>
  }

  return len;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	bc80      	pop	{r7}
 800636a:	4770      	bx	lr

0800636c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2202      	movs	r2, #2
 800637e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006382:	88fa      	ldrh	r2, [r7, #6]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006388:	88fa      	ldrh	r2, [r7, #6]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800638e:	88fb      	ldrh	r3, [r7, #6]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	2100      	movs	r1, #0
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f003 fca2 	bl	8009cde <USBD_LL_Transmit>

  return USBD_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	4613      	mov	r3, r2
 80063b0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	2100      	movs	r1, #0
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f003 fc90 	bl	8009cde <USBD_LL_Transmit>

  return USBD_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	4613      	mov	r3, r2
 80063d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2203      	movs	r2, #3
 80063da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80063de:	88fa      	ldrh	r2, [r7, #6]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80063e6:	88fa      	ldrh	r2, [r7, #6]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063ee:	88fb      	ldrh	r3, [r7, #6]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	2100      	movs	r1, #0
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f003 fc95 	bl	8009d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	2100      	movs	r1, #0
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f003 fc83 	bl	8009d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2204      	movs	r2, #4
 8006434:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006438:	2300      	movs	r3, #0
 800643a:	2200      	movs	r2, #0
 800643c:	2100      	movs	r1, #0
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f003 fc4d 	bl	8009cde <USBD_LL_Transmit>

  return USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b082      	sub	sp, #8
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2205      	movs	r2, #5
 800645a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800645e:	2300      	movs	r3, #0
 8006460:	2200      	movs	r2, #0
 8006462:	2100      	movs	r1, #0
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f003 fc5d 	bl	8009d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800647a:	f3ef 8305 	mrs	r3, IPSR
 800647e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006480:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10f      	bne.n	80064a6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006486:	f3ef 8310 	mrs	r3, PRIMASK
 800648a:	607b      	str	r3, [r7, #4]
  return(result);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <osKernelInitialize+0x32>
 8006492:	4b10      	ldr	r3, [pc, #64]	; (80064d4 <osKernelInitialize+0x60>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d109      	bne.n	80064ae <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800649a:	f3ef 8311 	mrs	r3, BASEPRI
 800649e:	603b      	str	r3, [r7, #0]
  return(result);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80064a6:	f06f 0305 	mvn.w	r3, #5
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	e00c      	b.n	80064c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064ae:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <osKernelInitialize+0x60>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d105      	bne.n	80064c2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80064b6:	4b07      	ldr	r3, [pc, #28]	; (80064d4 <osKernelInitialize+0x60>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e002      	b.n	80064c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80064c2:	f04f 33ff 	mov.w	r3, #4294967295
 80064c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064c8:	68fb      	ldr	r3, [r7, #12]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr
 80064d4:	200001a0 	.word	0x200001a0

080064d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064de:	f3ef 8305 	mrs	r3, IPSR
 80064e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80064e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10f      	bne.n	800650a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ea:	f3ef 8310 	mrs	r3, PRIMASK
 80064ee:	607b      	str	r3, [r7, #4]
  return(result);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <osKernelStart+0x32>
 80064f6:	4b11      	ldr	r3, [pc, #68]	; (800653c <osKernelStart+0x64>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d109      	bne.n	8006512 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006502:	603b      	str	r3, [r7, #0]
  return(result);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <osKernelStart+0x3a>
    stat = osErrorISR;
 800650a:	f06f 0305 	mvn.w	r3, #5
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	e00e      	b.n	8006530 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006512:	4b0a      	ldr	r3, [pc, #40]	; (800653c <osKernelStart+0x64>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d107      	bne.n	800652a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800651a:	4b08      	ldr	r3, [pc, #32]	; (800653c <osKernelStart+0x64>)
 800651c:	2202      	movs	r2, #2
 800651e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006520:	f001 fac2 	bl	8007aa8 <vTaskStartScheduler>
      stat = osOK;
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e002      	b.n	8006530 <osKernelStart+0x58>
    } else {
      stat = osError;
 800652a:	f04f 33ff 	mov.w	r3, #4294967295
 800652e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006530:	68fb      	ldr	r3, [r7, #12]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	200001a0 	.word	0x200001a0

08006540 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b092      	sub	sp, #72	; 0x48
 8006544:	af04      	add	r7, sp, #16
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006550:	f3ef 8305 	mrs	r3, IPSR
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006558:	2b00      	cmp	r3, #0
 800655a:	f040 8094 	bne.w	8006686 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800655e:	f3ef 8310 	mrs	r3, PRIMASK
 8006562:	623b      	str	r3, [r7, #32]
  return(result);
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f040 808d 	bne.w	8006686 <osThreadNew+0x146>
 800656c:	4b48      	ldr	r3, [pc, #288]	; (8006690 <osThreadNew+0x150>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d106      	bne.n	8006582 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006574:	f3ef 8311 	mrs	r3, BASEPRI
 8006578:	61fb      	str	r3, [r7, #28]
  return(result);
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f040 8082 	bne.w	8006686 <osThreadNew+0x146>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d07e      	beq.n	8006686 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006588:	2380      	movs	r3, #128	; 0x80
 800658a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800658c:	2318      	movs	r3, #24
 800658e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006590:	2300      	movs	r3, #0
 8006592:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006594:	f107 031b 	add.w	r3, r7, #27
 8006598:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800659a:	f04f 33ff 	mov.w	r3, #4294967295
 800659e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d045      	beq.n	8006632 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <osThreadNew+0x74>
        name = attr->name;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d008      	beq.n	80065da <osThreadNew+0x9a>
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	2b38      	cmp	r3, #56	; 0x38
 80065cc:	d805      	bhi.n	80065da <osThreadNew+0x9a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <osThreadNew+0x9e>
        return (NULL);
 80065da:	2300      	movs	r3, #0
 80065dc:	e054      	b.n	8006688 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	089b      	lsrs	r3, r3, #2
 80065ec:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00e      	beq.n	8006614 <osThreadNew+0xd4>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	2b73      	cmp	r3, #115	; 0x73
 80065fc:	d90a      	bls.n	8006614 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006602:	2b00      	cmp	r3, #0
 8006604:	d006      	beq.n	8006614 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <osThreadNew+0xd4>
        mem = 1;
 800660e:	2301      	movs	r3, #1
 8006610:	62bb      	str	r3, [r7, #40]	; 0x28
 8006612:	e010      	b.n	8006636 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10c      	bne.n	8006636 <osThreadNew+0xf6>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d108      	bne.n	8006636 <osThreadNew+0xf6>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d104      	bne.n	8006636 <osThreadNew+0xf6>
          mem = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006630:	e001      	b.n	8006636 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	2b01      	cmp	r3, #1
 800663a:	d110      	bne.n	800665e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006644:	9202      	str	r2, [sp, #8]
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006650:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 ffe8 	bl	8007628 <xTaskCreateStatic>
 8006658:	4603      	mov	r3, r0
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e013      	b.n	8006686 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d110      	bne.n	8006686 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	b29a      	uxth	r2, r3
 8006668:	f107 0314 	add.w	r3, r7, #20
 800666c:	9301      	str	r3, [sp, #4]
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f001 f82f 	bl	80076da <xTaskCreate>
 800667c:	4603      	mov	r3, r0
 800667e:	2b01      	cmp	r3, #1
 8006680:	d001      	beq.n	8006686 <osThreadNew+0x146>
          hTask = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006686:	697b      	ldr	r3, [r7, #20]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3738      	adds	r7, #56	; 0x38
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	200001a0 	.word	0x200001a0

08006694 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800669c:	f3ef 8305 	mrs	r3, IPSR
 80066a0:	613b      	str	r3, [r7, #16]
  return(result);
 80066a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10f      	bne.n	80066c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066a8:	f3ef 8310 	mrs	r3, PRIMASK
 80066ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d109      	bne.n	80066c8 <osDelay+0x34>
 80066b4:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <osDelay+0x58>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d109      	bne.n	80066d0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066bc:	f3ef 8311 	mrs	r3, BASEPRI
 80066c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <osDelay+0x3c>
    stat = osErrorISR;
 80066c8:	f06f 0305 	mvn.w	r3, #5
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	e007      	b.n	80066e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 f9b0 	bl	8007a40 <vTaskDelay>
    }
  }

  return (stat);
 80066e0:	697b      	ldr	r3, [r7, #20]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	200001a0 	.word	0x200001a0

080066f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4a06      	ldr	r2, [pc, #24]	; (8006718 <vApplicationGetIdleTaskMemory+0x28>)
 8006700:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	4a05      	ldr	r2, [pc, #20]	; (800671c <vApplicationGetIdleTaskMemory+0x2c>)
 8006706:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2280      	movs	r2, #128	; 0x80
 800670c:	601a      	str	r2, [r3, #0]
}
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr
 8006718:	200001a4 	.word	0x200001a4
 800671c:	20000218 	.word	0x20000218

08006720 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4a07      	ldr	r2, [pc, #28]	; (800674c <vApplicationGetTimerTaskMemory+0x2c>)
 8006730:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4a06      	ldr	r2, [pc, #24]	; (8006750 <vApplicationGetTimerTaskMemory+0x30>)
 8006736:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800673e:	601a      	str	r2, [r3, #0]
}
 8006740:	bf00      	nop
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	20000418 	.word	0x20000418
 8006750:	2000048c 	.word	0x2000048c

08006754 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f103 0208 	add.w	r2, r3, #8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f04f 32ff 	mov.w	r2, #4294967295
 800676c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f103 0208 	add.w	r2, r3, #8
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f103 0208 	add.w	r2, r3, #8
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr

08006792 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	601a      	str	r2, [r3, #0]
}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr

080067f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006806:	d103      	bne.n	8006810 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e00c      	b.n	800682a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3308      	adds	r3, #8
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	e002      	b.n	800681e <vListInsert+0x2e>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	429a      	cmp	r2, r3
 8006828:	d2f6      	bcs.n	8006818 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	601a      	str	r2, [r3, #0]
}
 8006856:	bf00      	nop
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6892      	ldr	r2, [r2, #8]
 8006876:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6852      	ldr	r2, [r2, #4]
 8006880:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	429a      	cmp	r2, r3
 800688a:	d103      	bne.n	8006894 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	1e5a      	subs	r2, r3, #1
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr
	...

080068b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d109      	bne.n	80068dc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	e7fe      	b.n	80068da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80068dc:	f002 fb1c 	bl	8008f18 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e8:	68f9      	ldr	r1, [r7, #12]
 80068ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	441a      	add	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690c:	3b01      	subs	r3, #1
 800690e:	68f9      	ldr	r1, [r7, #12]
 8006910:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006912:	fb01 f303 	mul.w	r3, r1, r3
 8006916:	441a      	add	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	22ff      	movs	r2, #255	; 0xff
 8006920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	22ff      	movs	r2, #255	; 0xff
 8006928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d114      	bne.n	800695c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d01a      	beq.n	8006970 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3310      	adds	r3, #16
 800693e:	4618      	mov	r0, r3
 8006940:	f001 fb54 	bl	8007fec <xTaskRemoveFromEventList>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d012      	beq.n	8006970 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800694a:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <xQueueGenericReset+0xcc>)
 800694c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	e009      	b.n	8006970 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3310      	adds	r3, #16
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff fef7 	bl	8006754 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3324      	adds	r3, #36	; 0x24
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff fef2 	bl	8006754 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006970:	f002 fb00 	bl	8008f74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006974:	2301      	movs	r3, #1
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	e000ed04 	.word	0xe000ed04

08006984 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08e      	sub	sp, #56	; 0x38
 8006988:	af02      	add	r7, sp, #8
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d109      	bne.n	80069ac <xQueueGenericCreateStatic+0x28>
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069aa:	e7fe      	b.n	80069aa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d109      	bne.n	80069c6 <xQueueGenericCreateStatic+0x42>
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
 80069c4:	e7fe      	b.n	80069c4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <xQueueGenericCreateStatic+0x4e>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <xQueueGenericCreateStatic+0x52>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <xQueueGenericCreateStatic+0x54>
 80069d6:	2300      	movs	r3, #0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d109      	bne.n	80069f0 <xQueueGenericCreateStatic+0x6c>
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	623b      	str	r3, [r7, #32]
 80069ee:	e7fe      	b.n	80069ee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <xQueueGenericCreateStatic+0x78>
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <xQueueGenericCreateStatic+0x7c>
 80069fc:	2301      	movs	r3, #1
 80069fe:	e000      	b.n	8006a02 <xQueueGenericCreateStatic+0x7e>
 8006a00:	2300      	movs	r3, #0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d109      	bne.n	8006a1a <xQueueGenericCreateStatic+0x96>
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	61fb      	str	r3, [r7, #28]
 8006a18:	e7fe      	b.n	8006a18 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a1a:	2350      	movs	r3, #80	; 0x50
 8006a1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b50      	cmp	r3, #80	; 0x50
 8006a22:	d009      	beq.n	8006a38 <xQueueGenericCreateStatic+0xb4>
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	e7fe      	b.n	8006a36 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00d      	beq.n	8006a5e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	4613      	mov	r3, r2
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	68b9      	ldr	r1, [r7, #8]
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f842 	bl	8006ae2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3730      	adds	r7, #48	; 0x30
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08a      	sub	sp, #40	; 0x28
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	4613      	mov	r3, r2
 8006a74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d109      	bne.n	8006a90 <xQueueGenericCreate+0x28>
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	e7fe      	b.n	8006a8e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	e004      	b.n	8006aa6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	fb02 f303 	mul.w	r3, r2, r3
 8006aa4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	3350      	adds	r3, #80	; 0x50
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f002 fb2a 	bl	8009104 <pvPortMalloc>
 8006ab0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00f      	beq.n	8006ad8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	3350      	adds	r3, #80	; 0x50
 8006abc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ac6:	79fa      	ldrb	r2, [r7, #7]
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	4613      	mov	r3, r2
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 f805 	bl	8006ae2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006ad8:	69bb      	ldr	r3, [r7, #24]
	}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3720      	adds	r7, #32
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
 8006aee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d103      	bne.n	8006afe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e002      	b.n	8006b04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b10:	2101      	movs	r1, #1
 8006b12:	69b8      	ldr	r0, [r7, #24]
 8006b14:	f7ff fece 	bl	80068b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	78fa      	ldrb	r2, [r7, #3]
 8006b1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08e      	sub	sp, #56	; 0x38
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b36:	2300      	movs	r3, #0
 8006b38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d109      	bne.n	8006b58 <xQueueGenericSend+0x30>
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b56:	e7fe      	b.n	8006b56 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d103      	bne.n	8006b66 <xQueueGenericSend+0x3e>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <xQueueGenericSend+0x42>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <xQueueGenericSend+0x44>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <xQueueGenericSend+0x5c>
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
 8006b82:	e7fe      	b.n	8006b82 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d103      	bne.n	8006b92 <xQueueGenericSend+0x6a>
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <xQueueGenericSend+0x6e>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <xQueueGenericSend+0x70>
 8006b96:	2300      	movs	r3, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d109      	bne.n	8006bb0 <xQueueGenericSend+0x88>
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	623b      	str	r3, [r7, #32]
 8006bae:	e7fe      	b.n	8006bae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bb0:	f001 fbd6 	bl	8008360 <xTaskGetSchedulerState>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d102      	bne.n	8006bc0 <xQueueGenericSend+0x98>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <xQueueGenericSend+0x9c>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e000      	b.n	8006bc6 <xQueueGenericSend+0x9e>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d109      	bne.n	8006bde <xQueueGenericSend+0xb6>
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	e7fe      	b.n	8006bdc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bde:	f002 f99b 	bl	8008f18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d302      	bcc.n	8006bf4 <xQueueGenericSend+0xcc>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d129      	bne.n	8006c48 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bfa:	f000 fba8 	bl	800734e <prvCopyDataToQueue>
 8006bfe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d010      	beq.n	8006c2a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	3324      	adds	r3, #36	; 0x24
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 f9ed 	bl	8007fec <xTaskRemoveFromEventList>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d013      	beq.n	8006c40 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c18:	4b3f      	ldr	r3, [pc, #252]	; (8006d18 <xQueueGenericSend+0x1f0>)
 8006c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	e00a      	b.n	8006c40 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c30:	4b39      	ldr	r3, [pc, #228]	; (8006d18 <xQueueGenericSend+0x1f0>)
 8006c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c40:	f002 f998 	bl	8008f74 <vPortExitCritical>
				return pdPASS;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e063      	b.n	8006d10 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d103      	bne.n	8006c56 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c4e:	f002 f991 	bl	8008f74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e05c      	b.n	8006d10 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c5c:	f107 0314 	add.w	r3, r7, #20
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 fa25 	bl	80080b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c66:	2301      	movs	r3, #1
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c6a:	f002 f983 	bl	8008f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c6e:	f000 ff81 	bl	8007b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c72:	f002 f951 	bl	8008f18 <vPortEnterCritical>
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c7c:	b25b      	sxtb	r3, r3
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d103      	bne.n	8006c8c <xQueueGenericSend+0x164>
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c92:	b25b      	sxtb	r3, r3
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d103      	bne.n	8006ca2 <xQueueGenericSend+0x17a>
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ca2:	f002 f967 	bl	8008f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ca6:	1d3a      	adds	r2, r7, #4
 8006ca8:	f107 0314 	add.w	r3, r7, #20
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 fa14 	bl	80080dc <xTaskCheckForTimeOut>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d124      	bne.n	8006d04 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cbc:	f000 fc3f 	bl	800753e <prvIsQueueFull>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d018      	beq.n	8006cf8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	3310      	adds	r3, #16
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f001 f93e 	bl	8007f50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cd6:	f000 fbca 	bl	800746e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006cda:	f000 ff59 	bl	8007b90 <xTaskResumeAll>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f47f af7c 	bne.w	8006bde <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006ce6:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <xQueueGenericSend+0x1f0>)
 8006ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	e772      	b.n	8006bde <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cfa:	f000 fbb8 	bl	800746e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cfe:	f000 ff47 	bl	8007b90 <xTaskResumeAll>
 8006d02:	e76c      	b.n	8006bde <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d06:	f000 fbb2 	bl	800746e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d0a:	f000 ff41 	bl	8007b90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d0e:	2300      	movs	r3, #0
		}
	}
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3738      	adds	r7, #56	; 0x38
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08e      	sub	sp, #56	; 0x38
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d109      	bne.n	8006d48 <xQueueGenericSendFromISR+0x2c>
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
 8006d46:	e7fe      	b.n	8006d46 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <xQueueGenericSendFromISR+0x3a>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <xQueueGenericSendFromISR+0x3e>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <xQueueGenericSendFromISR+0x40>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d109      	bne.n	8006d74 <xQueueGenericSendFromISR+0x58>
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	623b      	str	r3, [r7, #32]
 8006d72:	e7fe      	b.n	8006d72 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d103      	bne.n	8006d82 <xQueueGenericSendFromISR+0x66>
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <xQueueGenericSendFromISR+0x6a>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e000      	b.n	8006d88 <xQueueGenericSendFromISR+0x6c>
 8006d86:	2300      	movs	r3, #0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <xQueueGenericSendFromISR+0x84>
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	61fb      	str	r3, [r7, #28]
 8006d9e:	e7fe      	b.n	8006d9e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006da0:	f002 f974 	bl	800908c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006da4:	f3ef 8211 	mrs	r2, BASEPRI
 8006da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	61ba      	str	r2, [r7, #24]
 8006dba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006dbc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d302      	bcc.n	8006dd2 <xQueueGenericSendFromISR+0xb6>
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d12c      	bne.n	8006e2c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	68b9      	ldr	r1, [r7, #8]
 8006de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006de2:	f000 fab4 	bl	800734e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006de6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	d112      	bne.n	8006e16 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d016      	beq.n	8006e26 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	3324      	adds	r3, #36	; 0x24
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 f8f5 	bl	8007fec <xTaskRemoveFromEventList>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00e      	beq.n	8006e26 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00b      	beq.n	8006e26 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	e007      	b.n	8006e26 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	b25a      	sxtb	r2, r3
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e26:	2301      	movs	r3, #1
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006e2a:	e001      	b.n	8006e30 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3738      	adds	r7, #56	; 0x38
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08e      	sub	sp, #56	; 0x38
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d109      	bne.n	8006e6c <xQueueGiveFromISR+0x28>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	623b      	str	r3, [r7, #32]
 8006e6a:	e7fe      	b.n	8006e6a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d009      	beq.n	8006e88 <xQueueGiveFromISR+0x44>
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	e7fe      	b.n	8006e86 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d103      	bne.n	8006e98 <xQueueGiveFromISR+0x54>
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <xQueueGiveFromISR+0x58>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <xQueueGiveFromISR+0x5a>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d109      	bne.n	8006eb6 <xQueueGiveFromISR+0x72>
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	61bb      	str	r3, [r7, #24]
 8006eb4:	e7fe      	b.n	8006eb4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006eb6:	f002 f8e9 	bl	800908c <vPortValidateInterruptPriority>
	__asm volatile
 8006eba:	f3ef 8211 	mrs	r2, BASEPRI
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	617a      	str	r2, [r7, #20]
 8006ed0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006ed2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d22b      	bcs.n	8006f3e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f00:	d112      	bne.n	8006f28 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d016      	beq.n	8006f38 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	3324      	adds	r3, #36	; 0x24
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 f86c 	bl	8007fec <xTaskRemoveFromEventList>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00e      	beq.n	8006f38 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2201      	movs	r2, #1
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	e007      	b.n	8006f38 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	b25a      	sxtb	r2, r3
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f3c:	e001      	b.n	8006f42 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	637b      	str	r3, [r7, #52]	; 0x34
 8006f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f44:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3738      	adds	r7, #56	; 0x38
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08c      	sub	sp, #48	; 0x30
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f64:	2300      	movs	r3, #0
 8006f66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <xQueueReceive+0x2e>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	623b      	str	r3, [r7, #32]
 8006f84:	e7fe      	b.n	8006f84 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d103      	bne.n	8006f94 <xQueueReceive+0x3c>
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <xQueueReceive+0x40>
 8006f94:	2301      	movs	r3, #1
 8006f96:	e000      	b.n	8006f9a <xQueueReceive+0x42>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d109      	bne.n	8006fb2 <xQueueReceive+0x5a>
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	e7fe      	b.n	8006fb0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fb2:	f001 f9d5 	bl	8008360 <xTaskGetSchedulerState>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d102      	bne.n	8006fc2 <xQueueReceive+0x6a>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <xQueueReceive+0x6e>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <xQueueReceive+0x70>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d109      	bne.n	8006fe0 <xQueueReceive+0x88>
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	61bb      	str	r3, [r7, #24]
 8006fde:	e7fe      	b.n	8006fde <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fe0:	f001 ff9a 	bl	8008f18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d01f      	beq.n	8007030 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ff4:	f000 fa15 	bl	8007422 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	1e5a      	subs	r2, r3, #1
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00f      	beq.n	8007028 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700a:	3310      	adds	r3, #16
 800700c:	4618      	mov	r0, r3
 800700e:	f000 ffed 	bl	8007fec <xTaskRemoveFromEventList>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d007      	beq.n	8007028 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007018:	4b3c      	ldr	r3, [pc, #240]	; (800710c <xQueueReceive+0x1b4>)
 800701a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007028:	f001 ffa4 	bl	8008f74 <vPortExitCritical>
				return pdPASS;
 800702c:	2301      	movs	r3, #1
 800702e:	e069      	b.n	8007104 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d103      	bne.n	800703e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007036:	f001 ff9d 	bl	8008f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800703a:	2300      	movs	r3, #0
 800703c:	e062      	b.n	8007104 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	2b00      	cmp	r3, #0
 8007042:	d106      	bne.n	8007052 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007044:	f107 0310 	add.w	r3, r7, #16
 8007048:	4618      	mov	r0, r3
 800704a:	f001 f831 	bl	80080b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800704e:	2301      	movs	r3, #1
 8007050:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007052:	f001 ff8f 	bl	8008f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007056:	f000 fd8d 	bl	8007b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800705a:	f001 ff5d 	bl	8008f18 <vPortEnterCritical>
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007064:	b25b      	sxtb	r3, r3
 8007066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706a:	d103      	bne.n	8007074 <xQueueReceive+0x11c>
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800707a:	b25b      	sxtb	r3, r3
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d103      	bne.n	800708a <xQueueReceive+0x132>
 8007082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800708a:	f001 ff73 	bl	8008f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800708e:	1d3a      	adds	r2, r7, #4
 8007090:	f107 0310 	add.w	r3, r7, #16
 8007094:	4611      	mov	r1, r2
 8007096:	4618      	mov	r0, r3
 8007098:	f001 f820 	bl	80080dc <xTaskCheckForTimeOut>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d123      	bne.n	80070ea <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070a4:	f000 fa35 	bl	8007512 <prvIsQueueEmpty>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d017      	beq.n	80070de <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	3324      	adds	r3, #36	; 0x24
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	4611      	mov	r1, r2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 ff4a 	bl	8007f50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070be:	f000 f9d6 	bl	800746e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070c2:	f000 fd65 	bl	8007b90 <xTaskResumeAll>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d189      	bne.n	8006fe0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80070cc:	4b0f      	ldr	r3, [pc, #60]	; (800710c <xQueueReceive+0x1b4>)
 80070ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	e780      	b.n	8006fe0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070e0:	f000 f9c5 	bl	800746e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070e4:	f000 fd54 	bl	8007b90 <xTaskResumeAll>
 80070e8:	e77a      	b.n	8006fe0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ec:	f000 f9bf 	bl	800746e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070f0:	f000 fd4e 	bl	8007b90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070f6:	f000 fa0c 	bl	8007512 <prvIsQueueEmpty>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f43f af6f 	beq.w	8006fe0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007102:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007104:	4618      	mov	r0, r3
 8007106:	3730      	adds	r7, #48	; 0x30
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	e000ed04 	.word	0xe000ed04

08007110 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08e      	sub	sp, #56	; 0x38
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800711a:	2300      	movs	r3, #0
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007122:	2300      	movs	r3, #0
 8007124:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d109      	bne.n	8007140 <xQueueSemaphoreTake+0x30>
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	623b      	str	r3, [r7, #32]
 800713e:	e7fe      	b.n	800713e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	d009      	beq.n	800715c <xQueueSemaphoreTake+0x4c>
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	61fb      	str	r3, [r7, #28]
 800715a:	e7fe      	b.n	800715a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800715c:	f001 f900 	bl	8008360 <xTaskGetSchedulerState>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d102      	bne.n	800716c <xQueueSemaphoreTake+0x5c>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <xQueueSemaphoreTake+0x60>
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <xQueueSemaphoreTake+0x62>
 8007170:	2300      	movs	r3, #0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d109      	bne.n	800718a <xQueueSemaphoreTake+0x7a>
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	61bb      	str	r3, [r7, #24]
 8007188:	e7fe      	b.n	8007188 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800718a:	f001 fec5 	bl	8008f18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	2b00      	cmp	r3, #0
 8007198:	d024      	beq.n	80071e4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	1e5a      	subs	r2, r3, #1
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d104      	bne.n	80071b4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80071aa:	f001 fa55 	bl	8008658 <pvTaskIncrementMutexHeldCount>
 80071ae:	4602      	mov	r2, r0
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00f      	beq.n	80071dc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	3310      	adds	r3, #16
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 ff13 	bl	8007fec <xTaskRemoveFromEventList>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d007      	beq.n	80071dc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071cc:	4b53      	ldr	r3, [pc, #332]	; (800731c <xQueueSemaphoreTake+0x20c>)
 80071ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071dc:	f001 feca 	bl	8008f74 <vPortExitCritical>
				return pdPASS;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e096      	b.n	8007312 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d110      	bne.n	800720c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d009      	beq.n	8007204 <xQueueSemaphoreTake+0xf4>
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	e7fe      	b.n	8007202 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007204:	f001 feb6 	bl	8008f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007208:	2300      	movs	r3, #0
 800720a:	e082      	b.n	8007312 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800720c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007212:	f107 030c 	add.w	r3, r7, #12
 8007216:	4618      	mov	r0, r3
 8007218:	f000 ff4a 	bl	80080b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800721c:	2301      	movs	r3, #1
 800721e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007220:	f001 fea8 	bl	8008f74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007224:	f000 fca6 	bl	8007b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007228:	f001 fe76 	bl	8008f18 <vPortEnterCritical>
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007232:	b25b      	sxtb	r3, r3
 8007234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007238:	d103      	bne.n	8007242 <xQueueSemaphoreTake+0x132>
 800723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007248:	b25b      	sxtb	r3, r3
 800724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724e:	d103      	bne.n	8007258 <xQueueSemaphoreTake+0x148>
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007258:	f001 fe8c 	bl	8008f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800725c:	463a      	mov	r2, r7
 800725e:	f107 030c 	add.w	r3, r7, #12
 8007262:	4611      	mov	r1, r2
 8007264:	4618      	mov	r0, r3
 8007266:	f000 ff39 	bl	80080dc <xTaskCheckForTimeOut>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d132      	bne.n	80072d6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007270:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007272:	f000 f94e 	bl	8007512 <prvIsQueueEmpty>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d026      	beq.n	80072ca <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800727c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d109      	bne.n	8007298 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007284:	f001 fe48 	bl	8008f18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	4618      	mov	r0, r3
 800728e:	f001 f885 	bl	800839c <xTaskPriorityInherit>
 8007292:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007294:	f001 fe6e 	bl	8008f74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	3324      	adds	r3, #36	; 0x24
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	4611      	mov	r1, r2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fe55 	bl	8007f50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072a8:	f000 f8e1 	bl	800746e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072ac:	f000 fc70 	bl	8007b90 <xTaskResumeAll>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f47f af69 	bne.w	800718a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80072b8:	4b18      	ldr	r3, [pc, #96]	; (800731c <xQueueSemaphoreTake+0x20c>)
 80072ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	e75f      	b.n	800718a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80072ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072cc:	f000 f8cf 	bl	800746e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072d0:	f000 fc5e 	bl	8007b90 <xTaskResumeAll>
 80072d4:	e759      	b.n	800718a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80072d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072d8:	f000 f8c9 	bl	800746e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072dc:	f000 fc58 	bl	8007b90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072e2:	f000 f916 	bl	8007512 <prvIsQueueEmpty>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f43f af4e 	beq.w	800718a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00d      	beq.n	8007310 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80072f4:	f001 fe10 	bl	8008f18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80072f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072fa:	f000 f811 	bl	8007320 <prvGetDisinheritPriorityAfterTimeout>
 80072fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007306:	4618      	mov	r0, r3
 8007308:	f001 f922 	bl	8008550 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800730c:	f001 fe32 	bl	8008f74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007310:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007312:	4618      	mov	r0, r3
 8007314:	3738      	adds	r7, #56	; 0x38
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	e000ed04 	.word	0xe000ed04

08007320 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	2b00      	cmp	r3, #0
 800732e:	d006      	beq.n	800733e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	e001      	b.n	8007342 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007342:	68fb      	ldr	r3, [r7, #12]
	}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	bc80      	pop	{r7}
 800734c:	4770      	bx	lr

0800734e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b086      	sub	sp, #24
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800735a:	2300      	movs	r3, #0
 800735c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007362:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10d      	bne.n	8007388 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d14d      	bne.n	8007410 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	4618      	mov	r0, r3
 800737a:	f001 f87d 	bl	8008478 <xTaskPriorityDisinherit>
 800737e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	605a      	str	r2, [r3, #4]
 8007386:	e043      	b.n	8007410 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d119      	bne.n	80073c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6898      	ldr	r0, [r3, #8]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	461a      	mov	r2, r3
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	f002 fd69 	bl	8009e70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	441a      	add	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d32b      	bcc.n	8007410 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	609a      	str	r2, [r3, #8]
 80073c0:	e026      	b.n	8007410 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	68d8      	ldr	r0, [r3, #12]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	461a      	mov	r2, r3
 80073cc:	68b9      	ldr	r1, [r7, #8]
 80073ce:	f002 fd4f 	bl	8009e70 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	425b      	negs	r3, r3
 80073dc:	441a      	add	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d207      	bcs.n	80073fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	425b      	negs	r3, r3
 80073f8:	441a      	add	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d105      	bne.n	8007410 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3b01      	subs	r3, #1
 800740e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007418:	697b      	ldr	r3, [r7, #20]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	d018      	beq.n	8007466 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743c:	441a      	add	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	429a      	cmp	r2, r3
 800744c:	d303      	bcc.n	8007456 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68d9      	ldr	r1, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	461a      	mov	r2, r3
 8007460:	6838      	ldr	r0, [r7, #0]
 8007462:	f002 fd05 	bl	8009e70 <memcpy>
	}
}
 8007466:	bf00      	nop
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007476:	f001 fd4f 	bl	8008f18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007480:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007482:	e011      	b.n	80074a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	d012      	beq.n	80074b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3324      	adds	r3, #36	; 0x24
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fdab 	bl	8007fec <xTaskRemoveFromEventList>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800749c:	f000 fe7e 	bl	800819c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	dce9      	bgt.n	8007484 <prvUnlockQueue+0x16>
 80074b0:	e000      	b.n	80074b4 <prvUnlockQueue+0x46>
					break;
 80074b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	22ff      	movs	r2, #255	; 0xff
 80074b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80074bc:	f001 fd5a 	bl	8008f74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074c0:	f001 fd2a 	bl	8008f18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074cc:	e011      	b.n	80074f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d012      	beq.n	80074fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3310      	adds	r3, #16
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fd86 	bl	8007fec <xTaskRemoveFromEventList>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074e6:	f000 fe59 	bl	800819c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	dce9      	bgt.n	80074ce <prvUnlockQueue+0x60>
 80074fa:	e000      	b.n	80074fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	22ff      	movs	r2, #255	; 0xff
 8007502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007506:	f001 fd35 	bl	8008f74 <vPortExitCritical>
}
 800750a:	bf00      	nop
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800751a:	f001 fcfd 	bl	8008f18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	2b00      	cmp	r3, #0
 8007524:	d102      	bne.n	800752c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007526:	2301      	movs	r3, #1
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	e001      	b.n	8007530 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800752c:	2300      	movs	r3, #0
 800752e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007530:	f001 fd20 	bl	8008f74 <vPortExitCritical>

	return xReturn;
 8007534:	68fb      	ldr	r3, [r7, #12]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007546:	f001 fce7 	bl	8008f18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007552:	429a      	cmp	r2, r3
 8007554:	d102      	bne.n	800755c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007556:	2301      	movs	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	e001      	b.n	8007560 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800755c:	2300      	movs	r3, #0
 800755e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007560:	f001 fd08 	bl	8008f74 <vPortExitCritical>

	return xReturn;
 8007564:	68fb      	ldr	r3, [r7, #12]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	e014      	b.n	80075aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007580:	4a0e      	ldr	r2, [pc, #56]	; (80075bc <vQueueAddToRegistry+0x4c>)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10b      	bne.n	80075a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800758c:	490b      	ldr	r1, [pc, #44]	; (80075bc <vQueueAddToRegistry+0x4c>)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007596:	4a09      	ldr	r2, [pc, #36]	; (80075bc <vQueueAddToRegistry+0x4c>)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	4413      	add	r3, r2
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075a2:	e005      	b.n	80075b0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3301      	adds	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b07      	cmp	r3, #7
 80075ae:	d9e7      	bls.n	8007580 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075b0:	bf00      	nop
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	20003174 	.word	0x20003174

080075c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075d0:	f001 fca2 	bl	8008f18 <vPortEnterCritical>
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075da:	b25b      	sxtb	r3, r3
 80075dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e0:	d103      	bne.n	80075ea <vQueueWaitForMessageRestricted+0x2a>
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075f0:	b25b      	sxtb	r3, r3
 80075f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f6:	d103      	bne.n	8007600 <vQueueWaitForMessageRestricted+0x40>
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007600:	f001 fcb8 	bl	8008f74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007608:	2b00      	cmp	r3, #0
 800760a:	d106      	bne.n	800761a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	3324      	adds	r3, #36	; 0x24
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fcbf 	bl	8007f98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800761a:	6978      	ldr	r0, [r7, #20]
 800761c:	f7ff ff27 	bl	800746e <prvUnlockQueue>
	}
 8007620:	bf00      	nop
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08e      	sub	sp, #56	; 0x38
 800762c:	af04      	add	r7, sp, #16
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007638:	2b00      	cmp	r3, #0
 800763a:	d109      	bne.n	8007650 <xTaskCreateStatic+0x28>
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	623b      	str	r3, [r7, #32]
 800764e:	e7fe      	b.n	800764e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <xTaskCreateStatic+0x42>
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	61fb      	str	r3, [r7, #28]
 8007668:	e7fe      	b.n	8007668 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800766a:	2374      	movs	r3, #116	; 0x74
 800766c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b74      	cmp	r3, #116	; 0x74
 8007672:	d009      	beq.n	8007688 <xTaskCreateStatic+0x60>
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	61bb      	str	r3, [r7, #24]
 8007686:	e7fe      	b.n	8007686 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	2b00      	cmp	r3, #0
 800768c:	d01e      	beq.n	80076cc <xTaskCreateStatic+0xa4>
 800768e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007690:	2b00      	cmp	r3, #0
 8007692:	d01b      	beq.n	80076cc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800769c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	2202      	movs	r2, #2
 80076a2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076a6:	2300      	movs	r3, #0
 80076a8:	9303      	str	r3, [sp, #12]
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	9302      	str	r3, [sp, #8]
 80076ae:	f107 0314 	add.w	r3, r7, #20
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 f850 	bl	8007764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076c6:	f000 f8d9 	bl	800787c <prvAddNewTaskToReadyList>
 80076ca:	e001      	b.n	80076d0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80076cc:	2300      	movs	r3, #0
 80076ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076d0:	697b      	ldr	r3, [r7, #20]
	}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3728      	adds	r7, #40	; 0x28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b08c      	sub	sp, #48	; 0x30
 80076de:	af04      	add	r7, sp, #16
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	603b      	str	r3, [r7, #0]
 80076e6:	4613      	mov	r3, r2
 80076e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ea:	88fb      	ldrh	r3, [r7, #6]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 fd08 	bl	8009104 <pvPortMalloc>
 80076f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00e      	beq.n	800771a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80076fc:	2074      	movs	r0, #116	; 0x74
 80076fe:	f001 fd01 	bl	8009104 <pvPortMalloc>
 8007702:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	631a      	str	r2, [r3, #48]	; 0x30
 8007710:	e005      	b.n	800771e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007712:	6978      	ldr	r0, [r7, #20]
 8007714:	f001 fdb8 	bl	8009288 <vPortFree>
 8007718:	e001      	b.n	800771e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d017      	beq.n	8007754 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800772c:	88fa      	ldrh	r2, [r7, #6]
 800772e:	2300      	movs	r3, #0
 8007730:	9303      	str	r3, [sp, #12]
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	9302      	str	r3, [sp, #8]
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	9301      	str	r3, [sp, #4]
 800773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f80e 	bl	8007764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007748:	69f8      	ldr	r0, [r7, #28]
 800774a:	f000 f897 	bl	800787c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800774e:	2301      	movs	r3, #1
 8007750:	61bb      	str	r3, [r7, #24]
 8007752:	e002      	b.n	800775a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007754:	f04f 33ff 	mov.w	r3, #4294967295
 8007758:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800775a:	69bb      	ldr	r3, [r7, #24]
	}
 800775c:	4618      	mov	r0, r3
 800775e:	3720      	adds	r7, #32
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	461a      	mov	r2, r3
 800777c:	21a5      	movs	r1, #165	; 0xa5
 800777e:	f002 fb82 	bl	8009e86 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800778c:	3b01      	subs	r3, #1
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	f023 0307 	bic.w	r3, r3, #7
 800779a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d009      	beq.n	80077ba <prvInitialiseNewTask+0x56>
 80077a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	e7fe      	b.n	80077b8 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077c0:	2300      	movs	r3, #0
 80077c2:	61fb      	str	r3, [r7, #28]
 80077c4:	e012      	b.n	80077ec <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	4413      	add	r3, r2
 80077cc:	7819      	ldrb	r1, [r3, #0]
 80077ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	4413      	add	r3, r2
 80077d4:	3334      	adds	r3, #52	; 0x34
 80077d6:	460a      	mov	r2, r1
 80077d8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	4413      	add	r3, r2
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d006      	beq.n	80077f4 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	3301      	adds	r3, #1
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b1f      	cmp	r3, #31
 80077f0:	d9e9      	bls.n	80077c6 <prvInitialiseNewTask+0x62>
 80077f2:	e000      	b.n	80077f6 <prvInitialiseNewTask+0x92>
		{
			break;
 80077f4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	2b37      	cmp	r3, #55	; 0x37
 8007802:	d901      	bls.n	8007808 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007804:	2337      	movs	r3, #55	; 0x37
 8007806:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800780c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007812:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->uxMutexesHeld = 0;
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	2200      	movs	r2, #0
 8007818:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	3304      	adds	r3, #4
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe ffb7 	bl	8006792 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	3318      	adds	r3, #24
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe ffb2 	bl	8006792 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007832:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007842:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	2200      	movs	r2, #0
 8007848:	669a      	str	r2, [r3, #104]	; 0x68
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	2200      	movs	r2, #0
 800784e:	66da      	str	r2, [r3, #108]	; 0x6c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	68f9      	ldr	r1, [r7, #12]
 800785c:	69b8      	ldr	r0, [r7, #24]
 800785e:	f001 fa6d 	bl	8008d3c <pxPortInitialiseStack>
 8007862:	4602      	mov	r2, r0
 8007864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007866:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007872:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007874:	bf00      	nop
 8007876:	3720      	adds	r7, #32
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007884:	f001 fb48 	bl	8008f18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007888:	4b2d      	ldr	r3, [pc, #180]	; (8007940 <prvAddNewTaskToReadyList+0xc4>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3301      	adds	r3, #1
 800788e:	4a2c      	ldr	r2, [pc, #176]	; (8007940 <prvAddNewTaskToReadyList+0xc4>)
 8007890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007892:	4b2c      	ldr	r3, [pc, #176]	; (8007944 <prvAddNewTaskToReadyList+0xc8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d109      	bne.n	80078ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800789a:	4a2a      	ldr	r2, [pc, #168]	; (8007944 <prvAddNewTaskToReadyList+0xc8>)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078a0:	4b27      	ldr	r3, [pc, #156]	; (8007940 <prvAddNewTaskToReadyList+0xc4>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d110      	bne.n	80078ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078a8:	f000 fc9c 	bl	80081e4 <prvInitialiseTaskLists>
 80078ac:	e00d      	b.n	80078ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078ae:	4b26      	ldr	r3, [pc, #152]	; (8007948 <prvAddNewTaskToReadyList+0xcc>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078b6:	4b23      	ldr	r3, [pc, #140]	; (8007944 <prvAddNewTaskToReadyList+0xc8>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d802      	bhi.n	80078ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078c4:	4a1f      	ldr	r2, [pc, #124]	; (8007944 <prvAddNewTaskToReadyList+0xc8>)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078ca:	4b20      	ldr	r3, [pc, #128]	; (800794c <prvAddNewTaskToReadyList+0xd0>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3301      	adds	r3, #1
 80078d0:	4a1e      	ldr	r2, [pc, #120]	; (800794c <prvAddNewTaskToReadyList+0xd0>)
 80078d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80078d4:	4b1d      	ldr	r3, [pc, #116]	; (800794c <prvAddNewTaskToReadyList+0xd0>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	659a      	str	r2, [r3, #88]	; 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e0:	4b1b      	ldr	r3, [pc, #108]	; (8007950 <prvAddNewTaskToReadyList+0xd4>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d903      	bls.n	80078f0 <prvAddNewTaskToReadyList+0x74>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	4a18      	ldr	r2, [pc, #96]	; (8007950 <prvAddNewTaskToReadyList+0xd4>)
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4a15      	ldr	r2, [pc, #84]	; (8007954 <prvAddNewTaskToReadyList+0xd8>)
 80078fe:	441a      	add	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3304      	adds	r3, #4
 8007904:	4619      	mov	r1, r3
 8007906:	4610      	mov	r0, r2
 8007908:	f7fe ff4f 	bl	80067aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800790c:	f001 fb32 	bl	8008f74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007910:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <prvAddNewTaskToReadyList+0xcc>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00e      	beq.n	8007936 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007918:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <prvAddNewTaskToReadyList+0xc8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007922:	429a      	cmp	r2, r3
 8007924:	d207      	bcs.n	8007936 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007926:	4b0c      	ldr	r3, [pc, #48]	; (8007958 <prvAddNewTaskToReadyList+0xdc>)
 8007928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007936:	bf00      	nop
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000d60 	.word	0x20000d60
 8007944:	2000088c 	.word	0x2000088c
 8007948:	20000d6c 	.word	0x20000d6c
 800794c:	20000d7c 	.word	0x20000d7c
 8007950:	20000d68 	.word	0x20000d68
 8007954:	20000890 	.word	0x20000890
 8007958:	e000ed04 	.word	0xe000ed04

0800795c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007964:	f001 fad8 	bl	8008f18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d102      	bne.n	8007974 <vTaskDelete+0x18>
 800796e:	4b2c      	ldr	r3, [pc, #176]	; (8007a20 <vTaskDelete+0xc4>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	e000      	b.n	8007976 <vTaskDelete+0x1a>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3304      	adds	r3, #4
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe ff6f 	bl	8006860 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3318      	adds	r3, #24
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe ff66 	bl	8006860 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007994:	4b23      	ldr	r3, [pc, #140]	; (8007a24 <vTaskDelete+0xc8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3301      	adds	r3, #1
 800799a:	4a22      	ldr	r2, [pc, #136]	; (8007a24 <vTaskDelete+0xc8>)
 800799c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800799e:	4b20      	ldr	r3, [pc, #128]	; (8007a20 <vTaskDelete+0xc4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d10b      	bne.n	80079c0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3304      	adds	r3, #4
 80079ac:	4619      	mov	r1, r3
 80079ae:	481e      	ldr	r0, [pc, #120]	; (8007a28 <vTaskDelete+0xcc>)
 80079b0:	f7fe fefb 	bl	80067aa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80079b4:	4b1d      	ldr	r3, [pc, #116]	; (8007a2c <vTaskDelete+0xd0>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3301      	adds	r3, #1
 80079ba:	4a1c      	ldr	r2, [pc, #112]	; (8007a2c <vTaskDelete+0xd0>)
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	e009      	b.n	80079d4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80079c0:	4b1b      	ldr	r3, [pc, #108]	; (8007a30 <vTaskDelete+0xd4>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	4a1a      	ldr	r2, [pc, #104]	; (8007a30 <vTaskDelete+0xd4>)
 80079c8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f000 fc76 	bl	80082bc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80079d0:	f000 fca2 	bl	8008318 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80079d4:	f001 face 	bl	8008f74 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80079d8:	4b16      	ldr	r3, [pc, #88]	; (8007a34 <vTaskDelete+0xd8>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01a      	beq.n	8007a16 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 80079e0:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <vTaskDelete+0xc4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d115      	bne.n	8007a16 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80079ea:	4b13      	ldr	r3, [pc, #76]	; (8007a38 <vTaskDelete+0xdc>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d009      	beq.n	8007a06 <vTaskDelete+0xaa>
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	60bb      	str	r3, [r7, #8]
 8007a04:	e7fe      	b.n	8007a04 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8007a06:	4b0d      	ldr	r3, [pc, #52]	; (8007a3c <vTaskDelete+0xe0>)
 8007a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	2000088c 	.word	0x2000088c
 8007a24:	20000d7c 	.word	0x20000d7c
 8007a28:	20000d34 	.word	0x20000d34
 8007a2c:	20000d48 	.word	0x20000d48
 8007a30:	20000d60 	.word	0x20000d60
 8007a34:	20000d6c 	.word	0x20000d6c
 8007a38:	20000d88 	.word	0x20000d88
 8007a3c:	e000ed04 	.word	0xe000ed04

08007a40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d016      	beq.n	8007a80 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a52:	4b13      	ldr	r3, [pc, #76]	; (8007aa0 <vTaskDelay+0x60>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d009      	beq.n	8007a6e <vTaskDelay+0x2e>
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	60bb      	str	r3, [r7, #8]
 8007a6c:	e7fe      	b.n	8007a6c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007a6e:	f000 f881 	bl	8007b74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a72:	2100      	movs	r1, #0
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fe03 	bl	8008680 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a7a:	f000 f889 	bl	8007b90 <xTaskResumeAll>
 8007a7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d107      	bne.n	8007a96 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007a86:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <vTaskDelay+0x64>)
 8007a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000d88 	.word	0x20000d88
 8007aa4:	e000ed04 	.word	0xe000ed04

08007aa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08a      	sub	sp, #40	; 0x28
 8007aac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ab6:	463a      	mov	r2, r7
 8007ab8:	1d39      	adds	r1, r7, #4
 8007aba:	f107 0308 	add.w	r3, r7, #8
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe fe16 	bl	80066f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	9202      	str	r2, [sp, #8]
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	460a      	mov	r2, r1
 8007ad6:	4921      	ldr	r1, [pc, #132]	; (8007b5c <vTaskStartScheduler+0xb4>)
 8007ad8:	4821      	ldr	r0, [pc, #132]	; (8007b60 <vTaskStartScheduler+0xb8>)
 8007ada:	f7ff fda5 	bl	8007628 <xTaskCreateStatic>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	4b20      	ldr	r3, [pc, #128]	; (8007b64 <vTaskStartScheduler+0xbc>)
 8007ae2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ae4:	4b1f      	ldr	r3, [pc, #124]	; (8007b64 <vTaskStartScheduler+0xbc>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d002      	beq.n	8007af2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007aec:	2301      	movs	r3, #1
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	e001      	b.n	8007af6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007af2:	2300      	movs	r3, #0
 8007af4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d102      	bne.n	8007b02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007afc:	f000 fe14 	bl	8008728 <xTimerCreateTimerTask>
 8007b00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d117      	bne.n	8007b38 <vTaskStartScheduler+0x90>
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b1a:	4b13      	ldr	r3, [pc, #76]	; (8007b68 <vTaskStartScheduler+0xc0>)
 8007b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b22:	4b12      	ldr	r3, [pc, #72]	; (8007b6c <vTaskStartScheduler+0xc4>)
 8007b24:	2201      	movs	r2, #1
 8007b26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007b28:	4b11      	ldr	r3, [pc, #68]	; (8007b70 <vTaskStartScheduler+0xc8>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007b2e:	f7f8 fc04 	bl	800033a <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b32:	f001 f981 	bl	8008e38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b36:	e00d      	b.n	8007b54 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3e:	d109      	bne.n	8007b54 <vTaskStartScheduler+0xac>
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	e7fe      	b.n	8007b52 <vTaskStartScheduler+0xaa>
}
 8007b54:	bf00      	nop
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	08009fd4 	.word	0x08009fd4
 8007b60:	080081b5 	.word	0x080081b5
 8007b64:	20000d84 	.word	0x20000d84
 8007b68:	20000d80 	.word	0x20000d80
 8007b6c:	20000d6c 	.word	0x20000d6c
 8007b70:	20000d64 	.word	0x20000d64

08007b74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007b78:	4b04      	ldr	r3, [pc, #16]	; (8007b8c <vTaskSuspendAll+0x18>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	4a03      	ldr	r2, [pc, #12]	; (8007b8c <vTaskSuspendAll+0x18>)
 8007b80:	6013      	str	r3, [r2, #0]
}
 8007b82:	bf00      	nop
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20000d88 	.word	0x20000d88

08007b90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b9e:	4b41      	ldr	r3, [pc, #260]	; (8007ca4 <xTaskResumeAll+0x114>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d109      	bne.n	8007bba <xTaskResumeAll+0x2a>
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	e7fe      	b.n	8007bb8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bba:	f001 f9ad 	bl	8008f18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bbe:	4b39      	ldr	r3, [pc, #228]	; (8007ca4 <xTaskResumeAll+0x114>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	4a37      	ldr	r2, [pc, #220]	; (8007ca4 <xTaskResumeAll+0x114>)
 8007bc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bc8:	4b36      	ldr	r3, [pc, #216]	; (8007ca4 <xTaskResumeAll+0x114>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d162      	bne.n	8007c96 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bd0:	4b35      	ldr	r3, [pc, #212]	; (8007ca8 <xTaskResumeAll+0x118>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d05e      	beq.n	8007c96 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bd8:	e02f      	b.n	8007c3a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007bda:	4b34      	ldr	r3, [pc, #208]	; (8007cac <xTaskResumeAll+0x11c>)
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3318      	adds	r3, #24
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe fe3a 	bl	8006860 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	3304      	adds	r3, #4
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fe fe35 	bl	8006860 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfa:	4b2d      	ldr	r3, [pc, #180]	; (8007cb0 <xTaskResumeAll+0x120>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d903      	bls.n	8007c0a <xTaskResumeAll+0x7a>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	4a2a      	ldr	r2, [pc, #168]	; (8007cb0 <xTaskResumeAll+0x120>)
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0e:	4613      	mov	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4a27      	ldr	r2, [pc, #156]	; (8007cb4 <xTaskResumeAll+0x124>)
 8007c18:	441a      	add	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	4619      	mov	r1, r3
 8007c20:	4610      	mov	r0, r2
 8007c22:	f7fe fdc2 	bl	80067aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2a:	4b23      	ldr	r3, [pc, #140]	; (8007cb8 <xTaskResumeAll+0x128>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d302      	bcc.n	8007c3a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007c34:	4b21      	ldr	r3, [pc, #132]	; (8007cbc <xTaskResumeAll+0x12c>)
 8007c36:	2201      	movs	r2, #1
 8007c38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c3a:	4b1c      	ldr	r3, [pc, #112]	; (8007cac <xTaskResumeAll+0x11c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1cb      	bne.n	8007bda <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c48:	f000 fb66 	bl	8008318 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007c4c:	4b1c      	ldr	r3, [pc, #112]	; (8007cc0 <xTaskResumeAll+0x130>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d010      	beq.n	8007c7a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c58:	f000 f844 	bl	8007ce4 <xTaskIncrementTick>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007c62:	4b16      	ldr	r3, [pc, #88]	; (8007cbc <xTaskResumeAll+0x12c>)
 8007c64:	2201      	movs	r2, #1
 8007c66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1f1      	bne.n	8007c58 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007c74:	4b12      	ldr	r3, [pc, #72]	; (8007cc0 <xTaskResumeAll+0x130>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c7a:	4b10      	ldr	r3, [pc, #64]	; (8007cbc <xTaskResumeAll+0x12c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d009      	beq.n	8007c96 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c82:	2301      	movs	r3, #1
 8007c84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c86:	4b0f      	ldr	r3, [pc, #60]	; (8007cc4 <xTaskResumeAll+0x134>)
 8007c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c96:	f001 f96d 	bl	8008f74 <vPortExitCritical>

	return xAlreadyYielded;
 8007c9a:	68bb      	ldr	r3, [r7, #8]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20000d88 	.word	0x20000d88
 8007ca8:	20000d60 	.word	0x20000d60
 8007cac:	20000d20 	.word	0x20000d20
 8007cb0:	20000d68 	.word	0x20000d68
 8007cb4:	20000890 	.word	0x20000890
 8007cb8:	2000088c 	.word	0x2000088c
 8007cbc:	20000d74 	.word	0x20000d74
 8007cc0:	20000d70 	.word	0x20000d70
 8007cc4:	e000ed04 	.word	0xe000ed04

08007cc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007cce:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <xTaskGetTickCount+0x18>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007cd4:	687b      	ldr	r3, [r7, #4]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr
 8007ce0:	20000d64 	.word	0x20000d64

08007ce4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007cea:	2300      	movs	r3, #0
 8007cec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cee:	4b51      	ldr	r3, [pc, #324]	; (8007e34 <xTaskIncrementTick+0x150>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f040 808d 	bne.w	8007e12 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007cf8:	4b4f      	ldr	r3, [pc, #316]	; (8007e38 <xTaskIncrementTick+0x154>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d00:	4a4d      	ldr	r2, [pc, #308]	; (8007e38 <xTaskIncrementTick+0x154>)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d11f      	bne.n	8007d4c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d0c:	4b4b      	ldr	r3, [pc, #300]	; (8007e3c <xTaskIncrementTick+0x158>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d009      	beq.n	8007d2a <xTaskIncrementTick+0x46>
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	603b      	str	r3, [r7, #0]
 8007d28:	e7fe      	b.n	8007d28 <xTaskIncrementTick+0x44>
 8007d2a:	4b44      	ldr	r3, [pc, #272]	; (8007e3c <xTaskIncrementTick+0x158>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	4b43      	ldr	r3, [pc, #268]	; (8007e40 <xTaskIncrementTick+0x15c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a41      	ldr	r2, [pc, #260]	; (8007e3c <xTaskIncrementTick+0x158>)
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	4a41      	ldr	r2, [pc, #260]	; (8007e40 <xTaskIncrementTick+0x15c>)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	4b41      	ldr	r3, [pc, #260]	; (8007e44 <xTaskIncrementTick+0x160>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3301      	adds	r3, #1
 8007d44:	4a3f      	ldr	r2, [pc, #252]	; (8007e44 <xTaskIncrementTick+0x160>)
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	f000 fae6 	bl	8008318 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d4c:	4b3e      	ldr	r3, [pc, #248]	; (8007e48 <xTaskIncrementTick+0x164>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d34e      	bcc.n	8007df4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d56:	4b39      	ldr	r3, [pc, #228]	; (8007e3c <xTaskIncrementTick+0x158>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <xTaskIncrementTick+0x80>
 8007d60:	2301      	movs	r3, #1
 8007d62:	e000      	b.n	8007d66 <xTaskIncrementTick+0x82>
 8007d64:	2300      	movs	r3, #0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d004      	beq.n	8007d74 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d6a:	4b37      	ldr	r3, [pc, #220]	; (8007e48 <xTaskIncrementTick+0x164>)
 8007d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d70:	601a      	str	r2, [r3, #0]
					break;
 8007d72:	e03f      	b.n	8007df4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d74:	4b31      	ldr	r3, [pc, #196]	; (8007e3c <xTaskIncrementTick+0x158>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d203      	bcs.n	8007d94 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d8c:	4a2e      	ldr	r2, [pc, #184]	; (8007e48 <xTaskIncrementTick+0x164>)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6013      	str	r3, [r2, #0]
						break;
 8007d92:	e02f      	b.n	8007df4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fe fd61 	bl	8006860 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d004      	beq.n	8007db0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	3318      	adds	r3, #24
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fd58 	bl	8006860 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db4:	4b25      	ldr	r3, [pc, #148]	; (8007e4c <xTaskIncrementTick+0x168>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d903      	bls.n	8007dc4 <xTaskIncrementTick+0xe0>
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	4a22      	ldr	r2, [pc, #136]	; (8007e4c <xTaskIncrementTick+0x168>)
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4a1f      	ldr	r2, [pc, #124]	; (8007e50 <xTaskIncrementTick+0x16c>)
 8007dd2:	441a      	add	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	f7fe fce5 	bl	80067aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de4:	4b1b      	ldr	r3, [pc, #108]	; (8007e54 <xTaskIncrementTick+0x170>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d3b3      	bcc.n	8007d56 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007dee:	2301      	movs	r3, #1
 8007df0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007df2:	e7b0      	b.n	8007d56 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007df4:	4b17      	ldr	r3, [pc, #92]	; (8007e54 <xTaskIncrementTick+0x170>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfa:	4915      	ldr	r1, [pc, #84]	; (8007e50 <xTaskIncrementTick+0x16c>)
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	440b      	add	r3, r1
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d907      	bls.n	8007e1c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	e004      	b.n	8007e1c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e12:	4b11      	ldr	r3, [pc, #68]	; (8007e58 <xTaskIncrementTick+0x174>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3301      	adds	r3, #1
 8007e18:	4a0f      	ldr	r2, [pc, #60]	; (8007e58 <xTaskIncrementTick+0x174>)
 8007e1a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007e1c:	4b0f      	ldr	r3, [pc, #60]	; (8007e5c <xTaskIncrementTick+0x178>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007e24:	2301      	movs	r3, #1
 8007e26:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e28:	697b      	ldr	r3, [r7, #20]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20000d88 	.word	0x20000d88
 8007e38:	20000d64 	.word	0x20000d64
 8007e3c:	20000d18 	.word	0x20000d18
 8007e40:	20000d1c 	.word	0x20000d1c
 8007e44:	20000d78 	.word	0x20000d78
 8007e48:	20000d80 	.word	0x20000d80
 8007e4c:	20000d68 	.word	0x20000d68
 8007e50:	20000890 	.word	0x20000890
 8007e54:	2000088c 	.word	0x2000088c
 8007e58:	20000d70 	.word	0x20000d70
 8007e5c:	20000d74 	.word	0x20000d74

08007e60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e66:	4b33      	ldr	r3, [pc, #204]	; (8007f34 <vTaskSwitchContext+0xd4>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e6e:	4b32      	ldr	r3, [pc, #200]	; (8007f38 <vTaskSwitchContext+0xd8>)
 8007e70:	2201      	movs	r2, #1
 8007e72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e74:	e059      	b.n	8007f2a <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8007e76:	4b30      	ldr	r3, [pc, #192]	; (8007f38 <vTaskSwitchContext+0xd8>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007e7c:	f7f8 fa63 	bl	8000346 <getRunTimeCounterValue>
 8007e80:	4602      	mov	r2, r0
 8007e82:	4b2e      	ldr	r3, [pc, #184]	; (8007f3c <vTaskSwitchContext+0xdc>)
 8007e84:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007e86:	4b2d      	ldr	r3, [pc, #180]	; (8007f3c <vTaskSwitchContext+0xdc>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	4b2d      	ldr	r3, [pc, #180]	; (8007f40 <vTaskSwitchContext+0xe0>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d909      	bls.n	8007ea6 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007e92:	4b2c      	ldr	r3, [pc, #176]	; (8007f44 <vTaskSwitchContext+0xe4>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8007e98:	4a28      	ldr	r2, [pc, #160]	; (8007f3c <vTaskSwitchContext+0xdc>)
 8007e9a:	6810      	ldr	r0, [r2, #0]
 8007e9c:	4a28      	ldr	r2, [pc, #160]	; (8007f40 <vTaskSwitchContext+0xe0>)
 8007e9e:	6812      	ldr	r2, [r2, #0]
 8007ea0:	1a82      	subs	r2, r0, r2
 8007ea2:	440a      	add	r2, r1
 8007ea4:	669a      	str	r2, [r3, #104]	; 0x68
				ulTaskSwitchedInTime = ulTotalRunTime;
 8007ea6:	4b25      	ldr	r3, [pc, #148]	; (8007f3c <vTaskSwitchContext+0xdc>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a25      	ldr	r2, [pc, #148]	; (8007f40 <vTaskSwitchContext+0xe0>)
 8007eac:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007eae:	4b26      	ldr	r3, [pc, #152]	; (8007f48 <vTaskSwitchContext+0xe8>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	e00f      	b.n	8007ed6 <vTaskSwitchContext+0x76>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d109      	bne.n	8007ed0 <vTaskSwitchContext+0x70>
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	607b      	str	r3, [r7, #4]
 8007ece:	e7fe      	b.n	8007ece <vTaskSwitchContext+0x6e>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	491d      	ldr	r1, [pc, #116]	; (8007f4c <vTaskSwitchContext+0xec>)
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	4613      	mov	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0e5      	beq.n	8007eb6 <vTaskSwitchContext+0x56>
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	4613      	mov	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4a15      	ldr	r2, [pc, #84]	; (8007f4c <vTaskSwitchContext+0xec>)
 8007ef6:	4413      	add	r3, r2
 8007ef8:	60bb      	str	r3, [r7, #8]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	605a      	str	r2, [r3, #4]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d104      	bne.n	8007f1a <vTaskSwitchContext+0xba>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	605a      	str	r2, [r3, #4]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	4a08      	ldr	r2, [pc, #32]	; (8007f44 <vTaskSwitchContext+0xe4>)
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	4a08      	ldr	r2, [pc, #32]	; (8007f48 <vTaskSwitchContext+0xe8>)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6013      	str	r3, [r2, #0]
}
 8007f2a:	bf00      	nop
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20000d88 	.word	0x20000d88
 8007f38:	20000d74 	.word	0x20000d74
 8007f3c:	20000d90 	.word	0x20000d90
 8007f40:	20000d8c 	.word	0x20000d8c
 8007f44:	2000088c 	.word	0x2000088c
 8007f48:	20000d68 	.word	0x20000d68
 8007f4c:	20000890 	.word	0x20000890

08007f50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d109      	bne.n	8007f74 <vTaskPlaceOnEventList+0x24>
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	60fb      	str	r3, [r7, #12]
 8007f72:	e7fe      	b.n	8007f72 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f74:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <vTaskPlaceOnEventList+0x44>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3318      	adds	r3, #24
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7fe fc37 	bl	80067f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f82:	2101      	movs	r1, #1
 8007f84:	6838      	ldr	r0, [r7, #0]
 8007f86:	f000 fb7b 	bl	8008680 <prvAddCurrentTaskToDelayedList>
}
 8007f8a:	bf00      	nop
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	2000088c 	.word	0x2000088c

08007f98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d109      	bne.n	8007fbe <vTaskPlaceOnEventListRestricted+0x26>
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	617b      	str	r3, [r7, #20]
 8007fbc:	e7fe      	b.n	8007fbc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fbe:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <vTaskPlaceOnEventListRestricted+0x50>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3318      	adds	r3, #24
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f7fe fbef 	bl	80067aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d002      	beq.n	8007fd8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	68b8      	ldr	r0, [r7, #8]
 8007fdc:	f000 fb50 	bl	8008680 <prvAddCurrentTaskToDelayedList>
	}
 8007fe0:	bf00      	nop
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	2000088c 	.word	0x2000088c

08007fec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d109      	bne.n	8008016 <xTaskRemoveFromEventList+0x2a>
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e7fe      	b.n	8008014 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	3318      	adds	r3, #24
 800801a:	4618      	mov	r0, r3
 800801c:	f7fe fc20 	bl	8006860 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008020:	4b1d      	ldr	r3, [pc, #116]	; (8008098 <xTaskRemoveFromEventList+0xac>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d11d      	bne.n	8008064 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	3304      	adds	r3, #4
 800802c:	4618      	mov	r0, r3
 800802e:	f7fe fc17 	bl	8006860 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	4b19      	ldr	r3, [pc, #100]	; (800809c <xTaskRemoveFromEventList+0xb0>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	429a      	cmp	r2, r3
 800803c:	d903      	bls.n	8008046 <xTaskRemoveFromEventList+0x5a>
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	4a16      	ldr	r2, [pc, #88]	; (800809c <xTaskRemoveFromEventList+0xb0>)
 8008044:	6013      	str	r3, [r2, #0]
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804a:	4613      	mov	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4a13      	ldr	r2, [pc, #76]	; (80080a0 <xTaskRemoveFromEventList+0xb4>)
 8008054:	441a      	add	r2, r3
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	3304      	adds	r3, #4
 800805a:	4619      	mov	r1, r3
 800805c:	4610      	mov	r0, r2
 800805e:	f7fe fba4 	bl	80067aa <vListInsertEnd>
 8008062:	e005      	b.n	8008070 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	3318      	adds	r3, #24
 8008068:	4619      	mov	r1, r3
 800806a:	480e      	ldr	r0, [pc, #56]	; (80080a4 <xTaskRemoveFromEventList+0xb8>)
 800806c:	f7fe fb9d 	bl	80067aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008074:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <xTaskRemoveFromEventList+0xbc>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	429a      	cmp	r2, r3
 800807c:	d905      	bls.n	800808a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800807e:	2301      	movs	r3, #1
 8008080:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008082:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <xTaskRemoveFromEventList+0xc0>)
 8008084:	2201      	movs	r2, #1
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	e001      	b.n	800808e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800808a:	2300      	movs	r3, #0
 800808c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800808e:	697b      	ldr	r3, [r7, #20]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000d88 	.word	0x20000d88
 800809c:	20000d68 	.word	0x20000d68
 80080a0:	20000890 	.word	0x20000890
 80080a4:	20000d20 	.word	0x20000d20
 80080a8:	2000088c 	.word	0x2000088c
 80080ac:	20000d74 	.word	0x20000d74

080080b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080b8:	4b06      	ldr	r3, [pc, #24]	; (80080d4 <vTaskInternalSetTimeOutState+0x24>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080c0:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <vTaskInternalSetTimeOutState+0x28>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	605a      	str	r2, [r3, #4]
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20000d78 	.word	0x20000d78
 80080d8:	20000d64 	.word	0x20000d64

080080dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d109      	bne.n	8008100 <xTaskCheckForTimeOut+0x24>
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	613b      	str	r3, [r7, #16]
 80080fe:	e7fe      	b.n	80080fe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d109      	bne.n	800811a <xTaskCheckForTimeOut+0x3e>
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	e7fe      	b.n	8008118 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800811a:	f000 fefd 	bl	8008f18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800811e:	4b1d      	ldr	r3, [pc, #116]	; (8008194 <xTaskCheckForTimeOut+0xb8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008136:	d102      	bne.n	800813e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008138:	2300      	movs	r3, #0
 800813a:	61fb      	str	r3, [r7, #28]
 800813c:	e023      	b.n	8008186 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b15      	ldr	r3, [pc, #84]	; (8008198 <xTaskCheckForTimeOut+0xbc>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d007      	beq.n	800815a <xTaskCheckForTimeOut+0x7e>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	429a      	cmp	r2, r3
 8008152:	d302      	bcc.n	800815a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008154:	2301      	movs	r3, #1
 8008156:	61fb      	str	r3, [r7, #28]
 8008158:	e015      	b.n	8008186 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	429a      	cmp	r2, r3
 8008162:	d20b      	bcs.n	800817c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	1ad2      	subs	r2, r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff ff9d 	bl	80080b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008176:	2300      	movs	r3, #0
 8008178:	61fb      	str	r3, [r7, #28]
 800817a:	e004      	b.n	8008186 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008182:	2301      	movs	r3, #1
 8008184:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008186:	f000 fef5 	bl	8008f74 <vPortExitCritical>

	return xReturn;
 800818a:	69fb      	ldr	r3, [r7, #28]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3720      	adds	r7, #32
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	20000d64 	.word	0x20000d64
 8008198:	20000d78 	.word	0x20000d78

0800819c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081a0:	4b03      	ldr	r3, [pc, #12]	; (80081b0 <vTaskMissedYield+0x14>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	601a      	str	r2, [r3, #0]
}
 80081a6:	bf00      	nop
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bc80      	pop	{r7}
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	20000d74 	.word	0x20000d74

080081b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081bc:	f000 f852 	bl	8008264 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081c0:	4b06      	ldr	r3, [pc, #24]	; (80081dc <prvIdleTask+0x28>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d9f9      	bls.n	80081bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <prvIdleTask+0x2c>)
 80081ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081d8:	e7f0      	b.n	80081bc <prvIdleTask+0x8>
 80081da:	bf00      	nop
 80081dc:	20000890 	.word	0x20000890
 80081e0:	e000ed04 	.word	0xe000ed04

080081e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081ea:	2300      	movs	r3, #0
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	e00c      	b.n	800820a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	4613      	mov	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4a12      	ldr	r2, [pc, #72]	; (8008244 <prvInitialiseTaskLists+0x60>)
 80081fc:	4413      	add	r3, r2
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe faa8 	bl	8006754 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3301      	adds	r3, #1
 8008208:	607b      	str	r3, [r7, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b37      	cmp	r3, #55	; 0x37
 800820e:	d9ef      	bls.n	80081f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008210:	480d      	ldr	r0, [pc, #52]	; (8008248 <prvInitialiseTaskLists+0x64>)
 8008212:	f7fe fa9f 	bl	8006754 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008216:	480d      	ldr	r0, [pc, #52]	; (800824c <prvInitialiseTaskLists+0x68>)
 8008218:	f7fe fa9c 	bl	8006754 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800821c:	480c      	ldr	r0, [pc, #48]	; (8008250 <prvInitialiseTaskLists+0x6c>)
 800821e:	f7fe fa99 	bl	8006754 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008222:	480c      	ldr	r0, [pc, #48]	; (8008254 <prvInitialiseTaskLists+0x70>)
 8008224:	f7fe fa96 	bl	8006754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008228:	480b      	ldr	r0, [pc, #44]	; (8008258 <prvInitialiseTaskLists+0x74>)
 800822a:	f7fe fa93 	bl	8006754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800822e:	4b0b      	ldr	r3, [pc, #44]	; (800825c <prvInitialiseTaskLists+0x78>)
 8008230:	4a05      	ldr	r2, [pc, #20]	; (8008248 <prvInitialiseTaskLists+0x64>)
 8008232:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008234:	4b0a      	ldr	r3, [pc, #40]	; (8008260 <prvInitialiseTaskLists+0x7c>)
 8008236:	4a05      	ldr	r2, [pc, #20]	; (800824c <prvInitialiseTaskLists+0x68>)
 8008238:	601a      	str	r2, [r3, #0]
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000890 	.word	0x20000890
 8008248:	20000cf0 	.word	0x20000cf0
 800824c:	20000d04 	.word	0x20000d04
 8008250:	20000d20 	.word	0x20000d20
 8008254:	20000d34 	.word	0x20000d34
 8008258:	20000d4c 	.word	0x20000d4c
 800825c:	20000d18 	.word	0x20000d18
 8008260:	20000d1c 	.word	0x20000d1c

08008264 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800826a:	e019      	b.n	80082a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800826c:	f000 fe54 	bl	8008f18 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008270:	4b0f      	ldr	r3, [pc, #60]	; (80082b0 <prvCheckTasksWaitingTermination+0x4c>)
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3304      	adds	r3, #4
 800827c:	4618      	mov	r0, r3
 800827e:	f7fe faef 	bl	8006860 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008282:	4b0c      	ldr	r3, [pc, #48]	; (80082b4 <prvCheckTasksWaitingTermination+0x50>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3b01      	subs	r3, #1
 8008288:	4a0a      	ldr	r2, [pc, #40]	; (80082b4 <prvCheckTasksWaitingTermination+0x50>)
 800828a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800828c:	4b0a      	ldr	r3, [pc, #40]	; (80082b8 <prvCheckTasksWaitingTermination+0x54>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3b01      	subs	r3, #1
 8008292:	4a09      	ldr	r2, [pc, #36]	; (80082b8 <prvCheckTasksWaitingTermination+0x54>)
 8008294:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008296:	f000 fe6d 	bl	8008f74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f80e 	bl	80082bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082a0:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <prvCheckTasksWaitingTermination+0x54>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e1      	bne.n	800826c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20000d34 	.word	0x20000d34
 80082b4:	20000d60 	.word	0x20000d60
 80082b8:	20000d48 	.word	0x20000d48

080082bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d108      	bne.n	80082e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 ffd8 	bl	8009288 <vPortFree>
				vPortFree( pxTCB );
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 ffd5 	bl	8009288 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082de:	e017      	b.n	8008310 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d103      	bne.n	80082f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 ffcc 	bl	8009288 <vPortFree>
	}
 80082f0:	e00e      	b.n	8008310 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d009      	beq.n	8008310 <prvDeleteTCB+0x54>
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	e7fe      	b.n	800830e <prvDeleteTCB+0x52>
	}
 8008310:	bf00      	nop
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800831e:	4b0e      	ldr	r3, [pc, #56]	; (8008358 <prvResetNextTaskUnblockTime+0x40>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <prvResetNextTaskUnblockTime+0x14>
 8008328:	2301      	movs	r3, #1
 800832a:	e000      	b.n	800832e <prvResetNextTaskUnblockTime+0x16>
 800832c:	2300      	movs	r3, #0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d004      	beq.n	800833c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008332:	4b0a      	ldr	r3, [pc, #40]	; (800835c <prvResetNextTaskUnblockTime+0x44>)
 8008334:	f04f 32ff 	mov.w	r2, #4294967295
 8008338:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800833a:	e008      	b.n	800834e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800833c:	4b06      	ldr	r3, [pc, #24]	; (8008358 <prvResetNextTaskUnblockTime+0x40>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	4a04      	ldr	r2, [pc, #16]	; (800835c <prvResetNextTaskUnblockTime+0x44>)
 800834c:	6013      	str	r3, [r2, #0]
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	bc80      	pop	{r7}
 8008356:	4770      	bx	lr
 8008358:	20000d18 	.word	0x20000d18
 800835c:	20000d80 	.word	0x20000d80

08008360 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008366:	4b0b      	ldr	r3, [pc, #44]	; (8008394 <xTaskGetSchedulerState+0x34>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d102      	bne.n	8008374 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800836e:	2301      	movs	r3, #1
 8008370:	607b      	str	r3, [r7, #4]
 8008372:	e008      	b.n	8008386 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008374:	4b08      	ldr	r3, [pc, #32]	; (8008398 <xTaskGetSchedulerState+0x38>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d102      	bne.n	8008382 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800837c:	2302      	movs	r3, #2
 800837e:	607b      	str	r3, [r7, #4]
 8008380:	e001      	b.n	8008386 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008382:	2300      	movs	r3, #0
 8008384:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008386:	687b      	ldr	r3, [r7, #4]
	}
 8008388:	4618      	mov	r0, r3
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	bc80      	pop	{r7}
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	20000d6c 	.word	0x20000d6c
 8008398:	20000d88 	.word	0x20000d88

0800839c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80083a8:	2300      	movs	r3, #0
 80083aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d056      	beq.n	8008460 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b6:	4b2d      	ldr	r3, [pc, #180]	; (800846c <xTaskPriorityInherit+0xd0>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	429a      	cmp	r2, r3
 80083be:	d246      	bcs.n	800844e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	db06      	blt.n	80083d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083c8:	4b28      	ldr	r3, [pc, #160]	; (800846c <xTaskPriorityInherit+0xd0>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	6959      	ldr	r1, [r3, #20]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4a22      	ldr	r2, [pc, #136]	; (8008470 <xTaskPriorityInherit+0xd4>)
 80083e8:	4413      	add	r3, r2
 80083ea:	4299      	cmp	r1, r3
 80083ec:	d101      	bne.n	80083f2 <xTaskPriorityInherit+0x56>
 80083ee:	2301      	movs	r3, #1
 80083f0:	e000      	b.n	80083f4 <xTaskPriorityInherit+0x58>
 80083f2:	2300      	movs	r3, #0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d022      	beq.n	800843e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe fa2f 	bl	8006860 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008402:	4b1a      	ldr	r3, [pc, #104]	; (800846c <xTaskPriorityInherit+0xd0>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008410:	4b18      	ldr	r3, [pc, #96]	; (8008474 <xTaskPriorityInherit+0xd8>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	429a      	cmp	r2, r3
 8008416:	d903      	bls.n	8008420 <xTaskPriorityInherit+0x84>
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	4a15      	ldr	r2, [pc, #84]	; (8008474 <xTaskPriorityInherit+0xd8>)
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4a10      	ldr	r2, [pc, #64]	; (8008470 <xTaskPriorityInherit+0xd4>)
 800842e:	441a      	add	r2, r3
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	3304      	adds	r3, #4
 8008434:	4619      	mov	r1, r3
 8008436:	4610      	mov	r0, r2
 8008438:	f7fe f9b7 	bl	80067aa <vListInsertEnd>
 800843c:	e004      	b.n	8008448 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800843e:	4b0b      	ldr	r3, [pc, #44]	; (800846c <xTaskPriorityInherit+0xd0>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008448:	2301      	movs	r3, #1
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	e008      	b.n	8008460 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008452:	4b06      	ldr	r3, [pc, #24]	; (800846c <xTaskPriorityInherit+0xd0>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	429a      	cmp	r2, r3
 800845a:	d201      	bcs.n	8008460 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800845c:	2301      	movs	r3, #1
 800845e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008460:	68fb      	ldr	r3, [r7, #12]
	}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	2000088c 	.word	0x2000088c
 8008470:	20000890 	.word	0x20000890
 8008474:	20000d68 	.word	0x20000d68

08008478 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008484:	2300      	movs	r3, #0
 8008486:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d054      	beq.n	8008538 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800848e:	4b2d      	ldr	r3, [pc, #180]	; (8008544 <xTaskPriorityDisinherit+0xcc>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	429a      	cmp	r2, r3
 8008496:	d009      	beq.n	80084ac <xTaskPriorityDisinherit+0x34>
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	60fb      	str	r3, [r7, #12]
 80084aa:	e7fe      	b.n	80084aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d109      	bne.n	80084c8 <xTaskPriorityDisinherit+0x50>
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	60bb      	str	r3, [r7, #8]
 80084c6:	e7fe      	b.n	80084c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084cc:	1e5a      	subs	r2, r3, #1
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	665a      	str	r2, [r3, #100]	; 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084da:	429a      	cmp	r2, r3
 80084dc:	d02c      	beq.n	8008538 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d128      	bne.n	8008538 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	3304      	adds	r3, #4
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe f9b8 	bl	8006860 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008508:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <xTaskPriorityDisinherit+0xd0>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	429a      	cmp	r2, r3
 800850e:	d903      	bls.n	8008518 <xTaskPriorityDisinherit+0xa0>
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008514:	4a0c      	ldr	r2, [pc, #48]	; (8008548 <xTaskPriorityDisinherit+0xd0>)
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851c:	4613      	mov	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4a09      	ldr	r2, [pc, #36]	; (800854c <xTaskPriorityDisinherit+0xd4>)
 8008526:	441a      	add	r2, r3
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	3304      	adds	r3, #4
 800852c:	4619      	mov	r1, r3
 800852e:	4610      	mov	r0, r2
 8008530:	f7fe f93b 	bl	80067aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008534:	2301      	movs	r3, #1
 8008536:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008538:	697b      	ldr	r3, [r7, #20]
	}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	2000088c 	.word	0x2000088c
 8008548:	20000d68 	.word	0x20000d68
 800854c:	20000890 	.word	0x20000890

08008550 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800855e:	2301      	movs	r3, #1
 8008560:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d06d      	beq.n	8008644 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800856c:	2b00      	cmp	r3, #0
 800856e:	d109      	bne.n	8008584 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	e7fe      	b.n	8008582 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	429a      	cmp	r2, r3
 800858c:	d902      	bls.n	8008594 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	e002      	b.n	800859a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008598:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d04f      	beq.n	8008644 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d14a      	bne.n	8008644 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80085ae:	4b27      	ldr	r3, [pc, #156]	; (800864c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d109      	bne.n	80085cc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	60bb      	str	r3, [r7, #8]
 80085ca:	e7fe      	b.n	80085ca <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	69fa      	ldr	r2, [r7, #28]
 80085d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	db04      	blt.n	80085ea <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	6959      	ldr	r1, [r3, #20]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	4613      	mov	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4a15      	ldr	r2, [pc, #84]	; (8008650 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80085fa:	4413      	add	r3, r2
 80085fc:	4299      	cmp	r1, r3
 80085fe:	d101      	bne.n	8008604 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8008600:	2301      	movs	r3, #1
 8008602:	e000      	b.n	8008606 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8008604:	2300      	movs	r3, #0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01c      	beq.n	8008644 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	3304      	adds	r3, #4
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe f926 	bl	8006860 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008618:	4b0e      	ldr	r3, [pc, #56]	; (8008654 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d903      	bls.n	8008628 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	4a0b      	ldr	r2, [pc, #44]	; (8008654 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4a06      	ldr	r2, [pc, #24]	; (8008650 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008636:	441a      	add	r2, r3
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	3304      	adds	r3, #4
 800863c:	4619      	mov	r1, r3
 800863e:	4610      	mov	r0, r2
 8008640:	f7fe f8b3 	bl	80067aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008644:	bf00      	nop
 8008646:	3720      	adds	r7, #32
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	2000088c 	.word	0x2000088c
 8008650:	20000890 	.word	0x20000890
 8008654:	20000d68 	.word	0x20000d68

08008658 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800865c:	4b07      	ldr	r3, [pc, #28]	; (800867c <pvTaskIncrementMutexHeldCount+0x24>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d004      	beq.n	800866e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008664:	4b05      	ldr	r3, [pc, #20]	; (800867c <pvTaskIncrementMutexHeldCount+0x24>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800866a:	3201      	adds	r2, #1
 800866c:	665a      	str	r2, [r3, #100]	; 0x64
		}

		return pxCurrentTCB;
 800866e:	4b03      	ldr	r3, [pc, #12]	; (800867c <pvTaskIncrementMutexHeldCount+0x24>)
 8008670:	681b      	ldr	r3, [r3, #0]
	}
 8008672:	4618      	mov	r0, r3
 8008674:	46bd      	mov	sp, r7
 8008676:	bc80      	pop	{r7}
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	2000088c 	.word	0x2000088c

08008680 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800868a:	4b21      	ldr	r3, [pc, #132]	; (8008710 <prvAddCurrentTaskToDelayedList+0x90>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008690:	4b20      	ldr	r3, [pc, #128]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3304      	adds	r3, #4
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe f8e2 	bl	8006860 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a2:	d10a      	bne.n	80086ba <prvAddCurrentTaskToDelayedList+0x3a>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d007      	beq.n	80086ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086aa:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3304      	adds	r3, #4
 80086b0:	4619      	mov	r1, r3
 80086b2:	4819      	ldr	r0, [pc, #100]	; (8008718 <prvAddCurrentTaskToDelayedList+0x98>)
 80086b4:	f7fe f879 	bl	80067aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086b8:	e026      	b.n	8008708 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4413      	add	r3, r2
 80086c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086c2:	4b14      	ldr	r3, [pc, #80]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d209      	bcs.n	80086e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086d2:	4b12      	ldr	r3, [pc, #72]	; (800871c <prvAddCurrentTaskToDelayedList+0x9c>)
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4b0f      	ldr	r3, [pc, #60]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3304      	adds	r3, #4
 80086dc:	4619      	mov	r1, r3
 80086de:	4610      	mov	r0, r2
 80086e0:	f7fe f886 	bl	80067f0 <vListInsert>
}
 80086e4:	e010      	b.n	8008708 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086e6:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4619      	mov	r1, r3
 80086f2:	4610      	mov	r0, r2
 80086f4:	f7fe f87c 	bl	80067f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086f8:	4b0a      	ldr	r3, [pc, #40]	; (8008724 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d202      	bcs.n	8008708 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008702:	4a08      	ldr	r2, [pc, #32]	; (8008724 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	6013      	str	r3, [r2, #0]
}
 8008708:	bf00      	nop
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000d64 	.word	0x20000d64
 8008714:	2000088c 	.word	0x2000088c
 8008718:	20000d4c 	.word	0x20000d4c
 800871c:	20000d1c 	.word	0x20000d1c
 8008720:	20000d18 	.word	0x20000d18
 8008724:	20000d80 	.word	0x20000d80

08008728 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800872e:	2300      	movs	r3, #0
 8008730:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008732:	f000 fac3 	bl	8008cbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008736:	4b1c      	ldr	r3, [pc, #112]	; (80087a8 <xTimerCreateTimerTask+0x80>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d021      	beq.n	8008782 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008742:	2300      	movs	r3, #0
 8008744:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008746:	1d3a      	adds	r2, r7, #4
 8008748:	f107 0108 	add.w	r1, r7, #8
 800874c:	f107 030c 	add.w	r3, r7, #12
 8008750:	4618      	mov	r0, r3
 8008752:	f7fd ffe5 	bl	8006720 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	9202      	str	r2, [sp, #8]
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	2302      	movs	r3, #2
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	2300      	movs	r3, #0
 8008766:	460a      	mov	r2, r1
 8008768:	4910      	ldr	r1, [pc, #64]	; (80087ac <xTimerCreateTimerTask+0x84>)
 800876a:	4811      	ldr	r0, [pc, #68]	; (80087b0 <xTimerCreateTimerTask+0x88>)
 800876c:	f7fe ff5c 	bl	8007628 <xTaskCreateStatic>
 8008770:	4602      	mov	r2, r0
 8008772:	4b10      	ldr	r3, [pc, #64]	; (80087b4 <xTimerCreateTimerTask+0x8c>)
 8008774:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008776:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <xTimerCreateTimerTask+0x8c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800877e:	2301      	movs	r3, #1
 8008780:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <xTimerCreateTimerTask+0x74>
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	613b      	str	r3, [r7, #16]
 800879a:	e7fe      	b.n	800879a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800879c:	697b      	ldr	r3, [r7, #20]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20000dc4 	.word	0x20000dc4
 80087ac:	08009fdc 	.word	0x08009fdc
 80087b0:	080088d1 	.word	0x080088d1
 80087b4:	20000dc8 	.word	0x20000dc8

080087b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b08a      	sub	sp, #40	; 0x28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087c6:	2300      	movs	r3, #0
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d109      	bne.n	80087e4 <xTimerGenericCommand+0x2c>
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	623b      	str	r3, [r7, #32]
 80087e2:	e7fe      	b.n	80087e2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087e4:	4b19      	ldr	r3, [pc, #100]	; (800884c <xTimerGenericCommand+0x94>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d02a      	beq.n	8008842 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	2b05      	cmp	r3, #5
 80087fc:	dc18      	bgt.n	8008830 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087fe:	f7ff fdaf 	bl	8008360 <xTaskGetSchedulerState>
 8008802:	4603      	mov	r3, r0
 8008804:	2b02      	cmp	r3, #2
 8008806:	d109      	bne.n	800881c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008808:	4b10      	ldr	r3, [pc, #64]	; (800884c <xTimerGenericCommand+0x94>)
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	f107 0110 	add.w	r1, r7, #16
 8008810:	2300      	movs	r3, #0
 8008812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008814:	f7fe f988 	bl	8006b28 <xQueueGenericSend>
 8008818:	6278      	str	r0, [r7, #36]	; 0x24
 800881a:	e012      	b.n	8008842 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800881c:	4b0b      	ldr	r3, [pc, #44]	; (800884c <xTimerGenericCommand+0x94>)
 800881e:	6818      	ldr	r0, [r3, #0]
 8008820:	f107 0110 	add.w	r1, r7, #16
 8008824:	2300      	movs	r3, #0
 8008826:	2200      	movs	r2, #0
 8008828:	f7fe f97e 	bl	8006b28 <xQueueGenericSend>
 800882c:	6278      	str	r0, [r7, #36]	; 0x24
 800882e:	e008      	b.n	8008842 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008830:	4b06      	ldr	r3, [pc, #24]	; (800884c <xTimerGenericCommand+0x94>)
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	f107 0110 	add.w	r1, r7, #16
 8008838:	2300      	movs	r3, #0
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	f7fe fa6e 	bl	8006d1c <xQueueGenericSendFromISR>
 8008840:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008844:	4618      	mov	r0, r3
 8008846:	3728      	adds	r7, #40	; 0x28
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20000dc4 	.word	0x20000dc4

08008850 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b088      	sub	sp, #32
 8008854:	af02      	add	r7, sp, #8
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800885a:	4b1c      	ldr	r3, [pc, #112]	; (80088cc <prvProcessExpiredTimer+0x7c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	3304      	adds	r3, #4
 8008868:	4618      	mov	r0, r3
 800886a:	f7fd fff9 	bl	8006860 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d121      	bne.n	80088ba <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	699a      	ldr	r2, [r3, #24]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	18d1      	adds	r1, r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	6978      	ldr	r0, [r7, #20]
 8008884:	f000 f8c8 	bl	8008a18 <prvInsertTimerInActiveList>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d015      	beq.n	80088ba <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800888e:	2300      	movs	r3, #0
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	2300      	movs	r3, #0
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	2100      	movs	r1, #0
 8008898:	6978      	ldr	r0, [r7, #20]
 800889a:	f7ff ff8d 	bl	80087b8 <xTimerGenericCommand>
 800889e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d109      	bne.n	80088ba <prvProcessExpiredTimer+0x6a>
 80088a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	e7fe      	b.n	80088b8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	6978      	ldr	r0, [r7, #20]
 80088c0:	4798      	blx	r3
}
 80088c2:	bf00      	nop
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20000dbc 	.word	0x20000dbc

080088d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088d8:	f107 0308 	add.w	r3, r7, #8
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 f857 	bl	8008990 <prvGetNextExpireTime>
 80088e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4619      	mov	r1, r3
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f803 	bl	80088f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088ee:	f000 f8d5 	bl	8008a9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088f2:	e7f1      	b.n	80088d8 <prvTimerTask+0x8>

080088f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088fe:	f7ff f939 	bl	8007b74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008902:	f107 0308 	add.w	r3, r7, #8
 8008906:	4618      	mov	r0, r3
 8008908:	f000 f866 	bl	80089d8 <prvSampleTimeNow>
 800890c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d130      	bne.n	8008976 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <prvProcessTimerOrBlockTask+0x3c>
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	429a      	cmp	r2, r3
 8008920:	d806      	bhi.n	8008930 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008922:	f7ff f935 	bl	8007b90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008926:	68f9      	ldr	r1, [r7, #12]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7ff ff91 	bl	8008850 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800892e:	e024      	b.n	800897a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d008      	beq.n	8008948 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008936:	4b13      	ldr	r3, [pc, #76]	; (8008984 <prvProcessTimerOrBlockTask+0x90>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	bf0c      	ite	eq
 8008940:	2301      	moveq	r3, #1
 8008942:	2300      	movne	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008948:	4b0f      	ldr	r3, [pc, #60]	; (8008988 <prvProcessTimerOrBlockTask+0x94>)
 800894a:	6818      	ldr	r0, [r3, #0]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	4619      	mov	r1, r3
 8008956:	f7fe fe33 	bl	80075c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800895a:	f7ff f919 	bl	8007b90 <xTaskResumeAll>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10a      	bne.n	800897a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008964:	4b09      	ldr	r3, [pc, #36]	; (800898c <prvProcessTimerOrBlockTask+0x98>)
 8008966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	f3bf 8f6f 	isb	sy
}
 8008974:	e001      	b.n	800897a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008976:	f7ff f90b 	bl	8007b90 <xTaskResumeAll>
}
 800897a:	bf00      	nop
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000dc0 	.word	0x20000dc0
 8008988:	20000dc4 	.word	0x20000dc4
 800898c:	e000ed04 	.word	0xe000ed04

08008990 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008998:	4b0e      	ldr	r3, [pc, #56]	; (80089d4 <prvGetNextExpireTime+0x44>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bf0c      	ite	eq
 80089a2:	2301      	moveq	r3, #1
 80089a4:	2300      	movne	r3, #0
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	461a      	mov	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d105      	bne.n	80089c2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089b6:	4b07      	ldr	r3, [pc, #28]	; (80089d4 <prvGetNextExpireTime+0x44>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	e001      	b.n	80089c6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80089c6:	68fb      	ldr	r3, [r7, #12]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bc80      	pop	{r7}
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	20000dbc 	.word	0x20000dbc

080089d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089e0:	f7ff f972 	bl	8007cc8 <xTaskGetTickCount>
 80089e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089e6:	4b0b      	ldr	r3, [pc, #44]	; (8008a14 <prvSampleTimeNow+0x3c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d205      	bcs.n	80089fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089f0:	f000 f904 	bl	8008bfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	e002      	b.n	8008a02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a02:	4a04      	ldr	r2, [pc, #16]	; (8008a14 <prvSampleTimeNow+0x3c>)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a08:	68fb      	ldr	r3, [r7, #12]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	20000dcc 	.word	0x20000dcc

08008a18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
 8008a24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a26:	2300      	movs	r3, #0
 8008a28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d812      	bhi.n	8008a64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	1ad2      	subs	r2, r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d302      	bcc.n	8008a52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	617b      	str	r3, [r7, #20]
 8008a50:	e01b      	b.n	8008a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a52:	4b10      	ldr	r3, [pc, #64]	; (8008a94 <prvInsertTimerInActiveList+0x7c>)
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	f7fd fec7 	bl	80067f0 <vListInsert>
 8008a62:	e012      	b.n	8008a8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d206      	bcs.n	8008a7a <prvInsertTimerInActiveList+0x62>
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d302      	bcc.n	8008a7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a74:	2301      	movs	r3, #1
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	e007      	b.n	8008a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a7a:	4b07      	ldr	r3, [pc, #28]	; (8008a98 <prvInsertTimerInActiveList+0x80>)
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3304      	adds	r3, #4
 8008a82:	4619      	mov	r1, r3
 8008a84:	4610      	mov	r0, r2
 8008a86:	f7fd feb3 	bl	80067f0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a8a:	697b      	ldr	r3, [r7, #20]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	20000dc0 	.word	0x20000dc0
 8008a98:	20000dbc 	.word	0x20000dbc

08008a9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08e      	sub	sp, #56	; 0x38
 8008aa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008aa2:	e099      	b.n	8008bd8 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	da17      	bge.n	8008ada <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008aaa:	1d3b      	adds	r3, r7, #4
 8008aac:	3304      	adds	r3, #4
 8008aae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d109      	bne.n	8008aca <prvProcessReceivedCommands+0x2e>
 8008ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	61fb      	str	r3, [r7, #28]
 8008ac8:	e7fe      	b.n	8008ac8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad0:	6850      	ldr	r0, [r2, #4]
 8008ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad4:	6892      	ldr	r2, [r2, #8]
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	db7a      	blt.n	8008bd6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d004      	beq.n	8008af6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aee:	3304      	adds	r3, #4
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fd feb5 	bl	8006860 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008af6:	463b      	mov	r3, r7
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff ff6d 	bl	80089d8 <prvSampleTimeNow>
 8008afe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b09      	cmp	r3, #9
 8008b04:	d868      	bhi.n	8008bd8 <prvProcessReceivedCommands+0x13c>
 8008b06:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <prvProcessReceivedCommands+0x70>)
 8008b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0c:	08008b35 	.word	0x08008b35
 8008b10:	08008b35 	.word	0x08008b35
 8008b14:	08008b35 	.word	0x08008b35
 8008b18:	08008bd9 	.word	0x08008bd9
 8008b1c:	08008b8f 	.word	0x08008b8f
 8008b20:	08008bc5 	.word	0x08008bc5
 8008b24:	08008b35 	.word	0x08008b35
 8008b28:	08008b35 	.word	0x08008b35
 8008b2c:	08008bd9 	.word	0x08008bd9
 8008b30:	08008b8f 	.word	0x08008b8f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	18d1      	adds	r1, r2, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b42:	f7ff ff69 	bl	8008a18 <prvInsertTimerInActiveList>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d045      	beq.n	8008bd8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b52:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d13d      	bne.n	8008bd8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	441a      	add	r2, r3
 8008b64:	2300      	movs	r3, #0
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b6e:	f7ff fe23 	bl	80087b8 <xTimerGenericCommand>
 8008b72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d12e      	bne.n	8008bd8 <prvProcessReceivedCommands+0x13c>
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	61bb      	str	r3, [r7, #24]
 8008b8c:	e7fe      	b.n	8008b8c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d109      	bne.n	8008bb0 <prvProcessReceivedCommands+0x114>
 8008b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	617b      	str	r3, [r7, #20]
 8008bae:	e7fe      	b.n	8008bae <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	699a      	ldr	r2, [r3, #24]
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	18d1      	adds	r1, r2, r3
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bbe:	f7ff ff2b 	bl	8008a18 <prvInsertTimerInActiveList>
					break;
 8008bc2:	e009      	b.n	8008bd8 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d104      	bne.n	8008bd8 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bd0:	f000 fb5a 	bl	8009288 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008bd4:	e000      	b.n	8008bd8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008bd6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bd8:	4b07      	ldr	r3, [pc, #28]	; (8008bf8 <prvProcessReceivedCommands+0x15c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	1d39      	adds	r1, r7, #4
 8008bde:	2200      	movs	r2, #0
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fe f9b9 	bl	8006f58 <xQueueReceive>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f47f af5b 	bne.w	8008aa4 <prvProcessReceivedCommands+0x8>
	}
}
 8008bee:	bf00      	nop
 8008bf0:	3730      	adds	r7, #48	; 0x30
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20000dc4 	.word	0x20000dc4

08008bfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c02:	e044      	b.n	8008c8e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c04:	4b2b      	ldr	r3, [pc, #172]	; (8008cb4 <prvSwitchTimerLists+0xb8>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c0e:	4b29      	ldr	r3, [pc, #164]	; (8008cb4 <prvSwitchTimerLists+0xb8>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fd fe1f 	bl	8006860 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	69db      	ldr	r3, [r3, #28]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d12d      	bne.n	8008c8e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	4413      	add	r3, r2
 8008c3a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d90e      	bls.n	8008c62 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c50:	4b18      	ldr	r3, [pc, #96]	; (8008cb4 <prvSwitchTimerLists+0xb8>)
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	3304      	adds	r3, #4
 8008c58:	4619      	mov	r1, r3
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	f7fd fdc8 	bl	80067f0 <vListInsert>
 8008c60:	e015      	b.n	8008c8e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c62:	2300      	movs	r3, #0
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	2300      	movs	r3, #0
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f7ff fda3 	bl	80087b8 <xTimerGenericCommand>
 8008c72:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d109      	bne.n	8008c8e <prvSwitchTimerLists+0x92>
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	e7fe      	b.n	8008c8c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c8e:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <prvSwitchTimerLists+0xb8>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1b5      	bne.n	8008c04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c98:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <prvSwitchTimerLists+0xb8>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c9e:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <prvSwitchTimerLists+0xbc>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a04      	ldr	r2, [pc, #16]	; (8008cb4 <prvSwitchTimerLists+0xb8>)
 8008ca4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ca6:	4a04      	ldr	r2, [pc, #16]	; (8008cb8 <prvSwitchTimerLists+0xbc>)
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	6013      	str	r3, [r2, #0]
}
 8008cac:	bf00      	nop
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20000dbc 	.word	0x20000dbc
 8008cb8:	20000dc0 	.word	0x20000dc0

08008cbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008cc2:	f000 f929 	bl	8008f18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008cc6:	4b15      	ldr	r3, [pc, #84]	; (8008d1c <prvCheckForValidListAndQueue+0x60>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d120      	bne.n	8008d10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008cce:	4814      	ldr	r0, [pc, #80]	; (8008d20 <prvCheckForValidListAndQueue+0x64>)
 8008cd0:	f7fd fd40 	bl	8006754 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008cd4:	4813      	ldr	r0, [pc, #76]	; (8008d24 <prvCheckForValidListAndQueue+0x68>)
 8008cd6:	f7fd fd3d 	bl	8006754 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008cda:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <prvCheckForValidListAndQueue+0x6c>)
 8008cdc:	4a10      	ldr	r2, [pc, #64]	; (8008d20 <prvCheckForValidListAndQueue+0x64>)
 8008cde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ce0:	4b12      	ldr	r3, [pc, #72]	; (8008d2c <prvCheckForValidListAndQueue+0x70>)
 8008ce2:	4a10      	ldr	r2, [pc, #64]	; (8008d24 <prvCheckForValidListAndQueue+0x68>)
 8008ce4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	4b11      	ldr	r3, [pc, #68]	; (8008d30 <prvCheckForValidListAndQueue+0x74>)
 8008cec:	4a11      	ldr	r2, [pc, #68]	; (8008d34 <prvCheckForValidListAndQueue+0x78>)
 8008cee:	2110      	movs	r1, #16
 8008cf0:	200a      	movs	r0, #10
 8008cf2:	f7fd fe47 	bl	8006984 <xQueueGenericCreateStatic>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	4b08      	ldr	r3, [pc, #32]	; (8008d1c <prvCheckForValidListAndQueue+0x60>)
 8008cfa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008cfc:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <prvCheckForValidListAndQueue+0x60>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d005      	beq.n	8008d10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d04:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <prvCheckForValidListAndQueue+0x60>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	490b      	ldr	r1, [pc, #44]	; (8008d38 <prvCheckForValidListAndQueue+0x7c>)
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fe fc30 	bl	8007570 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d10:	f000 f930 	bl	8008f74 <vPortExitCritical>
}
 8008d14:	bf00      	nop
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20000dc4 	.word	0x20000dc4
 8008d20:	20000d94 	.word	0x20000d94
 8008d24:	20000da8 	.word	0x20000da8
 8008d28:	20000dbc 	.word	0x20000dbc
 8008d2c:	20000dc0 	.word	0x20000dc0
 8008d30:	20000e70 	.word	0x20000e70
 8008d34:	20000dd0 	.word	0x20000dd0
 8008d38:	08009fe4 	.word	0x08009fe4

08008d3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3b04      	subs	r3, #4
 8008d4c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3b04      	subs	r3, #4
 8008d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f023 0201 	bic.w	r2, r3, #1
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	3b04      	subs	r3, #4
 8008d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d6c:	4a08      	ldr	r2, [pc, #32]	; (8008d90 <pxPortInitialiseStack+0x54>)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3b14      	subs	r3, #20
 8008d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3b20      	subs	r3, #32
 8008d82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d84:	68fb      	ldr	r3, [r7, #12]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bc80      	pop	{r7}
 8008d8e:	4770      	bx	lr
 8008d90:	08008d95 	.word	0x08008d95

08008d94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d9e:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <prvTaskExitError+0x4c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d009      	beq.n	8008dbc <prvTaskExitError+0x28>
 8008da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	60fb      	str	r3, [r7, #12]
 8008dba:	e7fe      	b.n	8008dba <prvTaskExitError+0x26>
 8008dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008dce:	bf00      	nop
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0fc      	beq.n	8008dd0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008dd6:	bf00      	nop
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bc80      	pop	{r7}
 8008dde:	4770      	bx	lr
 8008de0:	2000011c 	.word	0x2000011c
	...

08008df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008df0:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <pxCurrentTCBConst2>)
 8008df2:	6819      	ldr	r1, [r3, #0]
 8008df4:	6808      	ldr	r0, [r1, #0]
 8008df6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008dfa:	f380 8809 	msr	PSP, r0
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f04f 0000 	mov.w	r0, #0
 8008e06:	f380 8811 	msr	BASEPRI, r0
 8008e0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008e0e:	4770      	bx	lr

08008e10 <pxCurrentTCBConst2>:
 8008e10:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop

08008e18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008e18:	4806      	ldr	r0, [pc, #24]	; (8008e34 <prvPortStartFirstTask+0x1c>)
 8008e1a:	6800      	ldr	r0, [r0, #0]
 8008e1c:	6800      	ldr	r0, [r0, #0]
 8008e1e:	f380 8808 	msr	MSP, r0
 8008e22:	b662      	cpsie	i
 8008e24:	b661      	cpsie	f
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	df00      	svc	0
 8008e30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e32:	bf00      	nop
 8008e34:	e000ed08 	.word	0xe000ed08

08008e38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e3e:	4b31      	ldr	r3, [pc, #196]	; (8008f04 <xPortStartScheduler+0xcc>)
 8008e40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	22ff      	movs	r2, #255	; 0xff
 8008e4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e58:	78fb      	ldrb	r3, [r7, #3]
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	4b29      	ldr	r3, [pc, #164]	; (8008f08 <xPortStartScheduler+0xd0>)
 8008e64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e66:	4b29      	ldr	r3, [pc, #164]	; (8008f0c <xPortStartScheduler+0xd4>)
 8008e68:	2207      	movs	r2, #7
 8008e6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e6c:	e009      	b.n	8008e82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008e6e:	4b27      	ldr	r3, [pc, #156]	; (8008f0c <xPortStartScheduler+0xd4>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3b01      	subs	r3, #1
 8008e74:	4a25      	ldr	r2, [pc, #148]	; (8008f0c <xPortStartScheduler+0xd4>)
 8008e76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e82:	78fb      	ldrb	r3, [r7, #3]
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e8a:	2b80      	cmp	r3, #128	; 0x80
 8008e8c:	d0ef      	beq.n	8008e6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e8e:	4b1f      	ldr	r3, [pc, #124]	; (8008f0c <xPortStartScheduler+0xd4>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f1c3 0307 	rsb	r3, r3, #7
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d009      	beq.n	8008eae <xPortStartScheduler+0x76>
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	60bb      	str	r3, [r7, #8]
 8008eac:	e7fe      	b.n	8008eac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008eae:	4b17      	ldr	r3, [pc, #92]	; (8008f0c <xPortStartScheduler+0xd4>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	021b      	lsls	r3, r3, #8
 8008eb4:	4a15      	ldr	r2, [pc, #84]	; (8008f0c <xPortStartScheduler+0xd4>)
 8008eb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008eb8:	4b14      	ldr	r3, [pc, #80]	; (8008f0c <xPortStartScheduler+0xd4>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ec0:	4a12      	ldr	r2, [pc, #72]	; (8008f0c <xPortStartScheduler+0xd4>)
 8008ec2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ecc:	4b10      	ldr	r3, [pc, #64]	; (8008f10 <xPortStartScheduler+0xd8>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a0f      	ldr	r2, [pc, #60]	; (8008f10 <xPortStartScheduler+0xd8>)
 8008ed2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ed6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ed8:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <xPortStartScheduler+0xd8>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a0c      	ldr	r2, [pc, #48]	; (8008f10 <xPortStartScheduler+0xd8>)
 8008ede:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ee2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ee4:	f000 f8b0 	bl	8009048 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <xPortStartScheduler+0xdc>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008eee:	f7ff ff93 	bl	8008e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ef2:	f7fe ffb5 	bl	8007e60 <vTaskSwitchContext>
	prvTaskExitError();
 8008ef6:	f7ff ff4d 	bl	8008d94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	e000e400 	.word	0xe000e400
 8008f08:	20000ec0 	.word	0x20000ec0
 8008f0c:	20000ec4 	.word	0x20000ec4
 8008f10:	e000ed20 	.word	0xe000ed20
 8008f14:	2000011c 	.word	0x2000011c

08008f18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f30:	4b0e      	ldr	r3, [pc, #56]	; (8008f6c <vPortEnterCritical+0x54>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3301      	adds	r3, #1
 8008f36:	4a0d      	ldr	r2, [pc, #52]	; (8008f6c <vPortEnterCritical+0x54>)
 8008f38:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f3a:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <vPortEnterCritical+0x54>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d10e      	bne.n	8008f60 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f42:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <vPortEnterCritical+0x58>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d009      	beq.n	8008f60 <vPortEnterCritical+0x48>
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	603b      	str	r3, [r7, #0]
 8008f5e:	e7fe      	b.n	8008f5e <vPortEnterCritical+0x46>
	}
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bc80      	pop	{r7}
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	2000011c 	.word	0x2000011c
 8008f70:	e000ed04 	.word	0xe000ed04

08008f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f7a:	4b10      	ldr	r3, [pc, #64]	; (8008fbc <vPortExitCritical+0x48>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d109      	bne.n	8008f96 <vPortExitCritical+0x22>
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	607b      	str	r3, [r7, #4]
 8008f94:	e7fe      	b.n	8008f94 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008f96:	4b09      	ldr	r3, [pc, #36]	; (8008fbc <vPortExitCritical+0x48>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	4a07      	ldr	r2, [pc, #28]	; (8008fbc <vPortExitCritical+0x48>)
 8008f9e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fa0:	4b06      	ldr	r3, [pc, #24]	; (8008fbc <vPortExitCritical+0x48>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <vPortExitCritical+0x3e>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fb2:	bf00      	nop
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bc80      	pop	{r7}
 8008fba:	4770      	bx	lr
 8008fbc:	2000011c 	.word	0x2000011c

08008fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fc0:	f3ef 8009 	mrs	r0, PSP
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <pxCurrentTCBConst>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008fd0:	6010      	str	r0, [r2, #0]
 8008fd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008fd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008fda:	f380 8811 	msr	BASEPRI, r0
 8008fde:	f7fe ff3f 	bl	8007e60 <vTaskSwitchContext>
 8008fe2:	f04f 0000 	mov.w	r0, #0
 8008fe6:	f380 8811 	msr	BASEPRI, r0
 8008fea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008fee:	6819      	ldr	r1, [r3, #0]
 8008ff0:	6808      	ldr	r0, [r1, #0]
 8008ff2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008ff6:	f380 8809 	msr	PSP, r0
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	4770      	bx	lr

08009000 <pxCurrentTCBConst>:
 8009000:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop

08009008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009020:	f7fe fe60 	bl	8007ce4 <xTaskIncrementTick>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800902a:	4b06      	ldr	r3, [pc, #24]	; (8009044 <xPortSysTickHandler+0x3c>)
 800902c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	2300      	movs	r3, #0
 8009034:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	e000ed04 	.word	0xe000ed04

08009048 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009048:	b480      	push	{r7}
 800904a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800904c:	4b0a      	ldr	r3, [pc, #40]	; (8009078 <vPortSetupTimerInterrupt+0x30>)
 800904e:	2200      	movs	r2, #0
 8009050:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009052:	4b0a      	ldr	r3, [pc, #40]	; (800907c <vPortSetupTimerInterrupt+0x34>)
 8009054:	2200      	movs	r2, #0
 8009056:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009058:	4b09      	ldr	r3, [pc, #36]	; (8009080 <vPortSetupTimerInterrupt+0x38>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a09      	ldr	r2, [pc, #36]	; (8009084 <vPortSetupTimerInterrupt+0x3c>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	099b      	lsrs	r3, r3, #6
 8009064:	4a08      	ldr	r2, [pc, #32]	; (8009088 <vPortSetupTimerInterrupt+0x40>)
 8009066:	3b01      	subs	r3, #1
 8009068:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800906a:	4b03      	ldr	r3, [pc, #12]	; (8009078 <vPortSetupTimerInterrupt+0x30>)
 800906c:	2207      	movs	r2, #7
 800906e:	601a      	str	r2, [r3, #0]
}
 8009070:	bf00      	nop
 8009072:	46bd      	mov	sp, r7
 8009074:	bc80      	pop	{r7}
 8009076:	4770      	bx	lr
 8009078:	e000e010 	.word	0xe000e010
 800907c:	e000e018 	.word	0xe000e018
 8009080:	20000000 	.word	0x20000000
 8009084:	10624dd3 	.word	0x10624dd3
 8009088:	e000e014 	.word	0xe000e014

0800908c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009092:	f3ef 8305 	mrs	r3, IPSR
 8009096:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2b0f      	cmp	r3, #15
 800909c:	d913      	bls.n	80090c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800909e:	4a15      	ldr	r2, [pc, #84]	; (80090f4 <vPortValidateInterruptPriority+0x68>)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4413      	add	r3, r2
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090a8:	4b13      	ldr	r3, [pc, #76]	; (80090f8 <vPortValidateInterruptPriority+0x6c>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	7afa      	ldrb	r2, [r7, #11]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d209      	bcs.n	80090c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	607b      	str	r3, [r7, #4]
 80090c4:	e7fe      	b.n	80090c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090c6:	4b0d      	ldr	r3, [pc, #52]	; (80090fc <vPortValidateInterruptPriority+0x70>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090ce:	4b0c      	ldr	r3, [pc, #48]	; (8009100 <vPortValidateInterruptPriority+0x74>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d909      	bls.n	80090ea <vPortValidateInterruptPriority+0x5e>
 80090d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	603b      	str	r3, [r7, #0]
 80090e8:	e7fe      	b.n	80090e8 <vPortValidateInterruptPriority+0x5c>
	}
 80090ea:	bf00      	nop
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bc80      	pop	{r7}
 80090f2:	4770      	bx	lr
 80090f4:	e000e3f0 	.word	0xe000e3f0
 80090f8:	20000ec0 	.word	0x20000ec0
 80090fc:	e000ed0c 	.word	0xe000ed0c
 8009100:	20000ec4 	.word	0x20000ec4

08009104 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08a      	sub	sp, #40	; 0x28
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800910c:	2300      	movs	r3, #0
 800910e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009110:	f7fe fd30 	bl	8007b74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009114:	4b57      	ldr	r3, [pc, #348]	; (8009274 <pvPortMalloc+0x170>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d101      	bne.n	8009120 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800911c:	f000 f90c 	bl	8009338 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009120:	4b55      	ldr	r3, [pc, #340]	; (8009278 <pvPortMalloc+0x174>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4013      	ands	r3, r2
 8009128:	2b00      	cmp	r3, #0
 800912a:	f040 808c 	bne.w	8009246 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d01c      	beq.n	800916e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009134:	2208      	movs	r2, #8
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4413      	add	r3, r2
 800913a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f003 0307 	and.w	r3, r3, #7
 8009142:	2b00      	cmp	r3, #0
 8009144:	d013      	beq.n	800916e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f023 0307 	bic.w	r3, r3, #7
 800914c:	3308      	adds	r3, #8
 800914e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	2b00      	cmp	r3, #0
 8009158:	d009      	beq.n	800916e <pvPortMalloc+0x6a>
 800915a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	e7fe      	b.n	800916c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d068      	beq.n	8009246 <pvPortMalloc+0x142>
 8009174:	4b41      	ldr	r3, [pc, #260]	; (800927c <pvPortMalloc+0x178>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	429a      	cmp	r2, r3
 800917c:	d863      	bhi.n	8009246 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800917e:	4b40      	ldr	r3, [pc, #256]	; (8009280 <pvPortMalloc+0x17c>)
 8009180:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009182:	4b3f      	ldr	r3, [pc, #252]	; (8009280 <pvPortMalloc+0x17c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009188:	e004      	b.n	8009194 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	429a      	cmp	r2, r3
 800919c:	d903      	bls.n	80091a6 <pvPortMalloc+0xa2>
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1f1      	bne.n	800918a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091a6:	4b33      	ldr	r3, [pc, #204]	; (8009274 <pvPortMalloc+0x170>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d04a      	beq.n	8009246 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2208      	movs	r2, #8
 80091b6:	4413      	add	r3, r2
 80091b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	6a3b      	ldr	r3, [r7, #32]
 80091c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	1ad2      	subs	r2, r2, r3
 80091ca:	2308      	movs	r3, #8
 80091cc:	005b      	lsls	r3, r3, #1
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d91e      	bls.n	8009210 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4413      	add	r3, r2
 80091d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	f003 0307 	and.w	r3, r3, #7
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d009      	beq.n	80091f8 <pvPortMalloc+0xf4>
 80091e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	613b      	str	r3, [r7, #16]
 80091f6:	e7fe      	b.n	80091f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	1ad2      	subs	r2, r2, r3
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800920a:	69b8      	ldr	r0, [r7, #24]
 800920c:	f000 f8f6 	bl	80093fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009210:	4b1a      	ldr	r3, [pc, #104]	; (800927c <pvPortMalloc+0x178>)
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	4a18      	ldr	r2, [pc, #96]	; (800927c <pvPortMalloc+0x178>)
 800921c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800921e:	4b17      	ldr	r3, [pc, #92]	; (800927c <pvPortMalloc+0x178>)
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	4b18      	ldr	r3, [pc, #96]	; (8009284 <pvPortMalloc+0x180>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	429a      	cmp	r2, r3
 8009228:	d203      	bcs.n	8009232 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800922a:	4b14      	ldr	r3, [pc, #80]	; (800927c <pvPortMalloc+0x178>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a15      	ldr	r2, [pc, #84]	; (8009284 <pvPortMalloc+0x180>)
 8009230:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	685a      	ldr	r2, [r3, #4]
 8009236:	4b10      	ldr	r3, [pc, #64]	; (8009278 <pvPortMalloc+0x174>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	431a      	orrs	r2, r3
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009246:	f7fe fca3 	bl	8007b90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	f003 0307 	and.w	r3, r3, #7
 8009250:	2b00      	cmp	r3, #0
 8009252:	d009      	beq.n	8009268 <pvPortMalloc+0x164>
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	e7fe      	b.n	8009266 <pvPortMalloc+0x162>
	return pvReturn;
 8009268:	69fb      	ldr	r3, [r7, #28]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3728      	adds	r7, #40	; 0x28
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	20002ed0 	.word	0x20002ed0
 8009278:	20002edc 	.word	0x20002edc
 800927c:	20002ed4 	.word	0x20002ed4
 8009280:	20002ec8 	.word	0x20002ec8
 8009284:	20002ed8 	.word	0x20002ed8

08009288 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d046      	beq.n	8009328 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800929a:	2308      	movs	r3, #8
 800929c:	425b      	negs	r3, r3
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4413      	add	r3, r2
 80092a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	4b20      	ldr	r3, [pc, #128]	; (8009330 <vPortFree+0xa8>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4013      	ands	r3, r2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d109      	bne.n	80092ca <vPortFree+0x42>
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	e7fe      	b.n	80092c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d009      	beq.n	80092e6 <vPortFree+0x5e>
 80092d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	60bb      	str	r3, [r7, #8]
 80092e4:	e7fe      	b.n	80092e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	685a      	ldr	r2, [r3, #4]
 80092ea:	4b11      	ldr	r3, [pc, #68]	; (8009330 <vPortFree+0xa8>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4013      	ands	r3, r2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d019      	beq.n	8009328 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d115      	bne.n	8009328 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	4b0b      	ldr	r3, [pc, #44]	; (8009330 <vPortFree+0xa8>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	43db      	mvns	r3, r3
 8009306:	401a      	ands	r2, r3
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800930c:	f7fe fc32 	bl	8007b74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	4b07      	ldr	r3, [pc, #28]	; (8009334 <vPortFree+0xac>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4413      	add	r3, r2
 800931a:	4a06      	ldr	r2, [pc, #24]	; (8009334 <vPortFree+0xac>)
 800931c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800931e:	6938      	ldr	r0, [r7, #16]
 8009320:	f000 f86c 	bl	80093fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009324:	f7fe fc34 	bl	8007b90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009328:	bf00      	nop
 800932a:	3718      	adds	r7, #24
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	20002edc 	.word	0x20002edc
 8009334:	20002ed4 	.word	0x20002ed4

08009338 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800933e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009342:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009344:	4b27      	ldr	r3, [pc, #156]	; (80093e4 <prvHeapInit+0xac>)
 8009346:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f003 0307 	and.w	r3, r3, #7
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00c      	beq.n	800936c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3307      	adds	r3, #7
 8009356:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f023 0307 	bic.w	r3, r3, #7
 800935e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	4a1f      	ldr	r2, [pc, #124]	; (80093e4 <prvHeapInit+0xac>)
 8009368:	4413      	add	r3, r2
 800936a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009370:	4a1d      	ldr	r2, [pc, #116]	; (80093e8 <prvHeapInit+0xb0>)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009376:	4b1c      	ldr	r3, [pc, #112]	; (80093e8 <prvHeapInit+0xb0>)
 8009378:	2200      	movs	r2, #0
 800937a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	4413      	add	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009384:	2208      	movs	r2, #8
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	1a9b      	subs	r3, r3, r2
 800938a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f023 0307 	bic.w	r3, r3, #7
 8009392:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	4a15      	ldr	r2, [pc, #84]	; (80093ec <prvHeapInit+0xb4>)
 8009398:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800939a:	4b14      	ldr	r3, [pc, #80]	; (80093ec <prvHeapInit+0xb4>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2200      	movs	r2, #0
 80093a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093a2:	4b12      	ldr	r3, [pc, #72]	; (80093ec <prvHeapInit+0xb4>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2200      	movs	r2, #0
 80093a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	1ad2      	subs	r2, r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093b8:	4b0c      	ldr	r3, [pc, #48]	; (80093ec <prvHeapInit+0xb4>)
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	4a0a      	ldr	r2, [pc, #40]	; (80093f0 <prvHeapInit+0xb8>)
 80093c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	4a09      	ldr	r2, [pc, #36]	; (80093f4 <prvHeapInit+0xbc>)
 80093ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093d0:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <prvHeapInit+0xc0>)
 80093d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093d6:	601a      	str	r2, [r3, #0]
}
 80093d8:	bf00      	nop
 80093da:	3714      	adds	r7, #20
 80093dc:	46bd      	mov	sp, r7
 80093de:	bc80      	pop	{r7}
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	20000ec8 	.word	0x20000ec8
 80093e8:	20002ec8 	.word	0x20002ec8
 80093ec:	20002ed0 	.word	0x20002ed0
 80093f0:	20002ed8 	.word	0x20002ed8
 80093f4:	20002ed4 	.word	0x20002ed4
 80093f8:	20002edc 	.word	0x20002edc

080093fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009404:	4b27      	ldr	r3, [pc, #156]	; (80094a4 <prvInsertBlockIntoFreeList+0xa8>)
 8009406:	60fb      	str	r3, [r7, #12]
 8009408:	e002      	b.n	8009410 <prvInsertBlockIntoFreeList+0x14>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	60fb      	str	r3, [r7, #12]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	429a      	cmp	r2, r3
 8009418:	d8f7      	bhi.n	800940a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	4413      	add	r3, r2
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	429a      	cmp	r2, r3
 800942a:	d108      	bne.n	800943e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	441a      	add	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	441a      	add	r2, r3
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	429a      	cmp	r2, r3
 8009450:	d118      	bne.n	8009484 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	4b14      	ldr	r3, [pc, #80]	; (80094a8 <prvInsertBlockIntoFreeList+0xac>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	429a      	cmp	r2, r3
 800945c:	d00d      	beq.n	800947a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	441a      	add	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	601a      	str	r2, [r3, #0]
 8009478:	e008      	b.n	800948c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800947a:	4b0b      	ldr	r3, [pc, #44]	; (80094a8 <prvInsertBlockIntoFreeList+0xac>)
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	e003      	b.n	800948c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	429a      	cmp	r2, r3
 8009492:	d002      	beq.n	800949a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800949a:	bf00      	nop
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	bc80      	pop	{r7}
 80094a2:	4770      	bx	lr
 80094a4:	20002ec8 	.word	0x20002ec8
 80094a8:	20002ed0 	.word	0x20002ed0

080094ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80094b0:	2200      	movs	r2, #0
 80094b2:	4912      	ldr	r1, [pc, #72]	; (80094fc <MX_USB_DEVICE_Init+0x50>)
 80094b4:	4812      	ldr	r0, [pc, #72]	; (8009500 <MX_USB_DEVICE_Init+0x54>)
 80094b6:	f7fb ff50 	bl	800535a <USBD_Init>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80094c0:	f7f7 f814 	bl	80004ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80094c4:	490f      	ldr	r1, [pc, #60]	; (8009504 <MX_USB_DEVICE_Init+0x58>)
 80094c6:	480e      	ldr	r0, [pc, #56]	; (8009500 <MX_USB_DEVICE_Init+0x54>)
 80094c8:	f7fb ff72 	bl	80053b0 <USBD_RegisterClass>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80094d2:	f7f7 f80b 	bl	80004ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80094d6:	490c      	ldr	r1, [pc, #48]	; (8009508 <MX_USB_DEVICE_Init+0x5c>)
 80094d8:	4809      	ldr	r0, [pc, #36]	; (8009500 <MX_USB_DEVICE_Init+0x54>)
 80094da:	f7fb fea3 	bl	8005224 <USBD_CDC_RegisterInterface>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80094e4:	f7f7 f802 	bl	80004ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094e8:	4805      	ldr	r0, [pc, #20]	; (8009500 <MX_USB_DEVICE_Init+0x54>)
 80094ea:	f7fb ff7a 	bl	80053e2 <USBD_Start>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80094f4:	f7f6 fffa 	bl	80004ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094f8:	bf00      	nop
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	20000130 	.word	0x20000130
 8009500:	200031b4 	.word	0x200031b4
 8009504:	20000018 	.word	0x20000018
 8009508:	20000120 	.word	0x20000120

0800950c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009510:	2200      	movs	r2, #0
 8009512:	4905      	ldr	r1, [pc, #20]	; (8009528 <CDC_Init_FS+0x1c>)
 8009514:	4805      	ldr	r0, [pc, #20]	; (800952c <CDC_Init_FS+0x20>)
 8009516:	f7fb fe9b 	bl	8005250 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800951a:	4905      	ldr	r1, [pc, #20]	; (8009530 <CDC_Init_FS+0x24>)
 800951c:	4803      	ldr	r0, [pc, #12]	; (800952c <CDC_Init_FS+0x20>)
 800951e:	f7fb feb0 	bl	8005282 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009522:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009524:	4618      	mov	r0, r3
 8009526:	bd80      	pop	{r7, pc}
 8009528:	200034b8 	.word	0x200034b8
 800952c:	200031b4 	.word	0x200031b4
 8009530:	20003478 	.word	0x20003478

08009534 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009534:	b480      	push	{r7}
 8009536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009538:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800953a:	4618      	mov	r0, r3
 800953c:	46bd      	mov	sp, r7
 800953e:	bc80      	pop	{r7}
 8009540:	4770      	bx	lr
	...

08009544 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	4603      	mov	r3, r0
 800954c:	6039      	str	r1, [r7, #0]
 800954e:	71fb      	strb	r3, [r7, #7]
 8009550:	4613      	mov	r3, r2
 8009552:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	2b23      	cmp	r3, #35	; 0x23
 8009558:	d84a      	bhi.n	80095f0 <CDC_Control_FS+0xac>
 800955a:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <CDC_Control_FS+0x1c>)
 800955c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009560:	080095f1 	.word	0x080095f1
 8009564:	080095f1 	.word	0x080095f1
 8009568:	080095f1 	.word	0x080095f1
 800956c:	080095f1 	.word	0x080095f1
 8009570:	080095f1 	.word	0x080095f1
 8009574:	080095f1 	.word	0x080095f1
 8009578:	080095f1 	.word	0x080095f1
 800957c:	080095f1 	.word	0x080095f1
 8009580:	080095f1 	.word	0x080095f1
 8009584:	080095f1 	.word	0x080095f1
 8009588:	080095f1 	.word	0x080095f1
 800958c:	080095f1 	.word	0x080095f1
 8009590:	080095f1 	.word	0x080095f1
 8009594:	080095f1 	.word	0x080095f1
 8009598:	080095f1 	.word	0x080095f1
 800959c:	080095f1 	.word	0x080095f1
 80095a0:	080095f1 	.word	0x080095f1
 80095a4:	080095f1 	.word	0x080095f1
 80095a8:	080095f1 	.word	0x080095f1
 80095ac:	080095f1 	.word	0x080095f1
 80095b0:	080095f1 	.word	0x080095f1
 80095b4:	080095f1 	.word	0x080095f1
 80095b8:	080095f1 	.word	0x080095f1
 80095bc:	080095f1 	.word	0x080095f1
 80095c0:	080095f1 	.word	0x080095f1
 80095c4:	080095f1 	.word	0x080095f1
 80095c8:	080095f1 	.word	0x080095f1
 80095cc:	080095f1 	.word	0x080095f1
 80095d0:	080095f1 	.word	0x080095f1
 80095d4:	080095f1 	.word	0x080095f1
 80095d8:	080095f1 	.word	0x080095f1
 80095dc:	080095f1 	.word	0x080095f1
 80095e0:	080095f1 	.word	0x080095f1
 80095e4:	080095f1 	.word	0x080095f1
 80095e8:	080095f1 	.word	0x080095f1
 80095ec:	080095f1 	.word	0x080095f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80095f0:	bf00      	nop
  }

  return (USBD_OK);
 80095f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bc80      	pop	{r7}
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop

08009600 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);

	static portBASE_TYPE xHigherPriorityTaskWoken;
	  xHigherPriorityTaskWoken = pdFALSE;
 800960a:	4b14      	ldr	r3, [pc, #80]	; (800965c <CDC_Receive_FS+0x5c>)
 800960c:	2200      	movs	r2, #0
 800960e:	601a      	str	r2, [r3, #0]

	xSemaphoreGiveFromISR(xSemaphoreBinary1,&xHigherPriorityTaskWoken);
 8009610:	4b13      	ldr	r3, [pc, #76]	; (8009660 <CDC_Receive_FS+0x60>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4911      	ldr	r1, [pc, #68]	; (800965c <CDC_Receive_FS+0x5c>)
 8009616:	4618      	mov	r0, r3
 8009618:	f7fd fc14 	bl	8006e44 <xQueueGiveFromISR>

	if( xHigherPriorityTaskWoken == pdTRUE )
 800961c:	4b0f      	ldr	r3, [pc, #60]	; (800965c <CDC_Receive_FS+0x5c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d101      	bne.n	8009628 <CDC_Receive_FS+0x28>
	        используемого синтаксиса обратитесь к примерам, предоставленным
	        вместе с портом FreeRTOS. */
	     //portSWITCH_CONTEXT();
		//vTaskSwitchContext();
		//portYIELD_FROM_ISR(NULL);
		vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно это ошибка
 8009624:	f7fe fdba 	bl	800819c <vTaskMissedYield>

	  }


	memset(VCP_Rx_Buf, (int32_t) ' ', 64); // Очитска буфера
 8009628:	2240      	movs	r2, #64	; 0x40
 800962a:	2120      	movs	r1, #32
 800962c:	480d      	ldr	r0, [pc, #52]	; (8009664 <CDC_Receive_FS+0x64>)
 800962e:	f000 fc2a 	bl	8009e86 <memset>


  strncpy(VCP_Rx_Buf, (char*)Buf, *Len);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	480a      	ldr	r0, [pc, #40]	; (8009664 <CDC_Receive_FS+0x64>)
 800963c:	f000 fc2b 	bl	8009e96 <strncpy>
  VCP_Rx_Buf[*Len] = 0; //Конец строки
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a07      	ldr	r2, [pc, #28]	; (8009664 <CDC_Receive_FS+0x64>)
 8009646:	2100      	movs	r1, #0
 8009648:	54d1      	strb	r1, [r2, r3]

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800964a:	4807      	ldr	r0, [pc, #28]	; (8009668 <CDC_Receive_FS+0x68>)
 800964c:	f7fb fe5b 	bl	8005306 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009650:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009652:	4618      	mov	r0, r3
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20002ee0 	.word	0x20002ee0
 8009660:	20003120 	.word	0x20003120
 8009664:	20003128 	.word	0x20003128
 8009668:	200031b4 	.word	0x200031b4

0800966c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800967c:	4b0d      	ldr	r3, [pc, #52]	; (80096b4 <CDC_Transmit_FS+0x48>)
 800967e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009682:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800968e:	2301      	movs	r3, #1
 8009690:	e00b      	b.n	80096aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009692:	887b      	ldrh	r3, [r7, #2]
 8009694:	461a      	mov	r2, r3
 8009696:	6879      	ldr	r1, [r7, #4]
 8009698:	4806      	ldr	r0, [pc, #24]	; (80096b4 <CDC_Transmit_FS+0x48>)
 800969a:	f7fb fdd9 	bl	8005250 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800969e:	4805      	ldr	r0, [pc, #20]	; (80096b4 <CDC_Transmit_FS+0x48>)
 80096a0:	f7fb fe02 	bl	80052a8 <USBD_CDC_TransmitPacket>
 80096a4:	4603      	mov	r3, r0
 80096a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	200031b4 	.word	0x200031b4

080096b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	6039      	str	r1, [r7, #0]
 80096c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	2212      	movs	r2, #18
 80096c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80096ca:	4b03      	ldr	r3, [pc, #12]	; (80096d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bc80      	pop	{r7}
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	2000014c 	.word	0x2000014c

080096dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	6039      	str	r1, [r7, #0]
 80096e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2204      	movs	r2, #4
 80096ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80096ee:	4b03      	ldr	r3, [pc, #12]	; (80096fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bc80      	pop	{r7}
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	20000160 	.word	0x20000160

08009700 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	6039      	str	r1, [r7, #0]
 800970a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d105      	bne.n	800971e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	4907      	ldr	r1, [pc, #28]	; (8009734 <USBD_FS_ProductStrDescriptor+0x34>)
 8009716:	4808      	ldr	r0, [pc, #32]	; (8009738 <USBD_FS_ProductStrDescriptor+0x38>)
 8009718:	f7fc fdcf 	bl	80062ba <USBD_GetString>
 800971c:	e004      	b.n	8009728 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	4904      	ldr	r1, [pc, #16]	; (8009734 <USBD_FS_ProductStrDescriptor+0x34>)
 8009722:	4805      	ldr	r0, [pc, #20]	; (8009738 <USBD_FS_ProductStrDescriptor+0x38>)
 8009724:	f7fc fdc9 	bl	80062ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8009728:	4b02      	ldr	r3, [pc, #8]	; (8009734 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	200034f8 	.word	0x200034f8
 8009738:	08009fec 	.word	0x08009fec

0800973c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	6039      	str	r1, [r7, #0]
 8009746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	4904      	ldr	r1, [pc, #16]	; (800975c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800974c:	4804      	ldr	r0, [pc, #16]	; (8009760 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800974e:	f7fc fdb4 	bl	80062ba <USBD_GetString>
  return USBD_StrDesc;
 8009752:	4b02      	ldr	r3, [pc, #8]	; (800975c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	200034f8 	.word	0x200034f8
 8009760:	0800a004 	.word	0x0800a004

08009764 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	4603      	mov	r3, r0
 800976c:	6039      	str	r1, [r7, #0]
 800976e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	221a      	movs	r2, #26
 8009774:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009776:	f000 f843 	bl	8009800 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800977a:	4b02      	ldr	r3, [pc, #8]	; (8009784 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	20000164 	.word	0x20000164

08009788 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	4603      	mov	r3, r0
 8009790:	6039      	str	r1, [r7, #0]
 8009792:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009794:	79fb      	ldrb	r3, [r7, #7]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d105      	bne.n	80097a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	4907      	ldr	r1, [pc, #28]	; (80097bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800979e:	4808      	ldr	r0, [pc, #32]	; (80097c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097a0:	f7fc fd8b 	bl	80062ba <USBD_GetString>
 80097a4:	e004      	b.n	80097b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	4904      	ldr	r1, [pc, #16]	; (80097bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80097aa:	4805      	ldr	r0, [pc, #20]	; (80097c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097ac:	f7fc fd85 	bl	80062ba <USBD_GetString>
  }
  return USBD_StrDesc;
 80097b0:	4b02      	ldr	r3, [pc, #8]	; (80097bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	200034f8 	.word	0x200034f8
 80097c0:	0800a018 	.word	0x0800a018

080097c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	6039      	str	r1, [r7, #0]
 80097ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097d0:	79fb      	ldrb	r3, [r7, #7]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d105      	bne.n	80097e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	4907      	ldr	r1, [pc, #28]	; (80097f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097da:	4808      	ldr	r0, [pc, #32]	; (80097fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097dc:	f7fc fd6d 	bl	80062ba <USBD_GetString>
 80097e0:	e004      	b.n	80097ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	4904      	ldr	r1, [pc, #16]	; (80097f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097e6:	4805      	ldr	r0, [pc, #20]	; (80097fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097e8:	f7fc fd67 	bl	80062ba <USBD_GetString>
  }
  return USBD_StrDesc;
 80097ec:	4b02      	ldr	r3, [pc, #8]	; (80097f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	200034f8 	.word	0x200034f8
 80097fc:	0800a024 	.word	0x0800a024

08009800 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009806:	4b0f      	ldr	r3, [pc, #60]	; (8009844 <Get_SerialNum+0x44>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800980c:	4b0e      	ldr	r3, [pc, #56]	; (8009848 <Get_SerialNum+0x48>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009812:	4b0e      	ldr	r3, [pc, #56]	; (800984c <Get_SerialNum+0x4c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4413      	add	r3, r2
 800981e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d009      	beq.n	800983a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009826:	2208      	movs	r2, #8
 8009828:	4909      	ldr	r1, [pc, #36]	; (8009850 <Get_SerialNum+0x50>)
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f814 	bl	8009858 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009830:	2204      	movs	r2, #4
 8009832:	4908      	ldr	r1, [pc, #32]	; (8009854 <Get_SerialNum+0x54>)
 8009834:	68b8      	ldr	r0, [r7, #8]
 8009836:	f000 f80f 	bl	8009858 <IntToUnicode>
  }
}
 800983a:	bf00      	nop
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	1ffff7e8 	.word	0x1ffff7e8
 8009848:	1ffff7ec 	.word	0x1ffff7ec
 800984c:	1ffff7f0 	.word	0x1ffff7f0
 8009850:	20000166 	.word	0x20000166
 8009854:	20000176 	.word	0x20000176

08009858 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009858:	b480      	push	{r7}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	4613      	mov	r3, r2
 8009864:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800986a:	2300      	movs	r3, #0
 800986c:	75fb      	strb	r3, [r7, #23]
 800986e:	e027      	b.n	80098c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	0f1b      	lsrs	r3, r3, #28
 8009874:	2b09      	cmp	r3, #9
 8009876:	d80b      	bhi.n	8009890 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	0f1b      	lsrs	r3, r3, #28
 800987c:	b2da      	uxtb	r2, r3
 800987e:	7dfb      	ldrb	r3, [r7, #23]
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	4619      	mov	r1, r3
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	440b      	add	r3, r1
 8009888:	3230      	adds	r2, #48	; 0x30
 800988a:	b2d2      	uxtb	r2, r2
 800988c:	701a      	strb	r2, [r3, #0]
 800988e:	e00a      	b.n	80098a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	0f1b      	lsrs	r3, r3, #28
 8009894:	b2da      	uxtb	r2, r3
 8009896:	7dfb      	ldrb	r3, [r7, #23]
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	4619      	mov	r1, r3
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	440b      	add	r3, r1
 80098a0:	3237      	adds	r2, #55	; 0x37
 80098a2:	b2d2      	uxtb	r2, r2
 80098a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	011b      	lsls	r3, r3, #4
 80098aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
 80098ae:	005b      	lsls	r3, r3, #1
 80098b0:	3301      	adds	r3, #1
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	4413      	add	r3, r2
 80098b6:	2200      	movs	r2, #0
 80098b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	3301      	adds	r3, #1
 80098be:	75fb      	strb	r3, [r7, #23]
 80098c0:	7dfa      	ldrb	r2, [r7, #23]
 80098c2:	79fb      	ldrb	r3, [r7, #7]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d3d3      	bcc.n	8009870 <IntToUnicode+0x18>
  }
}
 80098c8:	bf00      	nop
 80098ca:	371c      	adds	r7, #28
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr
	...

080098d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a0d      	ldr	r2, [pc, #52]	; (8009918 <HAL_PCD_MspInit+0x44>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d113      	bne.n	800990e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80098e6:	4b0d      	ldr	r3, [pc, #52]	; (800991c <HAL_PCD_MspInit+0x48>)
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	4a0c      	ldr	r2, [pc, #48]	; (800991c <HAL_PCD_MspInit+0x48>)
 80098ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80098f0:	61d3      	str	r3, [r2, #28]
 80098f2:	4b0a      	ldr	r3, [pc, #40]	; (800991c <HAL_PCD_MspInit+0x48>)
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80098fe:	2200      	movs	r2, #0
 8009900:	2105      	movs	r1, #5
 8009902:	2014      	movs	r0, #20
 8009904:	f7f6 ffbf 	bl	8000886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009908:	2014      	movs	r0, #20
 800990a:	f7f6 ffd8 	bl	80008be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800990e:	bf00      	nop
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	40005c00 	.word	0x40005c00
 800991c:	40021000 	.word	0x40021000

08009920 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009934:	4619      	mov	r1, r3
 8009936:	4610      	mov	r0, r2
 8009938:	f7fb fd9b 	bl	8005472 <USBD_LL_SetupStage>
}
 800993c:	bf00      	nop
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009956:	78fa      	ldrb	r2, [r7, #3]
 8009958:	6879      	ldr	r1, [r7, #4]
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	00db      	lsls	r3, r3, #3
 8009962:	440b      	add	r3, r1
 8009964:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	78fb      	ldrb	r3, [r7, #3]
 800996c:	4619      	mov	r1, r3
 800996e:	f7fb fdcb 	bl	8005508 <USBD_LL_DataOutStage>
}
 8009972:	bf00      	nop
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800998c:	78fa      	ldrb	r2, [r7, #3]
 800998e:	6879      	ldr	r1, [r7, #4]
 8009990:	4613      	mov	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	00db      	lsls	r3, r3, #3
 8009998:	440b      	add	r3, r1
 800999a:	333c      	adds	r3, #60	; 0x3c
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	78fb      	ldrb	r3, [r7, #3]
 80099a0:	4619      	mov	r1, r3
 80099a2:	f7fb fe22 	bl	80055ea <USBD_LL_DataInStage>
}
 80099a6:	bf00      	nop
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b082      	sub	sp, #8
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fb ff32 	bl	8005826 <USBD_LL_SOF>
}
 80099c2:	bf00      	nop
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80099d2:	2301      	movs	r3, #1
 80099d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d001      	beq.n	80099e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80099de:	f7f6 fd85 	bl	80004ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80099e8:	7bfa      	ldrb	r2, [r7, #15]
 80099ea:	4611      	mov	r1, r2
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fb fee2 	bl	80057b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fb fe9b 	bl	8005734 <USBD_LL_Reset>
}
 80099fe:	bf00      	nop
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fb fedc 	bl	80057d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d005      	beq.n	8009a30 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a24:	4b04      	ldr	r3, [pc, #16]	; (8009a38 <HAL_PCD_SuspendCallback+0x30>)
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	4a03      	ldr	r2, [pc, #12]	; (8009a38 <HAL_PCD_SuspendCallback+0x30>)
 8009a2a:	f043 0306 	orr.w	r3, r3, #6
 8009a2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	e000ed00 	.word	0xe000ed00

08009a3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fb fed6 	bl	80057fc <USBD_LL_Resume>
}
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009a60:	4a28      	ldr	r2, [pc, #160]	; (8009b04 <USBD_LL_Init+0xac>)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a26      	ldr	r2, [pc, #152]	; (8009b04 <USBD_LL_Init+0xac>)
 8009a6c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009a70:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <USBD_LL_Init+0xac>)
 8009a72:	4a25      	ldr	r2, [pc, #148]	; (8009b08 <USBD_LL_Init+0xb0>)
 8009a74:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009a76:	4b23      	ldr	r3, [pc, #140]	; (8009b04 <USBD_LL_Init+0xac>)
 8009a78:	2208      	movs	r2, #8
 8009a7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009a7c:	4b21      	ldr	r3, [pc, #132]	; (8009b04 <USBD_LL_Init+0xac>)
 8009a7e:	2202      	movs	r2, #2
 8009a80:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009a82:	4b20      	ldr	r3, [pc, #128]	; (8009b04 <USBD_LL_Init+0xac>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009a88:	4b1e      	ldr	r3, [pc, #120]	; (8009b04 <USBD_LL_Init+0xac>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009a8e:	4b1d      	ldr	r3, [pc, #116]	; (8009b04 <USBD_LL_Init+0xac>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009a94:	481b      	ldr	r0, [pc, #108]	; (8009b04 <USBD_LL_Init+0xac>)
 8009a96:	f7f7 f8b8 	bl	8000c0a <HAL_PCD_Init>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009aa0:	f7f6 fd24 	bl	80004ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009aaa:	2318      	movs	r3, #24
 8009aac:	2200      	movs	r2, #0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	f7f8 fbec 	bl	800228c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009aba:	2358      	movs	r3, #88	; 0x58
 8009abc:	2200      	movs	r2, #0
 8009abe:	2180      	movs	r1, #128	; 0x80
 8009ac0:	f7f8 fbe4 	bl	800228c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009aca:	23c0      	movs	r3, #192	; 0xc0
 8009acc:	2200      	movs	r2, #0
 8009ace:	2181      	movs	r1, #129	; 0x81
 8009ad0:	f7f8 fbdc 	bl	800228c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ada:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	f7f8 fbd3 	bl	800228c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009af0:	2200      	movs	r2, #0
 8009af2:	2182      	movs	r1, #130	; 0x82
 8009af4:	f7f8 fbca 	bl	800228c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	200036f8 	.word	0x200036f8
 8009b08:	40005c00 	.word	0x40005c00

08009b0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7f7 f97c 	bl	8000e20 <HAL_PCD_Start>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 f94e 	bl	8009dd0 <USBD_Get_USB_Status>
 8009b34:	4603      	mov	r3, r0
 8009b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b084      	sub	sp, #16
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	4608      	mov	r0, r1
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	461a      	mov	r2, r3
 8009b50:	4603      	mov	r3, r0
 8009b52:	70fb      	strb	r3, [r7, #3]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70bb      	strb	r3, [r7, #2]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b6a:	78bb      	ldrb	r3, [r7, #2]
 8009b6c:	883a      	ldrh	r2, [r7, #0]
 8009b6e:	78f9      	ldrb	r1, [r7, #3]
 8009b70:	f7f7 faf6 	bl	8001160 <HAL_PCD_EP_Open>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 f928 	bl	8009dd0 <USBD_Get_USB_Status>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b084      	sub	sp, #16
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	460b      	mov	r3, r1
 8009b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ba8:	78fa      	ldrb	r2, [r7, #3]
 8009baa:	4611      	mov	r1, r2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7f7 fb3d 	bl	800122c <HAL_PCD_EP_Close>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 f909 	bl	8009dd0 <USBD_Get_USB_Status>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009be6:	78fa      	ldrb	r2, [r7, #3]
 8009be8:	4611      	mov	r1, r2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7f7 fbfd 	bl	80013ea <HAL_PCD_EP_SetStall>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 f8ea 	bl	8009dd0 <USBD_Get_USB_Status>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	460b      	mov	r3, r1
 8009c14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c24:	78fa      	ldrb	r2, [r7, #3]
 8009c26:	4611      	mov	r1, r2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7f7 fc3e 	bl	80014aa <HAL_PCD_EP_ClrStall>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f000 f8cb 	bl	8009dd0 <USBD_Get_USB_Status>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	da0c      	bge.n	8009c7e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c6a:	68f9      	ldr	r1, [r7, #12]
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	4613      	mov	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	00db      	lsls	r3, r3, #3
 8009c76:	440b      	add	r3, r1
 8009c78:	3302      	adds	r3, #2
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	e00b      	b.n	8009c96 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c84:	68f9      	ldr	r1, [r7, #12]
 8009c86:	4613      	mov	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	00db      	lsls	r3, r3, #3
 8009c8e:	440b      	add	r3, r1
 8009c90:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009c94:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bc80      	pop	{r7}
 8009c9e:	4770      	bx	lr

08009ca0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cba:	78fa      	ldrb	r2, [r7, #3]
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7f7 fa29 	bl	8001116 <HAL_PCD_SetAddress>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 f880 	bl	8009dd0 <USBD_Get_USB_Status>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b086      	sub	sp, #24
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	60f8      	str	r0, [r7, #12]
 8009ce6:	607a      	str	r2, [r7, #4]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	460b      	mov	r3, r1
 8009cec:	72fb      	strb	r3, [r7, #11]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d00:	893b      	ldrh	r3, [r7, #8]
 8009d02:	7af9      	ldrb	r1, [r7, #11]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	f7f7 fb2d 	bl	8001364 <HAL_PCD_EP_Transmit>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 f85d 	bl	8009dd0 <USBD_Get_USB_Status>
 8009d16:	4603      	mov	r3, r0
 8009d18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	607a      	str	r2, [r7, #4]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	460b      	mov	r3, r1
 8009d32:	72fb      	strb	r3, [r7, #11]
 8009d34:	4613      	mov	r3, r2
 8009d36:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d46:	893b      	ldrh	r3, [r7, #8]
 8009d48:	7af9      	ldrb	r1, [r7, #11]
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	f7f7 fab6 	bl	80012bc <HAL_PCD_EP_Receive>
 8009d50:	4603      	mov	r3, r0
 8009d52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 f83a 	bl	8009dd0 <USBD_Get_USB_Status>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d60:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b082      	sub	sp, #8
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	460b      	mov	r3, r1
 8009d74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d7c:	78fa      	ldrb	r2, [r7, #3]
 8009d7e:	4611      	mov	r1, r2
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7f7 fad8 	bl	8001336 <HAL_PCD_EP_GetRxCount>
 8009d86:	4603      	mov	r3, r0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d98:	4b02      	ldr	r3, [pc, #8]	; (8009da4 <USBD_static_malloc+0x14>)
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bc80      	pop	{r7}
 8009da2:	4770      	bx	lr
 8009da4:	20002ee4 	.word	0x20002ee4

08009da8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]

}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bc80      	pop	{r7}
 8009db8:	4770      	bx	lr

08009dba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b083      	sub	sp, #12
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009dc6:	bf00      	nop
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bc80      	pop	{r7}
 8009dce:	4770      	bx	lr

08009dd0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009dde:	79fb      	ldrb	r3, [r7, #7]
 8009de0:	2b03      	cmp	r3, #3
 8009de2:	d817      	bhi.n	8009e14 <USBD_Get_USB_Status+0x44>
 8009de4:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <USBD_Get_USB_Status+0x1c>)
 8009de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dea:	bf00      	nop
 8009dec:	08009dfd 	.word	0x08009dfd
 8009df0:	08009e03 	.word	0x08009e03
 8009df4:	08009e09 	.word	0x08009e09
 8009df8:	08009e0f 	.word	0x08009e0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8009e00:	e00b      	b.n	8009e1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e02:	2302      	movs	r3, #2
 8009e04:	73fb      	strb	r3, [r7, #15]
    break;
 8009e06:	e008      	b.n	8009e1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e0c:	e005      	b.n	8009e1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e0e:	2302      	movs	r3, #2
 8009e10:	73fb      	strb	r3, [r7, #15]
    break;
 8009e12:	e002      	b.n	8009e1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e14:	2302      	movs	r3, #2
 8009e16:	73fb      	strb	r3, [r7, #15]
    break;
 8009e18:	bf00      	nop
  }
  return usb_status;
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop

08009e28 <__libc_init_array>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	2500      	movs	r5, #0
 8009e2c:	4e0c      	ldr	r6, [pc, #48]	; (8009e60 <__libc_init_array+0x38>)
 8009e2e:	4c0d      	ldr	r4, [pc, #52]	; (8009e64 <__libc_init_array+0x3c>)
 8009e30:	1ba4      	subs	r4, r4, r6
 8009e32:	10a4      	asrs	r4, r4, #2
 8009e34:	42a5      	cmp	r5, r4
 8009e36:	d109      	bne.n	8009e4c <__libc_init_array+0x24>
 8009e38:	f000 f842 	bl	8009ec0 <_init>
 8009e3c:	2500      	movs	r5, #0
 8009e3e:	4e0a      	ldr	r6, [pc, #40]	; (8009e68 <__libc_init_array+0x40>)
 8009e40:	4c0a      	ldr	r4, [pc, #40]	; (8009e6c <__libc_init_array+0x44>)
 8009e42:	1ba4      	subs	r4, r4, r6
 8009e44:	10a4      	asrs	r4, r4, #2
 8009e46:	42a5      	cmp	r5, r4
 8009e48:	d105      	bne.n	8009e56 <__libc_init_array+0x2e>
 8009e4a:	bd70      	pop	{r4, r5, r6, pc}
 8009e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e50:	4798      	blx	r3
 8009e52:	3501      	adds	r5, #1
 8009e54:	e7ee      	b.n	8009e34 <__libc_init_array+0xc>
 8009e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e5a:	4798      	blx	r3
 8009e5c:	3501      	adds	r5, #1
 8009e5e:	e7f2      	b.n	8009e46 <__libc_init_array+0x1e>
 8009e60:	0800a068 	.word	0x0800a068
 8009e64:	0800a068 	.word	0x0800a068
 8009e68:	0800a068 	.word	0x0800a068
 8009e6c:	0800a06c 	.word	0x0800a06c

08009e70 <memcpy>:
 8009e70:	b510      	push	{r4, lr}
 8009e72:	1e43      	subs	r3, r0, #1
 8009e74:	440a      	add	r2, r1
 8009e76:	4291      	cmp	r1, r2
 8009e78:	d100      	bne.n	8009e7c <memcpy+0xc>
 8009e7a:	bd10      	pop	{r4, pc}
 8009e7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e84:	e7f7      	b.n	8009e76 <memcpy+0x6>

08009e86 <memset>:
 8009e86:	4603      	mov	r3, r0
 8009e88:	4402      	add	r2, r0
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d100      	bne.n	8009e90 <memset+0xa>
 8009e8e:	4770      	bx	lr
 8009e90:	f803 1b01 	strb.w	r1, [r3], #1
 8009e94:	e7f9      	b.n	8009e8a <memset+0x4>

08009e96 <strncpy>:
 8009e96:	b570      	push	{r4, r5, r6, lr}
 8009e98:	4604      	mov	r4, r0
 8009e9a:	3901      	subs	r1, #1
 8009e9c:	b902      	cbnz	r2, 8009ea0 <strncpy+0xa>
 8009e9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ea0:	4623      	mov	r3, r4
 8009ea2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009ea6:	1e56      	subs	r6, r2, #1
 8009ea8:	f803 5b01 	strb.w	r5, [r3], #1
 8009eac:	b92d      	cbnz	r5, 8009eba <strncpy+0x24>
 8009eae:	4414      	add	r4, r2
 8009eb0:	42a3      	cmp	r3, r4
 8009eb2:	d0f4      	beq.n	8009e9e <strncpy+0x8>
 8009eb4:	f803 5b01 	strb.w	r5, [r3], #1
 8009eb8:	e7fa      	b.n	8009eb0 <strncpy+0x1a>
 8009eba:	461c      	mov	r4, r3
 8009ebc:	4632      	mov	r2, r6
 8009ebe:	e7ed      	b.n	8009e9c <strncpy+0x6>

08009ec0 <_init>:
 8009ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec2:	bf00      	nop
 8009ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec6:	bc08      	pop	{r3}
 8009ec8:	469e      	mov	lr, r3
 8009eca:	4770      	bx	lr

08009ecc <_fini>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	bf00      	nop
 8009ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed2:	bc08      	pop	{r3}
 8009ed4:	469e      	mov	lr, r3
 8009ed6:	4770      	bx	lr
