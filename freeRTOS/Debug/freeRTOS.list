
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097fc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800990c  0800990c  0001990c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a98  08009a98  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009a98  08009a98  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a98  08009a98  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a9c  08009a9c  00019a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027e4  20000180  08009c20  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002964  08009c20  00022964  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e119  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fbd  00000000  00000000  0003e2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001230  00000000  00000000  00042280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001058  00000000  00000000  000434b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b741  00000000  00000000  00044508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000135bb  00000000  00000000  0005fc49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e507  00000000  00000000  00073204  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010170b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004820  00000000  00000000  00101788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	080098f4 	.word	0x080098f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	080098f4 	.word	0x080098f4

08000150 <PCB_Init>:

#include "PCB_BluePill.h"
#include "main.h"

void PCB_Init()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000154:	2201      	movs	r2, #1
 8000156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015a:	4802      	ldr	r0, [pc, #8]	; (8000164 <PCB_Init+0x14>)
 800015c:	f000 fd4c 	bl	8000bf8 <HAL_GPIO_WritePin>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	40011000 	.word	0x40011000

08000168 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	4802      	ldr	r0, [pc, #8]	; (800017c <PCB_LED_Toggle+0x14>)
 8000172:	f000 fd59 	bl	8000c28 <HAL_GPIO_TogglePin>
}
 8000176:	bf00      	nop
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	40011000 	.word	0x40011000

08000180 <freeRTOS_Tasks_Ini>:


// Внимание! QueueHandle_t является более современным аналогом xQueueHandle. Разобраться с этим позже

void freeRTOS_Tasks_Ini (void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8
	xQueue1 = xQueueCreate(4, sizeof(char)); // Создание очереди из 4 элементов размерностью 8 бит
 8000186:	2200      	movs	r2, #0
 8000188:	2101      	movs	r1, #1
 800018a:	2004      	movs	r0, #4
 800018c:	f006 fc94 	bl	8006ab8 <xQueueGenericCreate>
 8000190:	4602      	mov	r2, r0
 8000192:	4b23      	ldr	r3, [pc, #140]	; (8000220 <freeRTOS_Tasks_Ini+0xa0>)
 8000194:	601a      	str	r2, [r3, #0]

	xTaskCreate(vTask_USB_Init, "Task_USB_Init", 100, NULL, 2, NULL); // З-а сброса лнии D+ после каждого запуска МК. Необхадимо для определения устройсва на шине USB.
 8000196:	2300      	movs	r3, #0
 8000198:	9301      	str	r3, [sp, #4]
 800019a:	2302      	movs	r3, #2
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2300      	movs	r3, #0
 80001a0:	2264      	movs	r2, #100	; 0x64
 80001a2:	4920      	ldr	r1, [pc, #128]	; (8000224 <freeRTOS_Tasks_Ini+0xa4>)
 80001a4:	4820      	ldr	r0, [pc, #128]	; (8000228 <freeRTOS_Tasks_Ini+0xa8>)
 80001a6:	f007 f916 	bl	80073d6 <xTaskCreate>
	//xTaskCreate(vTask_Transmit_VCP, "Task_Transmit_VCP", 120, NULL, 1, NULL); // З-а переиодческой отправки сообщения в VCP. Задача должна быть запущена после удаления vTask_USB_Init.
	//xTaskCreate(vTask_Transmit_VCP_2, "Task_Transmit_VCP_2", 120, (void*) USB_Tx_Buf_Task2, 1, NULL); // Вывод второго тестового сообщения

	Delay_LED = 500;
 80001aa:	4b20      	ldr	r3, [pc, #128]	; (800022c <freeRTOS_Tasks_Ini+0xac>)
 80001ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001b0:	801a      	strh	r2, [r3, #0]
	pDelay_LED = &Delay_LED;
 80001b2:	4b1f      	ldr	r3, [pc, #124]	; (8000230 <freeRTOS_Tasks_Ini+0xb0>)
 80001b4:	4a1d      	ldr	r2, [pc, #116]	; (800022c <freeRTOS_Tasks_Ini+0xac>)
 80001b6:	601a      	str	r2, [r3, #0]


	if(xQueue1 != NULL) // Если очередь создалась успешно (хватило место в куче), то создать задачи отправки получения данных
 80001b8:	4b19      	ldr	r3, [pc, #100]	; (8000220 <freeRTOS_Tasks_Ini+0xa0>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d029      	beq.n	8000214 <freeRTOS_Tasks_Ini+0x94>
	{
		xTaskCreate(vTask_Queue_Data_Send, "Task_Queue_Data_Send", 200, NULL, 1, NULL); // З-а отправки данных в очередь
 80001c0:	2300      	movs	r3, #0
 80001c2:	9301      	str	r3, [sp, #4]
 80001c4:	2301      	movs	r3, #1
 80001c6:	9300      	str	r3, [sp, #0]
 80001c8:	2300      	movs	r3, #0
 80001ca:	22c8      	movs	r2, #200	; 0xc8
 80001cc:	4919      	ldr	r1, [pc, #100]	; (8000234 <freeRTOS_Tasks_Ini+0xb4>)
 80001ce:	481a      	ldr	r0, [pc, #104]	; (8000238 <freeRTOS_Tasks_Ini+0xb8>)
 80001d0:	f007 f901 	bl	80073d6 <xTaskCreate>
		xTaskCreate(vTask_Queue_Data_Recieve, "Task_Queue_Data_Recieve", 200, NULL, 1, NULL); // З-а которая получает данные из очереди и отправляет тестовое сообщение.
 80001d4:	2300      	movs	r3, #0
 80001d6:	9301      	str	r3, [sp, #4]
 80001d8:	2301      	movs	r3, #1
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	2300      	movs	r3, #0
 80001de:	22c8      	movs	r2, #200	; 0xc8
 80001e0:	4916      	ldr	r1, [pc, #88]	; (800023c <freeRTOS_Tasks_Ini+0xbc>)
 80001e2:	4817      	ldr	r0, [pc, #92]	; (8000240 <freeRTOS_Tasks_Ini+0xc0>)
 80001e4:	f007 f8f7 	bl	80073d6 <xTaskCreate>

		if (xTaskCreate(vTask_PCB_LED_Blink, "Task_PCB_LED_Blink", 200, (void*) pDelay_LED, 1, NULL) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY) // З-а мигания LED
 80001e8:	4b11      	ldr	r3, [pc, #68]	; (8000230 <freeRTOS_Tasks_Ini+0xb0>)
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	2300      	movs	r3, #0
 80001ee:	9301      	str	r3, [sp, #4]
 80001f0:	2301      	movs	r3, #1
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	4613      	mov	r3, r2
 80001f6:	22c8      	movs	r2, #200	; 0xc8
 80001f8:	4912      	ldr	r1, [pc, #72]	; (8000244 <freeRTOS_Tasks_Ini+0xc4>)
 80001fa:	4813      	ldr	r0, [pc, #76]	; (8000248 <freeRTOS_Tasks_Ini+0xc8>)
 80001fc:	f007 f8eb 	bl	80073d6 <xTaskCreate>
 8000200:	4603      	mov	r3, r0
 8000202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000206:	d105      	bne.n	8000214 <freeRTOS_Tasks_Ini+0x94>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020e:	480f      	ldr	r0, [pc, #60]	; (800024c <freeRTOS_Tasks_Ini+0xcc>)
 8000210:	f000 fcf2 	bl	8000bf8 <HAL_GPIO_WritePin>
	{
		//Если все хорошо то ветка else не исполнится, что означает что очередь создана.

	}

	osKernelStart();
 8000214:	f006 f988 	bl	8006528 <osKernelStart>

}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	200020e4 	.word	0x200020e4
 8000224:	0800991c 	.word	0x0800991c
 8000228:	08000319 	.word	0x08000319
 800022c:	200020e8 	.word	0x200020e8
 8000230:	200020e0 	.word	0x200020e0
 8000234:	0800992c 	.word	0x0800992c
 8000238:	08000251 	.word	0x08000251
 800023c:	08009944 	.word	0x08009944
 8000240:	08000299 	.word	0x08000299
 8000244:	0800995c 	.word	0x0800995c
 8000248:	08000379 	.word	0x08000379
 800024c:	40011000 	.word	0x40011000

08000250 <vTask_Queue_Data_Send>:



void vTask_Queue_Data_Send(void *pvParameters)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	char Queue_Data_Send = 'Q'; // Передаваемы данные
 8000258:	2351      	movs	r3, #81	; 0x51
 800025a:	72fb      	strb	r3, [r7, #11]
	{
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

		// Отправка данных в очередь xQueue1, данные - Queue_Data, время ожидания появления свободного места в очереди 0, т.е. в очереди должны быть хотя бы одно свободное место

		xStatus = xQueueSendToBack(xQueue1, &Queue_Data_Send, 0);
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <vTask_Queue_Data_Send+0x40>)
 800025e:	6818      	ldr	r0, [r3, #0]
 8000260:	f107 010b 	add.w	r1, r7, #11
 8000264:	2300      	movs	r3, #0
 8000266:	2200      	movs	r2, #0
 8000268:	f006 fc86 	bl	8006b78 <xQueueGenericSend>
 800026c:	60f8      	str	r0, [r7, #12]

		if (xStatus != pdPASS)
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d007      	beq.n	8000284 <vTask_Queue_Data_Send+0x34>
		{
			while (CDC_Transmit_FS((unsigned char*)"Could not send to the queue.\r\n", strlen("Could not send to the queue.\r\n"))); // Если не было свободного места в очереди
 8000274:	bf00      	nop
 8000276:	211e      	movs	r1, #30
 8000278:	4806      	ldr	r0, [pc, #24]	; (8000294 <vTask_Queue_Data_Send+0x44>)
 800027a:	f008 ff25 	bl	80090c8 <CDC_Transmit_FS>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1f8      	bne.n	8000276 <vTask_Queue_Data_Send+0x26>
		/*Вызов taskYIELD() информирует шедулер, что сейчас сразу
        нужно переключиться к другой задаче, а не поддерживать эту задачу в
        состоянии Running до окончания текущего слайса времени*/

		//taskYIELD();
		vTaskDelay(500 / portTICK_RATE_MS );
 8000284:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000288:	f007 fa52 	bl	8007730 <vTaskDelay>
		xStatus = xQueueSendToBack(xQueue1, &Queue_Data_Send, 0);
 800028c:	e7e6      	b.n	800025c <vTask_Queue_Data_Send+0xc>
 800028e:	bf00      	nop
 8000290:	200020e4 	.word	0x200020e4
 8000294:	08009970 	.word	0x08009970

08000298 <vTask_Queue_Data_Recieve>:
	}
	vTaskDelete(NULL);
}

void vTask_Queue_Data_Recieve(void *pvParameters)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	{
		// Попытаться (если очередь не пуста) получить данные из очереди



		xStatus = xQueueReceive(xQueue1, &Queue_Data_Recieve, 150); // Очередь откуда брать данные, переменная куда сохраняются данные, время ожидания появления данных в очереди
 80002a0:	4b19      	ldr	r3, [pc, #100]	; (8000308 <vTask_Queue_Data_Recieve+0x70>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f107 010b 	add.w	r1, r7, #11
 80002a8:	2296      	movs	r2, #150	; 0x96
 80002aa:	4618      	mov	r0, r3
 80002ac:	f006 fdf2 	bl	8006e94 <xQueueReceive>
 80002b0:	60f8      	str	r0, [r7, #12]

		if(xStatus == pdPASS)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d11a      	bne.n	80002ee <vTask_Queue_Data_Recieve+0x56>
		{
			while (CDC_Transmit_FS((unsigned char*)"Received from xQueue1 = ", strlen("Received from xQueue1 = ")));
 80002b8:	bf00      	nop
 80002ba:	2118      	movs	r1, #24
 80002bc:	4813      	ldr	r0, [pc, #76]	; (800030c <vTask_Queue_Data_Recieve+0x74>)
 80002be:	f008 ff03 	bl	80090c8 <CDC_Transmit_FS>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1f8      	bne.n	80002ba <vTask_Queue_Data_Recieve+0x22>
			while (CDC_Transmit_FS((unsigned char*) &Queue_Data_Recieve, 1));
 80002c8:	bf00      	nop
 80002ca:	f107 030b 	add.w	r3, r7, #11
 80002ce:	2101      	movs	r1, #1
 80002d0:	4618      	mov	r0, r3
 80002d2:	f008 fef9 	bl	80090c8 <CDC_Transmit_FS>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d1f6      	bne.n	80002ca <vTask_Queue_Data_Recieve+0x32>
			while (CDC_Transmit_FS((unsigned char*)"\r\n", strlen("\r\n")));
 80002dc:	bf00      	nop
 80002de:	2102      	movs	r1, #2
 80002e0:	480b      	ldr	r0, [pc, #44]	; (8000310 <vTask_Queue_Data_Recieve+0x78>)
 80002e2:	f008 fef1 	bl	80090c8 <CDC_Transmit_FS>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1f8      	bne.n	80002de <vTask_Queue_Data_Recieve+0x46>
 80002ec:	e007      	b.n	80002fe <vTask_Queue_Data_Recieve+0x66>
		}
		else
		{
			while (CDC_Transmit_FS((unsigned char*)"Could not receive from the queue.\r\n", strlen("Could not receive from the queue.\r\n")));
 80002ee:	bf00      	nop
 80002f0:	2123      	movs	r1, #35	; 0x23
 80002f2:	4808      	ldr	r0, [pc, #32]	; (8000314 <vTask_Queue_Data_Recieve+0x7c>)
 80002f4:	f008 fee8 	bl	80090c8 <CDC_Transmit_FS>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d1f8      	bne.n	80002f0 <vTask_Queue_Data_Recieve+0x58>
		}
		vTaskDelay(500 / portTICK_RATE_MS );
 80002fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000302:	f007 fa15 	bl	8007730 <vTaskDelay>
		xStatus = xQueueReceive(xQueue1, &Queue_Data_Recieve, 150); // Очередь откуда брать данные, переменная куда сохраняются данные, время ожидания появления данных в очереди
 8000306:	e7cb      	b.n	80002a0 <vTask_Queue_Data_Recieve+0x8>
 8000308:	200020e4 	.word	0x200020e4
 800030c:	08009990 	.word	0x08009990
 8000310:	080099ac 	.word	0x080099ac
 8000314:	080099b0 	.word	0x080099b0

08000318 <vTask_USB_Init>:
	vTaskDelete(NULL);

}

void vTask_USB_Init(void *pvParameters)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	// НЕ ЗАБЫТЬ ЗАКОММЕНТИТЬ ВЫЗОВ MX_USB_DEVICE_Init(); ИЗ ЗАДАЧИ StartDefaultTask (main.c) ПОСЛЕ КАЖДОЙ ГЕНЕРАЦИИ ПРОЕКТА!!!

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000320:	f107 0308 	add.w	r3, r7, #8
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800032e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000332:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000334:	2301      	movs	r3, #1
 8000336:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033c:	2302      	movs	r3, #2
 800033e:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000340:	f107 0308 	add.w	r3, r7, #8
 8000344:	4619      	mov	r1, r3
 8000346:	480b      	ldr	r0, [pc, #44]	; (8000374 <vTask_USB_Init+0x5c>)
 8000348:	f000 fafc 	bl	8000944 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000352:	4808      	ldr	r0, [pc, #32]	; (8000374 <vTask_USB_Init+0x5c>)
 8000354:	f000 fc50 	bl	8000bf8 <HAL_GPIO_WritePin>

	  vTaskDelay(2000 / portTICK_RATE_MS );
 8000358:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800035c:	f007 f9e8 	bl	8007730 <vTaskDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 8000360:	f008 fdf4 	bl	8008f4c <MX_USB_DEVICE_Init>

	  vTaskDelete(NULL); // Удаленеи задачи самой себя
 8000364:	2000      	movs	r0, #0
 8000366:	f007 f971 	bl	800764c <vTaskDelete>

	for(;;)
	{
		vTaskDelay(1000 / portTICK_RATE_MS );
 800036a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800036e:	f007 f9df 	bl	8007730 <vTaskDelay>
 8000372:	e7fa      	b.n	800036a <vTask_USB_Init+0x52>
 8000374:	40010800 	.word	0x40010800

08000378 <vTask_PCB_LED_Blink>:
	}
	vTaskDelete(NULL);
}

void vTask_PCB_LED_Blink(void *pvParameters)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]

	uint16_t *pDelay_LED = (uint16_t*) pvParameters; // Получение параметра с привденем к иходному типу данных - uint16_t
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
	PCB_LED_Toggle();
 8000384:	f7ff fef0 	bl	8000168 <PCB_LED_Toggle>
	vTaskDelay(*pDelay_LED / portTICK_RATE_MS ); // Разыменование т.е. передача значения задержки
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	4618      	mov	r0, r3
 800038e:	f007 f9cf 	bl	8007730 <vTaskDelay>
	PCB_LED_Toggle();
 8000392:	f7ff fee9 	bl	8000168 <PCB_LED_Toggle>
	vTaskDelay(*(uint16_t*)pvParameters / portTICK_RATE_MS ); // Можно и без промежуточных переменных, привести pvParameters к указателю uint16_t "(uint16_t*)pvParameters", а затем разименовать
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f007 f9c8 	bl	8007730 <vTaskDelay>
	PCB_LED_Toggle();
 80003a0:	e7f0      	b.n	8000384 <vTask_PCB_LED_Blink+0xc>
	...

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a8:	f000 f95c 	bl	8000664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ac:	f000 f818 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b0:	f000 f870 	bl	8000494 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003b4:	f006 f886 	bl	80064c4 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003b8:	4a06      	ldr	r2, [pc, #24]	; (80003d4 <main+0x30>)
 80003ba:	2100      	movs	r1, #0
 80003bc:	4806      	ldr	r0, [pc, #24]	; (80003d8 <main+0x34>)
 80003be:	f006 f8e7 	bl	8006590 <osThreadNew>
 80003c2:	4602      	mov	r2, r0
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <main+0x38>)
 80003c6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  PCB_Init();
 80003c8:	f7ff fec2 	bl	8000150 <PCB_Init>
  freeRTOS_Tasks_Ini();
 80003cc:	f7ff fed8 	bl	8000180 <freeRTOS_Tasks_Ini>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <main+0x2c>
 80003d2:	bf00      	nop
 80003d4:	08009a64 	.word	0x08009a64
 80003d8:	0800052d 	.word	0x0800052d
 80003dc:	200020ec 	.word	0x200020ec

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b094      	sub	sp, #80	; 0x50
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ea:	2228      	movs	r2, #40	; 0x28
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f009 fa77 	bl	80098e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	f107 0314 	add.w	r3, r7, #20
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000410:	2301      	movs	r3, #1
 8000412:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000418:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041e:	2301      	movs	r3, #1
 8000420:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000422:	2302      	movs	r3, #2
 8000424:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800042a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800042c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000430:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000432:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000436:	4618      	mov	r0, r3
 8000438:	f001 ff92 	bl	8002360 <HAL_RCC_OscConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000442:	f000 f87b 	bl	800053c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000446:	230f      	movs	r3, #15
 8000448:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044a:	2302      	movs	r3, #2
 800044c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000456:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800045c:	f107 0314 	add.w	r3, r7, #20
 8000460:	2102      	movs	r1, #2
 8000462:	4618      	mov	r0, r3
 8000464:	f002 f9fc 	bl	8002860 <HAL_RCC_ClockConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800046e:	f000 f865 	bl	800053c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000472:	2310      	movs	r3, #16
 8000474:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4618      	mov	r0, r3
 800047e:	f002 fb59 	bl	8002b34 <HAL_RCCEx_PeriphCLKConfig>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000488:	f000 f858 	bl	800053c <Error_Handler>
  }
}
 800048c:	bf00      	nop
 800048e:	3750      	adds	r7, #80	; 0x50
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <MX_GPIO_Init+0x90>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <MX_GPIO_Init+0x90>)
 80004ae:	f043 0310 	orr.w	r3, r3, #16
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_GPIO_Init+0x90>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0310 	and.w	r3, r3, #16
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_GPIO_Init+0x90>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a17      	ldr	r2, [pc, #92]	; (8000524 <MX_GPIO_Init+0x90>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <MX_GPIO_Init+0x90>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0320 	and.w	r3, r3, #32
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b12      	ldr	r3, [pc, #72]	; (8000524 <MX_GPIO_Init+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a11      	ldr	r2, [pc, #68]	; (8000524 <MX_GPIO_Init+0x90>)
 80004de:	f043 0304 	orr.w	r3, r3, #4
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_GPIO_Init+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0304 	and.w	r3, r3, #4
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f6:	480c      	ldr	r0, [pc, #48]	; (8000528 <MX_GPIO_Init+0x94>)
 80004f8:	f000 fb7e 	bl	8000bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2302      	movs	r3, #2
 800050c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <MX_GPIO_Init+0x94>)
 8000516:	f000 fa15 	bl	8000944 <HAL_GPIO_Init>

}
 800051a:	bf00      	nop
 800051c:	3720      	adds	r7, #32
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000
 8000528:	40011000 	.word	0x40011000

0800052c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
osDelay(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f006 f8d5 	bl	80066e4 <osDelay>
 800053a:	e7fb      	b.n	8000534 <StartDefaultTask+0x8>

0800053c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000540:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000542:	e7fe      	b.n	8000542 <Error_Handler+0x6>

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <HAL_MspInit+0x68>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a17      	ldr	r2, [pc, #92]	; (80005ac <HAL_MspInit+0x68>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_MspInit+0x68>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_MspInit+0x68>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a11      	ldr	r2, [pc, #68]	; (80005ac <HAL_MspInit+0x68>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <HAL_MspInit+0x68>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	210f      	movs	r1, #15
 800057e:	f06f 0001 	mvn.w	r0, #1
 8000582:	f000 f9a8 	bl	80008d6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <HAL_MspInit+0x6c>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_MspInit+0x6c>)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010000 	.word	0x40010000

080005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <NMI_Handler+0x4>

080005ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <HardFault_Handler+0x4>

080005c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <MemManage_Handler+0x4>

080005c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr

080005de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e2:	f000 f885 	bl	80006f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80005e6:	f007 fd15 	bl	8008014 <xTaskGetSchedulerState>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d001      	beq.n	80005f4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80005f0:	f008 fa5a 	bl	8008aa8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005fe:	f000 fc5d 	bl	8000ebc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20002678 	.word	0x20002678

0800060c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000618:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800061a:	e003      	b.n	8000624 <LoopCopyDataInit>

0800061c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800061e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000620:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000622:	3104      	adds	r1, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000624:	480a      	ldr	r0, [pc, #40]	; (8000650 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000628:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800062a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800062c:	d3f6      	bcc.n	800061c <CopyDataInit>
  ldr r2, =_sbss
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000630:	e002      	b.n	8000638 <LoopFillZerobss>

08000632 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000634:	f842 3b04 	str.w	r3, [r2], #4

08000638 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800063a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800063c:	d3f9      	bcc.n	8000632 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800063e:	f7ff ffe5 	bl	800060c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000642:	f009 f91f 	bl	8009884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fead 	bl	80003a4 <main>
  bx lr
 800064a:	4770      	bx	lr
  ldr r3, =_sidata
 800064c:	08009aa0 	.word	0x08009aa0
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000654:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000658:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 800065c:	20002964 	.word	0x20002964

08000660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_2_IRQHandler>
	...

08000664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <HAL_Init+0x28>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_Init+0x28>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f923 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067a:	200f      	movs	r0, #15
 800067c:	f000 f808 	bl	8000690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000680:	f7ff ff60 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40022000 	.word	0x40022000

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x54>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_InitTick+0x58>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f93b 	bl	800092a <HAL_SYSTICK_Config>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e00e      	b.n	80006dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d80a      	bhi.n	80006da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c4:	2200      	movs	r2, #0
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295
 80006cc:	f000 f903 	bl	80008d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <HAL_InitTick+0x5c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x1c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	4a03      	ldr	r2, [pc, #12]	; (8000710 <HAL_IncTick+0x20>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20000008 	.word	0x20000008
 8000710:	200020f0 	.word	0x200020f0

08000714 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <HAL_GetTick+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	200020f0 	.word	0x200020f0

08000728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075a:	4a04      	ldr	r2, [pc, #16]	; (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	60d3      	str	r3, [r2, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <__NVIC_GetPriorityGrouping+0x18>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	f003 0307 	and.w	r3, r3, #7
}
 800077e:	4618      	mov	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	2b00      	cmp	r3, #0
 800079c:	db0b      	blt.n	80007b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f003 021f 	and.w	r2, r3, #31
 80007a4:	4906      	ldr	r1, [pc, #24]	; (80007c0 <__NVIC_EnableIRQ+0x34>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	095b      	lsrs	r3, r3, #5
 80007ac:	2001      	movs	r0, #1
 80007ae:	fa00 f202 	lsl.w	r2, r0, r2
 80007b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100

080007c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	db0a      	blt.n	80007ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	490c      	ldr	r1, [pc, #48]	; (8000810 <__NVIC_SetPriority+0x4c>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	0112      	lsls	r2, r2, #4
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	440b      	add	r3, r1
 80007e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ec:	e00a      	b.n	8000804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4908      	ldr	r1, [pc, #32]	; (8000814 <__NVIC_SetPriority+0x50>)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	f003 030f 	and.w	r3, r3, #15
 80007fa:	3b04      	subs	r3, #4
 80007fc:	0112      	lsls	r2, r2, #4
 80007fe:	b2d2      	uxtb	r2, r2
 8000800:	440b      	add	r3, r1
 8000802:	761a      	strb	r2, [r3, #24]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e100 	.word	0xe000e100
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	f1c3 0307 	rsb	r3, r3, #7
 8000832:	2b04      	cmp	r3, #4
 8000834:	bf28      	it	cs
 8000836:	2304      	movcs	r3, #4
 8000838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3304      	adds	r3, #4
 800083e:	2b06      	cmp	r3, #6
 8000840:	d902      	bls.n	8000848 <NVIC_EncodePriority+0x30>
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3b03      	subs	r3, #3
 8000846:	e000      	b.n	800084a <NVIC_EncodePriority+0x32>
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	f04f 32ff 	mov.w	r2, #4294967295
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43da      	mvns	r2, r3
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	401a      	ands	r2, r3
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000860:	f04f 31ff 	mov.w	r1, #4294967295
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	fa01 f303 	lsl.w	r3, r1, r3
 800086a:	43d9      	mvns	r1, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000870:	4313      	orrs	r3, r2
         );
}
 8000872:	4618      	mov	r0, r3
 8000874:	3724      	adds	r7, #36	; 0x24
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800088c:	d301      	bcc.n	8000892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088e:	2301      	movs	r3, #1
 8000890:	e00f      	b.n	80008b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <SysTick_Config+0x40>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089a:	210f      	movs	r1, #15
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f7ff ff90 	bl	80007c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <SysTick_Config+0x40>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <SysTick_Config+0x40>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff2d 	bl	8000728 <__NVIC_SetPriorityGrouping>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e8:	f7ff ff42 	bl	8000770 <__NVIC_GetPriorityGrouping>
 80008ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	68b9      	ldr	r1, [r7, #8]
 80008f2:	6978      	ldr	r0, [r7, #20]
 80008f4:	f7ff ff90 	bl	8000818 <NVIC_EncodePriority>
 80008f8:	4602      	mov	r2, r0
 80008fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff5f 	bl	80007c4 <__NVIC_SetPriority>
}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff35 	bl	800078c <__NVIC_EnableIRQ>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff ffa2 	bl	800087c <SysTick_Config>
 8000938:	4603      	mov	r3, r0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000944:	b480      	push	{r7}
 8000946:	b08b      	sub	sp, #44	; 0x2c
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000956:	e127      	b.n	8000ba8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000958:	2201      	movs	r2, #1
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	69fa      	ldr	r2, [r7, #28]
 8000968:	4013      	ands	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	429a      	cmp	r2, r3
 8000972:	f040 8116 	bne.w	8000ba2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2b12      	cmp	r3, #18
 800097c:	d034      	beq.n	80009e8 <HAL_GPIO_Init+0xa4>
 800097e:	2b12      	cmp	r3, #18
 8000980:	d80d      	bhi.n	800099e <HAL_GPIO_Init+0x5a>
 8000982:	2b02      	cmp	r3, #2
 8000984:	d02b      	beq.n	80009de <HAL_GPIO_Init+0x9a>
 8000986:	2b02      	cmp	r3, #2
 8000988:	d804      	bhi.n	8000994 <HAL_GPIO_Init+0x50>
 800098a:	2b00      	cmp	r3, #0
 800098c:	d031      	beq.n	80009f2 <HAL_GPIO_Init+0xae>
 800098e:	2b01      	cmp	r3, #1
 8000990:	d01c      	beq.n	80009cc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000992:	e048      	b.n	8000a26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000994:	2b03      	cmp	r3, #3
 8000996:	d043      	beq.n	8000a20 <HAL_GPIO_Init+0xdc>
 8000998:	2b11      	cmp	r3, #17
 800099a:	d01b      	beq.n	80009d4 <HAL_GPIO_Init+0x90>
          break;
 800099c:	e043      	b.n	8000a26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800099e:	4a89      	ldr	r2, [pc, #548]	; (8000bc4 <HAL_GPIO_Init+0x280>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d026      	beq.n	80009f2 <HAL_GPIO_Init+0xae>
 80009a4:	4a87      	ldr	r2, [pc, #540]	; (8000bc4 <HAL_GPIO_Init+0x280>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d806      	bhi.n	80009b8 <HAL_GPIO_Init+0x74>
 80009aa:	4a87      	ldr	r2, [pc, #540]	; (8000bc8 <HAL_GPIO_Init+0x284>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d020      	beq.n	80009f2 <HAL_GPIO_Init+0xae>
 80009b0:	4a86      	ldr	r2, [pc, #536]	; (8000bcc <HAL_GPIO_Init+0x288>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d01d      	beq.n	80009f2 <HAL_GPIO_Init+0xae>
          break;
 80009b6:	e036      	b.n	8000a26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009b8:	4a85      	ldr	r2, [pc, #532]	; (8000bd0 <HAL_GPIO_Init+0x28c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d019      	beq.n	80009f2 <HAL_GPIO_Init+0xae>
 80009be:	4a85      	ldr	r2, [pc, #532]	; (8000bd4 <HAL_GPIO_Init+0x290>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d016      	beq.n	80009f2 <HAL_GPIO_Init+0xae>
 80009c4:	4a84      	ldr	r2, [pc, #528]	; (8000bd8 <HAL_GPIO_Init+0x294>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d013      	beq.n	80009f2 <HAL_GPIO_Init+0xae>
          break;
 80009ca:	e02c      	b.n	8000a26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	623b      	str	r3, [r7, #32]
          break;
 80009d2:	e028      	b.n	8000a26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	3304      	adds	r3, #4
 80009da:	623b      	str	r3, [r7, #32]
          break;
 80009dc:	e023      	b.n	8000a26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	3308      	adds	r3, #8
 80009e4:	623b      	str	r3, [r7, #32]
          break;
 80009e6:	e01e      	b.n	8000a26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	330c      	adds	r3, #12
 80009ee:	623b      	str	r3, [r7, #32]
          break;
 80009f0:	e019      	b.n	8000a26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d102      	bne.n	8000a00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009fa:	2304      	movs	r3, #4
 80009fc:	623b      	str	r3, [r7, #32]
          break;
 80009fe:	e012      	b.n	8000a26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d105      	bne.n	8000a14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	611a      	str	r2, [r3, #16]
          break;
 8000a12:	e008      	b.n	8000a26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a14:	2308      	movs	r3, #8
 8000a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69fa      	ldr	r2, [r7, #28]
 8000a1c:	615a      	str	r2, [r3, #20]
          break;
 8000a1e:	e002      	b.n	8000a26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
          break;
 8000a24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	2bff      	cmp	r3, #255	; 0xff
 8000a2a:	d801      	bhi.n	8000a30 <HAL_GPIO_Init+0xec>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	e001      	b.n	8000a34 <HAL_GPIO_Init+0xf0>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3304      	adds	r3, #4
 8000a34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d802      	bhi.n	8000a42 <HAL_GPIO_Init+0xfe>
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	e002      	b.n	8000a48 <HAL_GPIO_Init+0x104>
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	3b08      	subs	r3, #8
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	210f      	movs	r1, #15
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	401a      	ands	r2, r3
 8000a5a:	6a39      	ldr	r1, [r7, #32]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	431a      	orrs	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f000 8096 	beq.w	8000ba2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a76:	4b59      	ldr	r3, [pc, #356]	; (8000bdc <HAL_GPIO_Init+0x298>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	4a58      	ldr	r2, [pc, #352]	; (8000bdc <HAL_GPIO_Init+0x298>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6193      	str	r3, [r2, #24]
 8000a82:	4b56      	ldr	r3, [pc, #344]	; (8000bdc <HAL_GPIO_Init+0x298>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a8e:	4a54      	ldr	r2, [pc, #336]	; (8000be0 <HAL_GPIO_Init+0x29c>)
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	089b      	lsrs	r3, r3, #2
 8000a94:	3302      	adds	r3, #2
 8000a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	f003 0303 	and.w	r3, r3, #3
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	220f      	movs	r2, #15
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4b      	ldr	r2, [pc, #300]	; (8000be4 <HAL_GPIO_Init+0x2a0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d013      	beq.n	8000ae2 <HAL_GPIO_Init+0x19e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4a      	ldr	r2, [pc, #296]	; (8000be8 <HAL_GPIO_Init+0x2a4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d00d      	beq.n	8000ade <HAL_GPIO_Init+0x19a>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a49      	ldr	r2, [pc, #292]	; (8000bec <HAL_GPIO_Init+0x2a8>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d007      	beq.n	8000ada <HAL_GPIO_Init+0x196>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a48      	ldr	r2, [pc, #288]	; (8000bf0 <HAL_GPIO_Init+0x2ac>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_GPIO_Init+0x192>
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x1a0>
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	e004      	b.n	8000ae4 <HAL_GPIO_Init+0x1a0>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_Init+0x1a0>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <HAL_GPIO_Init+0x1a0>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ae6:	f002 0203 	and.w	r2, r2, #3
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4093      	lsls	r3, r2
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000af4:	493a      	ldr	r1, [pc, #232]	; (8000be0 <HAL_GPIO_Init+0x29c>)
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b0e:	4b39      	ldr	r3, [pc, #228]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4938      	ldr	r1, [pc, #224]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	600b      	str	r3, [r1, #0]
 8000b1a:	e006      	b.n	8000b2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b1c:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	4933      	ldr	r1, [pc, #204]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b26:	4013      	ands	r3, r2
 8000b28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b36:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	492e      	ldr	r1, [pc, #184]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	604b      	str	r3, [r1, #4]
 8000b42:	e006      	b.n	8000b52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b44:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	4929      	ldr	r1, [pc, #164]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d006      	beq.n	8000b6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b5e:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	4924      	ldr	r1, [pc, #144]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	608b      	str	r3, [r1, #8]
 8000b6a:	e006      	b.n	8000b7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	43db      	mvns	r3, r3
 8000b74:	491f      	ldr	r1, [pc, #124]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b76:	4013      	ands	r3, r2
 8000b78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d006      	beq.n	8000b94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b88:	68da      	ldr	r2, [r3, #12]
 8000b8a:	491a      	ldr	r1, [pc, #104]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	60cb      	str	r3, [r1, #12]
 8000b92:	e006      	b.n	8000ba2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b96:	68da      	ldr	r2, [r3, #12]
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	4915      	ldr	r1, [pc, #84]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f47f aed0 	bne.w	8000958 <HAL_GPIO_Init+0x14>
  }
}
 8000bb8:	bf00      	nop
 8000bba:	372c      	adds	r7, #44	; 0x2c
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	10210000 	.word	0x10210000
 8000bc8:	10110000 	.word	0x10110000
 8000bcc:	10120000 	.word	0x10120000
 8000bd0:	10310000 	.word	0x10310000
 8000bd4:	10320000 	.word	0x10320000
 8000bd8:	10220000 	.word	0x10220000
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010000 	.word	0x40010000
 8000be4:	40010800 	.word	0x40010800
 8000be8:	40010c00 	.word	0x40010c00
 8000bec:	40011000 	.word	0x40011000
 8000bf0:	40011400 	.word	0x40011400
 8000bf4:	40010400 	.word	0x40010400

08000bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]
 8000c04:	4613      	mov	r3, r2
 8000c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c08:	787b      	ldrb	r3, [r7, #1]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c14:	e003      	b.n	8000c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	041a      	lsls	r2, r3, #16
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	611a      	str	r2, [r3, #16]
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	041a      	lsls	r2, r3, #16
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	43d9      	mvns	r1, r3
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	400b      	ands	r3, r1
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	611a      	str	r2, [r3, #16]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5c:	b08b      	sub	sp, #44	; 0x2c
 8000c5e:	af06      	add	r7, sp, #24
 8000c60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e0fd      	b.n	8000e68 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d106      	bne.n	8000c86 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f008 fb55 	bl	8009330 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2203      	movs	r2, #3
 8000c8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 f82a 	bl	8002cec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	687e      	ldr	r6, [r7, #4]
 8000ca0:	466d      	mov	r5, sp
 8000ca2:	f106 0410 	add.w	r4, r6, #16
 8000ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	602b      	str	r3, [r5, #0]
 8000cae:	1d33      	adds	r3, r6, #4
 8000cb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cb2:	6838      	ldr	r0, [r7, #0]
 8000cb4:	f001 fff4 	bl	8002ca0 <USB_CoreInit>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d005      	beq.n	8000cca <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e0ce      	b.n	8000e68 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f002 f825 	bl	8002d20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e04c      	b.n	8000d76 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	1c5a      	adds	r2, r3, #1
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	440b      	add	r3, r1
 8000cec:	3301      	adds	r3, #1
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	7bfa      	ldrb	r2, [r7, #15]
 8000d04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d06:	7bfa      	ldrb	r2, [r7, #15]
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	b298      	uxth	r0, r3
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	440b      	add	r3, r1
 8000d18:	3336      	adds	r3, #54	; 0x36
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3303      	adds	r3, #3
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	440b      	add	r3, r1
 8000d42:	3338      	adds	r3, #56	; 0x38
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	440b      	add	r3, r1
 8000d56:	333c      	adds	r3, #60	; 0x3c
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d5c:	7bfa      	ldrb	r2, [r7, #15]
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	4613      	mov	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	440b      	add	r3, r1
 8000d6a:	3340      	adds	r3, #64	; 0x40
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	3301      	adds	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	7bfa      	ldrb	r2, [r7, #15]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d3ad      	bcc.n	8000cdc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	e044      	b.n	8000e10 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	440b      	add	r3, r1
 8000d94:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d9c:	7bfa      	ldrb	r2, [r7, #15]
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	440b      	add	r3, r1
 8000daa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	4613      	mov	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000dc8:	7bfa      	ldrb	r2, [r7, #15]
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	440b      	add	r3, r1
 8000dd6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dde:	7bfa      	ldrb	r2, [r7, #15]
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	440b      	add	r3, r1
 8000dec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000df4:	7bfa      	ldrb	r2, [r7, #15]
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	440b      	add	r3, r1
 8000e02:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	7bfa      	ldrb	r2, [r7, #15]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d3b5      	bcc.n	8000d86 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	687e      	ldr	r6, [r7, #4]
 8000e22:	466d      	mov	r5, sp
 8000e24:	f106 0410 	add.w	r4, r6, #16
 8000e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e2c:	6823      	ldr	r3, [r4, #0]
 8000e2e:	602b      	str	r3, [r5, #0]
 8000e30:	1d33      	adds	r3, r6, #4
 8000e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e34:	6838      	ldr	r0, [r7, #0]
 8000e36:	f001 ff7f 	bl	8002d38 <USB_DevInit>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d005      	beq.n	8000e4c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2202      	movs	r2, #2
 8000e44:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e00d      	b.n	8000e68 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 ff19 	bl	8004c98 <USB_DevDisconnect>

  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <HAL_PCD_Start+0x16>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e016      	b.n	8000eb4 <HAL_PCD_Start+0x44>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 ff14 	bl	8002cc0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e98:	2101      	movs	r1, #1
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f008 fcbb 	bl	8009816 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 feed 	bl	8004c84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f003 feef 	bl	8004cac <USB_ReadInterrupts>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ed8:	d102      	bne.n	8000ee0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 fb61 	bl	80015a2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 fee1 	bl	8004cac <USB_ReadInterrupts>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef4:	d112      	bne.n	8000f1c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f08:	b292      	uxth	r2, r2
 8000f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f008 fa89 	bl	8009426 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000f14:	2100      	movs	r1, #0
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f925 	bl	8001166 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f003 fec3 	bl	8004cac <USB_ReadInterrupts>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f30:	d10b      	bne.n	8000f4a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f44:	b292      	uxth	r2, r2
 8000f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 feac 	bl	8004cac <USB_ReadInterrupts>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f5e:	d10b      	bne.n	8000f78 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f72:	b292      	uxth	r2, r2
 8000f74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 fe95 	bl	8004cac <USB_ReadInterrupts>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f8c:	d126      	bne.n	8000fdc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0204 	bic.w	r2, r2, #4
 8000fa0:	b292      	uxth	r2, r2
 8000fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0208 	bic.w	r2, r2, #8
 8000fb8:	b292      	uxth	r2, r2
 8000fba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f008 fa6a 	bl	8009498 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fd6:	b292      	uxth	r2, r2
 8000fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 fe63 	bl	8004cac <USB_ReadInterrupts>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ff0:	f040 8084 	bne.w	80010fc <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	77fb      	strb	r3, [r7, #31]
 8000ff8:	e011      	b.n	800101e <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	7ffb      	ldrb	r3, [r7, #31]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	441a      	add	r2, r3
 8001006:	7ffb      	ldrb	r3, [r7, #31]
 8001008:	8812      	ldrh	r2, [r2, #0]
 800100a:	b292      	uxth	r2, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	f107 0120 	add.w	r1, r7, #32
 8001012:	440b      	add	r3, r1
 8001014:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001018:	7ffb      	ldrb	r3, [r7, #31]
 800101a:	3301      	adds	r3, #1
 800101c:	77fb      	strb	r3, [r7, #31]
 800101e:	7ffb      	ldrb	r3, [r7, #31]
 8001020:	2b07      	cmp	r3, #7
 8001022:	d9ea      	bls.n	8000ffa <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 0201 	orr.w	r2, r2, #1
 8001036:	b292      	uxth	r2, r2
 8001038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001044:	b29a      	uxth	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0201 	bic.w	r2, r2, #1
 800104e:	b292      	uxth	r2, r2
 8001050:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001054:	bf00      	nop
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800105e:	b29b      	uxth	r3, r3
 8001060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f6      	beq.n	8001056 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001070:	b29a      	uxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800107a:	b292      	uxth	r2, r2
 800107c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001080:	2300      	movs	r3, #0
 8001082:	77fb      	strb	r3, [r7, #31]
 8001084:	e010      	b.n	80010a8 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001086:	7ffb      	ldrb	r3, [r7, #31]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	4611      	mov	r1, r2
 800108e:	7ffa      	ldrb	r2, [r7, #31]
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	440a      	add	r2, r1
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	f107 0120 	add.w	r1, r7, #32
 800109a:	440b      	add	r3, r1
 800109c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80010a0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80010a2:	7ffb      	ldrb	r3, [r7, #31]
 80010a4:	3301      	adds	r3, #1
 80010a6:	77fb      	strb	r3, [r7, #31]
 80010a8:	7ffb      	ldrb	r3, [r7, #31]
 80010aa:	2b07      	cmp	r3, #7
 80010ac:	d9eb      	bls.n	8001086 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f042 0208 	orr.w	r2, r2, #8
 80010c0:	b292      	uxth	r2, r2
 80010c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010d8:	b292      	uxth	r2, r2
 80010da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 0204 	orr.w	r2, r2, #4
 80010f0:	b292      	uxth	r2, r2
 80010f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f008 f9b4 	bl	8009464 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f003 fdd3 	bl	8004cac <USB_ReadInterrupts>
 8001106:	4603      	mov	r3, r0
 8001108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800110c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001110:	d10e      	bne.n	8001130 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001124:	b292      	uxth	r2, r2
 8001126:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f008 f96d 	bl	800940a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fdb9 	bl	8004cac <USB_ReadInterrupts>
 800113a:	4603      	mov	r3, r0
 800113c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001144:	d10b      	bne.n	800115e <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800114e:	b29a      	uxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001158:	b292      	uxth	r2, r2
 800115a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800115e:	bf00      	nop
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <HAL_PCD_SetAddress+0x1a>
 800117c:	2302      	movs	r3, #2
 800117e:	e013      	b.n	80011a8 <HAL_PCD_SetAddress+0x42>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	78fa      	ldrb	r2, [r7, #3]
 800118c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	78fa      	ldrb	r2, [r7, #3]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f003 fd60 	bl	8004c5e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	70fb      	strb	r3, [r7, #3]
 80011c2:	460b      	mov	r3, r1
 80011c4:	803b      	strh	r3, [r7, #0]
 80011c6:	4613      	mov	r3, r2
 80011c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	da0e      	bge.n	80011f4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2201      	movs	r2, #1
 80011f0:	705a      	strb	r2, [r3, #1]
 80011f2:	e00e      	b.n	8001212 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	f003 0207 	and.w	r2, r3, #7
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	b2da      	uxtb	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800121e:	883a      	ldrh	r2, [r7, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	78ba      	ldrb	r2, [r7, #2]
 8001228:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b29a      	uxth	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800123c:	78bb      	ldrb	r3, [r7, #2]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d102      	bne.n	8001248 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_PCD_EP_Open+0xa6>
 8001252:	2302      	movs	r3, #2
 8001254:	e00e      	b.n	8001274 <HAL_PCD_EP_Open+0xc4>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	4618      	mov	r0, r3
 8001266:	f001 fd87 	bl	8002d78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001272:	7afb      	ldrb	r3, [r7, #11]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800128c:	2b00      	cmp	r3, #0
 800128e:	da0e      	bge.n	80012ae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2201      	movs	r2, #1
 80012aa:	705a      	strb	r2, [r3, #1]
 80012ac:	e00e      	b.n	80012cc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	f003 0207 	and.w	r2, r3, #7
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_PCD_EP_Close+0x6a>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e00e      	b.n	8001304 <HAL_PCD_EP_Close+0x88>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68f9      	ldr	r1, [r7, #12]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 f8a9 	bl	800344c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	460b      	mov	r3, r1
 800131a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	f003 0207 	and.w	r2, r3, #7
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2200      	movs	r2, #0
 800134a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	b2da      	uxtb	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	2b00      	cmp	r3, #0
 8001360:	d106      	bne.n	8001370 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6979      	ldr	r1, [r7, #20]
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fa5b 	bl	8003824 <USB_EPStartXfer>
 800136e:	e005      	b.n	800137c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6979      	ldr	r1, [r7, #20]
 8001376:	4618      	mov	r0, r3
 8001378:	f002 fa54 	bl	8003824 <USB_EPStartXfer>
  }

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	f003 0207 	and.w	r2, r3, #7
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80013a8:	681b      	ldr	r3, [r3, #0]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	460b      	mov	r3, r1
 80013c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013c4:	7afb      	ldrb	r3, [r7, #11]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	2201      	movs	r2, #1
 80013fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001400:	7afb      	ldrb	r3, [r7, #11]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	b2da      	uxtb	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800140c:	7afb      	ldrb	r3, [r7, #11]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	2b00      	cmp	r3, #0
 8001414:	d106      	bne.n	8001424 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6979      	ldr	r1, [r7, #20]
 800141c:	4618      	mov	r0, r3
 800141e:	f002 fa01 	bl	8003824 <USB_EPStartXfer>
 8001422:	e005      	b.n	8001430 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6979      	ldr	r1, [r7, #20]
 800142a:	4618      	mov	r0, r3
 800142c:	f002 f9fa 	bl	8003824 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	460b      	mov	r3, r1
 8001444:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	f003 0207 	and.w	r2, r3, #7
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	d901      	bls.n	8001458 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e04c      	b.n	80014f2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800145c:	2b00      	cmp	r3, #0
 800145e:	da0e      	bge.n	800147e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2201      	movs	r2, #1
 800147a:	705a      	strb	r2, [r3, #1]
 800147c:	e00c      	b.n	8001498 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800147e:	78fa      	ldrb	r2, [r7, #3]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2201      	movs	r2, #1
 800149c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_PCD_EP_SetStall+0x7e>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e01c      	b.n	80014f2 <HAL_PCD_EP_SetStall+0xb8>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68f9      	ldr	r1, [r7, #12]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 facc 	bl	8004a64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d108      	bne.n	80014e8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80014e0:	4619      	mov	r1, r3
 80014e2:	4610      	mov	r0, r2
 80014e4:	f003 fbf1 	bl	8004cca <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	f003 020f 	and.w	r2, r3, #15
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	d901      	bls.n	8001518 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e040      	b.n	800159a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800151c:	2b00      	cmp	r3, #0
 800151e:	da0e      	bge.n	800153e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2201      	movs	r2, #1
 800153a:	705a      	strb	r2, [r3, #1]
 800153c:	e00e      	b.n	800155c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	f003 0207 	and.w	r2, r3, #7
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	b2da      	uxtb	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <HAL_PCD_EP_ClrStall+0x82>
 8001578:	2302      	movs	r3, #2
 800157a:	e00e      	b.n	800159a <HAL_PCD_EP_ClrStall+0xa0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68f9      	ldr	r1, [r7, #12]
 800158a:	4618      	mov	r0, r3
 800158c:	f003 faba 	bl	8004b04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b08e      	sub	sp, #56	; 0x38
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80015aa:	e2df      	b.n	8001b6c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80015b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80015c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f040 8158 	bne.w	800187c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80015cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d152      	bne.n	800167c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80015e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015e6:	81fb      	strh	r3, [r7, #14]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	89fb      	ldrh	r3, [r7, #14]
 80015ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3328      	adds	r3, #40	; 0x28
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001608:	b29b      	uxth	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	3302      	adds	r3, #2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	4413      	add	r3, r2
 800161e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	441a      	add	r2, r3
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800163a:	2100      	movs	r1, #0
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f007 feca 	bl	80093d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 828e 	beq.w	8001b6c <PCD_EP_ISR_Handler+0x5ca>
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f040 8289 	bne.w	8001b6c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001666:	b2da      	uxtb	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	b292      	uxth	r2, r2
 800166e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800167a:	e277      	b.n	8001b6c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800168c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800168e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001692:	2b00      	cmp	r3, #0
 8001694:	d034      	beq.n	8001700 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800169e:	b29b      	uxth	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4413      	add	r3, r2
 80016aa:	3306      	adds	r3, #6
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	f003 fb47 	bl	8004d68 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016e6:	4013      	ands	r3, r2
 80016e8:	823b      	strh	r3, [r7, #16]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	8a3a      	ldrh	r2, [r7, #16]
 80016f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016f4:	b292      	uxth	r2, r2
 80016f6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f007 fe3f 	bl	800937c <HAL_PCD_SetupStageCallback>
 80016fe:	e235      	b.n	8001b6c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001700:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001704:	2b00      	cmp	r3, #0
 8001706:	f280 8231 	bge.w	8001b6c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	b29a      	uxth	r2, r3
 8001712:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001716:	4013      	ands	r3, r2
 8001718:	83bb      	strh	r3, [r7, #28]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	8bba      	ldrh	r2, [r7, #28]
 8001720:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001724:	b292      	uxth	r2, r2
 8001726:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001730:	b29b      	uxth	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	3306      	adds	r3, #6
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	4413      	add	r3, r2
 8001746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d019      	beq.n	8001790 <PCD_EP_ISR_Handler+0x1ee>
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d015      	beq.n	8001790 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	6959      	ldr	r1, [r3, #20]
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001774:	b29b      	uxth	r3, r3
 8001776:	f003 faf7 	bl	8004d68 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	441a      	add	r2, r3
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001788:	2100      	movs	r1, #0
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f007 fe08 	bl	80093a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800179e:	b29b      	uxth	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	4413      	add	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d112      	bne.n	80017de <PCD_EP_ISR_Handler+0x23c>
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	801a      	strh	r2, [r3, #0]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	e02f      	b.n	800183e <PCD_EP_ISR_Handler+0x29c>
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b3e      	cmp	r3, #62	; 0x3e
 80017e4:	d813      	bhi.n	800180e <PCD_EP_ISR_Handler+0x26c>
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	085b      	lsrs	r3, r3, #1
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <PCD_EP_ISR_Handler+0x25e>
 80017fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fc:	3301      	adds	r3, #1
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
 8001800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001802:	b29b      	uxth	r3, r3
 8001804:	029b      	lsls	r3, r3, #10
 8001806:	b29a      	uxth	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	801a      	strh	r2, [r3, #0]
 800180c:	e017      	b.n	800183e <PCD_EP_ISR_Handler+0x29c>
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <PCD_EP_ISR_Handler+0x286>
 8001822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001824:	3b01      	subs	r3, #1
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
 8001828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800182a:	b29b      	uxth	r3, r3
 800182c:	029b      	lsls	r3, r3, #10
 800182e:	b29b      	uxth	r3, r3
 8001830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001838:	b29a      	uxth	r2, r3
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	b29b      	uxth	r3, r3
 8001846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800184a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800184e:	827b      	strh	r3, [r7, #18]
 8001850:	8a7b      	ldrh	r3, [r7, #18]
 8001852:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001856:	827b      	strh	r3, [r7, #18]
 8001858:	8a7b      	ldrh	r3, [r7, #18]
 800185a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800185e:	827b      	strh	r3, [r7, #18]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	8a7b      	ldrh	r3, [r7, #18]
 8001866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800186a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800186e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001876:	b29b      	uxth	r3, r3
 8001878:	8013      	strh	r3, [r2, #0]
 800187a:	e177      	b.n	8001b6c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800188e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001892:	2b00      	cmp	r3, #0
 8001894:	f280 80ea 	bge.w	8001a6c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018ae:	4013      	ands	r3, r2
 80018b0:	853b      	strh	r3, [r7, #40]	; 0x28
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018c6:	b292      	uxth	r2, r2
 80018c8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80018ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	7b1b      	ldrb	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d122      	bne.n	800192e <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	461a      	mov	r2, r3
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	3306      	adds	r3, #6
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	4413      	add	r3, r2
 8001906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001910:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001912:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8087 	beq.w	8001a28 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	6959      	ldr	r1, [r3, #20]
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	88da      	ldrh	r2, [r3, #6]
 8001926:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001928:	f003 fa1e 	bl	8004d68 <USB_ReadPMA>
 800192c:	e07c      	b.n	8001a28 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	78db      	ldrb	r3, [r3, #3]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d108      	bne.n	8001948 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001936:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001938:	461a      	mov	r2, r3
 800193a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f923 	bl	8001b88 <HAL_PCD_EP_DB_Receive>
 8001942:	4603      	mov	r3, r0
 8001944:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001946:	e06f      	b.n	8001a28 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800195e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001962:	847b      	strh	r3, [r7, #34]	; 0x22
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	441a      	add	r2, r3
 8001972:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800197c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001980:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001984:	b29b      	uxth	r3, r3
 8001986:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d021      	beq.n	80019e6 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4413      	add	r3, r2
 80019b6:	3302      	adds	r3, #2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	4413      	add	r3, r2
 80019c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ca:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80019cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d02a      	beq.n	8001a28 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	6959      	ldr	r1, [r3, #20]
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	891a      	ldrh	r2, [r3, #8]
 80019de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019e0:	f003 f9c2 	bl	8004d68 <USB_ReadPMA>
 80019e4:	e020      	b.n	8001a28 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	3306      	adds	r3, #6
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a0e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001a10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d008      	beq.n	8001a28 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	6959      	ldr	r1, [r3, #20]
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	895a      	ldrh	r2, [r3, #10]
 8001a22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a24:	f003 f9a0 	bl	8004d68 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	69da      	ldr	r2, [r3, #28]
 8001a2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a2e:	441a      	add	r2, r3
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a3a:	441a      	add	r2, r3
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d004      	beq.n	8001a52 <PCD_EP_ISR_Handler+0x4b0>
 8001a48:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d206      	bcs.n	8001a60 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f007 fca1 	bl	80093a0 <HAL_PCD_DataOutStageCallback>
 8001a5e:	e005      	b.n	8001a6c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 fedc 	bl	8003824 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d07a      	beq.n	8001b6c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa4:	843b      	strh	r3, [r7, #32]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	441a      	add	r2, r3
 8001ab4:	8c3b      	ldrh	r3, [r7, #32]
 8001ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	78db      	ldrb	r3, [r3, #3]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d108      	bne.n	8001adc <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d146      	bne.n	8001b60 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ad2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d141      	bne.n	8001b60 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	3302      	adds	r3, #2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b04:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	8bfb      	ldrh	r3, [r7, #30]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d906      	bls.n	8001b1e <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	699a      	ldr	r2, [r3, #24]
 8001b14:	8bfb      	ldrh	r3, [r7, #30]
 8001b16:	1ad2      	subs	r2, r2, r3
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	619a      	str	r2, [r3, #24]
 8001b1c:	e002      	b.n	8001b24 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d106      	bne.n	8001b3a <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f007 fc4f 	bl	80093d6 <HAL_PCD_DataInStageCallback>
 8001b38:	e018      	b.n	8001b6c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	8bfb      	ldrh	r3, [r7, #30]
 8001b40:	441a      	add	r2, r3
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	69da      	ldr	r2, [r3, #28]
 8001b4a:	8bfb      	ldrh	r3, [r7, #30]
 8001b4c:	441a      	add	r2, r3
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fe63 	bl	8003824 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001b5e:	e005      	b.n	8001b6c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b62:	461a      	mov	r2, r3
 8001b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f91b 	bl	8001da2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f6ff ad17 	blt.w	80015ac <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3738      	adds	r7, #56	; 0x38
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	4613      	mov	r3, r2
 8001b94:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d07e      	beq.n	8001c9e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bc8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	699a      	ldr	r2, [r3, #24]
 8001bce:	8b7b      	ldrh	r3, [r7, #26]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d306      	bcc.n	8001be2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	8b7b      	ldrh	r3, [r7, #26]
 8001bda:	1ad2      	subs	r2, r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	619a      	str	r2, [r3, #24]
 8001be0:	e002      	b.n	8001be8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d123      	bne.n	8001c38 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0a:	833b      	strh	r3, [r7, #24]
 8001c0c:	8b3b      	ldrh	r3, [r7, #24]
 8001c0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c12:	833b      	strh	r3, [r7, #24]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	441a      	add	r2, r3
 8001c22:	8b3b      	ldrh	r3, [r7, #24]
 8001c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d01f      	beq.n	8001c82 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5c:	82fb      	strh	r3, [r7, #22]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	441a      	add	r2, r3
 8001c6c:	8afb      	ldrh	r3, [r7, #22]
 8001c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c82:	8b7b      	ldrh	r3, [r7, #26]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 8087 	beq.w	8001d98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	6959      	ldr	r1, [r3, #20]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	891a      	ldrh	r2, [r3, #8]
 8001c96:	8b7b      	ldrh	r3, [r7, #26]
 8001c98:	f003 f866 	bl	8004d68 <USB_ReadPMA>
 8001c9c:	e07c      	b.n	8001d98 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3306      	adds	r3, #6
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cc6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	8b7b      	ldrh	r3, [r7, #26]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d306      	bcc.n	8001ce0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	699a      	ldr	r2, [r3, #24]
 8001cd6:	8b7b      	ldrh	r3, [r7, #26]
 8001cd8:	1ad2      	subs	r2, r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	619a      	str	r2, [r3, #24]
 8001cde:	e002      	b.n	8001ce6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d123      	bne.n	8001d36 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d08:	83fb      	strh	r3, [r7, #30]
 8001d0a:	8bfb      	ldrh	r3, [r7, #30]
 8001d0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d10:	83fb      	strh	r3, [r7, #30]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	441a      	add	r2, r3
 8001d20:	8bfb      	ldrh	r3, [r7, #30]
 8001d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d11f      	bne.n	8001d80 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5a:	83bb      	strh	r3, [r7, #28]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	441a      	add	r2, r3
 8001d6a:	8bbb      	ldrh	r3, [r7, #28]
 8001d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d80:	8b7b      	ldrh	r3, [r7, #26]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d008      	beq.n	8001d98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	6959      	ldr	r1, [r3, #20]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	895a      	ldrh	r2, [r3, #10]
 8001d92:	8b7b      	ldrh	r3, [r7, #26]
 8001d94:	f002 ffe8 	bl	8004d68 <USB_ReadPMA>
    }
  }

  return count;
 8001d98:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3720      	adds	r7, #32
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b092      	sub	sp, #72	; 0x48
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	4613      	mov	r3, r2
 8001dae:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8132 	beq.w	8002020 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d906      	bls.n	8001dfe <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	699a      	ldr	r2, [r3, #24]
 8001df4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001df6:	1ad2      	subs	r2, r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	619a      	str	r2, [r3, #24]
 8001dfc:	e002      	b.n	8001e04 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d12c      	bne.n	8001e66 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f007 fadf 	bl	80093d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 822f 	beq.w	8002282 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3e:	827b      	strh	r3, [r7, #18]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	441a      	add	r2, r3
 8001e4e:	8a7b      	ldrh	r3, [r7, #18]
 8001e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	8013      	strh	r3, [r2, #0]
 8001e64:	e20d      	b.n	8002282 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d01f      	beq.n	8001eb0 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e8a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	441a      	add	r2, r3
 8001e9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ea4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	f040 81e3 	bne.w	8002282 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ec2:	441a      	add	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	69da      	ldr	r2, [r3, #28]
 8001ecc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ece:	441a      	add	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	6a1a      	ldr	r2, [r3, #32]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d309      	bcc.n	8001ef4 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	6a1a      	ldr	r2, [r3, #32]
 8001eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eec:	1ad2      	subs	r2, r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	621a      	str	r2, [r3, #32]
 8001ef2:	e014      	b.n	8001f1e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d106      	bne.n	8001f0a <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001efc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001efe:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f08:	e009      	b.n	8001f1e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	785b      	ldrb	r3, [r3, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d155      	bne.n	8001fd2 <HAL_PCD_EP_DB_Transmit+0x230>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	011a      	lsls	r2, r3, #4
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	4413      	add	r3, r2
 8001f48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d112      	bne.n	8001f7a <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	801a      	strh	r2, [r3, #0]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	801a      	strh	r2, [r3, #0]
 8001f78:	e047      	b.n	800200a <HAL_PCD_EP_DB_Transmit+0x268>
 8001f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7c:	2b3e      	cmp	r3, #62	; 0x3e
 8001f7e:	d811      	bhi.n	8001fa4 <HAL_PCD_EP_DB_Transmit+0x202>
 8001f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f92:	3301      	adds	r3, #1
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	029b      	lsls	r3, r3, #10
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	801a      	strh	r2, [r3, #0]
 8001fa2:	e032      	b.n	800200a <HAL_PCD_EP_DB_Transmit+0x268>
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <HAL_PCD_EP_DB_Transmit+0x218>
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	029b      	lsls	r3, r3, #10
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	801a      	strh	r2, [r3, #0]
 8001fd0:	e01b      	b.n	800200a <HAL_PCD_EP_DB_Transmit+0x268>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	785b      	ldrb	r3, [r3, #1]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d117      	bne.n	800200a <HAL_PCD_EP_DB_Transmit+0x268>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	623b      	str	r3, [r7, #32]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	4413      	add	r3, r2
 8001ff0:	623b      	str	r3, [r7, #32]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	011a      	lsls	r2, r3, #4
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002004:	b29a      	uxth	r2, r3
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	6959      	ldr	r1, [r3, #20]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	891a      	ldrh	r2, [r3, #8]
 8002016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002018:	b29b      	uxth	r3, r3
 800201a:	f002 fe61 	bl	8004ce0 <USB_WritePMA>
 800201e:	e130      	b.n	8002282 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002028:	b29b      	uxth	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	3306      	adds	r3, #6
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002048:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002050:	429a      	cmp	r2, r3
 8002052:	d306      	bcc.n	8002062 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800205a:	1ad2      	subs	r2, r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	619a      	str	r2, [r3, #24]
 8002060:	e002      	b.n	8002068 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d12c      	bne.n	80020ca <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f007 f9ad 	bl	80093d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 80fd 	bne.w	8002282 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800209e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	441a      	add	r2, r3
 80020b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80020b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	8013      	strh	r3, [r2, #0]
 80020c8:	e0db      	b.n	8002282 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d11f      	bne.n	8002114 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	441a      	add	r2, r3
 80020fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800210c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002110:	b29b      	uxth	r3, r3
 8002112:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800211a:	2b01      	cmp	r3, #1
 800211c:	f040 80b1 	bne.w	8002282 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002126:	441a      	add	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	69da      	ldr	r2, [r3, #28]
 8002130:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002132:	441a      	add	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d309      	bcc.n	8002158 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	6a1a      	ldr	r2, [r3, #32]
 800214e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002150:	1ad2      	subs	r2, r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	621a      	str	r2, [r3, #32]
 8002156:	e014      	b.n	8002182 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d106      	bne.n	800216e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002160:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002162:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800216c:	e009      	b.n	8002182 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2200      	movs	r2, #0
 8002178:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	637b      	str	r3, [r7, #52]	; 0x34
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d155      	bne.n	800223c <HAL_PCD_EP_DB_Transmit+0x49a>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	647b      	str	r3, [r7, #68]	; 0x44
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021a4:	4413      	add	r3, r2
 80021a6:	647b      	str	r3, [r7, #68]	; 0x44
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	011a      	lsls	r2, r3, #4
 80021ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021b0:	4413      	add	r3, r2
 80021b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021b6:	643b      	str	r3, [r7, #64]	; 0x40
 80021b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d112      	bne.n	80021e4 <HAL_PCD_EP_DB_Transmit+0x442>
 80021be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021cc:	801a      	strh	r2, [r3, #0]
 80021ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021dc:	b29a      	uxth	r2, r3
 80021de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e0:	801a      	strh	r2, [r3, #0]
 80021e2:	e044      	b.n	800226e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e6:	2b3e      	cmp	r3, #62	; 0x3e
 80021e8:	d811      	bhi.n	800220e <HAL_PCD_EP_DB_Transmit+0x46c>
 80021ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ec:	085b      	lsrs	r3, r3, #1
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_PCD_EP_DB_Transmit+0x45e>
 80021fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fc:	3301      	adds	r3, #1
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002202:	b29b      	uxth	r3, r3
 8002204:	029b      	lsls	r3, r3, #10
 8002206:	b29a      	uxth	r2, r3
 8002208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800220a:	801a      	strh	r2, [r3, #0]
 800220c:	e02f      	b.n	800226e <HAL_PCD_EP_DB_Transmit+0x4cc>
 800220e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <HAL_PCD_EP_DB_Transmit+0x482>
 800221e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002220:	3b01      	subs	r3, #1
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002226:	b29b      	uxth	r3, r3
 8002228:	029b      	lsls	r3, r3, #10
 800222a:	b29b      	uxth	r3, r3
 800222c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002234:	b29a      	uxth	r2, r3
 8002236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002238:	801a      	strh	r2, [r3, #0]
 800223a:	e018      	b.n	800226e <HAL_PCD_EP_DB_Transmit+0x4cc>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	785b      	ldrb	r3, [r3, #1]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d114      	bne.n	800226e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002252:	4413      	add	r3, r2
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	011a      	lsls	r2, r3, #4
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225e:	4413      	add	r3, r2
 8002260:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
 8002266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002268:	b29a      	uxth	r2, r3
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	6959      	ldr	r1, [r3, #20]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	895a      	ldrh	r2, [r3, #10]
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227c:	b29b      	uxth	r3, r3
 800227e:	f002 fd2f 	bl	8004ce0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800229c:	823b      	strh	r3, [r7, #16]
 800229e:	8a3b      	ldrh	r3, [r7, #16]
 80022a0:	f083 0310 	eor.w	r3, r3, #16
 80022a4:	823b      	strh	r3, [r7, #16]
 80022a6:	8a3b      	ldrh	r3, [r7, #16]
 80022a8:	f083 0320 	eor.w	r3, r3, #32
 80022ac:	823b      	strh	r3, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	441a      	add	r2, r3
 80022bc:	8a3b      	ldrh	r3, [r7, #16]
 80022be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3748      	adds	r7, #72	; 0x48
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	817b      	strh	r3, [r7, #10]
 80022ea:	4613      	mov	r3, r2
 80022ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80022ee:	897b      	ldrh	r3, [r7, #10]
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022fa:	897b      	ldrh	r3, [r7, #10]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4413      	add	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e009      	b.n	8002326 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002312:	897a      	ldrh	r2, [r7, #10]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002326:	893b      	ldrh	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d107      	bne.n	800233c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2200      	movs	r2, #0
 8002330:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	b29a      	uxth	r2, r3
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	80da      	strh	r2, [r3, #6]
 800233a:	e00b      	b.n	8002354 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2201      	movs	r2, #1
 8002340:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	b29a      	uxth	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0c1b      	lsrs	r3, r3, #16
 800234e:	b29a      	uxth	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e26c      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8087 	beq.w	800248e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002380:	4b92      	ldr	r3, [pc, #584]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b04      	cmp	r3, #4
 800238a:	d00c      	beq.n	80023a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800238c:	4b8f      	ldr	r3, [pc, #572]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b08      	cmp	r3, #8
 8002396:	d112      	bne.n	80023be <HAL_RCC_OscConfig+0x5e>
 8002398:	4b8c      	ldr	r3, [pc, #560]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	d10b      	bne.n	80023be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a6:	4b89      	ldr	r3, [pc, #548]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d06c      	beq.n	800248c <HAL_RCC_OscConfig+0x12c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d168      	bne.n	800248c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e246      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c6:	d106      	bne.n	80023d6 <HAL_RCC_OscConfig+0x76>
 80023c8:	4b80      	ldr	r3, [pc, #512]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a7f      	ldr	r2, [pc, #508]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	e02e      	b.n	8002434 <HAL_RCC_OscConfig+0xd4>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x98>
 80023de:	4b7b      	ldr	r3, [pc, #492]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7a      	ldr	r2, [pc, #488]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b78      	ldr	r3, [pc, #480]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a77      	ldr	r2, [pc, #476]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e01d      	b.n	8002434 <HAL_RCC_OscConfig+0xd4>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0xbc>
 8002402:	4b72      	ldr	r3, [pc, #456]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a71      	ldr	r2, [pc, #452]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b6f      	ldr	r3, [pc, #444]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6e      	ldr	r2, [pc, #440]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0xd4>
 800241c:	4b6b      	ldr	r3, [pc, #428]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a6a      	ldr	r2, [pc, #424]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b68      	ldr	r3, [pc, #416]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a67      	ldr	r2, [pc, #412]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800242e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002432:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe f96a 	bl	8000714 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7fe f966 	bl	8000714 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1fa      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	4b5d      	ldr	r3, [pc, #372]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0xe4>
 8002462:	e014      	b.n	800248e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe f956 	bl	8000714 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800246c:	f7fe f952 	bl	8000714 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	; 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e1e6      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	4b53      	ldr	r3, [pc, #332]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x10c>
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d063      	beq.n	8002562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800249a:	4b4c      	ldr	r3, [pc, #304]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024a6:	4b49      	ldr	r3, [pc, #292]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d11c      	bne.n	80024ec <HAL_RCC_OscConfig+0x18c>
 80024b2:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d116      	bne.n	80024ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	4b43      	ldr	r3, [pc, #268]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_RCC_OscConfig+0x176>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d001      	beq.n	80024d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e1ba      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d6:	4b3d      	ldr	r3, [pc, #244]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4939      	ldr	r1, [pc, #228]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	e03a      	b.n	8002562 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f4:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7fe f90b 	bl	8000714 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002502:	f7fe f907 	bl	8000714 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e19b      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002514:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4927      	ldr	r1, [pc, #156]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]
 8002534:	e015      	b.n	8002562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe f8ea 	bl	8000714 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002544:	f7fe f8e6 	bl	8000714 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e17a      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d03a      	beq.n	80025e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d019      	beq.n	80025aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002576:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002578:	2201      	movs	r2, #1
 800257a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257c:	f7fe f8ca 	bl	8000714 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002584:	f7fe f8c6 	bl	8000714 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e15a      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f000 faa8 	bl	8002af8 <RCC_Delay>
 80025a8:	e01c      	b.n	80025e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_RCC_OscConfig+0x274>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b0:	f7fe f8b0 	bl	8000714 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b6:	e00f      	b.n	80025d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b8:	f7fe f8ac 	bl	8000714 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d908      	bls.n	80025d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e140      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	42420000 	.word	0x42420000
 80025d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d8:	4b9e      	ldr	r3, [pc, #632]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e9      	bne.n	80025b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80a6 	beq.w	800273e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f6:	4b97      	ldr	r3, [pc, #604]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10d      	bne.n	800261e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	4b94      	ldr	r3, [pc, #592]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4a93      	ldr	r2, [pc, #588]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	61d3      	str	r3, [r2, #28]
 800260e:	4b91      	ldr	r3, [pc, #580]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261a:	2301      	movs	r3, #1
 800261c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261e:	4b8e      	ldr	r3, [pc, #568]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d118      	bne.n	800265c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262a:	4b8b      	ldr	r3, [pc, #556]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a8a      	ldr	r2, [pc, #552]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002636:	f7fe f86d 	bl	8000714 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263e:	f7fe f869 	bl	8000714 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b64      	cmp	r3, #100	; 0x64
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e0fd      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	4b81      	ldr	r3, [pc, #516]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d106      	bne.n	8002672 <HAL_RCC_OscConfig+0x312>
 8002664:	4b7b      	ldr	r3, [pc, #492]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4a7a      	ldr	r2, [pc, #488]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6213      	str	r3, [r2, #32]
 8002670:	e02d      	b.n	80026ce <HAL_RCC_OscConfig+0x36e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0x334>
 800267a:	4b76      	ldr	r3, [pc, #472]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4a75      	ldr	r2, [pc, #468]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	6213      	str	r3, [r2, #32]
 8002686:	4b73      	ldr	r3, [pc, #460]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	4a72      	ldr	r2, [pc, #456]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	f023 0304 	bic.w	r3, r3, #4
 8002690:	6213      	str	r3, [r2, #32]
 8002692:	e01c      	b.n	80026ce <HAL_RCC_OscConfig+0x36e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b05      	cmp	r3, #5
 800269a:	d10c      	bne.n	80026b6 <HAL_RCC_OscConfig+0x356>
 800269c:	4b6d      	ldr	r3, [pc, #436]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4a6c      	ldr	r2, [pc, #432]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6213      	str	r3, [r2, #32]
 80026a8:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4a69      	ldr	r2, [pc, #420]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6213      	str	r3, [r2, #32]
 80026b4:	e00b      	b.n	80026ce <HAL_RCC_OscConfig+0x36e>
 80026b6:	4b67      	ldr	r3, [pc, #412]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a66      	ldr	r2, [pc, #408]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6213      	str	r3, [r2, #32]
 80026c2:	4b64      	ldr	r3, [pc, #400]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a63      	ldr	r2, [pc, #396]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d015      	beq.n	8002702 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d6:	f7fe f81d 	bl	8000714 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe f819 	bl	8000714 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e0ab      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f4:	4b57      	ldr	r3, [pc, #348]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ee      	beq.n	80026de <HAL_RCC_OscConfig+0x37e>
 8002700:	e014      	b.n	800272c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7fe f807 	bl	8000714 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7fe f803 	bl	8000714 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e095      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002720:	4b4c      	ldr	r3, [pc, #304]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ee      	bne.n	800270a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002732:	4b48      	ldr	r3, [pc, #288]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4a47      	ldr	r2, [pc, #284]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8081 	beq.w	800284a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002748:	4b42      	ldr	r3, [pc, #264]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	d061      	beq.n	8002818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d146      	bne.n	80027ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275c:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_RCC_OscConfig+0x4fc>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fd ffd7 	bl	8000714 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276a:	f7fd ffd3 	bl	8000714 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e067      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277c:	4b35      	ldr	r3, [pc, #212]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d108      	bne.n	80027a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	492d      	ldr	r1, [pc, #180]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a4:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a19      	ldr	r1, [r3, #32]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	430b      	orrs	r3, r1
 80027b6:	4927      	ldr	r1, [pc, #156]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <HAL_RCC_OscConfig+0x4fc>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7fd ffa7 	bl	8000714 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ca:	f7fd ffa3 	bl	8000714 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e037      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x46a>
 80027e8:	e02f      	b.n	800284a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <HAL_RCC_OscConfig+0x4fc>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7fd ff90 	bl	8000714 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f8:	f7fd ff8c 	bl	8000714 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e020      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x498>
 8002816:	e018      	b.n	800284a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e013      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_OscConfig+0x4f4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	429a      	cmp	r2, r3
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d001      	beq.n	800284a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	40007000 	.word	0x40007000
 800285c:	42420060 	.word	0x42420060

08002860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0d0      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002874:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d910      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 0207 	bic.w	r2, r3, #7
 800288a:	4965      	ldr	r1, [pc, #404]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0b8      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d4:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a52      	ldr	r2, [pc, #328]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	494d      	ldr	r1, [pc, #308]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d040      	beq.n	8002980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d115      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e07f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e073      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292e:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06b      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293e:	4b39      	ldr	r3, [pc, #228]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4936      	ldr	r1, [pc, #216]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002950:	f7fd fee0 	bl	8000714 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	e00a      	b.n	800296e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002958:	f7fd fedc 	bl	8000714 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e053      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 020c 	and.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	429a      	cmp	r2, r3
 800297e:	d1eb      	bne.n	8002958 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002980:	4b27      	ldr	r3, [pc, #156]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d210      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 0207 	bic.w	r2, r3, #7
 8002996:	4922      	ldr	r1, [pc, #136]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e032      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4916      	ldr	r1, [pc, #88]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	490e      	ldr	r1, [pc, #56]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ee:	f000 f821 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029f2:	4601      	mov	r1, r0
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 8002a00:	5cd3      	ldrb	r3, [r2, r3]
 8002a02:	fa21 f303 	lsr.w	r3, r1, r3
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1cc>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1d0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fe3e 	bl	8000690 <HAL_InitTick>

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
 8002a28:	08009a88 	.word	0x08009a88
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000004 	.word	0x20000004

08002a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	b490      	push	{r4, r7}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a3c:	1d3c      	adds	r4, r7, #4
 8002a3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x40>
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x46>
 8002a72:	e02d      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a76:	623b      	str	r3, [r7, #32]
      break;
 8002a78:	e02d      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	0c9b      	lsrs	r3, r3, #18
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a86:	4413      	add	r3, r2
 8002a88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a8c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	0c5b      	lsrs	r3, r3, #17
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ab2:	fb02 f203 	mul.w	r2, r2, r3
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
 8002abe:	e004      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	623b      	str	r3, [r7, #32]
      break;
 8002ace:	e002      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ad2:	623b      	str	r3, [r7, #32]
      break;
 8002ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3728      	adds	r7, #40	; 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc90      	pop	{r4, r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	080099f0 	.word	0x080099f0
 8002ae8:	08009a00 	.word	0x08009a00
 8002aec:	40021000 	.word	0x40021000
 8002af0:	007a1200 	.word	0x007a1200
 8002af4:	003d0900 	.word	0x003d0900

08002af8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b00:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <RCC_Delay+0x34>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <RCC_Delay+0x38>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	0a5b      	lsrs	r3, r3, #9
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b14:	bf00      	nop
  }
  while (Delay --);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1e5a      	subs	r2, r3, #1
 8002b1a:	60fa      	str	r2, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f9      	bne.n	8002b14 <RCC_Delay+0x1c>
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	10624dd3 	.word	0x10624dd3

08002b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d07d      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b50:	2300      	movs	r3, #0
 8002b52:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b54:	4b4f      	ldr	r3, [pc, #316]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10d      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b60:	4b4c      	ldr	r3, [pc, #304]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	4a4b      	ldr	r2, [pc, #300]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	61d3      	str	r3, [r2, #28]
 8002b6c:	4b49      	ldr	r3, [pc, #292]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d118      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b88:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a42      	ldr	r2, [pc, #264]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b94:	f7fd fdbe 	bl	8000714 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9a:	e008      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9c:	f7fd fdba 	bl	8000714 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e06d      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4b3a      	ldr	r3, [pc, #232]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bba:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d02e      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d027      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bd8:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002be2:	4b2e      	ldr	r3, [pc, #184]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002be8:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bee:	4a29      	ldr	r2, [pc, #164]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d014      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fd fd89 	bl	8000714 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7fd fd85 	bl	8000714 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e036      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ee      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c28:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4917      	ldr	r1, [pc, #92]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c40:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	4a13      	ldr	r2, [pc, #76]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c58:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	490b      	ldr	r1, [pc, #44]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c76:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	4904      	ldr	r1, [pc, #16]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	42420440 	.word	0x42420440

08002ca0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	f107 0014 	add.w	r0, r7, #20
 8002cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	b004      	add	sp, #16
 8002cbe:	4770      	bx	lr

08002cc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cd0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002cd4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cf4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002cf8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d38:	b084      	sub	sp, #16
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	f107 0014 	add.w	r0, r7, #20
 8002d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	b004      	add	sp, #16
 8002d76:	4770      	bx	lr

08002d78 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b09b      	sub	sp, #108	; 0x6c
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	78db      	ldrb	r3, [r3, #3]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d81f      	bhi.n	8002dea <USB_ActivateEndpoint+0x72>
 8002daa:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <USB_ActivateEndpoint+0x38>)
 8002dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db0:	08002dc1 	.word	0x08002dc1
 8002db4:	08002ddd 	.word	0x08002ddd
 8002db8:	08002df3 	.word	0x08002df3
 8002dbc:	08002dcf 	.word	0x08002dcf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002dc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dc8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002dcc:	e012      	b.n	8002df4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002dce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dd2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002dd6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002dda:	e00b      	b.n	8002df4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002ddc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002de8:	e004      	b.n	8002df4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002df0:	e000      	b.n	8002df4 <USB_ActivateEndpoint+0x7c>
      break;
 8002df2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	441a      	add	r2, r3
 8002dfe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	441a      	add	r2, r3
 8002e44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	7b1b      	ldrb	r3, [r3, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 8149 	bne.w	80030f8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	785b      	ldrb	r3, [r3, #1]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8084 	beq.w	8002f78 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	4413      	add	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	011a      	lsls	r2, r3, #4
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	88db      	ldrh	r3, [r3, #6]
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	81fb      	strh	r3, [r7, #14]
 8002eb2:	89fb      	ldrh	r3, [r7, #14]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01b      	beq.n	8002ef4 <USB_ActivateEndpoint+0x17c>
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed2:	81bb      	strh	r3, [r7, #12]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	441a      	add	r2, r3
 8002ede:	89bb      	ldrh	r3, [r7, #12]
 8002ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	78db      	ldrb	r3, [r3, #3]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d020      	beq.n	8002f3e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f12:	813b      	strh	r3, [r7, #8]
 8002f14:	893b      	ldrh	r3, [r7, #8]
 8002f16:	f083 0320 	eor.w	r3, r3, #32
 8002f1a:	813b      	strh	r3, [r7, #8]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	893b      	ldrh	r3, [r7, #8]
 8002f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	8013      	strh	r3, [r2, #0]
 8002f3c:	e27f      	b.n	800343e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f54:	817b      	strh	r3, [r7, #10]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	441a      	add	r2, r3
 8002f60:	897b      	ldrh	r3, [r7, #10]
 8002f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	8013      	strh	r3, [r2, #0]
 8002f76:	e262      	b.n	800343e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	4413      	add	r3, r2
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	011a      	lsls	r2, r3, #4
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	88db      	ldrh	r3, [r3, #6]
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	4413      	add	r3, r2
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	011a      	lsls	r2, r3, #4
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	4413      	add	r3, r2
 8002fca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fce:	623b      	str	r3, [r7, #32]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d112      	bne.n	8002ffe <USB_ActivateEndpoint+0x286>
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	801a      	strh	r2, [r3, #0]
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	801a      	strh	r2, [r3, #0]
 8002ffc:	e02f      	b.n	800305e <USB_ActivateEndpoint+0x2e6>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b3e      	cmp	r3, #62	; 0x3e
 8003004:	d813      	bhi.n	800302e <USB_ActivateEndpoint+0x2b6>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	663b      	str	r3, [r7, #96]	; 0x60
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <USB_ActivateEndpoint+0x2a8>
 800301a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800301c:	3301      	adds	r3, #1
 800301e:	663b      	str	r3, [r7, #96]	; 0x60
 8003020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003022:	b29b      	uxth	r3, r3
 8003024:	029b      	lsls	r3, r3, #10
 8003026:	b29a      	uxth	r2, r3
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	801a      	strh	r2, [r3, #0]
 800302c:	e017      	b.n	800305e <USB_ActivateEndpoint+0x2e6>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	663b      	str	r3, [r7, #96]	; 0x60
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <USB_ActivateEndpoint+0x2d0>
 8003042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003044:	3b01      	subs	r3, #1
 8003046:	663b      	str	r3, [r7, #96]	; 0x60
 8003048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800304a:	b29b      	uxth	r3, r3
 800304c:	029b      	lsls	r3, r3, #10
 800304e:	b29b      	uxth	r3, r3
 8003050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003058:	b29a      	uxth	r2, r3
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	83fb      	strh	r3, [r7, #30]
 800306c:	8bfb      	ldrh	r3, [r7, #30]
 800306e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01b      	beq.n	80030ae <USB_ActivateEndpoint+0x336>
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308c:	83bb      	strh	r3, [r7, #28]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	441a      	add	r2, r3
 8003098:	8bbb      	ldrh	r3, [r7, #28]
 800309a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800309e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c4:	837b      	strh	r3, [r7, #26]
 80030c6:	8b7b      	ldrh	r3, [r7, #26]
 80030c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030cc:	837b      	strh	r3, [r7, #26]
 80030ce:	8b7b      	ldrh	r3, [r7, #26]
 80030d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030d4:	837b      	strh	r3, [r7, #26]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	441a      	add	r2, r3
 80030e0:	8b7b      	ldrh	r3, [r7, #26]
 80030e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	8013      	strh	r3, [r2, #0]
 80030f6:	e1a2      	b.n	800343e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	441a      	add	r2, r3
 800311c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003128:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800312c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003130:	b29b      	uxth	r3, r3
 8003132:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	65bb      	str	r3, [r7, #88]	; 0x58
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003144:	4413      	add	r3, r2
 8003146:	65bb      	str	r3, [r7, #88]	; 0x58
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	011a      	lsls	r2, r3, #4
 800314e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003150:	4413      	add	r3, r2
 8003152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003156:	657b      	str	r3, [r7, #84]	; 0x54
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	891b      	ldrh	r3, [r3, #8]
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	b29b      	uxth	r3, r3
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	653b      	str	r3, [r7, #80]	; 0x50
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003178:	4413      	add	r3, r2
 800317a:	653b      	str	r3, [r7, #80]	; 0x50
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	011a      	lsls	r2, r3, #4
 8003182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003184:	4413      	add	r3, r2
 8003186:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800318a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	895b      	ldrh	r3, [r3, #10]
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	b29b      	uxth	r3, r3
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f040 8091 	bne.w	80032c8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80031b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80031b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01b      	beq.n	80031f6 <USB_ActivateEndpoint+0x47e>
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	441a      	add	r2, r3
 80031e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	873b      	strh	r3, [r7, #56]	; 0x38
 8003204:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01b      	beq.n	8003246 <USB_ActivateEndpoint+0x4ce>
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003224:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	441a      	add	r2, r3
 8003230:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800323a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003242:	b29b      	uxth	r3, r3
 8003244:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800325e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003260:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003264:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003266:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003268:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800326c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	441a      	add	r2, r3
 8003278:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800327a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800327e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328a:	b29b      	uxth	r3, r3
 800328c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a4:	867b      	strh	r3, [r7, #50]	; 0x32
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	441a      	add	r2, r3
 80032b0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80032b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	8013      	strh	r3, [r2, #0]
 80032c6:	e0ba      	b.n	800343e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80032d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01d      	beq.n	8003320 <USB_ActivateEndpoint+0x5a8>
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	441a      	add	r2, r3
 8003308:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800330c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331c:	b29b      	uxth	r3, r3
 800331e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003330:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01d      	beq.n	8003378 <USB_ActivateEndpoint+0x600>
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	441a      	add	r2, r3
 8003360:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800336c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003370:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003374:	b29b      	uxth	r3, r3
 8003376:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	78db      	ldrb	r3, [r3, #3]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d024      	beq.n	80033ca <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	b29b      	uxth	r3, r3
 800338e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003396:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800339a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800339e:	f083 0320 	eor.w	r3, r3, #32
 80033a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	441a      	add	r2, r3
 80033b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80033b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	8013      	strh	r3, [r2, #0]
 80033c8:	e01d      	b.n	8003406 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	441a      	add	r2, r3
 80033ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80033f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003402:	b29b      	uxth	r3, r3
 8003404:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	b29b      	uxth	r3, r3
 8003414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	441a      	add	r2, r3
 8003428:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800342a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800342e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343a:	b29b      	uxth	r3, r3
 800343c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800343e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003442:	4618      	mov	r0, r3
 8003444:	376c      	adds	r7, #108	; 0x6c
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800344c:	b480      	push	{r7}
 800344e:	b08d      	sub	sp, #52	; 0x34
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	7b1b      	ldrb	r3, [r3, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 808e 	bne.w	800357c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d044      	beq.n	80034f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	81bb      	strh	r3, [r7, #12]
 8003476:	89bb      	ldrh	r3, [r7, #12]
 8003478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01b      	beq.n	80034b8 <USB_DeactivateEndpoint+0x6c>
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	b29b      	uxth	r3, r3
 800348e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	817b      	strh	r3, [r7, #10]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	441a      	add	r2, r3
 80034a2:	897b      	ldrh	r3, [r7, #10]
 80034a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ce:	813b      	strh	r3, [r7, #8]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	441a      	add	r2, r3
 80034da:	893b      	ldrh	r3, [r7, #8]
 80034dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	8013      	strh	r3, [r2, #0]
 80034f0:	e192      	b.n	8003818 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	827b      	strh	r3, [r7, #18]
 8003500:	8a7b      	ldrh	r3, [r7, #18]
 8003502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01b      	beq.n	8003542 <USB_DeactivateEndpoint+0xf6>
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800351c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003520:	823b      	strh	r3, [r7, #16]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	441a      	add	r2, r3
 800352c:	8a3b      	ldrh	r3, [r7, #16]
 800352e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003536:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800353a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353e:	b29b      	uxth	r3, r3
 8003540:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003558:	81fb      	strh	r3, [r7, #14]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	441a      	add	r2, r3
 8003564:	89fb      	ldrh	r3, [r7, #14]
 8003566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800356a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800356e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003576:	b29b      	uxth	r3, r3
 8003578:	8013      	strh	r3, [r2, #0]
 800357a:	e14d      	b.n	8003818 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	785b      	ldrb	r3, [r3, #1]
 8003580:	2b00      	cmp	r3, #0
 8003582:	f040 80a5 	bne.w	80036d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	843b      	strh	r3, [r7, #32]
 8003594:	8c3b      	ldrh	r3, [r7, #32]
 8003596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01b      	beq.n	80035d6 <USB_DeactivateEndpoint+0x18a>
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b4:	83fb      	strh	r3, [r7, #30]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	441a      	add	r2, r3
 80035c0:	8bfb      	ldrh	r3, [r7, #30]
 80035c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	83bb      	strh	r3, [r7, #28]
 80035e4:	8bbb      	ldrh	r3, [r7, #28]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d01b      	beq.n	8003626 <USB_DeactivateEndpoint+0x1da>
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003604:	837b      	strh	r3, [r7, #26]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	441a      	add	r2, r3
 8003610:	8b7b      	ldrh	r3, [r7, #26]
 8003612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800361a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003622:	b29b      	uxth	r3, r3
 8003624:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	b29b      	uxth	r3, r3
 8003634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363c:	833b      	strh	r3, [r7, #24]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	441a      	add	r2, r3
 8003648:	8b3b      	ldrh	r3, [r7, #24]
 800364a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800364e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003656:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800365a:	b29b      	uxth	r3, r3
 800365c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	b29b      	uxth	r3, r3
 800366c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003674:	82fb      	strh	r3, [r7, #22]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	441a      	add	r2, r3
 8003680:	8afb      	ldrh	r3, [r7, #22]
 8003682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800368a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003692:	b29b      	uxth	r3, r3
 8003694:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ac:	82bb      	strh	r3, [r7, #20]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	441a      	add	r2, r3
 80036b8:	8abb      	ldrh	r3, [r7, #20]
 80036ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	8013      	strh	r3, [r2, #0]
 80036ce:	e0a3      	b.n	8003818 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80036de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01b      	beq.n	8003720 <USB_DeactivateEndpoint+0x2d4>
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	441a      	add	r2, r3
 800370a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800370c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800371c:	b29b      	uxth	r3, r3
 800371e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800372e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01b      	beq.n	8003770 <USB_DeactivateEndpoint+0x324>
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	b29b      	uxth	r3, r3
 8003746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	441a      	add	r2, r3
 800375a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800375c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003768:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800376c:	b29b      	uxth	r3, r3
 800376e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	b29b      	uxth	r3, r3
 800377e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	441a      	add	r2, r3
 8003792:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800379c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	441a      	add	r2, r3
 80037ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037dc:	b29b      	uxth	r3, r3
 80037de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	441a      	add	r2, r3
 8003802:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800380c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003814:	b29b      	uxth	r3, r3
 8003816:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3734      	adds	r7, #52	; 0x34
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b0c4      	sub	sp, #272	; 0x110
 8003828:	af00      	add	r7, sp, #0
 800382a:	1d3b      	adds	r3, r7, #4
 800382c:	6018      	str	r0, [r3, #0]
 800382e:	463b      	mov	r3, r7
 8003830:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003832:	463b      	mov	r3, r7
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	785b      	ldrb	r3, [r3, #1]
 8003838:	2b01      	cmp	r3, #1
 800383a:	f040 8557 	bne.w	80042ec <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800383e:	463b      	mov	r3, r7
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	463b      	mov	r3, r7
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	429a      	cmp	r2, r3
 800384c:	d905      	bls.n	800385a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800384e:	463b      	mov	r3, r7
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003858:	e004      	b.n	8003864 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800385a:	463b      	mov	r3, r7
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003864:	463b      	mov	r3, r7
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	7b1b      	ldrb	r3, [r3, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d12c      	bne.n	80038c8 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800386e:	463b      	mov	r3, r7
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6959      	ldr	r1, [r3, #20]
 8003874:	463b      	mov	r3, r7
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	88da      	ldrh	r2, [r3, #6]
 800387a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800387e:	b29b      	uxth	r3, r3
 8003880:	1d38      	adds	r0, r7, #4
 8003882:	6800      	ldr	r0, [r0, #0]
 8003884:	f001 fa2c 	bl	8004ce0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003888:	1d3b      	adds	r3, r7, #4
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	1d3b      	adds	r3, r7, #4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003896:	b29b      	uxth	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	4413      	add	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	463b      	mov	r3, r7
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	011a      	lsls	r2, r3, #4
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	4413      	add	r3, r2
 80038ac:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80038b0:	f107 0310 	add.w	r3, r7, #16
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	f107 0310 	add.w	r3, r7, #16
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	801a      	strh	r2, [r3, #0]
 80038c4:	f000 bcdd 	b.w	8004282 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80038c8:	463b      	mov	r3, r7
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	78db      	ldrb	r3, [r3, #3]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	f040 8347 	bne.w	8003f62 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80038d4:	463b      	mov	r3, r7
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6a1a      	ldr	r2, [r3, #32]
 80038da:	463b      	mov	r3, r7
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	f240 82eb 	bls.w	8003ebc <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80038e6:	1d3b      	adds	r3, r7, #4
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	463b      	mov	r3, r7
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003900:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	463b      	mov	r3, r7
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	441a      	add	r2, r3
 8003912:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800391a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800391e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003926:	b29b      	uxth	r3, r3
 8003928:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800392a:	463b      	mov	r3, r7
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6a1a      	ldr	r2, [r3, #32]
 8003930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003934:	1ad2      	subs	r2, r2, r3
 8003936:	463b      	mov	r3, r7
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800393c:	1d3b      	adds	r3, r7, #4
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	463b      	mov	r3, r7
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8159 	beq.w	8003c0a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
 800395e:	463b      	mov	r3, r7
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	785b      	ldrb	r3, [r3, #1]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d164      	bne.n	8003a32 <USB_EPStartXfer+0x20e>
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003976:	b29b      	uxth	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397c:	4413      	add	r3, r2
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003980:	463b      	mov	r3, r7
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	011a      	lsls	r2, r3, #4
 8003988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398a:	4413      	add	r3, r2
 800398c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
 8003992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d112      	bne.n	80039c0 <USB_EPStartXfer+0x19c>
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	801a      	strh	r2, [r3, #0]
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	801a      	strh	r2, [r3, #0]
 80039be:	e054      	b.n	8003a6a <USB_EPStartXfer+0x246>
 80039c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c4:	2b3e      	cmp	r3, #62	; 0x3e
 80039c6:	d817      	bhi.n	80039f8 <USB_EPStartXfer+0x1d4>
 80039c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d004      	beq.n	80039e8 <USB_EPStartXfer+0x1c4>
 80039de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e2:	3301      	adds	r3, #1
 80039e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	029b      	lsls	r3, r3, #10
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	801a      	strh	r2, [r3, #0]
 80039f6:	e038      	b.n	8003a6a <USB_EPStartXfer+0x246>
 80039f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d104      	bne.n	8003a18 <USB_EPStartXfer+0x1f4>
 8003a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a12:	3b01      	subs	r3, #1
 8003a14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	029b      	lsls	r3, r3, #10
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	801a      	strh	r2, [r3, #0]
 8003a30:	e01b      	b.n	8003a6a <USB_EPStartXfer+0x246>
 8003a32:	463b      	mov	r3, r7
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	785b      	ldrb	r3, [r3, #1]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d116      	bne.n	8003a6a <USB_EPStartXfer+0x246>
 8003a3c:	1d3b      	adds	r3, r7, #4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4a:	4413      	add	r3, r2
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4e:	463b      	mov	r3, r7
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	011a      	lsls	r2, r3, #4
 8003a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a58:	4413      	add	r3, r2
 8003a5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	895b      	ldrh	r3, [r3, #10]
 8003a70:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a74:	463b      	mov	r3, r7
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6959      	ldr	r1, [r3, #20]
 8003a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003a84:	1d38      	adds	r0, r7, #4
 8003a86:	6800      	ldr	r0, [r0, #0]
 8003a88:	f001 f92a 	bl	8004ce0 <USB_WritePMA>
            ep->xfer_buff += len;
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a96:	441a      	add	r2, r3
 8003a98:	463b      	mov	r3, r7
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003a9e:	463b      	mov	r3, r7
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	463b      	mov	r3, r7
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d909      	bls.n	8003ac2 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003aae:	463b      	mov	r3, r7
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a1a      	ldr	r2, [r3, #32]
 8003ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab8:	1ad2      	subs	r2, r2, r3
 8003aba:	463b      	mov	r3, r7
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	621a      	str	r2, [r3, #32]
 8003ac0:	e008      	b.n	8003ad4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003ac2:	463b      	mov	r3, r7
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003acc:	463b      	mov	r3, r7
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	785b      	ldrb	r3, [r3, #1]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d164      	bne.n	8003ba8 <USB_EPStartXfer+0x384>
 8003ade:	1d3b      	adds	r3, r7, #4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	1d3b      	adds	r3, r7, #4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	4413      	add	r3, r2
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	463b      	mov	r3, r7
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	011a      	lsls	r2, r3, #4
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d112      	bne.n	8003b36 <USB_EPStartXfer+0x312>
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	801a      	strh	r2, [r3, #0]
 8003b34:	e057      	b.n	8003be6 <USB_EPStartXfer+0x3c2>
 8003b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8003b3c:	d817      	bhi.n	8003b6e <USB_EPStartXfer+0x34a>
 8003b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d004      	beq.n	8003b5e <USB_EPStartXfer+0x33a>
 8003b54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	029b      	lsls	r3, r3, #10
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	e03b      	b.n	8003be6 <USB_EPStartXfer+0x3c2>
 8003b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d104      	bne.n	8003b8e <USB_EPStartXfer+0x36a>
 8003b84:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	029b      	lsls	r3, r3, #10
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	e01e      	b.n	8003be6 <USB_EPStartXfer+0x3c2>
 8003ba8:	463b      	mov	r3, r7
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	785b      	ldrb	r3, [r3, #1]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d119      	bne.n	8003be6 <USB_EPStartXfer+0x3c2>
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb8:	1d3b      	adds	r3, r7, #4
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	4413      	add	r3, r2
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	463b      	mov	r3, r7
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	011a      	lsls	r2, r3, #4
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bda:	623b      	str	r3, [r7, #32]
 8003bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003be6:	463b      	mov	r3, r7
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	891b      	ldrh	r3, [r3, #8]
 8003bec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bf0:	463b      	mov	r3, r7
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6959      	ldr	r1, [r3, #20]
 8003bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003c00:	1d38      	adds	r0, r7, #4
 8003c02:	6800      	ldr	r0, [r0, #0]
 8003c04:	f001 f86c 	bl	8004ce0 <USB_WritePMA>
 8003c08:	e33b      	b.n	8004282 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d164      	bne.n	8003cde <USB_EPStartXfer+0x4ba>
 8003c14:	1d3b      	adds	r3, r7, #4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c1a:	1d3b      	adds	r3, r7, #4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c28:	4413      	add	r3, r2
 8003c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c2c:	463b      	mov	r3, r7
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	011a      	lsls	r2, r3, #4
 8003c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c36:	4413      	add	r3, r2
 8003c38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d112      	bne.n	8003c6c <USB_EPStartXfer+0x448>
 8003c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c54:	801a      	strh	r2, [r3, #0]
 8003c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c68:	801a      	strh	r2, [r3, #0]
 8003c6a:	e057      	b.n	8003d1c <USB_EPStartXfer+0x4f8>
 8003c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c70:	2b3e      	cmp	r3, #62	; 0x3e
 8003c72:	d817      	bhi.n	8003ca4 <USB_EPStartXfer+0x480>
 8003c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <USB_EPStartXfer+0x470>
 8003c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	029b      	lsls	r3, r3, #10
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	e03b      	b.n	8003d1c <USB_EPStartXfer+0x4f8>
 8003ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d104      	bne.n	8003cc4 <USB_EPStartXfer+0x4a0>
 8003cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	029b      	lsls	r3, r3, #10
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cda:	801a      	strh	r2, [r3, #0]
 8003cdc:	e01e      	b.n	8003d1c <USB_EPStartXfer+0x4f8>
 8003cde:	463b      	mov	r3, r7
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d119      	bne.n	8003d1c <USB_EPStartXfer+0x4f8>
 8003ce8:	1d3b      	adds	r3, r7, #4
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	657b      	str	r3, [r7, #84]	; 0x54
 8003cee:	1d3b      	adds	r3, r7, #4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cfc:	4413      	add	r3, r2
 8003cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8003d00:	463b      	mov	r3, r7
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	011a      	lsls	r2, r3, #4
 8003d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d10:	653b      	str	r3, [r7, #80]	; 0x50
 8003d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d1c:	463b      	mov	r3, r7
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	891b      	ldrh	r3, [r3, #8]
 8003d22:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d26:	463b      	mov	r3, r7
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6959      	ldr	r1, [r3, #20]
 8003d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003d36:	1d38      	adds	r0, r7, #4
 8003d38:	6800      	ldr	r0, [r0, #0]
 8003d3a:	f000 ffd1 	bl	8004ce0 <USB_WritePMA>
            ep->xfer_buff += len;
 8003d3e:	463b      	mov	r3, r7
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d48:	441a      	add	r2, r3
 8003d4a:	463b      	mov	r3, r7
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003d50:	463b      	mov	r3, r7
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6a1a      	ldr	r2, [r3, #32]
 8003d56:	463b      	mov	r3, r7
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d909      	bls.n	8003d74 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003d60:	463b      	mov	r3, r7
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6a1a      	ldr	r2, [r3, #32]
 8003d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d6a:	1ad2      	subs	r2, r2, r3
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	621a      	str	r2, [r3, #32]
 8003d72:	e008      	b.n	8003d86 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003d74:	463b      	mov	r3, r7
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003d7e:	463b      	mov	r3, r7
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d86:	1d3b      	adds	r3, r7, #4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	785b      	ldrb	r3, [r3, #1]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d164      	bne.n	8003e60 <USB_EPStartXfer+0x63c>
 8003d96:	1d3b      	adds	r3, r7, #4
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003daa:	4413      	add	r3, r2
 8003dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dae:	463b      	mov	r3, r7
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	011a      	lsls	r2, r3, #4
 8003db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db8:	4413      	add	r3, r2
 8003dba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d112      	bne.n	8003dee <USB_EPStartXfer+0x5ca>
 8003dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	801a      	strh	r2, [r3, #0]
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	801a      	strh	r2, [r3, #0]
 8003dec:	e054      	b.n	8003e98 <USB_EPStartXfer+0x674>
 8003dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df2:	2b3e      	cmp	r3, #62	; 0x3e
 8003df4:	d817      	bhi.n	8003e26 <USB_EPStartXfer+0x602>
 8003df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <USB_EPStartXfer+0x5f2>
 8003e0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e10:	3301      	adds	r3, #1
 8003e12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	029b      	lsls	r3, r3, #10
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	801a      	strh	r2, [r3, #0]
 8003e24:	e038      	b.n	8003e98 <USB_EPStartXfer+0x674>
 8003e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <USB_EPStartXfer+0x622>
 8003e3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e40:	3b01      	subs	r3, #1
 8003e42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	029b      	lsls	r3, r3, #10
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	801a      	strh	r2, [r3, #0]
 8003e5e:	e01b      	b.n	8003e98 <USB_EPStartXfer+0x674>
 8003e60:	463b      	mov	r3, r7
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	785b      	ldrb	r3, [r3, #1]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d116      	bne.n	8003e98 <USB_EPStartXfer+0x674>
 8003e6a:	1d3b      	adds	r3, r7, #4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e78:	4413      	add	r3, r2
 8003e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e7c:	463b      	mov	r3, r7
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	011a      	lsls	r2, r3, #4
 8003e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e86:	4413      	add	r3, r2
 8003e88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003e98:	463b      	mov	r3, r7
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	895b      	ldrh	r3, [r3, #10]
 8003e9e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6959      	ldr	r1, [r3, #20]
 8003ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003eb2:	1d38      	adds	r0, r7, #4
 8003eb4:	6800      	ldr	r0, [r0, #0]
 8003eb6:	f000 ff13 	bl	8004ce0 <USB_WritePMA>
 8003eba:	e1e2      	b.n	8004282 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003ebc:	463b      	mov	r3, r7
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	463b      	mov	r3, r7
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003ee4:	1d3b      	adds	r3, r7, #4
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	463b      	mov	r3, r7
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	441a      	add	r2, r3
 8003ef2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f10:	1d3b      	adds	r3, r7, #4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f1e:	4413      	add	r3, r2
 8003f20:	663b      	str	r3, [r7, #96]	; 0x60
 8003f22:	463b      	mov	r3, r7
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	011a      	lsls	r2, r3, #4
 8003f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003f3e:	463b      	mov	r3, r7
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	891b      	ldrh	r3, [r3, #8]
 8003f44:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f48:	463b      	mov	r3, r7
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6959      	ldr	r1, [r3, #20]
 8003f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003f58:	1d38      	adds	r0, r7, #4
 8003f5a:	6800      	ldr	r0, [r0, #0]
 8003f5c:	f000 fec0 	bl	8004ce0 <USB_WritePMA>
 8003f60:	e18f      	b.n	8004282 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	463b      	mov	r3, r7
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 808f 	beq.w	800409c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f84:	463b      	mov	r3, r7
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	785b      	ldrb	r3, [r3, #1]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d164      	bne.n	8004058 <USB_EPStartXfer+0x834>
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	673b      	str	r3, [r7, #112]	; 0x70
 8003f94:	1d3b      	adds	r3, r7, #4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fa2:	4413      	add	r3, r2
 8003fa4:	673b      	str	r3, [r7, #112]	; 0x70
 8003fa6:	463b      	mov	r3, r7
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	011a      	lsls	r2, r3, #4
 8003fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d112      	bne.n	8003fe6 <USB_EPStartXfer+0x7c2>
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fce:	801a      	strh	r2, [r3, #0]
 8003fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe2:	801a      	strh	r2, [r3, #0]
 8003fe4:	e054      	b.n	8004090 <USB_EPStartXfer+0x86c>
 8003fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fea:	2b3e      	cmp	r3, #62	; 0x3e
 8003fec:	d817      	bhi.n	800401e <USB_EPStartXfer+0x7fa>
 8003fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d004      	beq.n	800400e <USB_EPStartXfer+0x7ea>
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004008:	3301      	adds	r3, #1
 800400a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004012:	b29b      	uxth	r3, r3
 8004014:	029b      	lsls	r3, r3, #10
 8004016:	b29a      	uxth	r2, r3
 8004018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401a:	801a      	strh	r2, [r3, #0]
 800401c:	e038      	b.n	8004090 <USB_EPStartXfer+0x86c>
 800401e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <USB_EPStartXfer+0x81a>
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	3b01      	subs	r3, #1
 800403a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	b29b      	uxth	r3, r3
 8004044:	029b      	lsls	r3, r3, #10
 8004046:	b29b      	uxth	r3, r3
 8004048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800404c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004050:	b29a      	uxth	r2, r3
 8004052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004054:	801a      	strh	r2, [r3, #0]
 8004056:	e01b      	b.n	8004090 <USB_EPStartXfer+0x86c>
 8004058:	463b      	mov	r3, r7
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	785b      	ldrb	r3, [r3, #1]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d116      	bne.n	8004090 <USB_EPStartXfer+0x86c>
 8004062:	1d3b      	adds	r3, r7, #4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406a:	b29b      	uxth	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004070:	4413      	add	r3, r2
 8004072:	67bb      	str	r3, [r7, #120]	; 0x78
 8004074:	463b      	mov	r3, r7
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	011a      	lsls	r2, r3, #4
 800407c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800407e:	4413      	add	r3, r2
 8004080:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004084:	677b      	str	r3, [r7, #116]	; 0x74
 8004086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408a:	b29a      	uxth	r2, r3
 800408c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004090:	463b      	mov	r3, r7
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	895b      	ldrh	r3, [r3, #10]
 8004096:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800409a:	e097      	b.n	80041cc <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800409c:	463b      	mov	r3, r7
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	785b      	ldrb	r3, [r3, #1]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d168      	bne.n	8004178 <USB_EPStartXfer+0x954>
 80040a6:	1d3b      	adds	r3, r7, #4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040be:	4413      	add	r3, r2
 80040c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040c4:	463b      	mov	r3, r7
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	011a      	lsls	r2, r3, #4
 80040cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040d0:	4413      	add	r3, r2
 80040d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d112      	bne.n	8004106 <USB_EPStartXfer+0x8e2>
 80040e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ee:	801a      	strh	r2, [r3, #0]
 80040f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040fe:	b29a      	uxth	r2, r3
 8004100:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004102:	801a      	strh	r2, [r3, #0]
 8004104:	e05d      	b.n	80041c2 <USB_EPStartXfer+0x99e>
 8004106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410a:	2b3e      	cmp	r3, #62	; 0x3e
 800410c:	d817      	bhi.n	800413e <USB_EPStartXfer+0x91a>
 800410e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d004      	beq.n	800412e <USB_EPStartXfer+0x90a>
 8004124:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004128:	3301      	adds	r3, #1
 800412a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800412e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004132:	b29b      	uxth	r3, r3
 8004134:	029b      	lsls	r3, r3, #10
 8004136:	b29a      	uxth	r2, r3
 8004138:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800413a:	801a      	strh	r2, [r3, #0]
 800413c:	e041      	b.n	80041c2 <USB_EPStartXfer+0x99e>
 800413e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	2b00      	cmp	r3, #0
 8004152:	d104      	bne.n	800415e <USB_EPStartXfer+0x93a>
 8004154:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004158:	3b01      	subs	r3, #1
 800415a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800415e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004162:	b29b      	uxth	r3, r3
 8004164:	029b      	lsls	r3, r3, #10
 8004166:	b29b      	uxth	r3, r3
 8004168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800416c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004170:	b29a      	uxth	r2, r3
 8004172:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004174:	801a      	strh	r2, [r3, #0]
 8004176:	e024      	b.n	80041c2 <USB_EPStartXfer+0x99e>
 8004178:	463b      	mov	r3, r7
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d11f      	bne.n	80041c2 <USB_EPStartXfer+0x99e>
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004192:	b29b      	uxth	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800419a:	4413      	add	r3, r2
 800419c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041a0:	463b      	mov	r3, r7
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	011a      	lsls	r2, r3, #4
 80041a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041ac:	4413      	add	r3, r2
 80041ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80041c2:	463b      	mov	r3, r7
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	891b      	ldrh	r3, [r3, #8]
 80041c8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041cc:	463b      	mov	r3, r7
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6959      	ldr	r1, [r3, #20]
 80041d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80041dc:	1d38      	adds	r0, r7, #4
 80041de:	6800      	ldr	r0, [r0, #0]
 80041e0:	f000 fd7e 	bl	8004ce0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80041e4:	463b      	mov	r3, r7
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	785b      	ldrb	r3, [r3, #1]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d122      	bne.n	8004234 <USB_EPStartXfer+0xa10>
 80041ee:	1d3b      	adds	r3, r7, #4
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	463b      	mov	r3, r7
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004208:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800420c:	1d3b      	adds	r3, r7, #4
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	463b      	mov	r3, r7
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	441a      	add	r2, r3
 800421a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800421e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800422e:	b29b      	uxth	r3, r3
 8004230:	8013      	strh	r3, [r2, #0]
 8004232:	e026      	b.n	8004282 <USB_EPStartXfer+0xa5e>
 8004234:	463b      	mov	r3, r7
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d121      	bne.n	8004282 <USB_EPStartXfer+0xa5e>
 800423e:	1d3b      	adds	r3, r7, #4
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	463b      	mov	r3, r7
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004258:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800425c:	1d3b      	adds	r3, r7, #4
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	463b      	mov	r3, r7
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800426e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004276:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800427a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427e:	b29b      	uxth	r3, r3
 8004280:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004282:	1d3b      	adds	r3, r7, #4
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	463b      	mov	r3, r7
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f107 020e 	add.w	r2, r7, #14
 8004298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a0:	8013      	strh	r3, [r2, #0]
 80042a2:	f107 030e 	add.w	r3, r7, #14
 80042a6:	f107 020e 	add.w	r2, r7, #14
 80042aa:	8812      	ldrh	r2, [r2, #0]
 80042ac:	f082 0210 	eor.w	r2, r2, #16
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	f107 030e 	add.w	r3, r7, #14
 80042b6:	f107 020e 	add.w	r2, r7, #14
 80042ba:	8812      	ldrh	r2, [r2, #0]
 80042bc:	f082 0220 	eor.w	r2, r2, #32
 80042c0:	801a      	strh	r2, [r3, #0]
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	463b      	mov	r3, r7
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	441a      	add	r2, r3
 80042d0:	f107 030e 	add.w	r3, r7, #14
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	8013      	strh	r3, [r2, #0]
 80042ea:	e3b5      	b.n	8004a58 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80042ec:	463b      	mov	r3, r7
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	7b1b      	ldrb	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f040 8090 	bne.w	8004418 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80042f8:	463b      	mov	r3, r7
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	463b      	mov	r3, r7
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	429a      	cmp	r2, r3
 8004306:	d90e      	bls.n	8004326 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004308:	463b      	mov	r3, r7
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004312:	463b      	mov	r3, r7
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699a      	ldr	r2, [r3, #24]
 8004318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431c:	1ad2      	subs	r2, r2, r3
 800431e:	463b      	mov	r3, r7
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	619a      	str	r2, [r3, #24]
 8004324:	e008      	b.n	8004338 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004326:	463b      	mov	r3, r7
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004330:	463b      	mov	r3, r7
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2200      	movs	r2, #0
 8004336:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004338:	1d3b      	adds	r3, r7, #4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004340:	1d3b      	adds	r3, r7, #4
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004348:	b29b      	uxth	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004350:	4413      	add	r3, r2
 8004352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004356:	463b      	mov	r3, r7
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	011a      	lsls	r2, r3, #4
 800435e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004362:	4413      	add	r3, r2
 8004364:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800436c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d116      	bne.n	80043a2 <USB_EPStartXfer+0xb7e>
 8004374:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004380:	b29a      	uxth	r2, r3
 8004382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004398:	b29a      	uxth	r2, r3
 800439a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800439e:	801a      	strh	r2, [r3, #0]
 80043a0:	e32c      	b.n	80049fc <USB_EPStartXfer+0x11d8>
 80043a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a6:	2b3e      	cmp	r3, #62	; 0x3e
 80043a8:	d818      	bhi.n	80043dc <USB_EPStartXfer+0xbb8>
 80043aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d004      	beq.n	80043ca <USB_EPStartXfer+0xba6>
 80043c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043c4:	3301      	adds	r3, #1
 80043c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	029b      	lsls	r3, r3, #10
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043d8:	801a      	strh	r2, [r3, #0]
 80043da:	e30f      	b.n	80049fc <USB_EPStartXfer+0x11d8>
 80043dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d104      	bne.n	80043fc <USB_EPStartXfer+0xbd8>
 80043f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043f6:	3b01      	subs	r3, #1
 80043f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004400:	b29b      	uxth	r3, r3
 8004402:	029b      	lsls	r3, r3, #10
 8004404:	b29b      	uxth	r3, r3
 8004406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800440a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800440e:	b29a      	uxth	r2, r3
 8004410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	e2f1      	b.n	80049fc <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004418:	463b      	mov	r3, r7
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	78db      	ldrb	r3, [r3, #3]
 800441e:	2b02      	cmp	r3, #2
 8004420:	f040 818f 	bne.w	8004742 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004424:	463b      	mov	r3, r7
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d175      	bne.n	800451a <USB_EPStartXfer+0xcf6>
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004436:	1d3b      	adds	r3, r7, #4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443e:	b29b      	uxth	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004446:	4413      	add	r3, r2
 8004448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800444c:	463b      	mov	r3, r7
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	011a      	lsls	r2, r3, #4
 8004454:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004458:	4413      	add	r3, r2
 800445a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800445e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004462:	463b      	mov	r3, r7
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d116      	bne.n	800449a <USB_EPStartXfer+0xc76>
 800446c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004478:	b29a      	uxth	r2, r3
 800447a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800448c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004490:	b29a      	uxth	r2, r3
 8004492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	e065      	b.n	8004566 <USB_EPStartXfer+0xd42>
 800449a:	463b      	mov	r3, r7
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b3e      	cmp	r3, #62	; 0x3e
 80044a2:	d81a      	bhi.n	80044da <USB_EPStartXfer+0xcb6>
 80044a4:	463b      	mov	r3, r7
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	085b      	lsrs	r3, r3, #1
 80044ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044b0:	463b      	mov	r3, r7
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <USB_EPStartXfer+0xca4>
 80044be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044c2:	3301      	adds	r3, #1
 80044c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	029b      	lsls	r3, r3, #10
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044d6:	801a      	strh	r2, [r3, #0]
 80044d8:	e045      	b.n	8004566 <USB_EPStartXfer+0xd42>
 80044da:	463b      	mov	r3, r7
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044e6:	463b      	mov	r3, r7
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f003 031f 	and.w	r3, r3, #31
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <USB_EPStartXfer+0xcda>
 80044f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044f8:	3b01      	subs	r3, #1
 80044fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004502:	b29b      	uxth	r3, r3
 8004504:	029b      	lsls	r3, r3, #10
 8004506:	b29b      	uxth	r3, r3
 8004508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004510:	b29a      	uxth	r2, r3
 8004512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004516:	801a      	strh	r2, [r3, #0]
 8004518:	e025      	b.n	8004566 <USB_EPStartXfer+0xd42>
 800451a:	463b      	mov	r3, r7
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	785b      	ldrb	r3, [r3, #1]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d120      	bne.n	8004566 <USB_EPStartXfer+0xd42>
 8004524:	1d3b      	adds	r3, r7, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800452c:	1d3b      	adds	r3, r7, #4
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004534:	b29b      	uxth	r3, r3
 8004536:	461a      	mov	r2, r3
 8004538:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800453c:	4413      	add	r3, r2
 800453e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004542:	463b      	mov	r3, r7
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	011a      	lsls	r2, r3, #4
 800454a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800454e:	4413      	add	r3, r2
 8004550:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004558:	463b      	mov	r3, r7
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	b29a      	uxth	r2, r3
 8004560:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004564:	801a      	strh	r2, [r3, #0]
 8004566:	1d3b      	adds	r3, r7, #4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800456e:	463b      	mov	r3, r7
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	785b      	ldrb	r3, [r3, #1]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d175      	bne.n	8004664 <USB_EPStartXfer+0xe40>
 8004578:	1d3b      	adds	r3, r7, #4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004580:	1d3b      	adds	r3, r7, #4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004588:	b29b      	uxth	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004590:	4413      	add	r3, r2
 8004592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004596:	463b      	mov	r3, r7
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	011a      	lsls	r2, r3, #4
 800459e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045a2:	4413      	add	r3, r2
 80045a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045ac:	463b      	mov	r3, r7
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d116      	bne.n	80045e4 <USB_EPStartXfer+0xdc0>
 80045b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045da:	b29a      	uxth	r2, r3
 80045dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045e0:	801a      	strh	r2, [r3, #0]
 80045e2:	e061      	b.n	80046a8 <USB_EPStartXfer+0xe84>
 80045e4:	463b      	mov	r3, r7
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b3e      	cmp	r3, #62	; 0x3e
 80045ec:	d81a      	bhi.n	8004624 <USB_EPStartXfer+0xe00>
 80045ee:	463b      	mov	r3, r7
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045fa:	463b      	mov	r3, r7
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <USB_EPStartXfer+0xdee>
 8004608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460c:	3301      	adds	r3, #1
 800460e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004616:	b29b      	uxth	r3, r3
 8004618:	029b      	lsls	r3, r3, #10
 800461a:	b29a      	uxth	r2, r3
 800461c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004620:	801a      	strh	r2, [r3, #0]
 8004622:	e041      	b.n	80046a8 <USB_EPStartXfer+0xe84>
 8004624:	463b      	mov	r3, r7
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004630:	463b      	mov	r3, r7
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <USB_EPStartXfer+0xe24>
 800463e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004642:	3b01      	subs	r3, #1
 8004644:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464c:	b29b      	uxth	r3, r3
 800464e:	029b      	lsls	r3, r3, #10
 8004650:	b29b      	uxth	r3, r3
 8004652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465a:	b29a      	uxth	r2, r3
 800465c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	e021      	b.n	80046a8 <USB_EPStartXfer+0xe84>
 8004664:	463b      	mov	r3, r7
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d11c      	bne.n	80046a8 <USB_EPStartXfer+0xe84>
 800466e:	1d3b      	adds	r3, r7, #4
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004676:	b29b      	uxth	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800467e:	4413      	add	r3, r2
 8004680:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004684:	463b      	mov	r3, r7
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	011a      	lsls	r2, r3, #4
 800468c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004690:	4413      	add	r3, r2
 8004692:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800469a:	463b      	mov	r3, r7
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046a6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80046a8:	463b      	mov	r3, r7
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 81a4 	beq.w	80049fc <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80046b4:	1d3b      	adds	r3, r7, #4
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	463b      	mov	r3, r7
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80046c8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d005      	beq.n	80046e0 <USB_EPStartXfer+0xebc>
 80046d4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10d      	bne.n	80046fc <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80046e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f040 8187 	bne.w	80049fc <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80046ee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f040 8180 	bne.w	80049fc <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80046fc:	1d3b      	adds	r3, r7, #4
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	463b      	mov	r3, r7
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800471a:	1d3b      	adds	r3, r7, #4
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	463b      	mov	r3, r7
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	441a      	add	r2, r3
 8004728:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800472c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]
 8004740:	e15c      	b.n	80049fc <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004742:	463b      	mov	r3, r7
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	78db      	ldrb	r3, [r3, #3]
 8004748:	2b01      	cmp	r3, #1
 800474a:	f040 8155 	bne.w	80049f8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800474e:	463b      	mov	r3, r7
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699a      	ldr	r2, [r3, #24]
 8004754:	463b      	mov	r3, r7
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	429a      	cmp	r2, r3
 800475c:	d90e      	bls.n	800477c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800475e:	463b      	mov	r3, r7
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004768:	463b      	mov	r3, r7
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	463b      	mov	r3, r7
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	619a      	str	r2, [r3, #24]
 800477a:	e008      	b.n	800478e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800477c:	463b      	mov	r3, r7
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004786:	463b      	mov	r3, r7
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2200      	movs	r2, #0
 800478c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800478e:	463b      	mov	r3, r7
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d16f      	bne.n	8004878 <USB_EPStartXfer+0x1054>
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047a0:	1d3b      	adds	r3, r7, #4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80047b0:	4413      	add	r3, r2
 80047b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047b6:	463b      	mov	r3, r7
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	011a      	lsls	r2, r3, #4
 80047be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80047c2:	4413      	add	r3, r2
 80047c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d116      	bne.n	8004802 <USB_EPStartXfer+0xfde>
 80047d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047e6:	801a      	strh	r2, [r3, #0]
 80047e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047fe:	801a      	strh	r2, [r3, #0]
 8004800:	e05f      	b.n	80048c2 <USB_EPStartXfer+0x109e>
 8004802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004806:	2b3e      	cmp	r3, #62	; 0x3e
 8004808:	d818      	bhi.n	800483c <USB_EPStartXfer+0x1018>
 800480a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <USB_EPStartXfer+0x1006>
 8004820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004824:	3301      	adds	r3, #1
 8004826:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800482a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482e:	b29b      	uxth	r3, r3
 8004830:	029b      	lsls	r3, r3, #10
 8004832:	b29a      	uxth	r2, r3
 8004834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	e042      	b.n	80048c2 <USB_EPStartXfer+0x109e>
 800483c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	2b00      	cmp	r3, #0
 8004850:	d104      	bne.n	800485c <USB_EPStartXfer+0x1038>
 8004852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004856:	3b01      	subs	r3, #1
 8004858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800485c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004860:	b29b      	uxth	r3, r3
 8004862:	029b      	lsls	r3, r3, #10
 8004864:	b29b      	uxth	r3, r3
 8004866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800486a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486e:	b29a      	uxth	r2, r3
 8004870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004874:	801a      	strh	r2, [r3, #0]
 8004876:	e024      	b.n	80048c2 <USB_EPStartXfer+0x109e>
 8004878:	463b      	mov	r3, r7
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	785b      	ldrb	r3, [r3, #1]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d11f      	bne.n	80048c2 <USB_EPStartXfer+0x109e>
 8004882:	1d3b      	adds	r3, r7, #4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800488a:	1d3b      	adds	r3, r7, #4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004892:	b29b      	uxth	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800489a:	4413      	add	r3, r2
 800489c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048a0:	463b      	mov	r3, r7
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	011a      	lsls	r2, r3, #4
 80048a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ac:	4413      	add	r3, r2
 80048ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80048b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048c0:	801a      	strh	r2, [r3, #0]
 80048c2:	1d3b      	adds	r3, r7, #4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ca:	463b      	mov	r3, r7
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	785b      	ldrb	r3, [r3, #1]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d16f      	bne.n	80049b4 <USB_EPStartXfer+0x1190>
 80048d4:	1d3b      	adds	r3, r7, #4
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048dc:	1d3b      	adds	r3, r7, #4
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048ec:	4413      	add	r3, r2
 80048ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048f2:	463b      	mov	r3, r7
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	011a      	lsls	r2, r3, #4
 80048fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048fe:	4413      	add	r3, r2
 8004900:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d116      	bne.n	800493e <USB_EPStartXfer+0x111a>
 8004910:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800491c:	b29a      	uxth	r2, r3
 800491e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004922:	801a      	strh	r2, [r3, #0]
 8004924:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004934:	b29a      	uxth	r2, r3
 8004936:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800493a:	801a      	strh	r2, [r3, #0]
 800493c:	e05e      	b.n	80049fc <USB_EPStartXfer+0x11d8>
 800493e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004942:	2b3e      	cmp	r3, #62	; 0x3e
 8004944:	d818      	bhi.n	8004978 <USB_EPStartXfer+0x1154>
 8004946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <USB_EPStartXfer+0x1142>
 800495c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004960:	3301      	adds	r3, #1
 8004962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800496a:	b29b      	uxth	r3, r3
 800496c:	029b      	lsls	r3, r3, #10
 800496e:	b29a      	uxth	r2, r3
 8004970:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004974:	801a      	strh	r2, [r3, #0]
 8004976:	e041      	b.n	80049fc <USB_EPStartXfer+0x11d8>
 8004978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	2b00      	cmp	r3, #0
 800498c:	d104      	bne.n	8004998 <USB_EPStartXfer+0x1174>
 800498e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004992:	3b01      	subs	r3, #1
 8004994:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800499c:	b29b      	uxth	r3, r3
 800499e:	029b      	lsls	r3, r3, #10
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	e023      	b.n	80049fc <USB_EPStartXfer+0x11d8>
 80049b4:	463b      	mov	r3, r7
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d11e      	bne.n	80049fc <USB_EPStartXfer+0x11d8>
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049ce:	4413      	add	r3, r2
 80049d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049d4:	463b      	mov	r3, r7
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	011a      	lsls	r2, r3, #4
 80049dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049e0:	4413      	add	r3, r2
 80049e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	e001      	b.n	80049fc <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e02e      	b.n	8004a5a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049fc:	1d3b      	adds	r3, r7, #4
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	463b      	mov	r3, r7
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a16:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004a1a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a1e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a22:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004a26:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a2e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004a32:	1d3b      	adds	r3, r7, #4
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	463b      	mov	r3, r7
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	441a      	add	r2, r3
 8004a40:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	785b      	ldrb	r3, [r3, #1]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d020      	beq.n	8004ab8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a8c:	81bb      	strh	r3, [r7, #12]
 8004a8e:	89bb      	ldrh	r3, [r7, #12]
 8004a90:	f083 0310 	eor.w	r3, r3, #16
 8004a94:	81bb      	strh	r3, [r7, #12]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	89bb      	ldrh	r3, [r7, #12]
 8004aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]
 8004ab6:	e01f      	b.n	8004af8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	81fb      	strh	r3, [r7, #14]
 8004ad0:	89fb      	ldrh	r3, [r7, #14]
 8004ad2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ad6:	81fb      	strh	r3, [r7, #14]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	89fb      	ldrh	r3, [r7, #14]
 8004ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr

08004b04 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	7b1b      	ldrb	r3, [r3, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f040 809d 	bne.w	8004c52 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d04c      	beq.n	8004bba <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	823b      	strh	r3, [r7, #16]
 8004b2e:	8a3b      	ldrh	r3, [r7, #16]
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01b      	beq.n	8004b70 <USB_EPClearStall+0x6c>
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4e:	81fb      	strh	r3, [r7, #14]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	89fb      	ldrh	r3, [r7, #14]
 8004b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	78db      	ldrb	r3, [r3, #3]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d06c      	beq.n	8004c52 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8e:	81bb      	strh	r3, [r7, #12]
 8004b90:	89bb      	ldrh	r3, [r7, #12]
 8004b92:	f083 0320 	eor.w	r3, r3, #32
 8004b96:	81bb      	strh	r3, [r7, #12]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	441a      	add	r2, r3
 8004ba2:	89bb      	ldrh	r3, [r7, #12]
 8004ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	8013      	strh	r3, [r2, #0]
 8004bb8:	e04b      	b.n	8004c52 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	82fb      	strh	r3, [r7, #22]
 8004bc8:	8afb      	ldrh	r3, [r7, #22]
 8004bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01b      	beq.n	8004c0a <USB_EPClearStall+0x106>
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be8:	82bb      	strh	r3, [r7, #20]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	441a      	add	r2, r3
 8004bf4:	8abb      	ldrh	r3, [r7, #20]
 8004bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c20:	827b      	strh	r3, [r7, #18]
 8004c22:	8a7b      	ldrh	r3, [r7, #18]
 8004c24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c28:	827b      	strh	r3, [r7, #18]
 8004c2a:	8a7b      	ldrh	r3, [r7, #18]
 8004c2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c30:	827b      	strh	r3, [r7, #18]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	441a      	add	r2, r3
 8004c3c:	8a7b      	ldrh	r3, [r7, #18]
 8004c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr

08004c5e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	460b      	mov	r3, r1
 8004c68:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2280      	movs	r2, #128	; 0x80
 8004c74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr

08004c98 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr

08004cca <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b08d      	sub	sp, #52	; 0x34
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	4611      	mov	r1, r2
 8004cec:	461a      	mov	r2, r3
 8004cee:	460b      	mov	r3, r1
 8004cf0:	80fb      	strh	r3, [r7, #6]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004cf6:	88bb      	ldrh	r3, [r7, #4]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	005a      	lsls	r2, r3, #1
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d18:	e01e      	b.n	8004d58 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	3301      	adds	r3, #1
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	3302      	adds	r3, #2
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	3302      	adds	r3, #2
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	3301      	adds	r3, #1
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	3b01      	subs	r3, #1
 8004d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1dd      	bne.n	8004d1a <USB_WritePMA+0x3a>
  }
}
 8004d5e:	bf00      	nop
 8004d60:	3734      	adds	r7, #52	; 0x34
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b08b      	sub	sp, #44	; 0x2c
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	4611      	mov	r1, r2
 8004d74:	461a      	mov	r2, r3
 8004d76:	460b      	mov	r3, r1
 8004d78:	80fb      	strh	r3, [r7, #6]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004d7e:	88bb      	ldrh	r3, [r7, #4]
 8004d80:	085b      	lsrs	r3, r3, #1
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	005a      	lsls	r2, r3, #1
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d9a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004da0:	e01b      	b.n	8004dda <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	3302      	adds	r3, #2
 8004dae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1e0      	bne.n	8004da2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004de0:	88bb      	ldrh	r3, [r7, #4]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d007      	beq.n	8004dfc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	701a      	strb	r2, [r3, #0]
  }
}
 8004dfc:	bf00      	nop
 8004dfe:	372c      	adds	r7, #44	; 0x2c
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	7c1b      	ldrb	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d115      	bne.n	8004e4a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e22:	2202      	movs	r2, #2
 8004e24:	2181      	movs	r1, #129	; 0x81
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f004 fbb9 	bl	800959e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e36:	2202      	movs	r2, #2
 8004e38:	2101      	movs	r1, #1
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f004 fbaf 	bl	800959e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004e48:	e012      	b.n	8004e70 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e4a:	2340      	movs	r3, #64	; 0x40
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	2181      	movs	r1, #129	; 0x81
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f004 fba4 	bl	800959e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e5c:	2340      	movs	r3, #64	; 0x40
 8004e5e:	2202      	movs	r2, #2
 8004e60:	2101      	movs	r1, #1
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f004 fb9b 	bl	800959e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e70:	2308      	movs	r3, #8
 8004e72:	2203      	movs	r2, #3
 8004e74:	2182      	movs	r1, #130	; 0x82
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f004 fb91 	bl	800959e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e82:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e86:	f004 fcb1 	bl	80097ec <USBD_static_malloc>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d102      	bne.n	8004ea2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	e026      	b.n	8004ef0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ea8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	7c1b      	ldrb	r3, [r3, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f004 fc51 	bl	8009780 <USBD_LL_PrepareReceive>
 8004ede:	e007      	b.n	8004ef0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ee6:	2340      	movs	r3, #64	; 0x40
 8004ee8:	2101      	movs	r1, #1
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f004 fc48 	bl	8009780 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004f0a:	2181      	movs	r1, #129	; 0x81
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f004 fb6c 	bl	80095ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004f18:	2101      	movs	r1, #1
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f004 fb65 	bl	80095ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004f28:	2182      	movs	r1, #130	; 0x82
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f004 fb5d 	bl	80095ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00e      	beq.n	8004f5e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f50:	4618      	mov	r0, r3
 8004f52:	f004 fc57 	bl	8009804 <USBD_static_free>
    pdev->pClassData = NULL;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f78:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d039      	beq.n	8005006 <USBD_CDC_Setup+0x9e>
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	d17c      	bne.n	8005090 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	88db      	ldrh	r3, [r3, #6]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d029      	beq.n	8004ff2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	b25b      	sxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	da11      	bge.n	8004fcc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004fb4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	88d2      	ldrh	r2, [r2, #6]
 8004fba:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004fbc:	6939      	ldr	r1, [r7, #16]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	88db      	ldrh	r3, [r3, #6]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 f9f9 	bl	80063bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004fca:	e068      	b.n	800509e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	785a      	ldrb	r2, [r3, #1]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	88db      	ldrh	r3, [r3, #6]
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004fe2:	6939      	ldr	r1, [r7, #16]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	88db      	ldrh	r3, [r3, #6]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f001 fa14 	bl	8006418 <USBD_CtlPrepareRx>
      break;
 8004ff0:	e055      	b.n	800509e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	7850      	ldrb	r0, [r2, #1]
 8004ffe:	2200      	movs	r2, #0
 8005000:	6839      	ldr	r1, [r7, #0]
 8005002:	4798      	blx	r3
      break;
 8005004:	e04b      	b.n	800509e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	785b      	ldrb	r3, [r3, #1]
 800500a:	2b0a      	cmp	r3, #10
 800500c:	d017      	beq.n	800503e <USBD_CDC_Setup+0xd6>
 800500e:	2b0b      	cmp	r3, #11
 8005010:	d029      	beq.n	8005066 <USBD_CDC_Setup+0xfe>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d133      	bne.n	800507e <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800501c:	2b03      	cmp	r3, #3
 800501e:	d107      	bne.n	8005030 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005020:	f107 030c 	add.w	r3, r7, #12
 8005024:	2202      	movs	r2, #2
 8005026:	4619      	mov	r1, r3
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f001 f9c7 	bl	80063bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800502e:	e02e      	b.n	800508e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005030:	6839      	ldr	r1, [r7, #0]
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f001 f958 	bl	80062e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005038:	2302      	movs	r3, #2
 800503a:	75fb      	strb	r3, [r7, #23]
          break;
 800503c:	e027      	b.n	800508e <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005044:	2b03      	cmp	r3, #3
 8005046:	d107      	bne.n	8005058 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005048:	f107 030f 	add.w	r3, r7, #15
 800504c:	2201      	movs	r2, #1
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f001 f9b3 	bl	80063bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005056:	e01a      	b.n	800508e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f001 f944 	bl	80062e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005060:	2302      	movs	r3, #2
 8005062:	75fb      	strb	r3, [r7, #23]
          break;
 8005064:	e013      	b.n	800508e <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800506c:	2b03      	cmp	r3, #3
 800506e:	d00d      	beq.n	800508c <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005070:	6839      	ldr	r1, [r7, #0]
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f001 f938 	bl	80062e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005078:	2302      	movs	r3, #2
 800507a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800507c:	e006      	b.n	800508c <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800507e:	6839      	ldr	r1, [r7, #0]
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f001 f931 	bl	80062e8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005086:	2302      	movs	r3, #2
 8005088:	75fb      	strb	r3, [r7, #23]
          break;
 800508a:	e000      	b.n	800508e <USBD_CDC_Setup+0x126>
          break;
 800508c:	bf00      	nop
      }
      break;
 800508e:	e006      	b.n	800509e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 f928 	bl	80062e8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005098:	2302      	movs	r3, #2
 800509a:	75fb      	strb	r3, [r7, #23]
      break;
 800509c:	bf00      	nop
  }

  return ret;
 800509e:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ba:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050c2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d03a      	beq.n	8005144 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	331c      	adds	r3, #28
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d029      	beq.n	8005138 <USBD_CDC_DataIn+0x90>
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	331c      	adds	r3, #28
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	78f9      	ldrb	r1, [r7, #3]
 80050f8:	68b8      	ldr	r0, [r7, #8]
 80050fa:	460b      	mov	r3, r1
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	4403      	add	r3, r0
 8005104:	3338      	adds	r3, #56	; 0x38
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	fbb2 f1f3 	udiv	r1, r2, r3
 800510c:	fb03 f301 	mul.w	r3, r3, r1
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d110      	bne.n	8005138 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	331c      	adds	r3, #28
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800512a:	78f9      	ldrb	r1, [r7, #3]
 800512c:	2300      	movs	r3, #0
 800512e:	2200      	movs	r2, #0
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f004 fb02 	bl	800973a <USBD_LL_Transmit>
 8005136:	e003      	b.n	8005140 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	e000      	b.n	8005146 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005144:	2302      	movs	r3, #2
  }
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	460b      	mov	r3, r1
 8005158:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005160:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f004 fb2d 	bl	80097c6 <USBD_LL_GetRxDataSize>
 800516c:	4602      	mov	r2, r0
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00d      	beq.n	800519a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005192:	4611      	mov	r1, r2
 8005194:	4798      	blx	r3

    return USBD_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	e000      	b.n	800519c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800519a:	2302      	movs	r3, #2
  }
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d015      	beq.n	80051ea <USBD_CDC_EP0_RxReady+0x46>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80051c4:	2bff      	cmp	r3, #255	; 0xff
 80051c6:	d010      	beq.n	80051ea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80051d6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051de:	b292      	uxth	r2, r2
 80051e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	22ff      	movs	r2, #255	; 0xff
 80051e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2243      	movs	r2, #67	; 0x43
 8005200:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005202:	4b03      	ldr	r3, [pc, #12]	; (8005210 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20000094 	.word	0x20000094

08005214 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2243      	movs	r2, #67	; 0x43
 8005220:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005222:	4b03      	ldr	r3, [pc, #12]	; (8005230 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	20000050 	.word	0x20000050

08005234 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2243      	movs	r2, #67	; 0x43
 8005240:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005242:	4b03      	ldr	r3, [pc, #12]	; (8005250 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005244:	4618      	mov	r0, r3
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	200000d8 	.word	0x200000d8

08005254 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	220a      	movs	r2, #10
 8005260:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005262:	4b03      	ldr	r3, [pc, #12]	; (8005270 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	2000000c 	.word	0x2000000c

08005274 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800527e:	2302      	movs	r3, #2
 8005280:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	4613      	mov	r3, r2
 80052ac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80052be:	88fa      	ldrh	r2, [r7, #6]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr

080052f8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005306:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01c      	beq.n	800534c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005318:	2b00      	cmp	r3, #0
 800531a:	d115      	bne.n	8005348 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800533a:	b29b      	uxth	r3, r3
 800533c:	2181      	movs	r1, #129	; 0x81
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f004 f9fb 	bl	800973a <USBD_LL_Transmit>

      return USBD_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	e002      	b.n	800534e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005348:	2301      	movs	r3, #1
 800534a:	e000      	b.n	800534e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800534c:	2302      	movs	r3, #2
  }
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005364:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800536c:	2b00      	cmp	r3, #0
 800536e:	d017      	beq.n	80053a0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	7c1b      	ldrb	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d109      	bne.n	800538c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800537e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005382:	2101      	movs	r1, #1
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f004 f9fb 	bl	8009780 <USBD_LL_PrepareReceive>
 800538a:	e007      	b.n	800539c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005392:	2340      	movs	r3, #64	; 0x40
 8005394:	2101      	movs	r1, #1
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f004 f9f2 	bl	8009780 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	e000      	b.n	80053a2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80053a0:	2302      	movs	r3, #2
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	4613      	mov	r3, r2
 80053b6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80053be:	2302      	movs	r3, #2
 80053c0:	e01a      	b.n	80053f8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	79fa      	ldrb	r2, [r7, #7]
 80053ee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f004 f85f 	bl	80094b4 <USBD_LL_Init>

  return USBD_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d006      	beq.n	8005422 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	73fb      	strb	r3, [r7, #15]
 8005420:	e001      	b.n	8005426 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005422:	2302      	movs	r3, #2
 8005424:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005426:	7bfb      	ldrb	r3, [r7, #15]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr

08005432 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f004 f894 	bl	8009568 <USBD_LL_Start>

  return USBD_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr

0800545e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	460b      	mov	r3, r1
 8005468:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800546a:	2302      	movs	r3, #2
 800546c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00c      	beq.n	8005492 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	4611      	mov	r1, r2
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4798      	blx	r3
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005492:	7bfb      	ldrb	r3, [r7, #15]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	78fa      	ldrb	r2, [r7, #3]
 80054b2:	4611      	mov	r1, r2
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	4798      	blx	r3

  return USBD_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054d2:	6839      	ldr	r1, [r7, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fecb 	bl	8006270 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054e8:	461a      	mov	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d00c      	beq.n	8005518 <USBD_LL_SetupStage+0x56>
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d302      	bcc.n	8005508 <USBD_LL_SetupStage+0x46>
 8005502:	2b02      	cmp	r3, #2
 8005504:	d010      	beq.n	8005528 <USBD_LL_SetupStage+0x66>
 8005506:	e017      	b.n	8005538 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800550e:	4619      	mov	r1, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f9cb 	bl	80058ac <USBD_StdDevReq>
      break;
 8005516:	e01a      	b.n	800554e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fa2d 	bl	8005980 <USBD_StdItfReq>
      break;
 8005526:	e012      	b.n	800554e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fa6b 	bl	8005a0c <USBD_StdEPReq>
      break;
 8005536:	e00a      	b.n	800554e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800553e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005542:	b2db      	uxtb	r3, r3
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f004 f86e 	bl	8009628 <USBD_LL_StallEP>
      break;
 800554c:	bf00      	nop
  }

  return USBD_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	460b      	mov	r3, r1
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005566:	7afb      	ldrb	r3, [r7, #11]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d14b      	bne.n	8005604 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005572:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800557a:	2b03      	cmp	r3, #3
 800557c:	d134      	bne.n	80055e8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	429a      	cmp	r2, r3
 8005588:	d919      	bls.n	80055be <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	1ad2      	subs	r2, r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d203      	bcs.n	80055ac <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	e002      	b.n	80055b2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 ff4c 	bl	8006454 <USBD_CtlContinueRx>
 80055bc:	e038      	b.n	8005630 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d105      	bne.n	80055e0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 ff49 	bl	8006478 <USBD_CtlSendStatus>
 80055e6:	e023      	b.n	8005630 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055ee:	2b05      	cmp	r3, #5
 80055f0:	d11e      	bne.n	8005630 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80055fa:	2100      	movs	r1, #0
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f004 f813 	bl	8009628 <USBD_LL_StallEP>
 8005602:	e015      	b.n	8005630 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00d      	beq.n	800562c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005616:	2b03      	cmp	r3, #3
 8005618:	d108      	bne.n	800562c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	7afa      	ldrb	r2, [r7, #11]
 8005624:	4611      	mov	r1, r2
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	4798      	blx	r3
 800562a:	e001      	b.n	8005630 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800562c:	2302      	movs	r3, #2
 800562e:	e000      	b.n	8005632 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b086      	sub	sp, #24
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	460b      	mov	r3, r1
 8005644:	607a      	str	r2, [r7, #4]
 8005646:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005648:	7afb      	ldrb	r3, [r7, #11]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d17f      	bne.n	800574e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3314      	adds	r3, #20
 8005652:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800565a:	2b02      	cmp	r3, #2
 800565c:	d15c      	bne.n	8005718 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	d915      	bls.n	8005696 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	1ad2      	subs	r2, r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	b29b      	uxth	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 feb6 	bl	80063f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005688:	2300      	movs	r3, #0
 800568a:	2200      	movs	r2, #0
 800568c:	2100      	movs	r1, #0
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f004 f876 	bl	8009780 <USBD_LL_PrepareReceive>
 8005694:	e04e      	b.n	8005734 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	6912      	ldr	r2, [r2, #16]
 800569e:	fbb3 f1f2 	udiv	r1, r3, r2
 80056a2:	fb02 f201 	mul.w	r2, r2, r1
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d11c      	bne.n	80056e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d316      	bcc.n	80056e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d20f      	bcs.n	80056e6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80056c6:	2200      	movs	r2, #0
 80056c8:	2100      	movs	r1, #0
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 fe92 	bl	80063f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056d8:	2300      	movs	r3, #0
 80056da:	2200      	movs	r2, #0
 80056dc:	2100      	movs	r1, #0
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f004 f84e 	bl	8009780 <USBD_LL_PrepareReceive>
 80056e4:	e026      	b.n	8005734 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d105      	bne.n	8005708 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005708:	2180      	movs	r1, #128	; 0x80
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f003 ff8c 	bl	8009628 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 fec4 	bl	800649e <USBD_CtlReceiveStatus>
 8005716:	e00d      	b.n	8005734 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800571e:	2b04      	cmp	r3, #4
 8005720:	d004      	beq.n	800572c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005728:	2b00      	cmp	r3, #0
 800572a:	d103      	bne.n	8005734 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800572c:	2180      	movs	r1, #128	; 0x80
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f003 ff7a 	bl	8009628 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800573a:	2b01      	cmp	r3, #1
 800573c:	d11d      	bne.n	800577a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff fe83 	bl	800544a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800574c:	e015      	b.n	800577a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00d      	beq.n	8005776 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005760:	2b03      	cmp	r3, #3
 8005762:	d108      	bne.n	8005776 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	7afa      	ldrb	r2, [r7, #11]
 800576e:	4611      	mov	r1, r2
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	4798      	blx	r3
 8005774:	e001      	b.n	800577a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005776:	2302      	movs	r3, #2
 8005778:	e000      	b.n	800577c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800578c:	2340      	movs	r3, #64	; 0x40
 800578e:	2200      	movs	r2, #0
 8005790:	2100      	movs	r1, #0
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f003 ff03 	bl	800959e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2240      	movs	r2, #64	; 0x40
 80057a4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057a8:	2340      	movs	r3, #64	; 0x40
 80057aa:	2200      	movs	r2, #0
 80057ac:	2180      	movs	r1, #128	; 0x80
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f003 fef5 	bl	800959e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2240      	movs	r2, #64	; 0x40
 80057be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6852      	ldr	r2, [r2, #4]
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	4611      	mov	r1, r2
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	4798      	blx	r3
  }

  return USBD_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	460b      	mov	r3, r1
 8005810:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	78fa      	ldrb	r2, [r7, #3]
 8005816:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr

08005824 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2204      	movs	r2, #4
 800583c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800585a:	2b04      	cmp	r3, #4
 800585c:	d105      	bne.n	800586a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr

08005876 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005884:	2b03      	cmp	r3, #3
 8005886:	d10b      	bne.n	80058a0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d004      	beq.n	80058d0 <USBD_StdDevReq+0x24>
 80058c6:	2b40      	cmp	r3, #64	; 0x40
 80058c8:	d002      	beq.n	80058d0 <USBD_StdDevReq+0x24>
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d008      	beq.n	80058e0 <USBD_StdDevReq+0x34>
 80058ce:	e04c      	b.n	800596a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	4798      	blx	r3
      break;
 80058de:	e049      	b.n	8005974 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	785b      	ldrb	r3, [r3, #1]
 80058e4:	2b09      	cmp	r3, #9
 80058e6:	d83a      	bhi.n	800595e <USBD_StdDevReq+0xb2>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <USBD_StdDevReq+0x44>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005941 	.word	0x08005941
 80058f4:	08005955 	.word	0x08005955
 80058f8:	0800595f 	.word	0x0800595f
 80058fc:	0800594b 	.word	0x0800594b
 8005900:	0800595f 	.word	0x0800595f
 8005904:	08005923 	.word	0x08005923
 8005908:	08005919 	.word	0x08005919
 800590c:	0800595f 	.word	0x0800595f
 8005910:	08005937 	.word	0x08005937
 8005914:	0800592d 	.word	0x0800592d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f9d4 	bl	8005cc8 <USBD_GetDescriptor>
          break;
 8005920:	e022      	b.n	8005968 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fb37 	bl	8005f98 <USBD_SetAddress>
          break;
 800592a:	e01d      	b.n	8005968 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800592c:	6839      	ldr	r1, [r7, #0]
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fb74 	bl	800601c <USBD_SetConfig>
          break;
 8005934:	e018      	b.n	8005968 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fbfd 	bl	8006138 <USBD_GetConfig>
          break;
 800593e:	e013      	b.n	8005968 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fc2c 	bl	80061a0 <USBD_GetStatus>
          break;
 8005948:	e00e      	b.n	8005968 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fc5a 	bl	8006206 <USBD_SetFeature>
          break;
 8005952:	e009      	b.n	8005968 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fc69 	bl	800622e <USBD_ClrFeature>
          break;
 800595c:	e004      	b.n	8005968 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fcc1 	bl	80062e8 <USBD_CtlError>
          break;
 8005966:	bf00      	nop
      }
      break;
 8005968:	e004      	b.n	8005974 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800596a:	6839      	ldr	r1, [r7, #0]
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fcbb 	bl	80062e8 <USBD_CtlError>
      break;
 8005972:	bf00      	nop
  }

  return ret;
 8005974:	7bfb      	ldrb	r3, [r7, #15]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop

08005980 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005996:	2b20      	cmp	r3, #32
 8005998:	d003      	beq.n	80059a2 <USBD_StdItfReq+0x22>
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d001      	beq.n	80059a2 <USBD_StdItfReq+0x22>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d12a      	bne.n	80059f8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a8:	3b01      	subs	r3, #1
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d81d      	bhi.n	80059ea <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	889b      	ldrh	r3, [r3, #4]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d813      	bhi.n	80059e0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	4798      	blx	r3
 80059c6:	4603      	mov	r3, r0
 80059c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	88db      	ldrh	r3, [r3, #6]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d110      	bne.n	80059f4 <USBD_StdItfReq+0x74>
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10d      	bne.n	80059f4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fd4d 	bl	8006478 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80059de:	e009      	b.n	80059f4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fc80 	bl	80062e8 <USBD_CtlError>
          break;
 80059e8:	e004      	b.n	80059f4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fc7b 	bl	80062e8 <USBD_CtlError>
          break;
 80059f2:	e000      	b.n	80059f6 <USBD_StdItfReq+0x76>
          break;
 80059f4:	bf00      	nop
      }
      break;
 80059f6:	e004      	b.n	8005a02 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fc74 	bl	80062e8 <USBD_CtlError>
      break;
 8005a00:	bf00      	nop
  }

  return USBD_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	889b      	ldrh	r3, [r3, #4]
 8005a1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	d004      	beq.n	8005a36 <USBD_StdEPReq+0x2a>
 8005a2c:	2b40      	cmp	r3, #64	; 0x40
 8005a2e:	d002      	beq.n	8005a36 <USBD_StdEPReq+0x2a>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <USBD_StdEPReq+0x3a>
 8005a34:	e13d      	b.n	8005cb2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	4798      	blx	r3
      break;
 8005a44:	e13a      	b.n	8005cbc <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d10a      	bne.n	8005a68 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	e12a      	b.n	8005cbe <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	785b      	ldrb	r3, [r3, #1]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d03e      	beq.n	8005aee <USBD_StdEPReq+0xe2>
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d002      	beq.n	8005a7a <USBD_StdEPReq+0x6e>
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d070      	beq.n	8005b5a <USBD_StdEPReq+0x14e>
 8005a78:	e115      	b.n	8005ca6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d002      	beq.n	8005a8a <USBD_StdEPReq+0x7e>
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d015      	beq.n	8005ab4 <USBD_StdEPReq+0xa8>
 8005a88:	e02b      	b.n	8005ae2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a8a:	7bbb      	ldrb	r3, [r7, #14]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00c      	beq.n	8005aaa <USBD_StdEPReq+0x9e>
 8005a90:	7bbb      	ldrb	r3, [r7, #14]
 8005a92:	2b80      	cmp	r3, #128	; 0x80
 8005a94:	d009      	beq.n	8005aaa <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a96:	7bbb      	ldrb	r3, [r7, #14]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f003 fdc4 	bl	8009628 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005aa0:	2180      	movs	r1, #128	; 0x80
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f003 fdc0 	bl	8009628 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005aa8:	e020      	b.n	8005aec <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fc1b 	bl	80062e8 <USBD_CtlError>
              break;
 8005ab2:	e01b      	b.n	8005aec <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	885b      	ldrh	r3, [r3, #2]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10e      	bne.n	8005ada <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005abc:	7bbb      	ldrb	r3, [r7, #14]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00b      	beq.n	8005ada <USBD_StdEPReq+0xce>
 8005ac2:	7bbb      	ldrb	r3, [r7, #14]
 8005ac4:	2b80      	cmp	r3, #128	; 0x80
 8005ac6:	d008      	beq.n	8005ada <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	88db      	ldrh	r3, [r3, #6]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d104      	bne.n	8005ada <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f003 fda7 	bl	8009628 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fccc 	bl	8006478 <USBD_CtlSendStatus>

              break;
 8005ae0:	e004      	b.n	8005aec <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fbff 	bl	80062e8 <USBD_CtlError>
              break;
 8005aea:	bf00      	nop
          }
          break;
 8005aec:	e0e0      	b.n	8005cb0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d002      	beq.n	8005afe <USBD_StdEPReq+0xf2>
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d015      	beq.n	8005b28 <USBD_StdEPReq+0x11c>
 8005afc:	e026      	b.n	8005b4c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00c      	beq.n	8005b1e <USBD_StdEPReq+0x112>
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	2b80      	cmp	r3, #128	; 0x80
 8005b08:	d009      	beq.n	8005b1e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f003 fd8a 	bl	8009628 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005b14:	2180      	movs	r1, #128	; 0x80
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f003 fd86 	bl	8009628 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b1c:	e01c      	b.n	8005b58 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fbe1 	bl	80062e8 <USBD_CtlError>
              break;
 8005b26:	e017      	b.n	8005b58 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	885b      	ldrh	r3, [r3, #2]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d112      	bne.n	8005b56 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005b30:	7bbb      	ldrb	r3, [r7, #14]
 8005b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d004      	beq.n	8005b44 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005b3a:	7bbb      	ldrb	r3, [r7, #14]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f003 fd91 	bl	8009666 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fc97 	bl	8006478 <USBD_CtlSendStatus>
              }
              break;
 8005b4a:	e004      	b.n	8005b56 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fbca 	bl	80062e8 <USBD_CtlError>
              break;
 8005b54:	e000      	b.n	8005b58 <USBD_StdEPReq+0x14c>
              break;
 8005b56:	bf00      	nop
          }
          break;
 8005b58:	e0aa      	b.n	8005cb0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d002      	beq.n	8005b6a <USBD_StdEPReq+0x15e>
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d032      	beq.n	8005bce <USBD_StdEPReq+0x1c2>
 8005b68:	e097      	b.n	8005c9a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <USBD_StdEPReq+0x174>
 8005b70:	7bbb      	ldrb	r3, [r7, #14]
 8005b72:	2b80      	cmp	r3, #128	; 0x80
 8005b74:	d004      	beq.n	8005b80 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fbb5 	bl	80062e8 <USBD_CtlError>
                break;
 8005b7e:	e091      	b.n	8005ca4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	da0b      	bge.n	8005ba0 <USBD_StdEPReq+0x194>
 8005b88:	7bbb      	ldrb	r3, [r7, #14]
 8005b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	3310      	adds	r3, #16
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	e00b      	b.n	8005bb8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ba0:	7bbb      	ldrb	r3, [r7, #14]
 8005ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fbf8 	bl	80063bc <USBD_CtlSendData>
              break;
 8005bcc:	e06a      	b.n	8005ca4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005bce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	da11      	bge.n	8005bfa <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005bd6:	7bbb      	ldrb	r3, [r7, #14]
 8005bd8:	f003 020f 	and.w	r2, r3, #15
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	3318      	adds	r3, #24
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d117      	bne.n	8005c20 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fb78 	bl	80062e8 <USBD_CtlError>
                  break;
 8005bf8:	e054      	b.n	8005ca4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005bfa:	7bbb      	ldrb	r3, [r7, #14]
 8005bfc:	f003 020f 	and.w	r2, r3, #15
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d104      	bne.n	8005c20 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fb65 	bl	80062e8 <USBD_CtlError>
                  break;
 8005c1e:	e041      	b.n	8005ca4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	da0b      	bge.n	8005c40 <USBD_StdEPReq+0x234>
 8005c28:	7bbb      	ldrb	r3, [r7, #14]
 8005c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	3310      	adds	r3, #16
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	e00b      	b.n	8005c58 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c40:	7bbb      	ldrb	r3, [r7, #14]
 8005c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4413      	add	r3, r2
 8005c56:	3304      	adds	r3, #4
 8005c58:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c5a:	7bbb      	ldrb	r3, [r7, #14]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <USBD_StdEPReq+0x25a>
 8005c60:	7bbb      	ldrb	r3, [r7, #14]
 8005c62:	2b80      	cmp	r3, #128	; 0x80
 8005c64:	d103      	bne.n	8005c6e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	e00e      	b.n	8005c8c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005c6e:	7bbb      	ldrb	r3, [r7, #14]
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f003 fd16 	bl	80096a4 <USBD_LL_IsStallEP>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2201      	movs	r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	e002      	b.n	8005c8c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fb92 	bl	80063bc <USBD_CtlSendData>
              break;
 8005c98:	e004      	b.n	8005ca4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fb23 	bl	80062e8 <USBD_CtlError>
              break;
 8005ca2:	bf00      	nop
          }
          break;
 8005ca4:	e004      	b.n	8005cb0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fb1d 	bl	80062e8 <USBD_CtlError>
          break;
 8005cae:	bf00      	nop
      }
      break;
 8005cb0:	e004      	b.n	8005cbc <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fb17 	bl	80062e8 <USBD_CtlError>
      break;
 8005cba:	bf00      	nop
  }

  return ret;
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	885b      	ldrh	r3, [r3, #2]
 8005ce2:	0a1b      	lsrs	r3, r3, #8
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	2b06      	cmp	r3, #6
 8005cea:	f200 8128 	bhi.w	8005f3e <USBD_GetDescriptor+0x276>
 8005cee:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <USBD_GetDescriptor+0x2c>)
 8005cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf4:	08005d11 	.word	0x08005d11
 8005cf8:	08005d29 	.word	0x08005d29
 8005cfc:	08005d69 	.word	0x08005d69
 8005d00:	08005f3f 	.word	0x08005f3f
 8005d04:	08005f3f 	.word	0x08005f3f
 8005d08:	08005edf 	.word	0x08005edf
 8005d0c:	08005f0b 	.word	0x08005f0b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	7c12      	ldrb	r2, [r2, #16]
 8005d1c:	f107 0108 	add.w	r1, r7, #8
 8005d20:	4610      	mov	r0, r2
 8005d22:	4798      	blx	r3
 8005d24:	60f8      	str	r0, [r7, #12]
      break;
 8005d26:	e112      	b.n	8005f4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	7c1b      	ldrb	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10d      	bne.n	8005d4c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d38:	f107 0208 	add.w	r2, r7, #8
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4798      	blx	r3
 8005d40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3301      	adds	r3, #1
 8005d46:	2202      	movs	r2, #2
 8005d48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005d4a:	e100      	b.n	8005f4e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	f107 0208 	add.w	r2, r7, #8
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4798      	blx	r3
 8005d5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3301      	adds	r3, #1
 8005d62:	2202      	movs	r2, #2
 8005d64:	701a      	strb	r2, [r3, #0]
      break;
 8005d66:	e0f2      	b.n	8005f4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	885b      	ldrh	r3, [r3, #2]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b05      	cmp	r3, #5
 8005d70:	f200 80ac 	bhi.w	8005ecc <USBD_GetDescriptor+0x204>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <USBD_GetDescriptor+0xb4>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005d95 	.word	0x08005d95
 8005d80:	08005dc9 	.word	0x08005dc9
 8005d84:	08005dfd 	.word	0x08005dfd
 8005d88:	08005e31 	.word	0x08005e31
 8005d8c:	08005e65 	.word	0x08005e65
 8005d90:	08005e99 	.word	0x08005e99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00b      	beq.n	8005db8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	7c12      	ldrb	r2, [r2, #16]
 8005dac:	f107 0108 	add.w	r1, r7, #8
 8005db0:	4610      	mov	r0, r2
 8005db2:	4798      	blx	r3
 8005db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005db6:	e091      	b.n	8005edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fa94 	bl	80062e8 <USBD_CtlError>
            err++;
 8005dc0:	7afb      	ldrb	r3, [r7, #11]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8005dc6:	e089      	b.n	8005edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	7c12      	ldrb	r2, [r2, #16]
 8005de0:	f107 0108 	add.w	r1, r7, #8
 8005de4:	4610      	mov	r0, r2
 8005de6:	4798      	blx	r3
 8005de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dea:	e077      	b.n	8005edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa7a 	bl	80062e8 <USBD_CtlError>
            err++;
 8005df4:	7afb      	ldrb	r3, [r7, #11]
 8005df6:	3301      	adds	r3, #1
 8005df8:	72fb      	strb	r3, [r7, #11]
          break;
 8005dfa:	e06f      	b.n	8005edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	7c12      	ldrb	r2, [r2, #16]
 8005e14:	f107 0108 	add.w	r1, r7, #8
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4798      	blx	r3
 8005e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e1e:	e05d      	b.n	8005edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fa60 	bl	80062e8 <USBD_CtlError>
            err++;
 8005e28:	7afb      	ldrb	r3, [r7, #11]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e2e:	e055      	b.n	8005edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00b      	beq.n	8005e54 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	7c12      	ldrb	r2, [r2, #16]
 8005e48:	f107 0108 	add.w	r1, r7, #8
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4798      	blx	r3
 8005e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e52:	e043      	b.n	8005edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa46 	bl	80062e8 <USBD_CtlError>
            err++;
 8005e5c:	7afb      	ldrb	r3, [r7, #11]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	72fb      	strb	r3, [r7, #11]
          break;
 8005e62:	e03b      	b.n	8005edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00b      	beq.n	8005e88 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	7c12      	ldrb	r2, [r2, #16]
 8005e7c:	f107 0108 	add.w	r1, r7, #8
 8005e80:	4610      	mov	r0, r2
 8005e82:	4798      	blx	r3
 8005e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e86:	e029      	b.n	8005edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa2c 	bl	80062e8 <USBD_CtlError>
            err++;
 8005e90:	7afb      	ldrb	r3, [r7, #11]
 8005e92:	3301      	adds	r3, #1
 8005e94:	72fb      	strb	r3, [r7, #11]
          break;
 8005e96:	e021      	b.n	8005edc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	7c12      	ldrb	r2, [r2, #16]
 8005eb0:	f107 0108 	add.w	r1, r7, #8
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4798      	blx	r3
 8005eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005eba:	e00f      	b.n	8005edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fa12 	bl	80062e8 <USBD_CtlError>
            err++;
 8005ec4:	7afb      	ldrb	r3, [r7, #11]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8005eca:	e007      	b.n	8005edc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005ecc:	6839      	ldr	r1, [r7, #0]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fa0a 	bl	80062e8 <USBD_CtlError>
          err++;
 8005ed4:	7afb      	ldrb	r3, [r7, #11]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005eda:	e038      	b.n	8005f4e <USBD_GetDescriptor+0x286>
 8005edc:	e037      	b.n	8005f4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	7c1b      	ldrb	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d109      	bne.n	8005efa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	f107 0208 	add.w	r2, r7, #8
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4798      	blx	r3
 8005ef6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ef8:	e029      	b.n	8005f4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f9f3 	bl	80062e8 <USBD_CtlError>
        err++;
 8005f02:	7afb      	ldrb	r3, [r7, #11]
 8005f04:	3301      	adds	r3, #1
 8005f06:	72fb      	strb	r3, [r7, #11]
      break;
 8005f08:	e021      	b.n	8005f4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	7c1b      	ldrb	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10d      	bne.n	8005f2e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	f107 0208 	add.w	r2, r7, #8
 8005f1e:	4610      	mov	r0, r2
 8005f20:	4798      	blx	r3
 8005f22:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
 8005f28:	2207      	movs	r2, #7
 8005f2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f2c:	e00f      	b.n	8005f4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f9d9 	bl	80062e8 <USBD_CtlError>
        err++;
 8005f36:	7afb      	ldrb	r3, [r7, #11]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8005f3c:	e007      	b.n	8005f4e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005f3e:	6839      	ldr	r1, [r7, #0]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f9d1 	bl	80062e8 <USBD_CtlError>
      err++;
 8005f46:	7afb      	ldrb	r3, [r7, #11]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	72fb      	strb	r3, [r7, #11]
      break;
 8005f4c:	bf00      	nop
  }

  if (err != 0U)
 8005f4e:	7afb      	ldrb	r3, [r7, #11]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d11c      	bne.n	8005f8e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005f54:	893b      	ldrh	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d011      	beq.n	8005f7e <USBD_GetDescriptor+0x2b6>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	88db      	ldrh	r3, [r3, #6]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00d      	beq.n	8005f7e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	88da      	ldrh	r2, [r3, #6]
 8005f66:	893b      	ldrh	r3, [r7, #8]
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	bf28      	it	cs
 8005f6c:	4613      	movcs	r3, r2
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f72:	893b      	ldrh	r3, [r7, #8]
 8005f74:	461a      	mov	r2, r3
 8005f76:	68f9      	ldr	r1, [r7, #12]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fa1f 	bl	80063bc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	88db      	ldrh	r3, [r3, #6]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d104      	bne.n	8005f90 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fa76 	bl	8006478 <USBD_CtlSendStatus>
 8005f8c:	e000      	b.n	8005f90 <USBD_GetDescriptor+0x2c8>
    return;
 8005f8e:	bf00      	nop
    }
  }
}
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop

08005f98 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	889b      	ldrh	r3, [r3, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d130      	bne.n	800600c <USBD_SetAddress+0x74>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	88db      	ldrh	r3, [r3, #6]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d12c      	bne.n	800600c <USBD_SetAddress+0x74>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	885b      	ldrh	r3, [r3, #2]
 8005fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005fb8:	d828      	bhi.n	800600c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	885b      	ldrh	r3, [r3, #2]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d104      	bne.n	8005fda <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f988 	bl	80062e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd8:	e01c      	b.n	8006014 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	7bfa      	ldrb	r2, [r7, #15]
 8005fde:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f003 fb88 	bl	80096fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fa43 	bl	8006478 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d004      	beq.n	8006002 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006000:	e008      	b.n	8006014 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800600a:	e003      	b.n	8006014 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f96a 	bl	80062e8 <USBD_CtlError>
  }
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	885b      	ldrh	r3, [r3, #2]
 800602a:	b2da      	uxtb	r2, r3
 800602c:	4b41      	ldr	r3, [pc, #260]	; (8006134 <USBD_SetConfig+0x118>)
 800602e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006030:	4b40      	ldr	r3, [pc, #256]	; (8006134 <USBD_SetConfig+0x118>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d904      	bls.n	8006042 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f954 	bl	80062e8 <USBD_CtlError>
 8006040:	e075      	b.n	800612e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006048:	2b02      	cmp	r3, #2
 800604a:	d002      	beq.n	8006052 <USBD_SetConfig+0x36>
 800604c:	2b03      	cmp	r3, #3
 800604e:	d023      	beq.n	8006098 <USBD_SetConfig+0x7c>
 8006050:	e062      	b.n	8006118 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006052:	4b38      	ldr	r3, [pc, #224]	; (8006134 <USBD_SetConfig+0x118>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01a      	beq.n	8006090 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800605a:	4b36      	ldr	r3, [pc, #216]	; (8006134 <USBD_SetConfig+0x118>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2203      	movs	r2, #3
 8006068:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800606c:	4b31      	ldr	r3, [pc, #196]	; (8006134 <USBD_SetConfig+0x118>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff f9f3 	bl	800545e <USBD_SetClassConfig>
 8006078:	4603      	mov	r3, r0
 800607a:	2b02      	cmp	r3, #2
 800607c:	d104      	bne.n	8006088 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f931 	bl	80062e8 <USBD_CtlError>
            return;
 8006086:	e052      	b.n	800612e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f9f5 	bl	8006478 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800608e:	e04e      	b.n	800612e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f9f1 	bl	8006478 <USBD_CtlSendStatus>
        break;
 8006096:	e04a      	b.n	800612e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006098:	4b26      	ldr	r3, [pc, #152]	; (8006134 <USBD_SetConfig+0x118>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d112      	bne.n	80060c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80060a8:	4b22      	ldr	r3, [pc, #136]	; (8006134 <USBD_SetConfig+0x118>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80060b2:	4b20      	ldr	r3, [pc, #128]	; (8006134 <USBD_SetConfig+0x118>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff f9ef 	bl	800549c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f9da 	bl	8006478 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80060c4:	e033      	b.n	800612e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80060c6:	4b1b      	ldr	r3, [pc, #108]	; (8006134 <USBD_SetConfig+0x118>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d01d      	beq.n	8006110 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff f9dd 	bl	800549c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80060e2:	4b14      	ldr	r3, [pc, #80]	; (8006134 <USBD_SetConfig+0x118>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80060ec:	4b11      	ldr	r3, [pc, #68]	; (8006134 <USBD_SetConfig+0x118>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff f9b3 	bl	800545e <USBD_SetClassConfig>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d104      	bne.n	8006108 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f8f1 	bl	80062e8 <USBD_CtlError>
            return;
 8006106:	e012      	b.n	800612e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f9b5 	bl	8006478 <USBD_CtlSendStatus>
        break;
 800610e:	e00e      	b.n	800612e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f9b1 	bl	8006478 <USBD_CtlSendStatus>
        break;
 8006116:	e00a      	b.n	800612e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f8e4 	bl	80062e8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006120:	4b04      	ldr	r3, [pc, #16]	; (8006134 <USBD_SetConfig+0x118>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff f9b8 	bl	800549c <USBD_ClrClassConfig>
        break;
 800612c:	bf00      	nop
    }
  }
}
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	2000019c 	.word	0x2000019c

08006138 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	88db      	ldrh	r3, [r3, #6]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d004      	beq.n	8006154 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f8cb 	bl	80062e8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006152:	e021      	b.n	8006198 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800615a:	2b01      	cmp	r3, #1
 800615c:	db17      	blt.n	800618e <USBD_GetConfig+0x56>
 800615e:	2b02      	cmp	r3, #2
 8006160:	dd02      	ble.n	8006168 <USBD_GetConfig+0x30>
 8006162:	2b03      	cmp	r3, #3
 8006164:	d00b      	beq.n	800617e <USBD_GetConfig+0x46>
 8006166:	e012      	b.n	800618e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3308      	adds	r3, #8
 8006172:	2201      	movs	r2, #1
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f920 	bl	80063bc <USBD_CtlSendData>
        break;
 800617c:	e00c      	b.n	8006198 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3304      	adds	r3, #4
 8006182:	2201      	movs	r2, #1
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f918 	bl	80063bc <USBD_CtlSendData>
        break;
 800618c:	e004      	b.n	8006198 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f8a9 	bl	80062e8 <USBD_CtlError>
        break;
 8006196:	bf00      	nop
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b0:	3b01      	subs	r3, #1
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d81e      	bhi.n	80061f4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	88db      	ldrh	r3, [r3, #6]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d004      	beq.n	80061c8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f891 	bl	80062e8 <USBD_CtlError>
        break;
 80061c6:	e01a      	b.n	80061fe <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f043 0202 	orr.w	r2, r3, #2
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	330c      	adds	r3, #12
 80061e8:	2202      	movs	r2, #2
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f8e5 	bl	80063bc <USBD_CtlSendData>
      break;
 80061f2:	e004      	b.n	80061fe <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f876 	bl	80062e8 <USBD_CtlError>
      break;
 80061fc:	bf00      	nop
  }
}
 80061fe:	bf00      	nop
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	885b      	ldrh	r3, [r3, #2]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d106      	bne.n	8006226 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f929 	bl	8006478 <USBD_CtlSendStatus>
  }
}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800623e:	3b01      	subs	r3, #1
 8006240:	2b02      	cmp	r3, #2
 8006242:	d80b      	bhi.n	800625c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	885b      	ldrh	r3, [r3, #2]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d10c      	bne.n	8006266 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f90f 	bl	8006478 <USBD_CtlSendStatus>
      }
      break;
 800625a:	e004      	b.n	8006266 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f842 	bl	80062e8 <USBD_CtlError>
      break;
 8006264:	e000      	b.n	8006268 <USBD_ClrFeature+0x3a>
      break;
 8006266:	bf00      	nop
  }
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781a      	ldrb	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	785a      	ldrb	r2, [r3, #1]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	3302      	adds	r3, #2
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	b29a      	uxth	r2, r3
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	3303      	adds	r3, #3
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	b29b      	uxth	r3, r3
 800629e:	4413      	add	r3, r2
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	3304      	adds	r3, #4
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	3305      	adds	r3, #5
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	021b      	lsls	r3, r3, #8
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	4413      	add	r3, r2
 80062bc:	b29a      	uxth	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	3306      	adds	r3, #6
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	3307      	adds	r3, #7
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	021b      	lsls	r3, r3, #8
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	4413      	add	r3, r2
 80062d8:	b29a      	uxth	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	80da      	strh	r2, [r3, #6]

}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bc80      	pop	{r7}
 80062e6:	4770      	bx	lr

080062e8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80062f2:	2180      	movs	r1, #128	; 0x80
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f003 f997 	bl	8009628 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80062fa:	2100      	movs	r1, #0
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f003 f993 	bl	8009628 <USBD_LL_StallEP>
}
 8006302:	bf00      	nop
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b086      	sub	sp, #24
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d032      	beq.n	8006386 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f834 	bl	800638e <USBD_GetLen>
 8006326:	4603      	mov	r3, r0
 8006328:	3301      	adds	r3, #1
 800632a:	b29b      	uxth	r3, r3
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	75fa      	strb	r2, [r7, #23]
 800633a:	461a      	mov	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4413      	add	r3, r2
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	7812      	ldrb	r2, [r2, #0]
 8006344:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006346:	7dfb      	ldrb	r3, [r7, #23]
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	75fa      	strb	r2, [r7, #23]
 800634c:	461a      	mov	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	4413      	add	r3, r2
 8006352:	2203      	movs	r2, #3
 8006354:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006356:	e012      	b.n	800637e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	60fa      	str	r2, [r7, #12]
 800635e:	7dfa      	ldrb	r2, [r7, #23]
 8006360:	1c51      	adds	r1, r2, #1
 8006362:	75f9      	strb	r1, [r7, #23]
 8006364:	4611      	mov	r1, r2
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	440a      	add	r2, r1
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800636e:	7dfb      	ldrb	r3, [r7, #23]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	75fa      	strb	r2, [r7, #23]
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4413      	add	r3, r2
 800637a:	2200      	movs	r2, #0
 800637c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e8      	bne.n	8006358 <USBD_GetString+0x4e>
    }
  }
}
 8006386:	bf00      	nop
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800638e:	b480      	push	{r7}
 8006390:	b085      	sub	sp, #20
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800639a:	e005      	b.n	80063a8 <USBD_GetLen+0x1a>
  {
    len++;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	3301      	adds	r3, #1
 80063a0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3301      	adds	r3, #1
 80063a6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f5      	bne.n	800639c <USBD_GetLen+0xe>
  }

  return len;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	4613      	mov	r3, r2
 80063c8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2202      	movs	r2, #2
 80063ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80063d2:	88fa      	ldrh	r2, [r7, #6]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80063d8:	88fa      	ldrh	r2, [r7, #6]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	2100      	movs	r1, #0
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f003 f9a8 	bl	800973a <USBD_LL_Transmit>

  return USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4613      	mov	r3, r2
 8006400:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	2100      	movs	r1, #0
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f003 f996 	bl	800973a <USBD_LL_Transmit>

  return USBD_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	4613      	mov	r3, r2
 8006424:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2203      	movs	r2, #3
 800642a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800642e:	88fa      	ldrh	r2, [r7, #6]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006436:	88fa      	ldrh	r2, [r7, #6]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	2100      	movs	r1, #0
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f003 f99b 	bl	8009780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	2100      	movs	r1, #0
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f003 f989 	bl	8009780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2204      	movs	r2, #4
 8006484:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006488:	2300      	movs	r3, #0
 800648a:	2200      	movs	r2, #0
 800648c:	2100      	movs	r1, #0
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f003 f953 	bl	800973a <USBD_LL_Transmit>

  return USBD_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2205      	movs	r2, #5
 80064aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064ae:	2300      	movs	r3, #0
 80064b0:	2200      	movs	r2, #0
 80064b2:	2100      	movs	r1, #0
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f003 f963 	bl	8009780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ca:	f3ef 8305 	mrs	r3, IPSR
 80064ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80064d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10f      	bne.n	80064f6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d6:	f3ef 8310 	mrs	r3, PRIMASK
 80064da:	607b      	str	r3, [r7, #4]
  return(result);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d109      	bne.n	80064f6 <osKernelInitialize+0x32>
 80064e2:	4b10      	ldr	r3, [pc, #64]	; (8006524 <osKernelInitialize+0x60>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d109      	bne.n	80064fe <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064ea:	f3ef 8311 	mrs	r3, BASEPRI
 80064ee:	603b      	str	r3, [r7, #0]
  return(result);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80064f6:	f06f 0305 	mvn.w	r3, #5
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e00c      	b.n	8006518 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064fe:	4b09      	ldr	r3, [pc, #36]	; (8006524 <osKernelInitialize+0x60>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006506:	4b07      	ldr	r3, [pc, #28]	; (8006524 <osKernelInitialize+0x60>)
 8006508:	2201      	movs	r2, #1
 800650a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	e002      	b.n	8006518 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006512:	f04f 33ff 	mov.w	r3, #4294967295
 8006516:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006518:	68fb      	ldr	r3, [r7, #12]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr
 8006524:	200001a0 	.word	0x200001a0

08006528 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800652e:	f3ef 8305 	mrs	r3, IPSR
 8006532:	60bb      	str	r3, [r7, #8]
  return(result);
 8006534:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10f      	bne.n	800655a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800653a:	f3ef 8310 	mrs	r3, PRIMASK
 800653e:	607b      	str	r3, [r7, #4]
  return(result);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <osKernelStart+0x32>
 8006546:	4b11      	ldr	r3, [pc, #68]	; (800658c <osKernelStart+0x64>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d109      	bne.n	8006562 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800654e:	f3ef 8311 	mrs	r3, BASEPRI
 8006552:	603b      	str	r3, [r7, #0]
  return(result);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <osKernelStart+0x3a>
    stat = osErrorISR;
 800655a:	f06f 0305 	mvn.w	r3, #5
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e00e      	b.n	8006580 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <osKernelStart+0x64>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d107      	bne.n	800657a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800656a:	4b08      	ldr	r3, [pc, #32]	; (800658c <osKernelStart+0x64>)
 800656c:	2202      	movs	r2, #2
 800656e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006570:	f001 f912 	bl	8007798 <vTaskStartScheduler>
      stat = osOK;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e002      	b.n	8006580 <osKernelStart+0x58>
    } else {
      stat = osError;
 800657a:	f04f 33ff 	mov.w	r3, #4294967295
 800657e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006580:	68fb      	ldr	r3, [r7, #12]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	200001a0 	.word	0x200001a0

08006590 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b092      	sub	sp, #72	; 0x48
 8006594:	af04      	add	r7, sp, #16
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800659c:	2300      	movs	r3, #0
 800659e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065a0:	f3ef 8305 	mrs	r3, IPSR
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f040 8094 	bne.w	80066d6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ae:	f3ef 8310 	mrs	r3, PRIMASK
 80065b2:	623b      	str	r3, [r7, #32]
  return(result);
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f040 808d 	bne.w	80066d6 <osThreadNew+0x146>
 80065bc:	4b48      	ldr	r3, [pc, #288]	; (80066e0 <osThreadNew+0x150>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d106      	bne.n	80065d2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065c4:	f3ef 8311 	mrs	r3, BASEPRI
 80065c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f040 8082 	bne.w	80066d6 <osThreadNew+0x146>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d07e      	beq.n	80066d6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80065d8:	2380      	movs	r3, #128	; 0x80
 80065da:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80065dc:	2318      	movs	r3, #24
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80065e0:	2300      	movs	r3, #0
 80065e2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80065e4:	f107 031b 	add.w	r3, r7, #27
 80065e8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80065ea:	f04f 33ff 	mov.w	r3, #4294967295
 80065ee:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d045      	beq.n	8006682 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <osThreadNew+0x74>
        name = attr->name;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <osThreadNew+0x9a>
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	2b38      	cmp	r3, #56	; 0x38
 800661c:	d805      	bhi.n	800662a <osThreadNew+0x9a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <osThreadNew+0x9e>
        return (NULL);
 800662a:	2300      	movs	r3, #0
 800662c:	e054      	b.n	80066d8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	089b      	lsrs	r3, r3, #2
 800663c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00e      	beq.n	8006664 <osThreadNew+0xd4>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	2b5b      	cmp	r3, #91	; 0x5b
 800664c:	d90a      	bls.n	8006664 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006652:	2b00      	cmp	r3, #0
 8006654:	d006      	beq.n	8006664 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <osThreadNew+0xd4>
        mem = 1;
 800665e:	2301      	movs	r3, #1
 8006660:	62bb      	str	r3, [r7, #40]	; 0x28
 8006662:	e010      	b.n	8006686 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10c      	bne.n	8006686 <osThreadNew+0xf6>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d108      	bne.n	8006686 <osThreadNew+0xf6>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d104      	bne.n	8006686 <osThreadNew+0xf6>
          mem = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006680:	e001      	b.n	8006686 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	2b01      	cmp	r3, #1
 800668a:	d110      	bne.n	80066ae <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006694:	9202      	str	r2, [sp, #8]
 8006696:	9301      	str	r3, [sp, #4]
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 fe3e 	bl	8007324 <xTaskCreateStatic>
 80066a8:	4603      	mov	r3, r0
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	e013      	b.n	80066d6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d110      	bne.n	80066d6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	f107 0314 	add.w	r3, r7, #20
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 fe85 	bl	80073d6 <xTaskCreate>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d001      	beq.n	80066d6 <osThreadNew+0x146>
          hTask = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066d6:	697b      	ldr	r3, [r7, #20]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3738      	adds	r7, #56	; 0x38
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	200001a0 	.word	0x200001a0

080066e4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066ec:	f3ef 8305 	mrs	r3, IPSR
 80066f0:	613b      	str	r3, [r7, #16]
  return(result);
 80066f2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10f      	bne.n	8006718 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066f8:	f3ef 8310 	mrs	r3, PRIMASK
 80066fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d109      	bne.n	8006718 <osDelay+0x34>
 8006704:	4b0d      	ldr	r3, [pc, #52]	; (800673c <osDelay+0x58>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d109      	bne.n	8006720 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800670c:	f3ef 8311 	mrs	r3, BASEPRI
 8006710:	60bb      	str	r3, [r7, #8]
  return(result);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <osDelay+0x3c>
    stat = osErrorISR;
 8006718:	f06f 0305 	mvn.w	r3, #5
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	e007      	b.n	8006730 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006720:	2300      	movs	r3, #0
 8006722:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <osDelay+0x4c>
      vTaskDelay(ticks);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f001 f800 	bl	8007730 <vTaskDelay>
    }
  }

  return (stat);
 8006730:	697b      	ldr	r3, [r7, #20]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	200001a0 	.word	0x200001a0

08006740 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4a06      	ldr	r2, [pc, #24]	; (8006768 <vApplicationGetIdleTaskMemory+0x28>)
 8006750:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4a05      	ldr	r2, [pc, #20]	; (800676c <vApplicationGetIdleTaskMemory+0x2c>)
 8006756:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2280      	movs	r2, #128	; 0x80
 800675c:	601a      	str	r2, [r3, #0]
}
 800675e:	bf00      	nop
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	bc80      	pop	{r7}
 8006766:	4770      	bx	lr
 8006768:	200001a4 	.word	0x200001a4
 800676c:	20000200 	.word	0x20000200

08006770 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4a07      	ldr	r2, [pc, #28]	; (800679c <vApplicationGetTimerTaskMemory+0x2c>)
 8006780:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	4a06      	ldr	r2, [pc, #24]	; (80067a0 <vApplicationGetTimerTaskMemory+0x30>)
 8006786:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800678e:	601a      	str	r2, [r3, #0]
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000400 	.word	0x20000400
 80067a0:	2000045c 	.word	0x2000045c

080067a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f103 0208 	add.w	r2, r3, #8
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f04f 32ff 	mov.w	r2, #4294967295
 80067bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f103 0208 	add.w	r2, r3, #8
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f103 0208 	add.w	r2, r3, #8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr

080067e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr

080067fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	601a      	str	r2, [r3, #0]
}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	bc80      	pop	{r7}
 800683e:	4770      	bx	lr

08006840 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	d103      	bne.n	8006860 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e00c      	b.n	800687a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3308      	adds	r3, #8
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	e002      	b.n	800686e <vListInsert+0x2e>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	d2f6      	bcs.n	8006868 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
}
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr

080068b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6892      	ldr	r2, [r2, #8]
 80068c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6852      	ldr	r2, [r2, #4]
 80068d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d103      	bne.n	80068e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	1e5a      	subs	r2, r3, #1
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bc80      	pop	{r7}
 8006900:	4770      	bx	lr
	...

08006904 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d109      	bne.n	800692c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	60bb      	str	r3, [r7, #8]
 800692a:	e7fe      	b.n	800692a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800692c:	f002 f844 	bl	80089b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006938:	68f9      	ldr	r1, [r7, #12]
 800693a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800693c:	fb01 f303 	mul.w	r3, r1, r3
 8006940:	441a      	add	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695c:	3b01      	subs	r3, #1
 800695e:	68f9      	ldr	r1, [r7, #12]
 8006960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	441a      	add	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	22ff      	movs	r2, #255	; 0xff
 8006970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	22ff      	movs	r2, #255	; 0xff
 8006978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d114      	bne.n	80069ac <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d01a      	beq.n	80069c0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3310      	adds	r3, #16
 800698e:	4618      	mov	r0, r3
 8006990:	f001 f986 	bl	8007ca0 <xTaskRemoveFromEventList>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d012      	beq.n	80069c0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800699a:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <xQueueGenericReset+0xcc>)
 800699c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	e009      	b.n	80069c0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3310      	adds	r3, #16
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff fef7 	bl	80067a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3324      	adds	r3, #36	; 0x24
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff fef2 	bl	80067a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069c0:	f002 f828 	bl	8008a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069c4:	2301      	movs	r3, #1
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08e      	sub	sp, #56	; 0x38
 80069d8:	af02      	add	r7, sp, #8
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <xQueueGenericCreateStatic+0x28>
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069fa:	e7fe      	b.n	80069fa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <xQueueGenericCreateStatic+0x42>
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
 8006a14:	e7fe      	b.n	8006a14 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <xQueueGenericCreateStatic+0x4e>
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <xQueueGenericCreateStatic+0x52>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <xQueueGenericCreateStatic+0x54>
 8006a26:	2300      	movs	r3, #0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d109      	bne.n	8006a40 <xQueueGenericCreateStatic+0x6c>
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	623b      	str	r3, [r7, #32]
 8006a3e:	e7fe      	b.n	8006a3e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d102      	bne.n	8006a4c <xQueueGenericCreateStatic+0x78>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <xQueueGenericCreateStatic+0x7c>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <xQueueGenericCreateStatic+0x7e>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <xQueueGenericCreateStatic+0x96>
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	e7fe      	b.n	8006a68 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a6a:	2350      	movs	r3, #80	; 0x50
 8006a6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b50      	cmp	r3, #80	; 0x50
 8006a72:	d009      	beq.n	8006a88 <xQueueGenericCreateStatic+0xb4>
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	e7fe      	b.n	8006a86 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00d      	beq.n	8006aae <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 f842 	bl	8006b32 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3730      	adds	r7, #48	; 0x30
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	; 0x28
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d109      	bne.n	8006ae0 <xQueueGenericCreate+0x28>
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	e7fe      	b.n	8006ade <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d102      	bne.n	8006aec <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61fb      	str	r3, [r7, #28]
 8006aea:	e004      	b.n	8006af6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	fb02 f303 	mul.w	r3, r2, r3
 8006af4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	3350      	adds	r3, #80	; 0x50
 8006afa:	4618      	mov	r0, r3
 8006afc:	f002 f852 	bl	8008ba4 <pvPortMalloc>
 8006b00:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00f      	beq.n	8006b28 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	3350      	adds	r3, #80	; 0x50
 8006b0c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b16:	79fa      	ldrb	r2, [r7, #7]
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 f805 	bl	8006b32 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006b28:	69bb      	ldr	r3, [r7, #24]
	}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3720      	adds	r7, #32
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
 8006b3e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d103      	bne.n	8006b4e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	e002      	b.n	8006b54 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b60:	2101      	movs	r1, #1
 8006b62:	69b8      	ldr	r0, [r7, #24]
 8006b64:	f7ff fece 	bl	8006904 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	78fa      	ldrb	r2, [r7, #3]
 8006b6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b70:	bf00      	nop
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08e      	sub	sp, #56	; 0x38
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b86:	2300      	movs	r3, #0
 8006b88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d109      	bne.n	8006ba8 <xQueueGenericSend+0x30>
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ba6:	e7fe      	b.n	8006ba6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d103      	bne.n	8006bb6 <xQueueGenericSend+0x3e>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <xQueueGenericSend+0x42>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <xQueueGenericSend+0x44>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d109      	bne.n	8006bd4 <xQueueGenericSend+0x5c>
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd2:	e7fe      	b.n	8006bd2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d103      	bne.n	8006be2 <xQueueGenericSend+0x6a>
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d101      	bne.n	8006be6 <xQueueGenericSend+0x6e>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <xQueueGenericSend+0x70>
 8006be6:	2300      	movs	r3, #0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d109      	bne.n	8006c00 <xQueueGenericSend+0x88>
 8006bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	623b      	str	r3, [r7, #32]
 8006bfe:	e7fe      	b.n	8006bfe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c00:	f001 fa08 	bl	8008014 <xTaskGetSchedulerState>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d102      	bne.n	8006c10 <xQueueGenericSend+0x98>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <xQueueGenericSend+0x9c>
 8006c10:	2301      	movs	r3, #1
 8006c12:	e000      	b.n	8006c16 <xQueueGenericSend+0x9e>
 8006c14:	2300      	movs	r3, #0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d109      	bne.n	8006c2e <xQueueGenericSend+0xb6>
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	61fb      	str	r3, [r7, #28]
 8006c2c:	e7fe      	b.n	8006c2c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c2e:	f001 fec3 	bl	80089b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d302      	bcc.n	8006c44 <xQueueGenericSend+0xcc>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d129      	bne.n	8006c98 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c4a:	f000 f9ff 	bl	800704c <prvCopyDataToQueue>
 8006c4e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d010      	beq.n	8006c7a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	3324      	adds	r3, #36	; 0x24
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f001 f81f 	bl	8007ca0 <xTaskRemoveFromEventList>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d013      	beq.n	8006c90 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c68:	4b3f      	ldr	r3, [pc, #252]	; (8006d68 <xQueueGenericSend+0x1f0>)
 8006c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	e00a      	b.n	8006c90 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d007      	beq.n	8006c90 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c80:	4b39      	ldr	r3, [pc, #228]	; (8006d68 <xQueueGenericSend+0x1f0>)
 8006c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c90:	f001 fec0 	bl	8008a14 <vPortExitCritical>
				return pdPASS;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e063      	b.n	8006d60 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d103      	bne.n	8006ca6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c9e:	f001 feb9 	bl	8008a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e05c      	b.n	8006d60 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d106      	bne.n	8006cba <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cac:	f107 0314 	add.w	r3, r7, #20
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 f857 	bl	8007d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cba:	f001 feab 	bl	8008a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cbe:	f000 fdcf 	bl	8007860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cc2:	f001 fe79 	bl	80089b8 <vPortEnterCritical>
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ccc:	b25b      	sxtb	r3, r3
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd2:	d103      	bne.n	8006cdc <xQueueGenericSend+0x164>
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ce2:	b25b      	sxtb	r3, r3
 8006ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce8:	d103      	bne.n	8006cf2 <xQueueGenericSend+0x17a>
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cf2:	f001 fe8f 	bl	8008a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cf6:	1d3a      	adds	r2, r7, #4
 8006cf8:	f107 0314 	add.w	r3, r7, #20
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 f846 	bl	8007d90 <xTaskCheckForTimeOut>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d124      	bne.n	8006d54 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d0c:	f000 fa96 	bl	800723c <prvIsQueueFull>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d018      	beq.n	8006d48 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	3310      	adds	r3, #16
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 ff70 	bl	8007c04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d26:	f000 fa21 	bl	800716c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d2a:	f000 fda7 	bl	800787c <xTaskResumeAll>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f47f af7c 	bne.w	8006c2e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006d36:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <xQueueGenericSend+0x1f0>)
 8006d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	e772      	b.n	8006c2e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d4a:	f000 fa0f 	bl	800716c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d4e:	f000 fd95 	bl	800787c <xTaskResumeAll>
 8006d52:	e76c      	b.n	8006c2e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d56:	f000 fa09 	bl	800716c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d5a:	f000 fd8f 	bl	800787c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d5e:	2300      	movs	r3, #0
		}
	}
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3738      	adds	r7, #56	; 0x38
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	e000ed04 	.word	0xe000ed04

08006d6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08e      	sub	sp, #56	; 0x38
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d109      	bne.n	8006d98 <xQueueGenericSendFromISR+0x2c>
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
 8006d96:	e7fe      	b.n	8006d96 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d103      	bne.n	8006da6 <xQueueGenericSendFromISR+0x3a>
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <xQueueGenericSendFromISR+0x3e>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e000      	b.n	8006dac <xQueueGenericSendFromISR+0x40>
 8006daa:	2300      	movs	r3, #0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d109      	bne.n	8006dc4 <xQueueGenericSendFromISR+0x58>
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	623b      	str	r3, [r7, #32]
 8006dc2:	e7fe      	b.n	8006dc2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d103      	bne.n	8006dd2 <xQueueGenericSendFromISR+0x66>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <xQueueGenericSendFromISR+0x6a>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <xQueueGenericSendFromISR+0x6c>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d109      	bne.n	8006df0 <xQueueGenericSendFromISR+0x84>
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	e7fe      	b.n	8006dee <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006df0:	f001 fe9c 	bl	8008b2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006df4:	f3ef 8211 	mrs	r2, BASEPRI
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	61ba      	str	r2, [r7, #24]
 8006e0a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e0c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d302      	bcc.n	8006e22 <xQueueGenericSendFromISR+0xb6>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d12c      	bne.n	8006e7c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e32:	f000 f90b 	bl	800704c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e36:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3e:	d112      	bne.n	8006e66 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d016      	beq.n	8006e76 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4a:	3324      	adds	r3, #36	; 0x24
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 ff27 	bl	8007ca0 <xTaskRemoveFromEventList>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00e      	beq.n	8006e76 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	e007      	b.n	8006e76 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	b25a      	sxtb	r2, r3
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e76:	2301      	movs	r3, #1
 8006e78:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006e7a:	e001      	b.n	8006e80 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3738      	adds	r7, #56	; 0x38
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08c      	sub	sp, #48	; 0x30
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d109      	bne.n	8006ec2 <xQueueReceive+0x2e>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	623b      	str	r3, [r7, #32]
 8006ec0:	e7fe      	b.n	8006ec0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <xQueueReceive+0x3c>
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <xQueueReceive+0x40>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e000      	b.n	8006ed6 <xQueueReceive+0x42>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d109      	bne.n	8006eee <xQueueReceive+0x5a>
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	e7fe      	b.n	8006eec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006eee:	f001 f891 	bl	8008014 <xTaskGetSchedulerState>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d102      	bne.n	8006efe <xQueueReceive+0x6a>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <xQueueReceive+0x6e>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <xQueueReceive+0x70>
 8006f02:	2300      	movs	r3, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d109      	bne.n	8006f1c <xQueueReceive+0x88>
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	e7fe      	b.n	8006f1a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f1c:	f001 fd4c 	bl	80089b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01f      	beq.n	8006f6c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f30:	f000 f8f6 	bl	8007120 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	1e5a      	subs	r2, r3, #1
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00f      	beq.n	8006f64 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	3310      	adds	r3, #16
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fea9 	bl	8007ca0 <xTaskRemoveFromEventList>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f54:	4b3c      	ldr	r3, [pc, #240]	; (8007048 <xQueueReceive+0x1b4>)
 8006f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f64:	f001 fd56 	bl	8008a14 <vPortExitCritical>
				return pdPASS;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e069      	b.n	8007040 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d103      	bne.n	8006f7a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f72:	f001 fd4f 	bl	8008a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f76:	2300      	movs	r3, #0
 8006f78:	e062      	b.n	8007040 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d106      	bne.n	8006f8e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f80:	f107 0310 	add.w	r3, r7, #16
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 feed 	bl	8007d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f8e:	f001 fd41 	bl	8008a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f92:	f000 fc65 	bl	8007860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f96:	f001 fd0f 	bl	80089b8 <vPortEnterCritical>
 8006f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fa0:	b25b      	sxtb	r3, r3
 8006fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa6:	d103      	bne.n	8006fb0 <xQueueReceive+0x11c>
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fb6:	b25b      	sxtb	r3, r3
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbc:	d103      	bne.n	8006fc6 <xQueueReceive+0x132>
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fc6:	f001 fd25 	bl	8008a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fca:	1d3a      	adds	r2, r7, #4
 8006fcc:	f107 0310 	add.w	r3, r7, #16
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fedc 	bl	8007d90 <xTaskCheckForTimeOut>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d123      	bne.n	8007026 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe0:	f000 f916 	bl	8007210 <prvIsQueueEmpty>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d017      	beq.n	800701a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	3324      	adds	r3, #36	; 0x24
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fe06 	bl	8007c04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ffa:	f000 f8b7 	bl	800716c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ffe:	f000 fc3d 	bl	800787c <xTaskResumeAll>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d189      	bne.n	8006f1c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007008:	4b0f      	ldr	r3, [pc, #60]	; (8007048 <xQueueReceive+0x1b4>)
 800700a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	e780      	b.n	8006f1c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800701a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800701c:	f000 f8a6 	bl	800716c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007020:	f000 fc2c 	bl	800787c <xTaskResumeAll>
 8007024:	e77a      	b.n	8006f1c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007028:	f000 f8a0 	bl	800716c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800702c:	f000 fc26 	bl	800787c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007032:	f000 f8ed 	bl	8007210 <prvIsQueueEmpty>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	f43f af6f 	beq.w	8006f1c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800703e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007040:	4618      	mov	r0, r3
 8007042:	3730      	adds	r7, #48	; 0x30
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007058:	2300      	movs	r3, #0
 800705a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10d      	bne.n	8007086 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d14d      	bne.n	800710e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	4618      	mov	r0, r3
 8007078:	f000 ffea 	bl	8008050 <xTaskPriorityDisinherit>
 800707c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	605a      	str	r2, [r3, #4]
 8007084:	e043      	b.n	800710e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d119      	bne.n	80070c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6898      	ldr	r0, [r3, #8]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007094:	461a      	mov	r2, r3
 8007096:	68b9      	ldr	r1, [r7, #8]
 8007098:	f002 fc18 	bl	80098cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	441a      	add	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689a      	ldr	r2, [r3, #8]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d32b      	bcc.n	800710e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	609a      	str	r2, [r3, #8]
 80070be:	e026      	b.n	800710e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68d8      	ldr	r0, [r3, #12]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	461a      	mov	r2, r3
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	f002 fbfe 	bl	80098cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	425b      	negs	r3, r3
 80070da:	441a      	add	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	68da      	ldr	r2, [r3, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d207      	bcs.n	80070fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f4:	425b      	negs	r3, r3
 80070f6:	441a      	add	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d105      	bne.n	800710e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	3b01      	subs	r3, #1
 800710c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007116:	697b      	ldr	r3, [r7, #20]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d018      	beq.n	8007164 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	441a      	add	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	429a      	cmp	r2, r3
 800714a:	d303      	bcc.n	8007154 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68d9      	ldr	r1, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	461a      	mov	r2, r3
 800715e:	6838      	ldr	r0, [r7, #0]
 8007160:	f002 fbb4 	bl	80098cc <memcpy>
	}
}
 8007164:	bf00      	nop
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007174:	f001 fc20 	bl	80089b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800717e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007180:	e011      	b.n	80071a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	2b00      	cmp	r3, #0
 8007188:	d012      	beq.n	80071b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3324      	adds	r3, #36	; 0x24
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fd86 	bl	8007ca0 <xTaskRemoveFromEventList>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800719a:	f000 fe59 	bl	8007e50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	dce9      	bgt.n	8007182 <prvUnlockQueue+0x16>
 80071ae:	e000      	b.n	80071b2 <prvUnlockQueue+0x46>
					break;
 80071b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	22ff      	movs	r2, #255	; 0xff
 80071b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80071ba:	f001 fc2b 	bl	8008a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071be:	f001 fbfb 	bl	80089b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071ca:	e011      	b.n	80071f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d012      	beq.n	80071fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3310      	adds	r3, #16
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fd61 	bl	8007ca0 <xTaskRemoveFromEventList>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071e4:	f000 fe34 	bl	8007e50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dce9      	bgt.n	80071cc <prvUnlockQueue+0x60>
 80071f8:	e000      	b.n	80071fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	22ff      	movs	r2, #255	; 0xff
 8007200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007204:	f001 fc06 	bl	8008a14 <vPortExitCritical>
}
 8007208:	bf00      	nop
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007218:	f001 fbce 	bl	80089b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007224:	2301      	movs	r3, #1
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	e001      	b.n	800722e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800722e:	f001 fbf1 	bl	8008a14 <vPortExitCritical>

	return xReturn;
 8007232:	68fb      	ldr	r3, [r7, #12]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007244:	f001 fbb8 	bl	80089b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007250:	429a      	cmp	r2, r3
 8007252:	d102      	bne.n	800725a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007254:	2301      	movs	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	e001      	b.n	800725e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800725e:	f001 fbd9 	bl	8008a14 <vPortExitCritical>

	return xReturn;
 8007262:	68fb      	ldr	r3, [r7, #12]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	e014      	b.n	80072a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800727c:	4a0e      	ldr	r2, [pc, #56]	; (80072b8 <vQueueAddToRegistry+0x4c>)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10b      	bne.n	80072a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007288:	490b      	ldr	r1, [pc, #44]	; (80072b8 <vQueueAddToRegistry+0x4c>)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007292:	4a09      	ldr	r2, [pc, #36]	; (80072b8 <vQueueAddToRegistry+0x4c>)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	4413      	add	r3, r2
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800729e:	e005      	b.n	80072ac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3301      	adds	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b07      	cmp	r3, #7
 80072aa:	d9e7      	bls.n	800727c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072ac:	bf00      	nop
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bc80      	pop	{r7}
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	200020f4 	.word	0x200020f4

080072bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072cc:	f001 fb74 	bl	80089b8 <vPortEnterCritical>
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072d6:	b25b      	sxtb	r3, r3
 80072d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072dc:	d103      	bne.n	80072e6 <vQueueWaitForMessageRestricted+0x2a>
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072ec:	b25b      	sxtb	r3, r3
 80072ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f2:	d103      	bne.n	80072fc <vQueueWaitForMessageRestricted+0x40>
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072fc:	f001 fb8a 	bl	8008a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	2b00      	cmp	r3, #0
 8007306:	d106      	bne.n	8007316 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fc9b 	bl	8007c4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007316:	6978      	ldr	r0, [r7, #20]
 8007318:	f7ff ff28 	bl	800716c <prvUnlockQueue>
	}
 800731c:	bf00      	nop
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007324:	b580      	push	{r7, lr}
 8007326:	b08e      	sub	sp, #56	; 0x38
 8007328:	af04      	add	r7, sp, #16
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007334:	2b00      	cmp	r3, #0
 8007336:	d109      	bne.n	800734c <xTaskCreateStatic+0x28>
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	623b      	str	r3, [r7, #32]
 800734a:	e7fe      	b.n	800734a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <xTaskCreateStatic+0x42>
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	e7fe      	b.n	8007364 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007366:	235c      	movs	r3, #92	; 0x5c
 8007368:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2b5c      	cmp	r3, #92	; 0x5c
 800736e:	d009      	beq.n	8007384 <xTaskCreateStatic+0x60>
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	e7fe      	b.n	8007382 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01e      	beq.n	80073c8 <xTaskCreateStatic+0xa4>
 800738a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01b      	beq.n	80073c8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007398:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	2202      	movs	r2, #2
 800739e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073a2:	2300      	movs	r3, #0
 80073a4:	9303      	str	r3, [sp, #12]
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	9302      	str	r3, [sp, #8]
 80073aa:	f107 0314 	add.w	r3, r7, #20
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 f850 	bl	8007460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073c2:	f000 f8d3 	bl	800756c <prvAddNewTaskToReadyList>
 80073c6:	e001      	b.n	80073cc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073cc:	697b      	ldr	r3, [r7, #20]
	}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3728      	adds	r7, #40	; 0x28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b08c      	sub	sp, #48	; 0x30
 80073da:	af04      	add	r7, sp, #16
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	603b      	str	r3, [r7, #0]
 80073e2:	4613      	mov	r3, r2
 80073e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073e6:	88fb      	ldrh	r3, [r7, #6]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 fbda 	bl	8008ba4 <pvPortMalloc>
 80073f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00e      	beq.n	8007416 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80073f8:	205c      	movs	r0, #92	; 0x5c
 80073fa:	f001 fbd3 	bl	8008ba4 <pvPortMalloc>
 80073fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	631a      	str	r2, [r3, #48]	; 0x30
 800740c:	e005      	b.n	800741a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800740e:	6978      	ldr	r0, [r7, #20]
 8007410:	f001 fc8a 	bl	8008d28 <vPortFree>
 8007414:	e001      	b.n	800741a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d017      	beq.n	8007450 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007428:	88fa      	ldrh	r2, [r7, #6]
 800742a:	2300      	movs	r3, #0
 800742c:	9303      	str	r3, [sp, #12]
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	9302      	str	r3, [sp, #8]
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	9301      	str	r3, [sp, #4]
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 f80e 	bl	8007460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007444:	69f8      	ldr	r0, [r7, #28]
 8007446:	f000 f891 	bl	800756c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800744a:	2301      	movs	r3, #1
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	e002      	b.n	8007456 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007450:	f04f 33ff 	mov.w	r3, #4294967295
 8007454:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007456:	69bb      	ldr	r3, [r7, #24]
	}
 8007458:	4618      	mov	r0, r3
 800745a:	3720      	adds	r7, #32
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	461a      	mov	r2, r3
 8007478:	21a5      	movs	r1, #165	; 0xa5
 800747a:	f002 fa32 	bl	80098e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007488:	3b01      	subs	r3, #1
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	f023 0307 	bic.w	r3, r3, #7
 8007496:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d009      	beq.n	80074b6 <prvInitialiseNewTask+0x56>
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	e7fe      	b.n	80074b4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074b6:	2300      	movs	r3, #0
 80074b8:	61fb      	str	r3, [r7, #28]
 80074ba:	e012      	b.n	80074e2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	4413      	add	r3, r2
 80074c2:	7819      	ldrb	r1, [r3, #0]
 80074c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	4413      	add	r3, r2
 80074ca:	3334      	adds	r3, #52	; 0x34
 80074cc:	460a      	mov	r2, r1
 80074ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	4413      	add	r3, r2
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d006      	beq.n	80074ea <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	3301      	adds	r3, #1
 80074e0:	61fb      	str	r3, [r7, #28]
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	2b0f      	cmp	r3, #15
 80074e6:	d9e9      	bls.n	80074bc <prvInitialiseNewTask+0x5c>
 80074e8:	e000      	b.n	80074ec <prvInitialiseNewTask+0x8c>
		{
			break;
 80074ea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	2b37      	cmp	r3, #55	; 0x37
 80074f8:	d901      	bls.n	80074fe <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074fa:	2337      	movs	r3, #55	; 0x37
 80074fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007502:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007508:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	2200      	movs	r2, #0
 800750e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	3304      	adds	r3, #4
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff f964 	bl	80067e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	3318      	adds	r3, #24
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff f95f 	bl	80067e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007528:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007538:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	2200      	movs	r2, #0
 800753e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	68f9      	ldr	r1, [r7, #12]
 800754c:	69b8      	ldr	r0, [r7, #24]
 800754e:	f001 f949 	bl	80087e4 <pxPortInitialiseStack>
 8007552:	4602      	mov	r2, r0
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007562:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007564:	bf00      	nop
 8007566:	3720      	adds	r7, #32
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007574:	f001 fa20 	bl	80089b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007578:	4b2d      	ldr	r3, [pc, #180]	; (8007630 <prvAddNewTaskToReadyList+0xc4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3301      	adds	r3, #1
 800757e:	4a2c      	ldr	r2, [pc, #176]	; (8007630 <prvAddNewTaskToReadyList+0xc4>)
 8007580:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007582:	4b2c      	ldr	r3, [pc, #176]	; (8007634 <prvAddNewTaskToReadyList+0xc8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d109      	bne.n	800759e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800758a:	4a2a      	ldr	r2, [pc, #168]	; (8007634 <prvAddNewTaskToReadyList+0xc8>)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007590:	4b27      	ldr	r3, [pc, #156]	; (8007630 <prvAddNewTaskToReadyList+0xc4>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d110      	bne.n	80075ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007598:	f000 fc7e 	bl	8007e98 <prvInitialiseTaskLists>
 800759c:	e00d      	b.n	80075ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800759e:	4b26      	ldr	r3, [pc, #152]	; (8007638 <prvAddNewTaskToReadyList+0xcc>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075a6:	4b23      	ldr	r3, [pc, #140]	; (8007634 <prvAddNewTaskToReadyList+0xc8>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d802      	bhi.n	80075ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075b4:	4a1f      	ldr	r2, [pc, #124]	; (8007634 <prvAddNewTaskToReadyList+0xc8>)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075ba:	4b20      	ldr	r3, [pc, #128]	; (800763c <prvAddNewTaskToReadyList+0xd0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3301      	adds	r3, #1
 80075c0:	4a1e      	ldr	r2, [pc, #120]	; (800763c <prvAddNewTaskToReadyList+0xd0>)
 80075c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075c4:	4b1d      	ldr	r3, [pc, #116]	; (800763c <prvAddNewTaskToReadyList+0xd0>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	4b1b      	ldr	r3, [pc, #108]	; (8007640 <prvAddNewTaskToReadyList+0xd4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d903      	bls.n	80075e0 <prvAddNewTaskToReadyList+0x74>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	4a18      	ldr	r2, [pc, #96]	; (8007640 <prvAddNewTaskToReadyList+0xd4>)
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4a15      	ldr	r2, [pc, #84]	; (8007644 <prvAddNewTaskToReadyList+0xd8>)
 80075ee:	441a      	add	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f7ff f8ff 	bl	80067fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075fc:	f001 fa0a 	bl	8008a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007600:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <prvAddNewTaskToReadyList+0xcc>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00e      	beq.n	8007626 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007608:	4b0a      	ldr	r3, [pc, #40]	; (8007634 <prvAddNewTaskToReadyList+0xc8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007612:	429a      	cmp	r2, r3
 8007614:	d207      	bcs.n	8007626 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007616:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <prvAddNewTaskToReadyList+0xdc>)
 8007618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20000d30 	.word	0x20000d30
 8007634:	2000085c 	.word	0x2000085c
 8007638:	20000d3c 	.word	0x20000d3c
 800763c:	20000d4c 	.word	0x20000d4c
 8007640:	20000d38 	.word	0x20000d38
 8007644:	20000860 	.word	0x20000860
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007654:	f001 f9b0 	bl	80089b8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d102      	bne.n	8007664 <vTaskDelete+0x18>
 800765e:	4b2c      	ldr	r3, [pc, #176]	; (8007710 <vTaskDelete+0xc4>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	e000      	b.n	8007666 <vTaskDelete+0x1a>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3304      	adds	r3, #4
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff f91f 	bl	80068b0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	2b00      	cmp	r3, #0
 8007678:	d004      	beq.n	8007684 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3318      	adds	r3, #24
 800767e:	4618      	mov	r0, r3
 8007680:	f7ff f916 	bl	80068b0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007684:	4b23      	ldr	r3, [pc, #140]	; (8007714 <vTaskDelete+0xc8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3301      	adds	r3, #1
 800768a:	4a22      	ldr	r2, [pc, #136]	; (8007714 <vTaskDelete+0xc8>)
 800768c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800768e:	4b20      	ldr	r3, [pc, #128]	; (8007710 <vTaskDelete+0xc4>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	429a      	cmp	r2, r3
 8007696:	d10b      	bne.n	80076b0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3304      	adds	r3, #4
 800769c:	4619      	mov	r1, r3
 800769e:	481e      	ldr	r0, [pc, #120]	; (8007718 <vTaskDelete+0xcc>)
 80076a0:	f7ff f8ab 	bl	80067fa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80076a4:	4b1d      	ldr	r3, [pc, #116]	; (800771c <vTaskDelete+0xd0>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3301      	adds	r3, #1
 80076aa:	4a1c      	ldr	r2, [pc, #112]	; (800771c <vTaskDelete+0xd0>)
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	e009      	b.n	80076c4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80076b0:	4b1b      	ldr	r3, [pc, #108]	; (8007720 <vTaskDelete+0xd4>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	4a1a      	ldr	r2, [pc, #104]	; (8007720 <vTaskDelete+0xd4>)
 80076b8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fc58 	bl	8007f70 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80076c0:	f000 fc84 	bl	8007fcc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80076c4:	f001 f9a6 	bl	8008a14 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80076c8:	4b16      	ldr	r3, [pc, #88]	; (8007724 <vTaskDelete+0xd8>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01a      	beq.n	8007706 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 80076d0:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <vTaskDelete+0xc4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d115      	bne.n	8007706 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80076da:	4b13      	ldr	r3, [pc, #76]	; (8007728 <vTaskDelete+0xdc>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <vTaskDelete+0xaa>
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	60bb      	str	r3, [r7, #8]
 80076f4:	e7fe      	b.n	80076f4 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 80076f6:	4b0d      	ldr	r3, [pc, #52]	; (800772c <vTaskDelete+0xe0>)
 80076f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007706:	bf00      	nop
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	2000085c 	.word	0x2000085c
 8007714:	20000d4c 	.word	0x20000d4c
 8007718:	20000d04 	.word	0x20000d04
 800771c:	20000d18 	.word	0x20000d18
 8007720:	20000d30 	.word	0x20000d30
 8007724:	20000d3c 	.word	0x20000d3c
 8007728:	20000d58 	.word	0x20000d58
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007738:	2300      	movs	r3, #0
 800773a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d016      	beq.n	8007770 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007742:	4b13      	ldr	r3, [pc, #76]	; (8007790 <vTaskDelay+0x60>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d009      	beq.n	800775e <vTaskDelay+0x2e>
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	60bb      	str	r3, [r7, #8]
 800775c:	e7fe      	b.n	800775c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800775e:	f000 f87f 	bl	8007860 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007762:	2100      	movs	r1, #0
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fcdf 	bl	8008128 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800776a:	f000 f887 	bl	800787c <xTaskResumeAll>
 800776e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d107      	bne.n	8007786 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007776:	4b07      	ldr	r3, [pc, #28]	; (8007794 <vTaskDelay+0x64>)
 8007778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007786:	bf00      	nop
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20000d58 	.word	0x20000d58
 8007794:	e000ed04 	.word	0xe000ed04

08007798 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08a      	sub	sp, #40	; 0x28
 800779c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077a6:	463a      	mov	r2, r7
 80077a8:	1d39      	adds	r1, r7, #4
 80077aa:	f107 0308 	add.w	r3, r7, #8
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe ffc6 	bl	8006740 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	9202      	str	r2, [sp, #8]
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	2300      	movs	r3, #0
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	2300      	movs	r3, #0
 80077c4:	460a      	mov	r2, r1
 80077c6:	4920      	ldr	r1, [pc, #128]	; (8007848 <vTaskStartScheduler+0xb0>)
 80077c8:	4820      	ldr	r0, [pc, #128]	; (800784c <vTaskStartScheduler+0xb4>)
 80077ca:	f7ff fdab 	bl	8007324 <xTaskCreateStatic>
 80077ce:	4602      	mov	r2, r0
 80077d0:	4b1f      	ldr	r3, [pc, #124]	; (8007850 <vTaskStartScheduler+0xb8>)
 80077d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077d4:	4b1e      	ldr	r3, [pc, #120]	; (8007850 <vTaskStartScheduler+0xb8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077dc:	2301      	movs	r3, #1
 80077de:	617b      	str	r3, [r7, #20]
 80077e0:	e001      	b.n	80077e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d102      	bne.n	80077f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80077ec:	f000 fcf0 	bl	80081d0 <xTimerCreateTimerTask>
 80077f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d115      	bne.n	8007824 <vTaskStartScheduler+0x8c>
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800780a:	4b12      	ldr	r3, [pc, #72]	; (8007854 <vTaskStartScheduler+0xbc>)
 800780c:	f04f 32ff 	mov.w	r2, #4294967295
 8007810:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007812:	4b11      	ldr	r3, [pc, #68]	; (8007858 <vTaskStartScheduler+0xc0>)
 8007814:	2201      	movs	r2, #1
 8007816:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007818:	4b10      	ldr	r3, [pc, #64]	; (800785c <vTaskStartScheduler+0xc4>)
 800781a:	2200      	movs	r2, #0
 800781c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800781e:	f001 f85b 	bl	80088d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007822:	e00d      	b.n	8007840 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782a:	d109      	bne.n	8007840 <vTaskStartScheduler+0xa8>
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	e7fe      	b.n	800783e <vTaskStartScheduler+0xa6>
}
 8007840:	bf00      	nop
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	08009a04 	.word	0x08009a04
 800784c:	08007e69 	.word	0x08007e69
 8007850:	20000d54 	.word	0x20000d54
 8007854:	20000d50 	.word	0x20000d50
 8007858:	20000d3c 	.word	0x20000d3c
 800785c:	20000d34 	.word	0x20000d34

08007860 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007860:	b480      	push	{r7}
 8007862:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007864:	4b04      	ldr	r3, [pc, #16]	; (8007878 <vTaskSuspendAll+0x18>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3301      	adds	r3, #1
 800786a:	4a03      	ldr	r2, [pc, #12]	; (8007878 <vTaskSuspendAll+0x18>)
 800786c:	6013      	str	r3, [r2, #0]
}
 800786e:	bf00      	nop
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	20000d58 	.word	0x20000d58

0800787c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007886:	2300      	movs	r3, #0
 8007888:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800788a:	4b41      	ldr	r3, [pc, #260]	; (8007990 <xTaskResumeAll+0x114>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d109      	bne.n	80078a6 <xTaskResumeAll+0x2a>
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	e7fe      	b.n	80078a4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078a6:	f001 f887 	bl	80089b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078aa:	4b39      	ldr	r3, [pc, #228]	; (8007990 <xTaskResumeAll+0x114>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3b01      	subs	r3, #1
 80078b0:	4a37      	ldr	r2, [pc, #220]	; (8007990 <xTaskResumeAll+0x114>)
 80078b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b4:	4b36      	ldr	r3, [pc, #216]	; (8007990 <xTaskResumeAll+0x114>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d162      	bne.n	8007982 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078bc:	4b35      	ldr	r3, [pc, #212]	; (8007994 <xTaskResumeAll+0x118>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d05e      	beq.n	8007982 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078c4:	e02f      	b.n	8007926 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80078c6:	4b34      	ldr	r3, [pc, #208]	; (8007998 <xTaskResumeAll+0x11c>)
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3318      	adds	r3, #24
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe ffec 	bl	80068b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3304      	adds	r3, #4
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fe ffe7 	bl	80068b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e6:	4b2d      	ldr	r3, [pc, #180]	; (800799c <xTaskResumeAll+0x120>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d903      	bls.n	80078f6 <xTaskResumeAll+0x7a>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	4a2a      	ldr	r2, [pc, #168]	; (800799c <xTaskResumeAll+0x120>)
 80078f4:	6013      	str	r3, [r2, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fa:	4613      	mov	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4a27      	ldr	r2, [pc, #156]	; (80079a0 <xTaskResumeAll+0x124>)
 8007904:	441a      	add	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3304      	adds	r3, #4
 800790a:	4619      	mov	r1, r3
 800790c:	4610      	mov	r0, r2
 800790e:	f7fe ff74 	bl	80067fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007916:	4b23      	ldr	r3, [pc, #140]	; (80079a4 <xTaskResumeAll+0x128>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	429a      	cmp	r2, r3
 800791e:	d302      	bcc.n	8007926 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007920:	4b21      	ldr	r3, [pc, #132]	; (80079a8 <xTaskResumeAll+0x12c>)
 8007922:	2201      	movs	r2, #1
 8007924:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007926:	4b1c      	ldr	r3, [pc, #112]	; (8007998 <xTaskResumeAll+0x11c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1cb      	bne.n	80078c6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007934:	f000 fb4a 	bl	8007fcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007938:	4b1c      	ldr	r3, [pc, #112]	; (80079ac <xTaskResumeAll+0x130>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d010      	beq.n	8007966 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007944:	f000 f844 	bl	80079d0 <xTaskIncrementTick>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800794e:	4b16      	ldr	r3, [pc, #88]	; (80079a8 <xTaskResumeAll+0x12c>)
 8007950:	2201      	movs	r2, #1
 8007952:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3b01      	subs	r3, #1
 8007958:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1f1      	bne.n	8007944 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007960:	4b12      	ldr	r3, [pc, #72]	; (80079ac <xTaskResumeAll+0x130>)
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007966:	4b10      	ldr	r3, [pc, #64]	; (80079a8 <xTaskResumeAll+0x12c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d009      	beq.n	8007982 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800796e:	2301      	movs	r3, #1
 8007970:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007972:	4b0f      	ldr	r3, [pc, #60]	; (80079b0 <xTaskResumeAll+0x134>)
 8007974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007982:	f001 f847 	bl	8008a14 <vPortExitCritical>

	return xAlreadyYielded;
 8007986:	68bb      	ldr	r3, [r7, #8]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	20000d58 	.word	0x20000d58
 8007994:	20000d30 	.word	0x20000d30
 8007998:	20000cf0 	.word	0x20000cf0
 800799c:	20000d38 	.word	0x20000d38
 80079a0:	20000860 	.word	0x20000860
 80079a4:	2000085c 	.word	0x2000085c
 80079a8:	20000d44 	.word	0x20000d44
 80079ac:	20000d40 	.word	0x20000d40
 80079b0:	e000ed04 	.word	0xe000ed04

080079b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079ba:	4b04      	ldr	r3, [pc, #16]	; (80079cc <xTaskGetTickCount+0x18>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079c0:	687b      	ldr	r3, [r7, #4]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bc80      	pop	{r7}
 80079ca:	4770      	bx	lr
 80079cc:	20000d34 	.word	0x20000d34

080079d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079da:	4b51      	ldr	r3, [pc, #324]	; (8007b20 <xTaskIncrementTick+0x150>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f040 808d 	bne.w	8007afe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079e4:	4b4f      	ldr	r3, [pc, #316]	; (8007b24 <xTaskIncrementTick+0x154>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3301      	adds	r3, #1
 80079ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079ec:	4a4d      	ldr	r2, [pc, #308]	; (8007b24 <xTaskIncrementTick+0x154>)
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d11f      	bne.n	8007a38 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80079f8:	4b4b      	ldr	r3, [pc, #300]	; (8007b28 <xTaskIncrementTick+0x158>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d009      	beq.n	8007a16 <xTaskIncrementTick+0x46>
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	e7fe      	b.n	8007a14 <xTaskIncrementTick+0x44>
 8007a16:	4b44      	ldr	r3, [pc, #272]	; (8007b28 <xTaskIncrementTick+0x158>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	4b43      	ldr	r3, [pc, #268]	; (8007b2c <xTaskIncrementTick+0x15c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a41      	ldr	r2, [pc, #260]	; (8007b28 <xTaskIncrementTick+0x158>)
 8007a22:	6013      	str	r3, [r2, #0]
 8007a24:	4a41      	ldr	r2, [pc, #260]	; (8007b2c <xTaskIncrementTick+0x15c>)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	4b41      	ldr	r3, [pc, #260]	; (8007b30 <xTaskIncrementTick+0x160>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	4a3f      	ldr	r2, [pc, #252]	; (8007b30 <xTaskIncrementTick+0x160>)
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	f000 faca 	bl	8007fcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a38:	4b3e      	ldr	r3, [pc, #248]	; (8007b34 <xTaskIncrementTick+0x164>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d34e      	bcc.n	8007ae0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a42:	4b39      	ldr	r3, [pc, #228]	; (8007b28 <xTaskIncrementTick+0x158>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <xTaskIncrementTick+0x80>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e000      	b.n	8007a52 <xTaskIncrementTick+0x82>
 8007a50:	2300      	movs	r3, #0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d004      	beq.n	8007a60 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a56:	4b37      	ldr	r3, [pc, #220]	; (8007b34 <xTaskIncrementTick+0x164>)
 8007a58:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5c:	601a      	str	r2, [r3, #0]
					break;
 8007a5e:	e03f      	b.n	8007ae0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007a60:	4b31      	ldr	r3, [pc, #196]	; (8007b28 <xTaskIncrementTick+0x158>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d203      	bcs.n	8007a80 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a78:	4a2e      	ldr	r2, [pc, #184]	; (8007b34 <xTaskIncrementTick+0x164>)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6013      	str	r3, [r2, #0]
						break;
 8007a7e:	e02f      	b.n	8007ae0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fe ff13 	bl	80068b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	3318      	adds	r3, #24
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe ff0a 	bl	80068b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa0:	4b25      	ldr	r3, [pc, #148]	; (8007b38 <xTaskIncrementTick+0x168>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d903      	bls.n	8007ab0 <xTaskIncrementTick+0xe0>
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	4a22      	ldr	r2, [pc, #136]	; (8007b38 <xTaskIncrementTick+0x168>)
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4a1f      	ldr	r2, [pc, #124]	; (8007b3c <xTaskIncrementTick+0x16c>)
 8007abe:	441a      	add	r2, r3
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	f7fe fe97 	bl	80067fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad0:	4b1b      	ldr	r3, [pc, #108]	; (8007b40 <xTaskIncrementTick+0x170>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d3b3      	bcc.n	8007a42 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007ada:	2301      	movs	r3, #1
 8007adc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ade:	e7b0      	b.n	8007a42 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ae0:	4b17      	ldr	r3, [pc, #92]	; (8007b40 <xTaskIncrementTick+0x170>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae6:	4915      	ldr	r1, [pc, #84]	; (8007b3c <xTaskIncrementTick+0x16c>)
 8007ae8:	4613      	mov	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	440b      	add	r3, r1
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d907      	bls.n	8007b08 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007af8:	2301      	movs	r3, #1
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	e004      	b.n	8007b08 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007afe:	4b11      	ldr	r3, [pc, #68]	; (8007b44 <xTaskIncrementTick+0x174>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	4a0f      	ldr	r2, [pc, #60]	; (8007b44 <xTaskIncrementTick+0x174>)
 8007b06:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007b08:	4b0f      	ldr	r3, [pc, #60]	; (8007b48 <xTaskIncrementTick+0x178>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007b10:	2301      	movs	r3, #1
 8007b12:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007b14:	697b      	ldr	r3, [r7, #20]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000d58 	.word	0x20000d58
 8007b24:	20000d34 	.word	0x20000d34
 8007b28:	20000ce8 	.word	0x20000ce8
 8007b2c:	20000cec 	.word	0x20000cec
 8007b30:	20000d48 	.word	0x20000d48
 8007b34:	20000d50 	.word	0x20000d50
 8007b38:	20000d38 	.word	0x20000d38
 8007b3c:	20000860 	.word	0x20000860
 8007b40:	2000085c 	.word	0x2000085c
 8007b44:	20000d40 	.word	0x20000d40
 8007b48:	20000d44 	.word	0x20000d44

08007b4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b52:	4b27      	ldr	r3, [pc, #156]	; (8007bf0 <vTaskSwitchContext+0xa4>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b5a:	4b26      	ldr	r3, [pc, #152]	; (8007bf4 <vTaskSwitchContext+0xa8>)
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b60:	e040      	b.n	8007be4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <vTaskSwitchContext+0xa8>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007b68:	4b23      	ldr	r3, [pc, #140]	; (8007bf8 <vTaskSwitchContext+0xac>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	e00f      	b.n	8007b90 <vTaskSwitchContext+0x44>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <vTaskSwitchContext+0x3e>
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	607b      	str	r3, [r7, #4]
 8007b88:	e7fe      	b.n	8007b88 <vTaskSwitchContext+0x3c>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	491a      	ldr	r1, [pc, #104]	; (8007bfc <vTaskSwitchContext+0xb0>)
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d0e5      	beq.n	8007b70 <vTaskSwitchContext+0x24>
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4a13      	ldr	r2, [pc, #76]	; (8007bfc <vTaskSwitchContext+0xb0>)
 8007bb0:	4413      	add	r3, r2
 8007bb2:	60bb      	str	r3, [r7, #8]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	605a      	str	r2, [r3, #4]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d104      	bne.n	8007bd4 <vTaskSwitchContext+0x88>
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	605a      	str	r2, [r3, #4]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	4a09      	ldr	r2, [pc, #36]	; (8007c00 <vTaskSwitchContext+0xb4>)
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	4a06      	ldr	r2, [pc, #24]	; (8007bf8 <vTaskSwitchContext+0xac>)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6013      	str	r3, [r2, #0]
}
 8007be4:	bf00      	nop
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bc80      	pop	{r7}
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	20000d58 	.word	0x20000d58
 8007bf4:	20000d44 	.word	0x20000d44
 8007bf8:	20000d38 	.word	0x20000d38
 8007bfc:	20000860 	.word	0x20000860
 8007c00:	2000085c 	.word	0x2000085c

08007c04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d109      	bne.n	8007c28 <vTaskPlaceOnEventList+0x24>
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	60fb      	str	r3, [r7, #12]
 8007c26:	e7fe      	b.n	8007c26 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <vTaskPlaceOnEventList+0x44>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3318      	adds	r3, #24
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7fe fe05 	bl	8006840 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c36:	2101      	movs	r1, #1
 8007c38:	6838      	ldr	r0, [r7, #0]
 8007c3a:	f000 fa75 	bl	8008128 <prvAddCurrentTaskToDelayedList>
}
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	2000085c 	.word	0x2000085c

08007c4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <vTaskPlaceOnEventListRestricted+0x26>
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	e7fe      	b.n	8007c70 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c72:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <vTaskPlaceOnEventListRestricted+0x50>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3318      	adds	r3, #24
 8007c78:	4619      	mov	r1, r3
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7fe fdbd 	bl	80067fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d002      	beq.n	8007c8c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007c86:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c8c:	6879      	ldr	r1, [r7, #4]
 8007c8e:	68b8      	ldr	r0, [r7, #8]
 8007c90:	f000 fa4a 	bl	8008128 <prvAddCurrentTaskToDelayedList>
	}
 8007c94:	bf00      	nop
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	2000085c 	.word	0x2000085c

08007ca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d109      	bne.n	8007cca <xTaskRemoveFromEventList+0x2a>
 8007cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	e7fe      	b.n	8007cc8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	3318      	adds	r3, #24
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fe fdee 	bl	80068b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cd4:	4b1d      	ldr	r3, [pc, #116]	; (8007d4c <xTaskRemoveFromEventList+0xac>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d11d      	bne.n	8007d18 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fe fde5 	bl	80068b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cea:	4b19      	ldr	r3, [pc, #100]	; (8007d50 <xTaskRemoveFromEventList+0xb0>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d903      	bls.n	8007cfa <xTaskRemoveFromEventList+0x5a>
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf6:	4a16      	ldr	r2, [pc, #88]	; (8007d50 <xTaskRemoveFromEventList+0xb0>)
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4a13      	ldr	r2, [pc, #76]	; (8007d54 <xTaskRemoveFromEventList+0xb4>)
 8007d08:	441a      	add	r2, r3
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f7fe fd72 	bl	80067fa <vListInsertEnd>
 8007d16:	e005      	b.n	8007d24 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	3318      	adds	r3, #24
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	480e      	ldr	r0, [pc, #56]	; (8007d58 <xTaskRemoveFromEventList+0xb8>)
 8007d20:	f7fe fd6b 	bl	80067fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <xTaskRemoveFromEventList+0xbc>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d905      	bls.n	8007d3e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d32:	2301      	movs	r3, #1
 8007d34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d36:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <xTaskRemoveFromEventList+0xc0>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	e001      	b.n	8007d42 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007d42:	697b      	ldr	r3, [r7, #20]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20000d58 	.word	0x20000d58
 8007d50:	20000d38 	.word	0x20000d38
 8007d54:	20000860 	.word	0x20000860
 8007d58:	20000cf0 	.word	0x20000cf0
 8007d5c:	2000085c 	.word	0x2000085c
 8007d60:	20000d44 	.word	0x20000d44

08007d64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <vTaskInternalSetTimeOutState+0x24>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <vTaskInternalSetTimeOutState+0x28>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	605a      	str	r2, [r3, #4]
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bc80      	pop	{r7}
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	20000d48 	.word	0x20000d48
 8007d8c:	20000d34 	.word	0x20000d34

08007d90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d109      	bne.n	8007db4 <xTaskCheckForTimeOut+0x24>
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	e7fe      	b.n	8007db2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d109      	bne.n	8007dce <xTaskCheckForTimeOut+0x3e>
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	e7fe      	b.n	8007dcc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007dce:	f000 fdf3 	bl	80089b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dd2:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <xTaskCheckForTimeOut+0xb8>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dea:	d102      	bne.n	8007df2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007dec:	2300      	movs	r3, #0
 8007dee:	61fb      	str	r3, [r7, #28]
 8007df0:	e023      	b.n	8007e3a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	4b15      	ldr	r3, [pc, #84]	; (8007e4c <xTaskCheckForTimeOut+0xbc>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d007      	beq.n	8007e0e <xTaskCheckForTimeOut+0x7e>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d302      	bcc.n	8007e0e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	61fb      	str	r3, [r7, #28]
 8007e0c:	e015      	b.n	8007e3a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d20b      	bcs.n	8007e30 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	1ad2      	subs	r2, r2, r3
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff ff9d 	bl	8007d64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61fb      	str	r3, [r7, #28]
 8007e2e:	e004      	b.n	8007e3a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e36:	2301      	movs	r3, #1
 8007e38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e3a:	f000 fdeb 	bl	8008a14 <vPortExitCritical>

	return xReturn;
 8007e3e:	69fb      	ldr	r3, [r7, #28]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3720      	adds	r7, #32
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	20000d34 	.word	0x20000d34
 8007e4c:	20000d48 	.word	0x20000d48

08007e50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e54:	4b03      	ldr	r3, [pc, #12]	; (8007e64 <vTaskMissedYield+0x14>)
 8007e56:	2201      	movs	r2, #1
 8007e58:	601a      	str	r2, [r3, #0]
}
 8007e5a:	bf00      	nop
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bc80      	pop	{r7}
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	20000d44 	.word	0x20000d44

08007e68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e70:	f000 f852 	bl	8007f18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e74:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <prvIdleTask+0x28>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d9f9      	bls.n	8007e70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e7c:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <prvIdleTask+0x2c>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e8c:	e7f0      	b.n	8007e70 <prvIdleTask+0x8>
 8007e8e:	bf00      	nop
 8007e90:	20000860 	.word	0x20000860
 8007e94:	e000ed04 	.word	0xe000ed04

08007e98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	607b      	str	r3, [r7, #4]
 8007ea2:	e00c      	b.n	8007ebe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4a12      	ldr	r2, [pc, #72]	; (8007ef8 <prvInitialiseTaskLists+0x60>)
 8007eb0:	4413      	add	r3, r2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fc76 	bl	80067a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	607b      	str	r3, [r7, #4]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b37      	cmp	r3, #55	; 0x37
 8007ec2:	d9ef      	bls.n	8007ea4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ec4:	480d      	ldr	r0, [pc, #52]	; (8007efc <prvInitialiseTaskLists+0x64>)
 8007ec6:	f7fe fc6d 	bl	80067a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007eca:	480d      	ldr	r0, [pc, #52]	; (8007f00 <prvInitialiseTaskLists+0x68>)
 8007ecc:	f7fe fc6a 	bl	80067a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ed0:	480c      	ldr	r0, [pc, #48]	; (8007f04 <prvInitialiseTaskLists+0x6c>)
 8007ed2:	f7fe fc67 	bl	80067a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ed6:	480c      	ldr	r0, [pc, #48]	; (8007f08 <prvInitialiseTaskLists+0x70>)
 8007ed8:	f7fe fc64 	bl	80067a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007edc:	480b      	ldr	r0, [pc, #44]	; (8007f0c <prvInitialiseTaskLists+0x74>)
 8007ede:	f7fe fc61 	bl	80067a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ee2:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <prvInitialiseTaskLists+0x78>)
 8007ee4:	4a05      	ldr	r2, [pc, #20]	; (8007efc <prvInitialiseTaskLists+0x64>)
 8007ee6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ee8:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <prvInitialiseTaskLists+0x7c>)
 8007eea:	4a05      	ldr	r2, [pc, #20]	; (8007f00 <prvInitialiseTaskLists+0x68>)
 8007eec:	601a      	str	r2, [r3, #0]
}
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20000860 	.word	0x20000860
 8007efc:	20000cc0 	.word	0x20000cc0
 8007f00:	20000cd4 	.word	0x20000cd4
 8007f04:	20000cf0 	.word	0x20000cf0
 8007f08:	20000d04 	.word	0x20000d04
 8007f0c:	20000d1c 	.word	0x20000d1c
 8007f10:	20000ce8 	.word	0x20000ce8
 8007f14:	20000cec 	.word	0x20000cec

08007f18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f1e:	e019      	b.n	8007f54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f20:	f000 fd4a 	bl	80089b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007f24:	4b0f      	ldr	r3, [pc, #60]	; (8007f64 <prvCheckTasksWaitingTermination+0x4c>)
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fe fcbd 	bl	80068b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f36:	4b0c      	ldr	r3, [pc, #48]	; (8007f68 <prvCheckTasksWaitingTermination+0x50>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	4a0a      	ldr	r2, [pc, #40]	; (8007f68 <prvCheckTasksWaitingTermination+0x50>)
 8007f3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f40:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <prvCheckTasksWaitingTermination+0x54>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	4a09      	ldr	r2, [pc, #36]	; (8007f6c <prvCheckTasksWaitingTermination+0x54>)
 8007f48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f4a:	f000 fd63 	bl	8008a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f80e 	bl	8007f70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f54:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <prvCheckTasksWaitingTermination+0x54>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e1      	bne.n	8007f20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f5c:	bf00      	nop
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000d04 	.word	0x20000d04
 8007f68:	20000d30 	.word	0x20000d30
 8007f6c:	20000d18 	.word	0x20000d18

08007f70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d108      	bne.n	8007f94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fece 	bl	8008d28 <vPortFree>
				vPortFree( pxTCB );
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fecb 	bl	8008d28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f92:	e017      	b.n	8007fc4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d103      	bne.n	8007fa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fec2 	bl	8008d28 <vPortFree>
	}
 8007fa4:	e00e      	b.n	8007fc4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d009      	beq.n	8007fc4 <prvDeleteTCB+0x54>
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	e7fe      	b.n	8007fc2 <prvDeleteTCB+0x52>
	}
 8007fc4:	bf00      	nop
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fd2:	4b0e      	ldr	r3, [pc, #56]	; (800800c <prvResetNextTaskUnblockTime+0x40>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <prvResetNextTaskUnblockTime+0x14>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e000      	b.n	8007fe2 <prvResetNextTaskUnblockTime+0x16>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d004      	beq.n	8007ff0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fe6:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <prvResetNextTaskUnblockTime+0x44>)
 8007fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fee:	e008      	b.n	8008002 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <prvResetNextTaskUnblockTime+0x40>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	4a04      	ldr	r2, [pc, #16]	; (8008010 <prvResetNextTaskUnblockTime+0x44>)
 8008000:	6013      	str	r3, [r2, #0]
}
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	bc80      	pop	{r7}
 800800a:	4770      	bx	lr
 800800c:	20000ce8 	.word	0x20000ce8
 8008010:	20000d50 	.word	0x20000d50

08008014 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800801a:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <xTaskGetSchedulerState+0x34>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d102      	bne.n	8008028 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008022:	2301      	movs	r3, #1
 8008024:	607b      	str	r3, [r7, #4]
 8008026:	e008      	b.n	800803a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008028:	4b08      	ldr	r3, [pc, #32]	; (800804c <xTaskGetSchedulerState+0x38>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008030:	2302      	movs	r3, #2
 8008032:	607b      	str	r3, [r7, #4]
 8008034:	e001      	b.n	800803a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008036:	2300      	movs	r3, #0
 8008038:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800803a:	687b      	ldr	r3, [r7, #4]
	}
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	bc80      	pop	{r7}
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	20000d3c 	.word	0x20000d3c
 800804c:	20000d58 	.word	0x20000d58

08008050 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800805c:	2300      	movs	r3, #0
 800805e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d054      	beq.n	8008110 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008066:	4b2d      	ldr	r3, [pc, #180]	; (800811c <xTaskPriorityDisinherit+0xcc>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	429a      	cmp	r2, r3
 800806e:	d009      	beq.n	8008084 <xTaskPriorityDisinherit+0x34>
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60fb      	str	r3, [r7, #12]
 8008082:	e7fe      	b.n	8008082 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008088:	2b00      	cmp	r3, #0
 800808a:	d109      	bne.n	80080a0 <xTaskPriorityDisinherit+0x50>
 800808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	60bb      	str	r3, [r7, #8]
 800809e:	e7fe      	b.n	800809e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a4:	1e5a      	subs	r2, r3, #1
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d02c      	beq.n	8008110 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d128      	bne.n	8008110 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	3304      	adds	r3, #4
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fbf4 	bl	80068b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e0:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <xTaskPriorityDisinherit+0xd0>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d903      	bls.n	80080f0 <xTaskPriorityDisinherit+0xa0>
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	4a0c      	ldr	r2, [pc, #48]	; (8008120 <xTaskPriorityDisinherit+0xd0>)
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4a09      	ldr	r2, [pc, #36]	; (8008124 <xTaskPriorityDisinherit+0xd4>)
 80080fe:	441a      	add	r2, r3
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	3304      	adds	r3, #4
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f7fe fb77 	bl	80067fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800810c:	2301      	movs	r3, #1
 800810e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008110:	697b      	ldr	r3, [r7, #20]
	}
 8008112:	4618      	mov	r0, r3
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	2000085c 	.word	0x2000085c
 8008120:	20000d38 	.word	0x20000d38
 8008124:	20000860 	.word	0x20000860

08008128 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008132:	4b21      	ldr	r3, [pc, #132]	; (80081b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008138:	4b20      	ldr	r3, [pc, #128]	; (80081bc <prvAddCurrentTaskToDelayedList+0x94>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3304      	adds	r3, #4
 800813e:	4618      	mov	r0, r3
 8008140:	f7fe fbb6 	bl	80068b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814a:	d10a      	bne.n	8008162 <prvAddCurrentTaskToDelayedList+0x3a>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d007      	beq.n	8008162 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008152:	4b1a      	ldr	r3, [pc, #104]	; (80081bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3304      	adds	r3, #4
 8008158:	4619      	mov	r1, r3
 800815a:	4819      	ldr	r0, [pc, #100]	; (80081c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800815c:	f7fe fb4d 	bl	80067fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008160:	e026      	b.n	80081b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4413      	add	r3, r2
 8008168:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800816a:	4b14      	ldr	r3, [pc, #80]	; (80081bc <prvAddCurrentTaskToDelayedList+0x94>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	429a      	cmp	r2, r3
 8008178:	d209      	bcs.n	800818e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800817a:	4b12      	ldr	r3, [pc, #72]	; (80081c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3304      	adds	r3, #4
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f7fe fb5a 	bl	8006840 <vListInsert>
}
 800818c:	e010      	b.n	80081b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800818e:	4b0e      	ldr	r3, [pc, #56]	; (80081c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	4b0a      	ldr	r3, [pc, #40]	; (80081bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3304      	adds	r3, #4
 8008198:	4619      	mov	r1, r3
 800819a:	4610      	mov	r0, r2
 800819c:	f7fe fb50 	bl	8006840 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081a0:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d202      	bcs.n	80081b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80081aa:	4a08      	ldr	r2, [pc, #32]	; (80081cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	6013      	str	r3, [r2, #0]
}
 80081b0:	bf00      	nop
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	20000d34 	.word	0x20000d34
 80081bc:	2000085c 	.word	0x2000085c
 80081c0:	20000d1c 	.word	0x20000d1c
 80081c4:	20000cec 	.word	0x20000cec
 80081c8:	20000ce8 	.word	0x20000ce8
 80081cc:	20000d50 	.word	0x20000d50

080081d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08a      	sub	sp, #40	; 0x28
 80081d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081da:	f000 fac3 	bl	8008764 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081de:	4b1c      	ldr	r3, [pc, #112]	; (8008250 <xTimerCreateTimerTask+0x80>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d021      	beq.n	800822a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081ee:	1d3a      	adds	r2, r7, #4
 80081f0:	f107 0108 	add.w	r1, r7, #8
 80081f4:	f107 030c 	add.w	r3, r7, #12
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fe fab9 	bl	8006770 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081fe:	6879      	ldr	r1, [r7, #4]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	9202      	str	r2, [sp, #8]
 8008206:	9301      	str	r3, [sp, #4]
 8008208:	2302      	movs	r3, #2
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	2300      	movs	r3, #0
 800820e:	460a      	mov	r2, r1
 8008210:	4910      	ldr	r1, [pc, #64]	; (8008254 <xTimerCreateTimerTask+0x84>)
 8008212:	4811      	ldr	r0, [pc, #68]	; (8008258 <xTimerCreateTimerTask+0x88>)
 8008214:	f7ff f886 	bl	8007324 <xTaskCreateStatic>
 8008218:	4602      	mov	r2, r0
 800821a:	4b10      	ldr	r3, [pc, #64]	; (800825c <xTimerCreateTimerTask+0x8c>)
 800821c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800821e:	4b0f      	ldr	r3, [pc, #60]	; (800825c <xTimerCreateTimerTask+0x8c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008226:	2301      	movs	r3, #1
 8008228:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d109      	bne.n	8008244 <xTimerCreateTimerTask+0x74>
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	613b      	str	r3, [r7, #16]
 8008242:	e7fe      	b.n	8008242 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008244:	697b      	ldr	r3, [r7, #20]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000d8c 	.word	0x20000d8c
 8008254:	08009a0c 	.word	0x08009a0c
 8008258:	08008379 	.word	0x08008379
 800825c:	20000d90 	.word	0x20000d90

08008260 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b08a      	sub	sp, #40	; 0x28
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800826e:	2300      	movs	r3, #0
 8008270:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d109      	bne.n	800828c <xTimerGenericCommand+0x2c>
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	623b      	str	r3, [r7, #32]
 800828a:	e7fe      	b.n	800828a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800828c:	4b19      	ldr	r3, [pc, #100]	; (80082f4 <xTimerGenericCommand+0x94>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d02a      	beq.n	80082ea <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b05      	cmp	r3, #5
 80082a4:	dc18      	bgt.n	80082d8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80082a6:	f7ff feb5 	bl	8008014 <xTaskGetSchedulerState>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d109      	bne.n	80082c4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082b0:	4b10      	ldr	r3, [pc, #64]	; (80082f4 <xTimerGenericCommand+0x94>)
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	f107 0110 	add.w	r1, r7, #16
 80082b8:	2300      	movs	r3, #0
 80082ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082bc:	f7fe fc5c 	bl	8006b78 <xQueueGenericSend>
 80082c0:	6278      	str	r0, [r7, #36]	; 0x24
 80082c2:	e012      	b.n	80082ea <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80082c4:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <xTimerGenericCommand+0x94>)
 80082c6:	6818      	ldr	r0, [r3, #0]
 80082c8:	f107 0110 	add.w	r1, r7, #16
 80082cc:	2300      	movs	r3, #0
 80082ce:	2200      	movs	r2, #0
 80082d0:	f7fe fc52 	bl	8006b78 <xQueueGenericSend>
 80082d4:	6278      	str	r0, [r7, #36]	; 0x24
 80082d6:	e008      	b.n	80082ea <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082d8:	4b06      	ldr	r3, [pc, #24]	; (80082f4 <xTimerGenericCommand+0x94>)
 80082da:	6818      	ldr	r0, [r3, #0]
 80082dc:	f107 0110 	add.w	r1, r7, #16
 80082e0:	2300      	movs	r3, #0
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	f7fe fd42 	bl	8006d6c <xQueueGenericSendFromISR>
 80082e8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3728      	adds	r7, #40	; 0x28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20000d8c 	.word	0x20000d8c

080082f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008302:	4b1c      	ldr	r3, [pc, #112]	; (8008374 <prvProcessExpiredTimer+0x7c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	3304      	adds	r3, #4
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe facd 	bl	80068b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d121      	bne.n	8008362 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	699a      	ldr	r2, [r3, #24]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	18d1      	adds	r1, r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	6978      	ldr	r0, [r7, #20]
 800832c:	f000 f8c8 	bl	80084c0 <prvInsertTimerInActiveList>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d015      	beq.n	8008362 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008336:	2300      	movs	r3, #0
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	2300      	movs	r3, #0
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	2100      	movs	r1, #0
 8008340:	6978      	ldr	r0, [r7, #20]
 8008342:	f7ff ff8d 	bl	8008260 <xTimerGenericCommand>
 8008346:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d109      	bne.n	8008362 <prvProcessExpiredTimer+0x6a>
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	e7fe      	b.n	8008360 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	6978      	ldr	r0, [r7, #20]
 8008368:	4798      	blx	r3
}
 800836a:	bf00      	nop
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20000d84 	.word	0x20000d84

08008378 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008380:	f107 0308 	add.w	r3, r7, #8
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f857 	bl	8008438 <prvGetNextExpireTime>
 800838a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4619      	mov	r1, r3
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f803 	bl	800839c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008396:	f000 f8d5 	bl	8008544 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800839a:	e7f1      	b.n	8008380 <prvTimerTask+0x8>

0800839c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80083a6:	f7ff fa5b 	bl	8007860 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083aa:	f107 0308 	add.w	r3, r7, #8
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 f866 	bl	8008480 <prvSampleTimeNow>
 80083b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d130      	bne.n	800841e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <prvProcessTimerOrBlockTask+0x3c>
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d806      	bhi.n	80083d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80083ca:	f7ff fa57 	bl	800787c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083ce:	68f9      	ldr	r1, [r7, #12]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7ff ff91 	bl	80082f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083d6:	e024      	b.n	8008422 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d008      	beq.n	80083f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083de:	4b13      	ldr	r3, [pc, #76]	; (800842c <prvProcessTimerOrBlockTask+0x90>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	bf0c      	ite	eq
 80083e8:	2301      	moveq	r3, #1
 80083ea:	2300      	movne	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083f0:	4b0f      	ldr	r3, [pc, #60]	; (8008430 <prvProcessTimerOrBlockTask+0x94>)
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	4619      	mov	r1, r3
 80083fe:	f7fe ff5d 	bl	80072bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008402:	f7ff fa3b 	bl	800787c <xTaskResumeAll>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10a      	bne.n	8008422 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800840c:	4b09      	ldr	r3, [pc, #36]	; (8008434 <prvProcessTimerOrBlockTask+0x98>)
 800840e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	f3bf 8f6f 	isb	sy
}
 800841c:	e001      	b.n	8008422 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800841e:	f7ff fa2d 	bl	800787c <xTaskResumeAll>
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20000d88 	.word	0x20000d88
 8008430:	20000d8c 	.word	0x20000d8c
 8008434:	e000ed04 	.word	0xe000ed04

08008438 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008440:	4b0e      	ldr	r3, [pc, #56]	; (800847c <prvGetNextExpireTime+0x44>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	bf0c      	ite	eq
 800844a:	2301      	moveq	r3, #1
 800844c:	2300      	movne	r3, #0
 800844e:	b2db      	uxtb	r3, r3
 8008450:	461a      	mov	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d105      	bne.n	800846a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800845e:	4b07      	ldr	r3, [pc, #28]	; (800847c <prvGetNextExpireTime+0x44>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60fb      	str	r3, [r7, #12]
 8008468:	e001      	b.n	800846e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800846e:	68fb      	ldr	r3, [r7, #12]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	bc80      	pop	{r7}
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	20000d84 	.word	0x20000d84

08008480 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008488:	f7ff fa94 	bl	80079b4 <xTaskGetTickCount>
 800848c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800848e:	4b0b      	ldr	r3, [pc, #44]	; (80084bc <prvSampleTimeNow+0x3c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	429a      	cmp	r2, r3
 8008496:	d205      	bcs.n	80084a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008498:	f000 f904 	bl	80086a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	e002      	b.n	80084aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80084aa:	4a04      	ldr	r2, [pc, #16]	; (80084bc <prvSampleTimeNow+0x3c>)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80084b0:	68fb      	ldr	r3, [r7, #12]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000d94 	.word	0x20000d94

080084c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80084ce:	2300      	movs	r3, #0
 80084d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d812      	bhi.n	800850c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	1ad2      	subs	r2, r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d302      	bcc.n	80084fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084f4:	2301      	movs	r3, #1
 80084f6:	617b      	str	r3, [r7, #20]
 80084f8:	e01b      	b.n	8008532 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084fa:	4b10      	ldr	r3, [pc, #64]	; (800853c <prvInsertTimerInActiveList+0x7c>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3304      	adds	r3, #4
 8008502:	4619      	mov	r1, r3
 8008504:	4610      	mov	r0, r2
 8008506:	f7fe f99b 	bl	8006840 <vListInsert>
 800850a:	e012      	b.n	8008532 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d206      	bcs.n	8008522 <prvInsertTimerInActiveList+0x62>
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	429a      	cmp	r2, r3
 800851a:	d302      	bcc.n	8008522 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800851c:	2301      	movs	r3, #1
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	e007      	b.n	8008532 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008522:	4b07      	ldr	r3, [pc, #28]	; (8008540 <prvInsertTimerInActiveList+0x80>)
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3304      	adds	r3, #4
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f7fe f987 	bl	8006840 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008532:	697b      	ldr	r3, [r7, #20]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20000d88 	.word	0x20000d88
 8008540:	20000d84 	.word	0x20000d84

08008544 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08e      	sub	sp, #56	; 0x38
 8008548:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800854a:	e099      	b.n	8008680 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	da17      	bge.n	8008582 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008552:	1d3b      	adds	r3, r7, #4
 8008554:	3304      	adds	r3, #4
 8008556:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <prvProcessReceivedCommands+0x2e>
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	61fb      	str	r3, [r7, #28]
 8008570:	e7fe      	b.n	8008570 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008578:	6850      	ldr	r0, [r2, #4]
 800857a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800857c:	6892      	ldr	r2, [r2, #8]
 800857e:	4611      	mov	r1, r2
 8008580:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	db7a      	blt.n	800867e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d004      	beq.n	800859e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	3304      	adds	r3, #4
 8008598:	4618      	mov	r0, r3
 800859a:	f7fe f989 	bl	80068b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800859e:	463b      	mov	r3, r7
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7ff ff6d 	bl	8008480 <prvSampleTimeNow>
 80085a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b09      	cmp	r3, #9
 80085ac:	d868      	bhi.n	8008680 <prvProcessReceivedCommands+0x13c>
 80085ae:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <prvProcessReceivedCommands+0x70>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	080085dd 	.word	0x080085dd
 80085b8:	080085dd 	.word	0x080085dd
 80085bc:	080085dd 	.word	0x080085dd
 80085c0:	08008681 	.word	0x08008681
 80085c4:	08008637 	.word	0x08008637
 80085c8:	0800866d 	.word	0x0800866d
 80085cc:	080085dd 	.word	0x080085dd
 80085d0:	080085dd 	.word	0x080085dd
 80085d4:	08008681 	.word	0x08008681
 80085d8:	08008637 	.word	0x08008637
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	18d1      	adds	r1, r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ea:	f7ff ff69 	bl	80084c0 <prvInsertTimerInActiveList>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d045      	beq.n	8008680 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085fa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80085fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fe:	69db      	ldr	r3, [r3, #28]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d13d      	bne.n	8008680 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	441a      	add	r2, r3
 800860c:	2300      	movs	r3, #0
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	2300      	movs	r3, #0
 8008612:	2100      	movs	r1, #0
 8008614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008616:	f7ff fe23 	bl	8008260 <xTimerGenericCommand>
 800861a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d12e      	bne.n	8008680 <prvProcessReceivedCommands+0x13c>
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	61bb      	str	r3, [r7, #24]
 8008634:	e7fe      	b.n	8008634 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d109      	bne.n	8008658 <prvProcessReceivedCommands+0x114>
 8008644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	617b      	str	r3, [r7, #20]
 8008656:	e7fe      	b.n	8008656 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	699a      	ldr	r2, [r3, #24]
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	18d1      	adds	r1, r2, r3
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008666:	f7ff ff2b 	bl	80084c0 <prvInsertTimerInActiveList>
					break;
 800866a:	e009      	b.n	8008680 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008672:	2b00      	cmp	r3, #0
 8008674:	d104      	bne.n	8008680 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008678:	f000 fb56 	bl	8008d28 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800867c:	e000      	b.n	8008680 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800867e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008680:	4b07      	ldr	r3, [pc, #28]	; (80086a0 <prvProcessReceivedCommands+0x15c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	1d39      	adds	r1, r7, #4
 8008686:	2200      	movs	r2, #0
 8008688:	4618      	mov	r0, r3
 800868a:	f7fe fc03 	bl	8006e94 <xQueueReceive>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	f47f af5b 	bne.w	800854c <prvProcessReceivedCommands+0x8>
	}
}
 8008696:	bf00      	nop
 8008698:	3730      	adds	r7, #48	; 0x30
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20000d8c 	.word	0x20000d8c

080086a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086aa:	e044      	b.n	8008736 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086ac:	4b2b      	ldr	r3, [pc, #172]	; (800875c <prvSwitchTimerLists+0xb8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086b6:	4b29      	ldr	r3, [pc, #164]	; (800875c <prvSwitchTimerLists+0xb8>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fe f8f3 	bl	80068b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d12d      	bne.n	8008736 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	4413      	add	r3, r2
 80086e2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d90e      	bls.n	800870a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086f8:	4b18      	ldr	r3, [pc, #96]	; (800875c <prvSwitchTimerLists+0xb8>)
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	3304      	adds	r3, #4
 8008700:	4619      	mov	r1, r3
 8008702:	4610      	mov	r0, r2
 8008704:	f7fe f89c 	bl	8006840 <vListInsert>
 8008708:	e015      	b.n	8008736 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800870a:	2300      	movs	r3, #0
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	2300      	movs	r3, #0
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	2100      	movs	r1, #0
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f7ff fda3 	bl	8008260 <xTimerGenericCommand>
 800871a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d109      	bne.n	8008736 <prvSwitchTimerLists+0x92>
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	e7fe      	b.n	8008734 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008736:	4b09      	ldr	r3, [pc, #36]	; (800875c <prvSwitchTimerLists+0xb8>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1b5      	bne.n	80086ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008740:	4b06      	ldr	r3, [pc, #24]	; (800875c <prvSwitchTimerLists+0xb8>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008746:	4b06      	ldr	r3, [pc, #24]	; (8008760 <prvSwitchTimerLists+0xbc>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a04      	ldr	r2, [pc, #16]	; (800875c <prvSwitchTimerLists+0xb8>)
 800874c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800874e:	4a04      	ldr	r2, [pc, #16]	; (8008760 <prvSwitchTimerLists+0xbc>)
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	6013      	str	r3, [r2, #0]
}
 8008754:	bf00      	nop
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20000d84 	.word	0x20000d84
 8008760:	20000d88 	.word	0x20000d88

08008764 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800876a:	f000 f925 	bl	80089b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800876e:	4b15      	ldr	r3, [pc, #84]	; (80087c4 <prvCheckForValidListAndQueue+0x60>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d120      	bne.n	80087b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008776:	4814      	ldr	r0, [pc, #80]	; (80087c8 <prvCheckForValidListAndQueue+0x64>)
 8008778:	f7fe f814 	bl	80067a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800877c:	4813      	ldr	r0, [pc, #76]	; (80087cc <prvCheckForValidListAndQueue+0x68>)
 800877e:	f7fe f811 	bl	80067a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008782:	4b13      	ldr	r3, [pc, #76]	; (80087d0 <prvCheckForValidListAndQueue+0x6c>)
 8008784:	4a10      	ldr	r2, [pc, #64]	; (80087c8 <prvCheckForValidListAndQueue+0x64>)
 8008786:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008788:	4b12      	ldr	r3, [pc, #72]	; (80087d4 <prvCheckForValidListAndQueue+0x70>)
 800878a:	4a10      	ldr	r2, [pc, #64]	; (80087cc <prvCheckForValidListAndQueue+0x68>)
 800878c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800878e:	2300      	movs	r3, #0
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	4b11      	ldr	r3, [pc, #68]	; (80087d8 <prvCheckForValidListAndQueue+0x74>)
 8008794:	4a11      	ldr	r2, [pc, #68]	; (80087dc <prvCheckForValidListAndQueue+0x78>)
 8008796:	2110      	movs	r1, #16
 8008798:	200a      	movs	r0, #10
 800879a:	f7fe f91b 	bl	80069d4 <xQueueGenericCreateStatic>
 800879e:	4602      	mov	r2, r0
 80087a0:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <prvCheckForValidListAndQueue+0x60>)
 80087a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087a4:	4b07      	ldr	r3, [pc, #28]	; (80087c4 <prvCheckForValidListAndQueue+0x60>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087ac:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <prvCheckForValidListAndQueue+0x60>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	490b      	ldr	r1, [pc, #44]	; (80087e0 <prvCheckForValidListAndQueue+0x7c>)
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe fd5a 	bl	800726c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087b8:	f000 f92c 	bl	8008a14 <vPortExitCritical>
}
 80087bc:	bf00      	nop
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20000d8c 	.word	0x20000d8c
 80087c8:	20000d5c 	.word	0x20000d5c
 80087cc:	20000d70 	.word	0x20000d70
 80087d0:	20000d84 	.word	0x20000d84
 80087d4:	20000d88 	.word	0x20000d88
 80087d8:	20000e38 	.word	0x20000e38
 80087dc:	20000d98 	.word	0x20000d98
 80087e0:	08009a14 	.word	0x08009a14

080087e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3b04      	subs	r3, #4
 80087f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3b04      	subs	r3, #4
 8008802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f023 0201 	bic.w	r2, r3, #1
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3b04      	subs	r3, #4
 8008812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008814:	4a08      	ldr	r2, [pc, #32]	; (8008838 <pxPortInitialiseStack+0x54>)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3b14      	subs	r3, #20
 800881e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3b20      	subs	r3, #32
 800882a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800882c:	68fb      	ldr	r3, [r7, #12]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr
 8008838:	0800883d 	.word	0x0800883d

0800883c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008842:	2300      	movs	r3, #0
 8008844:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008846:	4b10      	ldr	r3, [pc, #64]	; (8008888 <prvTaskExitError+0x4c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884e:	d009      	beq.n	8008864 <prvTaskExitError+0x28>
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	e7fe      	b.n	8008862 <prvTaskExitError+0x26>
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008876:	bf00      	nop
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d0fc      	beq.n	8008878 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800887e:	bf00      	nop
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	bc80      	pop	{r7}
 8008886:	4770      	bx	lr
 8008888:	2000011c 	.word	0x2000011c
 800888c:	00000000 	.word	0x00000000

08008890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008890:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <pxCurrentTCBConst2>)
 8008892:	6819      	ldr	r1, [r3, #0]
 8008894:	6808      	ldr	r0, [r1, #0]
 8008896:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800889a:	f380 8809 	msr	PSP, r0
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f04f 0000 	mov.w	r0, #0
 80088a6:	f380 8811 	msr	BASEPRI, r0
 80088aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80088ae:	4770      	bx	lr

080088b0 <pxCurrentTCBConst2>:
 80088b0:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop

080088b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80088b8:	4806      	ldr	r0, [pc, #24]	; (80088d4 <prvPortStartFirstTask+0x1c>)
 80088ba:	6800      	ldr	r0, [r0, #0]
 80088bc:	6800      	ldr	r0, [r0, #0]
 80088be:	f380 8808 	msr	MSP, r0
 80088c2:	b662      	cpsie	i
 80088c4:	b661      	cpsie	f
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	df00      	svc	0
 80088d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088d2:	bf00      	nop
 80088d4:	e000ed08 	.word	0xe000ed08

080088d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088de:	4b31      	ldr	r3, [pc, #196]	; (80089a4 <xPortStartScheduler+0xcc>)
 80088e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	22ff      	movs	r2, #255	; 0xff
 80088ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008900:	b2da      	uxtb	r2, r3
 8008902:	4b29      	ldr	r3, [pc, #164]	; (80089a8 <xPortStartScheduler+0xd0>)
 8008904:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008906:	4b29      	ldr	r3, [pc, #164]	; (80089ac <xPortStartScheduler+0xd4>)
 8008908:	2207      	movs	r2, #7
 800890a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800890c:	e009      	b.n	8008922 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800890e:	4b27      	ldr	r3, [pc, #156]	; (80089ac <xPortStartScheduler+0xd4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3b01      	subs	r3, #1
 8008914:	4a25      	ldr	r2, [pc, #148]	; (80089ac <xPortStartScheduler+0xd4>)
 8008916:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008918:	78fb      	ldrb	r3, [r7, #3]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	b2db      	uxtb	r3, r3
 8008920:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008922:	78fb      	ldrb	r3, [r7, #3]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892a:	2b80      	cmp	r3, #128	; 0x80
 800892c:	d0ef      	beq.n	800890e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800892e:	4b1f      	ldr	r3, [pc, #124]	; (80089ac <xPortStartScheduler+0xd4>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f1c3 0307 	rsb	r3, r3, #7
 8008936:	2b04      	cmp	r3, #4
 8008938:	d009      	beq.n	800894e <xPortStartScheduler+0x76>
 800893a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893e:	f383 8811 	msr	BASEPRI, r3
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	60bb      	str	r3, [r7, #8]
 800894c:	e7fe      	b.n	800894c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800894e:	4b17      	ldr	r3, [pc, #92]	; (80089ac <xPortStartScheduler+0xd4>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	021b      	lsls	r3, r3, #8
 8008954:	4a15      	ldr	r2, [pc, #84]	; (80089ac <xPortStartScheduler+0xd4>)
 8008956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008958:	4b14      	ldr	r3, [pc, #80]	; (80089ac <xPortStartScheduler+0xd4>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008960:	4a12      	ldr	r2, [pc, #72]	; (80089ac <xPortStartScheduler+0xd4>)
 8008962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	b2da      	uxtb	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800896c:	4b10      	ldr	r3, [pc, #64]	; (80089b0 <xPortStartScheduler+0xd8>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a0f      	ldr	r2, [pc, #60]	; (80089b0 <xPortStartScheduler+0xd8>)
 8008972:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008978:	4b0d      	ldr	r3, [pc, #52]	; (80089b0 <xPortStartScheduler+0xd8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a0c      	ldr	r2, [pc, #48]	; (80089b0 <xPortStartScheduler+0xd8>)
 800897e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008984:	f000 f8b0 	bl	8008ae8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008988:	4b0a      	ldr	r3, [pc, #40]	; (80089b4 <xPortStartScheduler+0xdc>)
 800898a:	2200      	movs	r2, #0
 800898c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800898e:	f7ff ff93 	bl	80088b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008992:	f7ff f8db 	bl	8007b4c <vTaskSwitchContext>
	prvTaskExitError();
 8008996:	f7ff ff51 	bl	800883c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	e000e400 	.word	0xe000e400
 80089a8:	20000e88 	.word	0x20000e88
 80089ac:	20000e8c 	.word	0x20000e8c
 80089b0:	e000ed20 	.word	0xe000ed20
 80089b4:	2000011c 	.word	0x2000011c

080089b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089d0:	4b0e      	ldr	r3, [pc, #56]	; (8008a0c <vPortEnterCritical+0x54>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3301      	adds	r3, #1
 80089d6:	4a0d      	ldr	r2, [pc, #52]	; (8008a0c <vPortEnterCritical+0x54>)
 80089d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089da:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <vPortEnterCritical+0x54>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d10e      	bne.n	8008a00 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089e2:	4b0b      	ldr	r3, [pc, #44]	; (8008a10 <vPortEnterCritical+0x58>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d009      	beq.n	8008a00 <vPortEnterCritical+0x48>
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	603b      	str	r3, [r7, #0]
 80089fe:	e7fe      	b.n	80089fe <vPortEnterCritical+0x46>
	}
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bc80      	pop	{r7}
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	2000011c 	.word	0x2000011c
 8008a10:	e000ed04 	.word	0xe000ed04

08008a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a1a:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <vPortExitCritical+0x48>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d109      	bne.n	8008a36 <vPortExitCritical+0x22>
 8008a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	607b      	str	r3, [r7, #4]
 8008a34:	e7fe      	b.n	8008a34 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008a36:	4b09      	ldr	r3, [pc, #36]	; (8008a5c <vPortExitCritical+0x48>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	4a07      	ldr	r2, [pc, #28]	; (8008a5c <vPortExitCritical+0x48>)
 8008a3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a40:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <vPortExitCritical+0x48>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d104      	bne.n	8008a52 <vPortExitCritical+0x3e>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a52:	bf00      	nop
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc80      	pop	{r7}
 8008a5a:	4770      	bx	lr
 8008a5c:	2000011c 	.word	0x2000011c

08008a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a60:	f3ef 8009 	mrs	r0, PSP
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	4b0d      	ldr	r3, [pc, #52]	; (8008aa0 <pxCurrentTCBConst>)
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a70:	6010      	str	r0, [r2, #0]
 8008a72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008a76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008a7a:	f380 8811 	msr	BASEPRI, r0
 8008a7e:	f7ff f865 	bl	8007b4c <vTaskSwitchContext>
 8008a82:	f04f 0000 	mov.w	r0, #0
 8008a86:	f380 8811 	msr	BASEPRI, r0
 8008a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a8e:	6819      	ldr	r1, [r3, #0]
 8008a90:	6808      	ldr	r0, [r1, #0]
 8008a92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a96:	f380 8809 	msr	PSP, r0
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	4770      	bx	lr

08008aa0 <pxCurrentTCBConst>:
 8008aa0:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop

08008aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ac0:	f7fe ff86 	bl	80079d0 <xTaskIncrementTick>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008aca:	4b06      	ldr	r3, [pc, #24]	; (8008ae4 <xPortSysTickHandler+0x3c>)
 8008acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	e000ed04 	.word	0xe000ed04

08008ae8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008aec:	4b0a      	ldr	r3, [pc, #40]	; (8008b18 <vPortSetupTimerInterrupt+0x30>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008af2:	4b0a      	ldr	r3, [pc, #40]	; (8008b1c <vPortSetupTimerInterrupt+0x34>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008af8:	4b09      	ldr	r3, [pc, #36]	; (8008b20 <vPortSetupTimerInterrupt+0x38>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a09      	ldr	r2, [pc, #36]	; (8008b24 <vPortSetupTimerInterrupt+0x3c>)
 8008afe:	fba2 2303 	umull	r2, r3, r2, r3
 8008b02:	099b      	lsrs	r3, r3, #6
 8008b04:	4a08      	ldr	r2, [pc, #32]	; (8008b28 <vPortSetupTimerInterrupt+0x40>)
 8008b06:	3b01      	subs	r3, #1
 8008b08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b0a:	4b03      	ldr	r3, [pc, #12]	; (8008b18 <vPortSetupTimerInterrupt+0x30>)
 8008b0c:	2207      	movs	r2, #7
 8008b0e:	601a      	str	r2, [r3, #0]
}
 8008b10:	bf00      	nop
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bc80      	pop	{r7}
 8008b16:	4770      	bx	lr
 8008b18:	e000e010 	.word	0xe000e010
 8008b1c:	e000e018 	.word	0xe000e018
 8008b20:	20000000 	.word	0x20000000
 8008b24:	10624dd3 	.word	0x10624dd3
 8008b28:	e000e014 	.word	0xe000e014

08008b2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b32:	f3ef 8305 	mrs	r3, IPSR
 8008b36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b0f      	cmp	r3, #15
 8008b3c:	d913      	bls.n	8008b66 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b3e:	4a15      	ldr	r2, [pc, #84]	; (8008b94 <vPortValidateInterruptPriority+0x68>)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	4413      	add	r3, r2
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b48:	4b13      	ldr	r3, [pc, #76]	; (8008b98 <vPortValidateInterruptPriority+0x6c>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	7afa      	ldrb	r2, [r7, #11]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d209      	bcs.n	8008b66 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	607b      	str	r3, [r7, #4]
 8008b64:	e7fe      	b.n	8008b64 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b66:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <vPortValidateInterruptPriority+0x70>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008b6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <vPortValidateInterruptPriority+0x74>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d909      	bls.n	8008b8a <vPortValidateInterruptPriority+0x5e>
 8008b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	603b      	str	r3, [r7, #0]
 8008b88:	e7fe      	b.n	8008b88 <vPortValidateInterruptPriority+0x5c>
	}
 8008b8a:	bf00      	nop
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr
 8008b94:	e000e3f0 	.word	0xe000e3f0
 8008b98:	20000e88 	.word	0x20000e88
 8008b9c:	e000ed0c 	.word	0xe000ed0c
 8008ba0:	20000e8c 	.word	0x20000e8c

08008ba4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b08a      	sub	sp, #40	; 0x28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008bac:	2300      	movs	r3, #0
 8008bae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008bb0:	f7fe fe56 	bl	8007860 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008bb4:	4b57      	ldr	r3, [pc, #348]	; (8008d14 <pvPortMalloc+0x170>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008bbc:	f000 f90c 	bl	8008dd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008bc0:	4b55      	ldr	r3, [pc, #340]	; (8008d18 <pvPortMalloc+0x174>)
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f040 808c 	bne.w	8008ce6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d01c      	beq.n	8008c0e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008bd4:	2208      	movs	r2, #8
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4413      	add	r3, r2
 8008bda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f003 0307 	and.w	r3, r3, #7
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d013      	beq.n	8008c0e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f023 0307 	bic.w	r3, r3, #7
 8008bec:	3308      	adds	r3, #8
 8008bee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d009      	beq.n	8008c0e <pvPortMalloc+0x6a>
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	617b      	str	r3, [r7, #20]
 8008c0c:	e7fe      	b.n	8008c0c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d068      	beq.n	8008ce6 <pvPortMalloc+0x142>
 8008c14:	4b41      	ldr	r3, [pc, #260]	; (8008d1c <pvPortMalloc+0x178>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d863      	bhi.n	8008ce6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c1e:	4b40      	ldr	r3, [pc, #256]	; (8008d20 <pvPortMalloc+0x17c>)
 8008c20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c22:	4b3f      	ldr	r3, [pc, #252]	; (8008d20 <pvPortMalloc+0x17c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c28:	e004      	b.n	8008c34 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d903      	bls.n	8008c46 <pvPortMalloc+0xa2>
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f1      	bne.n	8008c2a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c46:	4b33      	ldr	r3, [pc, #204]	; (8008d14 <pvPortMalloc+0x170>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d04a      	beq.n	8008ce6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2208      	movs	r2, #8
 8008c56:	4413      	add	r3, r2
 8008c58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	1ad2      	subs	r2, r2, r3
 8008c6a:	2308      	movs	r3, #8
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d91e      	bls.n	8008cb0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4413      	add	r3, r2
 8008c78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	f003 0307 	and.w	r3, r3, #7
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d009      	beq.n	8008c98 <pvPortMalloc+0xf4>
 8008c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	613b      	str	r3, [r7, #16]
 8008c96:	e7fe      	b.n	8008c96 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	1ad2      	subs	r2, r2, r3
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008caa:	69b8      	ldr	r0, [r7, #24]
 8008cac:	f000 f8f6 	bl	8008e9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008cb0:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <pvPortMalloc+0x178>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	4a18      	ldr	r2, [pc, #96]	; (8008d1c <pvPortMalloc+0x178>)
 8008cbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008cbe:	4b17      	ldr	r3, [pc, #92]	; (8008d1c <pvPortMalloc+0x178>)
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	4b18      	ldr	r3, [pc, #96]	; (8008d24 <pvPortMalloc+0x180>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d203      	bcs.n	8008cd2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008cca:	4b14      	ldr	r3, [pc, #80]	; (8008d1c <pvPortMalloc+0x178>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a15      	ldr	r2, [pc, #84]	; (8008d24 <pvPortMalloc+0x180>)
 8008cd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	4b10      	ldr	r3, [pc, #64]	; (8008d18 <pvPortMalloc+0x174>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ce6:	f7fe fdc9 	bl	800787c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	f003 0307 	and.w	r3, r3, #7
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d009      	beq.n	8008d08 <pvPortMalloc+0x164>
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	60fb      	str	r3, [r7, #12]
 8008d06:	e7fe      	b.n	8008d06 <pvPortMalloc+0x162>
	return pvReturn;
 8008d08:	69fb      	ldr	r3, [r7, #28]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3728      	adds	r7, #40	; 0x28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20001e98 	.word	0x20001e98
 8008d18:	20001ea4 	.word	0x20001ea4
 8008d1c:	20001e9c 	.word	0x20001e9c
 8008d20:	20001e90 	.word	0x20001e90
 8008d24:	20001ea0 	.word	0x20001ea0

08008d28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d046      	beq.n	8008dc8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d3a:	2308      	movs	r3, #8
 8008d3c:	425b      	negs	r3, r3
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	4413      	add	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	4b20      	ldr	r3, [pc, #128]	; (8008dd0 <vPortFree+0xa8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4013      	ands	r3, r2
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d109      	bne.n	8008d6a <vPortFree+0x42>
 8008d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	e7fe      	b.n	8008d68 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d009      	beq.n	8008d86 <vPortFree+0x5e>
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	60bb      	str	r3, [r7, #8]
 8008d84:	e7fe      	b.n	8008d84 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	685a      	ldr	r2, [r3, #4]
 8008d8a:	4b11      	ldr	r3, [pc, #68]	; (8008dd0 <vPortFree+0xa8>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d019      	beq.n	8008dc8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d115      	bne.n	8008dc8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	4b0b      	ldr	r3, [pc, #44]	; (8008dd0 <vPortFree+0xa8>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	43db      	mvns	r3, r3
 8008da6:	401a      	ands	r2, r3
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008dac:	f7fe fd58 	bl	8007860 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	4b07      	ldr	r3, [pc, #28]	; (8008dd4 <vPortFree+0xac>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4413      	add	r3, r2
 8008dba:	4a06      	ldr	r2, [pc, #24]	; (8008dd4 <vPortFree+0xac>)
 8008dbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008dbe:	6938      	ldr	r0, [r7, #16]
 8008dc0:	f000 f86c 	bl	8008e9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008dc4:	f7fe fd5a 	bl	800787c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008dc8:	bf00      	nop
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20001ea4 	.word	0x20001ea4
 8008dd4:	20001e9c 	.word	0x20001e9c

08008dd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008de2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008de4:	4b27      	ldr	r3, [pc, #156]	; (8008e84 <prvHeapInit+0xac>)
 8008de6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f003 0307 	and.w	r3, r3, #7
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00c      	beq.n	8008e0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	3307      	adds	r3, #7
 8008df6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f023 0307 	bic.w	r3, r3, #7
 8008dfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	4a1f      	ldr	r2, [pc, #124]	; (8008e84 <prvHeapInit+0xac>)
 8008e08:	4413      	add	r3, r2
 8008e0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e10:	4a1d      	ldr	r2, [pc, #116]	; (8008e88 <prvHeapInit+0xb0>)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e16:	4b1c      	ldr	r3, [pc, #112]	; (8008e88 <prvHeapInit+0xb0>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	4413      	add	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e24:	2208      	movs	r2, #8
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	1a9b      	subs	r3, r3, r2
 8008e2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f023 0307 	bic.w	r3, r3, #7
 8008e32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4a15      	ldr	r2, [pc, #84]	; (8008e8c <prvHeapInit+0xb4>)
 8008e38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e3a:	4b14      	ldr	r3, [pc, #80]	; (8008e8c <prvHeapInit+0xb4>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e42:	4b12      	ldr	r3, [pc, #72]	; (8008e8c <prvHeapInit+0xb4>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2200      	movs	r2, #0
 8008e48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	1ad2      	subs	r2, r2, r3
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e58:	4b0c      	ldr	r3, [pc, #48]	; (8008e8c <prvHeapInit+0xb4>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	4a0a      	ldr	r2, [pc, #40]	; (8008e90 <prvHeapInit+0xb8>)
 8008e66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	4a09      	ldr	r2, [pc, #36]	; (8008e94 <prvHeapInit+0xbc>)
 8008e6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e70:	4b09      	ldr	r3, [pc, #36]	; (8008e98 <prvHeapInit+0xc0>)
 8008e72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e76:	601a      	str	r2, [r3, #0]
}
 8008e78:	bf00      	nop
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bc80      	pop	{r7}
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000e90 	.word	0x20000e90
 8008e88:	20001e90 	.word	0x20001e90
 8008e8c:	20001e98 	.word	0x20001e98
 8008e90:	20001ea0 	.word	0x20001ea0
 8008e94:	20001e9c 	.word	0x20001e9c
 8008e98:	20001ea4 	.word	0x20001ea4

08008e9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ea4:	4b27      	ldr	r3, [pc, #156]	; (8008f44 <prvInsertBlockIntoFreeList+0xa8>)
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	e002      	b.n	8008eb0 <prvInsertBlockIntoFreeList+0x14>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d8f7      	bhi.n	8008eaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d108      	bne.n	8008ede <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	441a      	add	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	441a      	add	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d118      	bne.n	8008f24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	4b14      	ldr	r3, [pc, #80]	; (8008f48 <prvInsertBlockIntoFreeList+0xac>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d00d      	beq.n	8008f1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	441a      	add	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	e008      	b.n	8008f2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f1a:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <prvInsertBlockIntoFreeList+0xac>)
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	e003      	b.n	8008f2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d002      	beq.n	8008f3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f3a:	bf00      	nop
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bc80      	pop	{r7}
 8008f42:	4770      	bx	lr
 8008f44:	20001e90 	.word	0x20001e90
 8008f48:	20001e98 	.word	0x20001e98

08008f4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f50:	2200      	movs	r2, #0
 8008f52:	4912      	ldr	r1, [pc, #72]	; (8008f9c <MX_USB_DEVICE_Init+0x50>)
 8008f54:	4812      	ldr	r0, [pc, #72]	; (8008fa0 <MX_USB_DEVICE_Init+0x54>)
 8008f56:	f7fc fa28 	bl	80053aa <USBD_Init>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f60:	f7f7 faec 	bl	800053c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f64:	490f      	ldr	r1, [pc, #60]	; (8008fa4 <MX_USB_DEVICE_Init+0x58>)
 8008f66:	480e      	ldr	r0, [pc, #56]	; (8008fa0 <MX_USB_DEVICE_Init+0x54>)
 8008f68:	f7fc fa4a 	bl	8005400 <USBD_RegisterClass>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f72:	f7f7 fae3 	bl	800053c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f76:	490c      	ldr	r1, [pc, #48]	; (8008fa8 <MX_USB_DEVICE_Init+0x5c>)
 8008f78:	4809      	ldr	r0, [pc, #36]	; (8008fa0 <MX_USB_DEVICE_Init+0x54>)
 8008f7a:	f7fc f97b 	bl	8005274 <USBD_CDC_RegisterInterface>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f84:	f7f7 fada 	bl	800053c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f88:	4805      	ldr	r0, [pc, #20]	; (8008fa0 <MX_USB_DEVICE_Init+0x54>)
 8008f8a:	f7fc fa52 	bl	8005432 <USBD_Start>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f94:	f7f7 fad2 	bl	800053c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f98:	bf00      	nop
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	20000130 	.word	0x20000130
 8008fa0:	20002134 	.word	0x20002134
 8008fa4:	20000018 	.word	0x20000018
 8008fa8:	20000120 	.word	0x20000120

08008fac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	4905      	ldr	r1, [pc, #20]	; (8008fc8 <CDC_Init_FS+0x1c>)
 8008fb4:	4805      	ldr	r0, [pc, #20]	; (8008fcc <CDC_Init_FS+0x20>)
 8008fb6:	f7fc f973 	bl	80052a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008fba:	4905      	ldr	r1, [pc, #20]	; (8008fd0 <CDC_Init_FS+0x24>)
 8008fbc:	4803      	ldr	r0, [pc, #12]	; (8008fcc <CDC_Init_FS+0x20>)
 8008fbe:	f7fc f988 	bl	80052d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008fc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	20002438 	.word	0x20002438
 8008fcc:	20002134 	.word	0x20002134
 8008fd0:	200023f8 	.word	0x200023f8

08008fd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008fd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bc80      	pop	{r7}
 8008fe0:	4770      	bx	lr
	...

08008fe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	4603      	mov	r3, r0
 8008fec:	6039      	str	r1, [r7, #0]
 8008fee:	71fb      	strb	r3, [r7, #7]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	2b23      	cmp	r3, #35	; 0x23
 8008ff8:	d84a      	bhi.n	8009090 <CDC_Control_FS+0xac>
 8008ffa:	a201      	add	r2, pc, #4	; (adr r2, 8009000 <CDC_Control_FS+0x1c>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009091 	.word	0x08009091
 8009004:	08009091 	.word	0x08009091
 8009008:	08009091 	.word	0x08009091
 800900c:	08009091 	.word	0x08009091
 8009010:	08009091 	.word	0x08009091
 8009014:	08009091 	.word	0x08009091
 8009018:	08009091 	.word	0x08009091
 800901c:	08009091 	.word	0x08009091
 8009020:	08009091 	.word	0x08009091
 8009024:	08009091 	.word	0x08009091
 8009028:	08009091 	.word	0x08009091
 800902c:	08009091 	.word	0x08009091
 8009030:	08009091 	.word	0x08009091
 8009034:	08009091 	.word	0x08009091
 8009038:	08009091 	.word	0x08009091
 800903c:	08009091 	.word	0x08009091
 8009040:	08009091 	.word	0x08009091
 8009044:	08009091 	.word	0x08009091
 8009048:	08009091 	.word	0x08009091
 800904c:	08009091 	.word	0x08009091
 8009050:	08009091 	.word	0x08009091
 8009054:	08009091 	.word	0x08009091
 8009058:	08009091 	.word	0x08009091
 800905c:	08009091 	.word	0x08009091
 8009060:	08009091 	.word	0x08009091
 8009064:	08009091 	.word	0x08009091
 8009068:	08009091 	.word	0x08009091
 800906c:	08009091 	.word	0x08009091
 8009070:	08009091 	.word	0x08009091
 8009074:	08009091 	.word	0x08009091
 8009078:	08009091 	.word	0x08009091
 800907c:	08009091 	.word	0x08009091
 8009080:	08009091 	.word	0x08009091
 8009084:	08009091 	.word	0x08009091
 8009088:	08009091 	.word	0x08009091
 800908c:	08009091 	.word	0x08009091
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009090:	bf00      	nop
  }

  return (USBD_OK);
 8009092:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009094:	4618      	mov	r0, r3
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	bc80      	pop	{r7}
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop

080090a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	4805      	ldr	r0, [pc, #20]	; (80090c4 <CDC_Receive_FS+0x24>)
 80090ae:	f7fc f910 	bl	80052d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80090b2:	4804      	ldr	r0, [pc, #16]	; (80090c4 <CDC_Receive_FS+0x24>)
 80090b4:	f7fc f94f 	bl	8005356 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80090b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20002134 	.word	0x20002134

080090c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80090d8:	4b0d      	ldr	r3, [pc, #52]	; (8009110 <CDC_Transmit_FS+0x48>)
 80090da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e00b      	b.n	8009106 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80090ee:	887b      	ldrh	r3, [r7, #2]
 80090f0:	461a      	mov	r2, r3
 80090f2:	6879      	ldr	r1, [r7, #4]
 80090f4:	4806      	ldr	r0, [pc, #24]	; (8009110 <CDC_Transmit_FS+0x48>)
 80090f6:	f7fc f8d3 	bl	80052a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80090fa:	4805      	ldr	r0, [pc, #20]	; (8009110 <CDC_Transmit_FS+0x48>)
 80090fc:	f7fc f8fc 	bl	80052f8 <USBD_CDC_TransmitPacket>
 8009100:	4603      	mov	r3, r0
 8009102:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009104:	7bfb      	ldrb	r3, [r7, #15]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20002134 	.word	0x20002134

08009114 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	4603      	mov	r3, r0
 800911c:	6039      	str	r1, [r7, #0]
 800911e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2212      	movs	r2, #18
 8009124:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009126:	4b03      	ldr	r3, [pc, #12]	; (8009134 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	bc80      	pop	{r7}
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	2000014c 	.word	0x2000014c

08009138 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	4603      	mov	r3, r0
 8009140:	6039      	str	r1, [r7, #0]
 8009142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2204      	movs	r2, #4
 8009148:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800914a:	4b03      	ldr	r3, [pc, #12]	; (8009158 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800914c:	4618      	mov	r0, r3
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	bc80      	pop	{r7}
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	20000160 	.word	0x20000160

0800915c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	4603      	mov	r3, r0
 8009164:	6039      	str	r1, [r7, #0]
 8009166:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009168:	79fb      	ldrb	r3, [r7, #7]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d105      	bne.n	800917a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	4907      	ldr	r1, [pc, #28]	; (8009190 <USBD_FS_ProductStrDescriptor+0x34>)
 8009172:	4808      	ldr	r0, [pc, #32]	; (8009194 <USBD_FS_ProductStrDescriptor+0x38>)
 8009174:	f7fd f8c9 	bl	800630a <USBD_GetString>
 8009178:	e004      	b.n	8009184 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	4904      	ldr	r1, [pc, #16]	; (8009190 <USBD_FS_ProductStrDescriptor+0x34>)
 800917e:	4805      	ldr	r0, [pc, #20]	; (8009194 <USBD_FS_ProductStrDescriptor+0x38>)
 8009180:	f7fd f8c3 	bl	800630a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009184:	4b02      	ldr	r3, [pc, #8]	; (8009190 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20002478 	.word	0x20002478
 8009194:	08009a1c 	.word	0x08009a1c

08009198 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	6039      	str	r1, [r7, #0]
 80091a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	4904      	ldr	r1, [pc, #16]	; (80091b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80091a8:	4804      	ldr	r0, [pc, #16]	; (80091bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091aa:	f7fd f8ae 	bl	800630a <USBD_GetString>
  return USBD_StrDesc;
 80091ae:	4b02      	ldr	r3, [pc, #8]	; (80091b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20002478 	.word	0x20002478
 80091bc:	08009a34 	.word	0x08009a34

080091c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	4603      	mov	r3, r0
 80091c8:	6039      	str	r1, [r7, #0]
 80091ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	221a      	movs	r2, #26
 80091d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091d2:	f000 f843 	bl	800925c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091d6:	4b02      	ldr	r3, [pc, #8]	; (80091e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20000164 	.word	0x20000164

080091e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	4603      	mov	r3, r0
 80091ec:	6039      	str	r1, [r7, #0]
 80091ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d105      	bne.n	8009202 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	4907      	ldr	r1, [pc, #28]	; (8009218 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091fa:	4808      	ldr	r0, [pc, #32]	; (800921c <USBD_FS_ConfigStrDescriptor+0x38>)
 80091fc:	f7fd f885 	bl	800630a <USBD_GetString>
 8009200:	e004      	b.n	800920c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	4904      	ldr	r1, [pc, #16]	; (8009218 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009206:	4805      	ldr	r0, [pc, #20]	; (800921c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009208:	f7fd f87f 	bl	800630a <USBD_GetString>
  }
  return USBD_StrDesc;
 800920c:	4b02      	ldr	r3, [pc, #8]	; (8009218 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20002478 	.word	0x20002478
 800921c:	08009a48 	.word	0x08009a48

08009220 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	6039      	str	r1, [r7, #0]
 800922a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d105      	bne.n	800923e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	4907      	ldr	r1, [pc, #28]	; (8009254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009236:	4808      	ldr	r0, [pc, #32]	; (8009258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009238:	f7fd f867 	bl	800630a <USBD_GetString>
 800923c:	e004      	b.n	8009248 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	4904      	ldr	r1, [pc, #16]	; (8009254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009242:	4805      	ldr	r0, [pc, #20]	; (8009258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009244:	f7fd f861 	bl	800630a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009248:	4b02      	ldr	r3, [pc, #8]	; (8009254 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20002478 	.word	0x20002478
 8009258:	08009a54 	.word	0x08009a54

0800925c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009262:	4b0f      	ldr	r3, [pc, #60]	; (80092a0 <Get_SerialNum+0x44>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009268:	4b0e      	ldr	r3, [pc, #56]	; (80092a4 <Get_SerialNum+0x48>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800926e:	4b0e      	ldr	r3, [pc, #56]	; (80092a8 <Get_SerialNum+0x4c>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4413      	add	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d009      	beq.n	8009296 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009282:	2208      	movs	r2, #8
 8009284:	4909      	ldr	r1, [pc, #36]	; (80092ac <Get_SerialNum+0x50>)
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 f814 	bl	80092b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800928c:	2204      	movs	r2, #4
 800928e:	4908      	ldr	r1, [pc, #32]	; (80092b0 <Get_SerialNum+0x54>)
 8009290:	68b8      	ldr	r0, [r7, #8]
 8009292:	f000 f80f 	bl	80092b4 <IntToUnicode>
  }
}
 8009296:	bf00      	nop
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	1ffff7e8 	.word	0x1ffff7e8
 80092a4:	1ffff7ec 	.word	0x1ffff7ec
 80092a8:	1ffff7f0 	.word	0x1ffff7f0
 80092ac:	20000166 	.word	0x20000166
 80092b0:	20000176 	.word	0x20000176

080092b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b087      	sub	sp, #28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	4613      	mov	r3, r2
 80092c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80092c6:	2300      	movs	r3, #0
 80092c8:	75fb      	strb	r3, [r7, #23]
 80092ca:	e027      	b.n	800931c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	0f1b      	lsrs	r3, r3, #28
 80092d0:	2b09      	cmp	r3, #9
 80092d2:	d80b      	bhi.n	80092ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	0f1b      	lsrs	r3, r3, #28
 80092d8:	b2da      	uxtb	r2, r3
 80092da:	7dfb      	ldrb	r3, [r7, #23]
 80092dc:	005b      	lsls	r3, r3, #1
 80092de:	4619      	mov	r1, r3
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	440b      	add	r3, r1
 80092e4:	3230      	adds	r2, #48	; 0x30
 80092e6:	b2d2      	uxtb	r2, r2
 80092e8:	701a      	strb	r2, [r3, #0]
 80092ea:	e00a      	b.n	8009302 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	0f1b      	lsrs	r3, r3, #28
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	7dfb      	ldrb	r3, [r7, #23]
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	4619      	mov	r1, r3
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	440b      	add	r3, r1
 80092fc:	3237      	adds	r2, #55	; 0x37
 80092fe:	b2d2      	uxtb	r2, r2
 8009300:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	011b      	lsls	r3, r3, #4
 8009306:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009308:	7dfb      	ldrb	r3, [r7, #23]
 800930a:	005b      	lsls	r3, r3, #1
 800930c:	3301      	adds	r3, #1
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	4413      	add	r3, r2
 8009312:	2200      	movs	r2, #0
 8009314:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009316:	7dfb      	ldrb	r3, [r7, #23]
 8009318:	3301      	adds	r3, #1
 800931a:	75fb      	strb	r3, [r7, #23]
 800931c:	7dfa      	ldrb	r2, [r7, #23]
 800931e:	79fb      	ldrb	r3, [r7, #7]
 8009320:	429a      	cmp	r2, r3
 8009322:	d3d3      	bcc.n	80092cc <IntToUnicode+0x18>
  }
}
 8009324:	bf00      	nop
 8009326:	371c      	adds	r7, #28
 8009328:	46bd      	mov	sp, r7
 800932a:	bc80      	pop	{r7}
 800932c:	4770      	bx	lr
	...

08009330 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a0d      	ldr	r2, [pc, #52]	; (8009374 <HAL_PCD_MspInit+0x44>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d113      	bne.n	800936a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009342:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <HAL_PCD_MspInit+0x48>)
 8009344:	69db      	ldr	r3, [r3, #28]
 8009346:	4a0c      	ldr	r2, [pc, #48]	; (8009378 <HAL_PCD_MspInit+0x48>)
 8009348:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800934c:	61d3      	str	r3, [r2, #28]
 800934e:	4b0a      	ldr	r3, [pc, #40]	; (8009378 <HAL_PCD_MspInit+0x48>)
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009356:	60fb      	str	r3, [r7, #12]
 8009358:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800935a:	2200      	movs	r2, #0
 800935c:	2105      	movs	r1, #5
 800935e:	2014      	movs	r0, #20
 8009360:	f7f7 fab9 	bl	80008d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009364:	2014      	movs	r0, #20
 8009366:	f7f7 fad2 	bl	800090e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800936a:	bf00      	nop
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	40005c00 	.word	0x40005c00
 8009378:	40021000 	.word	0x40021000

0800937c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009390:	4619      	mov	r1, r3
 8009392:	4610      	mov	r0, r2
 8009394:	f7fc f895 	bl	80054c2 <USBD_LL_SetupStage>
}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	460b      	mov	r3, r1
 80093aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80093b2:	78fa      	ldrb	r2, [r7, #3]
 80093b4:	6879      	ldr	r1, [r7, #4]
 80093b6:	4613      	mov	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	00db      	lsls	r3, r3, #3
 80093be:	440b      	add	r3, r1
 80093c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	78fb      	ldrb	r3, [r7, #3]
 80093c8:	4619      	mov	r1, r3
 80093ca:	f7fc f8c5 	bl	8005558 <USBD_LL_DataOutStage>
}
 80093ce:	bf00      	nop
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b082      	sub	sp, #8
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80093e8:	78fa      	ldrb	r2, [r7, #3]
 80093ea:	6879      	ldr	r1, [r7, #4]
 80093ec:	4613      	mov	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	00db      	lsls	r3, r3, #3
 80093f4:	440b      	add	r3, r1
 80093f6:	333c      	adds	r3, #60	; 0x3c
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	78fb      	ldrb	r3, [r7, #3]
 80093fc:	4619      	mov	r1, r3
 80093fe:	f7fc f91c 	bl	800563a <USBD_LL_DataInStage>
}
 8009402:	bf00      	nop
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009418:	4618      	mov	r0, r3
 800941a:	f7fc fa2c 	bl	8005876 <USBD_LL_SOF>
}
 800941e:	bf00      	nop
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800942e:	2301      	movs	r3, #1
 8009430:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	2b02      	cmp	r3, #2
 8009438:	d001      	beq.n	800943e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800943a:	f7f7 f87f 	bl	800053c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009444:	7bfa      	ldrb	r2, [r7, #15]
 8009446:	4611      	mov	r1, r2
 8009448:	4618      	mov	r0, r3
 800944a:	f7fc f9dc 	bl	8005806 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009454:	4618      	mov	r0, r3
 8009456:	f7fc f995 	bl	8005784 <USBD_LL_Reset>
}
 800945a:	bf00      	nop
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
	...

08009464 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009472:	4618      	mov	r0, r3
 8009474:	f7fc f9d6 	bl	8005824 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d005      	beq.n	800948c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009480:	4b04      	ldr	r3, [pc, #16]	; (8009494 <HAL_PCD_SuspendCallback+0x30>)
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	4a03      	ldr	r2, [pc, #12]	; (8009494 <HAL_PCD_SuspendCallback+0x30>)
 8009486:	f043 0306 	orr.w	r3, r3, #6
 800948a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800948c:	bf00      	nop
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	e000ed00 	.word	0xe000ed00

08009498 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fc f9d0 	bl	800584c <USBD_LL_Resume>
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80094bc:	4a28      	ldr	r2, [pc, #160]	; (8009560 <USBD_LL_Init+0xac>)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a26      	ldr	r2, [pc, #152]	; (8009560 <USBD_LL_Init+0xac>)
 80094c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80094cc:	4b24      	ldr	r3, [pc, #144]	; (8009560 <USBD_LL_Init+0xac>)
 80094ce:	4a25      	ldr	r2, [pc, #148]	; (8009564 <USBD_LL_Init+0xb0>)
 80094d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80094d2:	4b23      	ldr	r3, [pc, #140]	; (8009560 <USBD_LL_Init+0xac>)
 80094d4:	2208      	movs	r2, #8
 80094d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80094d8:	4b21      	ldr	r3, [pc, #132]	; (8009560 <USBD_LL_Init+0xac>)
 80094da:	2202      	movs	r2, #2
 80094dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80094de:	4b20      	ldr	r3, [pc, #128]	; (8009560 <USBD_LL_Init+0xac>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80094e4:	4b1e      	ldr	r3, [pc, #120]	; (8009560 <USBD_LL_Init+0xac>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80094ea:	4b1d      	ldr	r3, [pc, #116]	; (8009560 <USBD_LL_Init+0xac>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80094f0:	481b      	ldr	r0, [pc, #108]	; (8009560 <USBD_LL_Init+0xac>)
 80094f2:	f7f7 fbb2 	bl	8000c5a <HAL_PCD_Init>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80094fc:	f7f7 f81e 	bl	800053c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009506:	2318      	movs	r3, #24
 8009508:	2200      	movs	r2, #0
 800950a:	2100      	movs	r1, #0
 800950c:	f7f8 fee6 	bl	80022dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009516:	2358      	movs	r3, #88	; 0x58
 8009518:	2200      	movs	r2, #0
 800951a:	2180      	movs	r1, #128	; 0x80
 800951c:	f7f8 fede 	bl	80022dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009526:	23c0      	movs	r3, #192	; 0xc0
 8009528:	2200      	movs	r2, #0
 800952a:	2181      	movs	r1, #129	; 0x81
 800952c:	f7f8 fed6 	bl	80022dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009536:	f44f 7388 	mov.w	r3, #272	; 0x110
 800953a:	2200      	movs	r2, #0
 800953c:	2101      	movs	r1, #1
 800953e:	f7f8 fecd 	bl	80022dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800954c:	2200      	movs	r2, #0
 800954e:	2182      	movs	r1, #130	; 0x82
 8009550:	f7f8 fec4 	bl	80022dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20002678 	.word	0x20002678
 8009564:	40005c00 	.word	0x40005c00

08009568 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800957e:	4618      	mov	r0, r3
 8009580:	f7f7 fc76 	bl	8000e70 <HAL_PCD_Start>
 8009584:	4603      	mov	r3, r0
 8009586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	4618      	mov	r0, r3
 800958c:	f000 f94e 	bl	800982c <USBD_Get_USB_Status>
 8009590:	4603      	mov	r3, r0
 8009592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009594:	7bbb      	ldrb	r3, [r7, #14]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	4608      	mov	r0, r1
 80095a8:	4611      	mov	r1, r2
 80095aa:	461a      	mov	r2, r3
 80095ac:	4603      	mov	r3, r0
 80095ae:	70fb      	strb	r3, [r7, #3]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70bb      	strb	r3, [r7, #2]
 80095b4:	4613      	mov	r3, r2
 80095b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095c6:	78bb      	ldrb	r3, [r7, #2]
 80095c8:	883a      	ldrh	r2, [r7, #0]
 80095ca:	78f9      	ldrb	r1, [r7, #3]
 80095cc:	f7f7 fdf0 	bl	80011b0 <HAL_PCD_EP_Open>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 f928 	bl	800982c <USBD_Get_USB_Status>
 80095dc:	4603      	mov	r3, r0
 80095de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009604:	78fa      	ldrb	r2, [r7, #3]
 8009606:	4611      	mov	r1, r2
 8009608:	4618      	mov	r0, r3
 800960a:	f7f7 fe37 	bl	800127c <HAL_PCD_EP_Close>
 800960e:	4603      	mov	r3, r0
 8009610:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	4618      	mov	r0, r3
 8009616:	f000 f909 	bl	800982c <USBD_Get_USB_Status>
 800961a:	4603      	mov	r3, r0
 800961c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800961e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009638:	2300      	movs	r3, #0
 800963a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009642:	78fa      	ldrb	r2, [r7, #3]
 8009644:	4611      	mov	r1, r2
 8009646:	4618      	mov	r0, r3
 8009648:	f7f7 fef7 	bl	800143a <HAL_PCD_EP_SetStall>
 800964c:	4603      	mov	r3, r0
 800964e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009650:	7bfb      	ldrb	r3, [r7, #15]
 8009652:	4618      	mov	r0, r3
 8009654:	f000 f8ea 	bl	800982c <USBD_Get_USB_Status>
 8009658:	4603      	mov	r3, r0
 800965a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800965c:	7bbb      	ldrb	r3, [r7, #14]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	460b      	mov	r3, r1
 8009670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009680:	78fa      	ldrb	r2, [r7, #3]
 8009682:	4611      	mov	r1, r2
 8009684:	4618      	mov	r0, r3
 8009686:	f7f7 ff38 	bl	80014fa <HAL_PCD_EP_ClrStall>
 800968a:	4603      	mov	r3, r0
 800968c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800968e:	7bfb      	ldrb	r3, [r7, #15]
 8009690:	4618      	mov	r0, r3
 8009692:	f000 f8cb 	bl	800982c <USBD_Get_USB_Status>
 8009696:	4603      	mov	r3, r0
 8009698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800969a:	7bbb      	ldrb	r3, [r7, #14]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	da0c      	bge.n	80096da <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096c0:	78fb      	ldrb	r3, [r7, #3]
 80096c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096c6:	68f9      	ldr	r1, [r7, #12]
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	4613      	mov	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	00db      	lsls	r3, r3, #3
 80096d2:	440b      	add	r3, r1
 80096d4:	3302      	adds	r3, #2
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	e00b      	b.n	80096f2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096da:	78fb      	ldrb	r3, [r7, #3]
 80096dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096e0:	68f9      	ldr	r1, [r7, #12]
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	00db      	lsls	r3, r3, #3
 80096ea:	440b      	add	r3, r1
 80096ec:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80096f0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bc80      	pop	{r7}
 80096fa:	4770      	bx	lr

080096fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	460b      	mov	r3, r1
 8009706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009716:	78fa      	ldrb	r2, [r7, #3]
 8009718:	4611      	mov	r1, r2
 800971a:	4618      	mov	r0, r3
 800971c:	f7f7 fd23 	bl	8001166 <HAL_PCD_SetAddress>
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 f880 	bl	800982c <USBD_Get_USB_Status>
 800972c:	4603      	mov	r3, r0
 800972e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009730:	7bbb      	ldrb	r3, [r7, #14]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b086      	sub	sp, #24
 800973e:	af00      	add	r7, sp, #0
 8009740:	60f8      	str	r0, [r7, #12]
 8009742:	607a      	str	r2, [r7, #4]
 8009744:	461a      	mov	r2, r3
 8009746:	460b      	mov	r3, r1
 8009748:	72fb      	strb	r3, [r7, #11]
 800974a:	4613      	mov	r3, r2
 800974c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800975c:	893b      	ldrh	r3, [r7, #8]
 800975e:	7af9      	ldrb	r1, [r7, #11]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	f7f7 fe27 	bl	80013b4 <HAL_PCD_EP_Transmit>
 8009766:	4603      	mov	r3, r0
 8009768:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	4618      	mov	r0, r3
 800976e:	f000 f85d 	bl	800982c <USBD_Get_USB_Status>
 8009772:	4603      	mov	r3, r0
 8009774:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009776:	7dbb      	ldrb	r3, [r7, #22]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	607a      	str	r2, [r7, #4]
 800978a:	461a      	mov	r2, r3
 800978c:	460b      	mov	r3, r1
 800978e:	72fb      	strb	r3, [r7, #11]
 8009790:	4613      	mov	r3, r2
 8009792:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097a2:	893b      	ldrh	r3, [r7, #8]
 80097a4:	7af9      	ldrb	r1, [r7, #11]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	f7f7 fdb0 	bl	800130c <HAL_PCD_EP_Receive>
 80097ac:	4603      	mov	r3, r0
 80097ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b0:	7dfb      	ldrb	r3, [r7, #23]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 f83a 	bl	800982c <USBD_Get_USB_Status>
 80097b8:	4603      	mov	r3, r0
 80097ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	460b      	mov	r3, r1
 80097d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097d8:	78fa      	ldrb	r2, [r7, #3]
 80097da:	4611      	mov	r1, r2
 80097dc:	4618      	mov	r0, r3
 80097de:	f7f7 fdd2 	bl	8001386 <HAL_PCD_EP_GetRxCount>
 80097e2:	4603      	mov	r3, r0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097f4:	4b02      	ldr	r3, [pc, #8]	; (8009800 <USBD_static_malloc+0x14>)
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bc80      	pop	{r7}
 80097fe:	4770      	bx	lr
 8009800:	20001ea8 	.word	0x20001ea8

08009804 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]

}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	bc80      	pop	{r7}
 8009814:	4770      	bx	lr

08009816 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	460b      	mov	r3, r1
 8009820:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009822:	bf00      	nop
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	bc80      	pop	{r7}
 800982a:	4770      	bx	lr

0800982c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	2b03      	cmp	r3, #3
 800983e:	d817      	bhi.n	8009870 <USBD_Get_USB_Status+0x44>
 8009840:	a201      	add	r2, pc, #4	; (adr r2, 8009848 <USBD_Get_USB_Status+0x1c>)
 8009842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009846:	bf00      	nop
 8009848:	08009859 	.word	0x08009859
 800984c:	0800985f 	.word	0x0800985f
 8009850:	08009865 	.word	0x08009865
 8009854:	0800986b 	.word	0x0800986b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73fb      	strb	r3, [r7, #15]
    break;
 800985c:	e00b      	b.n	8009876 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800985e:	2302      	movs	r3, #2
 8009860:	73fb      	strb	r3, [r7, #15]
    break;
 8009862:	e008      	b.n	8009876 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009864:	2301      	movs	r3, #1
 8009866:	73fb      	strb	r3, [r7, #15]
    break;
 8009868:	e005      	b.n	8009876 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800986a:	2302      	movs	r3, #2
 800986c:	73fb      	strb	r3, [r7, #15]
    break;
 800986e:	e002      	b.n	8009876 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009870:	2302      	movs	r3, #2
 8009872:	73fb      	strb	r3, [r7, #15]
    break;
 8009874:	bf00      	nop
  }
  return usb_status;
 8009876:	7bfb      	ldrb	r3, [r7, #15]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	bc80      	pop	{r7}
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop

08009884 <__libc_init_array>:
 8009884:	b570      	push	{r4, r5, r6, lr}
 8009886:	2500      	movs	r5, #0
 8009888:	4e0c      	ldr	r6, [pc, #48]	; (80098bc <__libc_init_array+0x38>)
 800988a:	4c0d      	ldr	r4, [pc, #52]	; (80098c0 <__libc_init_array+0x3c>)
 800988c:	1ba4      	subs	r4, r4, r6
 800988e:	10a4      	asrs	r4, r4, #2
 8009890:	42a5      	cmp	r5, r4
 8009892:	d109      	bne.n	80098a8 <__libc_init_array+0x24>
 8009894:	f000 f82e 	bl	80098f4 <_init>
 8009898:	2500      	movs	r5, #0
 800989a:	4e0a      	ldr	r6, [pc, #40]	; (80098c4 <__libc_init_array+0x40>)
 800989c:	4c0a      	ldr	r4, [pc, #40]	; (80098c8 <__libc_init_array+0x44>)
 800989e:	1ba4      	subs	r4, r4, r6
 80098a0:	10a4      	asrs	r4, r4, #2
 80098a2:	42a5      	cmp	r5, r4
 80098a4:	d105      	bne.n	80098b2 <__libc_init_array+0x2e>
 80098a6:	bd70      	pop	{r4, r5, r6, pc}
 80098a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098ac:	4798      	blx	r3
 80098ae:	3501      	adds	r5, #1
 80098b0:	e7ee      	b.n	8009890 <__libc_init_array+0xc>
 80098b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098b6:	4798      	blx	r3
 80098b8:	3501      	adds	r5, #1
 80098ba:	e7f2      	b.n	80098a2 <__libc_init_array+0x1e>
 80098bc:	08009a98 	.word	0x08009a98
 80098c0:	08009a98 	.word	0x08009a98
 80098c4:	08009a98 	.word	0x08009a98
 80098c8:	08009a9c 	.word	0x08009a9c

080098cc <memcpy>:
 80098cc:	b510      	push	{r4, lr}
 80098ce:	1e43      	subs	r3, r0, #1
 80098d0:	440a      	add	r2, r1
 80098d2:	4291      	cmp	r1, r2
 80098d4:	d100      	bne.n	80098d8 <memcpy+0xc>
 80098d6:	bd10      	pop	{r4, pc}
 80098d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098e0:	e7f7      	b.n	80098d2 <memcpy+0x6>

080098e2 <memset>:
 80098e2:	4603      	mov	r3, r0
 80098e4:	4402      	add	r2, r0
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d100      	bne.n	80098ec <memset+0xa>
 80098ea:	4770      	bx	lr
 80098ec:	f803 1b01 	strb.w	r1, [r3], #1
 80098f0:	e7f9      	b.n	80098e6 <memset+0x4>
	...

080098f4 <_init>:
 80098f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f6:	bf00      	nop
 80098f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098fa:	bc08      	pop	{r3}
 80098fc:	469e      	mov	lr, r3
 80098fe:	4770      	bx	lr

08009900 <_fini>:
 8009900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009902:	bf00      	nop
 8009904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009906:	bc08      	pop	{r3}
 8009908:	469e      	mov	lr, r3
 800990a:	4770      	bx	lr
