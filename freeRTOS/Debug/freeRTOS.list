
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000954c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800965c  0800965c  0001965c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009734  08009734  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009734  08009734  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009734  08009734  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009734  08009734  00019734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009738  08009738  00019738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800973c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023d8  20000180  080098bc  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002558  080098bc  00022558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d22a  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e98  00000000  00000000  0003d3d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  00041270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001030  00000000  00000000  00042478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b4ea  00000000  00000000  000434a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013173  00000000  00000000  0005e992  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e455  00000000  00000000  00071b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fff5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004780  00000000  00000000  000fffd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08009644 	.word	0x08009644

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08009644 	.word	0x08009644

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <PCB_Init>:

//#include "FreeRTOS.h"
//#include "task.h"

void PCB_Init()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016a:	4802      	ldr	r0, [pc, #8]	; (8000174 <PCB_Init+0x14>)
 800016c:	f000 fc9c 	bl	8000aa8 <HAL_GPIO_WritePin>
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}
 8000174:	40011000 	.word	0x40011000

08000178 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800017c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000180:	4802      	ldr	r0, [pc, #8]	; (800018c <PCB_LED_Toggle+0x14>)
 8000182:	f000 fca9 	bl	8000ad8 <HAL_GPIO_TogglePin>
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40011000 	.word	0x40011000

08000190 <freeRTOS_Tasks_Ini>:

#include "FreeRTOS.h"
#include "task.h"

void freeRTOS_Tasks_Ini (void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_PCB_LED_Toggle, "Task_PCB_LED_Toggle", 40, NULL, 1, NULL); // Название задачи (функции), Название задачи для отладки, размер стекка задачи,
 8000196:	2300      	movs	r3, #0
 8000198:	9301      	str	r3, [sp, #4]
 800019a:	2301      	movs	r3, #1
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2300      	movs	r3, #0
 80001a0:	2228      	movs	r2, #40	; 0x28
 80001a2:	4903      	ldr	r1, [pc, #12]	; (80001b0 <freeRTOS_Tasks_Ini+0x20>)
 80001a4:	4803      	ldr	r0, [pc, #12]	; (80001b4 <freeRTOS_Tasks_Ini+0x24>)
 80001a6:	f007 f832 	bl	800720e <xTaskCreate>
																				  // параметры передаваемые в задачу, приоритет, хэндл (ссылка) на задачу.
}
 80001aa:	bf00      	nop
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	0800965c 	.word	0x0800965c
 80001b4:	080001b9 	.word	0x080001b9

080001b8 <vTask_PCB_LED_Toggle>:



void vTask_PCB_LED_Toggle(void *pvParameters)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]

	for(;;)
	{
	PCB_LED_Toggle();
 80001c0:	f7ff ffda 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(250);
 80001c4:	20fa      	movs	r0, #250	; 0xfa
 80001c6:	f007 f95d 	bl	8007484 <vTaskDelay>
	PCB_LED_Toggle();
 80001ca:	f7ff ffd5 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(250);
 80001ce:	20fa      	movs	r0, #250	; 0xfa
 80001d0:	f007 f958 	bl	8007484 <vTaskDelay>
	PCB_LED_Toggle();
 80001d4:	e7f4      	b.n	80001c0 <vTask_PCB_LED_Toggle+0x8>
	...

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 f99a 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f816 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e4:	f000 f86e 	bl	80002c4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e8:	f006 f8c4 	bl	8006374 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001ec:	4a05      	ldr	r2, [pc, #20]	; (8000204 <main+0x2c>)
 80001ee:	2100      	movs	r1, #0
 80001f0:	4805      	ldr	r0, [pc, #20]	; (8000208 <main+0x30>)
 80001f2:	f006 f925 	bl	8006440 <osThreadNew>
 80001f6:	4602      	mov	r2, r0
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <main+0x34>)
 80001fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001fc:	f006 f8ec 	bl	80063d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000200:	e7fe      	b.n	8000200 <main+0x28>
 8000202:	bf00      	nop
 8000204:	08009700 	.word	0x08009700
 8000208:	0800035d 	.word	0x0800035d
 800020c:	20001cc8 	.word	0x20001cc8

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b094      	sub	sp, #80	; 0x50
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f009 fa07 	bl	8009632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	f107 0314 	add.w	r3, r7, #20
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000240:	2301      	movs	r3, #1
 8000242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000248:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000260:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000266:	4618      	mov	r0, r3
 8000268:	f001 ffd2 	bl	8002210 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000272:	f000 f8bb 	bl	80003ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000286:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028c:	f107 0314 	add.w	r3, r7, #20
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f002 fa3c 	bl	8002710 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800029e:	f000 f8a5 	bl	80003ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002a2:	2310      	movs	r3, #16
 80002a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f002 fb99 	bl	80029e4 <HAL_RCCEx_PeriphCLKConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002b8:	f000 f898 	bl	80003ec <Error_Handler>
  }
}
 80002bc:	bf00      	nop
 80002be:	3750      	adds	r7, #80	; 0x50
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	f107 0310 	add.w	r3, r7, #16
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d8:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <MX_GPIO_Init+0x90>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a1d      	ldr	r2, [pc, #116]	; (8000354 <MX_GPIO_Init+0x90>)
 80002de:	f043 0310 	orr.w	r3, r3, #16
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <MX_GPIO_Init+0x90>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0310 	and.w	r3, r3, #16
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <MX_GPIO_Init+0x90>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a17      	ldr	r2, [pc, #92]	; (8000354 <MX_GPIO_Init+0x90>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0320 	and.w	r3, r3, #32
 8000304:	60bb      	str	r3, [r7, #8]
 8000306:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <MX_GPIO_Init+0x90>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a11      	ldr	r2, [pc, #68]	; (8000354 <MX_GPIO_Init+0x90>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_GPIO_Init+0x90>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0304 	and.w	r3, r3, #4
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	480c      	ldr	r0, [pc, #48]	; (8000358 <MX_GPIO_Init+0x94>)
 8000328:	f000 fbbe 	bl	8000aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800032c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	2301      	movs	r3, #1
 8000334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033a:	2302      	movs	r3, #2
 800033c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	4619      	mov	r1, r3
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_GPIO_Init+0x94>)
 8000346:	f000 fa55 	bl	80007f4 <HAL_GPIO_Init>

}
 800034a:	bf00      	nop
 800034c:	3720      	adds	r7, #32
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000
 8000358:	40011000 	.word	0x40011000

0800035c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800035c:	b590      	push	{r4, r7, lr}
 800035e:	b087      	sub	sp, #28
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */

	sprintf(USB_Tx_Buf, "Hi from VCP\r\n");
 8000364:	4a1e      	ldr	r2, [pc, #120]	; (80003e0 <StartDefaultTask+0x84>)
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <StartDefaultTask+0x88>)
 8000368:	4614      	mov	r4, r2
 800036a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800036c:	6020      	str	r0, [r4, #0]
 800036e:	6061      	str	r1, [r4, #4]
 8000370:	60a2      	str	r2, [r4, #8]
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	81a3      	strh	r3, [r4, #12]

	//-------------------------------------------------------------------------------------------------------------------
	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000388:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000392:	2302      	movs	r3, #2
 8000394:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000396:	f107 0308 	add.w	r3, r7, #8
 800039a:	4619      	mov	r1, r3
 800039c:	4812      	ldr	r0, [pc, #72]	; (80003e8 <StartDefaultTask+0x8c>)
 800039e:	f000 fa29 	bl	80007f4 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003a8:	480f      	ldr	r0, [pc, #60]	; (80003e8 <StartDefaultTask+0x8c>)
 80003aa:	f000 fb7d 	bl	8000aa8 <HAL_GPIO_WritePin>

	  osDelay(2000);
 80003ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003b2:	f006 f8ef 	bl	8006594 <osDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 80003b6:	f008 fc71 	bl	8008c9c <MX_USB_DEVICE_Init>

	  //-------------------------------------------------------------------------------------------------------------------

  PCB_Init();
 80003ba:	f7ff fed1 	bl	8000160 <PCB_Init>
  freeRTOS_Tasks_Ini();
 80003be:	f7ff fee7 	bl	8000190 <freeRTOS_Tasks_Ini>

  /* Infinite loop */
  for(;;)
  {
//	  PCB_LED_Toggle();
	  CDC_Transmit_FS((unsigned char*)USB_Tx_Buf, strlen(USB_Tx_Buf));
 80003c2:	4807      	ldr	r0, [pc, #28]	; (80003e0 <StartDefaultTask+0x84>)
 80003c4:	f7ff fec4 	bl	8000150 <strlen>
 80003c8:	4603      	mov	r3, r0
 80003ca:	b29b      	uxth	r3, r3
 80003cc:	4619      	mov	r1, r3
 80003ce:	4804      	ldr	r0, [pc, #16]	; (80003e0 <StartDefaultTask+0x84>)
 80003d0:	f008 fd22 	bl	8008e18 <CDC_Transmit_FS>
	  osDelay(500);
 80003d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003d8:	f006 f8dc 	bl	8006594 <osDelay>
	  CDC_Transmit_FS((unsigned char*)USB_Tx_Buf, strlen(USB_Tx_Buf));
 80003dc:	e7f1      	b.n	80003c2 <StartDefaultTask+0x66>
 80003de:	bf00      	nop
 80003e0:	20001ccc 	.word	0x20001ccc
 80003e4:	0800967c 	.word	0x0800967c
 80003e8:	40010800 	.word	0x40010800

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <Error_Handler+0x6>

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b18      	ldr	r3, [pc, #96]	; (800045c <HAL_MspInit+0x68>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a17      	ldr	r2, [pc, #92]	; (800045c <HAL_MspInit+0x68>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b15      	ldr	r3, [pc, #84]	; (800045c <HAL_MspInit+0x68>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <HAL_MspInit+0x68>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a11      	ldr	r2, [pc, #68]	; (800045c <HAL_MspInit+0x68>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <HAL_MspInit+0x68>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	210f      	movs	r1, #15
 800042e:	f06f 0001 	mvn.w	r0, #1
 8000432:	f000 f9a8 	bl	8000786 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <HAL_MspInit+0x6c>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	4a04      	ldr	r2, [pc, #16]	; (8000460 <HAL_MspInit+0x6c>)
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000452:	bf00      	nop
 8000454:	3710      	adds	r7, #16
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000
 8000460:	40010000 	.word	0x40010000

08000464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <NMI_Handler+0x4>

0800046a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <HardFault_Handler+0x4>

08000470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <MemManage_Handler+0x4>

08000476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047a:	e7fe      	b.n	800047a <BusFault_Handler+0x4>

0800047c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <UsageFault_Handler+0x4>

08000482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000492:	f000 f885 	bl	80005a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000496:	f007 fc67 	bl	8007d68 <xTaskGetSchedulerState>
 800049a:	4603      	mov	r3, r0
 800049c:	2b01      	cmp	r3, #1
 800049e:	d001      	beq.n	80004a4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004a0:	f008 f9aa 	bl	80087f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004ae:	f000 fc5d 	bl	8000d6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	2000226c 	.word	0x2000226c

080004bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004ca:	e003      	b.n	80004d4 <LoopCopyDataInit>

080004cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004d2:	3104      	adds	r1, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004d4:	480a      	ldr	r0, [pc, #40]	; (8000500 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004dc:	d3f6      	bcc.n	80004cc <CopyDataInit>
  ldr r2, =_sbss
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004e0:	e002      	b.n	80004e8 <LoopFillZerobss>

080004e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004e4:	f842 3b04 	str.w	r3, [r2], #4

080004e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004ec:	d3f9      	bcc.n	80004e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004ee:	f7ff ffe5 	bl	80004bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004f2:	f009 f86f 	bl	80095d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f6:	f7ff fe6f 	bl	80001d8 <main>
  bx lr
 80004fa:	4770      	bx	lr
  ldr r3, =_sidata
 80004fc:	0800973c 	.word	0x0800973c
  ldr r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000504:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000508:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 800050c:	20002558 	.word	0x20002558

08000510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC1_2_IRQHandler>
	...

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x28>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_Init+0x28>)
 800051e:	f043 0310 	orr.w	r3, r3, #16
 8000522:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f923 	bl	8000770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	200f      	movs	r0, #15
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f7ff ff60 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40022000 	.word	0x40022000

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f93b 	bl	80007da <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 f903 	bl	8000786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000000 	.word	0x20000000
 8000598:	20000008 	.word	0x20000008
 800059c:	20000004 	.word	0x20000004

080005a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_IncTick+0x1c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_IncTick+0x20>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <HAL_IncTick+0x20>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	20000008 	.word	0x20000008
 80005c0:	20001ce4 	.word	0x20001ce4

080005c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return uwTick;
 80005c8:	4b02      	ldr	r3, [pc, #8]	; (80005d4 <HAL_GetTick+0x10>)
 80005ca:	681b      	ldr	r3, [r3, #0]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	20001ce4 	.word	0x20001ce4

080005d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <__NVIC_SetPriorityGrouping+0x44>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f4:	4013      	ands	r3, r2
 80005f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060a:	4a04      	ldr	r2, [pc, #16]	; (800061c <__NVIC_SetPriorityGrouping+0x44>)
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	60d3      	str	r3, [r2, #12]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	bc80      	pop	{r7}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <__NVIC_GetPriorityGrouping+0x18>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	0a1b      	lsrs	r3, r3, #8
 800062a:	f003 0307 	and.w	r3, r3, #7
}
 800062e:	4618      	mov	r0, r3
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	2b00      	cmp	r3, #0
 800064c:	db0b      	blt.n	8000666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 021f 	and.w	r2, r3, #31
 8000654:	4906      	ldr	r1, [pc, #24]	; (8000670 <__NVIC_EnableIRQ+0x34>)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	095b      	lsrs	r3, r3, #5
 800065c:	2001      	movs	r0, #1
 800065e:	fa00 f202 	lsl.w	r2, r0, r2
 8000662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	e000e100 	.word	0xe000e100

08000674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	6039      	str	r1, [r7, #0]
 800067e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	db0a      	blt.n	800069e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	b2da      	uxtb	r2, r3
 800068c:	490c      	ldr	r1, [pc, #48]	; (80006c0 <__NVIC_SetPriority+0x4c>)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	0112      	lsls	r2, r2, #4
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	440b      	add	r3, r1
 8000698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800069c:	e00a      	b.n	80006b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4908      	ldr	r1, [pc, #32]	; (80006c4 <__NVIC_SetPriority+0x50>)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	f003 030f 	and.w	r3, r3, #15
 80006aa:	3b04      	subs	r3, #4
 80006ac:	0112      	lsls	r2, r2, #4
 80006ae:	b2d2      	uxtb	r2, r2
 80006b0:	440b      	add	r3, r1
 80006b2:	761a      	strb	r2, [r3, #24]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e100 	.word	0xe000e100
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	f1c3 0307 	rsb	r3, r3, #7
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	bf28      	it	cs
 80006e6:	2304      	movcs	r3, #4
 80006e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3304      	adds	r3, #4
 80006ee:	2b06      	cmp	r3, #6
 80006f0:	d902      	bls.n	80006f8 <NVIC_EncodePriority+0x30>
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3b03      	subs	r3, #3
 80006f6:	e000      	b.n	80006fa <NVIC_EncodePriority+0x32>
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	43da      	mvns	r2, r3
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	401a      	ands	r2, r3
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000710:	f04f 31ff 	mov.w	r1, #4294967295
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	fa01 f303 	lsl.w	r3, r1, r3
 800071a:	43d9      	mvns	r1, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	4313      	orrs	r3, r2
         );
}
 8000722:	4618      	mov	r0, r3
 8000724:	3724      	adds	r7, #36	; 0x24
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800073c:	d301      	bcc.n	8000742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2301      	movs	r3, #1
 8000740:	e00f      	b.n	8000762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <SysTick_Config+0x40>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074a:	210f      	movs	r1, #15
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f7ff ff90 	bl	8000674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <SysTick_Config+0x40>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <SysTick_Config+0x40>)
 800075c:	2207      	movs	r2, #7
 800075e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010

08000770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff2d 	bl	80005d8 <__NVIC_SetPriorityGrouping>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000786:	b580      	push	{r7, lr}
 8000788:	b086      	sub	sp, #24
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000798:	f7ff ff42 	bl	8000620 <__NVIC_GetPriorityGrouping>
 800079c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	6978      	ldr	r0, [r7, #20]
 80007a4:	f7ff ff90 	bl	80006c8 <NVIC_EncodePriority>
 80007a8:	4602      	mov	r2, r0
 80007aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff5f 	bl	8000674 <__NVIC_SetPriority>
}
 80007b6:	bf00      	nop
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff35 	bl	800063c <__NVIC_EnableIRQ>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ffa2 	bl	800072c <SysTick_Config>
 80007e8:	4603      	mov	r3, r0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b08b      	sub	sp, #44	; 0x2c
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000806:	e127      	b.n	8000a58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000808:	2201      	movs	r2, #1
 800080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	69fa      	ldr	r2, [r7, #28]
 8000818:	4013      	ands	r3, r2
 800081a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	429a      	cmp	r2, r3
 8000822:	f040 8116 	bne.w	8000a52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b12      	cmp	r3, #18
 800082c:	d034      	beq.n	8000898 <HAL_GPIO_Init+0xa4>
 800082e:	2b12      	cmp	r3, #18
 8000830:	d80d      	bhi.n	800084e <HAL_GPIO_Init+0x5a>
 8000832:	2b02      	cmp	r3, #2
 8000834:	d02b      	beq.n	800088e <HAL_GPIO_Init+0x9a>
 8000836:	2b02      	cmp	r3, #2
 8000838:	d804      	bhi.n	8000844 <HAL_GPIO_Init+0x50>
 800083a:	2b00      	cmp	r3, #0
 800083c:	d031      	beq.n	80008a2 <HAL_GPIO_Init+0xae>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d01c      	beq.n	800087c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000842:	e048      	b.n	80008d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000844:	2b03      	cmp	r3, #3
 8000846:	d043      	beq.n	80008d0 <HAL_GPIO_Init+0xdc>
 8000848:	2b11      	cmp	r3, #17
 800084a:	d01b      	beq.n	8000884 <HAL_GPIO_Init+0x90>
          break;
 800084c:	e043      	b.n	80008d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800084e:	4a89      	ldr	r2, [pc, #548]	; (8000a74 <HAL_GPIO_Init+0x280>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d026      	beq.n	80008a2 <HAL_GPIO_Init+0xae>
 8000854:	4a87      	ldr	r2, [pc, #540]	; (8000a74 <HAL_GPIO_Init+0x280>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d806      	bhi.n	8000868 <HAL_GPIO_Init+0x74>
 800085a:	4a87      	ldr	r2, [pc, #540]	; (8000a78 <HAL_GPIO_Init+0x284>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d020      	beq.n	80008a2 <HAL_GPIO_Init+0xae>
 8000860:	4a86      	ldr	r2, [pc, #536]	; (8000a7c <HAL_GPIO_Init+0x288>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d01d      	beq.n	80008a2 <HAL_GPIO_Init+0xae>
          break;
 8000866:	e036      	b.n	80008d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000868:	4a85      	ldr	r2, [pc, #532]	; (8000a80 <HAL_GPIO_Init+0x28c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d019      	beq.n	80008a2 <HAL_GPIO_Init+0xae>
 800086e:	4a85      	ldr	r2, [pc, #532]	; (8000a84 <HAL_GPIO_Init+0x290>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d016      	beq.n	80008a2 <HAL_GPIO_Init+0xae>
 8000874:	4a84      	ldr	r2, [pc, #528]	; (8000a88 <HAL_GPIO_Init+0x294>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d013      	beq.n	80008a2 <HAL_GPIO_Init+0xae>
          break;
 800087a:	e02c      	b.n	80008d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	623b      	str	r3, [r7, #32]
          break;
 8000882:	e028      	b.n	80008d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	3304      	adds	r3, #4
 800088a:	623b      	str	r3, [r7, #32]
          break;
 800088c:	e023      	b.n	80008d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	3308      	adds	r3, #8
 8000894:	623b      	str	r3, [r7, #32]
          break;
 8000896:	e01e      	b.n	80008d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	330c      	adds	r3, #12
 800089e:	623b      	str	r3, [r7, #32]
          break;
 80008a0:	e019      	b.n	80008d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d102      	bne.n	80008b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008aa:	2304      	movs	r3, #4
 80008ac:	623b      	str	r3, [r7, #32]
          break;
 80008ae:	e012      	b.n	80008d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d105      	bne.n	80008c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008b8:	2308      	movs	r3, #8
 80008ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	69fa      	ldr	r2, [r7, #28]
 80008c0:	611a      	str	r2, [r3, #16]
          break;
 80008c2:	e008      	b.n	80008d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008c4:	2308      	movs	r3, #8
 80008c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	69fa      	ldr	r2, [r7, #28]
 80008cc:	615a      	str	r2, [r3, #20]
          break;
 80008ce:	e002      	b.n	80008d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
          break;
 80008d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	2bff      	cmp	r3, #255	; 0xff
 80008da:	d801      	bhi.n	80008e0 <HAL_GPIO_Init+0xec>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	e001      	b.n	80008e4 <HAL_GPIO_Init+0xf0>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3304      	adds	r3, #4
 80008e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	2bff      	cmp	r3, #255	; 0xff
 80008ea:	d802      	bhi.n	80008f2 <HAL_GPIO_Init+0xfe>
 80008ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	e002      	b.n	80008f8 <HAL_GPIO_Init+0x104>
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	3b08      	subs	r3, #8
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	210f      	movs	r1, #15
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	401a      	ands	r2, r3
 800090a:	6a39      	ldr	r1, [r7, #32]
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	431a      	orrs	r2, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	2b00      	cmp	r3, #0
 8000922:	f000 8096 	beq.w	8000a52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000926:	4b59      	ldr	r3, [pc, #356]	; (8000a8c <HAL_GPIO_Init+0x298>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	4a58      	ldr	r2, [pc, #352]	; (8000a8c <HAL_GPIO_Init+0x298>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6193      	str	r3, [r2, #24]
 8000932:	4b56      	ldr	r3, [pc, #344]	; (8000a8c <HAL_GPIO_Init+0x298>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800093e:	4a54      	ldr	r2, [pc, #336]	; (8000a90 <HAL_GPIO_Init+0x29c>)
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	3302      	adds	r3, #2
 8000946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094e:	f003 0303 	and.w	r3, r3, #3
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	220f      	movs	r2, #15
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	68fa      	ldr	r2, [r7, #12]
 800095e:	4013      	ands	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a4b      	ldr	r2, [pc, #300]	; (8000a94 <HAL_GPIO_Init+0x2a0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d013      	beq.n	8000992 <HAL_GPIO_Init+0x19e>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a4a      	ldr	r2, [pc, #296]	; (8000a98 <HAL_GPIO_Init+0x2a4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d00d      	beq.n	800098e <HAL_GPIO_Init+0x19a>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a49      	ldr	r2, [pc, #292]	; (8000a9c <HAL_GPIO_Init+0x2a8>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d007      	beq.n	800098a <HAL_GPIO_Init+0x196>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a48      	ldr	r2, [pc, #288]	; (8000aa0 <HAL_GPIO_Init+0x2ac>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_GPIO_Init+0x192>
 8000982:	2303      	movs	r3, #3
 8000984:	e006      	b.n	8000994 <HAL_GPIO_Init+0x1a0>
 8000986:	2304      	movs	r3, #4
 8000988:	e004      	b.n	8000994 <HAL_GPIO_Init+0x1a0>
 800098a:	2302      	movs	r3, #2
 800098c:	e002      	b.n	8000994 <HAL_GPIO_Init+0x1a0>
 800098e:	2301      	movs	r3, #1
 8000990:	e000      	b.n	8000994 <HAL_GPIO_Init+0x1a0>
 8000992:	2300      	movs	r3, #0
 8000994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000996:	f002 0203 	and.w	r2, r2, #3
 800099a:	0092      	lsls	r2, r2, #2
 800099c:	4093      	lsls	r3, r2
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009a4:	493a      	ldr	r1, [pc, #232]	; (8000a90 <HAL_GPIO_Init+0x29c>)
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	089b      	lsrs	r3, r3, #2
 80009aa:	3302      	adds	r3, #2
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d006      	beq.n	80009cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009be:	4b39      	ldr	r3, [pc, #228]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4938      	ldr	r1, [pc, #224]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	600b      	str	r3, [r1, #0]
 80009ca:	e006      	b.n	80009da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009cc:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	43db      	mvns	r3, r3
 80009d4:	4933      	ldr	r1, [pc, #204]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 80009d6:	4013      	ands	r3, r2
 80009d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d006      	beq.n	80009f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009e6:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 80009e8:	685a      	ldr	r2, [r3, #4]
 80009ea:	492e      	ldr	r1, [pc, #184]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	604b      	str	r3, [r1, #4]
 80009f2:	e006      	b.n	8000a02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	43db      	mvns	r3, r3
 80009fc:	4929      	ldr	r1, [pc, #164]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 80009fe:	4013      	ands	r3, r2
 8000a00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d006      	beq.n	8000a1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a0e:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	4924      	ldr	r1, [pc, #144]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	608b      	str	r3, [r1, #8]
 8000a1a:	e006      	b.n	8000a2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a1c:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	43db      	mvns	r3, r3
 8000a24:	491f      	ldr	r1, [pc, #124]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 8000a26:	4013      	ands	r3, r2
 8000a28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d006      	beq.n	8000a44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 8000a38:	68da      	ldr	r2, [r3, #12]
 8000a3a:	491a      	ldr	r1, [pc, #104]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	60cb      	str	r3, [r1, #12]
 8000a42:	e006      	b.n	8000a52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	4915      	ldr	r1, [pc, #84]	; (8000aa4 <HAL_GPIO_Init+0x2b0>)
 8000a4e:	4013      	ands	r3, r2
 8000a50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a54:	3301      	adds	r3, #1
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f47f aed0 	bne.w	8000808 <HAL_GPIO_Init+0x14>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	372c      	adds	r7, #44	; 0x2c
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	10210000 	.word	0x10210000
 8000a78:	10110000 	.word	0x10110000
 8000a7c:	10120000 	.word	0x10120000
 8000a80:	10310000 	.word	0x10310000
 8000a84:	10320000 	.word	0x10320000
 8000a88:	10220000 	.word	0x10220000
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010000 	.word	0x40010000
 8000a94:	40010800 	.word	0x40010800
 8000a98:	40010c00 	.word	0x40010c00
 8000a9c:	40011000 	.word	0x40011000
 8000aa0:	40011400 	.word	0x40011400
 8000aa4:	40010400 	.word	0x40010400

08000aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	807b      	strh	r3, [r7, #2]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ab8:	787b      	ldrb	r3, [r7, #1]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000abe:	887a      	ldrh	r2, [r7, #2]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ac4:	e003      	b.n	8000ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ac6:	887b      	ldrh	r3, [r7, #2]
 8000ac8:	041a      	lsls	r2, r3, #16
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	611a      	str	r2, [r3, #16]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000aea:	887a      	ldrh	r2, [r7, #2]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4013      	ands	r3, r2
 8000af0:	041a      	lsls	r2, r3, #16
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43d9      	mvns	r1, r3
 8000af6:	887b      	ldrh	r3, [r7, #2]
 8000af8:	400b      	ands	r3, r1
 8000afa:	431a      	orrs	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	611a      	str	r2, [r3, #16]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr

08000b0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0c:	b08b      	sub	sp, #44	; 0x2c
 8000b0e:	af06      	add	r7, sp, #24
 8000b10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e0fd      	b.n	8000d18 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d106      	bne.n	8000b36 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f008 faa5 	bl	8009080 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2203      	movs	r2, #3
 8000b3a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 f82a 	bl	8002b9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	687e      	ldr	r6, [r7, #4]
 8000b50:	466d      	mov	r5, sp
 8000b52:	f106 0410 	add.w	r4, r6, #16
 8000b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	602b      	str	r3, [r5, #0]
 8000b5e:	1d33      	adds	r3, r6, #4
 8000b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b62:	6838      	ldr	r0, [r7, #0]
 8000b64:	f001 fff4 	bl	8002b50 <USB_CoreInit>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d005      	beq.n	8000b7a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2202      	movs	r2, #2
 8000b72:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e0ce      	b.n	8000d18 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 f825 	bl	8002bd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	e04c      	b.n	8000c26 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	440b      	add	r3, r1
 8000bb2:	7bfa      	ldrb	r2, [r7, #15]
 8000bb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000bb6:	7bfa      	ldrb	r2, [r7, #15]
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	b298      	uxth	r0, r3
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	440b      	add	r3, r1
 8000bc8:	3336      	adds	r3, #54	; 0x36
 8000bca:	4602      	mov	r2, r0
 8000bcc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	440b      	add	r3, r1
 8000bde:	3303      	adds	r3, #3
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000be4:	7bfa      	ldrb	r2, [r7, #15]
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	4613      	mov	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	440b      	add	r3, r1
 8000bf2:	3338      	adds	r3, #56	; 0x38
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bf8:	7bfa      	ldrb	r2, [r7, #15]
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	440b      	add	r3, r1
 8000c06:	333c      	adds	r3, #60	; 0x3c
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	4613      	mov	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	440b      	add	r3, r1
 8000c1a:	3340      	adds	r3, #64	; 0x40
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	3301      	adds	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	7bfa      	ldrb	r2, [r7, #15]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3ad      	bcc.n	8000b8c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e044      	b.n	8000cc0 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	440b      	add	r3, r1
 8000c44:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	4613      	mov	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	440b      	add	r3, r1
 8000c5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	440b      	add	r3, r1
 8000c70:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c78:	7bfa      	ldrb	r2, [r7, #15]
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c8e:	7bfa      	ldrb	r2, [r7, #15]
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ca4:	7bfa      	ldrb	r2, [r7, #15]
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	440b      	add	r3, r1
 8000cb2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	7bfa      	ldrb	r2, [r7, #15]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d3b5      	bcc.n	8000c36 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	687e      	ldr	r6, [r7, #4]
 8000cd2:	466d      	mov	r5, sp
 8000cd4:	f106 0410 	add.w	r4, r6, #16
 8000cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cdc:	6823      	ldr	r3, [r4, #0]
 8000cde:	602b      	str	r3, [r5, #0]
 8000ce0:	1d33      	adds	r3, r6, #4
 8000ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ce4:	6838      	ldr	r0, [r7, #0]
 8000ce6:	f001 ff7f 	bl	8002be8 <USB_DevInit>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d005      	beq.n	8000cfc <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e00d      	b.n	8000d18 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f003 ff19 	bl	8004b48 <USB_DevDisconnect>

  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d101      	bne.n	8000d36 <HAL_PCD_Start+0x16>
 8000d32:	2302      	movs	r3, #2
 8000d34:	e016      	b.n	8000d64 <HAL_PCD_Start+0x44>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 ff14 	bl	8002b70 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d48:	2101      	movs	r1, #1
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f008 fc0b 	bl	8009566 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 feed 	bl	8004b34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 feef 	bl	8004b5c <USB_ReadInterrupts>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d88:	d102      	bne.n	8000d90 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 fb61 	bl	8001452 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 fee1 	bl	8004b5c <USB_ReadInterrupts>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da4:	d112      	bne.n	8000dcc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000db8:	b292      	uxth	r2, r2
 8000dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f008 f9d9 	bl	8009176 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 f925 	bl	8001016 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 fec3 	bl	8004b5c <USB_ReadInterrupts>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000de0:	d10b      	bne.n	8000dfa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000df4:	b292      	uxth	r2, r2
 8000df6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f003 feac 	bl	8004b5c <USB_ReadInterrupts>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e0e:	d10b      	bne.n	8000e28 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e22:	b292      	uxth	r2, r2
 8000e24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fe95 	bl	8004b5c <USB_ReadInterrupts>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e3c:	d126      	bne.n	8000e8c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0204 	bic.w	r2, r2, #4
 8000e50:	b292      	uxth	r2, r2
 8000e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0208 	bic.w	r2, r2, #8
 8000e68:	b292      	uxth	r2, r2
 8000e6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f008 f9ba 	bl	80091e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e86:	b292      	uxth	r2, r2
 8000e88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fe63 	bl	8004b5c <USB_ReadInterrupts>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ea0:	f040 8084 	bne.w	8000fac <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	77fb      	strb	r3, [r7, #31]
 8000ea8:	e011      	b.n	8000ece <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	7ffb      	ldrb	r3, [r7, #31]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	441a      	add	r2, r3
 8000eb6:	7ffb      	ldrb	r3, [r7, #31]
 8000eb8:	8812      	ldrh	r2, [r2, #0]
 8000eba:	b292      	uxth	r2, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	f107 0120 	add.w	r1, r7, #32
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000ec8:	7ffb      	ldrb	r3, [r7, #31]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	77fb      	strb	r3, [r7, #31]
 8000ece:	7ffb      	ldrb	r3, [r7, #31]
 8000ed0:	2b07      	cmp	r3, #7
 8000ed2:	d9ea      	bls.n	8000eaa <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0201 	orr.w	r2, r2, #1
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0201 	bic.w	r2, r2, #1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000f04:	bf00      	nop
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f6      	beq.n	8000f06 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f2a:	b292      	uxth	r2, r2
 8000f2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	77fb      	strb	r3, [r7, #31]
 8000f34:	e010      	b.n	8000f58 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000f36:	7ffb      	ldrb	r3, [r7, #31]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	7ffa      	ldrb	r2, [r7, #31]
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	440a      	add	r2, r1
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	f107 0120 	add.w	r1, r7, #32
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000f50:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000f52:	7ffb      	ldrb	r3, [r7, #31]
 8000f54:	3301      	adds	r3, #1
 8000f56:	77fb      	strb	r3, [r7, #31]
 8000f58:	7ffb      	ldrb	r3, [r7, #31]
 8000f5a:	2b07      	cmp	r3, #7
 8000f5c:	d9eb      	bls.n	8000f36 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 0208 	orr.w	r2, r2, #8
 8000f70:	b292      	uxth	r2, r2
 8000f72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f88:	b292      	uxth	r2, r2
 8000f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f042 0204 	orr.w	r2, r2, #4
 8000fa0:	b292      	uxth	r2, r2
 8000fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f008 f904 	bl	80091b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 fdd3 	bl	8004b5c <USB_ReadInterrupts>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fc0:	d10e      	bne.n	8000fe0 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fd4:	b292      	uxth	r2, r2
 8000fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f008 f8bd 	bl	800915a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f003 fdb9 	bl	8004b5c <USB_ReadInterrupts>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ff4:	d10b      	bne.n	800100e <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001008:	b292      	uxth	r2, r2
 800100a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	460b      	mov	r3, r1
 8001020:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <HAL_PCD_SetAddress+0x1a>
 800102c:	2302      	movs	r3, #2
 800102e:	e013      	b.n	8001058 <HAL_PCD_SetAddress+0x42>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	78fa      	ldrb	r2, [r7, #3]
 800103c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	78fa      	ldrb	r2, [r7, #3]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fd60 	bl	8004b0e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	4608      	mov	r0, r1
 800106a:	4611      	mov	r1, r2
 800106c:	461a      	mov	r2, r3
 800106e:	4603      	mov	r3, r0
 8001070:	70fb      	strb	r3, [r7, #3]
 8001072:	460b      	mov	r3, r1
 8001074:	803b      	strh	r3, [r7, #0]
 8001076:	4613      	mov	r3, r2
 8001078:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800107e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001082:	2b00      	cmp	r3, #0
 8001084:	da0e      	bge.n	80010a4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2201      	movs	r2, #1
 80010a0:	705a      	strb	r2, [r3, #1]
 80010a2:	e00e      	b.n	80010c2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	f003 0207 	and.w	r2, r3, #7
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2200      	movs	r2, #0
 80010c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010ce:	883a      	ldrh	r2, [r7, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	78ba      	ldrb	r2, [r7, #2]
 80010d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	785b      	ldrb	r3, [r3, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d004      	beq.n	80010ec <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010ec:	78bb      	ldrb	r3, [r7, #2]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d102      	bne.n	80010f8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d101      	bne.n	8001106 <HAL_PCD_EP_Open+0xa6>
 8001102:	2302      	movs	r3, #2
 8001104:	e00e      	b.n	8001124 <HAL_PCD_EP_Open+0xc4>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68f9      	ldr	r1, [r7, #12]
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fd87 	bl	8002c28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001122:	7afb      	ldrb	r3, [r7, #11]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800113c:	2b00      	cmp	r3, #0
 800113e:	da0e      	bge.n	800115e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2201      	movs	r2, #1
 800115a:	705a      	strb	r2, [r3, #1]
 800115c:	e00e      	b.n	800117c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	f003 0207 	and.w	r2, r3, #7
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2200      	movs	r2, #0
 800117a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	b2da      	uxtb	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <HAL_PCD_EP_Close+0x6a>
 8001192:	2302      	movs	r3, #2
 8001194:	e00e      	b.n	80011b4 <HAL_PCD_EP_Close+0x88>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68f9      	ldr	r1, [r7, #12]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 f8a9 	bl	80032fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	460b      	mov	r3, r1
 80011ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011cc:	7afb      	ldrb	r3, [r7, #11]
 80011ce:	f003 0207 	and.w	r2, r3, #7
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4413      	add	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2200      	movs	r2, #0
 80011fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011fc:	7afb      	ldrb	r3, [r7, #11]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	b2da      	uxtb	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001208:	7afb      	ldrb	r3, [r7, #11]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	2b00      	cmp	r3, #0
 8001210:	d106      	bne.n	8001220 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6979      	ldr	r1, [r7, #20]
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fa5b 	bl	80036d4 <USB_EPStartXfer>
 800121e:	e005      	b.n	800122c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6979      	ldr	r1, [r7, #20]
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fa54 	bl	80036d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	f003 0207 	and.w	r2, r3, #7
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	440b      	add	r3, r1
 8001254:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001258:	681b      	ldr	r3, [r3, #0]
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	460b      	mov	r3, r1
 8001272:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001274:	7afb      	ldrb	r3, [r7, #11]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2201      	movs	r2, #1
 80012ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012b0:	7afb      	ldrb	r3, [r7, #11]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012bc:	7afb      	ldrb	r3, [r7, #11]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d106      	bne.n	80012d4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6979      	ldr	r1, [r7, #20]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 fa01 	bl	80036d4 <USB_EPStartXfer>
 80012d2:	e005      	b.n	80012e0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6979      	ldr	r1, [r7, #20]
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 f9fa 	bl	80036d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	460b      	mov	r3, r1
 80012f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	f003 0207 	and.w	r2, r3, #7
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	d901      	bls.n	8001308 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e04c      	b.n	80013a2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800130c:	2b00      	cmp	r3, #0
 800130e:	da0e      	bge.n	800132e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2201      	movs	r2, #1
 800132a:	705a      	strb	r2, [r3, #1]
 800132c:	e00c      	b.n	8001348 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800132e:	78fa      	ldrb	r2, [r7, #3]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2201      	movs	r2, #1
 800134c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	b2da      	uxtb	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <HAL_PCD_EP_SetStall+0x7e>
 8001364:	2302      	movs	r3, #2
 8001366:	e01c      	b.n	80013a2 <HAL_PCD_EP_SetStall+0xb8>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68f9      	ldr	r1, [r7, #12]
 8001376:	4618      	mov	r0, r3
 8001378:	f003 facc 	bl	8004914 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	2b00      	cmp	r3, #0
 8001384:	d108      	bne.n	8001398 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f003 fbf1 	bl	8004b7a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	f003 020f 	and.w	r2, r3, #15
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d901      	bls.n	80013c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e040      	b.n	800144a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	da0e      	bge.n	80013ee <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2201      	movs	r2, #1
 80013ea:	705a      	strb	r2, [r3, #1]
 80013ec:	e00e      	b.n	800140c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	f003 0207 	and.w	r2, r3, #7
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	b2da      	uxtb	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_PCD_EP_ClrStall+0x82>
 8001428:	2302      	movs	r3, #2
 800142a:	e00e      	b.n	800144a <HAL_PCD_EP_ClrStall+0xa0>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68f9      	ldr	r1, [r7, #12]
 800143a:	4618      	mov	r0, r3
 800143c:	f003 faba 	bl	80049b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b08e      	sub	sp, #56	; 0x38
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800145a:	e2df      	b.n	8001a1c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001464:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001466:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001472:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 8158 	bne.w	800172c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800147c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	d152      	bne.n	800152c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001496:	81fb      	strh	r3, [r7, #14]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	89fb      	ldrh	r3, [r7, #14]
 800149e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3328      	adds	r3, #40	; 0x28
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4413      	add	r3, r2
 80014c4:	3302      	adds	r3, #2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	441a      	add	r2, r3
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014ea:	2100      	movs	r1, #0
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f007 fe1a 	bl	8009126 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 828e 	beq.w	8001a1c <PCD_EP_ISR_Handler+0x5ca>
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b00      	cmp	r3, #0
 8001506:	f040 8289 	bne.w	8001a1c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001516:	b2da      	uxtb	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b292      	uxth	r2, r2
 800151e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800152a:	e277      	b.n	8001a1c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800153c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800153e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001542:	2b00      	cmp	r3, #0
 8001544:	d034      	beq.n	80015b0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800154e:	b29b      	uxth	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4413      	add	r3, r2
 800155a:	3306      	adds	r3, #6
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	4413      	add	r3, r2
 8001564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001584:	b29b      	uxth	r3, r3
 8001586:	f003 fb47 	bl	8004c18 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	b29a      	uxth	r2, r3
 8001592:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001596:	4013      	ands	r3, r2
 8001598:	823b      	strh	r3, [r7, #16]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	8a3a      	ldrh	r2, [r7, #16]
 80015a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015a4:	b292      	uxth	r2, r2
 80015a6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f007 fd8f 	bl	80090cc <HAL_PCD_SetupStageCallback>
 80015ae:	e235      	b.n	8001a1c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015b0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f280 8231 	bge.w	8001a1c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015c6:	4013      	ands	r3, r2
 80015c8:	83bb      	strh	r3, [r7, #28]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	8bba      	ldrh	r2, [r7, #28]
 80015d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d4:	b292      	uxth	r2, r2
 80015d6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4413      	add	r3, r2
 80015ec:	3306      	adds	r3, #6
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d019      	beq.n	8001640 <PCD_EP_ISR_Handler+0x1ee>
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d015      	beq.n	8001640 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	6959      	ldr	r1, [r3, #20]
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001624:	b29b      	uxth	r3, r3
 8001626:	f003 faf7 	bl	8004c18 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	441a      	add	r2, r3
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001638:	2100      	movs	r1, #0
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f007 fd58 	bl	80090f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800164e:	b29b      	uxth	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4413      	add	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d112      	bne.n	800168e <PCD_EP_ISR_Handler+0x23c>
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001672:	b29a      	uxth	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	801a      	strh	r2, [r3, #0]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
 800167e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001686:	b29a      	uxth	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	801a      	strh	r2, [r3, #0]
 800168c:	e02f      	b.n	80016ee <PCD_EP_ISR_Handler+0x29c>
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	2b3e      	cmp	r3, #62	; 0x3e
 8001694:	d813      	bhi.n	80016be <PCD_EP_ISR_Handler+0x26c>
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	633b      	str	r3, [r7, #48]	; 0x30
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <PCD_EP_ISR_Handler+0x25e>
 80016aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ac:	3301      	adds	r3, #1
 80016ae:	633b      	str	r3, [r7, #48]	; 0x30
 80016b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	029b      	lsls	r3, r3, #10
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	801a      	strh	r2, [r3, #0]
 80016bc:	e017      	b.n	80016ee <PCD_EP_ISR_Handler+0x29c>
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <PCD_EP_ISR_Handler+0x286>
 80016d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d4:	3b01      	subs	r3, #1
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
 80016d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016da:	b29b      	uxth	r3, r3
 80016dc:	029b      	lsls	r3, r3, #10
 80016de:	b29b      	uxth	r3, r3
 80016e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016fe:	827b      	strh	r3, [r7, #18]
 8001700:	8a7b      	ldrh	r3, [r7, #18]
 8001702:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001706:	827b      	strh	r3, [r7, #18]
 8001708:	8a7b      	ldrh	r3, [r7, #18]
 800170a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800170e:	827b      	strh	r3, [r7, #18]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	8a7b      	ldrh	r3, [r7, #18]
 8001716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800171a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800171e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001726:	b29b      	uxth	r3, r3
 8001728:	8013      	strh	r3, [r2, #0]
 800172a:	e177      	b.n	8001a1c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800173e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001742:	2b00      	cmp	r3, #0
 8001744:	f280 80ea 	bge.w	800191c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	b29a      	uxth	r2, r3
 800175a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800175e:	4013      	ands	r3, r2
 8001760:	853b      	strh	r3, [r7, #40]	; 0x28
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001776:	b292      	uxth	r2, r2
 8001778:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800177a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	7b1b      	ldrb	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d122      	bne.n	80017de <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	3306      	adds	r3, #6
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80017c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 8087 	beq.w	80018d8 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	6959      	ldr	r1, [r3, #20]
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	88da      	ldrh	r2, [r3, #6]
 80017d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017d8:	f003 fa1e 	bl	8004c18 <USB_ReadPMA>
 80017dc:	e07c      	b.n	80018d8 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	78db      	ldrb	r3, [r3, #3]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d108      	bne.n	80017f8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80017e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017e8:	461a      	mov	r2, r3
 80017ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f923 	bl	8001a38 <HAL_PCD_EP_DB_Receive>
 80017f2:	4603      	mov	r3, r0
 80017f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80017f6:	e06f      	b.n	80018d8 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	b29b      	uxth	r3, r3
 800180a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800180e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001812:	847b      	strh	r3, [r7, #34]	; 0x22
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	441a      	add	r2, r3
 8001822:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800182c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001830:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001834:	b29b      	uxth	r3, r3
 8001836:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	b29b      	uxth	r3, r3
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d021      	beq.n	8001896 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800185a:	b29b      	uxth	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4413      	add	r3, r2
 8001866:	3302      	adds	r3, #2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	4413      	add	r3, r2
 8001870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800187a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800187c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800187e:	2b00      	cmp	r3, #0
 8001880:	d02a      	beq.n	80018d8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	6959      	ldr	r1, [r3, #20]
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	891a      	ldrh	r2, [r3, #8]
 800188e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001890:	f003 f9c2 	bl	8004c18 <USB_ReadPMA>
 8001894:	e020      	b.n	80018d8 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800189e:	b29b      	uxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4413      	add	r3, r2
 80018aa:	3306      	adds	r3, #6
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018be:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80018c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d008      	beq.n	80018d8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	6959      	ldr	r1, [r3, #20]
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	895a      	ldrh	r2, [r3, #10]
 80018d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018d4:	f003 f9a0 	bl	8004c18 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	69da      	ldr	r2, [r3, #28]
 80018dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018de:	441a      	add	r2, r3
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018ea:	441a      	add	r2, r3
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d004      	beq.n	8001902 <PCD_EP_ISR_Handler+0x4b0>
 80018f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d206      	bcs.n	8001910 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	4619      	mov	r1, r3
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f007 fbf1 	bl	80090f0 <HAL_PCD_DataOutStageCallback>
 800190e:	e005      	b.n	800191c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001916:	4618      	mov	r0, r3
 8001918:	f001 fedc 	bl	80036d4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800191c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	2b00      	cmp	r3, #0
 8001924:	d07a      	beq.n	8001a1c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001926:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	b29b      	uxth	r3, r3
 800194c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001954:	843b      	strh	r3, [r7, #32]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	441a      	add	r2, r3
 8001964:	8c3b      	ldrh	r3, [r7, #32]
 8001966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800196a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800196e:	b29b      	uxth	r3, r3
 8001970:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	78db      	ldrb	r3, [r3, #3]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d108      	bne.n	800198c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800197e:	2b02      	cmp	r3, #2
 8001980:	d146      	bne.n	8001a10 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001982:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d141      	bne.n	8001a10 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001994:	b29b      	uxth	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	3302      	adds	r3, #2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019b4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	699a      	ldr	r2, [r3, #24]
 80019ba:	8bfb      	ldrh	r3, [r7, #30]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d906      	bls.n	80019ce <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	699a      	ldr	r2, [r3, #24]
 80019c4:	8bfb      	ldrh	r3, [r7, #30]
 80019c6:	1ad2      	subs	r2, r2, r3
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	619a      	str	r2, [r3, #24]
 80019cc:	e002      	b.n	80019d4 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d106      	bne.n	80019ea <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f007 fb9f 	bl	8009126 <HAL_PCD_DataInStageCallback>
 80019e8:	e018      	b.n	8001a1c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	8bfb      	ldrh	r3, [r7, #30]
 80019f0:	441a      	add	r2, r3
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	8bfb      	ldrh	r3, [r7, #30]
 80019fc:	441a      	add	r2, r3
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f001 fe63 	bl	80036d4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001a0e:	e005      	b.n	8001a1c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a12:	461a      	mov	r2, r3
 8001a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f91b 	bl	8001c52 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f6ff ad17 	blt.w	800145c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3738      	adds	r7, #56	; 0x38
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	4613      	mov	r3, r2
 8001a44:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d07e      	beq.n	8001b4e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	3302      	adds	r3, #2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a78:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	8b7b      	ldrh	r3, [r7, #26]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d306      	bcc.n	8001a92 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	699a      	ldr	r2, [r3, #24]
 8001a88:	8b7b      	ldrh	r3, [r7, #26]
 8001a8a:	1ad2      	subs	r2, r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	619a      	str	r2, [r3, #24]
 8001a90:	e002      	b.n	8001a98 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d123      	bne.n	8001ae8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aba:	833b      	strh	r3, [r7, #24]
 8001abc:	8b3b      	ldrh	r3, [r7, #24]
 8001abe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ac2:	833b      	strh	r3, [r7, #24]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	441a      	add	r2, r3
 8001ad2:	8b3b      	ldrh	r3, [r7, #24]
 8001ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d01f      	beq.n	8001b32 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b0c:	82fb      	strh	r3, [r7, #22]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	441a      	add	r2, r3
 8001b1c:	8afb      	ldrh	r3, [r7, #22]
 8001b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b32:	8b7b      	ldrh	r3, [r7, #26]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 8087 	beq.w	8001c48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	6959      	ldr	r1, [r3, #20]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	891a      	ldrh	r2, [r3, #8]
 8001b46:	8b7b      	ldrh	r3, [r7, #26]
 8001b48:	f003 f866 	bl	8004c18 <USB_ReadPMA>
 8001b4c:	e07c      	b.n	8001c48 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	3306      	adds	r3, #6
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b76:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	8b7b      	ldrh	r3, [r7, #26]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d306      	bcc.n	8001b90 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	699a      	ldr	r2, [r3, #24]
 8001b86:	8b7b      	ldrh	r3, [r7, #26]
 8001b88:	1ad2      	subs	r2, r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	619a      	str	r2, [r3, #24]
 8001b8e:	e002      	b.n	8001b96 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d123      	bne.n	8001be6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb8:	83fb      	strh	r3, [r7, #30]
 8001bba:	8bfb      	ldrh	r3, [r7, #30]
 8001bbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bc0:	83fb      	strh	r3, [r7, #30]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	441a      	add	r2, r3
 8001bd0:	8bfb      	ldrh	r3, [r7, #30]
 8001bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11f      	bne.n	8001c30 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0a:	83bb      	strh	r3, [r7, #28]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	441a      	add	r2, r3
 8001c1a:	8bbb      	ldrh	r3, [r7, #28]
 8001c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c30:	8b7b      	ldrh	r3, [r7, #26]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d008      	beq.n	8001c48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	6959      	ldr	r1, [r3, #20]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	895a      	ldrh	r2, [r3, #10]
 8001c42:	8b7b      	ldrh	r3, [r7, #26]
 8001c44:	f002 ffe8 	bl	8004c18 <USB_ReadPMA>
    }
  }

  return count;
 8001c48:	8b7b      	ldrh	r3, [r7, #26]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b092      	sub	sp, #72	; 0x48
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8132 	beq.w	8001ed0 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3302      	adds	r3, #2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c94:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d906      	bls.n	8001cae <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	699a      	ldr	r2, [r3, #24]
 8001ca4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ca6:	1ad2      	subs	r2, r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	619a      	str	r2, [r3, #24]
 8001cac:	e002      	b.n	8001cb4 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d12c      	bne.n	8001d16 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f007 fa2f 	bl	8009126 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 822f 	beq.w	8002132 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cee:	827b      	strh	r3, [r7, #18]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	441a      	add	r2, r3
 8001cfe:	8a7b      	ldrh	r3, [r7, #18]
 8001d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	8013      	strh	r3, [r2, #0]
 8001d14:	e20d      	b.n	8002132 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01f      	beq.n	8001d60 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d3a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	441a      	add	r2, r3
 8001d4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	f040 81e3 	bne.w	8002132 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d72:	441a      	add	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	69da      	ldr	r2, [r3, #28]
 8001d7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d7e:	441a      	add	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	6a1a      	ldr	r2, [r3, #32]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d309      	bcc.n	8001da4 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	6a1a      	ldr	r2, [r3, #32]
 8001d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d9c:	1ad2      	subs	r2, r2, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	621a      	str	r2, [r3, #32]
 8001da2:	e014      	b.n	8001dce <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d106      	bne.n	8001dba <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001dac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001db8:	e009      	b.n	8001dce <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	785b      	ldrb	r3, [r3, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d155      	bne.n	8001e82 <HAL_PCD_EP_DB_Transmit+0x230>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	4413      	add	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	011a      	lsls	r2, r3, #4
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	4413      	add	r3, r2
 8001df8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d112      	bne.n	8001e2a <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	801a      	strh	r2, [r3, #0]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	801a      	strh	r2, [r3, #0]
 8001e28:	e047      	b.n	8001eba <HAL_PCD_EP_DB_Transmit+0x268>
 8001e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2c:	2b3e      	cmp	r3, #62	; 0x3e
 8001e2e:	d811      	bhi.n	8001e54 <HAL_PCD_EP_DB_Transmit+0x202>
 8001e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e32:	085b      	lsrs	r3, r3, #1
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	3301      	adds	r3, #1
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	029b      	lsls	r3, r3, #10
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	801a      	strh	r2, [r3, #0]
 8001e52:	e032      	b.n	8001eba <HAL_PCD_EP_DB_Transmit+0x268>
 8001e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <HAL_PCD_EP_DB_Transmit+0x218>
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	3b01      	subs	r3, #1
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	801a      	strh	r2, [r3, #0]
 8001e80:	e01b      	b.n	8001eba <HAL_PCD_EP_DB_Transmit+0x268>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d117      	bne.n	8001eba <HAL_PCD_EP_DB_Transmit+0x268>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	623b      	str	r3, [r7, #32]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	623b      	str	r3, [r7, #32]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	011a      	lsls	r2, r3, #4
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	6959      	ldr	r1, [r3, #20]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	891a      	ldrh	r2, [r3, #8]
 8001ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	f002 fe61 	bl	8004b90 <USB_WritePMA>
 8001ece:	e130      	b.n	8002132 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3306      	adds	r3, #6
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ef8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d306      	bcc.n	8001f12 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	699a      	ldr	r2, [r3, #24]
 8001f08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f0a:	1ad2      	subs	r2, r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	619a      	str	r2, [r3, #24]
 8001f10:	e002      	b.n	8001f18 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d12c      	bne.n	8001f7a <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4619      	mov	r1, r3
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f007 f8fd 	bl	8009126 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 80fd 	bne.w	8002132 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f52:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	441a      	add	r2, r3
 8001f62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	8013      	strh	r3, [r2, #0]
 8001f78:	e0db      	b.n	8002132 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d11f      	bne.n	8001fc4 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	441a      	add	r2, r3
 8001fae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	f040 80b1 	bne.w	8002132 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fd6:	441a      	add	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	69da      	ldr	r2, [r3, #28]
 8001fe0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fe2:	441a      	add	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	6a1a      	ldr	r2, [r3, #32]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d309      	bcc.n	8002008 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	6a1a      	ldr	r2, [r3, #32]
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002000:	1ad2      	subs	r2, r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	621a      	str	r2, [r3, #32]
 8002006:	e014      	b.n	8002032 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d106      	bne.n	800201e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002010:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002012:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800201c:	e009      	b.n	8002032 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2200      	movs	r2, #0
 8002028:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	785b      	ldrb	r3, [r3, #1]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d155      	bne.n	80020ec <HAL_PCD_EP_DB_Transmit+0x49a>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	647b      	str	r3, [r7, #68]	; 0x44
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800204e:	b29b      	uxth	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002054:	4413      	add	r3, r2
 8002056:	647b      	str	r3, [r7, #68]	; 0x44
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	011a      	lsls	r2, r3, #4
 800205e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002060:	4413      	add	r3, r2
 8002062:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002066:	643b      	str	r3, [r7, #64]	; 0x40
 8002068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206a:	2b00      	cmp	r3, #0
 800206c:	d112      	bne.n	8002094 <HAL_PCD_EP_DB_Transmit+0x442>
 800206e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002078:	b29a      	uxth	r2, r3
 800207a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800207c:	801a      	strh	r2, [r3, #0]
 800207e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800208c:	b29a      	uxth	r2, r3
 800208e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002090:	801a      	strh	r2, [r3, #0]
 8002092:	e044      	b.n	800211e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002096:	2b3e      	cmp	r3, #62	; 0x3e
 8002098:	d811      	bhi.n	80020be <HAL_PCD_EP_DB_Transmit+0x46c>
 800209a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209c:	085b      	lsrs	r3, r3, #1
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_PCD_EP_DB_Transmit+0x45e>
 80020aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ac:	3301      	adds	r3, #1
 80020ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	029b      	lsls	r3, r3, #10
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ba:	801a      	strh	r2, [r3, #0]
 80020bc:	e02f      	b.n	800211e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80020be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_PCD_EP_DB_Transmit+0x482>
 80020ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d0:	3b01      	subs	r3, #1
 80020d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	029b      	lsls	r3, r3, #10
 80020da:	b29b      	uxth	r3, r3
 80020dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e8:	801a      	strh	r2, [r3, #0]
 80020ea:	e018      	b.n	800211e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d114      	bne.n	800211e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	4413      	add	r3, r2
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	011a      	lsls	r2, r3, #4
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210e:	4413      	add	r3, r2
 8002110:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002114:	633b      	str	r3, [r7, #48]	; 0x30
 8002116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002118:	b29a      	uxth	r2, r3
 800211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	6959      	ldr	r1, [r3, #20]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	895a      	ldrh	r2, [r3, #10]
 800212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212c:	b29b      	uxth	r3, r3
 800212e:	f002 fd2f 	bl	8004b90 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800214c:	823b      	strh	r3, [r7, #16]
 800214e:	8a3b      	ldrh	r3, [r7, #16]
 8002150:	f083 0310 	eor.w	r3, r3, #16
 8002154:	823b      	strh	r3, [r7, #16]
 8002156:	8a3b      	ldrh	r3, [r7, #16]
 8002158:	f083 0320 	eor.w	r3, r3, #32
 800215c:	823b      	strh	r3, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	441a      	add	r2, r3
 800216c:	8a3b      	ldrh	r3, [r7, #16]
 800216e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217e:	b29b      	uxth	r3, r3
 8002180:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3748      	adds	r7, #72	; 0x48
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	817b      	strh	r3, [r7, #10]
 800219a:	4613      	mov	r3, r2
 800219c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800219e:	897b      	ldrh	r3, [r7, #10]
 80021a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	897b      	ldrh	r3, [r7, #10]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4413      	add	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	e009      	b.n	80021d6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021c2:	897a      	ldrh	r2, [r7, #10]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4413      	add	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80021d6:	893b      	ldrh	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d107      	bne.n	80021ec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2200      	movs	r2, #0
 80021e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	80da      	strh	r2, [r3, #6]
 80021ea:	e00b      	b.n	8002204 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2201      	movs	r2, #1
 80021f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	b29a      	uxth	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e26c      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8087 	beq.w	800233e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002230:	4b92      	ldr	r3, [pc, #584]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b04      	cmp	r3, #4
 800223a:	d00c      	beq.n	8002256 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800223c:	4b8f      	ldr	r3, [pc, #572]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d112      	bne.n	800226e <HAL_RCC_OscConfig+0x5e>
 8002248:	4b8c      	ldr	r3, [pc, #560]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002254:	d10b      	bne.n	800226e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002256:	4b89      	ldr	r3, [pc, #548]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d06c      	beq.n	800233c <HAL_RCC_OscConfig+0x12c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d168      	bne.n	800233c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e246      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x76>
 8002278:	4b80      	ldr	r3, [pc, #512]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a7f      	ldr	r2, [pc, #508]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 800227e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e02e      	b.n	80022e4 <HAL_RCC_OscConfig+0xd4>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x98>
 800228e:	4b7b      	ldr	r3, [pc, #492]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7a      	ldr	r2, [pc, #488]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b78      	ldr	r3, [pc, #480]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a77      	ldr	r2, [pc, #476]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e01d      	b.n	80022e4 <HAL_RCC_OscConfig+0xd4>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0xbc>
 80022b2:	4b72      	ldr	r3, [pc, #456]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a71      	ldr	r2, [pc, #452]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b6f      	ldr	r3, [pc, #444]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a6e      	ldr	r2, [pc, #440]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e00b      	b.n	80022e4 <HAL_RCC_OscConfig+0xd4>
 80022cc:	4b6b      	ldr	r3, [pc, #428]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a6a      	ldr	r2, [pc, #424]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b68      	ldr	r3, [pc, #416]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a67      	ldr	r2, [pc, #412]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80022de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7fe f96a 	bl	80005c4 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f4:	f7fe f966 	bl	80005c4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e1fa      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	4b5d      	ldr	r3, [pc, #372]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0xe4>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7fe f956 	bl	80005c4 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7fe f952 	bl	80005c4 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	; 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1e6      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	4b53      	ldr	r3, [pc, #332]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x10c>
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d063      	beq.n	8002412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800234a:	4b4c      	ldr	r3, [pc, #304]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00b      	beq.n	800236e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002356:	4b49      	ldr	r3, [pc, #292]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b08      	cmp	r3, #8
 8002360:	d11c      	bne.n	800239c <HAL_RCC_OscConfig+0x18c>
 8002362:	4b46      	ldr	r3, [pc, #280]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	4b43      	ldr	r3, [pc, #268]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_RCC_OscConfig+0x176>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e1ba      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002386:	4b3d      	ldr	r3, [pc, #244]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4939      	ldr	r1, [pc, #228]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239a:	e03a      	b.n	8002412 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a4:	4b36      	ldr	r3, [pc, #216]	; (8002480 <HAL_RCC_OscConfig+0x270>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe f90b 	bl	80005c4 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b2:	f7fe f907 	bl	80005c4 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e19b      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	4b2d      	ldr	r3, [pc, #180]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b2a      	ldr	r3, [pc, #168]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4927      	ldr	r1, [pc, #156]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
 80023e4:	e015      	b.n	8002412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e6:	4b26      	ldr	r3, [pc, #152]	; (8002480 <HAL_RCC_OscConfig+0x270>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe f8ea 	bl	80005c4 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f4:	f7fe f8e6 	bl	80005c4 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e17a      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d03a      	beq.n	8002494 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d019      	beq.n	800245a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <HAL_RCC_OscConfig+0x274>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242c:	f7fe f8ca 	bl	80005c4 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002434:	f7fe f8c6 	bl	80005c4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e15a      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	4b0d      	ldr	r3, [pc, #52]	; (800247c <HAL_RCC_OscConfig+0x26c>)
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002452:	2001      	movs	r0, #1
 8002454:	f000 faa8 	bl	80029a8 <RCC_Delay>
 8002458:	e01c      	b.n	8002494 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_RCC_OscConfig+0x274>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7fe f8b0 	bl	80005c4 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002466:	e00f      	b.n	8002488 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7fe f8ac 	bl	80005c4 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d908      	bls.n	8002488 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e140      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	42420000 	.word	0x42420000
 8002484:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002488:	4b9e      	ldr	r3, [pc, #632]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e9      	bne.n	8002468 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80a6 	beq.w	80025ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b97      	ldr	r3, [pc, #604]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b94      	ldr	r3, [pc, #592]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4a93      	ldr	r2, [pc, #588]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024bc:	61d3      	str	r3, [r2, #28]
 80024be:	4b91      	ldr	r3, [pc, #580]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ce:	4b8e      	ldr	r3, [pc, #568]	; (8002708 <HAL_RCC_OscConfig+0x4f8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d118      	bne.n	800250c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024da:	4b8b      	ldr	r3, [pc, #556]	; (8002708 <HAL_RCC_OscConfig+0x4f8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a8a      	ldr	r2, [pc, #552]	; (8002708 <HAL_RCC_OscConfig+0x4f8>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e6:	f7fe f86d 	bl	80005c4 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ee:	f7fe f869 	bl	80005c4 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b64      	cmp	r3, #100	; 0x64
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e0fd      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002500:	4b81      	ldr	r3, [pc, #516]	; (8002708 <HAL_RCC_OscConfig+0x4f8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x312>
 8002514:	4b7b      	ldr	r3, [pc, #492]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a7a      	ldr	r2, [pc, #488]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6213      	str	r3, [r2, #32]
 8002520:	e02d      	b.n	800257e <HAL_RCC_OscConfig+0x36e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x334>
 800252a:	4b76      	ldr	r3, [pc, #472]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a75      	ldr	r2, [pc, #468]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	4b73      	ldr	r3, [pc, #460]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a72      	ldr	r2, [pc, #456]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6213      	str	r3, [r2, #32]
 8002542:	e01c      	b.n	800257e <HAL_RCC_OscConfig+0x36e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x356>
 800254c:	4b6d      	ldr	r3, [pc, #436]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a6c      	ldr	r2, [pc, #432]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4a69      	ldr	r2, [pc, #420]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6213      	str	r3, [r2, #32]
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x36e>
 8002566:	4b67      	ldr	r3, [pc, #412]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a66      	ldr	r2, [pc, #408]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6213      	str	r3, [r2, #32]
 8002572:	4b64      	ldr	r3, [pc, #400]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a63      	ldr	r2, [pc, #396]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002586:	f7fe f81d 	bl	80005c4 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe f819 	bl	80005c4 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0ab      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	4b57      	ldr	r3, [pc, #348]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ee      	beq.n	800258e <HAL_RCC_OscConfig+0x37e>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe f807 	bl	80005c4 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe f803 	bl	80005c4 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e095      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b48      	ldr	r3, [pc, #288]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a47      	ldr	r2, [pc, #284]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8081 	beq.w	80026fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f8:	4b42      	ldr	r3, [pc, #264]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d061      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d146      	bne.n	800269a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b3f      	ldr	r3, [pc, #252]	; (800270c <HAL_RCC_OscConfig+0x4fc>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fd ffd7 	bl	80005c4 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261a:	f7fd ffd3 	bl	80005c4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e067      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262c:	4b35      	ldr	r3, [pc, #212]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002640:	d108      	bne.n	8002654 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002642:	4b30      	ldr	r3, [pc, #192]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	492d      	ldr	r1, [pc, #180]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a19      	ldr	r1, [r3, #32]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	430b      	orrs	r3, r1
 8002666:	4927      	ldr	r1, [pc, #156]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_RCC_OscConfig+0x4fc>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7fd ffa7 	bl	80005c4 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267a:	f7fd ffa3 	bl	80005c4 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e037      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x46a>
 8002698:	e02f      	b.n	80026fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_RCC_OscConfig+0x4fc>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fd ff90 	bl	80005c4 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fd ff8c 	bl	80005c4 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e020      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x498>
 80026c6:	e018      	b.n	80026fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e013      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	40007000 	.word	0x40007000
 800270c:	42420060 	.word	0x42420060

08002710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0d0      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4b6a      	ldr	r3, [pc, #424]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d910      	bls.n	8002754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b67      	ldr	r3, [pc, #412]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	4965      	ldr	r1, [pc, #404]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0b8      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002776:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002784:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800278e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	494d      	ldr	r1, [pc, #308]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d040      	beq.n	8002830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d115      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e07f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e073      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e06b      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4936      	ldr	r1, [pc, #216]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002800:	f7fd fee0 	bl	80005c4 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7fd fedc 	bl	80005c4 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e053      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d210      	bcs.n	8002860 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 0207 	bic.w	r2, r3, #7
 8002846:	4922      	ldr	r1, [pc, #136]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e032      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4916      	ldr	r1, [pc, #88]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	490e      	ldr	r1, [pc, #56]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800289e:	f000 f821 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 80028a2:	4601      	mov	r1, r0
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	5cd3      	ldrb	r3, [r2, r3]
 80028b2:	fa21 f303 	lsr.w	r3, r1, r3
 80028b6:	4a09      	ldr	r2, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x1cc>)
 80028b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1d0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd fe3e 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40022000 	.word	0x40022000
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08009724 	.word	0x08009724
 80028dc:	20000000 	.word	0x20000000
 80028e0:	20000004 	.word	0x20000004

080028e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e4:	b490      	push	{r4, r7}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028ea:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028ec:	1d3c      	adds	r4, r7, #4
 80028ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028f4:	4b28      	ldr	r3, [pc, #160]	; (8002998 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800290e:	4b23      	ldr	r3, [pc, #140]	; (800299c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b04      	cmp	r3, #4
 800291c:	d002      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x40>
 800291e:	2b08      	cmp	r3, #8
 8002920:	d003      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x46>
 8002922:	e02d      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002924:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002926:	623b      	str	r3, [r7, #32]
      break;
 8002928:	e02d      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	0c9b      	lsrs	r3, r3, #18
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002936:	4413      	add	r3, r2
 8002938:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800293c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <HAL_RCC_GetSysClockFreq+0xb8>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	0c5b      	lsrs	r3, r3, #17
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002956:	4413      	add	r3, r2
 8002958:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800295c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002962:	fb02 f203 	mul.w	r2, r2, r3
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
 800296e:	e004      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	4a0c      	ldr	r2, [pc, #48]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002974:	fb02 f303 	mul.w	r3, r2, r3
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	623b      	str	r3, [r7, #32]
      break;
 800297e:	e002      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002980:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002982:	623b      	str	r3, [r7, #32]
      break;
 8002984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002986:	6a3b      	ldr	r3, [r7, #32]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3728      	adds	r7, #40	; 0x28
 800298c:	46bd      	mov	sp, r7
 800298e:	bc90      	pop	{r4, r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	0800968c 	.word	0x0800968c
 8002998:	0800969c 	.word	0x0800969c
 800299c:	40021000 	.word	0x40021000
 80029a0:	007a1200 	.word	0x007a1200
 80029a4:	003d0900 	.word	0x003d0900

080029a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <RCC_Delay+0x34>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <RCC_Delay+0x38>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0a5b      	lsrs	r3, r3, #9
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029c4:	bf00      	nop
  }
  while (Delay --);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e5a      	subs	r2, r3, #1
 80029ca:	60fa      	str	r2, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f9      	bne.n	80029c4 <RCC_Delay+0x1c>
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000000 	.word	0x20000000
 80029e0:	10624dd3 	.word	0x10624dd3

080029e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d07d      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a00:	2300      	movs	r3, #0
 8002a02:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a04:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10d      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a10:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	4a4b      	ldr	r2, [pc, #300]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	61d3      	str	r3, [r2, #28]
 8002a1c:	4b49      	ldr	r3, [pc, #292]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d118      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a38:	4b43      	ldr	r3, [pc, #268]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a42      	ldr	r2, [pc, #264]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a44:	f7fd fdbe 	bl	80005c4 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	e008      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4c:	f7fd fdba 	bl	80005c4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e06d      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b3a      	ldr	r3, [pc, #232]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a6a:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d02e      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d027      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a88:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a92:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a98:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a9e:	4a29      	ldr	r2, [pc, #164]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d014      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fd fd89 	bl	80005c4 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7fd fd85 	bl	80005c4 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e036      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ee      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4917      	ldr	r1, [pc, #92]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b08:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	490b      	ldr	r1, [pc, #44]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4904      	ldr	r1, [pc, #16]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	42420440 	.word	0x42420440

08002b50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b50:	b084      	sub	sp, #16
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	f107 0014 	add.w	r0, r7, #20
 8002b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	b004      	add	sp, #16
 8002b6e:	4770      	bx	lr

08002b70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b80:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b84:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ba4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002ba8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4013      	ands	r3, r2
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002be8:	b084      	sub	sp, #16
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	f107 0014 	add.w	r0, r7, #20
 8002bf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	b004      	add	sp, #16
 8002c26:	4770      	bx	lr

08002c28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b09b      	sub	sp, #108	; 0x6c
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	78db      	ldrb	r3, [r3, #3]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d81f      	bhi.n	8002c9a <USB_ActivateEndpoint+0x72>
 8002c5a:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <USB_ActivateEndpoint+0x38>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c8d 	.word	0x08002c8d
 8002c68:	08002ca3 	.word	0x08002ca3
 8002c6c:	08002c7f 	.word	0x08002c7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002c70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002c7c:	e012      	b.n	8002ca4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002c7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c82:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002c86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002c8a:	e00b      	b.n	8002ca4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002c8c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c94:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002c98:	e004      	b.n	8002ca4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002ca0:	e000      	b.n	8002ca4 <USB_ActivateEndpoint+0x7c>
      break;
 8002ca2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	441a      	add	r2, r3
 8002cf4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	7b1b      	ldrb	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f040 8149 	bne.w	8002fa8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	785b      	ldrb	r3, [r3, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8084 	beq.w	8002e28 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	4413      	add	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	011a      	lsls	r2, r3, #4
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	88db      	ldrh	r3, [r3, #6]
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	81fb      	strh	r3, [r7, #14]
 8002d62:	89fb      	ldrh	r3, [r7, #14]
 8002d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01b      	beq.n	8002da4 <USB_ActivateEndpoint+0x17c>
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d82:	81bb      	strh	r3, [r7, #12]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	441a      	add	r2, r3
 8002d8e:	89bb      	ldrh	r3, [r7, #12]
 8002d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	78db      	ldrb	r3, [r3, #3]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d020      	beq.n	8002dee <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc2:	813b      	strh	r3, [r7, #8]
 8002dc4:	893b      	ldrh	r3, [r7, #8]
 8002dc6:	f083 0320 	eor.w	r3, r3, #32
 8002dca:	813b      	strh	r3, [r7, #8]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	441a      	add	r2, r3
 8002dd6:	893b      	ldrh	r3, [r7, #8]
 8002dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	8013      	strh	r3, [r2, #0]
 8002dec:	e27f      	b.n	80032ee <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e04:	817b      	strh	r3, [r7, #10]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	441a      	add	r2, r3
 8002e10:	897b      	ldrh	r3, [r7, #10]
 8002e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	8013      	strh	r3, [r2, #0]
 8002e26:	e262      	b.n	80032ee <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	4413      	add	r3, r2
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	011a      	lsls	r2, r3, #4
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	88db      	ldrh	r3, [r3, #6]
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	4413      	add	r3, r2
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	011a      	lsls	r2, r3, #4
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	4413      	add	r3, r2
 8002e7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e7e:	623b      	str	r3, [r7, #32]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d112      	bne.n	8002eae <USB_ActivateEndpoint+0x286>
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	801a      	strh	r2, [r3, #0]
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	e02f      	b.n	8002f0e <USB_ActivateEndpoint+0x2e6>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b3e      	cmp	r3, #62	; 0x3e
 8002eb4:	d813      	bhi.n	8002ede <USB_ActivateEndpoint+0x2b6>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <USB_ActivateEndpoint+0x2a8>
 8002eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ecc:	3301      	adds	r3, #1
 8002ece:	663b      	str	r3, [r7, #96]	; 0x60
 8002ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	029b      	lsls	r3, r3, #10
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	801a      	strh	r2, [r3, #0]
 8002edc:	e017      	b.n	8002f0e <USB_ActivateEndpoint+0x2e6>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <USB_ActivateEndpoint+0x2d0>
 8002ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	029b      	lsls	r3, r3, #10
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	83fb      	strh	r3, [r7, #30]
 8002f1c:	8bfb      	ldrh	r3, [r7, #30]
 8002f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01b      	beq.n	8002f5e <USB_ActivateEndpoint+0x336>
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3c:	83bb      	strh	r3, [r7, #28]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	441a      	add	r2, r3
 8002f48:	8bbb      	ldrh	r3, [r7, #28]
 8002f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f74:	837b      	strh	r3, [r7, #26]
 8002f76:	8b7b      	ldrh	r3, [r7, #26]
 8002f78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f7c:	837b      	strh	r3, [r7, #26]
 8002f7e:	8b7b      	ldrh	r3, [r7, #26]
 8002f80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f84:	837b      	strh	r3, [r7, #26]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	441a      	add	r2, r3
 8002f90:	8b7b      	ldrh	r3, [r7, #26]
 8002f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	8013      	strh	r3, [r2, #0]
 8002fa6:	e1a2      	b.n	80032ee <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	441a      	add	r2, r3
 8002fcc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff4:	4413      	add	r3, r2
 8002ff6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	011a      	lsls	r2, r3, #4
 8002ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003000:	4413      	add	r3, r2
 8003002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003006:	657b      	str	r3, [r7, #84]	; 0x54
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	891b      	ldrh	r3, [r3, #8]
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	b29b      	uxth	r3, r3
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003016:	801a      	strh	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	653b      	str	r3, [r7, #80]	; 0x50
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003022:	b29b      	uxth	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003028:	4413      	add	r3, r2
 800302a:	653b      	str	r3, [r7, #80]	; 0x50
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	011a      	lsls	r2, r3, #4
 8003032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003034:	4413      	add	r3, r2
 8003036:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800303a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	895b      	ldrh	r3, [r3, #10]
 8003040:	085b      	lsrs	r3, r3, #1
 8003042:	b29b      	uxth	r3, r3
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	785b      	ldrb	r3, [r3, #1]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f040 8091 	bne.w	8003178 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003064:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01b      	beq.n	80030a6 <USB_ActivateEndpoint+0x47e>
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003084:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	441a      	add	r2, r3
 8003090:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800309a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800309e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	873b      	strh	r3, [r7, #56]	; 0x38
 80030b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01b      	beq.n	80030f6 <USB_ActivateEndpoint+0x4ce>
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	441a      	add	r2, r3
 80030e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800310e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003110:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003114:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003116:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003118:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800311c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	441a      	add	r2, r3
 8003128:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800312a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800312e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800313a:	b29b      	uxth	r3, r3
 800313c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003154:	867b      	strh	r3, [r7, #50]	; 0x32
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	441a      	add	r2, r3
 8003160:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800316a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003172:	b29b      	uxth	r3, r3
 8003174:	8013      	strh	r3, [r2, #0]
 8003176:	e0ba      	b.n	80032ee <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003188:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800318c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01d      	beq.n	80031d0 <USB_ActivateEndpoint+0x5a8>
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031aa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80031e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01d      	beq.n	8003228 <USB_ActivateEndpoint+0x600>
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	441a      	add	r2, r3
 8003210:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800321c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003220:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003224:	b29b      	uxth	r3, r3
 8003226:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	78db      	ldrb	r3, [r3, #3]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d024      	beq.n	800327a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29b      	uxth	r3, r3
 800323e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003246:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800324a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800324e:	f083 0320 	eor.w	r3, r3, #32
 8003252:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	441a      	add	r2, r3
 8003260:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800326c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003274:	b29b      	uxth	r3, r3
 8003276:	8013      	strh	r3, [r2, #0]
 8003278:	e01d      	b.n	80032b6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003290:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	441a      	add	r2, r3
 800329e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80032a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	441a      	add	r2, r3
 80032d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80032da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80032ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	376c      	adds	r7, #108	; 0x6c
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b08d      	sub	sp, #52	; 0x34
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	7b1b      	ldrb	r3, [r3, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 808e 	bne.w	800342c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	785b      	ldrb	r3, [r3, #1]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d044      	beq.n	80033a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	81bb      	strh	r3, [r7, #12]
 8003326:	89bb      	ldrh	r3, [r7, #12]
 8003328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01b      	beq.n	8003368 <USB_DeactivateEndpoint+0x6c>
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	b29b      	uxth	r3, r3
 800333e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003346:	817b      	strh	r3, [r7, #10]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	441a      	add	r2, r3
 8003352:	897b      	ldrh	r3, [r7, #10]
 8003354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800335c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003360:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003364:	b29b      	uxth	r3, r3
 8003366:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800337e:	813b      	strh	r3, [r7, #8]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	441a      	add	r2, r3
 800338a:	893b      	ldrh	r3, [r7, #8]
 800338c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339c:	b29b      	uxth	r3, r3
 800339e:	8013      	strh	r3, [r2, #0]
 80033a0:	e192      	b.n	80036c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	827b      	strh	r3, [r7, #18]
 80033b0:	8a7b      	ldrh	r3, [r7, #18]
 80033b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01b      	beq.n	80033f2 <USB_DeactivateEndpoint+0xf6>
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d0:	823b      	strh	r3, [r7, #16]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	441a      	add	r2, r3
 80033dc:	8a3b      	ldrh	r3, [r7, #16]
 80033de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	81fb      	strh	r3, [r7, #14]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	441a      	add	r2, r3
 8003414:	89fb      	ldrh	r3, [r7, #14]
 8003416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800341a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800341e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003426:	b29b      	uxth	r3, r3
 8003428:	8013      	strh	r3, [r2, #0]
 800342a:	e14d      	b.n	80036c8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	785b      	ldrb	r3, [r3, #1]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 80a5 	bne.w	8003580 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	843b      	strh	r3, [r7, #32]
 8003444:	8c3b      	ldrh	r3, [r7, #32]
 8003446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01b      	beq.n	8003486 <USB_DeactivateEndpoint+0x18a>
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003464:	83fb      	strh	r3, [r7, #30]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	441a      	add	r2, r3
 8003470:	8bfb      	ldrh	r3, [r7, #30]
 8003472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800347a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800347e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003482:	b29b      	uxth	r3, r3
 8003484:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	83bb      	strh	r3, [r7, #28]
 8003494:	8bbb      	ldrh	r3, [r7, #28]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01b      	beq.n	80034d6 <USB_DeactivateEndpoint+0x1da>
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b4:	837b      	strh	r3, [r7, #26]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	441a      	add	r2, r3
 80034c0:	8b7b      	ldrh	r3, [r7, #26]
 80034c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ec:	833b      	strh	r3, [r7, #24]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	441a      	add	r2, r3
 80034f8:	8b3b      	ldrh	r3, [r7, #24]
 80034fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003506:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800350a:	b29b      	uxth	r3, r3
 800350c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003524:	82fb      	strh	r3, [r7, #22]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	441a      	add	r2, r3
 8003530:	8afb      	ldrh	r3, [r7, #22]
 8003532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800353a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003542:	b29b      	uxth	r3, r3
 8003544:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800355c:	82bb      	strh	r3, [r7, #20]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	441a      	add	r2, r3
 8003568:	8abb      	ldrh	r3, [r7, #20]
 800356a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800356e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800357a:	b29b      	uxth	r3, r3
 800357c:	8013      	strh	r3, [r2, #0]
 800357e:	e0a3      	b.n	80036c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800358e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01b      	beq.n	80035d0 <USB_DeactivateEndpoint+0x2d4>
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	441a      	add	r2, r3
 80035ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80035bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80035de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01b      	beq.n	8003620 <USB_DeactivateEndpoint+0x324>
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	441a      	add	r2, r3
 800360a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800360c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003618:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800361c:	b29b      	uxth	r3, r3
 800361e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	441a      	add	r2, r3
 8003642:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800364c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003654:	b29b      	uxth	r3, r3
 8003656:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	441a      	add	r2, r3
 800367a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800367c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368c:	b29b      	uxth	r3, r3
 800368e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	b29b      	uxth	r3, r3
 800369e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	441a      	add	r2, r3
 80036b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3734      	adds	r7, #52	; 0x34
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr

080036d4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b0c4      	sub	sp, #272	; 0x110
 80036d8:	af00      	add	r7, sp, #0
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	6018      	str	r0, [r3, #0]
 80036de:	463b      	mov	r3, r7
 80036e0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036e2:	463b      	mov	r3, r7
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	785b      	ldrb	r3, [r3, #1]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	f040 8557 	bne.w	800419c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80036ee:	463b      	mov	r3, r7
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	463b      	mov	r3, r7
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d905      	bls.n	800370a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80036fe:	463b      	mov	r3, r7
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003708:	e004      	b.n	8003714 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800370a:	463b      	mov	r3, r7
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003714:	463b      	mov	r3, r7
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	7b1b      	ldrb	r3, [r3, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d12c      	bne.n	8003778 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800371e:	463b      	mov	r3, r7
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6959      	ldr	r1, [r3, #20]
 8003724:	463b      	mov	r3, r7
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	88da      	ldrh	r2, [r3, #6]
 800372a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800372e:	b29b      	uxth	r3, r3
 8003730:	1d38      	adds	r0, r7, #4
 8003732:	6800      	ldr	r0, [r0, #0]
 8003734:	f001 fa2c 	bl	8004b90 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003746:	b29b      	uxth	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	4413      	add	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	463b      	mov	r3, r7
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	011a      	lsls	r2, r3, #4
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	4413      	add	r3, r2
 800375c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003760:	f107 0310 	add.w	r3, r7, #16
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800376a:	b29a      	uxth	r2, r3
 800376c:	f107 0310 	add.w	r3, r7, #16
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	801a      	strh	r2, [r3, #0]
 8003774:	f000 bcdd 	b.w	8004132 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003778:	463b      	mov	r3, r7
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	78db      	ldrb	r3, [r3, #3]
 800377e:	2b02      	cmp	r3, #2
 8003780:	f040 8347 	bne.w	8003e12 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003784:	463b      	mov	r3, r7
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6a1a      	ldr	r2, [r3, #32]
 800378a:	463b      	mov	r3, r7
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	429a      	cmp	r2, r3
 8003792:	f240 82eb 	bls.w	8003d6c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003796:	1d3b      	adds	r3, r7, #4
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	463b      	mov	r3, r7
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	463b      	mov	r3, r7
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	441a      	add	r2, r3
 80037c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80037c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80037d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80037da:	463b      	mov	r3, r7
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a1a      	ldr	r2, [r3, #32]
 80037e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e4:	1ad2      	subs	r2, r2, r3
 80037e6:	463b      	mov	r3, r7
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80037ec:	1d3b      	adds	r3, r7, #4
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	463b      	mov	r3, r7
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8159 	beq.w	8003aba <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003808:	1d3b      	adds	r3, r7, #4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	637b      	str	r3, [r7, #52]	; 0x34
 800380e:	463b      	mov	r3, r7
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	785b      	ldrb	r3, [r3, #1]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d164      	bne.n	80038e2 <USB_EPStartXfer+0x20e>
 8003818:	1d3b      	adds	r3, r7, #4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003826:	b29b      	uxth	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	4413      	add	r3, r2
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003830:	463b      	mov	r3, r7
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	011a      	lsls	r2, r3, #4
 8003838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383a:	4413      	add	r3, r2
 800383c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003840:	62bb      	str	r3, [r7, #40]	; 0x28
 8003842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d112      	bne.n	8003870 <USB_EPStartXfer+0x19c>
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003854:	b29a      	uxth	r2, r3
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	801a      	strh	r2, [r3, #0]
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	b29b      	uxth	r3, r3
 8003860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003868:	b29a      	uxth	r2, r3
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	801a      	strh	r2, [r3, #0]
 800386e:	e054      	b.n	800391a <USB_EPStartXfer+0x246>
 8003870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003874:	2b3e      	cmp	r3, #62	; 0x3e
 8003876:	d817      	bhi.n	80038a8 <USB_EPStartXfer+0x1d4>
 8003878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <USB_EPStartXfer+0x1c4>
 800388e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003892:	3301      	adds	r3, #1
 8003894:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800389c:	b29b      	uxth	r3, r3
 800389e:	029b      	lsls	r3, r3, #10
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	e038      	b.n	800391a <USB_EPStartXfer+0x246>
 80038a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ac:	095b      	lsrs	r3, r3, #5
 80038ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <USB_EPStartXfer+0x1f4>
 80038be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	029b      	lsls	r3, r3, #10
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038da:	b29a      	uxth	r2, r3
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	801a      	strh	r2, [r3, #0]
 80038e0:	e01b      	b.n	800391a <USB_EPStartXfer+0x246>
 80038e2:	463b      	mov	r3, r7
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	785b      	ldrb	r3, [r3, #1]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d116      	bne.n	800391a <USB_EPStartXfer+0x246>
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fa:	4413      	add	r3, r2
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
 80038fe:	463b      	mov	r3, r7
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	011a      	lsls	r2, r3, #4
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	4413      	add	r3, r2
 800390a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800390e:	633b      	str	r3, [r7, #48]	; 0x30
 8003910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003914:	b29a      	uxth	r2, r3
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800391a:	463b      	mov	r3, r7
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	895b      	ldrh	r3, [r3, #10]
 8003920:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003924:	463b      	mov	r3, r7
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6959      	ldr	r1, [r3, #20]
 800392a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800392e:	b29b      	uxth	r3, r3
 8003930:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003934:	1d38      	adds	r0, r7, #4
 8003936:	6800      	ldr	r0, [r0, #0]
 8003938:	f001 f92a 	bl	8004b90 <USB_WritePMA>
            ep->xfer_buff += len;
 800393c:	463b      	mov	r3, r7
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003946:	441a      	add	r2, r3
 8003948:	463b      	mov	r3, r7
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800394e:	463b      	mov	r3, r7
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6a1a      	ldr	r2, [r3, #32]
 8003954:	463b      	mov	r3, r7
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	429a      	cmp	r2, r3
 800395c:	d909      	bls.n	8003972 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800395e:	463b      	mov	r3, r7
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6a1a      	ldr	r2, [r3, #32]
 8003964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003968:	1ad2      	subs	r2, r2, r3
 800396a:	463b      	mov	r3, r7
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	621a      	str	r2, [r3, #32]
 8003970:	e008      	b.n	8003984 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003972:	463b      	mov	r3, r7
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800397c:	463b      	mov	r3, r7
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2200      	movs	r2, #0
 8003982:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003984:	463b      	mov	r3, r7
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d164      	bne.n	8003a58 <USB_EPStartXfer+0x384>
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399c:	b29b      	uxth	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	463b      	mov	r3, r7
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	011a      	lsls	r2, r3, #4
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d112      	bne.n	80039e6 <USB_EPStartXfer+0x312>
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	801a      	strh	r2, [r3, #0]
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039de:	b29a      	uxth	r2, r3
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	801a      	strh	r2, [r3, #0]
 80039e4:	e057      	b.n	8003a96 <USB_EPStartXfer+0x3c2>
 80039e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ea:	2b3e      	cmp	r3, #62	; 0x3e
 80039ec:	d817      	bhi.n	8003a1e <USB_EPStartXfer+0x34a>
 80039ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <USB_EPStartXfer+0x33a>
 8003a04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a08:	3301      	adds	r3, #1
 8003a0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	029b      	lsls	r3, r3, #10
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	801a      	strh	r2, [r3, #0]
 8003a1c:	e03b      	b.n	8003a96 <USB_EPStartXfer+0x3c2>
 8003a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <USB_EPStartXfer+0x36a>
 8003a34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	029b      	lsls	r3, r3, #10
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	801a      	strh	r2, [r3, #0]
 8003a56:	e01e      	b.n	8003a96 <USB_EPStartXfer+0x3c2>
 8003a58:	463b      	mov	r3, r7
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d119      	bne.n	8003a96 <USB_EPStartXfer+0x3c2>
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
 8003a68:	1d3b      	adds	r3, r7, #4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	4413      	add	r3, r2
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7a:	463b      	mov	r3, r7
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	011a      	lsls	r2, r3, #4
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	4413      	add	r3, r2
 8003a86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a8a:	623b      	str	r3, [r7, #32]
 8003a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003a96:	463b      	mov	r3, r7
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	891b      	ldrh	r3, [r3, #8]
 8003a9c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003aa0:	463b      	mov	r3, r7
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6959      	ldr	r1, [r3, #20]
 8003aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003ab0:	1d38      	adds	r0, r7, #4
 8003ab2:	6800      	ldr	r0, [r0, #0]
 8003ab4:	f001 f86c 	bl	8004b90 <USB_WritePMA>
 8003ab8:	e33b      	b.n	8004132 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003aba:	463b      	mov	r3, r7
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	785b      	ldrb	r3, [r3, #1]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d164      	bne.n	8003b8e <USB_EPStartXfer+0x4ba>
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad8:	4413      	add	r3, r2
 8003ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003adc:	463b      	mov	r3, r7
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	011a      	lsls	r2, r3, #4
 8003ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003aec:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d112      	bne.n	8003b1c <USB_EPStartXfer+0x448>
 8003af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b04:	801a      	strh	r2, [r3, #0]
 8003b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b18:	801a      	strh	r2, [r3, #0]
 8003b1a:	e057      	b.n	8003bcc <USB_EPStartXfer+0x4f8>
 8003b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b20:	2b3e      	cmp	r3, #62	; 0x3e
 8003b22:	d817      	bhi.n	8003b54 <USB_EPStartXfer+0x480>
 8003b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <USB_EPStartXfer+0x470>
 8003b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	029b      	lsls	r3, r3, #10
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	e03b      	b.n	8003bcc <USB_EPStartXfer+0x4f8>
 8003b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <USB_EPStartXfer+0x4a0>
 8003b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	029b      	lsls	r3, r3, #10
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8a:	801a      	strh	r2, [r3, #0]
 8003b8c:	e01e      	b.n	8003bcc <USB_EPStartXfer+0x4f8>
 8003b8e:	463b      	mov	r3, r7
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d119      	bne.n	8003bcc <USB_EPStartXfer+0x4f8>
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	657b      	str	r3, [r7, #84]	; 0x54
 8003b9e:	1d3b      	adds	r3, r7, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bac:	4413      	add	r3, r2
 8003bae:	657b      	str	r3, [r7, #84]	; 0x54
 8003bb0:	463b      	mov	r3, r7
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	011a      	lsls	r2, r3, #4
 8003bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bba:	4413      	add	r3, r2
 8003bbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bc0:	653b      	str	r3, [r7, #80]	; 0x50
 8003bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003bcc:	463b      	mov	r3, r7
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	891b      	ldrh	r3, [r3, #8]
 8003bd2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bd6:	463b      	mov	r3, r7
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6959      	ldr	r1, [r3, #20]
 8003bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003be6:	1d38      	adds	r0, r7, #4
 8003be8:	6800      	ldr	r0, [r0, #0]
 8003bea:	f000 ffd1 	bl	8004b90 <USB_WritePMA>
            ep->xfer_buff += len;
 8003bee:	463b      	mov	r3, r7
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf8:	441a      	add	r2, r3
 8003bfa:	463b      	mov	r3, r7
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003c00:	463b      	mov	r3, r7
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6a1a      	ldr	r2, [r3, #32]
 8003c06:	463b      	mov	r3, r7
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d909      	bls.n	8003c24 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003c10:	463b      	mov	r3, r7
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6a1a      	ldr	r2, [r3, #32]
 8003c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c1a:	1ad2      	subs	r2, r2, r3
 8003c1c:	463b      	mov	r3, r7
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	621a      	str	r2, [r3, #32]
 8003c22:	e008      	b.n	8003c36 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c24:	463b      	mov	r3, r7
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003c2e:	463b      	mov	r3, r7
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2200      	movs	r2, #0
 8003c34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c36:	1d3b      	adds	r3, r7, #4
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c3c:	463b      	mov	r3, r7
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d164      	bne.n	8003d10 <USB_EPStartXfer+0x63c>
 8003c46:	1d3b      	adds	r3, r7, #4
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4c:	1d3b      	adds	r3, r7, #4
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5a:	4413      	add	r3, r2
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5e:	463b      	mov	r3, r7
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	011a      	lsls	r2, r3, #4
 8003c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c68:	4413      	add	r3, r2
 8003c6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d112      	bne.n	8003c9e <USB_EPStartXfer+0x5ca>
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	801a      	strh	r2, [r3, #0]
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	801a      	strh	r2, [r3, #0]
 8003c9c:	e054      	b.n	8003d48 <USB_EPStartXfer+0x674>
 8003c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ca4:	d817      	bhi.n	8003cd6 <USB_EPStartXfer+0x602>
 8003ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003caa:	085b      	lsrs	r3, r3, #1
 8003cac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d004      	beq.n	8003cc6 <USB_EPStartXfer+0x5f2>
 8003cbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	029b      	lsls	r3, r3, #10
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd2:	801a      	strh	r2, [r3, #0]
 8003cd4:	e038      	b.n	8003d48 <USB_EPStartXfer+0x674>
 8003cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d104      	bne.n	8003cf6 <USB_EPStartXfer+0x622>
 8003cec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	029b      	lsls	r3, r3, #10
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	801a      	strh	r2, [r3, #0]
 8003d0e:	e01b      	b.n	8003d48 <USB_EPStartXfer+0x674>
 8003d10:	463b      	mov	r3, r7
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	785b      	ldrb	r3, [r3, #1]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d116      	bne.n	8003d48 <USB_EPStartXfer+0x674>
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d28:	4413      	add	r3, r2
 8003d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	011a      	lsls	r2, r3, #4
 8003d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d36:	4413      	add	r3, r2
 8003d38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003d48:	463b      	mov	r3, r7
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	895b      	ldrh	r3, [r3, #10]
 8003d4e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d52:	463b      	mov	r3, r7
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6959      	ldr	r1, [r3, #20]
 8003d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003d62:	1d38      	adds	r0, r7, #4
 8003d64:	6800      	ldr	r0, [r0, #0]
 8003d66:	f000 ff13 	bl	8004b90 <USB_WritePMA>
 8003d6a:	e1e2      	b.n	8004132 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d90:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	463b      	mov	r3, r7
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	441a      	add	r2, r3
 8003da2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003dba:	1d3b      	adds	r3, r7, #4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc0:	1d3b      	adds	r3, r7, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dce:	4413      	add	r3, r2
 8003dd0:	663b      	str	r3, [r7, #96]	; 0x60
 8003dd2:	463b      	mov	r3, r7
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	011a      	lsls	r2, r3, #4
 8003dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ddc:	4413      	add	r3, r2
 8003dde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003de2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003dee:	463b      	mov	r3, r7
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	891b      	ldrh	r3, [r3, #8]
 8003df4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003df8:	463b      	mov	r3, r7
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6959      	ldr	r1, [r3, #20]
 8003dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e08:	1d38      	adds	r0, r7, #4
 8003e0a:	6800      	ldr	r0, [r0, #0]
 8003e0c:	f000 fec0 	bl	8004b90 <USB_WritePMA>
 8003e10:	e18f      	b.n	8004132 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003e12:	1d3b      	adds	r3, r7, #4
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	463b      	mov	r3, r7
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 808f 	beq.w	8003f4c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e2e:	1d3b      	adds	r3, r7, #4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e34:	463b      	mov	r3, r7
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d164      	bne.n	8003f08 <USB_EPStartXfer+0x834>
 8003e3e:	1d3b      	adds	r3, r7, #4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	673b      	str	r3, [r7, #112]	; 0x70
 8003e44:	1d3b      	adds	r3, r7, #4
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e52:	4413      	add	r3, r2
 8003e54:	673b      	str	r3, [r7, #112]	; 0x70
 8003e56:	463b      	mov	r3, r7
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	011a      	lsls	r2, r3, #4
 8003e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e60:	4413      	add	r3, r2
 8003e62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d112      	bne.n	8003e96 <USB_EPStartXfer+0x7c2>
 8003e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7e:	801a      	strh	r2, [r3, #0]
 8003e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e92:	801a      	strh	r2, [r3, #0]
 8003e94:	e054      	b.n	8003f40 <USB_EPStartXfer+0x86c>
 8003e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e9a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e9c:	d817      	bhi.n	8003ece <USB_EPStartXfer+0x7fa>
 8003e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <USB_EPStartXfer+0x7ea>
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb8:	3301      	adds	r3, #1
 8003eba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	029b      	lsls	r3, r3, #10
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eca:	801a      	strh	r2, [r3, #0]
 8003ecc:	e038      	b.n	8003f40 <USB_EPStartXfer+0x86c>
 8003ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <USB_EPStartXfer+0x81a>
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	029b      	lsls	r3, r3, #10
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f04:	801a      	strh	r2, [r3, #0]
 8003f06:	e01b      	b.n	8003f40 <USB_EPStartXfer+0x86c>
 8003f08:	463b      	mov	r3, r7
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	785b      	ldrb	r3, [r3, #1]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d116      	bne.n	8003f40 <USB_EPStartXfer+0x86c>
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f20:	4413      	add	r3, r2
 8003f22:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f24:	463b      	mov	r3, r7
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	011a      	lsls	r2, r3, #4
 8003f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2e:	4413      	add	r3, r2
 8003f30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f34:	677b      	str	r3, [r7, #116]	; 0x74
 8003f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f3e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003f40:	463b      	mov	r3, r7
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	895b      	ldrh	r3, [r3, #10]
 8003f46:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8003f4a:	e097      	b.n	800407c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	785b      	ldrb	r3, [r3, #1]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d168      	bne.n	8004028 <USB_EPStartXfer+0x954>
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f6e:	4413      	add	r3, r2
 8003f70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f74:	463b      	mov	r3, r7
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	011a      	lsls	r2, r3, #4
 8003f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f80:	4413      	add	r3, r2
 8003f82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d112      	bne.n	8003fb6 <USB_EPStartXfer+0x8e2>
 8003f90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fb2:	801a      	strh	r2, [r3, #0]
 8003fb4:	e05d      	b.n	8004072 <USB_EPStartXfer+0x99e>
 8003fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fba:	2b3e      	cmp	r3, #62	; 0x3e
 8003fbc:	d817      	bhi.n	8003fee <USB_EPStartXfer+0x91a>
 8003fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <USB_EPStartXfer+0x90a>
 8003fd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003fd8:	3301      	adds	r3, #1
 8003fda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	029b      	lsls	r3, r3, #10
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	e041      	b.n	8004072 <USB_EPStartXfer+0x99e>
 8003fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	2b00      	cmp	r3, #0
 8004002:	d104      	bne.n	800400e <USB_EPStartXfer+0x93a>
 8004004:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004008:	3b01      	subs	r3, #1
 800400a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800400e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004012:	b29b      	uxth	r3, r3
 8004014:	029b      	lsls	r3, r3, #10
 8004016:	b29b      	uxth	r3, r3
 8004018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800401c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004020:	b29a      	uxth	r2, r3
 8004022:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004024:	801a      	strh	r2, [r3, #0]
 8004026:	e024      	b.n	8004072 <USB_EPStartXfer+0x99e>
 8004028:	463b      	mov	r3, r7
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	785b      	ldrb	r3, [r3, #1]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d11f      	bne.n	8004072 <USB_EPStartXfer+0x99e>
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800403a:	1d3b      	adds	r3, r7, #4
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004042:	b29b      	uxth	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800404a:	4413      	add	r3, r2
 800404c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004050:	463b      	mov	r3, r7
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	011a      	lsls	r2, r3, #4
 8004058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800405c:	4413      	add	r3, r2
 800405e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406a:	b29a      	uxth	r2, r3
 800406c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004070:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004072:	463b      	mov	r3, r7
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	891b      	ldrh	r3, [r3, #8]
 8004078:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800407c:	463b      	mov	r3, r7
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6959      	ldr	r1, [r3, #20]
 8004082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004086:	b29b      	uxth	r3, r3
 8004088:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800408c:	1d38      	adds	r0, r7, #4
 800408e:	6800      	ldr	r0, [r0, #0]
 8004090:	f000 fd7e 	bl	8004b90 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004094:	463b      	mov	r3, r7
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	785b      	ldrb	r3, [r3, #1]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d122      	bne.n	80040e4 <USB_EPStartXfer+0xa10>
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	463b      	mov	r3, r7
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80040bc:	1d3b      	adds	r3, r7, #4
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	463b      	mov	r3, r7
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	441a      	add	r2, r3
 80040ca:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80040ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040de:	b29b      	uxth	r3, r3
 80040e0:	8013      	strh	r3, [r2, #0]
 80040e2:	e026      	b.n	8004132 <USB_EPStartXfer+0xa5e>
 80040e4:	463b      	mov	r3, r7
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	785b      	ldrb	r3, [r3, #1]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d121      	bne.n	8004132 <USB_EPStartXfer+0xa5e>
 80040ee:	1d3b      	adds	r3, r7, #4
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	463b      	mov	r3, r7
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004108:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800410c:	1d3b      	adds	r3, r7, #4
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	463b      	mov	r3, r7
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	441a      	add	r2, r3
 800411a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800411e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800412a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412e:	b29b      	uxth	r3, r3
 8004130:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	463b      	mov	r3, r7
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f107 020e 	add.w	r2, r7, #14
 8004148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004150:	8013      	strh	r3, [r2, #0]
 8004152:	f107 030e 	add.w	r3, r7, #14
 8004156:	f107 020e 	add.w	r2, r7, #14
 800415a:	8812      	ldrh	r2, [r2, #0]
 800415c:	f082 0210 	eor.w	r2, r2, #16
 8004160:	801a      	strh	r2, [r3, #0]
 8004162:	f107 030e 	add.w	r3, r7, #14
 8004166:	f107 020e 	add.w	r2, r7, #14
 800416a:	8812      	ldrh	r2, [r2, #0]
 800416c:	f082 0220 	eor.w	r2, r2, #32
 8004170:	801a      	strh	r2, [r3, #0]
 8004172:	1d3b      	adds	r3, r7, #4
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	463b      	mov	r3, r7
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	f107 030e 	add.w	r3, r7, #14
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800418a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800418e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004196:	b29b      	uxth	r3, r3
 8004198:	8013      	strh	r3, [r2, #0]
 800419a:	e3b5      	b.n	8004908 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800419c:	463b      	mov	r3, r7
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	7b1b      	ldrb	r3, [r3, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f040 8090 	bne.w	80042c8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80041a8:	463b      	mov	r3, r7
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	463b      	mov	r3, r7
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d90e      	bls.n	80041d6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80041b8:	463b      	mov	r3, r7
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80041c2:	463b      	mov	r3, r7
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041cc:	1ad2      	subs	r2, r2, r3
 80041ce:	463b      	mov	r3, r7
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	619a      	str	r2, [r3, #24]
 80041d4:	e008      	b.n	80041e8 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80041d6:	463b      	mov	r3, r7
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80041e0:	463b      	mov	r3, r7
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2200      	movs	r2, #0
 80041e6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80041e8:	1d3b      	adds	r3, r7, #4
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041f0:	1d3b      	adds	r3, r7, #4
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004200:	4413      	add	r3, r2
 8004202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004206:	463b      	mov	r3, r7
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	011a      	lsls	r2, r3, #4
 800420e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004212:	4413      	add	r3, r2
 8004214:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004218:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800421c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d116      	bne.n	8004252 <USB_EPStartXfer+0xb7e>
 8004224:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004230:	b29a      	uxth	r2, r3
 8004232:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004236:	801a      	strh	r2, [r3, #0]
 8004238:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004248:	b29a      	uxth	r2, r3
 800424a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	e32c      	b.n	80048ac <USB_EPStartXfer+0x11d8>
 8004252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004256:	2b3e      	cmp	r3, #62	; 0x3e
 8004258:	d818      	bhi.n	800428c <USB_EPStartXfer+0xbb8>
 800425a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d004      	beq.n	800427a <USB_EPStartXfer+0xba6>
 8004270:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004274:	3301      	adds	r3, #1
 8004276:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800427a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800427e:	b29b      	uxth	r3, r3
 8004280:	029b      	lsls	r3, r3, #10
 8004282:	b29a      	uxth	r2, r3
 8004284:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	e30f      	b.n	80048ac <USB_EPStartXfer+0x11d8>
 800428c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <USB_EPStartXfer+0xbd8>
 80042a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042a6:	3b01      	subs	r3, #1
 80042a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	029b      	lsls	r3, r3, #10
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042be:	b29a      	uxth	r2, r3
 80042c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042c4:	801a      	strh	r2, [r3, #0]
 80042c6:	e2f1      	b.n	80048ac <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80042c8:	463b      	mov	r3, r7
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	78db      	ldrb	r3, [r3, #3]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	f040 818f 	bne.w	80045f2 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80042d4:	463b      	mov	r3, r7
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	785b      	ldrb	r3, [r3, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d175      	bne.n	80043ca <USB_EPStartXfer+0xcf6>
 80042de:	1d3b      	adds	r3, r7, #4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042f6:	4413      	add	r3, r2
 80042f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042fc:	463b      	mov	r3, r7
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	011a      	lsls	r2, r3, #4
 8004304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004308:	4413      	add	r3, r2
 800430a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800430e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004312:	463b      	mov	r3, r7
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d116      	bne.n	800434a <USB_EPStartXfer+0xc76>
 800431c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004328:	b29a      	uxth	r2, r3
 800432a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800432e:	801a      	strh	r2, [r3, #0]
 8004330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800433c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004340:	b29a      	uxth	r2, r3
 8004342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004346:	801a      	strh	r2, [r3, #0]
 8004348:	e065      	b.n	8004416 <USB_EPStartXfer+0xd42>
 800434a:	463b      	mov	r3, r7
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b3e      	cmp	r3, #62	; 0x3e
 8004352:	d81a      	bhi.n	800438a <USB_EPStartXfer+0xcb6>
 8004354:	463b      	mov	r3, r7
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004360:	463b      	mov	r3, r7
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d004      	beq.n	8004378 <USB_EPStartXfer+0xca4>
 800436e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004372:	3301      	adds	r3, #1
 8004374:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004378:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800437c:	b29b      	uxth	r3, r3
 800437e:	029b      	lsls	r3, r3, #10
 8004380:	b29a      	uxth	r2, r3
 8004382:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	e045      	b.n	8004416 <USB_EPStartXfer+0xd42>
 800438a:	463b      	mov	r3, r7
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004396:	463b      	mov	r3, r7
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <USB_EPStartXfer+0xcda>
 80043a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043a8:	3b01      	subs	r3, #1
 80043aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	029b      	lsls	r3, r3, #10
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043c6:	801a      	strh	r2, [r3, #0]
 80043c8:	e025      	b.n	8004416 <USB_EPStartXfer+0xd42>
 80043ca:	463b      	mov	r3, r7
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d120      	bne.n	8004416 <USB_EPStartXfer+0xd42>
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043dc:	1d3b      	adds	r3, r7, #4
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043ec:	4413      	add	r3, r2
 80043ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043f2:	463b      	mov	r3, r7
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	011a      	lsls	r2, r3, #4
 80043fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043fe:	4413      	add	r3, r2
 8004400:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004408:	463b      	mov	r3, r7
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	b29a      	uxth	r2, r3
 8004410:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800441e:	463b      	mov	r3, r7
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	785b      	ldrb	r3, [r3, #1]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d175      	bne.n	8004514 <USB_EPStartXfer+0xe40>
 8004428:	1d3b      	adds	r3, r7, #4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004430:	1d3b      	adds	r3, r7, #4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004438:	b29b      	uxth	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004440:	4413      	add	r3, r2
 8004442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004446:	463b      	mov	r3, r7
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	011a      	lsls	r2, r3, #4
 800444e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004452:	4413      	add	r3, r2
 8004454:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800445c:	463b      	mov	r3, r7
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d116      	bne.n	8004494 <USB_EPStartXfer+0xdc0>
 8004466:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004472:	b29a      	uxth	r2, r3
 8004474:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448a:	b29a      	uxth	r2, r3
 800448c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	e061      	b.n	8004558 <USB_EPStartXfer+0xe84>
 8004494:	463b      	mov	r3, r7
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b3e      	cmp	r3, #62	; 0x3e
 800449c:	d81a      	bhi.n	80044d4 <USB_EPStartXfer+0xe00>
 800449e:	463b      	mov	r3, r7
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	085b      	lsrs	r3, r3, #1
 80044a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044aa:	463b      	mov	r3, r7
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d004      	beq.n	80044c2 <USB_EPStartXfer+0xdee>
 80044b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044bc:	3301      	adds	r3, #1
 80044be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	029b      	lsls	r3, r3, #10
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044d0:	801a      	strh	r2, [r3, #0]
 80044d2:	e041      	b.n	8004558 <USB_EPStartXfer+0xe84>
 80044d4:	463b      	mov	r3, r7
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044e0:	463b      	mov	r3, r7
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d104      	bne.n	80044f8 <USB_EPStartXfer+0xe24>
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f2:	3b01      	subs	r3, #1
 80044f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	029b      	lsls	r3, r3, #10
 8004500:	b29b      	uxth	r3, r3
 8004502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800450a:	b29a      	uxth	r2, r3
 800450c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004510:	801a      	strh	r2, [r3, #0]
 8004512:	e021      	b.n	8004558 <USB_EPStartXfer+0xe84>
 8004514:	463b      	mov	r3, r7
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	785b      	ldrb	r3, [r3, #1]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d11c      	bne.n	8004558 <USB_EPStartXfer+0xe84>
 800451e:	1d3b      	adds	r3, r7, #4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004526:	b29b      	uxth	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800452e:	4413      	add	r3, r2
 8004530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004534:	463b      	mov	r3, r7
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	011a      	lsls	r2, r3, #4
 800453c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004540:	4413      	add	r3, r2
 8004542:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800454a:	463b      	mov	r3, r7
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	b29a      	uxth	r2, r3
 8004552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004556:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004558:	463b      	mov	r3, r7
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 81a4 	beq.w	80048ac <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004564:	1d3b      	adds	r3, r7, #4
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	463b      	mov	r3, r7
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004578:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800457c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <USB_EPStartXfer+0xebc>
 8004584:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10d      	bne.n	80045ac <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004590:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004598:	2b00      	cmp	r3, #0
 800459a:	f040 8187 	bne.w	80048ac <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800459e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 8180 	bne.w	80048ac <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80045ac:	1d3b      	adds	r3, r7, #4
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	463b      	mov	r3, r7
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80045ca:	1d3b      	adds	r3, r7, #4
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	463b      	mov	r3, r7
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	441a      	add	r2, r3
 80045d8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80045dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	8013      	strh	r3, [r2, #0]
 80045f0:	e15c      	b.n	80048ac <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80045f2:	463b      	mov	r3, r7
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	78db      	ldrb	r3, [r3, #3]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	f040 8155 	bne.w	80048a8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80045fe:	463b      	mov	r3, r7
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699a      	ldr	r2, [r3, #24]
 8004604:	463b      	mov	r3, r7
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	429a      	cmp	r2, r3
 800460c:	d90e      	bls.n	800462c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800460e:	463b      	mov	r3, r7
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004618:	463b      	mov	r3, r7
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004622:	1ad2      	subs	r2, r2, r3
 8004624:	463b      	mov	r3, r7
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	619a      	str	r2, [r3, #24]
 800462a:	e008      	b.n	800463e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800462c:	463b      	mov	r3, r7
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004636:	463b      	mov	r3, r7
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2200      	movs	r2, #0
 800463c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800463e:	463b      	mov	r3, r7
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d16f      	bne.n	8004728 <USB_EPStartXfer+0x1054>
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004650:	1d3b      	adds	r3, r7, #4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004658:	b29b      	uxth	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004660:	4413      	add	r3, r2
 8004662:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004666:	463b      	mov	r3, r7
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	011a      	lsls	r2, r3, #4
 800466e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004672:	4413      	add	r3, r2
 8004674:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800467c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d116      	bne.n	80046b2 <USB_EPStartXfer+0xfde>
 8004684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004690:	b29a      	uxth	r2, r3
 8004692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004696:	801a      	strh	r2, [r3, #0]
 8004698:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046ae:	801a      	strh	r2, [r3, #0]
 80046b0:	e05f      	b.n	8004772 <USB_EPStartXfer+0x109e>
 80046b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b6:	2b3e      	cmp	r3, #62	; 0x3e
 80046b8:	d818      	bhi.n	80046ec <USB_EPStartXfer+0x1018>
 80046ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <USB_EPStartXfer+0x1006>
 80046d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d4:	3301      	adds	r3, #1
 80046d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046de:	b29b      	uxth	r3, r3
 80046e0:	029b      	lsls	r3, r3, #10
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	e042      	b.n	8004772 <USB_EPStartXfer+0x109e>
 80046ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d104      	bne.n	800470c <USB_EPStartXfer+0x1038>
 8004702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004706:	3b01      	subs	r3, #1
 8004708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004710:	b29b      	uxth	r3, r3
 8004712:	029b      	lsls	r3, r3, #10
 8004714:	b29b      	uxth	r3, r3
 8004716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800471a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800471e:	b29a      	uxth	r2, r3
 8004720:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004724:	801a      	strh	r2, [r3, #0]
 8004726:	e024      	b.n	8004772 <USB_EPStartXfer+0x109e>
 8004728:	463b      	mov	r3, r7
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d11f      	bne.n	8004772 <USB_EPStartXfer+0x109e>
 8004732:	1d3b      	adds	r3, r7, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800473a:	1d3b      	adds	r3, r7, #4
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004742:	b29b      	uxth	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800474a:	4413      	add	r3, r2
 800474c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004750:	463b      	mov	r3, r7
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	011a      	lsls	r2, r3, #4
 8004758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800475c:	4413      	add	r3, r2
 800475e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004762:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800476a:	b29a      	uxth	r2, r3
 800476c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800477a:	463b      	mov	r3, r7
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	785b      	ldrb	r3, [r3, #1]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d16f      	bne.n	8004864 <USB_EPStartXfer+0x1190>
 8004784:	1d3b      	adds	r3, r7, #4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800478c:	1d3b      	adds	r3, r7, #4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004794:	b29b      	uxth	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800479c:	4413      	add	r3, r2
 800479e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047a2:	463b      	mov	r3, r7
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	011a      	lsls	r2, r3, #4
 80047aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047ae:	4413      	add	r3, r2
 80047b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80047b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d116      	bne.n	80047ee <USB_EPStartXfer+0x111a>
 80047c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047d2:	801a      	strh	r2, [r3, #0]
 80047d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047ea:	801a      	strh	r2, [r3, #0]
 80047ec:	e05e      	b.n	80048ac <USB_EPStartXfer+0x11d8>
 80047ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f2:	2b3e      	cmp	r3, #62	; 0x3e
 80047f4:	d818      	bhi.n	8004828 <USB_EPStartXfer+0x1154>
 80047f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d004      	beq.n	8004816 <USB_EPStartXfer+0x1142>
 800480c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004810:	3301      	adds	r3, #1
 8004812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800481a:	b29b      	uxth	r3, r3
 800481c:	029b      	lsls	r3, r3, #10
 800481e:	b29a      	uxth	r2, r3
 8004820:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	e041      	b.n	80048ac <USB_EPStartXfer+0x11d8>
 8004828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004836:	f003 031f 	and.w	r3, r3, #31
 800483a:	2b00      	cmp	r3, #0
 800483c:	d104      	bne.n	8004848 <USB_EPStartXfer+0x1174>
 800483e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004842:	3b01      	subs	r3, #1
 8004844:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800484c:	b29b      	uxth	r3, r3
 800484e:	029b      	lsls	r3, r3, #10
 8004850:	b29b      	uxth	r3, r3
 8004852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800485a:	b29a      	uxth	r2, r3
 800485c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004860:	801a      	strh	r2, [r3, #0]
 8004862:	e023      	b.n	80048ac <USB_EPStartXfer+0x11d8>
 8004864:	463b      	mov	r3, r7
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	785b      	ldrb	r3, [r3, #1]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d11e      	bne.n	80048ac <USB_EPStartXfer+0x11d8>
 800486e:	1d3b      	adds	r3, r7, #4
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004876:	b29b      	uxth	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800487e:	4413      	add	r3, r2
 8004880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004884:	463b      	mov	r3, r7
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	011a      	lsls	r2, r3, #4
 800488c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004890:	4413      	add	r3, r2
 8004892:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004896:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800489a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800489e:	b29a      	uxth	r2, r3
 80048a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048a4:	801a      	strh	r2, [r3, #0]
 80048a6:	e001      	b.n	80048ac <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e02e      	b.n	800490a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	463b      	mov	r3, r7
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80048ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80048ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048d2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80048d6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80048da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048de:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80048e2:	1d3b      	adds	r3, r7, #4
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	463b      	mov	r3, r7
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80048f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004904:	b29b      	uxth	r3, r3
 8004906:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	785b      	ldrb	r3, [r3, #1]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d020      	beq.n	8004968 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b29b      	uxth	r3, r3
 8004934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493c:	81bb      	strh	r3, [r7, #12]
 800493e:	89bb      	ldrh	r3, [r7, #12]
 8004940:	f083 0310 	eor.w	r3, r3, #16
 8004944:	81bb      	strh	r3, [r7, #12]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	441a      	add	r2, r3
 8004950:	89bb      	ldrh	r3, [r7, #12]
 8004952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004962:	b29b      	uxth	r3, r3
 8004964:	8013      	strh	r3, [r2, #0]
 8004966:	e01f      	b.n	80049a8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	81fb      	strh	r3, [r7, #14]
 8004980:	89fb      	ldrh	r3, [r7, #14]
 8004982:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004986:	81fb      	strh	r3, [r7, #14]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	441a      	add	r2, r3
 8004992:	89fb      	ldrh	r3, [r7, #14]
 8004994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800499c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr

080049b4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	7b1b      	ldrb	r3, [r3, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 809d 	bne.w	8004b02 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d04c      	beq.n	8004a6a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	823b      	strh	r3, [r7, #16]
 80049de:	8a3b      	ldrh	r3, [r7, #16]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01b      	beq.n	8004a20 <USB_EPClearStall+0x6c>
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	81fb      	strh	r3, [r7, #14]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	441a      	add	r2, r3
 8004a0a:	89fb      	ldrh	r3, [r7, #14]
 8004a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	78db      	ldrb	r3, [r3, #3]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d06c      	beq.n	8004b02 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a3e:	81bb      	strh	r3, [r7, #12]
 8004a40:	89bb      	ldrh	r3, [r7, #12]
 8004a42:	f083 0320 	eor.w	r3, r3, #32
 8004a46:	81bb      	strh	r3, [r7, #12]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	441a      	add	r2, r3
 8004a52:	89bb      	ldrh	r3, [r7, #12]
 8004a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	8013      	strh	r3, [r2, #0]
 8004a68:	e04b      	b.n	8004b02 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	82fb      	strh	r3, [r7, #22]
 8004a78:	8afb      	ldrh	r3, [r7, #22]
 8004a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01b      	beq.n	8004aba <USB_EPClearStall+0x106>
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a98:	82bb      	strh	r3, [r7, #20]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	441a      	add	r2, r3
 8004aa4:	8abb      	ldrh	r3, [r7, #20]
 8004aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad0:	827b      	strh	r3, [r7, #18]
 8004ad2:	8a7b      	ldrh	r3, [r7, #18]
 8004ad4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ad8:	827b      	strh	r3, [r7, #18]
 8004ada:	8a7b      	ldrh	r3, [r7, #18]
 8004adc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ae0:	827b      	strh	r3, [r7, #18]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	441a      	add	r2, r3
 8004aec:	8a7b      	ldrh	r3, [r7, #18]
 8004aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr

08004b0e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d103      	bne.n	8004b28 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2280      	movs	r2, #128	; 0x80
 8004b24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr

08004b5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b08d      	sub	sp, #52	; 0x34
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	80fb      	strh	r3, [r7, #6]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004ba6:	88bb      	ldrh	r3, [r7, #4]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	005a      	lsls	r2, r3, #1
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc8:	e01e      	b.n	8004c08 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	461a      	mov	r2, r3
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	3302      	adds	r3, #2
 8004bfa:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	3301      	adds	r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	3b01      	subs	r3, #1
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1dd      	bne.n	8004bca <USB_WritePMA+0x3a>
  }
}
 8004c0e:	bf00      	nop
 8004c10:	3734      	adds	r7, #52	; 0x34
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b08b      	sub	sp, #44	; 0x2c
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	4611      	mov	r1, r2
 8004c24:	461a      	mov	r2, r3
 8004c26:	460b      	mov	r3, r1
 8004c28:	80fb      	strh	r3, [r7, #6]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004c2e:	88bb      	ldrh	r3, [r7, #4]
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	005a      	lsls	r2, r3, #1
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c4a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c50:	e01b      	b.n	8004c8a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	0a1b      	lsrs	r3, r3, #8
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	3302      	adds	r3, #2
 8004c82:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	3b01      	subs	r3, #1
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e0      	bne.n	8004c52 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004c90:	88bb      	ldrh	r3, [r7, #4]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	701a      	strb	r2, [r3, #0]
  }
}
 8004cac:	bf00      	nop
 8004cae:	372c      	adds	r7, #44	; 0x2c
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	7c1b      	ldrb	r3, [r3, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d115      	bne.n	8004cfa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	2181      	movs	r1, #129	; 0x81
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f004 fb09 	bl	80092ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	2101      	movs	r1, #1
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f004 faff 	bl	80092ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004cf8:	e012      	b.n	8004d20 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004cfa:	2340      	movs	r3, #64	; 0x40
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	2181      	movs	r1, #129	; 0x81
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f004 faf4 	bl	80092ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d0c:	2340      	movs	r3, #64	; 0x40
 8004d0e:	2202      	movs	r2, #2
 8004d10:	2101      	movs	r1, #1
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f004 faeb 	bl	80092ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d20:	2308      	movs	r3, #8
 8004d22:	2203      	movs	r2, #3
 8004d24:	2182      	movs	r1, #130	; 0x82
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f004 fae1 	bl	80092ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d32:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d36:	f004 fc01 	bl	800953c <USBD_static_malloc>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d102      	bne.n	8004d52 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
 8004d50:	e026      	b.n	8004da0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d58:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	7c1b      	ldrb	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d86:	2101      	movs	r1, #1
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f004 fba1 	bl	80094d0 <USBD_LL_PrepareReceive>
 8004d8e:	e007      	b.n	8004da0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d96:	2340      	movs	r3, #64	; 0x40
 8004d98:	2101      	movs	r1, #1
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f004 fb98 	bl	80094d0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	460b      	mov	r3, r1
 8004db4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004dba:	2181      	movs	r1, #129	; 0x81
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f004 fabc 	bl	800933a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004dc8:	2101      	movs	r1, #1
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f004 fab5 	bl	800933a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004dd8:	2182      	movs	r1, #130	; 0x82
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f004 faad 	bl	800933a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00e      	beq.n	8004e0e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e00:	4618      	mov	r0, r3
 8004e02:	f004 fba7 	bl	8009554 <USBD_static_free>
    pdev->pClassData = NULL;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e28:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d039      	beq.n	8004eb6 <USBD_CDC_Setup+0x9e>
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d17c      	bne.n	8004f40 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	88db      	ldrh	r3, [r3, #6]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d029      	beq.n	8004ea2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	b25b      	sxtb	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	da11      	bge.n	8004e7c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004e64:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	88d2      	ldrh	r2, [r2, #6]
 8004e6a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004e6c:	6939      	ldr	r1, [r7, #16]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	88db      	ldrh	r3, [r3, #6]
 8004e72:	461a      	mov	r2, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 f9f9 	bl	800626c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004e7a:	e068      	b.n	8004f4e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	785a      	ldrb	r2, [r3, #1]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	88db      	ldrh	r3, [r3, #6]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004e92:	6939      	ldr	r1, [r7, #16]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	88db      	ldrh	r3, [r3, #6]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 fa14 	bl	80062c8 <USBD_CtlPrepareRx>
      break;
 8004ea0:	e055      	b.n	8004f4e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	7850      	ldrb	r0, [r2, #1]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	4798      	blx	r3
      break;
 8004eb4:	e04b      	b.n	8004f4e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	785b      	ldrb	r3, [r3, #1]
 8004eba:	2b0a      	cmp	r3, #10
 8004ebc:	d017      	beq.n	8004eee <USBD_CDC_Setup+0xd6>
 8004ebe:	2b0b      	cmp	r3, #11
 8004ec0:	d029      	beq.n	8004f16 <USBD_CDC_Setup+0xfe>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d133      	bne.n	8004f2e <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d107      	bne.n	8004ee0 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004ed0:	f107 030c 	add.w	r3, r7, #12
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f001 f9c7 	bl	800626c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ede:	e02e      	b.n	8004f3e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004ee0:	6839      	ldr	r1, [r7, #0]
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f001 f958 	bl	8006198 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	75fb      	strb	r3, [r7, #23]
          break;
 8004eec:	e027      	b.n	8004f3e <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d107      	bne.n	8004f08 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004ef8:	f107 030f 	add.w	r3, r7, #15
 8004efc:	2201      	movs	r2, #1
 8004efe:	4619      	mov	r1, r3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f001 f9b3 	bl	800626c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f06:	e01a      	b.n	8004f3e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f001 f944 	bl	8006198 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f10:	2302      	movs	r3, #2
 8004f12:	75fb      	strb	r3, [r7, #23]
          break;
 8004f14:	e013      	b.n	8004f3e <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d00d      	beq.n	8004f3c <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004f20:	6839      	ldr	r1, [r7, #0]
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f001 f938 	bl	8006198 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004f2c:	e006      	b.n	8004f3c <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004f2e:	6839      	ldr	r1, [r7, #0]
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f001 f931 	bl	8006198 <USBD_CtlError>
          ret = USBD_FAIL;
 8004f36:	2302      	movs	r3, #2
 8004f38:	75fb      	strb	r3, [r7, #23]
          break;
 8004f3a:	e000      	b.n	8004f3e <USBD_CDC_Setup+0x126>
          break;
 8004f3c:	bf00      	nop
      }
      break;
 8004f3e:	e006      	b.n	8004f4e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004f40:	6839      	ldr	r1, [r7, #0]
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 f928 	bl	8006198 <USBD_CtlError>
      ret = USBD_FAIL;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f4c:	bf00      	nop
  }

  return ret;
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f6a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f72:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d03a      	beq.n	8004ff4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	331c      	adds	r3, #28
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d029      	beq.n	8004fe8 <USBD_CDC_DataIn+0x90>
 8004f94:	78fa      	ldrb	r2, [r7, #3]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	331c      	adds	r3, #28
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	78f9      	ldrb	r1, [r7, #3]
 8004fa8:	68b8      	ldr	r0, [r7, #8]
 8004faa:	460b      	mov	r3, r1
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4403      	add	r3, r0
 8004fb4:	3338      	adds	r3, #56	; 0x38
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004fbc:	fb03 f301 	mul.w	r3, r3, r1
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d110      	bne.n	8004fe8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	331c      	adds	r3, #28
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004fda:	78f9      	ldrb	r1, [r7, #3]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2200      	movs	r2, #0
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f004 fa52 	bl	800948a <USBD_LL_Transmit>
 8004fe6:	e003      	b.n	8004ff0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e000      	b.n	8004ff6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004ff4:	2302      	movs	r3, #2
  }
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005010:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	4619      	mov	r1, r3
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f004 fa7d 	bl	8009516 <USBD_LL_GetRxDataSize>
 800501c:	4602      	mov	r2, r0
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00d      	beq.n	800504a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005042:	4611      	mov	r1, r2
 8005044:	4798      	blx	r3

    return USBD_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	e000      	b.n	800504c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800504a:	2302      	movs	r3, #2
  }
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005062:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800506a:	2b00      	cmp	r3, #0
 800506c:	d015      	beq.n	800509a <USBD_CDC_EP0_RxReady+0x46>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005074:	2bff      	cmp	r3, #255	; 0xff
 8005076:	d010      	beq.n	800509a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005086:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800508e:	b292      	uxth	r2, r2
 8005090:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	22ff      	movs	r2, #255	; 0xff
 8005096:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2243      	movs	r2, #67	; 0x43
 80050b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80050b2:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000094 	.word	0x20000094

080050c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2243      	movs	r2, #67	; 0x43
 80050d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80050d2:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	20000050 	.word	0x20000050

080050e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2243      	movs	r2, #67	; 0x43
 80050f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80050f2:	4b03      	ldr	r3, [pc, #12]	; (8005100 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	200000d8 	.word	0x200000d8

08005104 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	220a      	movs	r2, #10
 8005110:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005112:	4b03      	ldr	r3, [pc, #12]	; (8005120 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	2000000c 	.word	0x2000000c

08005124 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800512e:	2302      	movs	r3, #2
 8005130:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr

08005150 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005164:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr

08005182 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005192:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01c      	beq.n	80051fc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d115      	bne.n	80051f8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2181      	movs	r1, #129	; 0x81
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f004 f94b 	bl	800948a <USBD_LL_Transmit>

      return USBD_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	e002      	b.n	80051fe <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80051fc:	2302      	movs	r3, #2
  }
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005214:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d017      	beq.n	8005250 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	7c1b      	ldrb	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d109      	bne.n	800523c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800522e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005232:	2101      	movs	r1, #1
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f004 f94b 	bl	80094d0 <USBD_LL_PrepareReceive>
 800523a:	e007      	b.n	800524c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005242:	2340      	movs	r3, #64	; 0x40
 8005244:	2101      	movs	r1, #1
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f004 f942 	bl	80094d0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	e000      	b.n	8005252 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	4613      	mov	r3, r2
 8005266:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800526e:	2302      	movs	r3, #2
 8005270:	e01a      	b.n	80052a8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	79fa      	ldrb	r2, [r7, #7]
 800529e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f003 ffaf 	bl	8009204 <USBD_LL_Init>

  return USBD_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d006      	beq.n	80052d2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	73fb      	strb	r3, [r7, #15]
 80052d0:	e001      	b.n	80052d6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80052d2:	2302      	movs	r3, #2
 80052d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f003 ffe4 	bl	80092b8 <USBD_LL_Start>

  return USBD_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr

0800530e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	460b      	mov	r3, r1
 8005318:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800531a:	2302      	movs	r3, #2
 800531c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00c      	beq.n	8005342 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	78fa      	ldrb	r2, [r7, #3]
 8005332:	4611      	mov	r1, r2
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	4798      	blx	r3
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005342:	7bfb      	ldrb	r3, [r7, #15]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	78fa      	ldrb	r2, [r7, #3]
 8005362:	4611      	mov	r1, r2
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4798      	blx	r3

  return USBD_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005382:	6839      	ldr	r1, [r7, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fecb 	bl	8006120 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005398:	461a      	mov	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d00c      	beq.n	80053c8 <USBD_LL_SetupStage+0x56>
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d302      	bcc.n	80053b8 <USBD_LL_SetupStage+0x46>
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d010      	beq.n	80053d8 <USBD_LL_SetupStage+0x66>
 80053b6:	e017      	b.n	80053e8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f9cb 	bl	800575c <USBD_StdDevReq>
      break;
 80053c6:	e01a      	b.n	80053fe <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fa2d 	bl	8005830 <USBD_StdItfReq>
      break;
 80053d6:	e012      	b.n	80053fe <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fa6b 	bl	80058bc <USBD_StdEPReq>
      break;
 80053e6:	e00a      	b.n	80053fe <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80053ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	4619      	mov	r1, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f003 ffbe 	bl	8009378 <USBD_LL_StallEP>
      break;
 80053fc:	bf00      	nop
  }

  return USBD_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	460b      	mov	r3, r1
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005416:	7afb      	ldrb	r3, [r7, #11]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d14b      	bne.n	80054b4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005422:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800542a:	2b03      	cmp	r3, #3
 800542c:	d134      	bne.n	8005498 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	429a      	cmp	r2, r3
 8005438:	d919      	bls.n	800546e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	1ad2      	subs	r2, r2, r3
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005450:	429a      	cmp	r2, r3
 8005452:	d203      	bcs.n	800545c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005458:	b29b      	uxth	r3, r3
 800545a:	e002      	b.n	8005462 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005460:	b29b      	uxth	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 ff4c 	bl	8006304 <USBD_CtlContinueRx>
 800546c:	e038      	b.n	80054e0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005480:	2b03      	cmp	r3, #3
 8005482:	d105      	bne.n	8005490 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 ff49 	bl	8006328 <USBD_CtlSendStatus>
 8005496:	e023      	b.n	80054e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800549e:	2b05      	cmp	r3, #5
 80054a0:	d11e      	bne.n	80054e0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80054aa:	2100      	movs	r1, #0
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f003 ff63 	bl	8009378 <USBD_LL_StallEP>
 80054b2:	e015      	b.n	80054e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00d      	beq.n	80054dc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d108      	bne.n	80054dc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	7afa      	ldrb	r2, [r7, #11]
 80054d4:	4611      	mov	r1, r2
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	4798      	blx	r3
 80054da:	e001      	b.n	80054e0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80054dc:	2302      	movs	r3, #2
 80054de:	e000      	b.n	80054e2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b086      	sub	sp, #24
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	460b      	mov	r3, r1
 80054f4:	607a      	str	r2, [r7, #4]
 80054f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80054f8:	7afb      	ldrb	r3, [r7, #11]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d17f      	bne.n	80055fe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3314      	adds	r3, #20
 8005502:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800550a:	2b02      	cmp	r3, #2
 800550c:	d15c      	bne.n	80055c8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	429a      	cmp	r2, r3
 8005518:	d915      	bls.n	8005546 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	1ad2      	subs	r2, r2, r3
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	b29b      	uxth	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 feb6 	bl	80062a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005538:	2300      	movs	r3, #0
 800553a:	2200      	movs	r2, #0
 800553c:	2100      	movs	r1, #0
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f003 ffc6 	bl	80094d0 <USBD_LL_PrepareReceive>
 8005544:	e04e      	b.n	80055e4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	6912      	ldr	r2, [r2, #16]
 800554e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005552:	fb02 f201 	mul.w	r2, r2, r1
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d11c      	bne.n	8005596 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005564:	429a      	cmp	r2, r3
 8005566:	d316      	bcc.n	8005596 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005572:	429a      	cmp	r2, r3
 8005574:	d20f      	bcs.n	8005596 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005576:	2200      	movs	r2, #0
 8005578:	2100      	movs	r1, #0
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fe92 	bl	80062a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005588:	2300      	movs	r3, #0
 800558a:	2200      	movs	r2, #0
 800558c:	2100      	movs	r1, #0
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f003 ff9e 	bl	80094d0 <USBD_LL_PrepareReceive>
 8005594:	e026      	b.n	80055e4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d105      	bne.n	80055b8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80055b8:	2180      	movs	r1, #128	; 0x80
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f003 fedc 	bl	8009378 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 fec4 	bl	800634e <USBD_CtlReceiveStatus>
 80055c6:	e00d      	b.n	80055e4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d004      	beq.n	80055dc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d103      	bne.n	80055e4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80055dc:	2180      	movs	r1, #128	; 0x80
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f003 feca 	bl	8009378 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d11d      	bne.n	800562a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f7ff fe83 	bl	80052fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80055fc:	e015      	b.n	800562a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00d      	beq.n	8005626 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005610:	2b03      	cmp	r3, #3
 8005612:	d108      	bne.n	8005626 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	7afa      	ldrb	r2, [r7, #11]
 800561e:	4611      	mov	r1, r2
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	4798      	blx	r3
 8005624:	e001      	b.n	800562a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005626:	2302      	movs	r3, #2
 8005628:	e000      	b.n	800562c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800563c:	2340      	movs	r3, #64	; 0x40
 800563e:	2200      	movs	r2, #0
 8005640:	2100      	movs	r1, #0
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f003 fe53 	bl	80092ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2240      	movs	r2, #64	; 0x40
 8005654:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005658:	2340      	movs	r3, #64	; 0x40
 800565a:	2200      	movs	r2, #0
 800565c:	2180      	movs	r1, #128	; 0x80
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f003 fe45 	bl	80092ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2240      	movs	r2, #64	; 0x40
 800566e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005694:	2b00      	cmp	r3, #0
 8005696:	d009      	beq.n	80056ac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6852      	ldr	r2, [r2, #4]
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	4611      	mov	r1, r2
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	4798      	blx	r3
  }

  return USBD_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr

080056d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2204      	movs	r2, #4
 80056ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr

080056fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800570a:	2b04      	cmp	r3, #4
 800570c:	d105      	bne.n	800571a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr

08005726 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005734:	2b03      	cmp	r3, #3
 8005736:	d10b      	bne.n	8005750 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005772:	2b20      	cmp	r3, #32
 8005774:	d004      	beq.n	8005780 <USBD_StdDevReq+0x24>
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d002      	beq.n	8005780 <USBD_StdDevReq+0x24>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d008      	beq.n	8005790 <USBD_StdDevReq+0x34>
 800577e:	e04c      	b.n	800581a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
      break;
 800578e:	e049      	b.n	8005824 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b09      	cmp	r3, #9
 8005796:	d83a      	bhi.n	800580e <USBD_StdDevReq+0xb2>
 8005798:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <USBD_StdDevReq+0x44>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	080057f1 	.word	0x080057f1
 80057a4:	08005805 	.word	0x08005805
 80057a8:	0800580f 	.word	0x0800580f
 80057ac:	080057fb 	.word	0x080057fb
 80057b0:	0800580f 	.word	0x0800580f
 80057b4:	080057d3 	.word	0x080057d3
 80057b8:	080057c9 	.word	0x080057c9
 80057bc:	0800580f 	.word	0x0800580f
 80057c0:	080057e7 	.word	0x080057e7
 80057c4:	080057dd 	.word	0x080057dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f9d4 	bl	8005b78 <USBD_GetDescriptor>
          break;
 80057d0:	e022      	b.n	8005818 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fb37 	bl	8005e48 <USBD_SetAddress>
          break;
 80057da:	e01d      	b.n	8005818 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fb74 	bl	8005ecc <USBD_SetConfig>
          break;
 80057e4:	e018      	b.n	8005818 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fbfd 	bl	8005fe8 <USBD_GetConfig>
          break;
 80057ee:	e013      	b.n	8005818 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fc2c 	bl	8006050 <USBD_GetStatus>
          break;
 80057f8:	e00e      	b.n	8005818 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fc5a 	bl	80060b6 <USBD_SetFeature>
          break;
 8005802:	e009      	b.n	8005818 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fc69 	bl	80060de <USBD_ClrFeature>
          break;
 800580c:	e004      	b.n	8005818 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800580e:	6839      	ldr	r1, [r7, #0]
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fcc1 	bl	8006198 <USBD_CtlError>
          break;
 8005816:	bf00      	nop
      }
      break;
 8005818:	e004      	b.n	8005824 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fcbb 	bl	8006198 <USBD_CtlError>
      break;
 8005822:	bf00      	nop
  }

  return ret;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop

08005830 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005846:	2b20      	cmp	r3, #32
 8005848:	d003      	beq.n	8005852 <USBD_StdItfReq+0x22>
 800584a:	2b40      	cmp	r3, #64	; 0x40
 800584c:	d001      	beq.n	8005852 <USBD_StdItfReq+0x22>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d12a      	bne.n	80058a8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005858:	3b01      	subs	r3, #1
 800585a:	2b02      	cmp	r3, #2
 800585c:	d81d      	bhi.n	800589a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	889b      	ldrh	r3, [r3, #4]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	d813      	bhi.n	8005890 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
 8005876:	4603      	mov	r3, r0
 8005878:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	88db      	ldrh	r3, [r3, #6]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d110      	bne.n	80058a4 <USBD_StdItfReq+0x74>
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10d      	bne.n	80058a4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fd4d 	bl	8006328 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800588e:	e009      	b.n	80058a4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fc80 	bl	8006198 <USBD_CtlError>
          break;
 8005898:	e004      	b.n	80058a4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fc7b 	bl	8006198 <USBD_CtlError>
          break;
 80058a2:	e000      	b.n	80058a6 <USBD_StdItfReq+0x76>
          break;
 80058a4:	bf00      	nop
      }
      break;
 80058a6:	e004      	b.n	80058b2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fc74 	bl	8006198 <USBD_CtlError>
      break;
 80058b0:	bf00      	nop
  }

  return USBD_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	889b      	ldrh	r3, [r3, #4]
 80058ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d004      	beq.n	80058e6 <USBD_StdEPReq+0x2a>
 80058dc:	2b40      	cmp	r3, #64	; 0x40
 80058de:	d002      	beq.n	80058e6 <USBD_StdEPReq+0x2a>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <USBD_StdEPReq+0x3a>
 80058e4:	e13d      	b.n	8005b62 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	4798      	blx	r3
      break;
 80058f4:	e13a      	b.n	8005b6c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d10a      	bne.n	8005918 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	4798      	blx	r3
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	e12a      	b.n	8005b6e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d03e      	beq.n	800599e <USBD_StdEPReq+0xe2>
 8005920:	2b03      	cmp	r3, #3
 8005922:	d002      	beq.n	800592a <USBD_StdEPReq+0x6e>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d070      	beq.n	8005a0a <USBD_StdEPReq+0x14e>
 8005928:	e115      	b.n	8005b56 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005930:	2b02      	cmp	r3, #2
 8005932:	d002      	beq.n	800593a <USBD_StdEPReq+0x7e>
 8005934:	2b03      	cmp	r3, #3
 8005936:	d015      	beq.n	8005964 <USBD_StdEPReq+0xa8>
 8005938:	e02b      	b.n	8005992 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800593a:	7bbb      	ldrb	r3, [r7, #14]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00c      	beq.n	800595a <USBD_StdEPReq+0x9e>
 8005940:	7bbb      	ldrb	r3, [r7, #14]
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d009      	beq.n	800595a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005946:	7bbb      	ldrb	r3, [r7, #14]
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f003 fd14 	bl	8009378 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005950:	2180      	movs	r1, #128	; 0x80
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f003 fd10 	bl	8009378 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005958:	e020      	b.n	800599c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800595a:	6839      	ldr	r1, [r7, #0]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fc1b 	bl	8006198 <USBD_CtlError>
              break;
 8005962:	e01b      	b.n	800599c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	885b      	ldrh	r3, [r3, #2]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10e      	bne.n	800598a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800596c:	7bbb      	ldrb	r3, [r7, #14]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00b      	beq.n	800598a <USBD_StdEPReq+0xce>
 8005972:	7bbb      	ldrb	r3, [r7, #14]
 8005974:	2b80      	cmp	r3, #128	; 0x80
 8005976:	d008      	beq.n	800598a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	88db      	ldrh	r3, [r3, #6]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d104      	bne.n	800598a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005980:	7bbb      	ldrb	r3, [r7, #14]
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f003 fcf7 	bl	8009378 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fccc 	bl	8006328 <USBD_CtlSendStatus>

              break;
 8005990:	e004      	b.n	800599c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005992:	6839      	ldr	r1, [r7, #0]
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fbff 	bl	8006198 <USBD_CtlError>
              break;
 800599a:	bf00      	nop
          }
          break;
 800599c:	e0e0      	b.n	8005b60 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d002      	beq.n	80059ae <USBD_StdEPReq+0xf2>
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d015      	beq.n	80059d8 <USBD_StdEPReq+0x11c>
 80059ac:	e026      	b.n	80059fc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059ae:	7bbb      	ldrb	r3, [r7, #14]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00c      	beq.n	80059ce <USBD_StdEPReq+0x112>
 80059b4:	7bbb      	ldrb	r3, [r7, #14]
 80059b6:	2b80      	cmp	r3, #128	; 0x80
 80059b8:	d009      	beq.n	80059ce <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80059ba:	7bbb      	ldrb	r3, [r7, #14]
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f003 fcda 	bl	8009378 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80059c4:	2180      	movs	r1, #128	; 0x80
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f003 fcd6 	bl	8009378 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059cc:	e01c      	b.n	8005a08 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fbe1 	bl	8006198 <USBD_CtlError>
              break;
 80059d6:	e017      	b.n	8005a08 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	885b      	ldrh	r3, [r3, #2]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d112      	bne.n	8005a06 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
 80059e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d004      	beq.n	80059f4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80059ea:	7bbb      	ldrb	r3, [r7, #14]
 80059ec:	4619      	mov	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f003 fce1 	bl	80093b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fc97 	bl	8006328 <USBD_CtlSendStatus>
              }
              break;
 80059fa:	e004      	b.n	8005a06 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fbca 	bl	8006198 <USBD_CtlError>
              break;
 8005a04:	e000      	b.n	8005a08 <USBD_StdEPReq+0x14c>
              break;
 8005a06:	bf00      	nop
          }
          break;
 8005a08:	e0aa      	b.n	8005b60 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d002      	beq.n	8005a1a <USBD_StdEPReq+0x15e>
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d032      	beq.n	8005a7e <USBD_StdEPReq+0x1c2>
 8005a18:	e097      	b.n	8005b4a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <USBD_StdEPReq+0x174>
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	2b80      	cmp	r3, #128	; 0x80
 8005a24:	d004      	beq.n	8005a30 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fbb5 	bl	8006198 <USBD_CtlError>
                break;
 8005a2e:	e091      	b.n	8005b54 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	da0b      	bge.n	8005a50 <USBD_StdEPReq+0x194>
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	3310      	adds	r3, #16
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	e00b      	b.n	8005a68 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a50:	7bbb      	ldrb	r3, [r7, #14]
 8005a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	4413      	add	r3, r2
 8005a66:	3304      	adds	r3, #4
 8005a68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2202      	movs	r2, #2
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fbf8 	bl	800626c <USBD_CtlSendData>
              break;
 8005a7c:	e06a      	b.n	8005b54 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005a7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	da11      	bge.n	8005aaa <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a86:	7bbb      	ldrb	r3, [r7, #14]
 8005a88:	f003 020f 	and.w	r2, r3, #15
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	3318      	adds	r3, #24
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d117      	bne.n	8005ad0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fb78 	bl	8006198 <USBD_CtlError>
                  break;
 8005aa8:	e054      	b.n	8005b54 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005aaa:	7bbb      	ldrb	r3, [r7, #14]
 8005aac:	f003 020f 	and.w	r2, r3, #15
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d104      	bne.n	8005ad0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fb65 	bl	8006198 <USBD_CtlError>
                  break;
 8005ace:	e041      	b.n	8005b54 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	da0b      	bge.n	8005af0 <USBD_StdEPReq+0x234>
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	3310      	adds	r3, #16
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	4413      	add	r3, r2
 8005aec:	3304      	adds	r3, #4
 8005aee:	e00b      	b.n	8005b08 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005af0:	7bbb      	ldrb	r3, [r7, #14]
 8005af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	4413      	add	r3, r2
 8005b06:	3304      	adds	r3, #4
 8005b08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <USBD_StdEPReq+0x25a>
 8005b10:	7bbb      	ldrb	r3, [r7, #14]
 8005b12:	2b80      	cmp	r3, #128	; 0x80
 8005b14:	d103      	bne.n	8005b1e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e00e      	b.n	8005b3c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005b1e:	7bbb      	ldrb	r3, [r7, #14]
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f003 fc66 	bl	80093f4 <USBD_LL_IsStallEP>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2201      	movs	r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e002      	b.n	8005b3c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fb92 	bl	800626c <USBD_CtlSendData>
              break;
 8005b48:	e004      	b.n	8005b54 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005b4a:	6839      	ldr	r1, [r7, #0]
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fb23 	bl	8006198 <USBD_CtlError>
              break;
 8005b52:	bf00      	nop
          }
          break;
 8005b54:	e004      	b.n	8005b60 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005b56:	6839      	ldr	r1, [r7, #0]
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fb1d 	bl	8006198 <USBD_CtlError>
          break;
 8005b5e:	bf00      	nop
      }
      break;
 8005b60:	e004      	b.n	8005b6c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fb17 	bl	8006198 <USBD_CtlError>
      break;
 8005b6a:	bf00      	nop
  }

  return ret;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	885b      	ldrh	r3, [r3, #2]
 8005b92:	0a1b      	lsrs	r3, r3, #8
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	2b06      	cmp	r3, #6
 8005b9a:	f200 8128 	bhi.w	8005dee <USBD_GetDescriptor+0x276>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <USBD_GetDescriptor+0x2c>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bc1 	.word	0x08005bc1
 8005ba8:	08005bd9 	.word	0x08005bd9
 8005bac:	08005c19 	.word	0x08005c19
 8005bb0:	08005def 	.word	0x08005def
 8005bb4:	08005def 	.word	0x08005def
 8005bb8:	08005d8f 	.word	0x08005d8f
 8005bbc:	08005dbb 	.word	0x08005dbb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	7c12      	ldrb	r2, [r2, #16]
 8005bcc:	f107 0108 	add.w	r1, r7, #8
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4798      	blx	r3
 8005bd4:	60f8      	str	r0, [r7, #12]
      break;
 8005bd6:	e112      	b.n	8005dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	7c1b      	ldrb	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10d      	bne.n	8005bfc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	f107 0208 	add.w	r2, r7, #8
 8005bec:	4610      	mov	r0, r2
 8005bee:	4798      	blx	r3
 8005bf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005bfa:	e100      	b.n	8005dfe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	f107 0208 	add.w	r2, r7, #8
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
 8005c0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3301      	adds	r3, #1
 8005c12:	2202      	movs	r2, #2
 8005c14:	701a      	strb	r2, [r3, #0]
      break;
 8005c16:	e0f2      	b.n	8005dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	885b      	ldrh	r3, [r3, #2]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b05      	cmp	r3, #5
 8005c20:	f200 80ac 	bhi.w	8005d7c <USBD_GetDescriptor+0x204>
 8005c24:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <USBD_GetDescriptor+0xb4>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c45 	.word	0x08005c45
 8005c30:	08005c79 	.word	0x08005c79
 8005c34:	08005cad 	.word	0x08005cad
 8005c38:	08005ce1 	.word	0x08005ce1
 8005c3c:	08005d15 	.word	0x08005d15
 8005c40:	08005d49 	.word	0x08005d49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00b      	beq.n	8005c68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	7c12      	ldrb	r2, [r2, #16]
 8005c5c:	f107 0108 	add.w	r1, r7, #8
 8005c60:	4610      	mov	r0, r2
 8005c62:	4798      	blx	r3
 8005c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c66:	e091      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fa94 	bl	8006198 <USBD_CtlError>
            err++;
 8005c70:	7afb      	ldrb	r3, [r7, #11]
 8005c72:	3301      	adds	r3, #1
 8005c74:	72fb      	strb	r3, [r7, #11]
          break;
 8005c76:	e089      	b.n	8005d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	7c12      	ldrb	r2, [r2, #16]
 8005c90:	f107 0108 	add.w	r1, r7, #8
 8005c94:	4610      	mov	r0, r2
 8005c96:	4798      	blx	r3
 8005c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c9a:	e077      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fa7a 	bl	8006198 <USBD_CtlError>
            err++;
 8005ca4:	7afb      	ldrb	r3, [r7, #11]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8005caa:	e06f      	b.n	8005d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00b      	beq.n	8005cd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	7c12      	ldrb	r2, [r2, #16]
 8005cc4:	f107 0108 	add.w	r1, r7, #8
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4798      	blx	r3
 8005ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cce:	e05d      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cd0:	6839      	ldr	r1, [r7, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa60 	bl	8006198 <USBD_CtlError>
            err++;
 8005cd8:	7afb      	ldrb	r3, [r7, #11]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cde:	e055      	b.n	8005d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	7c12      	ldrb	r2, [r2, #16]
 8005cf8:	f107 0108 	add.w	r1, r7, #8
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
 8005d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d02:	e043      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fa46 	bl	8006198 <USBD_CtlError>
            err++;
 8005d0c:	7afb      	ldrb	r3, [r7, #11]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	72fb      	strb	r3, [r7, #11]
          break;
 8005d12:	e03b      	b.n	8005d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00b      	beq.n	8005d38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	7c12      	ldrb	r2, [r2, #16]
 8005d2c:	f107 0108 	add.w	r1, r7, #8
 8005d30:	4610      	mov	r0, r2
 8005d32:	4798      	blx	r3
 8005d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d36:	e029      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fa2c 	bl	8006198 <USBD_CtlError>
            err++;
 8005d40:	7afb      	ldrb	r3, [r7, #11]
 8005d42:	3301      	adds	r3, #1
 8005d44:	72fb      	strb	r3, [r7, #11]
          break;
 8005d46:	e021      	b.n	8005d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	7c12      	ldrb	r2, [r2, #16]
 8005d60:	f107 0108 	add.w	r1, r7, #8
 8005d64:	4610      	mov	r0, r2
 8005d66:	4798      	blx	r3
 8005d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d6a:	e00f      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d6c:	6839      	ldr	r1, [r7, #0]
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa12 	bl	8006198 <USBD_CtlError>
            err++;
 8005d74:	7afb      	ldrb	r3, [r7, #11]
 8005d76:	3301      	adds	r3, #1
 8005d78:	72fb      	strb	r3, [r7, #11]
          break;
 8005d7a:	e007      	b.n	8005d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fa0a 	bl	8006198 <USBD_CtlError>
          err++;
 8005d84:	7afb      	ldrb	r3, [r7, #11]
 8005d86:	3301      	adds	r3, #1
 8005d88:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005d8a:	e038      	b.n	8005dfe <USBD_GetDescriptor+0x286>
 8005d8c:	e037      	b.n	8005dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	7c1b      	ldrb	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	f107 0208 	add.w	r2, r7, #8
 8005da2:	4610      	mov	r0, r2
 8005da4:	4798      	blx	r3
 8005da6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005da8:	e029      	b.n	8005dfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f9f3 	bl	8006198 <USBD_CtlError>
        err++;
 8005db2:	7afb      	ldrb	r3, [r7, #11]
 8005db4:	3301      	adds	r3, #1
 8005db6:	72fb      	strb	r3, [r7, #11]
      break;
 8005db8:	e021      	b.n	8005dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	7c1b      	ldrb	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10d      	bne.n	8005dde <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	f107 0208 	add.w	r2, r7, #8
 8005dce:	4610      	mov	r0, r2
 8005dd0:	4798      	blx	r3
 8005dd2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	2207      	movs	r2, #7
 8005dda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ddc:	e00f      	b.n	8005dfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f9d9 	bl	8006198 <USBD_CtlError>
        err++;
 8005de6:	7afb      	ldrb	r3, [r7, #11]
 8005de8:	3301      	adds	r3, #1
 8005dea:	72fb      	strb	r3, [r7, #11]
      break;
 8005dec:	e007      	b.n	8005dfe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f9d1 	bl	8006198 <USBD_CtlError>
      err++;
 8005df6:	7afb      	ldrb	r3, [r7, #11]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	72fb      	strb	r3, [r7, #11]
      break;
 8005dfc:	bf00      	nop
  }

  if (err != 0U)
 8005dfe:	7afb      	ldrb	r3, [r7, #11]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d11c      	bne.n	8005e3e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005e04:	893b      	ldrh	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d011      	beq.n	8005e2e <USBD_GetDescriptor+0x2b6>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	88db      	ldrh	r3, [r3, #6]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00d      	beq.n	8005e2e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	88da      	ldrh	r2, [r3, #6]
 8005e16:	893b      	ldrh	r3, [r7, #8]
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	bf28      	it	cs
 8005e1c:	4613      	movcs	r3, r2
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e22:	893b      	ldrh	r3, [r7, #8]
 8005e24:	461a      	mov	r2, r3
 8005e26:	68f9      	ldr	r1, [r7, #12]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fa1f 	bl	800626c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	88db      	ldrh	r3, [r3, #6]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d104      	bne.n	8005e40 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fa76 	bl	8006328 <USBD_CtlSendStatus>
 8005e3c:	e000      	b.n	8005e40 <USBD_GetDescriptor+0x2c8>
    return;
 8005e3e:	bf00      	nop
    }
  }
}
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop

08005e48 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	889b      	ldrh	r3, [r3, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d130      	bne.n	8005ebc <USBD_SetAddress+0x74>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	88db      	ldrh	r3, [r3, #6]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d12c      	bne.n	8005ebc <USBD_SetAddress+0x74>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	885b      	ldrh	r3, [r3, #2]
 8005e66:	2b7f      	cmp	r3, #127	; 0x7f
 8005e68:	d828      	bhi.n	8005ebc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	885b      	ldrh	r3, [r3, #2]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d104      	bne.n	8005e8a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f988 	bl	8006198 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e88:	e01c      	b.n	8005ec4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	7bfa      	ldrb	r2, [r7, #15]
 8005e8e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f003 fad8 	bl	800944c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fa43 	bl	8006328 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb0:	e008      	b.n	8005ec4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eba:	e003      	b.n	8005ec4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f96a 	bl	8006198 <USBD_CtlError>
  }
}
 8005ec4:	bf00      	nop
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	885b      	ldrh	r3, [r3, #2]
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	4b41      	ldr	r3, [pc, #260]	; (8005fe4 <USBD_SetConfig+0x118>)
 8005ede:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ee0:	4b40      	ldr	r3, [pc, #256]	; (8005fe4 <USBD_SetConfig+0x118>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d904      	bls.n	8005ef2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f954 	bl	8006198 <USBD_CtlError>
 8005ef0:	e075      	b.n	8005fde <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d002      	beq.n	8005f02 <USBD_SetConfig+0x36>
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d023      	beq.n	8005f48 <USBD_SetConfig+0x7c>
 8005f00:	e062      	b.n	8005fc8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005f02:	4b38      	ldr	r3, [pc, #224]	; (8005fe4 <USBD_SetConfig+0x118>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01a      	beq.n	8005f40 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005f0a:	4b36      	ldr	r3, [pc, #216]	; (8005fe4 <USBD_SetConfig+0x118>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2203      	movs	r2, #3
 8005f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f1c:	4b31      	ldr	r3, [pc, #196]	; (8005fe4 <USBD_SetConfig+0x118>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff f9f3 	bl	800530e <USBD_SetClassConfig>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d104      	bne.n	8005f38 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f931 	bl	8006198 <USBD_CtlError>
            return;
 8005f36:	e052      	b.n	8005fde <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f9f5 	bl	8006328 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005f3e:	e04e      	b.n	8005fde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f9f1 	bl	8006328 <USBD_CtlSendStatus>
        break;
 8005f46:	e04a      	b.n	8005fde <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005f48:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <USBD_SetConfig+0x118>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d112      	bne.n	8005f76 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005f58:	4b22      	ldr	r3, [pc, #136]	; (8005fe4 <USBD_SetConfig+0x118>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005f62:	4b20      	ldr	r3, [pc, #128]	; (8005fe4 <USBD_SetConfig+0x118>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff f9ef 	bl	800534c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f9da 	bl	8006328 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005f74:	e033      	b.n	8005fde <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005f76:	4b1b      	ldr	r3, [pc, #108]	; (8005fe4 <USBD_SetConfig+0x118>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d01d      	beq.n	8005fc0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff f9dd 	bl	800534c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005f92:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <USBD_SetConfig+0x118>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <USBD_SetConfig+0x118>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff f9b3 	bl	800530e <USBD_SetClassConfig>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d104      	bne.n	8005fb8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f8f1 	bl	8006198 <USBD_CtlError>
            return;
 8005fb6:	e012      	b.n	8005fde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f9b5 	bl	8006328 <USBD_CtlSendStatus>
        break;
 8005fbe:	e00e      	b.n	8005fde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f9b1 	bl	8006328 <USBD_CtlSendStatus>
        break;
 8005fc6:	e00a      	b.n	8005fde <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005fc8:	6839      	ldr	r1, [r7, #0]
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f8e4 	bl	8006198 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005fd0:	4b04      	ldr	r3, [pc, #16]	; (8005fe4 <USBD_SetConfig+0x118>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff f9b8 	bl	800534c <USBD_ClrClassConfig>
        break;
 8005fdc:	bf00      	nop
    }
  }
}
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	2000019c 	.word	0x2000019c

08005fe8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	88db      	ldrh	r3, [r3, #6]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d004      	beq.n	8006004 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005ffa:	6839      	ldr	r1, [r7, #0]
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f8cb 	bl	8006198 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006002:	e021      	b.n	8006048 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800600a:	2b01      	cmp	r3, #1
 800600c:	db17      	blt.n	800603e <USBD_GetConfig+0x56>
 800600e:	2b02      	cmp	r3, #2
 8006010:	dd02      	ble.n	8006018 <USBD_GetConfig+0x30>
 8006012:	2b03      	cmp	r3, #3
 8006014:	d00b      	beq.n	800602e <USBD_GetConfig+0x46>
 8006016:	e012      	b.n	800603e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3308      	adds	r3, #8
 8006022:	2201      	movs	r2, #1
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f920 	bl	800626c <USBD_CtlSendData>
        break;
 800602c:	e00c      	b.n	8006048 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3304      	adds	r3, #4
 8006032:	2201      	movs	r2, #1
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f918 	bl	800626c <USBD_CtlSendData>
        break;
 800603c:	e004      	b.n	8006048 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f8a9 	bl	8006198 <USBD_CtlError>
        break;
 8006046:	bf00      	nop
}
 8006048:	bf00      	nop
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006060:	3b01      	subs	r3, #1
 8006062:	2b02      	cmp	r3, #2
 8006064:	d81e      	bhi.n	80060a4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	88db      	ldrh	r3, [r3, #6]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d004      	beq.n	8006078 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f891 	bl	8006198 <USBD_CtlError>
        break;
 8006076:	e01a      	b.n	80060ae <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f043 0202 	orr.w	r2, r3, #2
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	330c      	adds	r3, #12
 8006098:	2202      	movs	r2, #2
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f8e5 	bl	800626c <USBD_CtlSendData>
      break;
 80060a2:	e004      	b.n	80060ae <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f876 	bl	8006198 <USBD_CtlError>
      break;
 80060ac:	bf00      	nop
  }
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	885b      	ldrh	r3, [r3, #2]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d106      	bne.n	80060d6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f929 	bl	8006328 <USBD_CtlSendStatus>
  }
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ee:	3b01      	subs	r3, #1
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d80b      	bhi.n	800610c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	885b      	ldrh	r3, [r3, #2]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d10c      	bne.n	8006116 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f90f 	bl	8006328 <USBD_CtlSendStatus>
      }
      break;
 800610a:	e004      	b.n	8006116 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f842 	bl	8006198 <USBD_CtlError>
      break;
 8006114:	e000      	b.n	8006118 <USBD_ClrFeature+0x3a>
      break;
 8006116:	bf00      	nop
  }
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781a      	ldrb	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	785a      	ldrb	r2, [r3, #1]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	3302      	adds	r3, #2
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	b29a      	uxth	r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	3303      	adds	r3, #3
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	b29b      	uxth	r3, r3
 800614e:	4413      	add	r3, r2
 8006150:	b29a      	uxth	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	3304      	adds	r3, #4
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b29a      	uxth	r2, r3
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	3305      	adds	r3, #5
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	b29b      	uxth	r3, r3
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	b29b      	uxth	r3, r3
 800616a:	4413      	add	r3, r2
 800616c:	b29a      	uxth	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	3306      	adds	r3, #6
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	b29a      	uxth	r2, r3
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	3307      	adds	r3, #7
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	b29b      	uxth	r3, r3
 8006186:	4413      	add	r3, r2
 8006188:	b29a      	uxth	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	80da      	strh	r2, [r3, #6]

}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr

08006198 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80061a2:	2180      	movs	r1, #128	; 0x80
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f003 f8e7 	bl	8009378 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80061aa:	2100      	movs	r1, #0
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f003 f8e3 	bl	8009378 <USBD_LL_StallEP>
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b086      	sub	sp, #24
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d032      	beq.n	8006236 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 f834 	bl	800623e <USBD_GetLen>
 80061d6:	4603      	mov	r3, r0
 80061d8:	3301      	adds	r3, #1
 80061da:	b29b      	uxth	r3, r3
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	75fa      	strb	r2, [r7, #23]
 80061ea:	461a      	mov	r2, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4413      	add	r3, r2
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	7812      	ldrb	r2, [r2, #0]
 80061f4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	75fa      	strb	r2, [r7, #23]
 80061fc:	461a      	mov	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	4413      	add	r3, r2
 8006202:	2203      	movs	r2, #3
 8006204:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006206:	e012      	b.n	800622e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	60fa      	str	r2, [r7, #12]
 800620e:	7dfa      	ldrb	r2, [r7, #23]
 8006210:	1c51      	adds	r1, r2, #1
 8006212:	75f9      	strb	r1, [r7, #23]
 8006214:	4611      	mov	r1, r2
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	440a      	add	r2, r1
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	75fa      	strb	r2, [r7, #23]
 8006224:	461a      	mov	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4413      	add	r3, r2
 800622a:	2200      	movs	r2, #0
 800622c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e8      	bne.n	8006208 <USBD_GetString+0x4e>
    }
  }
}
 8006236:	bf00      	nop
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800624a:	e005      	b.n	8006258 <USBD_GetLen+0x1a>
  {
    len++;
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	3301      	adds	r3, #1
 8006250:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3301      	adds	r3, #1
 8006256:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f5      	bne.n	800624c <USBD_GetLen+0xe>
  }

  return len;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr

0800626c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2202      	movs	r2, #2
 800627e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006282:	88fa      	ldrh	r2, [r7, #6]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	2100      	movs	r1, #0
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f003 f8f8 	bl	800948a <USBD_LL_Transmit>

  return USBD_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	2100      	movs	r1, #0
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f003 f8e6 	bl	800948a <USBD_LL_Transmit>

  return USBD_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2203      	movs	r2, #3
 80062da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80062de:	88fa      	ldrh	r2, [r7, #6]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80062e6:	88fa      	ldrh	r2, [r7, #6]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	2100      	movs	r1, #0
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f003 f8eb 	bl	80094d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	4613      	mov	r3, r2
 8006310:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	2100      	movs	r1, #0
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f003 f8d9 	bl	80094d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2204      	movs	r2, #4
 8006334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006338:	2300      	movs	r3, #0
 800633a:	2200      	movs	r2, #0
 800633c:	2100      	movs	r1, #0
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f003 f8a3 	bl	800948a <USBD_LL_Transmit>

  return USBD_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2205      	movs	r2, #5
 800635a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800635e:	2300      	movs	r3, #0
 8006360:	2200      	movs	r2, #0
 8006362:	2100      	movs	r1, #0
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f003 f8b3 	bl	80094d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800637a:	f3ef 8305 	mrs	r3, IPSR
 800637e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006380:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10f      	bne.n	80063a6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006386:	f3ef 8310 	mrs	r3, PRIMASK
 800638a:	607b      	str	r3, [r7, #4]
  return(result);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d109      	bne.n	80063a6 <osKernelInitialize+0x32>
 8006392:	4b10      	ldr	r3, [pc, #64]	; (80063d4 <osKernelInitialize+0x60>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d109      	bne.n	80063ae <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800639a:	f3ef 8311 	mrs	r3, BASEPRI
 800639e:	603b      	str	r3, [r7, #0]
  return(result);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80063a6:	f06f 0305 	mvn.w	r3, #5
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	e00c      	b.n	80063c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063ae:	4b09      	ldr	r3, [pc, #36]	; (80063d4 <osKernelInitialize+0x60>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d105      	bne.n	80063c2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80063b6:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <osKernelInitialize+0x60>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	e002      	b.n	80063c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80063c2:	f04f 33ff 	mov.w	r3, #4294967295
 80063c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80063c8:	68fb      	ldr	r3, [r7, #12]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bc80      	pop	{r7}
 80063d2:	4770      	bx	lr
 80063d4:	200001a0 	.word	0x200001a0

080063d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063de:	f3ef 8305 	mrs	r3, IPSR
 80063e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80063e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10f      	bne.n	800640a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ea:	f3ef 8310 	mrs	r3, PRIMASK
 80063ee:	607b      	str	r3, [r7, #4]
  return(result);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <osKernelStart+0x32>
 80063f6:	4b11      	ldr	r3, [pc, #68]	; (800643c <osKernelStart+0x64>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d109      	bne.n	8006412 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006402:	603b      	str	r3, [r7, #0]
  return(result);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <osKernelStart+0x3a>
    stat = osErrorISR;
 800640a:	f06f 0305 	mvn.w	r3, #5
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	e00e      	b.n	8006430 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006412:	4b0a      	ldr	r3, [pc, #40]	; (800643c <osKernelStart+0x64>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d107      	bne.n	800642a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800641a:	4b08      	ldr	r3, [pc, #32]	; (800643c <osKernelStart+0x64>)
 800641c:	2202      	movs	r2, #2
 800641e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006420:	f001 f864 	bl	80074ec <vTaskStartScheduler>
      stat = osOK;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	e002      	b.n	8006430 <osKernelStart+0x58>
    } else {
      stat = osError;
 800642a:	f04f 33ff 	mov.w	r3, #4294967295
 800642e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006430:	68fb      	ldr	r3, [r7, #12]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	200001a0 	.word	0x200001a0

08006440 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b092      	sub	sp, #72	; 0x48
 8006444:	af04      	add	r7, sp, #16
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006450:	f3ef 8305 	mrs	r3, IPSR
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006458:	2b00      	cmp	r3, #0
 800645a:	f040 8094 	bne.w	8006586 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800645e:	f3ef 8310 	mrs	r3, PRIMASK
 8006462:	623b      	str	r3, [r7, #32]
  return(result);
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f040 808d 	bne.w	8006586 <osThreadNew+0x146>
 800646c:	4b48      	ldr	r3, [pc, #288]	; (8006590 <osThreadNew+0x150>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d106      	bne.n	8006482 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006474:	f3ef 8311 	mrs	r3, BASEPRI
 8006478:	61fb      	str	r3, [r7, #28]
  return(result);
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f040 8082 	bne.w	8006586 <osThreadNew+0x146>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d07e      	beq.n	8006586 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006488:	2380      	movs	r3, #128	; 0x80
 800648a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800648c:	2318      	movs	r3, #24
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006490:	2300      	movs	r3, #0
 8006492:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006494:	f107 031b 	add.w	r3, r7, #27
 8006498:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800649a:	f04f 33ff 	mov.w	r3, #4294967295
 800649e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d045      	beq.n	8006532 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <osThreadNew+0x74>
        name = attr->name;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d008      	beq.n	80064da <osThreadNew+0x9a>
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	2b38      	cmp	r3, #56	; 0x38
 80064cc:	d805      	bhi.n	80064da <osThreadNew+0x9a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <osThreadNew+0x9e>
        return (NULL);
 80064da:	2300      	movs	r3, #0
 80064dc:	e054      	b.n	8006588 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	089b      	lsrs	r3, r3, #2
 80064ec:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00e      	beq.n	8006514 <osThreadNew+0xd4>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	2b5b      	cmp	r3, #91	; 0x5b
 80064fc:	d90a      	bls.n	8006514 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006502:	2b00      	cmp	r3, #0
 8006504:	d006      	beq.n	8006514 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <osThreadNew+0xd4>
        mem = 1;
 800650e:	2301      	movs	r3, #1
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
 8006512:	e010      	b.n	8006536 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10c      	bne.n	8006536 <osThreadNew+0xf6>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d108      	bne.n	8006536 <osThreadNew+0xf6>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d104      	bne.n	8006536 <osThreadNew+0xf6>
          mem = 0;
 800652c:	2300      	movs	r3, #0
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006530:	e001      	b.n	8006536 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	2b01      	cmp	r3, #1
 800653a:	d110      	bne.n	800655e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006544:	9202      	str	r2, [sp, #8]
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006550:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fe02 	bl	800715c <xTaskCreateStatic>
 8006558:	4603      	mov	r3, r0
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e013      	b.n	8006586 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	2b00      	cmp	r3, #0
 8006562:	d110      	bne.n	8006586 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	b29a      	uxth	r2, r3
 8006568:	f107 0314 	add.w	r3, r7, #20
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 fe49 	bl	800720e <xTaskCreate>
 800657c:	4603      	mov	r3, r0
 800657e:	2b01      	cmp	r3, #1
 8006580:	d001      	beq.n	8006586 <osThreadNew+0x146>
          hTask = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006586:	697b      	ldr	r3, [r7, #20]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3738      	adds	r7, #56	; 0x38
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	200001a0 	.word	0x200001a0

08006594 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800659c:	f3ef 8305 	mrs	r3, IPSR
 80065a0:	613b      	str	r3, [r7, #16]
  return(result);
 80065a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10f      	bne.n	80065c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a8:	f3ef 8310 	mrs	r3, PRIMASK
 80065ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d109      	bne.n	80065c8 <osDelay+0x34>
 80065b4:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <osDelay+0x58>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d109      	bne.n	80065d0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065bc:	f3ef 8311 	mrs	r3, BASEPRI
 80065c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <osDelay+0x3c>
    stat = osErrorISR;
 80065c8:	f06f 0305 	mvn.w	r3, #5
 80065cc:	617b      	str	r3, [r7, #20]
 80065ce:	e007      	b.n	80065e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 ff52 	bl	8007484 <vTaskDelay>
    }
  }

  return (stat);
 80065e0:	697b      	ldr	r3, [r7, #20]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	200001a0 	.word	0x200001a0

080065f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4a06      	ldr	r2, [pc, #24]	; (8006618 <vApplicationGetIdleTaskMemory+0x28>)
 8006600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4a05      	ldr	r2, [pc, #20]	; (800661c <vApplicationGetIdleTaskMemory+0x2c>)
 8006606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2280      	movs	r2, #128	; 0x80
 800660c:	601a      	str	r2, [r3, #0]
}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	bc80      	pop	{r7}
 8006616:	4770      	bx	lr
 8006618:	200001a4 	.word	0x200001a4
 800661c:	20000200 	.word	0x20000200

08006620 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4a07      	ldr	r2, [pc, #28]	; (800664c <vApplicationGetTimerTaskMemory+0x2c>)
 8006630:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	4a06      	ldr	r2, [pc, #24]	; (8006650 <vApplicationGetTimerTaskMemory+0x30>)
 8006636:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800663e:	601a      	str	r2, [r3, #0]
}
 8006640:	bf00      	nop
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000400 	.word	0x20000400
 8006650:	2000045c 	.word	0x2000045c

08006654 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f103 0208 	add.w	r2, r3, #8
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f04f 32ff 	mov.w	r2, #4294967295
 800666c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f103 0208 	add.w	r2, r3, #8
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f103 0208 	add.w	r2, r3, #8
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr

08006692 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr

080066aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	601a      	str	r2, [r3, #0]
}
 80066e6:	bf00      	nop
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bc80      	pop	{r7}
 80066ee:	4770      	bx	lr

080066f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006706:	d103      	bne.n	8006710 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	e00c      	b.n	800672a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3308      	adds	r3, #8
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	e002      	b.n	800671e <vListInsert+0x2e>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	429a      	cmp	r2, r3
 8006728:	d2f6      	bcs.n	8006718 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr

08006760 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6892      	ldr	r2, [r2, #8]
 8006776:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6852      	ldr	r2, [r2, #4]
 8006780:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	429a      	cmp	r2, r3
 800678a:	d103      	bne.n	8006794 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	1e5a      	subs	r2, r3, #1
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bc80      	pop	{r7}
 80067b0:	4770      	bx	lr
	...

080067b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	60bb      	str	r3, [r7, #8]
 80067da:	e7fe      	b.n	80067da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80067dc:	f001 ff94 	bl	8008708 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e8:	68f9      	ldr	r1, [r7, #12]
 80067ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	441a      	add	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680c:	3b01      	subs	r3, #1
 800680e:	68f9      	ldr	r1, [r7, #12]
 8006810:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006812:	fb01 f303 	mul.w	r3, r1, r3
 8006816:	441a      	add	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	22ff      	movs	r2, #255	; 0xff
 8006820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	22ff      	movs	r2, #255	; 0xff
 8006828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d114      	bne.n	800685c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d01a      	beq.n	8006870 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3310      	adds	r3, #16
 800683e:	4618      	mov	r0, r3
 8006840:	f001 f8d8 	bl	80079f4 <xTaskRemoveFromEventList>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d012      	beq.n	8006870 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800684a:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <xQueueGenericReset+0xcc>)
 800684c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	e009      	b.n	8006870 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3310      	adds	r3, #16
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff fef7 	bl	8006654 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3324      	adds	r3, #36	; 0x24
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff fef2 	bl	8006654 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006870:	f001 ff78 	bl	8008764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006874:	2301      	movs	r3, #1
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08e      	sub	sp, #56	; 0x38
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d109      	bne.n	80068ac <xQueueGenericCreateStatic+0x28>
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068aa:	e7fe      	b.n	80068aa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <xQueueGenericCreateStatic+0x42>
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24
 80068c4:	e7fe      	b.n	80068c4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <xQueueGenericCreateStatic+0x4e>
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <xQueueGenericCreateStatic+0x52>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e000      	b.n	80068d8 <xQueueGenericCreateStatic+0x54>
 80068d6:	2300      	movs	r3, #0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d109      	bne.n	80068f0 <xQueueGenericCreateStatic+0x6c>
 80068dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	623b      	str	r3, [r7, #32]
 80068ee:	e7fe      	b.n	80068ee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <xQueueGenericCreateStatic+0x78>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <xQueueGenericCreateStatic+0x7c>
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <xQueueGenericCreateStatic+0x7e>
 8006900:	2300      	movs	r3, #0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <xQueueGenericCreateStatic+0x96>
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	61fb      	str	r3, [r7, #28]
 8006918:	e7fe      	b.n	8006918 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800691a:	2350      	movs	r3, #80	; 0x50
 800691c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2b50      	cmp	r3, #80	; 0x50
 8006922:	d009      	beq.n	8006938 <xQueueGenericCreateStatic+0xb4>
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	e7fe      	b.n	8006936 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00d      	beq.n	800695e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800694a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	4613      	mov	r3, r2
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f805 	bl	8006968 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006960:	4618      	mov	r0, r3
 8006962:	3730      	adds	r7, #48	; 0x30
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d103      	bne.n	8006984 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	e002      	b.n	800698a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006996:	2101      	movs	r1, #1
 8006998:	69b8      	ldr	r0, [r7, #24]
 800699a:	f7ff ff0b 	bl	80067b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069a6:	bf00      	nop
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08e      	sub	sp, #56	; 0x38
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069be:	2300      	movs	r3, #0
 80069c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d109      	bne.n	80069e0 <xQueueGenericSend+0x30>
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069de:	e7fe      	b.n	80069de <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d103      	bne.n	80069ee <xQueueGenericSend+0x3e>
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <xQueueGenericSend+0x42>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <xQueueGenericSend+0x44>
 80069f2:	2300      	movs	r3, #0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d109      	bne.n	8006a0c <xQueueGenericSend+0x5c>
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0a:	e7fe      	b.n	8006a0a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d103      	bne.n	8006a1a <xQueueGenericSend+0x6a>
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d101      	bne.n	8006a1e <xQueueGenericSend+0x6e>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <xQueueGenericSend+0x70>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d109      	bne.n	8006a38 <xQueueGenericSend+0x88>
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	623b      	str	r3, [r7, #32]
 8006a36:	e7fe      	b.n	8006a36 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a38:	f001 f996 	bl	8007d68 <xTaskGetSchedulerState>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d102      	bne.n	8006a48 <xQueueGenericSend+0x98>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <xQueueGenericSend+0x9c>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <xQueueGenericSend+0x9e>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d109      	bne.n	8006a66 <xQueueGenericSend+0xb6>
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	e7fe      	b.n	8006a64 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a66:	f001 fe4f 	bl	8008708 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <xQueueGenericSend+0xcc>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d129      	bne.n	8006ad0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a82:	f000 f9ff 	bl	8006e84 <prvCopyDataToQueue>
 8006a86:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d010      	beq.n	8006ab2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	3324      	adds	r3, #36	; 0x24
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 ffad 	bl	80079f4 <xTaskRemoveFromEventList>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d013      	beq.n	8006ac8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006aa0:	4b3f      	ldr	r3, [pc, #252]	; (8006ba0 <xQueueGenericSend+0x1f0>)
 8006aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	e00a      	b.n	8006ac8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ab8:	4b39      	ldr	r3, [pc, #228]	; (8006ba0 <xQueueGenericSend+0x1f0>)
 8006aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ac8:	f001 fe4c 	bl	8008764 <vPortExitCritical>
				return pdPASS;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e063      	b.n	8006b98 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ad6:	f001 fe45 	bl	8008764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	e05c      	b.n	8006b98 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ae4:	f107 0314 	add.w	r3, r7, #20
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 ffe5 	bl	8007ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aee:	2301      	movs	r3, #1
 8006af0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006af2:	f001 fe37 	bl	8008764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006af6:	f000 fd5d 	bl	80075b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006afa:	f001 fe05 	bl	8008708 <vPortEnterCritical>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b04:	b25b      	sxtb	r3, r3
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d103      	bne.n	8006b14 <xQueueGenericSend+0x164>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b1a:	b25b      	sxtb	r3, r3
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b20:	d103      	bne.n	8006b2a <xQueueGenericSend+0x17a>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b2a:	f001 fe1b 	bl	8008764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b2e:	1d3a      	adds	r2, r7, #4
 8006b30:	f107 0314 	add.w	r3, r7, #20
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 ffd4 	bl	8007ae4 <xTaskCheckForTimeOut>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d124      	bne.n	8006b8c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b44:	f000 fa96 	bl	8007074 <prvIsQueueFull>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d018      	beq.n	8006b80 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	3310      	adds	r3, #16
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	4611      	mov	r1, r2
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fefe 	bl	8007958 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b5e:	f000 fa21 	bl	8006fa4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b62:	f000 fd35 	bl	80075d0 <xTaskResumeAll>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f47f af7c 	bne.w	8006a66 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006b6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <xQueueGenericSend+0x1f0>)
 8006b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	e772      	b.n	8006a66 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b82:	f000 fa0f 	bl	8006fa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b86:	f000 fd23 	bl	80075d0 <xTaskResumeAll>
 8006b8a:	e76c      	b.n	8006a66 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b8e:	f000 fa09 	bl	8006fa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b92:	f000 fd1d 	bl	80075d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b96:	2300      	movs	r3, #0
		}
	}
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3738      	adds	r7, #56	; 0x38
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	e000ed04 	.word	0xe000ed04

08006ba4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08e      	sub	sp, #56	; 0x38
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d109      	bne.n	8006bd0 <xQueueGenericSendFromISR+0x2c>
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bce:	e7fe      	b.n	8006bce <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d103      	bne.n	8006bde <xQueueGenericSendFromISR+0x3a>
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <xQueueGenericSendFromISR+0x3e>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e000      	b.n	8006be4 <xQueueGenericSendFromISR+0x40>
 8006be2:	2300      	movs	r3, #0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d109      	bne.n	8006bfc <xQueueGenericSendFromISR+0x58>
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	f383 8811 	msr	BASEPRI, r3
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	623b      	str	r3, [r7, #32]
 8006bfa:	e7fe      	b.n	8006bfa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d103      	bne.n	8006c0a <xQueueGenericSendFromISR+0x66>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d101      	bne.n	8006c0e <xQueueGenericSendFromISR+0x6a>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <xQueueGenericSendFromISR+0x6c>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d109      	bne.n	8006c28 <xQueueGenericSendFromISR+0x84>
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	e7fe      	b.n	8006c26 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c28:	f001 fe28 	bl	800887c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c2c:	f3ef 8211 	mrs	r2, BASEPRI
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	61ba      	str	r2, [r7, #24]
 8006c42:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c44:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d302      	bcc.n	8006c5a <xQueueGenericSendFromISR+0xb6>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d12c      	bne.n	8006cb4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c6a:	f000 f90b 	bl	8006e84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c6e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c76:	d112      	bne.n	8006c9e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d016      	beq.n	8006cae <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	3324      	adds	r3, #36	; 0x24
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 feb5 	bl	80079f4 <xTaskRemoveFromEventList>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00e      	beq.n	8006cae <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00b      	beq.n	8006cae <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	e007      	b.n	8006cae <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	b25a      	sxtb	r2, r3
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006cb2:	e001      	b.n	8006cb8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3738      	adds	r7, #56	; 0x38
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08c      	sub	sp, #48	; 0x30
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d109      	bne.n	8006cfa <xQueueReceive+0x2e>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	623b      	str	r3, [r7, #32]
 8006cf8:	e7fe      	b.n	8006cf8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <xQueueReceive+0x3c>
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <xQueueReceive+0x40>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <xQueueReceive+0x42>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <xQueueReceive+0x5a>
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	61fb      	str	r3, [r7, #28]
 8006d24:	e7fe      	b.n	8006d24 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d26:	f001 f81f 	bl	8007d68 <xTaskGetSchedulerState>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d102      	bne.n	8006d36 <xQueueReceive+0x6a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <xQueueReceive+0x6e>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <xQueueReceive+0x70>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <xQueueReceive+0x88>
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	61bb      	str	r3, [r7, #24]
 8006d52:	e7fe      	b.n	8006d52 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d54:	f001 fcd8 	bl	8008708 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01f      	beq.n	8006da4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d68:	f000 f8f6 	bl	8006f58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	1e5a      	subs	r2, r3, #1
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00f      	beq.n	8006d9c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	3310      	adds	r3, #16
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 fe37 	bl	80079f4 <xTaskRemoveFromEventList>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d007      	beq.n	8006d9c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d8c:	4b3c      	ldr	r3, [pc, #240]	; (8006e80 <xQueueReceive+0x1b4>)
 8006d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d9c:	f001 fce2 	bl	8008764 <vPortExitCritical>
				return pdPASS;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e069      	b.n	8006e78 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d103      	bne.n	8006db2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006daa:	f001 fcdb 	bl	8008764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006dae:	2300      	movs	r3, #0
 8006db0:	e062      	b.n	8006e78 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d106      	bne.n	8006dc6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006db8:	f107 0310 	add.w	r3, r7, #16
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 fe7b 	bl	8007ab8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dc6:	f001 fccd 	bl	8008764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dca:	f000 fbf3 	bl	80075b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dce:	f001 fc9b 	bl	8008708 <vPortEnterCritical>
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dd8:	b25b      	sxtb	r3, r3
 8006dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dde:	d103      	bne.n	8006de8 <xQueueReceive+0x11c>
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dee:	b25b      	sxtb	r3, r3
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df4:	d103      	bne.n	8006dfe <xQueueReceive+0x132>
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dfe:	f001 fcb1 	bl	8008764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e02:	1d3a      	adds	r2, r7, #4
 8006e04:	f107 0310 	add.w	r3, r7, #16
 8006e08:	4611      	mov	r1, r2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 fe6a 	bl	8007ae4 <xTaskCheckForTimeOut>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d123      	bne.n	8006e5e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e18:	f000 f916 	bl	8007048 <prvIsQueueEmpty>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d017      	beq.n	8006e52 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	3324      	adds	r3, #36	; 0x24
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fd94 	bl	8007958 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e32:	f000 f8b7 	bl	8006fa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e36:	f000 fbcb 	bl	80075d0 <xTaskResumeAll>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d189      	bne.n	8006d54 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006e40:	4b0f      	ldr	r3, [pc, #60]	; (8006e80 <xQueueReceive+0x1b4>)
 8006e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	e780      	b.n	8006d54 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e54:	f000 f8a6 	bl	8006fa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e58:	f000 fbba 	bl	80075d0 <xTaskResumeAll>
 8006e5c:	e77a      	b.n	8006d54 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e60:	f000 f8a0 	bl	8006fa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e64:	f000 fbb4 	bl	80075d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e6a:	f000 f8ed 	bl	8007048 <prvIsQueueEmpty>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f43f af6f 	beq.w	8006d54 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3730      	adds	r7, #48	; 0x30
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	e000ed04 	.word	0xe000ed04

08006e84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10d      	bne.n	8006ebe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d14d      	bne.n	8006f46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 ff78 	bl	8007da4 <xTaskPriorityDisinherit>
 8006eb4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	605a      	str	r2, [r3, #4]
 8006ebc:	e043      	b.n	8006f46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d119      	bne.n	8006ef8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6898      	ldr	r0, [r3, #8]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	461a      	mov	r2, r3
 8006ece:	68b9      	ldr	r1, [r7, #8]
 8006ed0:	f002 fba4 	bl	800961c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006edc:	441a      	add	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d32b      	bcc.n	8006f46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	609a      	str	r2, [r3, #8]
 8006ef6:	e026      	b.n	8006f46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	68d8      	ldr	r0, [r3, #12]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f00:	461a      	mov	r2, r3
 8006f02:	68b9      	ldr	r1, [r7, #8]
 8006f04:	f002 fb8a 	bl	800961c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	425b      	negs	r3, r3
 8006f12:	441a      	add	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d207      	bcs.n	8006f34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	425b      	negs	r3, r3
 8006f2e:	441a      	add	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d105      	bne.n	8006f46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f4e:	697b      	ldr	r3, [r7, #20]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d018      	beq.n	8006f9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	441a      	add	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d303      	bcc.n	8006f8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68d9      	ldr	r1, [r3, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	461a      	mov	r2, r3
 8006f96:	6838      	ldr	r0, [r7, #0]
 8006f98:	f002 fb40 	bl	800961c <memcpy>
	}
}
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fac:	f001 fbac 	bl	8008708 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fb8:	e011      	b.n	8006fde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d012      	beq.n	8006fe8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3324      	adds	r3, #36	; 0x24
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fd14 	bl	80079f4 <xTaskRemoveFromEventList>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fd2:	f000 fde7 	bl	8007ba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dce9      	bgt.n	8006fba <prvUnlockQueue+0x16>
 8006fe6:	e000      	b.n	8006fea <prvUnlockQueue+0x46>
					break;
 8006fe8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	22ff      	movs	r2, #255	; 0xff
 8006fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ff2:	f001 fbb7 	bl	8008764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ff6:	f001 fb87 	bl	8008708 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007000:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007002:	e011      	b.n	8007028 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d012      	beq.n	8007032 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3310      	adds	r3, #16
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fcef 	bl	80079f4 <xTaskRemoveFromEventList>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800701c:	f000 fdc2 	bl	8007ba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	3b01      	subs	r3, #1
 8007024:	b2db      	uxtb	r3, r3
 8007026:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800702c:	2b00      	cmp	r3, #0
 800702e:	dce9      	bgt.n	8007004 <prvUnlockQueue+0x60>
 8007030:	e000      	b.n	8007034 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007032:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	22ff      	movs	r2, #255	; 0xff
 8007038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800703c:	f001 fb92 	bl	8008764 <vPortExitCritical>
}
 8007040:	bf00      	nop
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007050:	f001 fb5a 	bl	8008708 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	2b00      	cmp	r3, #0
 800705a:	d102      	bne.n	8007062 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800705c:	2301      	movs	r3, #1
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	e001      	b.n	8007066 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007066:	f001 fb7d 	bl	8008764 <vPortExitCritical>

	return xReturn;
 800706a:	68fb      	ldr	r3, [r7, #12]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800707c:	f001 fb44 	bl	8008708 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007088:	429a      	cmp	r2, r3
 800708a:	d102      	bne.n	8007092 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800708c:	2301      	movs	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	e001      	b.n	8007096 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007096:	f001 fb65 	bl	8008764 <vPortExitCritical>

	return xReturn;
 800709a:	68fb      	ldr	r3, [r7, #12]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	e014      	b.n	80070de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070b4:	4a0e      	ldr	r2, [pc, #56]	; (80070f0 <vQueueAddToRegistry+0x4c>)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10b      	bne.n	80070d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070c0:	490b      	ldr	r1, [pc, #44]	; (80070f0 <vQueueAddToRegistry+0x4c>)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070ca:	4a09      	ldr	r2, [pc, #36]	; (80070f0 <vQueueAddToRegistry+0x4c>)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	4413      	add	r3, r2
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070d6:	e005      	b.n	80070e4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	3301      	adds	r3, #1
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b07      	cmp	r3, #7
 80070e2:	d9e7      	bls.n	80070b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070e4:	bf00      	nop
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20001ce8 	.word	0x20001ce8

080070f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007104:	f001 fb00 	bl	8008708 <vPortEnterCritical>
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800710e:	b25b      	sxtb	r3, r3
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d103      	bne.n	800711e <vQueueWaitForMessageRestricted+0x2a>
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007124:	b25b      	sxtb	r3, r3
 8007126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712a:	d103      	bne.n	8007134 <vQueueWaitForMessageRestricted+0x40>
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007134:	f001 fb16 	bl	8008764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	2b00      	cmp	r3, #0
 800713e:	d106      	bne.n	800714e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	3324      	adds	r3, #36	; 0x24
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fc29 	bl	80079a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800714e:	6978      	ldr	r0, [r7, #20]
 8007150:	f7ff ff28 	bl	8006fa4 <prvUnlockQueue>
	}
 8007154:	bf00      	nop
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08e      	sub	sp, #56	; 0x38
 8007160:	af04      	add	r7, sp, #16
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	2b00      	cmp	r3, #0
 800716e:	d109      	bne.n	8007184 <xTaskCreateStatic+0x28>
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	623b      	str	r3, [r7, #32]
 8007182:	e7fe      	b.n	8007182 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <xTaskCreateStatic+0x42>
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	61fb      	str	r3, [r7, #28]
 800719c:	e7fe      	b.n	800719c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800719e:	235c      	movs	r3, #92	; 0x5c
 80071a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b5c      	cmp	r3, #92	; 0x5c
 80071a6:	d009      	beq.n	80071bc <xTaskCreateStatic+0x60>
 80071a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	e7fe      	b.n	80071ba <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d01e      	beq.n	8007200 <xTaskCreateStatic+0xa4>
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01b      	beq.n	8007200 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	2202      	movs	r2, #2
 80071d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071da:	2300      	movs	r3, #0
 80071dc:	9303      	str	r3, [sp, #12]
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	9302      	str	r3, [sp, #8]
 80071e2:	f107 0314 	add.w	r3, r7, #20
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 f850 	bl	8007298 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071fa:	f000 f8d3 	bl	80073a4 <prvAddNewTaskToReadyList>
 80071fe:	e001      	b.n	8007204 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007204:	697b      	ldr	r3, [r7, #20]
	}
 8007206:	4618      	mov	r0, r3
 8007208:	3728      	adds	r7, #40	; 0x28
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800720e:	b580      	push	{r7, lr}
 8007210:	b08c      	sub	sp, #48	; 0x30
 8007212:	af04      	add	r7, sp, #16
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	603b      	str	r3, [r7, #0]
 800721a:	4613      	mov	r3, r2
 800721c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4618      	mov	r0, r3
 8007224:	f001 fb66 	bl	80088f4 <pvPortMalloc>
 8007228:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00e      	beq.n	800724e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007230:	205c      	movs	r0, #92	; 0x5c
 8007232:	f001 fb5f 	bl	80088f4 <pvPortMalloc>
 8007236:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	631a      	str	r2, [r3, #48]	; 0x30
 8007244:	e005      	b.n	8007252 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007246:	6978      	ldr	r0, [r7, #20]
 8007248:	f001 fc16 	bl	8008a78 <vPortFree>
 800724c:	e001      	b.n	8007252 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d017      	beq.n	8007288 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007260:	88fa      	ldrh	r2, [r7, #6]
 8007262:	2300      	movs	r3, #0
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	9302      	str	r3, [sp, #8]
 800726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f80e 	bl	8007298 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800727c:	69f8      	ldr	r0, [r7, #28]
 800727e:	f000 f891 	bl	80073a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007282:	2301      	movs	r3, #1
 8007284:	61bb      	str	r3, [r7, #24]
 8007286:	e002      	b.n	800728e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007288:	f04f 33ff 	mov.w	r3, #4294967295
 800728c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800728e:	69bb      	ldr	r3, [r7, #24]
	}
 8007290:	4618      	mov	r0, r3
 8007292:	3720      	adds	r7, #32
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	461a      	mov	r2, r3
 80072b0:	21a5      	movs	r1, #165	; 0xa5
 80072b2:	f002 f9be 	bl	8009632 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072c0:	3b01      	subs	r3, #1
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	f023 0307 	bic.w	r3, r3, #7
 80072ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <prvInitialiseNewTask+0x56>
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	e7fe      	b.n	80072ec <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072ee:	2300      	movs	r3, #0
 80072f0:	61fb      	str	r3, [r7, #28]
 80072f2:	e012      	b.n	800731a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	4413      	add	r3, r2
 80072fa:	7819      	ldrb	r1, [r3, #0]
 80072fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	4413      	add	r3, r2
 8007302:	3334      	adds	r3, #52	; 0x34
 8007304:	460a      	mov	r2, r1
 8007306:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	4413      	add	r3, r2
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d006      	beq.n	8007322 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	3301      	adds	r3, #1
 8007318:	61fb      	str	r3, [r7, #28]
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	2b0f      	cmp	r3, #15
 800731e:	d9e9      	bls.n	80072f4 <prvInitialiseNewTask+0x5c>
 8007320:	e000      	b.n	8007324 <prvInitialiseNewTask+0x8c>
		{
			break;
 8007322:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	2b37      	cmp	r3, #55	; 0x37
 8007330:	d901      	bls.n	8007336 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007332:	2337      	movs	r3, #55	; 0x37
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800733a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007340:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	2200      	movs	r2, #0
 8007346:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	3304      	adds	r3, #4
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff f9a0 	bl	8006692 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	3318      	adds	r3, #24
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff f99b 	bl	8006692 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007360:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007370:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	2200      	movs	r2, #0
 8007376:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	68f9      	ldr	r1, [r7, #12]
 8007384:	69b8      	ldr	r0, [r7, #24]
 8007386:	f001 f8d7 	bl	8008538 <pxPortInitialiseStack>
 800738a:	4602      	mov	r2, r0
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800739c:	bf00      	nop
 800739e:	3720      	adds	r7, #32
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073ac:	f001 f9ac 	bl	8008708 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073b0:	4b2d      	ldr	r3, [pc, #180]	; (8007468 <prvAddNewTaskToReadyList+0xc4>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3301      	adds	r3, #1
 80073b6:	4a2c      	ldr	r2, [pc, #176]	; (8007468 <prvAddNewTaskToReadyList+0xc4>)
 80073b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073ba:	4b2c      	ldr	r3, [pc, #176]	; (800746c <prvAddNewTaskToReadyList+0xc8>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d109      	bne.n	80073d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073c2:	4a2a      	ldr	r2, [pc, #168]	; (800746c <prvAddNewTaskToReadyList+0xc8>)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073c8:	4b27      	ldr	r3, [pc, #156]	; (8007468 <prvAddNewTaskToReadyList+0xc4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d110      	bne.n	80073f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073d0:	f000 fc0c 	bl	8007bec <prvInitialiseTaskLists>
 80073d4:	e00d      	b.n	80073f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073d6:	4b26      	ldr	r3, [pc, #152]	; (8007470 <prvAddNewTaskToReadyList+0xcc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d109      	bne.n	80073f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073de:	4b23      	ldr	r3, [pc, #140]	; (800746c <prvAddNewTaskToReadyList+0xc8>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d802      	bhi.n	80073f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073ec:	4a1f      	ldr	r2, [pc, #124]	; (800746c <prvAddNewTaskToReadyList+0xc8>)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073f2:	4b20      	ldr	r3, [pc, #128]	; (8007474 <prvAddNewTaskToReadyList+0xd0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3301      	adds	r3, #1
 80073f8:	4a1e      	ldr	r2, [pc, #120]	; (8007474 <prvAddNewTaskToReadyList+0xd0>)
 80073fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073fc:	4b1d      	ldr	r3, [pc, #116]	; (8007474 <prvAddNewTaskToReadyList+0xd0>)
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007408:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <prvAddNewTaskToReadyList+0xd4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d903      	bls.n	8007418 <prvAddNewTaskToReadyList+0x74>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	4a18      	ldr	r2, [pc, #96]	; (8007478 <prvAddNewTaskToReadyList+0xd4>)
 8007416:	6013      	str	r3, [r2, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4a15      	ldr	r2, [pc, #84]	; (800747c <prvAddNewTaskToReadyList+0xd8>)
 8007426:	441a      	add	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3304      	adds	r3, #4
 800742c:	4619      	mov	r1, r3
 800742e:	4610      	mov	r0, r2
 8007430:	f7ff f93b 	bl	80066aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007434:	f001 f996 	bl	8008764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007438:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <prvAddNewTaskToReadyList+0xcc>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00e      	beq.n	800745e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007440:	4b0a      	ldr	r3, [pc, #40]	; (800746c <prvAddNewTaskToReadyList+0xc8>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	429a      	cmp	r2, r3
 800744c:	d207      	bcs.n	800745e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800744e:	4b0c      	ldr	r3, [pc, #48]	; (8007480 <prvAddNewTaskToReadyList+0xdc>)
 8007450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20000d30 	.word	0x20000d30
 800746c:	2000085c 	.word	0x2000085c
 8007470:	20000d3c 	.word	0x20000d3c
 8007474:	20000d4c 	.word	0x20000d4c
 8007478:	20000d38 	.word	0x20000d38
 800747c:	20000860 	.word	0x20000860
 8007480:	e000ed04 	.word	0xe000ed04

08007484 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d016      	beq.n	80074c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007496:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <vTaskDelay+0x60>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d009      	beq.n	80074b2 <vTaskDelay+0x2e>
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	60bb      	str	r3, [r7, #8]
 80074b0:	e7fe      	b.n	80074b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80074b2:	f000 f87f 	bl	80075b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074b6:	2100      	movs	r1, #0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fcdf 	bl	8007e7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074be:	f000 f887 	bl	80075d0 <xTaskResumeAll>
 80074c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d107      	bne.n	80074da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80074ca:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <vTaskDelay+0x64>)
 80074cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074da:	bf00      	nop
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000d58 	.word	0x20000d58
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	; 0x28
 80074f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074fa:	463a      	mov	r2, r7
 80074fc:	1d39      	adds	r1, r7, #4
 80074fe:	f107 0308 	add.w	r3, r7, #8
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff f874 	bl	80065f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	9202      	str	r2, [sp, #8]
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	2300      	movs	r3, #0
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	2300      	movs	r3, #0
 8007518:	460a      	mov	r2, r1
 800751a:	4920      	ldr	r1, [pc, #128]	; (800759c <vTaskStartScheduler+0xb0>)
 800751c:	4820      	ldr	r0, [pc, #128]	; (80075a0 <vTaskStartScheduler+0xb4>)
 800751e:	f7ff fe1d 	bl	800715c <xTaskCreateStatic>
 8007522:	4602      	mov	r2, r0
 8007524:	4b1f      	ldr	r3, [pc, #124]	; (80075a4 <vTaskStartScheduler+0xb8>)
 8007526:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007528:	4b1e      	ldr	r3, [pc, #120]	; (80075a4 <vTaskStartScheduler+0xb8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007530:	2301      	movs	r3, #1
 8007532:	617b      	str	r3, [r7, #20]
 8007534:	e001      	b.n	800753a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d102      	bne.n	8007546 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007540:	f000 fcf0 	bl	8007f24 <xTimerCreateTimerTask>
 8007544:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d115      	bne.n	8007578 <vTaskStartScheduler+0x8c>
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800755e:	4b12      	ldr	r3, [pc, #72]	; (80075a8 <vTaskStartScheduler+0xbc>)
 8007560:	f04f 32ff 	mov.w	r2, #4294967295
 8007564:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <vTaskStartScheduler+0xc0>)
 8007568:	2201      	movs	r2, #1
 800756a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800756c:	4b10      	ldr	r3, [pc, #64]	; (80075b0 <vTaskStartScheduler+0xc4>)
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007572:	f001 f859 	bl	8008628 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007576:	e00d      	b.n	8007594 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757e:	d109      	bne.n	8007594 <vTaskStartScheduler+0xa8>
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	e7fe      	b.n	8007592 <vTaskStartScheduler+0xa6>
}
 8007594:	bf00      	nop
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	080096a0 	.word	0x080096a0
 80075a0:	08007bbd 	.word	0x08007bbd
 80075a4:	20000d54 	.word	0x20000d54
 80075a8:	20000d50 	.word	0x20000d50
 80075ac:	20000d3c 	.word	0x20000d3c
 80075b0:	20000d34 	.word	0x20000d34

080075b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80075b8:	4b04      	ldr	r3, [pc, #16]	; (80075cc <vTaskSuspendAll+0x18>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3301      	adds	r3, #1
 80075be:	4a03      	ldr	r2, [pc, #12]	; (80075cc <vTaskSuspendAll+0x18>)
 80075c0:	6013      	str	r3, [r2, #0]
}
 80075c2:	bf00      	nop
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	20000d58 	.word	0x20000d58

080075d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075da:	2300      	movs	r3, #0
 80075dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075de:	4b41      	ldr	r3, [pc, #260]	; (80076e4 <xTaskResumeAll+0x114>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d109      	bne.n	80075fa <xTaskResumeAll+0x2a>
 80075e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	603b      	str	r3, [r7, #0]
 80075f8:	e7fe      	b.n	80075f8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075fa:	f001 f885 	bl	8008708 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075fe:	4b39      	ldr	r3, [pc, #228]	; (80076e4 <xTaskResumeAll+0x114>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3b01      	subs	r3, #1
 8007604:	4a37      	ldr	r2, [pc, #220]	; (80076e4 <xTaskResumeAll+0x114>)
 8007606:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007608:	4b36      	ldr	r3, [pc, #216]	; (80076e4 <xTaskResumeAll+0x114>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d162      	bne.n	80076d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007610:	4b35      	ldr	r3, [pc, #212]	; (80076e8 <xTaskResumeAll+0x118>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d05e      	beq.n	80076d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007618:	e02f      	b.n	800767a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800761a:	4b34      	ldr	r3, [pc, #208]	; (80076ec <xTaskResumeAll+0x11c>)
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3318      	adds	r3, #24
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff f89a 	bl	8006760 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3304      	adds	r3, #4
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff f895 	bl	8006760 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763a:	4b2d      	ldr	r3, [pc, #180]	; (80076f0 <xTaskResumeAll+0x120>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	429a      	cmp	r2, r3
 8007640:	d903      	bls.n	800764a <xTaskResumeAll+0x7a>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	4a2a      	ldr	r2, [pc, #168]	; (80076f0 <xTaskResumeAll+0x120>)
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4a27      	ldr	r2, [pc, #156]	; (80076f4 <xTaskResumeAll+0x124>)
 8007658:	441a      	add	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3304      	adds	r3, #4
 800765e:	4619      	mov	r1, r3
 8007660:	4610      	mov	r0, r2
 8007662:	f7ff f822 	bl	80066aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766a:	4b23      	ldr	r3, [pc, #140]	; (80076f8 <xTaskResumeAll+0x128>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	429a      	cmp	r2, r3
 8007672:	d302      	bcc.n	800767a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007674:	4b21      	ldr	r3, [pc, #132]	; (80076fc <xTaskResumeAll+0x12c>)
 8007676:	2201      	movs	r2, #1
 8007678:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800767a:	4b1c      	ldr	r3, [pc, #112]	; (80076ec <xTaskResumeAll+0x11c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1cb      	bne.n	800761a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007688:	f000 fb4a 	bl	8007d20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800768c:	4b1c      	ldr	r3, [pc, #112]	; (8007700 <xTaskResumeAll+0x130>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d010      	beq.n	80076ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007698:	f000 f844 	bl	8007724 <xTaskIncrementTick>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80076a2:	4b16      	ldr	r3, [pc, #88]	; (80076fc <xTaskResumeAll+0x12c>)
 80076a4:	2201      	movs	r2, #1
 80076a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1f1      	bne.n	8007698 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80076b4:	4b12      	ldr	r3, [pc, #72]	; (8007700 <xTaskResumeAll+0x130>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076ba:	4b10      	ldr	r3, [pc, #64]	; (80076fc <xTaskResumeAll+0x12c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d009      	beq.n	80076d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076c2:	2301      	movs	r3, #1
 80076c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076c6:	4b0f      	ldr	r3, [pc, #60]	; (8007704 <xTaskResumeAll+0x134>)
 80076c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076d6:	f001 f845 	bl	8008764 <vPortExitCritical>

	return xAlreadyYielded;
 80076da:	68bb      	ldr	r3, [r7, #8]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	20000d58 	.word	0x20000d58
 80076e8:	20000d30 	.word	0x20000d30
 80076ec:	20000cf0 	.word	0x20000cf0
 80076f0:	20000d38 	.word	0x20000d38
 80076f4:	20000860 	.word	0x20000860
 80076f8:	2000085c 	.word	0x2000085c
 80076fc:	20000d44 	.word	0x20000d44
 8007700:	20000d40 	.word	0x20000d40
 8007704:	e000ed04 	.word	0xe000ed04

08007708 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800770e:	4b04      	ldr	r3, [pc, #16]	; (8007720 <xTaskGetTickCount+0x18>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007714:	687b      	ldr	r3, [r7, #4]
}
 8007716:	4618      	mov	r0, r3
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	bc80      	pop	{r7}
 800771e:	4770      	bx	lr
 8007720:	20000d34 	.word	0x20000d34

08007724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800772e:	4b51      	ldr	r3, [pc, #324]	; (8007874 <xTaskIncrementTick+0x150>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	f040 808d 	bne.w	8007852 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007738:	4b4f      	ldr	r3, [pc, #316]	; (8007878 <xTaskIncrementTick+0x154>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3301      	adds	r3, #1
 800773e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007740:	4a4d      	ldr	r2, [pc, #308]	; (8007878 <xTaskIncrementTick+0x154>)
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d11f      	bne.n	800778c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800774c:	4b4b      	ldr	r3, [pc, #300]	; (800787c <xTaskIncrementTick+0x158>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d009      	beq.n	800776a <xTaskIncrementTick+0x46>
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	603b      	str	r3, [r7, #0]
 8007768:	e7fe      	b.n	8007768 <xTaskIncrementTick+0x44>
 800776a:	4b44      	ldr	r3, [pc, #272]	; (800787c <xTaskIncrementTick+0x158>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	4b43      	ldr	r3, [pc, #268]	; (8007880 <xTaskIncrementTick+0x15c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a41      	ldr	r2, [pc, #260]	; (800787c <xTaskIncrementTick+0x158>)
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	4a41      	ldr	r2, [pc, #260]	; (8007880 <xTaskIncrementTick+0x15c>)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6013      	str	r3, [r2, #0]
 800777e:	4b41      	ldr	r3, [pc, #260]	; (8007884 <xTaskIncrementTick+0x160>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3301      	adds	r3, #1
 8007784:	4a3f      	ldr	r2, [pc, #252]	; (8007884 <xTaskIncrementTick+0x160>)
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	f000 faca 	bl	8007d20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800778c:	4b3e      	ldr	r3, [pc, #248]	; (8007888 <xTaskIncrementTick+0x164>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	429a      	cmp	r2, r3
 8007794:	d34e      	bcc.n	8007834 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007796:	4b39      	ldr	r3, [pc, #228]	; (800787c <xTaskIncrementTick+0x158>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <xTaskIncrementTick+0x80>
 80077a0:	2301      	movs	r3, #1
 80077a2:	e000      	b.n	80077a6 <xTaskIncrementTick+0x82>
 80077a4:	2300      	movs	r3, #0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d004      	beq.n	80077b4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077aa:	4b37      	ldr	r3, [pc, #220]	; (8007888 <xTaskIncrementTick+0x164>)
 80077ac:	f04f 32ff 	mov.w	r2, #4294967295
 80077b0:	601a      	str	r2, [r3, #0]
					break;
 80077b2:	e03f      	b.n	8007834 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80077b4:	4b31      	ldr	r3, [pc, #196]	; (800787c <xTaskIncrementTick+0x158>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d203      	bcs.n	80077d4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077cc:	4a2e      	ldr	r2, [pc, #184]	; (8007888 <xTaskIncrementTick+0x164>)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6013      	str	r3, [r2, #0]
						break;
 80077d2:	e02f      	b.n	8007834 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	3304      	adds	r3, #4
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fe ffc1 	bl	8006760 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d004      	beq.n	80077f0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	3318      	adds	r3, #24
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe ffb8 	bl	8006760 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f4:	4b25      	ldr	r3, [pc, #148]	; (800788c <xTaskIncrementTick+0x168>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d903      	bls.n	8007804 <xTaskIncrementTick+0xe0>
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	4a22      	ldr	r2, [pc, #136]	; (800788c <xTaskIncrementTick+0x168>)
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007808:	4613      	mov	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4a1f      	ldr	r2, [pc, #124]	; (8007890 <xTaskIncrementTick+0x16c>)
 8007812:	441a      	add	r2, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	3304      	adds	r3, #4
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f7fe ff45 	bl	80066aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007824:	4b1b      	ldr	r3, [pc, #108]	; (8007894 <xTaskIncrementTick+0x170>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	429a      	cmp	r2, r3
 800782c:	d3b3      	bcc.n	8007796 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800782e:	2301      	movs	r3, #1
 8007830:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007832:	e7b0      	b.n	8007796 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007834:	4b17      	ldr	r3, [pc, #92]	; (8007894 <xTaskIncrementTick+0x170>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783a:	4915      	ldr	r1, [pc, #84]	; (8007890 <xTaskIncrementTick+0x16c>)
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	440b      	add	r3, r1
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d907      	bls.n	800785c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800784c:	2301      	movs	r3, #1
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	e004      	b.n	800785c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007852:	4b11      	ldr	r3, [pc, #68]	; (8007898 <xTaskIncrementTick+0x174>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3301      	adds	r3, #1
 8007858:	4a0f      	ldr	r2, [pc, #60]	; (8007898 <xTaskIncrementTick+0x174>)
 800785a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800785c:	4b0f      	ldr	r3, [pc, #60]	; (800789c <xTaskIncrementTick+0x178>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007864:	2301      	movs	r3, #1
 8007866:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007868:	697b      	ldr	r3, [r7, #20]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	20000d58 	.word	0x20000d58
 8007878:	20000d34 	.word	0x20000d34
 800787c:	20000ce8 	.word	0x20000ce8
 8007880:	20000cec 	.word	0x20000cec
 8007884:	20000d48 	.word	0x20000d48
 8007888:	20000d50 	.word	0x20000d50
 800788c:	20000d38 	.word	0x20000d38
 8007890:	20000860 	.word	0x20000860
 8007894:	2000085c 	.word	0x2000085c
 8007898:	20000d40 	.word	0x20000d40
 800789c:	20000d44 	.word	0x20000d44

080078a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078a6:	4b27      	ldr	r3, [pc, #156]	; (8007944 <vTaskSwitchContext+0xa4>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078ae:	4b26      	ldr	r3, [pc, #152]	; (8007948 <vTaskSwitchContext+0xa8>)
 80078b0:	2201      	movs	r2, #1
 80078b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078b4:	e040      	b.n	8007938 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80078b6:	4b24      	ldr	r3, [pc, #144]	; (8007948 <vTaskSwitchContext+0xa8>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80078bc:	4b23      	ldr	r3, [pc, #140]	; (800794c <vTaskSwitchContext+0xac>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	e00f      	b.n	80078e4 <vTaskSwitchContext+0x44>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <vTaskSwitchContext+0x3e>
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	607b      	str	r3, [r7, #4]
 80078dc:	e7fe      	b.n	80078dc <vTaskSwitchContext+0x3c>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	491a      	ldr	r1, [pc, #104]	; (8007950 <vTaskSwitchContext+0xb0>)
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	4613      	mov	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	440b      	add	r3, r1
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0e5      	beq.n	80078c4 <vTaskSwitchContext+0x24>
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4613      	mov	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4a13      	ldr	r2, [pc, #76]	; (8007950 <vTaskSwitchContext+0xb0>)
 8007904:	4413      	add	r3, r2
 8007906:	60bb      	str	r3, [r7, #8]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	605a      	str	r2, [r3, #4]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	3308      	adds	r3, #8
 800791a:	429a      	cmp	r2, r3
 800791c:	d104      	bne.n	8007928 <vTaskSwitchContext+0x88>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	605a      	str	r2, [r3, #4]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	4a09      	ldr	r2, [pc, #36]	; (8007954 <vTaskSwitchContext+0xb4>)
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	4a06      	ldr	r2, [pc, #24]	; (800794c <vTaskSwitchContext+0xac>)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6013      	str	r3, [r2, #0]
}
 8007938:	bf00      	nop
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	bc80      	pop	{r7}
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20000d58 	.word	0x20000d58
 8007948:	20000d44 	.word	0x20000d44
 800794c:	20000d38 	.word	0x20000d38
 8007950:	20000860 	.word	0x20000860
 8007954:	2000085c 	.word	0x2000085c

08007958 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d109      	bne.n	800797c <vTaskPlaceOnEventList+0x24>
 8007968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	e7fe      	b.n	800797a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800797c:	4b07      	ldr	r3, [pc, #28]	; (800799c <vTaskPlaceOnEventList+0x44>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3318      	adds	r3, #24
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7fe feb3 	bl	80066f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800798a:	2101      	movs	r1, #1
 800798c:	6838      	ldr	r0, [r7, #0]
 800798e:	f000 fa75 	bl	8007e7c <prvAddCurrentTaskToDelayedList>
}
 8007992:	bf00      	nop
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	2000085c 	.word	0x2000085c

080079a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d109      	bne.n	80079c6 <vTaskPlaceOnEventListRestricted+0x26>
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	e7fe      	b.n	80079c4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079c6:	4b0a      	ldr	r3, [pc, #40]	; (80079f0 <vTaskPlaceOnEventListRestricted+0x50>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3318      	adds	r3, #24
 80079cc:	4619      	mov	r1, r3
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f7fe fe6b 	bl	80066aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80079da:	f04f 33ff 	mov.w	r3, #4294967295
 80079de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	68b8      	ldr	r0, [r7, #8]
 80079e4:	f000 fa4a 	bl	8007e7c <prvAddCurrentTaskToDelayedList>
	}
 80079e8:	bf00      	nop
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	2000085c 	.word	0x2000085c

080079f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d109      	bne.n	8007a1e <xTaskRemoveFromEventList+0x2a>
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e7fe      	b.n	8007a1c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	3318      	adds	r3, #24
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe fe9c 	bl	8006760 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a28:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <xTaskRemoveFromEventList+0xac>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d11d      	bne.n	8007a6c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	3304      	adds	r3, #4
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fe fe93 	bl	8006760 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3e:	4b19      	ldr	r3, [pc, #100]	; (8007aa4 <xTaskRemoveFromEventList+0xb0>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d903      	bls.n	8007a4e <xTaskRemoveFromEventList+0x5a>
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	4a16      	ldr	r2, [pc, #88]	; (8007aa4 <xTaskRemoveFromEventList+0xb0>)
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4a13      	ldr	r2, [pc, #76]	; (8007aa8 <xTaskRemoveFromEventList+0xb4>)
 8007a5c:	441a      	add	r2, r3
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	3304      	adds	r3, #4
 8007a62:	4619      	mov	r1, r3
 8007a64:	4610      	mov	r0, r2
 8007a66:	f7fe fe20 	bl	80066aa <vListInsertEnd>
 8007a6a:	e005      	b.n	8007a78 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	3318      	adds	r3, #24
 8007a70:	4619      	mov	r1, r3
 8007a72:	480e      	ldr	r0, [pc, #56]	; (8007aac <xTaskRemoveFromEventList+0xb8>)
 8007a74:	f7fe fe19 	bl	80066aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7c:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <xTaskRemoveFromEventList+0xbc>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d905      	bls.n	8007a92 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a86:	2301      	movs	r3, #1
 8007a88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a8a:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <xTaskRemoveFromEventList+0xc0>)
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	e001      	b.n	8007a96 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007a96:	697b      	ldr	r3, [r7, #20]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20000d58 	.word	0x20000d58
 8007aa4:	20000d38 	.word	0x20000d38
 8007aa8:	20000860 	.word	0x20000860
 8007aac:	20000cf0 	.word	0x20000cf0
 8007ab0:	2000085c 	.word	0x2000085c
 8007ab4:	20000d44 	.word	0x20000d44

08007ab8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <vTaskInternalSetTimeOutState+0x24>)
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ac8:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <vTaskInternalSetTimeOutState+0x28>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	605a      	str	r2, [r3, #4]
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	20000d48 	.word	0x20000d48
 8007ae0:	20000d34 	.word	0x20000d34

08007ae4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d109      	bne.n	8007b08 <xTaskCheckForTimeOut+0x24>
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	613b      	str	r3, [r7, #16]
 8007b06:	e7fe      	b.n	8007b06 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <xTaskCheckForTimeOut+0x3e>
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	e7fe      	b.n	8007b20 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007b22:	f000 fdf1 	bl	8008708 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b26:	4b1d      	ldr	r3, [pc, #116]	; (8007b9c <xTaskCheckForTimeOut+0xb8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3e:	d102      	bne.n	8007b46 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b40:	2300      	movs	r3, #0
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	e023      	b.n	8007b8e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	4b15      	ldr	r3, [pc, #84]	; (8007ba0 <xTaskCheckForTimeOut+0xbc>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d007      	beq.n	8007b62 <xTaskCheckForTimeOut+0x7e>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d302      	bcc.n	8007b62 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	61fb      	str	r3, [r7, #28]
 8007b60:	e015      	b.n	8007b8e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d20b      	bcs.n	8007b84 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	1ad2      	subs	r2, r2, r3
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7ff ff9d 	bl	8007ab8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61fb      	str	r3, [r7, #28]
 8007b82:	e004      	b.n	8007b8e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	2200      	movs	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b8e:	f000 fde9 	bl	8008764 <vPortExitCritical>

	return xReturn;
 8007b92:	69fb      	ldr	r3, [r7, #28]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3720      	adds	r7, #32
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	20000d34 	.word	0x20000d34
 8007ba0:	20000d48 	.word	0x20000d48

08007ba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ba8:	4b03      	ldr	r3, [pc, #12]	; (8007bb8 <vTaskMissedYield+0x14>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	601a      	str	r2, [r3, #0]
}
 8007bae:	bf00      	nop
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bc80      	pop	{r7}
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	20000d44 	.word	0x20000d44

08007bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bc4:	f000 f852 	bl	8007c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bc8:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <prvIdleTask+0x28>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d9f9      	bls.n	8007bc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bd0:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <prvIdleTask+0x2c>)
 8007bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007be0:	e7f0      	b.n	8007bc4 <prvIdleTask+0x8>
 8007be2:	bf00      	nop
 8007be4:	20000860 	.word	0x20000860
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	607b      	str	r3, [r7, #4]
 8007bf6:	e00c      	b.n	8007c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4a12      	ldr	r2, [pc, #72]	; (8007c4c <prvInitialiseTaskLists+0x60>)
 8007c04:	4413      	add	r3, r2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fe fd24 	bl	8006654 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	607b      	str	r3, [r7, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b37      	cmp	r3, #55	; 0x37
 8007c16:	d9ef      	bls.n	8007bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c18:	480d      	ldr	r0, [pc, #52]	; (8007c50 <prvInitialiseTaskLists+0x64>)
 8007c1a:	f7fe fd1b 	bl	8006654 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c1e:	480d      	ldr	r0, [pc, #52]	; (8007c54 <prvInitialiseTaskLists+0x68>)
 8007c20:	f7fe fd18 	bl	8006654 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c24:	480c      	ldr	r0, [pc, #48]	; (8007c58 <prvInitialiseTaskLists+0x6c>)
 8007c26:	f7fe fd15 	bl	8006654 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c2a:	480c      	ldr	r0, [pc, #48]	; (8007c5c <prvInitialiseTaskLists+0x70>)
 8007c2c:	f7fe fd12 	bl	8006654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c30:	480b      	ldr	r0, [pc, #44]	; (8007c60 <prvInitialiseTaskLists+0x74>)
 8007c32:	f7fe fd0f 	bl	8006654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c36:	4b0b      	ldr	r3, [pc, #44]	; (8007c64 <prvInitialiseTaskLists+0x78>)
 8007c38:	4a05      	ldr	r2, [pc, #20]	; (8007c50 <prvInitialiseTaskLists+0x64>)
 8007c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c3c:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <prvInitialiseTaskLists+0x7c>)
 8007c3e:	4a05      	ldr	r2, [pc, #20]	; (8007c54 <prvInitialiseTaskLists+0x68>)
 8007c40:	601a      	str	r2, [r3, #0]
}
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	20000860 	.word	0x20000860
 8007c50:	20000cc0 	.word	0x20000cc0
 8007c54:	20000cd4 	.word	0x20000cd4
 8007c58:	20000cf0 	.word	0x20000cf0
 8007c5c:	20000d04 	.word	0x20000d04
 8007c60:	20000d1c 	.word	0x20000d1c
 8007c64:	20000ce8 	.word	0x20000ce8
 8007c68:	20000cec 	.word	0x20000cec

08007c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c72:	e019      	b.n	8007ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c74:	f000 fd48 	bl	8008708 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007c78:	4b0f      	ldr	r3, [pc, #60]	; (8007cb8 <prvCheckTasksWaitingTermination+0x4c>)
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3304      	adds	r3, #4
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe fd6b 	bl	8006760 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c8a:	4b0c      	ldr	r3, [pc, #48]	; (8007cbc <prvCheckTasksWaitingTermination+0x50>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	4a0a      	ldr	r2, [pc, #40]	; (8007cbc <prvCheckTasksWaitingTermination+0x50>)
 8007c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c94:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <prvCheckTasksWaitingTermination+0x54>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	4a09      	ldr	r2, [pc, #36]	; (8007cc0 <prvCheckTasksWaitingTermination+0x54>)
 8007c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c9e:	f000 fd61 	bl	8008764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f80e 	bl	8007cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <prvCheckTasksWaitingTermination+0x54>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e1      	bne.n	8007c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20000d04 	.word	0x20000d04
 8007cbc:	20000d30 	.word	0x20000d30
 8007cc0:	20000d18 	.word	0x20000d18

08007cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d108      	bne.n	8007ce8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 fecc 	bl	8008a78 <vPortFree>
				vPortFree( pxTCB );
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fec9 	bl	8008a78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ce6:	e017      	b.n	8007d18 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d103      	bne.n	8007cfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fec0 	bl	8008a78 <vPortFree>
	}
 8007cf8:	e00e      	b.n	8007d18 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d009      	beq.n	8007d18 <prvDeleteTCB+0x54>
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	e7fe      	b.n	8007d16 <prvDeleteTCB+0x52>
	}
 8007d18:	bf00      	nop
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d26:	4b0e      	ldr	r3, [pc, #56]	; (8007d60 <prvResetNextTaskUnblockTime+0x40>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <prvResetNextTaskUnblockTime+0x14>
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <prvResetNextTaskUnblockTime+0x16>
 8007d34:	2300      	movs	r3, #0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d3a:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <prvResetNextTaskUnblockTime+0x44>)
 8007d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d40:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d42:	e008      	b.n	8007d56 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d44:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <prvResetNextTaskUnblockTime+0x40>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	4a04      	ldr	r2, [pc, #16]	; (8007d64 <prvResetNextTaskUnblockTime+0x44>)
 8007d54:	6013      	str	r3, [r2, #0]
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr
 8007d60:	20000ce8 	.word	0x20000ce8
 8007d64:	20000d50 	.word	0x20000d50

08007d68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d6e:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <xTaskGetSchedulerState+0x34>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d102      	bne.n	8007d7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d76:	2301      	movs	r3, #1
 8007d78:	607b      	str	r3, [r7, #4]
 8007d7a:	e008      	b.n	8007d8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d7c:	4b08      	ldr	r3, [pc, #32]	; (8007da0 <xTaskGetSchedulerState+0x38>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d102      	bne.n	8007d8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d84:	2302      	movs	r3, #2
 8007d86:	607b      	str	r3, [r7, #4]
 8007d88:	e001      	b.n	8007d8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d8e:	687b      	ldr	r3, [r7, #4]
	}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc80      	pop	{r7}
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	20000d3c 	.word	0x20000d3c
 8007da0:	20000d58 	.word	0x20000d58

08007da4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d054      	beq.n	8007e64 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007dba:	4b2d      	ldr	r3, [pc, #180]	; (8007e70 <xTaskPriorityDisinherit+0xcc>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d009      	beq.n	8007dd8 <xTaskPriorityDisinherit+0x34>
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	60fb      	str	r3, [r7, #12]
 8007dd6:	e7fe      	b.n	8007dd6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d109      	bne.n	8007df4 <xTaskPriorityDisinherit+0x50>
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	60bb      	str	r3, [r7, #8]
 8007df2:	e7fe      	b.n	8007df2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df8:	1e5a      	subs	r2, r3, #1
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d02c      	beq.n	8007e64 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d128      	bne.n	8007e64 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	3304      	adds	r3, #4
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fe fca2 	bl	8006760 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e34:	4b0f      	ldr	r3, [pc, #60]	; (8007e74 <xTaskPriorityDisinherit+0xd0>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d903      	bls.n	8007e44 <xTaskPriorityDisinherit+0xa0>
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	4a0c      	ldr	r2, [pc, #48]	; (8007e74 <xTaskPriorityDisinherit+0xd0>)
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4a09      	ldr	r2, [pc, #36]	; (8007e78 <xTaskPriorityDisinherit+0xd4>)
 8007e52:	441a      	add	r2, r3
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	f7fe fc25 	bl	80066aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e60:	2301      	movs	r3, #1
 8007e62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e64:	697b      	ldr	r3, [r7, #20]
	}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	2000085c 	.word	0x2000085c
 8007e74:	20000d38 	.word	0x20000d38
 8007e78:	20000860 	.word	0x20000860

08007e7c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e86:	4b21      	ldr	r3, [pc, #132]	; (8007f0c <prvAddCurrentTaskToDelayedList+0x90>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e8c:	4b20      	ldr	r3, [pc, #128]	; (8007f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3304      	adds	r3, #4
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fe fc64 	bl	8006760 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9e:	d10a      	bne.n	8007eb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d007      	beq.n	8007eb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ea6:	4b1a      	ldr	r3, [pc, #104]	; (8007f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4619      	mov	r1, r3
 8007eae:	4819      	ldr	r0, [pc, #100]	; (8007f14 <prvAddCurrentTaskToDelayedList+0x98>)
 8007eb0:	f7fe fbfb 	bl	80066aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007eb4:	e026      	b.n	8007f04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4413      	add	r3, r2
 8007ebc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ebe:	4b14      	ldr	r3, [pc, #80]	; (8007f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d209      	bcs.n	8007ee2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ece:	4b12      	ldr	r3, [pc, #72]	; (8007f18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	4b0f      	ldr	r3, [pc, #60]	; (8007f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4610      	mov	r0, r2
 8007edc:	f7fe fc08 	bl	80066f0 <vListInsert>
}
 8007ee0:	e010      	b.n	8007f04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ee2:	4b0e      	ldr	r3, [pc, #56]	; (8007f1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3304      	adds	r3, #4
 8007eec:	4619      	mov	r1, r3
 8007eee:	4610      	mov	r0, r2
 8007ef0:	f7fe fbfe 	bl	80066f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ef4:	4b0a      	ldr	r3, [pc, #40]	; (8007f20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d202      	bcs.n	8007f04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007efe:	4a08      	ldr	r2, [pc, #32]	; (8007f20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	6013      	str	r3, [r2, #0]
}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	20000d34 	.word	0x20000d34
 8007f10:	2000085c 	.word	0x2000085c
 8007f14:	20000d1c 	.word	0x20000d1c
 8007f18:	20000cec 	.word	0x20000cec
 8007f1c:	20000ce8 	.word	0x20000ce8
 8007f20:	20000d50 	.word	0x20000d50

08007f24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08a      	sub	sp, #40	; 0x28
 8007f28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f2e:	f000 fac3 	bl	80084b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f32:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <xTimerCreateTimerTask+0x80>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d021      	beq.n	8007f7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f42:	1d3a      	adds	r2, r7, #4
 8007f44:	f107 0108 	add.w	r1, r7, #8
 8007f48:	f107 030c 	add.w	r3, r7, #12
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fe fb67 	bl	8006620 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	9202      	str	r2, [sp, #8]
 8007f5a:	9301      	str	r3, [sp, #4]
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	2300      	movs	r3, #0
 8007f62:	460a      	mov	r2, r1
 8007f64:	4910      	ldr	r1, [pc, #64]	; (8007fa8 <xTimerCreateTimerTask+0x84>)
 8007f66:	4811      	ldr	r0, [pc, #68]	; (8007fac <xTimerCreateTimerTask+0x88>)
 8007f68:	f7ff f8f8 	bl	800715c <xTaskCreateStatic>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	4b10      	ldr	r3, [pc, #64]	; (8007fb0 <xTimerCreateTimerTask+0x8c>)
 8007f70:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f72:	4b0f      	ldr	r3, [pc, #60]	; (8007fb0 <xTimerCreateTimerTask+0x8c>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d109      	bne.n	8007f98 <xTimerCreateTimerTask+0x74>
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	613b      	str	r3, [r7, #16]
 8007f96:	e7fe      	b.n	8007f96 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007f98:	697b      	ldr	r3, [r7, #20]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000d8c 	.word	0x20000d8c
 8007fa8:	080096a8 	.word	0x080096a8
 8007fac:	080080cd 	.word	0x080080cd
 8007fb0:	20000d90 	.word	0x20000d90

08007fb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08a      	sub	sp, #40	; 0x28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d109      	bne.n	8007fe0 <xTimerGenericCommand+0x2c>
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	623b      	str	r3, [r7, #32]
 8007fde:	e7fe      	b.n	8007fde <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007fe0:	4b19      	ldr	r3, [pc, #100]	; (8008048 <xTimerGenericCommand+0x94>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d02a      	beq.n	800803e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b05      	cmp	r3, #5
 8007ff8:	dc18      	bgt.n	800802c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ffa:	f7ff feb5 	bl	8007d68 <xTaskGetSchedulerState>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b02      	cmp	r3, #2
 8008002:	d109      	bne.n	8008018 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008004:	4b10      	ldr	r3, [pc, #64]	; (8008048 <xTimerGenericCommand+0x94>)
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	f107 0110 	add.w	r1, r7, #16
 800800c:	2300      	movs	r3, #0
 800800e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008010:	f7fe fcce 	bl	80069b0 <xQueueGenericSend>
 8008014:	6278      	str	r0, [r7, #36]	; 0x24
 8008016:	e012      	b.n	800803e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008018:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <xTimerGenericCommand+0x94>)
 800801a:	6818      	ldr	r0, [r3, #0]
 800801c:	f107 0110 	add.w	r1, r7, #16
 8008020:	2300      	movs	r3, #0
 8008022:	2200      	movs	r2, #0
 8008024:	f7fe fcc4 	bl	80069b0 <xQueueGenericSend>
 8008028:	6278      	str	r0, [r7, #36]	; 0x24
 800802a:	e008      	b.n	800803e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800802c:	4b06      	ldr	r3, [pc, #24]	; (8008048 <xTimerGenericCommand+0x94>)
 800802e:	6818      	ldr	r0, [r3, #0]
 8008030:	f107 0110 	add.w	r1, r7, #16
 8008034:	2300      	movs	r3, #0
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	f7fe fdb4 	bl	8006ba4 <xQueueGenericSendFromISR>
 800803c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008040:	4618      	mov	r0, r3
 8008042:	3728      	adds	r7, #40	; 0x28
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	20000d8c 	.word	0x20000d8c

0800804c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af02      	add	r7, sp, #8
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008056:	4b1c      	ldr	r3, [pc, #112]	; (80080c8 <prvProcessExpiredTimer+0x7c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	3304      	adds	r3, #4
 8008064:	4618      	mov	r0, r3
 8008066:	f7fe fb7b 	bl	8006760 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d121      	bne.n	80080b6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	699a      	ldr	r2, [r3, #24]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	18d1      	adds	r1, r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	6978      	ldr	r0, [r7, #20]
 8008080:	f000 f8c8 	bl	8008214 <prvInsertTimerInActiveList>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d015      	beq.n	80080b6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800808a:	2300      	movs	r3, #0
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	2300      	movs	r3, #0
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	2100      	movs	r1, #0
 8008094:	6978      	ldr	r0, [r7, #20]
 8008096:	f7ff ff8d 	bl	8007fb4 <xTimerGenericCommand>
 800809a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d109      	bne.n	80080b6 <prvProcessExpiredTimer+0x6a>
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	e7fe      	b.n	80080b4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	6978      	ldr	r0, [r7, #20]
 80080bc:	4798      	blx	r3
}
 80080be:	bf00      	nop
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20000d84 	.word	0x20000d84

080080cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080d4:	f107 0308 	add.w	r3, r7, #8
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 f857 	bl	800818c <prvGetNextExpireTime>
 80080de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	4619      	mov	r1, r3
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 f803 	bl	80080f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80080ea:	f000 f8d5 	bl	8008298 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080ee:	e7f1      	b.n	80080d4 <prvTimerTask+0x8>

080080f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080fa:	f7ff fa5b 	bl	80075b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080fe:	f107 0308 	add.w	r3, r7, #8
 8008102:	4618      	mov	r0, r3
 8008104:	f000 f866 	bl	80081d4 <prvSampleTimeNow>
 8008108:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d130      	bne.n	8008172 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10a      	bne.n	800812c <prvProcessTimerOrBlockTask+0x3c>
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	429a      	cmp	r2, r3
 800811c:	d806      	bhi.n	800812c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800811e:	f7ff fa57 	bl	80075d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008122:	68f9      	ldr	r1, [r7, #12]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff ff91 	bl	800804c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800812a:	e024      	b.n	8008176 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d008      	beq.n	8008144 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008132:	4b13      	ldr	r3, [pc, #76]	; (8008180 <prvProcessTimerOrBlockTask+0x90>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	bf0c      	ite	eq
 800813c:	2301      	moveq	r3, #1
 800813e:	2300      	movne	r3, #0
 8008140:	b2db      	uxtb	r3, r3
 8008142:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008144:	4b0f      	ldr	r3, [pc, #60]	; (8008184 <prvProcessTimerOrBlockTask+0x94>)
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	4619      	mov	r1, r3
 8008152:	f7fe ffcf 	bl	80070f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008156:	f7ff fa3b 	bl	80075d0 <xTaskResumeAll>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10a      	bne.n	8008176 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008160:	4b09      	ldr	r3, [pc, #36]	; (8008188 <prvProcessTimerOrBlockTask+0x98>)
 8008162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	f3bf 8f6f 	isb	sy
}
 8008170:	e001      	b.n	8008176 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008172:	f7ff fa2d 	bl	80075d0 <xTaskResumeAll>
}
 8008176:	bf00      	nop
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000d88 	.word	0x20000d88
 8008184:	20000d8c 	.word	0x20000d8c
 8008188:	e000ed04 	.word	0xe000ed04

0800818c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008194:	4b0e      	ldr	r3, [pc, #56]	; (80081d0 <prvGetNextExpireTime+0x44>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	bf0c      	ite	eq
 800819e:	2301      	moveq	r3, #1
 80081a0:	2300      	movne	r3, #0
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	461a      	mov	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d105      	bne.n	80081be <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081b2:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <prvGetNextExpireTime+0x44>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	e001      	b.n	80081c2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081c2:	68fb      	ldr	r3, [r7, #12]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	20000d84 	.word	0x20000d84

080081d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80081dc:	f7ff fa94 	bl	8007708 <xTaskGetTickCount>
 80081e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80081e2:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <prvSampleTimeNow+0x3c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d205      	bcs.n	80081f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80081ec:	f000 f904 	bl	80083f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	e002      	b.n	80081fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081fe:	4a04      	ldr	r2, [pc, #16]	; (8008210 <prvSampleTimeNow+0x3c>)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008204:	68fb      	ldr	r3, [r7, #12]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20000d94 	.word	0x20000d94

08008214 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008222:	2300      	movs	r3, #0
 8008224:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	429a      	cmp	r2, r3
 8008238:	d812      	bhi.n	8008260 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	1ad2      	subs	r2, r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	429a      	cmp	r2, r3
 8008246:	d302      	bcc.n	800824e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008248:	2301      	movs	r3, #1
 800824a:	617b      	str	r3, [r7, #20]
 800824c:	e01b      	b.n	8008286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800824e:	4b10      	ldr	r3, [pc, #64]	; (8008290 <prvInsertTimerInActiveList+0x7c>)
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3304      	adds	r3, #4
 8008256:	4619      	mov	r1, r3
 8008258:	4610      	mov	r0, r2
 800825a:	f7fe fa49 	bl	80066f0 <vListInsert>
 800825e:	e012      	b.n	8008286 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	429a      	cmp	r2, r3
 8008266:	d206      	bcs.n	8008276 <prvInsertTimerInActiveList+0x62>
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	429a      	cmp	r2, r3
 800826e:	d302      	bcc.n	8008276 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008270:	2301      	movs	r3, #1
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	e007      	b.n	8008286 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008276:	4b07      	ldr	r3, [pc, #28]	; (8008294 <prvInsertTimerInActiveList+0x80>)
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3304      	adds	r3, #4
 800827e:	4619      	mov	r1, r3
 8008280:	4610      	mov	r0, r2
 8008282:	f7fe fa35 	bl	80066f0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008286:	697b      	ldr	r3, [r7, #20]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20000d88 	.word	0x20000d88
 8008294:	20000d84 	.word	0x20000d84

08008298 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08e      	sub	sp, #56	; 0x38
 800829c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800829e:	e099      	b.n	80083d4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	da17      	bge.n	80082d6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80082a6:	1d3b      	adds	r3, r7, #4
 80082a8:	3304      	adds	r3, #4
 80082aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80082ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d109      	bne.n	80082c6 <prvProcessReceivedCommands+0x2e>
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	61fb      	str	r3, [r7, #28]
 80082c4:	e7fe      	b.n	80082c4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082cc:	6850      	ldr	r0, [r2, #4]
 80082ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082d0:	6892      	ldr	r2, [r2, #8]
 80082d2:	4611      	mov	r1, r2
 80082d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	db7a      	blt.n	80083d2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d004      	beq.n	80082f2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ea:	3304      	adds	r3, #4
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe fa37 	bl	8006760 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082f2:	463b      	mov	r3, r7
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7ff ff6d 	bl	80081d4 <prvSampleTimeNow>
 80082fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b09      	cmp	r3, #9
 8008300:	d868      	bhi.n	80083d4 <prvProcessReceivedCommands+0x13c>
 8008302:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <prvProcessReceivedCommands+0x70>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	08008331 	.word	0x08008331
 800830c:	08008331 	.word	0x08008331
 8008310:	08008331 	.word	0x08008331
 8008314:	080083d5 	.word	0x080083d5
 8008318:	0800838b 	.word	0x0800838b
 800831c:	080083c1 	.word	0x080083c1
 8008320:	08008331 	.word	0x08008331
 8008324:	08008331 	.word	0x08008331
 8008328:	080083d5 	.word	0x080083d5
 800832c:	0800838b 	.word	0x0800838b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	18d1      	adds	r1, r2, r3
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800833c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800833e:	f7ff ff69 	bl	8008214 <prvInsertTimerInActiveList>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d045      	beq.n	80083d4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800834e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d13d      	bne.n	80083d4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	441a      	add	r2, r3
 8008360:	2300      	movs	r3, #0
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	2300      	movs	r3, #0
 8008366:	2100      	movs	r1, #0
 8008368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800836a:	f7ff fe23 	bl	8007fb4 <xTimerGenericCommand>
 800836e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d12e      	bne.n	80083d4 <prvProcessReceivedCommands+0x13c>
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	61bb      	str	r3, [r7, #24]
 8008388:	e7fe      	b.n	8008388 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d109      	bne.n	80083ac <prvProcessReceivedCommands+0x114>
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	617b      	str	r3, [r7, #20]
 80083aa:	e7fe      	b.n	80083aa <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ae:	699a      	ldr	r2, [r3, #24]
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	18d1      	adds	r1, r2, r3
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ba:	f7ff ff2b 	bl	8008214 <prvInsertTimerInActiveList>
					break;
 80083be:	e009      	b.n	80083d4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d104      	bne.n	80083d4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80083ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083cc:	f000 fb54 	bl	8008a78 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083d0:	e000      	b.n	80083d4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80083d2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083d4:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <prvProcessReceivedCommands+0x15c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	1d39      	adds	r1, r7, #4
 80083da:	2200      	movs	r2, #0
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe fc75 	bl	8006ccc <xQueueReceive>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f47f af5b 	bne.w	80082a0 <prvProcessReceivedCommands+0x8>
	}
}
 80083ea:	bf00      	nop
 80083ec:	3730      	adds	r7, #48	; 0x30
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20000d8c 	.word	0x20000d8c

080083f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083fe:	e044      	b.n	800848a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008400:	4b2b      	ldr	r3, [pc, #172]	; (80084b0 <prvSwitchTimerLists+0xb8>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800840a:	4b29      	ldr	r3, [pc, #164]	; (80084b0 <prvSwitchTimerLists+0xb8>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3304      	adds	r3, #4
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe f9a1 	bl	8006760 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d12d      	bne.n	800848a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	4413      	add	r3, r2
 8008436:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	429a      	cmp	r2, r3
 800843e:	d90e      	bls.n	800845e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800844c:	4b18      	ldr	r3, [pc, #96]	; (80084b0 <prvSwitchTimerLists+0xb8>)
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	3304      	adds	r3, #4
 8008454:	4619      	mov	r1, r3
 8008456:	4610      	mov	r0, r2
 8008458:	f7fe f94a 	bl	80066f0 <vListInsert>
 800845c:	e015      	b.n	800848a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800845e:	2300      	movs	r3, #0
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	2300      	movs	r3, #0
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	2100      	movs	r1, #0
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f7ff fda3 	bl	8007fb4 <xTimerGenericCommand>
 800846e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d109      	bne.n	800848a <prvSwitchTimerLists+0x92>
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	603b      	str	r3, [r7, #0]
 8008488:	e7fe      	b.n	8008488 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800848a:	4b09      	ldr	r3, [pc, #36]	; (80084b0 <prvSwitchTimerLists+0xb8>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1b5      	bne.n	8008400 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008494:	4b06      	ldr	r3, [pc, #24]	; (80084b0 <prvSwitchTimerLists+0xb8>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800849a:	4b06      	ldr	r3, [pc, #24]	; (80084b4 <prvSwitchTimerLists+0xbc>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a04      	ldr	r2, [pc, #16]	; (80084b0 <prvSwitchTimerLists+0xb8>)
 80084a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084a2:	4a04      	ldr	r2, [pc, #16]	; (80084b4 <prvSwitchTimerLists+0xbc>)
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	6013      	str	r3, [r2, #0]
}
 80084a8:	bf00      	nop
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000d84 	.word	0x20000d84
 80084b4:	20000d88 	.word	0x20000d88

080084b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084be:	f000 f923 	bl	8008708 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084c2:	4b15      	ldr	r3, [pc, #84]	; (8008518 <prvCheckForValidListAndQueue+0x60>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d120      	bne.n	800850c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084ca:	4814      	ldr	r0, [pc, #80]	; (800851c <prvCheckForValidListAndQueue+0x64>)
 80084cc:	f7fe f8c2 	bl	8006654 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084d0:	4813      	ldr	r0, [pc, #76]	; (8008520 <prvCheckForValidListAndQueue+0x68>)
 80084d2:	f7fe f8bf 	bl	8006654 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084d6:	4b13      	ldr	r3, [pc, #76]	; (8008524 <prvCheckForValidListAndQueue+0x6c>)
 80084d8:	4a10      	ldr	r2, [pc, #64]	; (800851c <prvCheckForValidListAndQueue+0x64>)
 80084da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80084dc:	4b12      	ldr	r3, [pc, #72]	; (8008528 <prvCheckForValidListAndQueue+0x70>)
 80084de:	4a10      	ldr	r2, [pc, #64]	; (8008520 <prvCheckForValidListAndQueue+0x68>)
 80084e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80084e2:	2300      	movs	r3, #0
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	4b11      	ldr	r3, [pc, #68]	; (800852c <prvCheckForValidListAndQueue+0x74>)
 80084e8:	4a11      	ldr	r2, [pc, #68]	; (8008530 <prvCheckForValidListAndQueue+0x78>)
 80084ea:	2110      	movs	r1, #16
 80084ec:	200a      	movs	r0, #10
 80084ee:	f7fe f9c9 	bl	8006884 <xQueueGenericCreateStatic>
 80084f2:	4602      	mov	r2, r0
 80084f4:	4b08      	ldr	r3, [pc, #32]	; (8008518 <prvCheckForValidListAndQueue+0x60>)
 80084f6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80084f8:	4b07      	ldr	r3, [pc, #28]	; (8008518 <prvCheckForValidListAndQueue+0x60>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d005      	beq.n	800850c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008500:	4b05      	ldr	r3, [pc, #20]	; (8008518 <prvCheckForValidListAndQueue+0x60>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	490b      	ldr	r1, [pc, #44]	; (8008534 <prvCheckForValidListAndQueue+0x7c>)
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe fdcc 	bl	80070a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800850c:	f000 f92a 	bl	8008764 <vPortExitCritical>
}
 8008510:	bf00      	nop
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20000d8c 	.word	0x20000d8c
 800851c:	20000d5c 	.word	0x20000d5c
 8008520:	20000d70 	.word	0x20000d70
 8008524:	20000d84 	.word	0x20000d84
 8008528:	20000d88 	.word	0x20000d88
 800852c:	20000e38 	.word	0x20000e38
 8008530:	20000d98 	.word	0x20000d98
 8008534:	080096b0 	.word	0x080096b0

08008538 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3b04      	subs	r3, #4
 8008548:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3b04      	subs	r3, #4
 8008556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f023 0201 	bic.w	r2, r3, #1
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3b04      	subs	r3, #4
 8008566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008568:	4a08      	ldr	r2, [pc, #32]	; (800858c <pxPortInitialiseStack+0x54>)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3b14      	subs	r3, #20
 8008572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3b20      	subs	r3, #32
 800857e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008580:	68fb      	ldr	r3, [r7, #12]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	bc80      	pop	{r7}
 800858a:	4770      	bx	lr
 800858c:	08008591 	.word	0x08008591

08008590 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008596:	2300      	movs	r3, #0
 8008598:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800859a:	4b10      	ldr	r3, [pc, #64]	; (80085dc <prvTaskExitError+0x4c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a2:	d009      	beq.n	80085b8 <prvTaskExitError+0x28>
 80085a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	e7fe      	b.n	80085b6 <prvTaskExitError+0x26>
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085ca:	bf00      	nop
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0fc      	beq.n	80085cc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085d2:	bf00      	nop
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bc80      	pop	{r7}
 80085da:	4770      	bx	lr
 80085dc:	2000011c 	.word	0x2000011c

080085e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085e0:	4b07      	ldr	r3, [pc, #28]	; (8008600 <pxCurrentTCBConst2>)
 80085e2:	6819      	ldr	r1, [r3, #0]
 80085e4:	6808      	ldr	r0, [r1, #0]
 80085e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085ea:	f380 8809 	msr	PSP, r0
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f04f 0000 	mov.w	r0, #0
 80085f6:	f380 8811 	msr	BASEPRI, r0
 80085fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80085fe:	4770      	bx	lr

08008600 <pxCurrentTCBConst2>:
 8008600:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop

08008608 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008608:	4806      	ldr	r0, [pc, #24]	; (8008624 <prvPortStartFirstTask+0x1c>)
 800860a:	6800      	ldr	r0, [r0, #0]
 800860c:	6800      	ldr	r0, [r0, #0]
 800860e:	f380 8808 	msr	MSP, r0
 8008612:	b662      	cpsie	i
 8008614:	b661      	cpsie	f
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	df00      	svc	0
 8008620:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008622:	bf00      	nop
 8008624:	e000ed08 	.word	0xe000ed08

08008628 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800862e:	4b31      	ldr	r3, [pc, #196]	; (80086f4 <xPortStartScheduler+0xcc>)
 8008630:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	b2db      	uxtb	r3, r3
 8008638:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	22ff      	movs	r2, #255	; 0xff
 800863e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	b2db      	uxtb	r3, r3
 8008646:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008650:	b2da      	uxtb	r2, r3
 8008652:	4b29      	ldr	r3, [pc, #164]	; (80086f8 <xPortStartScheduler+0xd0>)
 8008654:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008656:	4b29      	ldr	r3, [pc, #164]	; (80086fc <xPortStartScheduler+0xd4>)
 8008658:	2207      	movs	r2, #7
 800865a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800865c:	e009      	b.n	8008672 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800865e:	4b27      	ldr	r3, [pc, #156]	; (80086fc <xPortStartScheduler+0xd4>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3b01      	subs	r3, #1
 8008664:	4a25      	ldr	r2, [pc, #148]	; (80086fc <xPortStartScheduler+0xd4>)
 8008666:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008668:	78fb      	ldrb	r3, [r7, #3]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	b2db      	uxtb	r3, r3
 8008670:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008672:	78fb      	ldrb	r3, [r7, #3]
 8008674:	b2db      	uxtb	r3, r3
 8008676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867a:	2b80      	cmp	r3, #128	; 0x80
 800867c:	d0ef      	beq.n	800865e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800867e:	4b1f      	ldr	r3, [pc, #124]	; (80086fc <xPortStartScheduler+0xd4>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f1c3 0307 	rsb	r3, r3, #7
 8008686:	2b04      	cmp	r3, #4
 8008688:	d009      	beq.n	800869e <xPortStartScheduler+0x76>
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	60bb      	str	r3, [r7, #8]
 800869c:	e7fe      	b.n	800869c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800869e:	4b17      	ldr	r3, [pc, #92]	; (80086fc <xPortStartScheduler+0xd4>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	021b      	lsls	r3, r3, #8
 80086a4:	4a15      	ldr	r2, [pc, #84]	; (80086fc <xPortStartScheduler+0xd4>)
 80086a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086a8:	4b14      	ldr	r3, [pc, #80]	; (80086fc <xPortStartScheduler+0xd4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086b0:	4a12      	ldr	r2, [pc, #72]	; (80086fc <xPortStartScheduler+0xd4>)
 80086b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086bc:	4b10      	ldr	r3, [pc, #64]	; (8008700 <xPortStartScheduler+0xd8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0f      	ldr	r2, [pc, #60]	; (8008700 <xPortStartScheduler+0xd8>)
 80086c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086c8:	4b0d      	ldr	r3, [pc, #52]	; (8008700 <xPortStartScheduler+0xd8>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a0c      	ldr	r2, [pc, #48]	; (8008700 <xPortStartScheduler+0xd8>)
 80086ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086d4:	f000 f8b0 	bl	8008838 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086d8:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <xPortStartScheduler+0xdc>)
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086de:	f7ff ff93 	bl	8008608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086e2:	f7ff f8dd 	bl	80078a0 <vTaskSwitchContext>
	prvTaskExitError();
 80086e6:	f7ff ff53 	bl	8008590 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	e000e400 	.word	0xe000e400
 80086f8:	20000e88 	.word	0x20000e88
 80086fc:	20000e8c 	.word	0x20000e8c
 8008700:	e000ed20 	.word	0xe000ed20
 8008704:	2000011c 	.word	0x2000011c

08008708 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008720:	4b0e      	ldr	r3, [pc, #56]	; (800875c <vPortEnterCritical+0x54>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3301      	adds	r3, #1
 8008726:	4a0d      	ldr	r2, [pc, #52]	; (800875c <vPortEnterCritical+0x54>)
 8008728:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800872a:	4b0c      	ldr	r3, [pc, #48]	; (800875c <vPortEnterCritical+0x54>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d10e      	bne.n	8008750 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008732:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <vPortEnterCritical+0x58>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d009      	beq.n	8008750 <vPortEnterCritical+0x48>
 800873c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	603b      	str	r3, [r7, #0]
 800874e:	e7fe      	b.n	800874e <vPortEnterCritical+0x46>
	}
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	bc80      	pop	{r7}
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	2000011c 	.word	0x2000011c
 8008760:	e000ed04 	.word	0xe000ed04

08008764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800876a:	4b10      	ldr	r3, [pc, #64]	; (80087ac <vPortExitCritical+0x48>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d109      	bne.n	8008786 <vPortExitCritical+0x22>
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	607b      	str	r3, [r7, #4]
 8008784:	e7fe      	b.n	8008784 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008786:	4b09      	ldr	r3, [pc, #36]	; (80087ac <vPortExitCritical+0x48>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3b01      	subs	r3, #1
 800878c:	4a07      	ldr	r2, [pc, #28]	; (80087ac <vPortExitCritical+0x48>)
 800878e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008790:	4b06      	ldr	r3, [pc, #24]	; (80087ac <vPortExitCritical+0x48>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d104      	bne.n	80087a2 <vPortExitCritical+0x3e>
 8008798:	2300      	movs	r3, #0
 800879a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr
 80087ac:	2000011c 	.word	0x2000011c

080087b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087b0:	f3ef 8009 	mrs	r0, PSP
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <pxCurrentTCBConst>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087c0:	6010      	str	r0, [r2, #0]
 80087c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80087c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087ca:	f380 8811 	msr	BASEPRI, r0
 80087ce:	f7ff f867 	bl	80078a0 <vTaskSwitchContext>
 80087d2:	f04f 0000 	mov.w	r0, #0
 80087d6:	f380 8811 	msr	BASEPRI, r0
 80087da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80087de:	6819      	ldr	r1, [r3, #0]
 80087e0:	6808      	ldr	r0, [r1, #0]
 80087e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087e6:	f380 8809 	msr	PSP, r0
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	4770      	bx	lr

080087f0 <pxCurrentTCBConst>:
 80087f0:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop

080087f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008810:	f7fe ff88 	bl	8007724 <xTaskIncrementTick>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d003      	beq.n	8008822 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <xPortSysTickHandler+0x3c>)
 800881c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	2300      	movs	r3, #0
 8008824:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	e000ed04 	.word	0xe000ed04

08008838 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800883c:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <vPortSetupTimerInterrupt+0x30>)
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008842:	4b0a      	ldr	r3, [pc, #40]	; (800886c <vPortSetupTimerInterrupt+0x34>)
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008848:	4b09      	ldr	r3, [pc, #36]	; (8008870 <vPortSetupTimerInterrupt+0x38>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a09      	ldr	r2, [pc, #36]	; (8008874 <vPortSetupTimerInterrupt+0x3c>)
 800884e:	fba2 2303 	umull	r2, r3, r2, r3
 8008852:	099b      	lsrs	r3, r3, #6
 8008854:	4a08      	ldr	r2, [pc, #32]	; (8008878 <vPortSetupTimerInterrupt+0x40>)
 8008856:	3b01      	subs	r3, #1
 8008858:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800885a:	4b03      	ldr	r3, [pc, #12]	; (8008868 <vPortSetupTimerInterrupt+0x30>)
 800885c:	2207      	movs	r2, #7
 800885e:	601a      	str	r2, [r3, #0]
}
 8008860:	bf00      	nop
 8008862:	46bd      	mov	sp, r7
 8008864:	bc80      	pop	{r7}
 8008866:	4770      	bx	lr
 8008868:	e000e010 	.word	0xe000e010
 800886c:	e000e018 	.word	0xe000e018
 8008870:	20000000 	.word	0x20000000
 8008874:	10624dd3 	.word	0x10624dd3
 8008878:	e000e014 	.word	0xe000e014

0800887c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008882:	f3ef 8305 	mrs	r3, IPSR
 8008886:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b0f      	cmp	r3, #15
 800888c:	d913      	bls.n	80088b6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800888e:	4a15      	ldr	r2, [pc, #84]	; (80088e4 <vPortValidateInterruptPriority+0x68>)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008898:	4b13      	ldr	r3, [pc, #76]	; (80088e8 <vPortValidateInterruptPriority+0x6c>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	7afa      	ldrb	r2, [r7, #11]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d209      	bcs.n	80088b6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	607b      	str	r3, [r7, #4]
 80088b4:	e7fe      	b.n	80088b4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088b6:	4b0d      	ldr	r3, [pc, #52]	; (80088ec <vPortValidateInterruptPriority+0x70>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088be:	4b0c      	ldr	r3, [pc, #48]	; (80088f0 <vPortValidateInterruptPriority+0x74>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d909      	bls.n	80088da <vPortValidateInterruptPriority+0x5e>
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	603b      	str	r3, [r7, #0]
 80088d8:	e7fe      	b.n	80088d8 <vPortValidateInterruptPriority+0x5c>
	}
 80088da:	bf00      	nop
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	bc80      	pop	{r7}
 80088e2:	4770      	bx	lr
 80088e4:	e000e3f0 	.word	0xe000e3f0
 80088e8:	20000e88 	.word	0x20000e88
 80088ec:	e000ed0c 	.word	0xe000ed0c
 80088f0:	20000e8c 	.word	0x20000e8c

080088f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b08a      	sub	sp, #40	; 0x28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088fc:	2300      	movs	r3, #0
 80088fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008900:	f7fe fe58 	bl	80075b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008904:	4b57      	ldr	r3, [pc, #348]	; (8008a64 <pvPortMalloc+0x170>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d101      	bne.n	8008910 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800890c:	f000 f90c 	bl	8008b28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008910:	4b55      	ldr	r3, [pc, #340]	; (8008a68 <pvPortMalloc+0x174>)
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4013      	ands	r3, r2
 8008918:	2b00      	cmp	r3, #0
 800891a:	f040 808c 	bne.w	8008a36 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d01c      	beq.n	800895e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008924:	2208      	movs	r2, #8
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4413      	add	r3, r2
 800892a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	2b00      	cmp	r3, #0
 8008934:	d013      	beq.n	800895e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f023 0307 	bic.w	r3, r3, #7
 800893c:	3308      	adds	r3, #8
 800893e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	2b00      	cmp	r3, #0
 8008948:	d009      	beq.n	800895e <pvPortMalloc+0x6a>
 800894a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	e7fe      	b.n	800895c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d068      	beq.n	8008a36 <pvPortMalloc+0x142>
 8008964:	4b41      	ldr	r3, [pc, #260]	; (8008a6c <pvPortMalloc+0x178>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	429a      	cmp	r2, r3
 800896c:	d863      	bhi.n	8008a36 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800896e:	4b40      	ldr	r3, [pc, #256]	; (8008a70 <pvPortMalloc+0x17c>)
 8008970:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008972:	4b3f      	ldr	r3, [pc, #252]	; (8008a70 <pvPortMalloc+0x17c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008978:	e004      	b.n	8008984 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	429a      	cmp	r2, r3
 800898c:	d903      	bls.n	8008996 <pvPortMalloc+0xa2>
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1f1      	bne.n	800897a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008996:	4b33      	ldr	r3, [pc, #204]	; (8008a64 <pvPortMalloc+0x170>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899c:	429a      	cmp	r2, r3
 800899e:	d04a      	beq.n	8008a36 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2208      	movs	r2, #8
 80089a6:	4413      	add	r3, r2
 80089a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	1ad2      	subs	r2, r2, r3
 80089ba:	2308      	movs	r3, #8
 80089bc:	005b      	lsls	r3, r3, #1
 80089be:	429a      	cmp	r2, r3
 80089c0:	d91e      	bls.n	8008a00 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4413      	add	r3, r2
 80089c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	f003 0307 	and.w	r3, r3, #7
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d009      	beq.n	80089e8 <pvPortMalloc+0xf4>
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	613b      	str	r3, [r7, #16]
 80089e6:	e7fe      	b.n	80089e6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	1ad2      	subs	r2, r2, r3
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089fa:	69b8      	ldr	r0, [r7, #24]
 80089fc:	f000 f8f6 	bl	8008bec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a00:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <pvPortMalloc+0x178>)
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	4a18      	ldr	r2, [pc, #96]	; (8008a6c <pvPortMalloc+0x178>)
 8008a0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a0e:	4b17      	ldr	r3, [pc, #92]	; (8008a6c <pvPortMalloc+0x178>)
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	4b18      	ldr	r3, [pc, #96]	; (8008a74 <pvPortMalloc+0x180>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d203      	bcs.n	8008a22 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a1a:	4b14      	ldr	r3, [pc, #80]	; (8008a6c <pvPortMalloc+0x178>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a15      	ldr	r2, [pc, #84]	; (8008a74 <pvPortMalloc+0x180>)
 8008a20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	4b10      	ldr	r3, [pc, #64]	; (8008a68 <pvPortMalloc+0x174>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a36:	f7fe fdcb 	bl	80075d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	f003 0307 	and.w	r3, r3, #7
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <pvPortMalloc+0x164>
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	e7fe      	b.n	8008a56 <pvPortMalloc+0x162>
	return pvReturn;
 8008a58:	69fb      	ldr	r3, [r7, #28]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3728      	adds	r7, #40	; 0x28
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20001a98 	.word	0x20001a98
 8008a68:	20001aa4 	.word	0x20001aa4
 8008a6c:	20001a9c 	.word	0x20001a9c
 8008a70:	20001a90 	.word	0x20001a90
 8008a74:	20001aa0 	.word	0x20001aa0

08008a78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d046      	beq.n	8008b18 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a8a:	2308      	movs	r3, #8
 8008a8c:	425b      	negs	r3, r3
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	4413      	add	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	685a      	ldr	r2, [r3, #4]
 8008a9c:	4b20      	ldr	r3, [pc, #128]	; (8008b20 <vPortFree+0xa8>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d109      	bne.n	8008aba <vPortFree+0x42>
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	e7fe      	b.n	8008ab8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d009      	beq.n	8008ad6 <vPortFree+0x5e>
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	60bb      	str	r3, [r7, #8]
 8008ad4:	e7fe      	b.n	8008ad4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	4b11      	ldr	r3, [pc, #68]	; (8008b20 <vPortFree+0xa8>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d019      	beq.n	8008b18 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d115      	bne.n	8008b18 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <vPortFree+0xa8>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	43db      	mvns	r3, r3
 8008af6:	401a      	ands	r2, r3
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008afc:	f7fe fd5a 	bl	80075b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	4b07      	ldr	r3, [pc, #28]	; (8008b24 <vPortFree+0xac>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4413      	add	r3, r2
 8008b0a:	4a06      	ldr	r2, [pc, #24]	; (8008b24 <vPortFree+0xac>)
 8008b0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b0e:	6938      	ldr	r0, [r7, #16]
 8008b10:	f000 f86c 	bl	8008bec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b14:	f7fe fd5c 	bl	80075d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b18:	bf00      	nop
 8008b1a:	3718      	adds	r7, #24
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20001aa4 	.word	0x20001aa4
 8008b24:	20001a9c 	.word	0x20001a9c

08008b28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008b32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b34:	4b27      	ldr	r3, [pc, #156]	; (8008bd4 <prvHeapInit+0xac>)
 8008b36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f003 0307 	and.w	r3, r3, #7
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00c      	beq.n	8008b5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3307      	adds	r3, #7
 8008b46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f023 0307 	bic.w	r3, r3, #7
 8008b4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	4a1f      	ldr	r2, [pc, #124]	; (8008bd4 <prvHeapInit+0xac>)
 8008b58:	4413      	add	r3, r2
 8008b5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b60:	4a1d      	ldr	r2, [pc, #116]	; (8008bd8 <prvHeapInit+0xb0>)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b66:	4b1c      	ldr	r3, [pc, #112]	; (8008bd8 <prvHeapInit+0xb0>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	4413      	add	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b74:	2208      	movs	r2, #8
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	1a9b      	subs	r3, r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f023 0307 	bic.w	r3, r3, #7
 8008b82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4a15      	ldr	r2, [pc, #84]	; (8008bdc <prvHeapInit+0xb4>)
 8008b88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b8a:	4b14      	ldr	r3, [pc, #80]	; (8008bdc <prvHeapInit+0xb4>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b92:	4b12      	ldr	r3, [pc, #72]	; (8008bdc <prvHeapInit+0xb4>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	1ad2      	subs	r2, r2, r3
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ba8:	4b0c      	ldr	r3, [pc, #48]	; (8008bdc <prvHeapInit+0xb4>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	4a0a      	ldr	r2, [pc, #40]	; (8008be0 <prvHeapInit+0xb8>)
 8008bb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	4a09      	ldr	r2, [pc, #36]	; (8008be4 <prvHeapInit+0xbc>)
 8008bbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bc0:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <prvHeapInit+0xc0>)
 8008bc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bc6:	601a      	str	r2, [r3, #0]
}
 8008bc8:	bf00      	nop
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bc80      	pop	{r7}
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	20000e90 	.word	0x20000e90
 8008bd8:	20001a90 	.word	0x20001a90
 8008bdc:	20001a98 	.word	0x20001a98
 8008be0:	20001aa0 	.word	0x20001aa0
 8008be4:	20001a9c 	.word	0x20001a9c
 8008be8:	20001aa4 	.word	0x20001aa4

08008bec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bf4:	4b27      	ldr	r3, [pc, #156]	; (8008c94 <prvInsertBlockIntoFreeList+0xa8>)
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	e002      	b.n	8008c00 <prvInsertBlockIntoFreeList+0x14>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d8f7      	bhi.n	8008bfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	4413      	add	r3, r2
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d108      	bne.n	8008c2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	441a      	add	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	441a      	add	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d118      	bne.n	8008c74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	4b14      	ldr	r3, [pc, #80]	; (8008c98 <prvInsertBlockIntoFreeList+0xac>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d00d      	beq.n	8008c6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	441a      	add	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	e008      	b.n	8008c7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c6a:	4b0b      	ldr	r3, [pc, #44]	; (8008c98 <prvInsertBlockIntoFreeList+0xac>)
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	e003      	b.n	8008c7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d002      	beq.n	8008c8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c8a:	bf00      	nop
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bc80      	pop	{r7}
 8008c92:	4770      	bx	lr
 8008c94:	20001a90 	.word	0x20001a90
 8008c98:	20001a98 	.word	0x20001a98

08008c9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	4912      	ldr	r1, [pc, #72]	; (8008cec <MX_USB_DEVICE_Init+0x50>)
 8008ca4:	4812      	ldr	r0, [pc, #72]	; (8008cf0 <MX_USB_DEVICE_Init+0x54>)
 8008ca6:	f7fc fad8 	bl	800525a <USBD_Init>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cb0:	f7f7 fb9c 	bl	80003ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008cb4:	490f      	ldr	r1, [pc, #60]	; (8008cf4 <MX_USB_DEVICE_Init+0x58>)
 8008cb6:	480e      	ldr	r0, [pc, #56]	; (8008cf0 <MX_USB_DEVICE_Init+0x54>)
 8008cb8:	f7fc fafa 	bl	80052b0 <USBD_RegisterClass>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cc2:	f7f7 fb93 	bl	80003ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cc6:	490c      	ldr	r1, [pc, #48]	; (8008cf8 <MX_USB_DEVICE_Init+0x5c>)
 8008cc8:	4809      	ldr	r0, [pc, #36]	; (8008cf0 <MX_USB_DEVICE_Init+0x54>)
 8008cca:	f7fc fa2b 	bl	8005124 <USBD_CDC_RegisterInterface>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008cd4:	f7f7 fb8a 	bl	80003ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008cd8:	4805      	ldr	r0, [pc, #20]	; (8008cf0 <MX_USB_DEVICE_Init+0x54>)
 8008cda:	f7fc fb02 	bl	80052e2 <USBD_Start>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ce4:	f7f7 fb82 	bl	80003ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ce8:	bf00      	nop
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	20000130 	.word	0x20000130
 8008cf0:	20001d28 	.word	0x20001d28
 8008cf4:	20000018 	.word	0x20000018
 8008cf8:	20000120 	.word	0x20000120

08008cfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d00:	2200      	movs	r2, #0
 8008d02:	4905      	ldr	r1, [pc, #20]	; (8008d18 <CDC_Init_FS+0x1c>)
 8008d04:	4805      	ldr	r0, [pc, #20]	; (8008d1c <CDC_Init_FS+0x20>)
 8008d06:	f7fc fa23 	bl	8005150 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d0a:	4905      	ldr	r1, [pc, #20]	; (8008d20 <CDC_Init_FS+0x24>)
 8008d0c:	4803      	ldr	r0, [pc, #12]	; (8008d1c <CDC_Init_FS+0x20>)
 8008d0e:	f7fc fa38 	bl	8005182 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	2000202c 	.word	0x2000202c
 8008d1c:	20001d28 	.word	0x20001d28
 8008d20:	20001fec 	.word	0x20001fec

08008d24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d24:	b480      	push	{r7}
 8008d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bc80      	pop	{r7}
 8008d30:	4770      	bx	lr
	...

08008d34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	6039      	str	r1, [r7, #0]
 8008d3e:	71fb      	strb	r3, [r7, #7]
 8008d40:	4613      	mov	r3, r2
 8008d42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d44:	79fb      	ldrb	r3, [r7, #7]
 8008d46:	2b23      	cmp	r3, #35	; 0x23
 8008d48:	d84a      	bhi.n	8008de0 <CDC_Control_FS+0xac>
 8008d4a:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <CDC_Control_FS+0x1c>)
 8008d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d50:	08008de1 	.word	0x08008de1
 8008d54:	08008de1 	.word	0x08008de1
 8008d58:	08008de1 	.word	0x08008de1
 8008d5c:	08008de1 	.word	0x08008de1
 8008d60:	08008de1 	.word	0x08008de1
 8008d64:	08008de1 	.word	0x08008de1
 8008d68:	08008de1 	.word	0x08008de1
 8008d6c:	08008de1 	.word	0x08008de1
 8008d70:	08008de1 	.word	0x08008de1
 8008d74:	08008de1 	.word	0x08008de1
 8008d78:	08008de1 	.word	0x08008de1
 8008d7c:	08008de1 	.word	0x08008de1
 8008d80:	08008de1 	.word	0x08008de1
 8008d84:	08008de1 	.word	0x08008de1
 8008d88:	08008de1 	.word	0x08008de1
 8008d8c:	08008de1 	.word	0x08008de1
 8008d90:	08008de1 	.word	0x08008de1
 8008d94:	08008de1 	.word	0x08008de1
 8008d98:	08008de1 	.word	0x08008de1
 8008d9c:	08008de1 	.word	0x08008de1
 8008da0:	08008de1 	.word	0x08008de1
 8008da4:	08008de1 	.word	0x08008de1
 8008da8:	08008de1 	.word	0x08008de1
 8008dac:	08008de1 	.word	0x08008de1
 8008db0:	08008de1 	.word	0x08008de1
 8008db4:	08008de1 	.word	0x08008de1
 8008db8:	08008de1 	.word	0x08008de1
 8008dbc:	08008de1 	.word	0x08008de1
 8008dc0:	08008de1 	.word	0x08008de1
 8008dc4:	08008de1 	.word	0x08008de1
 8008dc8:	08008de1 	.word	0x08008de1
 8008dcc:	08008de1 	.word	0x08008de1
 8008dd0:	08008de1 	.word	0x08008de1
 8008dd4:	08008de1 	.word	0x08008de1
 8008dd8:	08008de1 	.word	0x08008de1
 8008ddc:	08008de1 	.word	0x08008de1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008de0:	bf00      	nop
  }

  return (USBD_OK);
 8008de2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bc80      	pop	{r7}
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop

08008df0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	4805      	ldr	r0, [pc, #20]	; (8008e14 <CDC_Receive_FS+0x24>)
 8008dfe:	f7fc f9c0 	bl	8005182 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e02:	4804      	ldr	r0, [pc, #16]	; (8008e14 <CDC_Receive_FS+0x24>)
 8008e04:	f7fc f9ff 	bl	8005206 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20001d28 	.word	0x20001d28

08008e18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e28:	4b0d      	ldr	r3, [pc, #52]	; (8008e60 <CDC_Transmit_FS+0x48>)
 8008e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e00b      	b.n	8008e56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e3e:	887b      	ldrh	r3, [r7, #2]
 8008e40:	461a      	mov	r2, r3
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	4806      	ldr	r0, [pc, #24]	; (8008e60 <CDC_Transmit_FS+0x48>)
 8008e46:	f7fc f983 	bl	8005150 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e4a:	4805      	ldr	r0, [pc, #20]	; (8008e60 <CDC_Transmit_FS+0x48>)
 8008e4c:	f7fc f9ac 	bl	80051a8 <USBD_CDC_TransmitPacket>
 8008e50:	4603      	mov	r3, r0
 8008e52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20001d28 	.word	0x20001d28

08008e64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	6039      	str	r1, [r7, #0]
 8008e6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2212      	movs	r2, #18
 8008e74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e76:	4b03      	ldr	r3, [pc, #12]	; (8008e84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bc80      	pop	{r7}
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	2000014c 	.word	0x2000014c

08008e88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	4603      	mov	r3, r0
 8008e90:	6039      	str	r1, [r7, #0]
 8008e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2204      	movs	r2, #4
 8008e98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e9a:	4b03      	ldr	r3, [pc, #12]	; (8008ea8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bc80      	pop	{r7}
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	20000160 	.word	0x20000160

08008eac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	6039      	str	r1, [r7, #0]
 8008eb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008eb8:	79fb      	ldrb	r3, [r7, #7]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d105      	bne.n	8008eca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	4907      	ldr	r1, [pc, #28]	; (8008ee0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ec2:	4808      	ldr	r0, [pc, #32]	; (8008ee4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ec4:	f7fd f979 	bl	80061ba <USBD_GetString>
 8008ec8:	e004      	b.n	8008ed4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	4904      	ldr	r1, [pc, #16]	; (8008ee0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ece:	4805      	ldr	r0, [pc, #20]	; (8008ee4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ed0:	f7fd f973 	bl	80061ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ed4:	4b02      	ldr	r3, [pc, #8]	; (8008ee0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	2000206c 	.word	0x2000206c
 8008ee4:	080096b8 	.word	0x080096b8

08008ee8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	6039      	str	r1, [r7, #0]
 8008ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	4904      	ldr	r1, [pc, #16]	; (8008f08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ef8:	4804      	ldr	r0, [pc, #16]	; (8008f0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008efa:	f7fd f95e 	bl	80061ba <USBD_GetString>
  return USBD_StrDesc;
 8008efe:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	2000206c 	.word	0x2000206c
 8008f0c:	080096d0 	.word	0x080096d0

08008f10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	6039      	str	r1, [r7, #0]
 8008f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	221a      	movs	r2, #26
 8008f20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f22:	f000 f843 	bl	8008fac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f26:	4b02      	ldr	r3, [pc, #8]	; (8008f30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	20000164 	.word	0x20000164

08008f34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	6039      	str	r1, [r7, #0]
 8008f3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f40:	79fb      	ldrb	r3, [r7, #7]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d105      	bne.n	8008f52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	4907      	ldr	r1, [pc, #28]	; (8008f68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f4a:	4808      	ldr	r0, [pc, #32]	; (8008f6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f4c:	f7fd f935 	bl	80061ba <USBD_GetString>
 8008f50:	e004      	b.n	8008f5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	4904      	ldr	r1, [pc, #16]	; (8008f68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f56:	4805      	ldr	r0, [pc, #20]	; (8008f6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f58:	f7fd f92f 	bl	80061ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f5c:	4b02      	ldr	r3, [pc, #8]	; (8008f68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	2000206c 	.word	0x2000206c
 8008f6c:	080096e4 	.word	0x080096e4

08008f70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	6039      	str	r1, [r7, #0]
 8008f7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d105      	bne.n	8008f8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	4907      	ldr	r1, [pc, #28]	; (8008fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f86:	4808      	ldr	r0, [pc, #32]	; (8008fa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f88:	f7fd f917 	bl	80061ba <USBD_GetString>
 8008f8c:	e004      	b.n	8008f98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	4904      	ldr	r1, [pc, #16]	; (8008fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f92:	4805      	ldr	r0, [pc, #20]	; (8008fa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f94:	f7fd f911 	bl	80061ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f98:	4b02      	ldr	r3, [pc, #8]	; (8008fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	2000206c 	.word	0x2000206c
 8008fa8:	080096f0 	.word	0x080096f0

08008fac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008fb2:	4b0f      	ldr	r3, [pc, #60]	; (8008ff0 <Get_SerialNum+0x44>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008fb8:	4b0e      	ldr	r3, [pc, #56]	; (8008ff4 <Get_SerialNum+0x48>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008fbe:	4b0e      	ldr	r3, [pc, #56]	; (8008ff8 <Get_SerialNum+0x4c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4413      	add	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d009      	beq.n	8008fe6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008fd2:	2208      	movs	r2, #8
 8008fd4:	4909      	ldr	r1, [pc, #36]	; (8008ffc <Get_SerialNum+0x50>)
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f000 f814 	bl	8009004 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fdc:	2204      	movs	r2, #4
 8008fde:	4908      	ldr	r1, [pc, #32]	; (8009000 <Get_SerialNum+0x54>)
 8008fe0:	68b8      	ldr	r0, [r7, #8]
 8008fe2:	f000 f80f 	bl	8009004 <IntToUnicode>
  }
}
 8008fe6:	bf00      	nop
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	1ffff7e8 	.word	0x1ffff7e8
 8008ff4:	1ffff7ec 	.word	0x1ffff7ec
 8008ff8:	1ffff7f0 	.word	0x1ffff7f0
 8008ffc:	20000166 	.word	0x20000166
 8009000:	20000176 	.word	0x20000176

08009004 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	4613      	mov	r3, r2
 8009010:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009016:	2300      	movs	r3, #0
 8009018:	75fb      	strb	r3, [r7, #23]
 800901a:	e027      	b.n	800906c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	0f1b      	lsrs	r3, r3, #28
 8009020:	2b09      	cmp	r3, #9
 8009022:	d80b      	bhi.n	800903c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	0f1b      	lsrs	r3, r3, #28
 8009028:	b2da      	uxtb	r2, r3
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	005b      	lsls	r3, r3, #1
 800902e:	4619      	mov	r1, r3
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	440b      	add	r3, r1
 8009034:	3230      	adds	r2, #48	; 0x30
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	701a      	strb	r2, [r3, #0]
 800903a:	e00a      	b.n	8009052 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	0f1b      	lsrs	r3, r3, #28
 8009040:	b2da      	uxtb	r2, r3
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	005b      	lsls	r3, r3, #1
 8009046:	4619      	mov	r1, r3
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	440b      	add	r3, r1
 800904c:	3237      	adds	r2, #55	; 0x37
 800904e:	b2d2      	uxtb	r2, r2
 8009050:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	3301      	adds	r3, #1
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	4413      	add	r3, r2
 8009062:	2200      	movs	r2, #0
 8009064:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	3301      	adds	r3, #1
 800906a:	75fb      	strb	r3, [r7, #23]
 800906c:	7dfa      	ldrb	r2, [r7, #23]
 800906e:	79fb      	ldrb	r3, [r7, #7]
 8009070:	429a      	cmp	r2, r3
 8009072:	d3d3      	bcc.n	800901c <IntToUnicode+0x18>
  }
}
 8009074:	bf00      	nop
 8009076:	371c      	adds	r7, #28
 8009078:	46bd      	mov	sp, r7
 800907a:	bc80      	pop	{r7}
 800907c:	4770      	bx	lr
	...

08009080 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a0d      	ldr	r2, [pc, #52]	; (80090c4 <HAL_PCD_MspInit+0x44>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d113      	bne.n	80090ba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009092:	4b0d      	ldr	r3, [pc, #52]	; (80090c8 <HAL_PCD_MspInit+0x48>)
 8009094:	69db      	ldr	r3, [r3, #28]
 8009096:	4a0c      	ldr	r2, [pc, #48]	; (80090c8 <HAL_PCD_MspInit+0x48>)
 8009098:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800909c:	61d3      	str	r3, [r2, #28]
 800909e:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <HAL_PCD_MspInit+0x48>)
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80090aa:	2200      	movs	r2, #0
 80090ac:	2105      	movs	r1, #5
 80090ae:	2014      	movs	r0, #20
 80090b0:	f7f7 fb69 	bl	8000786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80090b4:	2014      	movs	r0, #20
 80090b6:	f7f7 fb82 	bl	80007be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80090ba:	bf00      	nop
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	40005c00 	.word	0x40005c00
 80090c8:	40021000 	.word	0x40021000

080090cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80090e0:	4619      	mov	r1, r3
 80090e2:	4610      	mov	r0, r2
 80090e4:	f7fc f945 	bl	8005372 <USBD_LL_SetupStage>
}
 80090e8:	bf00      	nop
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	6879      	ldr	r1, [r7, #4]
 8009106:	4613      	mov	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	440b      	add	r3, r1
 8009110:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	78fb      	ldrb	r3, [r7, #3]
 8009118:	4619      	mov	r1, r3
 800911a:	f7fc f975 	bl	8005408 <USBD_LL_DataOutStage>
}
 800911e:	bf00      	nop
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	460b      	mov	r3, r1
 8009130:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009138:	78fa      	ldrb	r2, [r7, #3]
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	440b      	add	r3, r1
 8009146:	333c      	adds	r3, #60	; 0x3c
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	78fb      	ldrb	r3, [r7, #3]
 800914c:	4619      	mov	r1, r3
 800914e:	f7fc f9cc 	bl	80054ea <USBD_LL_DataInStage>
}
 8009152:	bf00      	nop
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009168:	4618      	mov	r0, r3
 800916a:	f7fc fadc 	bl	8005726 <USBD_LL_SOF>
}
 800916e:	bf00      	nop
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b084      	sub	sp, #16
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800917e:	2301      	movs	r3, #1
 8009180:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	2b02      	cmp	r3, #2
 8009188:	d001      	beq.n	800918e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800918a:	f7f7 f92f 	bl	80003ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009194:	7bfa      	ldrb	r2, [r7, #15]
 8009196:	4611      	mov	r1, r2
 8009198:	4618      	mov	r0, r3
 800919a:	f7fc fa8c 	bl	80056b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fc fa45 	bl	8005634 <USBD_LL_Reset>
}
 80091aa:	bf00      	nop
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
	...

080091b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fc fa86 	bl	80056d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d005      	beq.n	80091dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091d0:	4b04      	ldr	r3, [pc, #16]	; (80091e4 <HAL_PCD_SuspendCallback+0x30>)
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	4a03      	ldr	r2, [pc, #12]	; (80091e4 <HAL_PCD_SuspendCallback+0x30>)
 80091d6:	f043 0306 	orr.w	r3, r3, #6
 80091da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	e000ed00 	.word	0xe000ed00

080091e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fc fa80 	bl	80056fc <USBD_LL_Resume>
}
 80091fc:	bf00      	nop
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800920c:	4a28      	ldr	r2, [pc, #160]	; (80092b0 <USBD_LL_Init+0xac>)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a26      	ldr	r2, [pc, #152]	; (80092b0 <USBD_LL_Init+0xac>)
 8009218:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800921c:	4b24      	ldr	r3, [pc, #144]	; (80092b0 <USBD_LL_Init+0xac>)
 800921e:	4a25      	ldr	r2, [pc, #148]	; (80092b4 <USBD_LL_Init+0xb0>)
 8009220:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009222:	4b23      	ldr	r3, [pc, #140]	; (80092b0 <USBD_LL_Init+0xac>)
 8009224:	2208      	movs	r2, #8
 8009226:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009228:	4b21      	ldr	r3, [pc, #132]	; (80092b0 <USBD_LL_Init+0xac>)
 800922a:	2202      	movs	r2, #2
 800922c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800922e:	4b20      	ldr	r3, [pc, #128]	; (80092b0 <USBD_LL_Init+0xac>)
 8009230:	2200      	movs	r2, #0
 8009232:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009234:	4b1e      	ldr	r3, [pc, #120]	; (80092b0 <USBD_LL_Init+0xac>)
 8009236:	2200      	movs	r2, #0
 8009238:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800923a:	4b1d      	ldr	r3, [pc, #116]	; (80092b0 <USBD_LL_Init+0xac>)
 800923c:	2200      	movs	r2, #0
 800923e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009240:	481b      	ldr	r0, [pc, #108]	; (80092b0 <USBD_LL_Init+0xac>)
 8009242:	f7f7 fc62 	bl	8000b0a <HAL_PCD_Init>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800924c:	f7f7 f8ce 	bl	80003ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009256:	2318      	movs	r3, #24
 8009258:	2200      	movs	r2, #0
 800925a:	2100      	movs	r1, #0
 800925c:	f7f8 ff96 	bl	800218c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009266:	2358      	movs	r3, #88	; 0x58
 8009268:	2200      	movs	r2, #0
 800926a:	2180      	movs	r1, #128	; 0x80
 800926c:	f7f8 ff8e 	bl	800218c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009276:	23c0      	movs	r3, #192	; 0xc0
 8009278:	2200      	movs	r2, #0
 800927a:	2181      	movs	r1, #129	; 0x81
 800927c:	f7f8 ff86 	bl	800218c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009286:	f44f 7388 	mov.w	r3, #272	; 0x110
 800928a:	2200      	movs	r2, #0
 800928c:	2101      	movs	r1, #1
 800928e:	f7f8 ff7d 	bl	800218c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800929c:	2200      	movs	r2, #0
 800929e:	2182      	movs	r1, #130	; 0x82
 80092a0:	f7f8 ff74 	bl	800218c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	2000226c 	.word	0x2000226c
 80092b4:	40005c00 	.word	0x40005c00

080092b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7f7 fd26 	bl	8000d20 <HAL_PCD_Start>
 80092d4:	4603      	mov	r3, r0
 80092d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
 80092da:	4618      	mov	r0, r3
 80092dc:	f000 f94e 	bl	800957c <USBD_Get_USB_Status>
 80092e0:	4603      	mov	r3, r0
 80092e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b084      	sub	sp, #16
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	4608      	mov	r0, r1
 80092f8:	4611      	mov	r1, r2
 80092fa:	461a      	mov	r2, r3
 80092fc:	4603      	mov	r3, r0
 80092fe:	70fb      	strb	r3, [r7, #3]
 8009300:	460b      	mov	r3, r1
 8009302:	70bb      	strb	r3, [r7, #2]
 8009304:	4613      	mov	r3, r2
 8009306:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009316:	78bb      	ldrb	r3, [r7, #2]
 8009318:	883a      	ldrh	r2, [r7, #0]
 800931a:	78f9      	ldrb	r1, [r7, #3]
 800931c:	f7f7 fea0 	bl	8001060 <HAL_PCD_EP_Open>
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	4618      	mov	r0, r3
 8009328:	f000 f928 	bl	800957c <USBD_Get_USB_Status>
 800932c:	4603      	mov	r3, r0
 800932e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009330:	7bbb      	ldrb	r3, [r7, #14]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	460b      	mov	r3, r1
 8009344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	4611      	mov	r1, r2
 8009358:	4618      	mov	r0, r3
 800935a:	f7f7 fee7 	bl	800112c <HAL_PCD_EP_Close>
 800935e:	4603      	mov	r3, r0
 8009360:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009362:	7bfb      	ldrb	r3, [r7, #15]
 8009364:	4618      	mov	r0, r3
 8009366:	f000 f909 	bl	800957c <USBD_Get_USB_Status>
 800936a:	4603      	mov	r3, r0
 800936c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800936e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009392:	78fa      	ldrb	r2, [r7, #3]
 8009394:	4611      	mov	r1, r2
 8009396:	4618      	mov	r0, r3
 8009398:	f7f7 ffa7 	bl	80012ea <HAL_PCD_EP_SetStall>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f8ea 	bl	800957c <USBD_Get_USB_Status>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	460b      	mov	r3, r1
 80093c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093d0:	78fa      	ldrb	r2, [r7, #3]
 80093d2:	4611      	mov	r1, r2
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7f7 ffe8 	bl	80013aa <HAL_PCD_EP_ClrStall>
 80093da:	4603      	mov	r3, r0
 80093dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093de:	7bfb      	ldrb	r3, [r7, #15]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 f8cb 	bl	800957c <USBD_Get_USB_Status>
 80093e6:	4603      	mov	r3, r0
 80093e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009406:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800940c:	2b00      	cmp	r3, #0
 800940e:	da0c      	bge.n	800942a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009416:	68f9      	ldr	r1, [r7, #12]
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	00db      	lsls	r3, r3, #3
 8009422:	440b      	add	r3, r1
 8009424:	3302      	adds	r3, #2
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	e00b      	b.n	8009442 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800942a:	78fb      	ldrb	r3, [r7, #3]
 800942c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009430:	68f9      	ldr	r1, [r7, #12]
 8009432:	4613      	mov	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	00db      	lsls	r3, r3, #3
 800943a:	440b      	add	r3, r1
 800943c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009440:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	bc80      	pop	{r7}
 800944a:	4770      	bx	lr

0800944c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	460b      	mov	r3, r1
 8009456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009466:	78fa      	ldrb	r2, [r7, #3]
 8009468:	4611      	mov	r1, r2
 800946a:	4618      	mov	r0, r3
 800946c:	f7f7 fdd3 	bl	8001016 <HAL_PCD_SetAddress>
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009474:	7bfb      	ldrb	r3, [r7, #15]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 f880 	bl	800957c <USBD_Get_USB_Status>
 800947c:	4603      	mov	r3, r0
 800947e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009480:	7bbb      	ldrb	r3, [r7, #14]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b086      	sub	sp, #24
 800948e:	af00      	add	r7, sp, #0
 8009490:	60f8      	str	r0, [r7, #12]
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	461a      	mov	r2, r3
 8009496:	460b      	mov	r3, r1
 8009498:	72fb      	strb	r3, [r7, #11]
 800949a:	4613      	mov	r3, r2
 800949c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094ac:	893b      	ldrh	r3, [r7, #8]
 80094ae:	7af9      	ldrb	r1, [r7, #11]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	f7f7 fed7 	bl	8001264 <HAL_PCD_EP_Transmit>
 80094b6:	4603      	mov	r3, r0
 80094b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 f85d 	bl	800957c <USBD_Get_USB_Status>
 80094c2:	4603      	mov	r3, r0
 80094c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3718      	adds	r7, #24
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	607a      	str	r2, [r7, #4]
 80094da:	461a      	mov	r2, r3
 80094dc:	460b      	mov	r3, r1
 80094de:	72fb      	strb	r3, [r7, #11]
 80094e0:	4613      	mov	r3, r2
 80094e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094f2:	893b      	ldrh	r3, [r7, #8]
 80094f4:	7af9      	ldrb	r1, [r7, #11]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	f7f7 fe60 	bl	80011bc <HAL_PCD_EP_Receive>
 80094fc:	4603      	mov	r3, r0
 80094fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009500:	7dfb      	ldrb	r3, [r7, #23]
 8009502:	4618      	mov	r0, r3
 8009504:	f000 f83a 	bl	800957c <USBD_Get_USB_Status>
 8009508:	4603      	mov	r3, r0
 800950a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800950c:	7dbb      	ldrb	r3, [r7, #22]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	460b      	mov	r3, r1
 8009520:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009528:	78fa      	ldrb	r2, [r7, #3]
 800952a:	4611      	mov	r1, r2
 800952c:	4618      	mov	r0, r3
 800952e:	f7f7 fe82 	bl	8001236 <HAL_PCD_EP_GetRxCount>
 8009532:	4603      	mov	r3, r0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009544:	4b02      	ldr	r3, [pc, #8]	; (8009550 <USBD_static_malloc+0x14>)
}
 8009546:	4618      	mov	r0, r3
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	bc80      	pop	{r7}
 800954e:	4770      	bx	lr
 8009550:	20001aa8 	.word	0x20001aa8

08009554 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]

}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	bc80      	pop	{r7}
 8009564:	4770      	bx	lr

08009566 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009566:	b480      	push	{r7}
 8009568:	b083      	sub	sp, #12
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	460b      	mov	r3, r1
 8009570:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009572:	bf00      	nop
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	bc80      	pop	{r7}
 800957a:	4770      	bx	lr

0800957c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	4603      	mov	r3, r0
 8009584:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800958a:	79fb      	ldrb	r3, [r7, #7]
 800958c:	2b03      	cmp	r3, #3
 800958e:	d817      	bhi.n	80095c0 <USBD_Get_USB_Status+0x44>
 8009590:	a201      	add	r2, pc, #4	; (adr r2, 8009598 <USBD_Get_USB_Status+0x1c>)
 8009592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009596:	bf00      	nop
 8009598:	080095a9 	.word	0x080095a9
 800959c:	080095af 	.word	0x080095af
 80095a0:	080095b5 	.word	0x080095b5
 80095a4:	080095bb 	.word	0x080095bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73fb      	strb	r3, [r7, #15]
    break;
 80095ac:	e00b      	b.n	80095c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095ae:	2302      	movs	r3, #2
 80095b0:	73fb      	strb	r3, [r7, #15]
    break;
 80095b2:	e008      	b.n	80095c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095b4:	2301      	movs	r3, #1
 80095b6:	73fb      	strb	r3, [r7, #15]
    break;
 80095b8:	e005      	b.n	80095c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095ba:	2302      	movs	r3, #2
 80095bc:	73fb      	strb	r3, [r7, #15]
    break;
 80095be:	e002      	b.n	80095c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80095c0:	2302      	movs	r3, #2
 80095c2:	73fb      	strb	r3, [r7, #15]
    break;
 80095c4:	bf00      	nop
  }
  return usb_status;
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bc80      	pop	{r7}
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop

080095d4 <__libc_init_array>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	2500      	movs	r5, #0
 80095d8:	4e0c      	ldr	r6, [pc, #48]	; (800960c <__libc_init_array+0x38>)
 80095da:	4c0d      	ldr	r4, [pc, #52]	; (8009610 <__libc_init_array+0x3c>)
 80095dc:	1ba4      	subs	r4, r4, r6
 80095de:	10a4      	asrs	r4, r4, #2
 80095e0:	42a5      	cmp	r5, r4
 80095e2:	d109      	bne.n	80095f8 <__libc_init_array+0x24>
 80095e4:	f000 f82e 	bl	8009644 <_init>
 80095e8:	2500      	movs	r5, #0
 80095ea:	4e0a      	ldr	r6, [pc, #40]	; (8009614 <__libc_init_array+0x40>)
 80095ec:	4c0a      	ldr	r4, [pc, #40]	; (8009618 <__libc_init_array+0x44>)
 80095ee:	1ba4      	subs	r4, r4, r6
 80095f0:	10a4      	asrs	r4, r4, #2
 80095f2:	42a5      	cmp	r5, r4
 80095f4:	d105      	bne.n	8009602 <__libc_init_array+0x2e>
 80095f6:	bd70      	pop	{r4, r5, r6, pc}
 80095f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095fc:	4798      	blx	r3
 80095fe:	3501      	adds	r5, #1
 8009600:	e7ee      	b.n	80095e0 <__libc_init_array+0xc>
 8009602:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009606:	4798      	blx	r3
 8009608:	3501      	adds	r5, #1
 800960a:	e7f2      	b.n	80095f2 <__libc_init_array+0x1e>
 800960c:	08009734 	.word	0x08009734
 8009610:	08009734 	.word	0x08009734
 8009614:	08009734 	.word	0x08009734
 8009618:	08009738 	.word	0x08009738

0800961c <memcpy>:
 800961c:	b510      	push	{r4, lr}
 800961e:	1e43      	subs	r3, r0, #1
 8009620:	440a      	add	r2, r1
 8009622:	4291      	cmp	r1, r2
 8009624:	d100      	bne.n	8009628 <memcpy+0xc>
 8009626:	bd10      	pop	{r4, pc}
 8009628:	f811 4b01 	ldrb.w	r4, [r1], #1
 800962c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009630:	e7f7      	b.n	8009622 <memcpy+0x6>

08009632 <memset>:
 8009632:	4603      	mov	r3, r0
 8009634:	4402      	add	r2, r0
 8009636:	4293      	cmp	r3, r2
 8009638:	d100      	bne.n	800963c <memset+0xa>
 800963a:	4770      	bx	lr
 800963c:	f803 1b01 	strb.w	r1, [r3], #1
 8009640:	e7f9      	b.n	8009636 <memset+0x4>
	...

08009644 <_init>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	bf00      	nop
 8009648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964a:	bc08      	pop	{r3}
 800964c:	469e      	mov	lr, r3
 800964e:	4770      	bx	lr

08009650 <_fini>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	bf00      	nop
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr
