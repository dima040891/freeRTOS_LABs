
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000971c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800994c  0800994c  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800994c  0800994c  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800994c  0800994c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009950  08009950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023e0  20000184  08009ad8  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002564  08009ad8  00022564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e071  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fbd  00000000  00000000  0003e21e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001220  00000000  00000000  000421e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001048  00000000  00000000  00043400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b716  00000000  00000000  00044448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134f6  00000000  00000000  0005fb5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e4ba  00000000  00000000  00073054  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010150e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e0  00000000  00000000  0010158c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000184 	.word	0x20000184
 800012c:	00000000 	.word	0x00000000
 8000130:	08009814 	.word	0x08009814

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000188 	.word	0x20000188
 800014c:	08009814 	.word	0x08009814

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <PCB_Init>:

#include "PCB_BluePill.h"
#include "main.h"

void PCB_Init()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016a:	4802      	ldr	r0, [pc, #8]	; (8000174 <PCB_Init+0x14>)
 800016c:	f000 fd0e 	bl	8000b8c <HAL_GPIO_WritePin>
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}
 8000174:	40011000 	.word	0x40011000

08000178 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800017c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000180:	4802      	ldr	r0, [pc, #8]	; (800018c <PCB_LED_Toggle+0x14>)
 8000182:	f000 fd1b 	bl	8000bbc <HAL_GPIO_TogglePin>
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40011000 	.word	0x40011000

08000190 <freeRTOS_Tasks_Ini>:

char USB_Tx_Buf_Task1[24]; // Буфер для передачи в ПК.
const char *USB_Tx_Buf_Task2 = "Task2 send\r\n";

void freeRTOS_Tasks_Ini (void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af02      	add	r7, sp, #8
	xTaskCreate(vTask_USB_Init, "Task_USB_Init", 100, NULL, 2, NULL); // З-а сброса лнии D+ после каждого запуска МК. Необхадимо для определения устройсва на шине USB.
 8000196:	2300      	movs	r3, #0
 8000198:	9301      	str	r3, [sp, #4]
 800019a:	2302      	movs	r3, #2
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2300      	movs	r3, #0
 80001a0:	2264      	movs	r2, #100	; 0x64
 80001a2:	4918      	ldr	r1, [pc, #96]	; (8000204 <freeRTOS_Tasks_Ini+0x74>)
 80001a4:	4818      	ldr	r0, [pc, #96]	; (8000208 <freeRTOS_Tasks_Ini+0x78>)
 80001a6:	f007 f8a4 	bl	80072f2 <xTaskCreate>
	xTaskCreate(vTask_Transmit_VCP, "Task_Transmit_VCP", 120, NULL, 1, NULL); // З-а переиодческой отправки сообщения в VCP. Задача должна быть запущена после удаления vTask_USB_Init.
 80001aa:	2300      	movs	r3, #0
 80001ac:	9301      	str	r3, [sp, #4]
 80001ae:	2301      	movs	r3, #1
 80001b0:	9300      	str	r3, [sp, #0]
 80001b2:	2300      	movs	r3, #0
 80001b4:	2278      	movs	r2, #120	; 0x78
 80001b6:	4915      	ldr	r1, [pc, #84]	; (800020c <freeRTOS_Tasks_Ini+0x7c>)
 80001b8:	4815      	ldr	r0, [pc, #84]	; (8000210 <freeRTOS_Tasks_Ini+0x80>)
 80001ba:	f007 f89a 	bl	80072f2 <xTaskCreate>
	xTaskCreate(vTask_Transmit_VCP_2, "Task_Transmit_VCP_2", 120, (void*) USB_Tx_Buf_Task2, 1, NULL); // Вывод второго тестового сообщения
 80001be:	4b15      	ldr	r3, [pc, #84]	; (8000214 <freeRTOS_Tasks_Ini+0x84>)
 80001c0:	681a      	ldr	r2, [r3, #0]
 80001c2:	2300      	movs	r3, #0
 80001c4:	9301      	str	r3, [sp, #4]
 80001c6:	2301      	movs	r3, #1
 80001c8:	9300      	str	r3, [sp, #0]
 80001ca:	4613      	mov	r3, r2
 80001cc:	2278      	movs	r2, #120	; 0x78
 80001ce:	4912      	ldr	r1, [pc, #72]	; (8000218 <freeRTOS_Tasks_Ini+0x88>)
 80001d0:	4812      	ldr	r0, [pc, #72]	; (800021c <freeRTOS_Tasks_Ini+0x8c>)
 80001d2:	f007 f88e 	bl	80072f2 <xTaskCreate>

	Delay_LED = 500;
 80001d6:	4b12      	ldr	r3, [pc, #72]	; (8000220 <freeRTOS_Tasks_Ini+0x90>)
 80001d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001dc:	801a      	strh	r2, [r3, #0]
	pDelay_LED = &Delay_LED;
 80001de:	4b11      	ldr	r3, [pc, #68]	; (8000224 <freeRTOS_Tasks_Ini+0x94>)
 80001e0:	4a0f      	ldr	r2, [pc, #60]	; (8000220 <freeRTOS_Tasks_Ini+0x90>)
 80001e2:	601a      	str	r2, [r3, #0]
	xTaskCreate(vTask_PCB_LED_Toggle, "Task_PCB_LED_Toggle", 40, (void*) pDelay_LED, 1, NULL); // З-а мигания LED
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <freeRTOS_Tasks_Ini+0x94>)
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	2300      	movs	r3, #0
 80001ea:	9301      	str	r3, [sp, #4]
 80001ec:	2301      	movs	r3, #1
 80001ee:	9300      	str	r3, [sp, #0]
 80001f0:	4613      	mov	r3, r2
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	490c      	ldr	r1, [pc, #48]	; (8000228 <freeRTOS_Tasks_Ini+0x98>)
 80001f6:	480d      	ldr	r0, [pc, #52]	; (800022c <freeRTOS_Tasks_Ini+0x9c>)
 80001f8:	f007 f87b 	bl	80072f2 <xTaskCreate>


}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	0800983c 	.word	0x0800983c
 8000208:	080002a9 	.word	0x080002a9
 800020c:	0800984c 	.word	0x0800984c
 8000210:	08000261 	.word	0x08000261
 8000214:	20000000 	.word	0x20000000
 8000218:	08009860 	.word	0x08009860
 800021c:	08000231 	.word	0x08000231
 8000220:	20001ce8 	.word	0x20001ce8
 8000224:	20001ce4 	.word	0x20001ce4
 8000228:	08009874 	.word	0x08009874
 800022c:	08000309 	.word	0x08000309

08000230 <vTask_Transmit_VCP_2>:

void vTask_Transmit_VCP_2(void *pvParameters)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	char *vTask2_Name;

	vTask2_Name = (char*) pvParameters;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		while (CDC_Transmit_FS((unsigned char*)vTask2_Name, strlen(vTask2_Name))); // Пытаться послать данные до тех пор USB не будет готов к передаче очерендной посылки.
 800023c:	bf00      	nop
 800023e:	68f8      	ldr	r0, [r7, #12]
 8000240:	f7ff ff86 	bl	8000150 <strlen>
 8000244:	4603      	mov	r3, r0
 8000246:	b29b      	uxth	r3, r3
 8000248:	4619      	mov	r1, r3
 800024a:	68f8      	ldr	r0, [r7, #12]
 800024c:	f008 fecc 	bl	8008fe8 <CDC_Transmit_FS>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d1f3      	bne.n	800023e <vTask_Transmit_VCP_2+0xe>
			//скорее всего ф-я CDC_Transmit_FS() проверяет свобдны ли аппаратные ресурсы МК к передаче по USB. Если нет, то сразу выходит из функции с ошибкой.
		vTaskDelay(500 / portTICK_RATE_MS );
 8000256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800025a:	f007 f9f7 	bl	800764c <vTaskDelay>
		while (CDC_Transmit_FS((unsigned char*)vTask2_Name, strlen(vTask2_Name))); // Пытаться послать данные до тех пор USB не будет готов к передаче очерендной посылки.
 800025e:	e7ed      	b.n	800023c <vTask_Transmit_VCP_2+0xc>

08000260 <vTask_Transmit_VCP>:
	}
	vTaskDelete(NULL);
}

void vTask_Transmit_VCP(void *pvParameters)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	sprintf(USB_Tx_Buf_Task1, "Task1 send\r\n");
 8000268:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <vTask_Transmit_VCP+0x40>)
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <vTask_Transmit_VCP+0x44>)
 800026c:	4614      	mov	r4, r2
 800026e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000270:	6020      	str	r0, [r4, #0]
 8000272:	6061      	str	r1, [r4, #4]
 8000274:	60a2      	str	r2, [r4, #8]
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	7323      	strb	r3, [r4, #12]

	for(;;)
	{
		while(CDC_Transmit_FS((unsigned char*)USB_Tx_Buf_Task1, strlen(USB_Tx_Buf_Task1))); // // Пытаться послать данные до тех пор USB не будет готов к передаче очерендной посылки.
 800027a:	bf00      	nop
 800027c:	4808      	ldr	r0, [pc, #32]	; (80002a0 <vTask_Transmit_VCP+0x40>)
 800027e:	f7ff ff67 	bl	8000150 <strlen>
 8000282:	4603      	mov	r3, r0
 8000284:	b29b      	uxth	r3, r3
 8000286:	4619      	mov	r1, r3
 8000288:	4805      	ldr	r0, [pc, #20]	; (80002a0 <vTask_Transmit_VCP+0x40>)
 800028a:	f008 fead 	bl	8008fe8 <CDC_Transmit_FS>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1f3      	bne.n	800027c <vTask_Transmit_VCP+0x1c>
		vTaskDelay(500 / portTICK_RATE_MS );
 8000294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000298:	f007 f9d8 	bl	800764c <vTaskDelay>
		while(CDC_Transmit_FS((unsigned char*)USB_Tx_Buf_Task1, strlen(USB_Tx_Buf_Task1))); // // Пытаться послать данные до тех пор USB не будет готов к передаче очерендной посылки.
 800029c:	e7ed      	b.n	800027a <vTask_Transmit_VCP+0x1a>
 800029e:	bf00      	nop
 80002a0:	20001ccc 	.word	0x20001ccc
 80002a4:	08009888 	.word	0x08009888

080002a8 <vTask_USB_Init>:
	}

}

void vTask_USB_Init(void *pvParameters)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	// НЕ ЗАБЫТЬ ЗАКОММЕНТИТЬ ВЫЗОВ MX_USB_DEVICE_Init(); ИЗ ЗАДАЧИ StartDefaultTask (main.c) ПОСЛЕ КАЖДОЙ ГЕНЕРАЦИИ ПРОЕКТА!!!

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b0:	f107 0308 	add.w	r3, r7, #8
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002c2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c4:	2301      	movs	r3, #1
 80002c6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002cc:	2302      	movs	r3, #2
 80002ce:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d0:	f107 0308 	add.w	r3, r7, #8
 80002d4:	4619      	mov	r1, r3
 80002d6:	480b      	ldr	r0, [pc, #44]	; (8000304 <vTask_USB_Init+0x5c>)
 80002d8:	f000 fafe 	bl	80008d8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e2:	4808      	ldr	r0, [pc, #32]	; (8000304 <vTask_USB_Init+0x5c>)
 80002e4:	f000 fc52 	bl	8000b8c <HAL_GPIO_WritePin>

	  vTaskDelay(2000 / portTICK_RATE_MS );
 80002e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ec:	f007 f9ae 	bl	800764c <vTaskDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 80002f0:	f008 fdbc 	bl	8008e6c <MX_USB_DEVICE_Init>

	  vTaskDelete(NULL); // Удаленеи задачи самой себя
 80002f4:	2000      	movs	r0, #0
 80002f6:	f007 f937 	bl	8007568 <vTaskDelete>

	for(;;)
	{
		vTaskDelay(1000 / portTICK_RATE_MS );
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f007 f9a5 	bl	800764c <vTaskDelay>
 8000302:	e7fa      	b.n	80002fa <vTask_USB_Init+0x52>
 8000304:	40010800 	.word	0x40010800

08000308 <vTask_PCB_LED_Toggle>:


}

void vTask_PCB_LED_Toggle(void *pvParameters)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]

	uint16_t *pDelay_LED = (uint16_t*) pvParameters; // Получение параметра с привденем к иходному типу данных - uint16_t
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
	PCB_LED_Toggle();
 8000314:	f7ff ff30 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(*pDelay_LED / portTICK_RATE_MS ); // Разыменование т.е. передача значения задержки
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	4618      	mov	r0, r3
 800031e:	f007 f995 	bl	800764c <vTaskDelay>
	PCB_LED_Toggle();
 8000322:	f7ff ff29 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(*(uint16_t*)pvParameters / portTICK_RATE_MS ); // Можно и без промежуточных переменных, привести pvParameters к указателю uint16_t "(uint16_t*)pvParameters", а затем разименовать
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	4618      	mov	r0, r3
 800032c:	f007 f98e 	bl	800764c <vTaskDelay>
	PCB_LED_Toggle();
 8000330:	e7f0      	b.n	8000314 <vTask_PCB_LED_Toggle+0xc>
	...

08000334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000338:	f000 f95e 	bl	80005f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033c:	f000 f816 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000340:	f000 f86e 	bl	8000420 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000344:	f006 f888 	bl	8006458 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000348:	4a05      	ldr	r2, [pc, #20]	; (8000360 <main+0x2c>)
 800034a:	2100      	movs	r1, #0
 800034c:	4805      	ldr	r0, [pc, #20]	; (8000364 <main+0x30>)
 800034e:	f006 f8e9 	bl	8006524 <osThreadNew>
 8000352:	4602      	mov	r2, r0
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <main+0x34>)
 8000356:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000358:	f006 f8b0 	bl	80064bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800035c:	e7fe      	b.n	800035c <main+0x28>
 800035e:	bf00      	nop
 8000360:	08009918 	.word	0x08009918
 8000364:	080004b9 	.word	0x080004b9
 8000368:	20001cec 	.word	0x20001cec

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b094      	sub	sp, #80	; 0x50
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000376:	2228      	movs	r2, #40	; 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f009 fa41 	bl	8009802 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800039c:	2301      	movs	r3, #1
 800039e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003aa:	2301      	movs	r3, #1
 80003ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ae:	2302      	movs	r3, #2
 80003b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 ff96 	bl	80022f4 <HAL_RCC_OscConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003ce:	f000 f87f 	bl	80004d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d2:	230f      	movs	r3, #15
 80003d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d6:	2302      	movs	r3, #2
 80003d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	2102      	movs	r1, #2
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 fa00 	bl	80027f4 <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003fa:	f000 f869 	bl	80004d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003fe:	2310      	movs	r3, #16
 8000400:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4618      	mov	r0, r3
 800040a:	f002 fb5d 	bl	8002ac8 <HAL_RCCEx_PeriphCLKConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000414:	f000 f85c 	bl	80004d0 <Error_Handler>
  }
}
 8000418:	bf00      	nop
 800041a:	3750      	adds	r7, #80	; 0x50
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000434:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <MX_GPIO_Init+0x90>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a1d      	ldr	r2, [pc, #116]	; (80004b0 <MX_GPIO_Init+0x90>)
 800043a:	f043 0310 	orr.w	r3, r3, #16
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_GPIO_Init+0x90>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0310 	and.w	r3, r3, #16
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <MX_GPIO_Init+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a17      	ldr	r2, [pc, #92]	; (80004b0 <MX_GPIO_Init+0x90>)
 8000452:	f043 0320 	orr.w	r3, r3, #32
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_GPIO_Init+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0320 	and.w	r3, r3, #32
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <MX_GPIO_Init+0x90>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <MX_GPIO_Init+0x90>)
 800046a:	f043 0304 	orr.w	r3, r3, #4
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_GPIO_Init+0x90>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0304 	and.w	r3, r3, #4
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000482:	480c      	ldr	r0, [pc, #48]	; (80004b4 <MX_GPIO_Init+0x94>)
 8000484:	f000 fb82 	bl	8000b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048e:	2301      	movs	r3, #1
 8000490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	2302      	movs	r3, #2
 8000498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	4804      	ldr	r0, [pc, #16]	; (80004b4 <MX_GPIO_Init+0x94>)
 80004a2:	f000 fa19 	bl	80008d8 <HAL_GPIO_Init>

}
 80004a6:	bf00      	nop
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40011000 	.word	0x40011000

080004b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */

  PCB_Init();
 80004c0:	f7ff fe4e 	bl	8000160 <PCB_Init>
  freeRTOS_Tasks_Ini();
 80004c4:	f7ff fe64 	bl	8000190 <freeRTOS_Tasks_Ini>

  /* Infinite loop */
  for(;;)
  {
osDelay(1);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f006 f8d5 	bl	8006678 <osDelay>
 80004ce:	e7fb      	b.n	80004c8 <StartDefaultTask+0x10>

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <Error_Handler+0x6>

080004d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <HAL_MspInit+0x68>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	4a17      	ldr	r2, [pc, #92]	; (8000540 <HAL_MspInit+0x68>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6193      	str	r3, [r2, #24]
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <HAL_MspInit+0x68>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_MspInit+0x68>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	4a11      	ldr	r2, [pc, #68]	; (8000540 <HAL_MspInit+0x68>)
 80004fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000500:	61d3      	str	r3, [r2, #28]
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <HAL_MspInit+0x68>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	210f      	movs	r1, #15
 8000512:	f06f 0001 	mvn.w	r0, #1
 8000516:	f000 f9a8 	bl	800086a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <HAL_MspInit+0x6c>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <HAL_MspInit+0x6c>)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000
 8000544:	40010000 	.word	0x40010000

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800054c:	e7fe      	b.n	800054c <NMI_Handler+0x4>

0800054e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <HardFault_Handler+0x4>

08000554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <MemManage_Handler+0x4>

0800055a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <UsageFault_Handler+0x4>

08000566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000576:	f000 f885 	bl	8000684 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800057a:	f007 fcd9 	bl	8007f30 <xTaskGetSchedulerState>
 800057e:	4603      	mov	r3, r0
 8000580:	2b01      	cmp	r3, #1
 8000582:	d001      	beq.n	8000588 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000584:	f008 fa20 	bl	80089c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000592:	f000 fc5d 	bl	8000e50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20002278 	.word	0x20002278

080005a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ae:	e003      	b.n	80005b8 <LoopCopyDataInit>

080005b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005b6:	3104      	adds	r1, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005b8:	480a      	ldr	r0, [pc, #40]	; (80005e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005c0:	d3f6      	bcc.n	80005b0 <CopyDataInit>
  ldr r2, =_sbss
 80005c2:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005c4:	e002      	b.n	80005cc <LoopFillZerobss>

080005c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005c8:	f842 3b04 	str.w	r3, [r2], #4

080005cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005d0:	d3f9      	bcc.n	80005c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005d2:	f7ff ffe5 	bl	80005a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005d6:	f009 f8e5 	bl	80097a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005da:	f7ff feab 	bl	8000334 <main>
  bx lr
 80005de:	4770      	bx	lr
  ldr r3, =_sidata
 80005e0:	08009954 	.word	0x08009954
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005e8:	20000184 	.word	0x20000184
  ldr r2, =_sbss
 80005ec:	20000184 	.word	0x20000184
  ldr r3, = _ebss
 80005f0:	20002564 	.word	0x20002564

080005f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC1_2_IRQHandler>
	...

080005f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_Init+0x28>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_Init+0x28>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000608:	2003      	movs	r0, #3
 800060a:	f000 f923 	bl	8000854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060e:	200f      	movs	r0, #15
 8000610:	f000 f808 	bl	8000624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000614:	f7ff ff60 	bl	80004d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40022000 	.word	0x40022000

08000624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_InitTick+0x54>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_InitTick+0x58>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063a:	fbb3 f3f1 	udiv	r3, r3, r1
 800063e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f93b 	bl	80008be <HAL_SYSTICK_Config>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	e00e      	b.n	8000670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d80a      	bhi.n	800066e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000658:	2200      	movs	r2, #0
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	f04f 30ff 	mov.w	r0, #4294967295
 8000660:	f000 f903 	bl	800086a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <HAL_InitTick+0x5c>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	e000      	b.n	8000670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000004 	.word	0x20000004
 800067c:	2000000c 	.word	0x2000000c
 8000680:	20000008 	.word	0x20000008

08000684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_IncTick+0x1c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_IncTick+0x20>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a03      	ldr	r2, [pc, #12]	; (80006a4 <HAL_IncTick+0x20>)
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	2000000c 	.word	0x2000000c
 80006a4:	20001cf0 	.word	0x20001cf0

080006a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return uwTick;
 80006ac:	4b02      	ldr	r3, [pc, #8]	; (80006b8 <HAL_GetTick+0x10>)
 80006ae:	681b      	ldr	r3, [r3, #0]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	20001cf0 	.word	0x20001cf0

080006bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	60d3      	str	r3, [r2, #12]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <__NVIC_GetPriorityGrouping+0x18>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	f003 0307 	and.w	r3, r3, #7
}
 8000712:	4618      	mov	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	db0b      	blt.n	800074a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	f003 021f 	and.w	r2, r3, #31
 8000738:	4906      	ldr	r1, [pc, #24]	; (8000754 <__NVIC_EnableIRQ+0x34>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	2001      	movs	r0, #1
 8000742:	fa00 f202 	lsl.w	r2, r0, r2
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	; (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	; 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000820:	d301      	bcc.n	8000826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000822:	2301      	movs	r3, #1
 8000824:	e00f      	b.n	8000846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <SysTick_Config+0x40>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082e:	210f      	movs	r1, #15
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f7ff ff90 	bl	8000758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <SysTick_Config+0x40>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <SysTick_Config+0x40>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	e000e010 	.word	0xe000e010

08000854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff2d 	bl	80006bc <__NVIC_SetPriorityGrouping>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800087c:	f7ff ff42 	bl	8000704 <__NVIC_GetPriorityGrouping>
 8000880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	6978      	ldr	r0, [r7, #20]
 8000888:	f7ff ff90 	bl	80007ac <NVIC_EncodePriority>
 800088c:	4602      	mov	r2, r0
 800088e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff5f 	bl	8000758 <__NVIC_SetPriority>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff35 	bl	8000720 <__NVIC_EnableIRQ>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ffa2 	bl	8000810 <SysTick_Config>
 80008cc:	4603      	mov	r3, r0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d8:	b480      	push	{r7}
 80008da:	b08b      	sub	sp, #44	; 0x2c
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ea:	e127      	b.n	8000b3c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008ec:	2201      	movs	r2, #1
 80008ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	69fa      	ldr	r2, [r7, #28]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	429a      	cmp	r2, r3
 8000906:	f040 8116 	bne.w	8000b36 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2b12      	cmp	r3, #18
 8000910:	d034      	beq.n	800097c <HAL_GPIO_Init+0xa4>
 8000912:	2b12      	cmp	r3, #18
 8000914:	d80d      	bhi.n	8000932 <HAL_GPIO_Init+0x5a>
 8000916:	2b02      	cmp	r3, #2
 8000918:	d02b      	beq.n	8000972 <HAL_GPIO_Init+0x9a>
 800091a:	2b02      	cmp	r3, #2
 800091c:	d804      	bhi.n	8000928 <HAL_GPIO_Init+0x50>
 800091e:	2b00      	cmp	r3, #0
 8000920:	d031      	beq.n	8000986 <HAL_GPIO_Init+0xae>
 8000922:	2b01      	cmp	r3, #1
 8000924:	d01c      	beq.n	8000960 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000926:	e048      	b.n	80009ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000928:	2b03      	cmp	r3, #3
 800092a:	d043      	beq.n	80009b4 <HAL_GPIO_Init+0xdc>
 800092c:	2b11      	cmp	r3, #17
 800092e:	d01b      	beq.n	8000968 <HAL_GPIO_Init+0x90>
          break;
 8000930:	e043      	b.n	80009ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000932:	4a89      	ldr	r2, [pc, #548]	; (8000b58 <HAL_GPIO_Init+0x280>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d026      	beq.n	8000986 <HAL_GPIO_Init+0xae>
 8000938:	4a87      	ldr	r2, [pc, #540]	; (8000b58 <HAL_GPIO_Init+0x280>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d806      	bhi.n	800094c <HAL_GPIO_Init+0x74>
 800093e:	4a87      	ldr	r2, [pc, #540]	; (8000b5c <HAL_GPIO_Init+0x284>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d020      	beq.n	8000986 <HAL_GPIO_Init+0xae>
 8000944:	4a86      	ldr	r2, [pc, #536]	; (8000b60 <HAL_GPIO_Init+0x288>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d01d      	beq.n	8000986 <HAL_GPIO_Init+0xae>
          break;
 800094a:	e036      	b.n	80009ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800094c:	4a85      	ldr	r2, [pc, #532]	; (8000b64 <HAL_GPIO_Init+0x28c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d019      	beq.n	8000986 <HAL_GPIO_Init+0xae>
 8000952:	4a85      	ldr	r2, [pc, #532]	; (8000b68 <HAL_GPIO_Init+0x290>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d016      	beq.n	8000986 <HAL_GPIO_Init+0xae>
 8000958:	4a84      	ldr	r2, [pc, #528]	; (8000b6c <HAL_GPIO_Init+0x294>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d013      	beq.n	8000986 <HAL_GPIO_Init+0xae>
          break;
 800095e:	e02c      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	623b      	str	r3, [r7, #32]
          break;
 8000966:	e028      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	3304      	adds	r3, #4
 800096e:	623b      	str	r3, [r7, #32]
          break;
 8000970:	e023      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	3308      	adds	r3, #8
 8000978:	623b      	str	r3, [r7, #32]
          break;
 800097a:	e01e      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	330c      	adds	r3, #12
 8000982:	623b      	str	r3, [r7, #32]
          break;
 8000984:	e019      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d102      	bne.n	8000994 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800098e:	2304      	movs	r3, #4
 8000990:	623b      	str	r3, [r7, #32]
          break;
 8000992:	e012      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d105      	bne.n	80009a8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800099c:	2308      	movs	r3, #8
 800099e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	611a      	str	r2, [r3, #16]
          break;
 80009a6:	e008      	b.n	80009ba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a8:	2308      	movs	r3, #8
 80009aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	69fa      	ldr	r2, [r7, #28]
 80009b0:	615a      	str	r2, [r3, #20]
          break;
 80009b2:	e002      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
          break;
 80009b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	2bff      	cmp	r3, #255	; 0xff
 80009be:	d801      	bhi.n	80009c4 <HAL_GPIO_Init+0xec>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	e001      	b.n	80009c8 <HAL_GPIO_Init+0xf0>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3304      	adds	r3, #4
 80009c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	2bff      	cmp	r3, #255	; 0xff
 80009ce:	d802      	bhi.n	80009d6 <HAL_GPIO_Init+0xfe>
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	e002      	b.n	80009dc <HAL_GPIO_Init+0x104>
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	3b08      	subs	r3, #8
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	210f      	movs	r1, #15
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	401a      	ands	r2, r3
 80009ee:	6a39      	ldr	r1, [r7, #32]
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	431a      	orrs	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f000 8096 	beq.w	8000b36 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a0a:	4b59      	ldr	r3, [pc, #356]	; (8000b70 <HAL_GPIO_Init+0x298>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a58      	ldr	r2, [pc, #352]	; (8000b70 <HAL_GPIO_Init+0x298>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b56      	ldr	r3, [pc, #344]	; (8000b70 <HAL_GPIO_Init+0x298>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a22:	4a54      	ldr	r2, [pc, #336]	; (8000b74 <HAL_GPIO_Init+0x29c>)
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	3302      	adds	r3, #2
 8000a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	220f      	movs	r2, #15
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	4013      	ands	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a4b      	ldr	r2, [pc, #300]	; (8000b78 <HAL_GPIO_Init+0x2a0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d013      	beq.n	8000a76 <HAL_GPIO_Init+0x19e>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a4a      	ldr	r2, [pc, #296]	; (8000b7c <HAL_GPIO_Init+0x2a4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d00d      	beq.n	8000a72 <HAL_GPIO_Init+0x19a>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a49      	ldr	r2, [pc, #292]	; (8000b80 <HAL_GPIO_Init+0x2a8>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d007      	beq.n	8000a6e <HAL_GPIO_Init+0x196>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a48      	ldr	r2, [pc, #288]	; (8000b84 <HAL_GPIO_Init+0x2ac>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d101      	bne.n	8000a6a <HAL_GPIO_Init+0x192>
 8000a66:	2303      	movs	r3, #3
 8000a68:	e006      	b.n	8000a78 <HAL_GPIO_Init+0x1a0>
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	e004      	b.n	8000a78 <HAL_GPIO_Init+0x1a0>
 8000a6e:	2302      	movs	r3, #2
 8000a70:	e002      	b.n	8000a78 <HAL_GPIO_Init+0x1a0>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <HAL_GPIO_Init+0x1a0>
 8000a76:	2300      	movs	r3, #0
 8000a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a7a:	f002 0203 	and.w	r2, r2, #3
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	4093      	lsls	r3, r2
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a88:	493a      	ldr	r1, [pc, #232]	; (8000b74 <HAL_GPIO_Init+0x29c>)
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	3302      	adds	r3, #2
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d006      	beq.n	8000ab0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aa2:	4b39      	ldr	r3, [pc, #228]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	4938      	ldr	r1, [pc, #224]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	600b      	str	r3, [r1, #0]
 8000aae:	e006      	b.n	8000abe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ab0:	4b35      	ldr	r3, [pc, #212]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	4933      	ldr	r1, [pc, #204]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000aba:	4013      	ands	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d006      	beq.n	8000ad8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aca:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	492e      	ldr	r1, [pc, #184]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	604b      	str	r3, [r1, #4]
 8000ad6:	e006      	b.n	8000ae6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	4929      	ldr	r1, [pc, #164]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d006      	beq.n	8000b00 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	4924      	ldr	r1, [pc, #144]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	608b      	str	r3, [r1, #8]
 8000afe:	e006      	b.n	8000b0e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	491f      	ldr	r1, [pc, #124]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d006      	beq.n	8000b28 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000b1c:	68da      	ldr	r2, [r3, #12]
 8000b1e:	491a      	ldr	r1, [pc, #104]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	60cb      	str	r3, [r1, #12]
 8000b26:	e006      	b.n	8000b36 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	4915      	ldr	r1, [pc, #84]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	3301      	adds	r3, #1
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	fa22 f303 	lsr.w	r3, r2, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f47f aed0 	bne.w	80008ec <HAL_GPIO_Init+0x14>
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	372c      	adds	r7, #44	; 0x2c
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	10210000 	.word	0x10210000
 8000b5c:	10110000 	.word	0x10110000
 8000b60:	10120000 	.word	0x10120000
 8000b64:	10310000 	.word	0x10310000
 8000b68:	10320000 	.word	0x10320000
 8000b6c:	10220000 	.word	0x10220000
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010000 	.word	0x40010000
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	40010c00 	.word	0x40010c00
 8000b80:	40011000 	.word	0x40011000
 8000b84:	40011400 	.word	0x40011400
 8000b88:	40010400 	.word	0x40010400

08000b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b9c:	787b      	ldrb	r3, [r7, #1]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ba8:	e003      	b.n	8000bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	041a      	lsls	r2, r3, #16
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	611a      	str	r2, [r3, #16]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	041a      	lsls	r2, r3, #16
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	43d9      	mvns	r1, r3
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	400b      	ands	r3, r1
 8000bde:	431a      	orrs	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	611a      	str	r2, [r3, #16]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf0:	b08b      	sub	sp, #44	; 0x2c
 8000bf2:	af06      	add	r7, sp, #24
 8000bf4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d101      	bne.n	8000c00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e0fd      	b.n	8000dfc <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d106      	bne.n	8000c1a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f008 fb1b 	bl	8009250 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f002 f82a 	bl	8002c80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	687e      	ldr	r6, [r7, #4]
 8000c34:	466d      	mov	r5, sp
 8000c36:	f106 0410 	add.w	r4, r6, #16
 8000c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	602b      	str	r3, [r5, #0]
 8000c42:	1d33      	adds	r3, r6, #4
 8000c44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c46:	6838      	ldr	r0, [r7, #0]
 8000c48:	f001 fff4 	bl	8002c34 <USB_CoreInit>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d005      	beq.n	8000c5e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2202      	movs	r2, #2
 8000c56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e0ce      	b.n	8000dfc <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 f825 	bl	8002cb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e04c      	b.n	8000d0a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	440b      	add	r3, r1
 8000c80:	3301      	adds	r3, #1
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	440b      	add	r3, r1
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	b298      	uxth	r0, r3
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	440b      	add	r3, r1
 8000cac:	3336      	adds	r3, #54	; 0x36
 8000cae:	4602      	mov	r2, r0
 8000cb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	440b      	add	r3, r1
 8000cc2:	3303      	adds	r3, #3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cc8:	7bfa      	ldrb	r2, [r7, #15]
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	440b      	add	r3, r1
 8000cd6:	3338      	adds	r3, #56	; 0x38
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cdc:	7bfa      	ldrb	r2, [r7, #15]
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	440b      	add	r3, r1
 8000cea:	333c      	adds	r3, #60	; 0x3c
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cf0:	7bfa      	ldrb	r2, [r7, #15]
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	440b      	add	r3, r1
 8000cfe:	3340      	adds	r3, #64	; 0x40
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	3301      	adds	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	7bfa      	ldrb	r2, [r7, #15]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3ad      	bcc.n	8000c70 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]
 8000d18:	e044      	b.n	8000da4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d1a:	7bfa      	ldrb	r2, [r7, #15]
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	440b      	add	r3, r1
 8000d28:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	440b      	add	r3, r1
 8000d3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d42:	7bfa      	ldrb	r2, [r7, #15]
 8000d44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d46:	7bfa      	ldrb	r2, [r7, #15]
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	440b      	add	r3, r1
 8000d54:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d5c:	7bfa      	ldrb	r2, [r7, #15]
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	4613      	mov	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	440b      	add	r3, r1
 8000d6a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d72:	7bfa      	ldrb	r2, [r7, #15]
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	4613      	mov	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	440b      	add	r3, r1
 8000d80:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d88:	7bfa      	ldrb	r2, [r7, #15]
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	3301      	adds	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d3b5      	bcc.n	8000d1a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	687e      	ldr	r6, [r7, #4]
 8000db6:	466d      	mov	r5, sp
 8000db8:	f106 0410 	add.w	r4, r6, #16
 8000dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	602b      	str	r3, [r5, #0]
 8000dc4:	1d33      	adds	r3, r6, #4
 8000dc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc8:	6838      	ldr	r0, [r7, #0]
 8000dca:	f001 ff7f 	bl	8002ccc <USB_DevInit>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d005      	beq.n	8000de0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e00d      	b.n	8000dfc <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 ff19 	bl	8004c2c <USB_DevDisconnect>

  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d101      	bne.n	8000e1a <HAL_PCD_Start+0x16>
 8000e16:	2302      	movs	r3, #2
 8000e18:	e016      	b.n	8000e48 <HAL_PCD_Start+0x44>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 ff14 	bl	8002c54 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f008 fc81 	bl	8009736 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 feed 	bl	8004c18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f003 feef 	bl	8004c40 <USB_ReadInterrupts>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e6c:	d102      	bne.n	8000e74 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 fb61 	bl	8001536 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 fee1 	bl	8004c40 <USB_ReadInterrupts>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e88:	d112      	bne.n	8000eb0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e9c:	b292      	uxth	r2, r2
 8000e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f008 fa4f 	bl	8009346 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f925 	bl	80010fa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 fec3 	bl	8004c40 <USB_ReadInterrupts>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ec4:	d10b      	bne.n	8000ede <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ed8:	b292      	uxth	r2, r2
 8000eda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 feac 	bl	8004c40 <USB_ReadInterrupts>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ef2:	d10b      	bne.n	8000f0c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f06:	b292      	uxth	r2, r2
 8000f08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 fe95 	bl	8004c40 <USB_ReadInterrupts>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f20:	d126      	bne.n	8000f70 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0204 	bic.w	r2, r2, #4
 8000f34:	b292      	uxth	r2, r2
 8000f36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0208 	bic.w	r2, r2, #8
 8000f4c:	b292      	uxth	r2, r2
 8000f4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f008 fa30 	bl	80093b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f6a:	b292      	uxth	r2, r2
 8000f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 fe63 	bl	8004c40 <USB_ReadInterrupts>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f84:	f040 8084 	bne.w	8001090 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	77fb      	strb	r3, [r7, #31]
 8000f8c:	e011      	b.n	8000fb2 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	7ffb      	ldrb	r3, [r7, #31]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	441a      	add	r2, r3
 8000f9a:	7ffb      	ldrb	r3, [r7, #31]
 8000f9c:	8812      	ldrh	r2, [r2, #0]
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	f107 0120 	add.w	r1, r7, #32
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000fac:	7ffb      	ldrb	r3, [r7, #31]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	77fb      	strb	r3, [r7, #31]
 8000fb2:	7ffb      	ldrb	r3, [r7, #31]
 8000fb4:	2b07      	cmp	r3, #7
 8000fb6:	d9ea      	bls.n	8000f8e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0201 	orr.w	r2, r2, #1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0201 	bic.w	r2, r2, #1
 8000fe2:	b292      	uxth	r2, r2
 8000fe4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000fe8:	bf00      	nop
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f6      	beq.n	8000fea <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001004:	b29a      	uxth	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800100e:	b292      	uxth	r2, r2
 8001010:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001014:	2300      	movs	r3, #0
 8001016:	77fb      	strb	r3, [r7, #31]
 8001018:	e010      	b.n	800103c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800101a:	7ffb      	ldrb	r3, [r7, #31]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	4611      	mov	r1, r2
 8001022:	7ffa      	ldrb	r2, [r7, #31]
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	440a      	add	r2, r1
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	f107 0120 	add.w	r1, r7, #32
 800102e:	440b      	add	r3, r1
 8001030:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001034:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001036:	7ffb      	ldrb	r3, [r7, #31]
 8001038:	3301      	adds	r3, #1
 800103a:	77fb      	strb	r3, [r7, #31]
 800103c:	7ffb      	ldrb	r3, [r7, #31]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d9eb      	bls.n	800101a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800104a:	b29a      	uxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 0208 	orr.w	r2, r2, #8
 8001054:	b292      	uxth	r2, r2
 8001056:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800106c:	b292      	uxth	r2, r2
 800106e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800107a:	b29a      	uxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0204 	orr.w	r2, r2, #4
 8001084:	b292      	uxth	r2, r2
 8001086:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f008 f97a 	bl	8009384 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f003 fdd3 	bl	8004c40 <USB_ReadInterrupts>
 800109a:	4603      	mov	r3, r0
 800109c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010a4:	d10e      	bne.n	80010c4 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010b8:	b292      	uxth	r2, r2
 80010ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f008 f933 	bl	800932a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 fdb9 	bl	8004c40 <USB_ReadInterrupts>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010d8:	d10b      	bne.n	80010f2 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010ec:	b292      	uxth	r2, r2
 80010ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <HAL_PCD_SetAddress+0x1a>
 8001110:	2302      	movs	r3, #2
 8001112:	e013      	b.n	800113c <HAL_PCD_SetAddress+0x42>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	78fa      	ldrb	r2, [r7, #3]
 8001120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	78fa      	ldrb	r2, [r7, #3]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f003 fd60 	bl	8004bf2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	4608      	mov	r0, r1
 800114e:	4611      	mov	r1, r2
 8001150:	461a      	mov	r2, r3
 8001152:	4603      	mov	r3, r0
 8001154:	70fb      	strb	r3, [r7, #3]
 8001156:	460b      	mov	r3, r1
 8001158:	803b      	strh	r3, [r7, #0]
 800115a:	4613      	mov	r3, r2
 800115c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001162:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001166:	2b00      	cmp	r3, #0
 8001168:	da0e      	bge.n	8001188 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2201      	movs	r2, #1
 8001184:	705a      	strb	r2, [r3, #1]
 8001186:	e00e      	b.n	80011a6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	f003 0207 	and.w	r2, r3, #7
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80011a6:	78fb      	ldrb	r3, [r7, #3]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80011b2:	883a      	ldrh	r2, [r7, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	78ba      	ldrb	r2, [r7, #2]
 80011bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80011d0:	78bb      	ldrb	r3, [r7, #2]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d102      	bne.n	80011dc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_PCD_EP_Open+0xa6>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e00e      	b.n	8001208 <HAL_PCD_EP_Open+0xc4>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68f9      	ldr	r1, [r7, #12]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 fd87 	bl	8002d0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001206:	7afb      	ldrb	r3, [r7, #11]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800121c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001220:	2b00      	cmp	r3, #0
 8001222:	da0e      	bge.n	8001242 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2201      	movs	r2, #1
 800123e:	705a      	strb	r2, [r3, #1]
 8001240:	e00e      	b.n	8001260 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	f003 0207 	and.w	r2, r3, #7
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2200      	movs	r2, #0
 800125e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	b2da      	uxtb	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_PCD_EP_Close+0x6a>
 8001276:	2302      	movs	r3, #2
 8001278:	e00e      	b.n	8001298 <HAL_PCD_EP_Close+0x88>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68f9      	ldr	r1, [r7, #12]
 8001288:	4618      	mov	r0, r3
 800128a:	f002 f8a9 	bl	80033e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	460b      	mov	r3, r1
 80012ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012b0:	7afb      	ldrb	r3, [r7, #11]
 80012b2:	f003 0207 	and.w	r2, r3, #7
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2200      	movs	r2, #0
 80012de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012e0:	7afb      	ldrb	r3, [r7, #11]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d106      	bne.n	8001304 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6979      	ldr	r1, [r7, #20]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 fa5b 	bl	80037b8 <USB_EPStartXfer>
 8001302:	e005      	b.n	8001310 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6979      	ldr	r1, [r7, #20]
 800130a:	4618      	mov	r0, r3
 800130c:	f002 fa54 	bl	80037b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	460b      	mov	r3, r1
 8001324:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	f003 0207 	and.w	r2, r3, #7
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	440b      	add	r3, r1
 8001338:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800133c:	681b      	ldr	r3, [r3, #0]
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	460b      	mov	r3, r1
 8001356:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2201      	movs	r2, #1
 8001392:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001394:	7afb      	ldrb	r3, [r7, #11]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	b2da      	uxtb	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013a0:	7afb      	ldrb	r3, [r7, #11]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d106      	bne.n	80013b8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6979      	ldr	r1, [r7, #20]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f002 fa01 	bl	80037b8 <USB_EPStartXfer>
 80013b6:	e005      	b.n	80013c4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6979      	ldr	r1, [r7, #20]
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 f9fa 	bl	80037b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	f003 0207 	and.w	r2, r3, #7
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d901      	bls.n	80013ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e04c      	b.n	8001486 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	da0e      	bge.n	8001412 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2201      	movs	r2, #1
 800140e:	705a      	strb	r2, [r3, #1]
 8001410:	e00c      	b.n	800142c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001412:	78fa      	ldrb	r2, [r7, #3]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	4413      	add	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2201      	movs	r2, #1
 8001430:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	b2da      	uxtb	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <HAL_PCD_EP_SetStall+0x7e>
 8001448:	2302      	movs	r3, #2
 800144a:	e01c      	b.n	8001486 <HAL_PCD_EP_SetStall+0xb8>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	4618      	mov	r0, r3
 800145c:	f003 facc 	bl	80049f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	2b00      	cmp	r3, #0
 8001468:	d108      	bne.n	800147c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001474:	4619      	mov	r1, r3
 8001476:	4610      	mov	r0, r2
 8001478:	f003 fbf1 	bl	8004c5e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	f003 020f 	and.w	r2, r3, #15
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d901      	bls.n	80014ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e040      	b.n	800152e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da0e      	bge.n	80014d2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2201      	movs	r2, #1
 80014ce:	705a      	strb	r2, [r3, #1]
 80014d0:	e00e      	b.n	80014f0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	f003 0207 	and.w	r2, r3, #7
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_PCD_EP_ClrStall+0x82>
 800150c:	2302      	movs	r3, #2
 800150e:	e00e      	b.n	800152e <HAL_PCD_EP_ClrStall+0xa0>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68f9      	ldr	r1, [r7, #12]
 800151e:	4618      	mov	r0, r3
 8001520:	f003 faba 	bl	8004a98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b08e      	sub	sp, #56	; 0x38
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800153e:	e2df      	b.n	8001b00 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001548:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800154a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001556:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800155a:	2b00      	cmp	r3, #0
 800155c:	f040 8158 	bne.w	8001810 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001560:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	d152      	bne.n	8001610 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800157a:	81fb      	strh	r3, [r7, #14]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	89fb      	ldrh	r3, [r7, #14]
 8001582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800158a:	b29b      	uxth	r3, r3
 800158c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3328      	adds	r3, #40	; 0x28
 8001592:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800159c:	b29b      	uxth	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	3302      	adds	r3, #2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	695a      	ldr	r2, [r3, #20]
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	441a      	add	r2, r3
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015ce:	2100      	movs	r1, #0
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f007 fe90 	bl	80092f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 828e 	beq.w	8001b00 <PCD_EP_ISR_Handler+0x5ca>
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f040 8289 	bne.w	8001b00 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	b292      	uxth	r2, r2
 8001602:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800160e:	e277      	b.n	8001b00 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001620:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001626:	2b00      	cmp	r3, #0
 8001628:	d034      	beq.n	8001694 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001632:	b29b      	uxth	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	3306      	adds	r3, #6
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	4413      	add	r3, r2
 8001648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001668:	b29b      	uxth	r3, r3
 800166a:	f003 fb47 	bl	8004cfc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	b29a      	uxth	r2, r3
 8001676:	f640 738f 	movw	r3, #3983	; 0xf8f
 800167a:	4013      	ands	r3, r2
 800167c:	823b      	strh	r3, [r7, #16]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	8a3a      	ldrh	r2, [r7, #16]
 8001684:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001688:	b292      	uxth	r2, r2
 800168a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f007 fe05 	bl	800929c <HAL_PCD_SetupStageCallback>
 8001692:	e235      	b.n	8001b00 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001694:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001698:	2b00      	cmp	r3, #0
 800169a:	f280 8231 	bge.w	8001b00 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016aa:	4013      	ands	r3, r2
 80016ac:	83bb      	strh	r3, [r7, #28]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	8bba      	ldrh	r2, [r7, #28]
 80016b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016b8:	b292      	uxth	r2, r2
 80016ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	3306      	adds	r3, #6
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d019      	beq.n	8001724 <PCD_EP_ISR_Handler+0x1ee>
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d015      	beq.n	8001724 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	6959      	ldr	r1, [r3, #20]
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001708:	b29b      	uxth	r3, r3
 800170a:	f003 faf7 	bl	8004cfc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	441a      	add	r2, r3
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800171c:	2100      	movs	r1, #0
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f007 fdce 	bl	80092c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	61bb      	str	r3, [r7, #24]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001732:	b29b      	uxth	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4413      	add	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d112      	bne.n	8001772 <PCD_EP_ISR_Handler+0x23c>
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001756:	b29a      	uxth	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	801a      	strh	r2, [r3, #0]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800176a:	b29a      	uxth	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	801a      	strh	r2, [r3, #0]
 8001770:	e02f      	b.n	80017d2 <PCD_EP_ISR_Handler+0x29c>
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	2b3e      	cmp	r3, #62	; 0x3e
 8001778:	d813      	bhi.n	80017a2 <PCD_EP_ISR_Handler+0x26c>
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <PCD_EP_ISR_Handler+0x25e>
 800178e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001790:	3301      	adds	r3, #1
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
 8001794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001796:	b29b      	uxth	r3, r3
 8001798:	029b      	lsls	r3, r3, #10
 800179a:	b29a      	uxth	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	801a      	strh	r2, [r3, #0]
 80017a0:	e017      	b.n	80017d2 <PCD_EP_ISR_Handler+0x29c>
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <PCD_EP_ISR_Handler+0x286>
 80017b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b8:	3b01      	subs	r3, #1
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017be:	b29b      	uxth	r3, r3
 80017c0:	029b      	lsls	r3, r3, #10
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017e2:	827b      	strh	r3, [r7, #18]
 80017e4:	8a7b      	ldrh	r3, [r7, #18]
 80017e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80017ea:	827b      	strh	r3, [r7, #18]
 80017ec:	8a7b      	ldrh	r3, [r7, #18]
 80017ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017f2:	827b      	strh	r3, [r7, #18]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	8a7b      	ldrh	r3, [r7, #18]
 80017fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180a:	b29b      	uxth	r3, r3
 800180c:	8013      	strh	r3, [r2, #0]
 800180e:	e177      	b.n	8001b00 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001822:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001826:	2b00      	cmp	r3, #0
 8001828:	f280 80ea 	bge.w	8001a00 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	b29a      	uxth	r2, r3
 800183e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001842:	4013      	ands	r3, r2
 8001844:	853b      	strh	r3, [r7, #40]	; 0x28
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001856:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800185a:	b292      	uxth	r2, r2
 800185c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800185e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	7b1b      	ldrb	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d122      	bne.n	80018c2 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001884:	b29b      	uxth	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4413      	add	r3, r2
 8001890:	3306      	adds	r3, #6
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	4413      	add	r3, r2
 800189a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018a4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80018a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 8087 	beq.w	80019bc <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	6959      	ldr	r1, [r3, #20]
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	88da      	ldrh	r2, [r3, #6]
 80018ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018bc:	f003 fa1e 	bl	8004cfc <USB_ReadPMA>
 80018c0:	e07c      	b.n	80019bc <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	78db      	ldrb	r3, [r3, #3]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d108      	bne.n	80018dc <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80018ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018cc:	461a      	mov	r2, r3
 80018ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f923 	bl	8001b1c <HAL_PCD_EP_DB_Receive>
 80018d6:	4603      	mov	r3, r0
 80018d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80018da:	e06f      	b.n	80019bc <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	441a      	add	r2, r3
 8001906:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800190c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001914:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001918:	b29b      	uxth	r3, r3
 800191a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	b29b      	uxth	r3, r3
 800192e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d021      	beq.n	800197a <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800193e:	b29b      	uxth	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	3302      	adds	r3, #2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	4413      	add	r3, r2
 8001954:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800195e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001960:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001962:	2b00      	cmp	r3, #0
 8001964:	d02a      	beq.n	80019bc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	6959      	ldr	r1, [r3, #20]
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	891a      	ldrh	r2, [r3, #8]
 8001972:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001974:	f003 f9c2 	bl	8004cfc <USB_ReadPMA>
 8001978:	e020      	b.n	80019bc <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001982:	b29b      	uxth	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	3306      	adds	r3, #6
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	4413      	add	r3, r2
 8001998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019a2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80019a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d008      	beq.n	80019bc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	6959      	ldr	r1, [r3, #20]
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	895a      	ldrh	r2, [r3, #10]
 80019b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019b8:	f003 f9a0 	bl	8004cfc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	69da      	ldr	r2, [r3, #28]
 80019c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019c2:	441a      	add	r2, r3
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019ce:	441a      	add	r2, r3
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <PCD_EP_ISR_Handler+0x4b0>
 80019dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d206      	bcs.n	80019f4 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	4619      	mov	r1, r3
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f007 fc67 	bl	80092c0 <HAL_PCD_DataOutStageCallback>
 80019f2:	e005      	b.n	8001a00 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 fedc 	bl	80037b8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d07a      	beq.n	8001b00 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a38:	843b      	strh	r3, [r7, #32]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	441a      	add	r2, r3
 8001a48:	8c3b      	ldrh	r3, [r7, #32]
 8001a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	78db      	ldrb	r3, [r3, #3]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d108      	bne.n	8001a70 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d146      	bne.n	8001af4 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d141      	bne.n	8001af4 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4413      	add	r3, r2
 8001a84:	3302      	adds	r3, #2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a98:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	8bfb      	ldrh	r3, [r7, #30]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d906      	bls.n	8001ab2 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	699a      	ldr	r2, [r3, #24]
 8001aa8:	8bfb      	ldrh	r3, [r7, #30]
 8001aaa:	1ad2      	subs	r2, r2, r3
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	619a      	str	r2, [r3, #24]
 8001ab0:	e002      	b.n	8001ab8 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d106      	bne.n	8001ace <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f007 fc15 	bl	80092f6 <HAL_PCD_DataInStageCallback>
 8001acc:	e018      	b.n	8001b00 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	8bfb      	ldrh	r3, [r7, #30]
 8001ad4:	441a      	add	r2, r3
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	8bfb      	ldrh	r3, [r7, #30]
 8001ae0:	441a      	add	r2, r3
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 fe63 	bl	80037b8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001af2:	e005      	b.n	8001b00 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001af4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001af6:	461a      	mov	r2, r3
 8001af8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f91b 	bl	8001d36 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f6ff ad17 	blt.w	8001540 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3738      	adds	r7, #56	; 0x38
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	4613      	mov	r3, r2
 8001b28:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d07e      	beq.n	8001c32 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4413      	add	r3, r2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	4413      	add	r3, r2
 8001b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b5c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	8b7b      	ldrh	r3, [r7, #26]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d306      	bcc.n	8001b76 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	699a      	ldr	r2, [r3, #24]
 8001b6c:	8b7b      	ldrh	r3, [r7, #26]
 8001b6e:	1ad2      	subs	r2, r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	619a      	str	r2, [r3, #24]
 8001b74:	e002      	b.n	8001b7c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d123      	bne.n	8001bcc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9e:	833b      	strh	r3, [r7, #24]
 8001ba0:	8b3b      	ldrh	r3, [r7, #24]
 8001ba2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ba6:	833b      	strh	r3, [r7, #24]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	441a      	add	r2, r3
 8001bb6:	8b3b      	ldrh	r3, [r7, #24]
 8001bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d01f      	beq.n	8001c16 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf0:	82fb      	strh	r3, [r7, #22]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	441a      	add	r2, r3
 8001c00:	8afb      	ldrh	r3, [r7, #22]
 8001c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c16:	8b7b      	ldrh	r3, [r7, #26]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 8087 	beq.w	8001d2c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	6959      	ldr	r1, [r3, #20]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	891a      	ldrh	r2, [r3, #8]
 8001c2a:	8b7b      	ldrh	r3, [r7, #26]
 8001c2c:	f003 f866 	bl	8004cfc <USB_ReadPMA>
 8001c30:	e07c      	b.n	8001d2c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	3306      	adds	r3, #6
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c5a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	699a      	ldr	r2, [r3, #24]
 8001c60:	8b7b      	ldrh	r3, [r7, #26]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d306      	bcc.n	8001c74 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	8b7b      	ldrh	r3, [r7, #26]
 8001c6c:	1ad2      	subs	r2, r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	619a      	str	r2, [r3, #24]
 8001c72:	e002      	b.n	8001c7a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d123      	bne.n	8001cca <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c9c:	83fb      	strh	r3, [r7, #30]
 8001c9e:	8bfb      	ldrh	r3, [r7, #30]
 8001ca0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ca4:	83fb      	strh	r3, [r7, #30]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	441a      	add	r2, r3
 8001cb4:	8bfb      	ldrh	r3, [r7, #30]
 8001cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d11f      	bne.n	8001d14 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cee:	83bb      	strh	r3, [r7, #28]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	441a      	add	r2, r3
 8001cfe:	8bbb      	ldrh	r3, [r7, #28]
 8001d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d14:	8b7b      	ldrh	r3, [r7, #26]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	6959      	ldr	r1, [r3, #20]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	895a      	ldrh	r2, [r3, #10]
 8001d26:	8b7b      	ldrh	r3, [r7, #26]
 8001d28:	f002 ffe8 	bl	8004cfc <USB_ReadPMA>
    }
  }

  return count;
 8001d2c:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b092      	sub	sp, #72	; 0x48
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	4613      	mov	r3, r2
 8001d42:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8132 	beq.w	8001fb4 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	3302      	adds	r3, #2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d78:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d906      	bls.n	8001d92 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	699a      	ldr	r2, [r3, #24]
 8001d88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d8a:	1ad2      	subs	r2, r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	619a      	str	r2, [r3, #24]
 8001d90:	e002      	b.n	8001d98 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d12c      	bne.n	8001dfa <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f007 faa5 	bl	80092f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 822f 	beq.w	8002216 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd2:	827b      	strh	r3, [r7, #18]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	441a      	add	r2, r3
 8001de2:	8a7b      	ldrh	r3, [r7, #18]
 8001de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	8013      	strh	r3, [r2, #0]
 8001df8:	e20d      	b.n	8002216 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01f      	beq.n	8001e44 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e1e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	441a      	add	r2, r3
 8001e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	f040 81e3 	bne.w	8002216 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e56:	441a      	add	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	69da      	ldr	r2, [r3, #28]
 8001e60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e62:	441a      	add	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	6a1a      	ldr	r2, [r3, #32]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d309      	bcc.n	8001e88 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	6a1a      	ldr	r2, [r3, #32]
 8001e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e80:	1ad2      	subs	r2, r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	621a      	str	r2, [r3, #32]
 8001e86:	e014      	b.n	8001eb2 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d106      	bne.n	8001e9e <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001e90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e92:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e9c:	e009      	b.n	8001eb2 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	785b      	ldrb	r3, [r3, #1]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d155      	bne.n	8001f66 <HAL_PCD_EP_DB_Transmit+0x230>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	4413      	add	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	011a      	lsls	r2, r3, #4
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	4413      	add	r3, r2
 8001edc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d112      	bne.n	8001f0e <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	801a      	strh	r2, [r3, #0]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	801a      	strh	r2, [r3, #0]
 8001f0c:	e047      	b.n	8001f9e <HAL_PCD_EP_DB_Transmit+0x268>
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f10:	2b3e      	cmp	r3, #62	; 0x3e
 8001f12:	d811      	bhi.n	8001f38 <HAL_PCD_EP_DB_Transmit+0x202>
 8001f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	3301      	adds	r3, #1
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	029b      	lsls	r3, r3, #10
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	801a      	strh	r2, [r3, #0]
 8001f36:	e032      	b.n	8001f9e <HAL_PCD_EP_DB_Transmit+0x268>
 8001f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <HAL_PCD_EP_DB_Transmit+0x218>
 8001f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	029b      	lsls	r3, r3, #10
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	801a      	strh	r2, [r3, #0]
 8001f64:	e01b      	b.n	8001f9e <HAL_PCD_EP_DB_Transmit+0x268>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	785b      	ldrb	r3, [r3, #1]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d117      	bne.n	8001f9e <HAL_PCD_EP_DB_Transmit+0x268>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	623b      	str	r3, [r7, #32]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	4413      	add	r3, r2
 8001f84:	623b      	str	r3, [r7, #32]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	011a      	lsls	r2, r3, #4
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	6959      	ldr	r1, [r3, #20]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	891a      	ldrh	r2, [r3, #8]
 8001faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	f002 fe61 	bl	8004c74 <USB_WritePMA>
 8001fb2:	e130      	b.n	8002216 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3306      	adds	r3, #6
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fdc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d306      	bcc.n	8001ff6 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	699a      	ldr	r2, [r3, #24]
 8001fec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fee:	1ad2      	subs	r2, r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	619a      	str	r2, [r3, #24]
 8001ff4:	e002      	b.n	8001ffc <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d12c      	bne.n	800205e <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f007 f973 	bl	80092f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 80fd 	bne.w	8002216 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002036:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	441a      	add	r2, r3
 8002046:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800204c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002058:	b29b      	uxth	r3, r3
 800205a:	8013      	strh	r3, [r2, #0]
 800205c:	e0db      	b.n	8002216 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d11f      	bne.n	80020a8 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002082:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	441a      	add	r2, r3
 8002092:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800209c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	f040 80b1 	bne.w	8002216 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020ba:	441a      	add	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020c6:	441a      	add	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d309      	bcc.n	80020ec <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	6a1a      	ldr	r2, [r3, #32]
 80020e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e4:	1ad2      	subs	r2, r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	621a      	str	r2, [r3, #32]
 80020ea:	e014      	b.n	8002116 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80020f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002100:	e009      	b.n	8002116 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	785b      	ldrb	r3, [r3, #1]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d155      	bne.n	80021d0 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	647b      	str	r3, [r7, #68]	; 0x44
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002138:	4413      	add	r3, r2
 800213a:	647b      	str	r3, [r7, #68]	; 0x44
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	011a      	lsls	r2, r3, #4
 8002142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002144:	4413      	add	r3, r2
 8002146:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
 800214c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214e:	2b00      	cmp	r3, #0
 8002150:	d112      	bne.n	8002178 <HAL_PCD_EP_DB_Transmit+0x442>
 8002152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800215c:	b29a      	uxth	r2, r3
 800215e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002160:	801a      	strh	r2, [r3, #0]
 8002162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800216c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002170:	b29a      	uxth	r2, r3
 8002172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002174:	801a      	strh	r2, [r3, #0]
 8002176:	e044      	b.n	8002202 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217a:	2b3e      	cmp	r3, #62	; 0x3e
 800217c:	d811      	bhi.n	80021a2 <HAL_PCD_EP_DB_Transmit+0x46c>
 800217e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <HAL_PCD_EP_DB_Transmit+0x45e>
 800218e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002190:	3301      	adds	r3, #1
 8002192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002196:	b29b      	uxth	r3, r3
 8002198:	029b      	lsls	r3, r3, #10
 800219a:	b29a      	uxth	r2, r3
 800219c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800219e:	801a      	strh	r2, [r3, #0]
 80021a0:	e02f      	b.n	8002202 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d102      	bne.n	80021b8 <HAL_PCD_EP_DB_Transmit+0x482>
 80021b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b4:	3b01      	subs	r3, #1
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	029b      	lsls	r3, r3, #10
 80021be:	b29b      	uxth	r3, r3
 80021c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021cc:	801a      	strh	r2, [r3, #0]
 80021ce:	e018      	b.n	8002202 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	785b      	ldrb	r3, [r3, #1]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d114      	bne.n	8002202 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e6:	4413      	add	r3, r2
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	011a      	lsls	r2, r3, #4
 80021f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f2:	4413      	add	r3, r2
 80021f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021f8:	633b      	str	r3, [r7, #48]	; 0x30
 80021fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002200:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	6959      	ldr	r1, [r3, #20]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	895a      	ldrh	r2, [r3, #10]
 800220e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002210:	b29b      	uxth	r3, r3
 8002212:	f002 fd2f 	bl	8004c74 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800222c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002230:	823b      	strh	r3, [r7, #16]
 8002232:	8a3b      	ldrh	r3, [r7, #16]
 8002234:	f083 0310 	eor.w	r3, r3, #16
 8002238:	823b      	strh	r3, [r7, #16]
 800223a:	8a3b      	ldrh	r3, [r7, #16]
 800223c:	f083 0320 	eor.w	r3, r3, #32
 8002240:	823b      	strh	r3, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	441a      	add	r2, r3
 8002250:	8a3b      	ldrh	r3, [r7, #16]
 8002252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800225a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002262:	b29b      	uxth	r3, r3
 8002264:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3748      	adds	r7, #72	; 0x48
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	817b      	strh	r3, [r7, #10]
 800227e:	4613      	mov	r3, r2
 8002280:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002282:	897b      	ldrh	r3, [r7, #10]
 8002284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800228e:	897b      	ldrh	r3, [r7, #10]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4413      	add	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e009      	b.n	80022ba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022a6:	897a      	ldrh	r2, [r7, #10]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80022ba:	893b      	ldrh	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2200      	movs	r2, #0
 80022c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	80da      	strh	r2, [r3, #6]
 80022ce:	e00b      	b.n	80022e8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2201      	movs	r2, #1
 80022d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	b29a      	uxth	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e26c      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8087 	beq.w	8002422 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002314:	4b92      	ldr	r3, [pc, #584]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b04      	cmp	r3, #4
 800231e:	d00c      	beq.n	800233a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002320:	4b8f      	ldr	r3, [pc, #572]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b08      	cmp	r3, #8
 800232a:	d112      	bne.n	8002352 <HAL_RCC_OscConfig+0x5e>
 800232c:	4b8c      	ldr	r3, [pc, #560]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002338:	d10b      	bne.n	8002352 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233a:	4b89      	ldr	r3, [pc, #548]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d06c      	beq.n	8002420 <HAL_RCC_OscConfig+0x12c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d168      	bne.n	8002420 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e246      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x76>
 800235c:	4b80      	ldr	r3, [pc, #512]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a7f      	ldr	r2, [pc, #508]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e02e      	b.n	80023c8 <HAL_RCC_OscConfig+0xd4>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x98>
 8002372:	4b7b      	ldr	r3, [pc, #492]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a7a      	ldr	r2, [pc, #488]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b78      	ldr	r3, [pc, #480]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a77      	ldr	r2, [pc, #476]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e01d      	b.n	80023c8 <HAL_RCC_OscConfig+0xd4>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0xbc>
 8002396:	4b72      	ldr	r3, [pc, #456]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a71      	ldr	r2, [pc, #452]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b6f      	ldr	r3, [pc, #444]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a6e      	ldr	r2, [pc, #440]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e00b      	b.n	80023c8 <HAL_RCC_OscConfig+0xd4>
 80023b0:	4b6b      	ldr	r3, [pc, #428]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a6a      	ldr	r2, [pc, #424]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b68      	ldr	r3, [pc, #416]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a67      	ldr	r2, [pc, #412]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe f96a 	bl	80006a8 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe f966 	bl	80006a8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e1fa      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	4b5d      	ldr	r3, [pc, #372]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0xe4>
 80023f6:	e014      	b.n	8002422 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7fe f956 	bl	80006a8 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002400:	f7fe f952 	bl	80006a8 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e1e6      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x10c>
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d063      	beq.n	80024f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800242e:	4b4c      	ldr	r3, [pc, #304]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800243a:	4b49      	ldr	r3, [pc, #292]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b08      	cmp	r3, #8
 8002444:	d11c      	bne.n	8002480 <HAL_RCC_OscConfig+0x18c>
 8002446:	4b46      	ldr	r3, [pc, #280]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d116      	bne.n	8002480 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	4b43      	ldr	r3, [pc, #268]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_RCC_OscConfig+0x176>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e1ba      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4939      	ldr	r1, [pc, #228]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	e03a      	b.n	80024f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002488:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_RCC_OscConfig+0x270>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7fe f90b 	bl	80006a8 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002496:	f7fe f907 	bl	80006a8 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e19b      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b4:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4927      	ldr	r1, [pc, #156]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]
 80024c8:	e015      	b.n	80024f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ca:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_RCC_OscConfig+0x270>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe f8ea 	bl	80006a8 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d8:	f7fe f8e6 	bl	80006a8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e17a      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d03a      	beq.n	8002578 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d019      	beq.n	800253e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002510:	f7fe f8ca 	bl	80006a8 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002518:	f7fe f8c6 	bl	80006a8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e15a      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002536:	2001      	movs	r0, #1
 8002538:	f000 faa8 	bl	8002a8c <RCC_Delay>
 800253c:	e01c      	b.n	8002578 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002544:	f7fe f8b0 	bl	80006a8 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254a:	e00f      	b.n	800256c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254c:	f7fe f8ac 	bl	80006a8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d908      	bls.n	800256c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e140      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	42420000 	.word	0x42420000
 8002568:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256c:	4b9e      	ldr	r3, [pc, #632]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e9      	bne.n	800254c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80a6 	beq.w	80026d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258a:	4b97      	ldr	r3, [pc, #604]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10d      	bne.n	80025b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4b94      	ldr	r3, [pc, #592]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4a93      	ldr	r2, [pc, #588]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	61d3      	str	r3, [r2, #28]
 80025a2:	4b91      	ldr	r3, [pc, #580]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ae:	2301      	movs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b2:	4b8e      	ldr	r3, [pc, #568]	; (80027ec <HAL_RCC_OscConfig+0x4f8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d118      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025be:	4b8b      	ldr	r3, [pc, #556]	; (80027ec <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a8a      	ldr	r2, [pc, #552]	; (80027ec <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ca:	f7fe f86d 	bl	80006a8 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d2:	f7fe f869 	bl	80006a8 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b64      	cmp	r3, #100	; 0x64
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e0fd      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	4b81      	ldr	r3, [pc, #516]	; (80027ec <HAL_RCC_OscConfig+0x4f8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x312>
 80025f8:	4b7b      	ldr	r3, [pc, #492]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4a7a      	ldr	r2, [pc, #488]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6213      	str	r3, [r2, #32]
 8002604:	e02d      	b.n	8002662 <HAL_RCC_OscConfig+0x36e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x334>
 800260e:	4b76      	ldr	r3, [pc, #472]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4a75      	ldr	r2, [pc, #468]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	6213      	str	r3, [r2, #32]
 800261a:	4b73      	ldr	r3, [pc, #460]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	4a72      	ldr	r2, [pc, #456]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	6213      	str	r3, [r2, #32]
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x36e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x356>
 8002630:	4b6d      	ldr	r3, [pc, #436]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4a6c      	ldr	r2, [pc, #432]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6213      	str	r3, [r2, #32]
 800263c:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4a69      	ldr	r2, [pc, #420]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6213      	str	r3, [r2, #32]
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x36e>
 800264a:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4a66      	ldr	r2, [pc, #408]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6213      	str	r3, [r2, #32]
 8002656:	4b64      	ldr	r3, [pc, #400]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a63      	ldr	r2, [pc, #396]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266a:	f7fe f81d 	bl	80006a8 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe f819 	bl	80006a8 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0ab      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b57      	ldr	r3, [pc, #348]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x37e>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe f807 	bl	80006a8 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe f803 	bl	80006a8 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e095      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b48      	ldr	r3, [pc, #288]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	4a47      	ldr	r2, [pc, #284]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8081 	beq.w	80027de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026dc:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d061      	beq.n	80027ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d146      	bne.n	800277e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f0:	4b3f      	ldr	r3, [pc, #252]	; (80027f0 <HAL_RCC_OscConfig+0x4fc>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fd ffd7 	bl	80006a8 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fe:	f7fd ffd3 	bl	80006a8 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e067      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d108      	bne.n	8002738 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002726:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	492d      	ldr	r1, [pc, #180]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a19      	ldr	r1, [r3, #32]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	430b      	orrs	r3, r1
 800274a:	4927      	ldr	r1, [pc, #156]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <HAL_RCC_OscConfig+0x4fc>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fd ffa7 	bl	80006a8 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7fd ffa3 	bl	80006a8 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e037      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x46a>
 800277c:	e02f      	b.n	80027de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_RCC_OscConfig+0x4fc>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fd ff90 	bl	80006a8 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7fd ff8c 	bl	80006a8 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e020      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x498>
 80027aa:	e018      	b.n	80027de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e013      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d106      	bne.n	80027da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40007000 	.word	0x40007000
 80027f0:	42420060 	.word	0x42420060

080027f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0d0      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002808:	4b6a      	ldr	r3, [pc, #424]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d910      	bls.n	8002838 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b67      	ldr	r3, [pc, #412]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 0207 	bic.w	r2, r3, #7
 800281e:	4965      	ldr	r1, [pc, #404]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b63      	ldr	r3, [pc, #396]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0b8      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002850:	4b59      	ldr	r3, [pc, #356]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a58      	ldr	r2, [pc, #352]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800285a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002868:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a52      	ldr	r2, [pc, #328]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002872:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002874:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	494d      	ldr	r1, [pc, #308]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d040      	beq.n	8002914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d115      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e07f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b2:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e073      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c2:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e06b      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d2:	4b39      	ldr	r3, [pc, #228]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f023 0203 	bic.w	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4936      	ldr	r1, [pc, #216]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e4:	f7fd fee0 	bl	80006a8 <HAL_GetTick>
 80028e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ec:	f7fd fedc 	bl	80006a8 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e053      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 020c 	and.w	r2, r3, #12
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	429a      	cmp	r2, r3
 8002912:	d1eb      	bne.n	80028ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002914:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d210      	bcs.n	8002944 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 0207 	bic.w	r2, r3, #7
 800292a:	4922      	ldr	r1, [pc, #136]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e032      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4916      	ldr	r1, [pc, #88]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	490e      	ldr	r1, [pc, #56]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002982:	f000 f821 	bl	80029c8 <HAL_RCC_GetSysClockFreq>
 8002986:	4601      	mov	r1, r0
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	5cd3      	ldrb	r3, [r2, r3]
 8002996:	fa21 f303 	lsr.w	r3, r1, r3
 800299a:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <HAL_RCC_ClockConfig+0x1cc>)
 800299c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1d0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fd fe3e 	bl	8000624 <HAL_InitTick>

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40022000 	.word	0x40022000
 80029b8:	40021000 	.word	0x40021000
 80029bc:	0800993c 	.word	0x0800993c
 80029c0:	20000004 	.word	0x20000004
 80029c4:	20000008 	.word	0x20000008

080029c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c8:	b490      	push	{r4, r7}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029ce:	4b2a      	ldr	r3, [pc, #168]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029d0:	1d3c      	adds	r4, r7, #4
 80029d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xb4>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029f2:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d002      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x40>
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d003      	beq.n	8002a0e <HAL_RCC_GetSysClockFreq+0x46>
 8002a06:	e02d      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a0a:	623b      	str	r3, [r7, #32]
      break;
 8002a0c:	e02d      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	0c9b      	lsrs	r3, r3, #18
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a20:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	0c5b      	lsrs	r3, r3, #17
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a46:	fb02 f203 	mul.w	r2, r2, r3
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
 8002a52:	e004      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a58:	fb02 f303 	mul.w	r3, r2, r3
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	623b      	str	r3, [r7, #32]
      break;
 8002a62:	e002      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a66:	623b      	str	r3, [r7, #32]
      break;
 8002a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3728      	adds	r7, #40	; 0x28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc90      	pop	{r4, r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	080098a4 	.word	0x080098a4
 8002a7c:	080098b4 	.word	0x080098b4
 8002a80:	40021000 	.word	0x40021000
 8002a84:	007a1200 	.word	0x007a1200
 8002a88:	003d0900 	.word	0x003d0900

08002a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <RCC_Delay+0x34>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <RCC_Delay+0x38>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0a5b      	lsrs	r3, r3, #9
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002aa8:	bf00      	nop
  }
  while (Delay --);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1e5a      	subs	r2, r3, #1
 8002aae:	60fa      	str	r2, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f9      	bne.n	8002aa8 <RCC_Delay+0x1c>
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000004 	.word	0x20000004
 8002ac4:	10624dd3 	.word	0x10624dd3

08002ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d07d      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae8:	4b4f      	ldr	r3, [pc, #316]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10d      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af4:	4b4c      	ldr	r3, [pc, #304]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	4a4b      	ldr	r2, [pc, #300]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afe:	61d3      	str	r3, [r2, #28]
 8002b00:	4b49      	ldr	r3, [pc, #292]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d118      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1c:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a42      	ldr	r2, [pc, #264]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b28:	f7fd fdbe 	bl	80006a8 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	e008      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b30:	f7fd fdba 	bl	80006a8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e06d      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b4e:	4b36      	ldr	r3, [pc, #216]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d02e      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d027      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b6c:	4b2e      	ldr	r3, [pc, #184]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b76:	4b2e      	ldr	r3, [pc, #184]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b7c:	4b2c      	ldr	r3, [pc, #176]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b82:	4a29      	ldr	r2, [pc, #164]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d014      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fd fd89 	bl	80006a8 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fd fd85 	bl	80006a8 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e036      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ee      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4917      	ldr	r1, [pc, #92]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd4:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	490b      	ldr	r1, [pc, #44]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4904      	ldr	r1, [pc, #16]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	42420440 	.word	0x42420440

08002c34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c34:	b084      	sub	sp, #16
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	f107 0014 	add.w	r0, r7, #20
 8002c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	b004      	add	sp, #16
 8002c52:	4770      	bx	lr

08002c54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c64:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002c68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c88:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002c8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ccc:	b084      	sub	sp, #16
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	f107 0014 	add.w	r0, r7, #20
 8002cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	b004      	add	sp, #16
 8002d0a:	4770      	bx	lr

08002d0c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b09b      	sub	sp, #108	; 0x6c
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	78db      	ldrb	r3, [r3, #3]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d81f      	bhi.n	8002d7e <USB_ActivateEndpoint+0x72>
 8002d3e:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <USB_ActivateEndpoint+0x38>)
 8002d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d44:	08002d55 	.word	0x08002d55
 8002d48:	08002d71 	.word	0x08002d71
 8002d4c:	08002d87 	.word	0x08002d87
 8002d50:	08002d63 	.word	0x08002d63
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002d54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d60:	e012      	b.n	8002d88 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002d62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d66:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002d6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d6e:	e00b      	b.n	8002d88 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002d70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d7c:	e004      	b.n	8002d88 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002d84:	e000      	b.n	8002d88 <USB_ActivateEndpoint+0x7c>
      break;
 8002d86:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	441a      	add	r2, r3
 8002d92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	441a      	add	r2, r3
 8002dd8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	7b1b      	ldrb	r3, [r3, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f040 8149 	bne.w	800308c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	785b      	ldrb	r3, [r3, #1]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8084 	beq.w	8002f0c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	4413      	add	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	011a      	lsls	r2, r3, #4
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	88db      	ldrh	r3, [r3, #6]
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	81fb      	strh	r3, [r7, #14]
 8002e46:	89fb      	ldrh	r3, [r7, #14]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01b      	beq.n	8002e88 <USB_ActivateEndpoint+0x17c>
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e66:	81bb      	strh	r3, [r7, #12]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	441a      	add	r2, r3
 8002e72:	89bb      	ldrh	r3, [r7, #12]
 8002e74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	78db      	ldrb	r3, [r3, #3]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d020      	beq.n	8002ed2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ea6:	813b      	strh	r3, [r7, #8]
 8002ea8:	893b      	ldrh	r3, [r7, #8]
 8002eaa:	f083 0320 	eor.w	r3, r3, #32
 8002eae:	813b      	strh	r3, [r7, #8]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	441a      	add	r2, r3
 8002eba:	893b      	ldrh	r3, [r7, #8]
 8002ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	8013      	strh	r3, [r2, #0]
 8002ed0:	e27f      	b.n	80033d2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee8:	817b      	strh	r3, [r7, #10]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	441a      	add	r2, r3
 8002ef4:	897b      	ldrh	r3, [r7, #10]
 8002ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	8013      	strh	r3, [r2, #0]
 8002f0a:	e262      	b.n	80033d2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1c:	4413      	add	r3, r2
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	011a      	lsls	r2, r3, #4
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	88db      	ldrh	r3, [r3, #6]
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	4413      	add	r3, r2
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	011a      	lsls	r2, r3, #4
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f62:	623b      	str	r3, [r7, #32]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d112      	bne.n	8002f92 <USB_ActivateEndpoint+0x286>
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	801a      	strh	r2, [r3, #0]
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	801a      	strh	r2, [r3, #0]
 8002f90:	e02f      	b.n	8002ff2 <USB_ActivateEndpoint+0x2e6>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b3e      	cmp	r3, #62	; 0x3e
 8002f98:	d813      	bhi.n	8002fc2 <USB_ActivateEndpoint+0x2b6>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <USB_ActivateEndpoint+0x2a8>
 8002fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	663b      	str	r3, [r7, #96]	; 0x60
 8002fb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	029b      	lsls	r3, r3, #10
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	801a      	strh	r2, [r3, #0]
 8002fc0:	e017      	b.n	8002ff2 <USB_ActivateEndpoint+0x2e6>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d102      	bne.n	8002fdc <USB_ActivateEndpoint+0x2d0>
 8002fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	663b      	str	r3, [r7, #96]	; 0x60
 8002fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	029b      	lsls	r3, r3, #10
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	83fb      	strh	r3, [r7, #30]
 8003000:	8bfb      	ldrh	r3, [r7, #30]
 8003002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d01b      	beq.n	8003042 <USB_ActivateEndpoint+0x336>
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003020:	83bb      	strh	r3, [r7, #28]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	441a      	add	r2, r3
 800302c:	8bbb      	ldrh	r3, [r7, #28]
 800302e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003036:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800303a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303e:	b29b      	uxth	r3, r3
 8003040:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003058:	837b      	strh	r3, [r7, #26]
 800305a:	8b7b      	ldrh	r3, [r7, #26]
 800305c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003060:	837b      	strh	r3, [r7, #26]
 8003062:	8b7b      	ldrh	r3, [r7, #26]
 8003064:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003068:	837b      	strh	r3, [r7, #26]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	441a      	add	r2, r3
 8003074:	8b7b      	ldrh	r3, [r7, #26]
 8003076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800307a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800307e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003086:	b29b      	uxth	r3, r3
 8003088:	8013      	strh	r3, [r2, #0]
 800308a:	e1a2      	b.n	80033d2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	441a      	add	r2, r3
 80030b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80030b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80030c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d8:	4413      	add	r3, r2
 80030da:	65bb      	str	r3, [r7, #88]	; 0x58
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	011a      	lsls	r2, r3, #4
 80030e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ea:	657b      	str	r3, [r7, #84]	; 0x54
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	891b      	ldrh	r3, [r3, #8]
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030fa:	801a      	strh	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310c:	4413      	add	r3, r2
 800310e:	653b      	str	r3, [r7, #80]	; 0x50
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	011a      	lsls	r2, r3, #4
 8003116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003118:	4413      	add	r3, r2
 800311a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	895b      	ldrh	r3, [r3, #10]
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	b29b      	uxth	r3, r3
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	785b      	ldrb	r3, [r3, #1]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f040 8091 	bne.w	800325c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003148:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800314a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d01b      	beq.n	800318a <USB_ActivateEndpoint+0x47e>
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003168:	877b      	strh	r3, [r7, #58]	; 0x3a
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	441a      	add	r2, r3
 8003174:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800317a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800317e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003186:	b29b      	uxth	r3, r3
 8003188:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	873b      	strh	r3, [r7, #56]	; 0x38
 8003198:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01b      	beq.n	80031da <USB_ActivateEndpoint+0x4ce>
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	441a      	add	r2, r3
 80031c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80031f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80031fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003200:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	441a      	add	r2, r3
 800320c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800320e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321e:	b29b      	uxth	r3, r3
 8003220:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003238:	867b      	strh	r3, [r7, #50]	; 0x32
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	441a      	add	r2, r3
 8003244:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800324a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800324e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003256:	b29b      	uxth	r3, r3
 8003258:	8013      	strh	r3, [r2, #0]
 800325a:	e0ba      	b.n	80033d2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800326c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01d      	beq.n	80032b4 <USB_ActivateEndpoint+0x5a8>
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b29b      	uxth	r3, r3
 8003286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	441a      	add	r2, r3
 800329c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80032c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01d      	beq.n	800330c <USB_ActivateEndpoint+0x600>
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	441a      	add	r2, r3
 80032f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80032f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003304:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003308:	b29b      	uxth	r3, r3
 800330a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	78db      	ldrb	r3, [r3, #3]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d024      	beq.n	800335e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	b29b      	uxth	r3, r3
 8003322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800332a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800332e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003332:	f083 0320 	eor.w	r3, r3, #32
 8003336:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	441a      	add	r2, r3
 8003344:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800334c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003358:	b29b      	uxth	r3, r3
 800335a:	8013      	strh	r3, [r2, #0]
 800335c:	e01d      	b.n	800339a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003374:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	441a      	add	r2, r3
 8003382:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800338a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800338e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003396:	b29b      	uxth	r3, r3
 8003398:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	441a      	add	r2, r3
 80033bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80033d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	376c      	adds	r7, #108	; 0x6c
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b08d      	sub	sp, #52	; 0x34
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	7b1b      	ldrb	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 808e 	bne.w	8003510 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d044      	beq.n	8003486 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	81bb      	strh	r3, [r7, #12]
 800340a:	89bb      	ldrh	r3, [r7, #12]
 800340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01b      	beq.n	800344c <USB_DeactivateEndpoint+0x6c>
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342a:	817b      	strh	r3, [r7, #10]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	441a      	add	r2, r3
 8003436:	897b      	ldrh	r3, [r7, #10]
 8003438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800343c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003444:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003448:	b29b      	uxth	r3, r3
 800344a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800345e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003462:	813b      	strh	r3, [r7, #8]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	441a      	add	r2, r3
 800346e:	893b      	ldrh	r3, [r7, #8]
 8003470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800347c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003480:	b29b      	uxth	r3, r3
 8003482:	8013      	strh	r3, [r2, #0]
 8003484:	e192      	b.n	80037ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	827b      	strh	r3, [r7, #18]
 8003494:	8a7b      	ldrh	r3, [r7, #18]
 8003496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01b      	beq.n	80034d6 <USB_DeactivateEndpoint+0xf6>
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b4:	823b      	strh	r3, [r7, #16]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	441a      	add	r2, r3
 80034c0:	8a3b      	ldrh	r3, [r7, #16]
 80034c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ec:	81fb      	strh	r3, [r7, #14]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	441a      	add	r2, r3
 80034f8:	89fb      	ldrh	r3, [r7, #14]
 80034fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350a:	b29b      	uxth	r3, r3
 800350c:	8013      	strh	r3, [r2, #0]
 800350e:	e14d      	b.n	80037ac <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	785b      	ldrb	r3, [r3, #1]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f040 80a5 	bne.w	8003664 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	843b      	strh	r3, [r7, #32]
 8003528:	8c3b      	ldrh	r3, [r7, #32]
 800352a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d01b      	beq.n	800356a <USB_DeactivateEndpoint+0x18a>
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003548:	83fb      	strh	r3, [r7, #30]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	441a      	add	r2, r3
 8003554:	8bfb      	ldrh	r3, [r7, #30]
 8003556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800355a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800355e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003566:	b29b      	uxth	r3, r3
 8003568:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	83bb      	strh	r3, [r7, #28]
 8003578:	8bbb      	ldrh	r3, [r7, #28]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01b      	beq.n	80035ba <USB_DeactivateEndpoint+0x1da>
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003598:	837b      	strh	r3, [r7, #26]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	441a      	add	r2, r3
 80035a4:	8b7b      	ldrh	r3, [r7, #26]
 80035a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d0:	833b      	strh	r3, [r7, #24]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	441a      	add	r2, r3
 80035dc:	8b3b      	ldrh	r3, [r7, #24]
 80035de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003608:	82fb      	strh	r3, [r7, #22]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	441a      	add	r2, r3
 8003614:	8afb      	ldrh	r3, [r7, #22]
 8003616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800361a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800361e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003626:	b29b      	uxth	r3, r3
 8003628:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003640:	82bb      	strh	r3, [r7, #20]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	441a      	add	r2, r3
 800364c:	8abb      	ldrh	r3, [r7, #20]
 800364e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800365a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365e:	b29b      	uxth	r3, r3
 8003660:	8013      	strh	r3, [r2, #0]
 8003662:	e0a3      	b.n	80037ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003672:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01b      	beq.n	80036b4 <USB_DeactivateEndpoint+0x2d4>
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	441a      	add	r2, r3
 800369e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80036c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01b      	beq.n	8003704 <USB_DeactivateEndpoint+0x324>
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	441a      	add	r2, r3
 80036ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003700:	b29b      	uxth	r3, r3
 8003702:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	441a      	add	r2, r3
 8003726:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800372c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003738:	b29b      	uxth	r3, r3
 800373a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003752:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	441a      	add	r2, r3
 800375e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003770:	b29b      	uxth	r3, r3
 8003772:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	847b      	strh	r3, [r7, #34]	; 0x22
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	441a      	add	r2, r3
 8003796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3734      	adds	r7, #52	; 0x34
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b0c4      	sub	sp, #272	; 0x110
 80037bc:	af00      	add	r7, sp, #0
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	6018      	str	r0, [r3, #0]
 80037c2:	463b      	mov	r3, r7
 80037c4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037c6:	463b      	mov	r3, r7
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	785b      	ldrb	r3, [r3, #1]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	f040 8557 	bne.w	8004280 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80037d2:	463b      	mov	r3, r7
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	463b      	mov	r3, r7
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d905      	bls.n	80037ee <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80037e2:	463b      	mov	r3, r7
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80037ec:	e004      	b.n	80037f8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80037ee:	463b      	mov	r3, r7
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80037f8:	463b      	mov	r3, r7
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	7b1b      	ldrb	r3, [r3, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d12c      	bne.n	800385c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003802:	463b      	mov	r3, r7
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6959      	ldr	r1, [r3, #20]
 8003808:	463b      	mov	r3, r7
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	88da      	ldrh	r2, [r3, #6]
 800380e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003812:	b29b      	uxth	r3, r3
 8003814:	1d38      	adds	r0, r7, #4
 8003816:	6800      	ldr	r0, [r0, #0]
 8003818:	f001 fa2c 	bl	8004c74 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	1d3b      	adds	r3, r7, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800382a:	b29b      	uxth	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	4413      	add	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	463b      	mov	r3, r7
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	011a      	lsls	r2, r3, #4
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	4413      	add	r3, r2
 8003840:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003844:	f107 0310 	add.w	r3, r7, #16
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800384e:	b29a      	uxth	r2, r3
 8003850:	f107 0310 	add.w	r3, r7, #16
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	801a      	strh	r2, [r3, #0]
 8003858:	f000 bcdd 	b.w	8004216 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800385c:	463b      	mov	r3, r7
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	78db      	ldrb	r3, [r3, #3]
 8003862:	2b02      	cmp	r3, #2
 8003864:	f040 8347 	bne.w	8003ef6 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003868:	463b      	mov	r3, r7
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a1a      	ldr	r2, [r3, #32]
 800386e:	463b      	mov	r3, r7
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	429a      	cmp	r2, r3
 8003876:	f240 82eb 	bls.w	8003e50 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800387a:	1d3b      	adds	r3, r7, #4
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	463b      	mov	r3, r7
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	b29b      	uxth	r3, r3
 800388c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003894:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003898:	1d3b      	adds	r3, r7, #4
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	463b      	mov	r3, r7
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	441a      	add	r2, r3
 80038a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80038aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80038b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80038be:	463b      	mov	r3, r7
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a1a      	ldr	r2, [r3, #32]
 80038c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c8:	1ad2      	subs	r2, r2, r3
 80038ca:	463b      	mov	r3, r7
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80038d0:	1d3b      	adds	r3, r7, #4
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	463b      	mov	r3, r7
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8159 	beq.w	8003b9e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
 80038f2:	463b      	mov	r3, r7
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	785b      	ldrb	r3, [r3, #1]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d164      	bne.n	80039c6 <USB_EPStartXfer+0x20e>
 80038fc:	1d3b      	adds	r3, r7, #4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003902:	1d3b      	adds	r3, r7, #4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800390a:	b29b      	uxth	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	4413      	add	r3, r2
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003914:	463b      	mov	r3, r7
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	011a      	lsls	r2, r3, #4
 800391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391e:	4413      	add	r3, r2
 8003920:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
 8003926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800392a:	2b00      	cmp	r3, #0
 800392c:	d112      	bne.n	8003954 <USB_EPStartXfer+0x19c>
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003938:	b29a      	uxth	r2, r3
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	801a      	strh	r2, [r3, #0]
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	b29b      	uxth	r3, r3
 8003944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800394c:	b29a      	uxth	r2, r3
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	801a      	strh	r2, [r3, #0]
 8003952:	e054      	b.n	80039fe <USB_EPStartXfer+0x246>
 8003954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003958:	2b3e      	cmp	r3, #62	; 0x3e
 800395a:	d817      	bhi.n	800398c <USB_EPStartXfer+0x1d4>
 800395c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003960:	085b      	lsrs	r3, r3, #1
 8003962:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <USB_EPStartXfer+0x1c4>
 8003972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003976:	3301      	adds	r3, #1
 8003978:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800397c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003980:	b29b      	uxth	r3, r3
 8003982:	029b      	lsls	r3, r3, #10
 8003984:	b29a      	uxth	r2, r3
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	e038      	b.n	80039fe <USB_EPStartXfer+0x246>
 800398c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d104      	bne.n	80039ac <USB_EPStartXfer+0x1f4>
 80039a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039a6:	3b01      	subs	r3, #1
 80039a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	029b      	lsls	r3, r3, #10
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039be:	b29a      	uxth	r2, r3
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	801a      	strh	r2, [r3, #0]
 80039c4:	e01b      	b.n	80039fe <USB_EPStartXfer+0x246>
 80039c6:	463b      	mov	r3, r7
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	785b      	ldrb	r3, [r3, #1]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d116      	bne.n	80039fe <USB_EPStartXfer+0x246>
 80039d0:	1d3b      	adds	r3, r7, #4
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d8:	b29b      	uxth	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039de:	4413      	add	r3, r2
 80039e0:	637b      	str	r3, [r7, #52]	; 0x34
 80039e2:	463b      	mov	r3, r7
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	011a      	lsls	r2, r3, #4
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	4413      	add	r3, r2
 80039ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039f2:	633b      	str	r3, [r7, #48]	; 0x30
 80039f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80039fe:	463b      	mov	r3, r7
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	895b      	ldrh	r3, [r3, #10]
 8003a04:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a08:	463b      	mov	r3, r7
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6959      	ldr	r1, [r3, #20]
 8003a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003a18:	1d38      	adds	r0, r7, #4
 8003a1a:	6800      	ldr	r0, [r0, #0]
 8003a1c:	f001 f92a 	bl	8004c74 <USB_WritePMA>
            ep->xfer_buff += len;
 8003a20:	463b      	mov	r3, r7
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a2a:	441a      	add	r2, r3
 8003a2c:	463b      	mov	r3, r7
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003a32:	463b      	mov	r3, r7
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a1a      	ldr	r2, [r3, #32]
 8003a38:	463b      	mov	r3, r7
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d909      	bls.n	8003a56 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003a42:	463b      	mov	r3, r7
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4c:	1ad2      	subs	r2, r2, r3
 8003a4e:	463b      	mov	r3, r7
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	621a      	str	r2, [r3, #32]
 8003a54:	e008      	b.n	8003a68 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003a56:	463b      	mov	r3, r7
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003a60:	463b      	mov	r3, r7
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2200      	movs	r2, #0
 8003a66:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a68:	463b      	mov	r3, r7
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	785b      	ldrb	r3, [r3, #1]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d164      	bne.n	8003b3c <USB_EPStartXfer+0x384>
 8003a72:	1d3b      	adds	r3, r7, #4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	61fb      	str	r3, [r7, #28]
 8003a78:	1d3b      	adds	r3, r7, #4
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	4413      	add	r3, r2
 8003a88:	61fb      	str	r3, [r7, #28]
 8003a8a:	463b      	mov	r3, r7
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	011a      	lsls	r2, r3, #4
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	4413      	add	r3, r2
 8003a96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d112      	bne.n	8003aca <USB_EPStartXfer+0x312>
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	801a      	strh	r2, [r3, #0]
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	801a      	strh	r2, [r3, #0]
 8003ac8:	e057      	b.n	8003b7a <USB_EPStartXfer+0x3c2>
 8003aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ace:	2b3e      	cmp	r3, #62	; 0x3e
 8003ad0:	d817      	bhi.n	8003b02 <USB_EPStartXfer+0x34a>
 8003ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <USB_EPStartXfer+0x33a>
 8003ae8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003aec:	3301      	adds	r3, #1
 8003aee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003af2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	029b      	lsls	r3, r3, #10
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	801a      	strh	r2, [r3, #0]
 8003b00:	e03b      	b.n	8003b7a <USB_EPStartXfer+0x3c2>
 8003b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d104      	bne.n	8003b22 <USB_EPStartXfer+0x36a>
 8003b18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	029b      	lsls	r3, r3, #10
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	801a      	strh	r2, [r3, #0]
 8003b3a:	e01e      	b.n	8003b7a <USB_EPStartXfer+0x3c2>
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	785b      	ldrb	r3, [r3, #1]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d119      	bne.n	8003b7a <USB_EPStartXfer+0x3c2>
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4c:	1d3b      	adds	r3, r7, #4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	4413      	add	r3, r2
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	463b      	mov	r3, r7
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	011a      	lsls	r2, r3, #4
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	4413      	add	r3, r2
 8003b6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b6e:	623b      	str	r3, [r7, #32]
 8003b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b7a:	463b      	mov	r3, r7
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	891b      	ldrh	r3, [r3, #8]
 8003b80:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b84:	463b      	mov	r3, r7
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6959      	ldr	r1, [r3, #20]
 8003b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003b94:	1d38      	adds	r0, r7, #4
 8003b96:	6800      	ldr	r0, [r0, #0]
 8003b98:	f001 f86c 	bl	8004c74 <USB_WritePMA>
 8003b9c:	e33b      	b.n	8004216 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b9e:	463b      	mov	r3, r7
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d164      	bne.n	8003c72 <USB_EPStartXfer+0x4ba>
 8003ba8:	1d3b      	adds	r3, r7, #4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bbc:	4413      	add	r3, r2
 8003bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc0:	463b      	mov	r3, r7
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	011a      	lsls	r2, r3, #4
 8003bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bca:	4413      	add	r3, r2
 8003bcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d112      	bne.n	8003c00 <USB_EPStartXfer+0x448>
 8003bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be8:	801a      	strh	r2, [r3, #0]
 8003bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfc:	801a      	strh	r2, [r3, #0]
 8003bfe:	e057      	b.n	8003cb0 <USB_EPStartXfer+0x4f8>
 8003c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c04:	2b3e      	cmp	r3, #62	; 0x3e
 8003c06:	d817      	bhi.n	8003c38 <USB_EPStartXfer+0x480>
 8003c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <USB_EPStartXfer+0x470>
 8003c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c22:	3301      	adds	r3, #1
 8003c24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	029b      	lsls	r3, r3, #10
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	e03b      	b.n	8003cb0 <USB_EPStartXfer+0x4f8>
 8003c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d104      	bne.n	8003c58 <USB_EPStartXfer+0x4a0>
 8003c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c52:	3b01      	subs	r3, #1
 8003c54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	029b      	lsls	r3, r3, #10
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	e01e      	b.n	8003cb0 <USB_EPStartXfer+0x4f8>
 8003c72:	463b      	mov	r3, r7
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	785b      	ldrb	r3, [r3, #1]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d119      	bne.n	8003cb0 <USB_EPStartXfer+0x4f8>
 8003c7c:	1d3b      	adds	r3, r7, #4
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	657b      	str	r3, [r7, #84]	; 0x54
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c90:	4413      	add	r3, r2
 8003c92:	657b      	str	r3, [r7, #84]	; 0x54
 8003c94:	463b      	mov	r3, r7
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	011a      	lsls	r2, r3, #4
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003cb0:	463b      	mov	r3, r7
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	891b      	ldrh	r3, [r3, #8]
 8003cb6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cba:	463b      	mov	r3, r7
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6959      	ldr	r1, [r3, #20]
 8003cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003cca:	1d38      	adds	r0, r7, #4
 8003ccc:	6800      	ldr	r0, [r0, #0]
 8003cce:	f000 ffd1 	bl	8004c74 <USB_WritePMA>
            ep->xfer_buff += len;
 8003cd2:	463b      	mov	r3, r7
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cdc:	441a      	add	r2, r3
 8003cde:	463b      	mov	r3, r7
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6a1a      	ldr	r2, [r3, #32]
 8003cea:	463b      	mov	r3, r7
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d909      	bls.n	8003d08 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6a1a      	ldr	r2, [r3, #32]
 8003cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfe:	1ad2      	subs	r2, r2, r3
 8003d00:	463b      	mov	r3, r7
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	621a      	str	r2, [r3, #32]
 8003d06:	e008      	b.n	8003d1a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003d08:	463b      	mov	r3, r7
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003d12:	463b      	mov	r3, r7
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d20:	463b      	mov	r3, r7
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	785b      	ldrb	r3, [r3, #1]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d164      	bne.n	8003df4 <USB_EPStartXfer+0x63c>
 8003d2a:	1d3b      	adds	r3, r7, #4
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3e:	4413      	add	r3, r2
 8003d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d42:	463b      	mov	r3, r7
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	011a      	lsls	r2, r3, #4
 8003d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d112      	bne.n	8003d82 <USB_EPStartXfer+0x5ca>
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	801a      	strh	r2, [r3, #0]
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	801a      	strh	r2, [r3, #0]
 8003d80:	e054      	b.n	8003e2c <USB_EPStartXfer+0x674>
 8003d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d86:	2b3e      	cmp	r3, #62	; 0x3e
 8003d88:	d817      	bhi.n	8003dba <USB_EPStartXfer+0x602>
 8003d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d004      	beq.n	8003daa <USB_EPStartXfer+0x5f2>
 8003da0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003da4:	3301      	adds	r3, #1
 8003da6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	029b      	lsls	r3, r3, #10
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	801a      	strh	r2, [r3, #0]
 8003db8:	e038      	b.n	8003e2c <USB_EPStartXfer+0x674>
 8003dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d104      	bne.n	8003dda <USB_EPStartXfer+0x622>
 8003dd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	029b      	lsls	r3, r3, #10
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	801a      	strh	r2, [r3, #0]
 8003df2:	e01b      	b.n	8003e2c <USB_EPStartXfer+0x674>
 8003df4:	463b      	mov	r3, r7
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	785b      	ldrb	r3, [r3, #1]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d116      	bne.n	8003e2c <USB_EPStartXfer+0x674>
 8003dfe:	1d3b      	adds	r3, r7, #4
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0c:	4413      	add	r3, r2
 8003e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e10:	463b      	mov	r3, r7
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	011a      	lsls	r2, r3, #4
 8003e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e20:	643b      	str	r3, [r7, #64]	; 0x40
 8003e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e2a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003e2c:	463b      	mov	r3, r7
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	895b      	ldrh	r3, [r3, #10]
 8003e32:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e36:	463b      	mov	r3, r7
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6959      	ldr	r1, [r3, #20]
 8003e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e46:	1d38      	adds	r0, r7, #4
 8003e48:	6800      	ldr	r0, [r0, #0]
 8003e4a:	f000 ff13 	bl	8004c74 <USB_WritePMA>
 8003e4e:	e1e2      	b.n	8004216 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003e50:	463b      	mov	r3, r7
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003e5a:	1d3b      	adds	r3, r7, #4
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	463b      	mov	r3, r7
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e74:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003e78:	1d3b      	adds	r3, r7, #4
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	463b      	mov	r3, r7
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	441a      	add	r2, r3
 8003e86:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003e9e:	1d3b      	adds	r3, r7, #4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ea4:	1d3b      	adds	r3, r7, #4
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eb2:	4413      	add	r3, r2
 8003eb4:	663b      	str	r3, [r7, #96]	; 0x60
 8003eb6:	463b      	mov	r3, r7
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	011a      	lsls	r2, r3, #4
 8003ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ed0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	891b      	ldrh	r3, [r3, #8]
 8003ed8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003edc:	463b      	mov	r3, r7
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6959      	ldr	r1, [r3, #20]
 8003ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003eec:	1d38      	adds	r0, r7, #4
 8003eee:	6800      	ldr	r0, [r0, #0]
 8003ef0:	f000 fec0 	bl	8004c74 <USB_WritePMA>
 8003ef4:	e18f      	b.n	8004216 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003ef6:	1d3b      	adds	r3, r7, #4
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	463b      	mov	r3, r7
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 808f 	beq.w	8004030 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f18:	463b      	mov	r3, r7
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	785b      	ldrb	r3, [r3, #1]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d164      	bne.n	8003fec <USB_EPStartXfer+0x834>
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	673b      	str	r3, [r7, #112]	; 0x70
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f36:	4413      	add	r3, r2
 8003f38:	673b      	str	r3, [r7, #112]	; 0x70
 8003f3a:	463b      	mov	r3, r7
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	011a      	lsls	r2, r3, #4
 8003f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f44:	4413      	add	r3, r2
 8003f46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d112      	bne.n	8003f7a <USB_EPStartXfer+0x7c2>
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f62:	801a      	strh	r2, [r3, #0]
 8003f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f76:	801a      	strh	r2, [r3, #0]
 8003f78:	e054      	b.n	8004024 <USB_EPStartXfer+0x86c>
 8003f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f80:	d817      	bhi.n	8003fb2 <USB_EPStartXfer+0x7fa>
 8003f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <USB_EPStartXfer+0x7ea>
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	029b      	lsls	r3, r3, #10
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	e038      	b.n	8004024 <USB_EPStartXfer+0x86c>
 8003fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d104      	bne.n	8003fd2 <USB_EPStartXfer+0x81a>
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	029b      	lsls	r3, r3, #10
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe8:	801a      	strh	r2, [r3, #0]
 8003fea:	e01b      	b.n	8004024 <USB_EPStartXfer+0x86c>
 8003fec:	463b      	mov	r3, r7
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	785b      	ldrb	r3, [r3, #1]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d116      	bne.n	8004024 <USB_EPStartXfer+0x86c>
 8003ff6:	1d3b      	adds	r3, r7, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004004:	4413      	add	r3, r2
 8004006:	67bb      	str	r3, [r7, #120]	; 0x78
 8004008:	463b      	mov	r3, r7
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	011a      	lsls	r2, r3, #4
 8004010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004012:	4413      	add	r3, r2
 8004014:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004018:	677b      	str	r3, [r7, #116]	; 0x74
 800401a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401e:	b29a      	uxth	r2, r3
 8004020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004022:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004024:	463b      	mov	r3, r7
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	895b      	ldrh	r3, [r3, #10]
 800402a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800402e:	e097      	b.n	8004160 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004030:	463b      	mov	r3, r7
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	785b      	ldrb	r3, [r3, #1]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d168      	bne.n	800410c <USB_EPStartXfer+0x954>
 800403a:	1d3b      	adds	r3, r7, #4
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004042:	1d3b      	adds	r3, r7, #4
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800404a:	b29b      	uxth	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004052:	4413      	add	r3, r2
 8004054:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004058:	463b      	mov	r3, r7
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	011a      	lsls	r2, r3, #4
 8004060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004064:	4413      	add	r3, r2
 8004066:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800406a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800406c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d112      	bne.n	800409a <USB_EPStartXfer+0x8e2>
 8004074:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29b      	uxth	r3, r3
 800407a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800407e:	b29a      	uxth	r2, r3
 8004080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004082:	801a      	strh	r2, [r3, #0]
 8004084:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	b29b      	uxth	r3, r3
 800408a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800408e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004092:	b29a      	uxth	r2, r3
 8004094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004096:	801a      	strh	r2, [r3, #0]
 8004098:	e05d      	b.n	8004156 <USB_EPStartXfer+0x99e>
 800409a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800409e:	2b3e      	cmp	r3, #62	; 0x3e
 80040a0:	d817      	bhi.n	80040d2 <USB_EPStartXfer+0x91a>
 80040a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a6:	085b      	lsrs	r3, r3, #1
 80040a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d004      	beq.n	80040c2 <USB_EPStartXfer+0x90a>
 80040b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040bc:	3301      	adds	r3, #1
 80040be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	029b      	lsls	r3, r3, #10
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ce:	801a      	strh	r2, [r3, #0]
 80040d0:	e041      	b.n	8004156 <USB_EPStartXfer+0x99e>
 80040d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <USB_EPStartXfer+0x93a>
 80040e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040ec:	3b01      	subs	r3, #1
 80040ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	029b      	lsls	r3, r3, #10
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004104:	b29a      	uxth	r2, r3
 8004106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004108:	801a      	strh	r2, [r3, #0]
 800410a:	e024      	b.n	8004156 <USB_EPStartXfer+0x99e>
 800410c:	463b      	mov	r3, r7
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	785b      	ldrb	r3, [r3, #1]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d11f      	bne.n	8004156 <USB_EPStartXfer+0x99e>
 8004116:	1d3b      	adds	r3, r7, #4
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004126:	b29b      	uxth	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800412e:	4413      	add	r3, r2
 8004130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004134:	463b      	mov	r3, r7
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	011a      	lsls	r2, r3, #4
 800413c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004140:	4413      	add	r3, r2
 8004142:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004146:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800414a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800414e:	b29a      	uxth	r2, r3
 8004150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004154:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004156:	463b      	mov	r3, r7
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	891b      	ldrh	r3, [r3, #8]
 800415c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004160:	463b      	mov	r3, r7
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6959      	ldr	r1, [r3, #20]
 8004166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800416a:	b29b      	uxth	r3, r3
 800416c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004170:	1d38      	adds	r0, r7, #4
 8004172:	6800      	ldr	r0, [r0, #0]
 8004174:	f000 fd7e 	bl	8004c74 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004178:	463b      	mov	r3, r7
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d122      	bne.n	80041c8 <USB_EPStartXfer+0xa10>
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	463b      	mov	r3, r7
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	463b      	mov	r3, r7
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	441a      	add	r2, r3
 80041ae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80041b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	8013      	strh	r3, [r2, #0]
 80041c6:	e026      	b.n	8004216 <USB_EPStartXfer+0xa5e>
 80041c8:	463b      	mov	r3, r7
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	785b      	ldrb	r3, [r3, #1]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d121      	bne.n	8004216 <USB_EPStartXfer+0xa5e>
 80041d2:	1d3b      	adds	r3, r7, #4
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	463b      	mov	r3, r7
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ec:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80041f0:	1d3b      	adds	r3, r7, #4
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	463b      	mov	r3, r7
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800420e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004212:	b29b      	uxth	r3, r3
 8004214:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	463b      	mov	r3, r7
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	f107 020e 	add.w	r2, r7, #14
 800422c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004234:	8013      	strh	r3, [r2, #0]
 8004236:	f107 030e 	add.w	r3, r7, #14
 800423a:	f107 020e 	add.w	r2, r7, #14
 800423e:	8812      	ldrh	r2, [r2, #0]
 8004240:	f082 0210 	eor.w	r2, r2, #16
 8004244:	801a      	strh	r2, [r3, #0]
 8004246:	f107 030e 	add.w	r3, r7, #14
 800424a:	f107 020e 	add.w	r2, r7, #14
 800424e:	8812      	ldrh	r2, [r2, #0]
 8004250:	f082 0220 	eor.w	r2, r2, #32
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	1d3b      	adds	r3, r7, #4
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	463b      	mov	r3, r7
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	441a      	add	r2, r3
 8004264:	f107 030e 	add.w	r3, r7, #14
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800426e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427a:	b29b      	uxth	r3, r3
 800427c:	8013      	strh	r3, [r2, #0]
 800427e:	e3b5      	b.n	80049ec <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004280:	463b      	mov	r3, r7
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	7b1b      	ldrb	r3, [r3, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 8090 	bne.w	80043ac <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800428c:	463b      	mov	r3, r7
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	463b      	mov	r3, r7
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	429a      	cmp	r2, r3
 800429a:	d90e      	bls.n	80042ba <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800429c:	463b      	mov	r3, r7
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80042a6:	463b      	mov	r3, r7
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699a      	ldr	r2, [r3, #24]
 80042ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b0:	1ad2      	subs	r2, r2, r3
 80042b2:	463b      	mov	r3, r7
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	619a      	str	r2, [r3, #24]
 80042b8:	e008      	b.n	80042cc <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80042ba:	463b      	mov	r3, r7
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80042c4:	463b      	mov	r3, r7
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2200      	movs	r2, #0
 80042ca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80042cc:	1d3b      	adds	r3, r7, #4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042dc:	b29b      	uxth	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042e4:	4413      	add	r3, r2
 80042e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042ea:	463b      	mov	r3, r7
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	011a      	lsls	r2, r3, #4
 80042f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042f6:	4413      	add	r3, r2
 80042f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004304:	2b00      	cmp	r3, #0
 8004306:	d116      	bne.n	8004336 <USB_EPStartXfer+0xb7e>
 8004308:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004314:	b29a      	uxth	r2, r3
 8004316:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800431a:	801a      	strh	r2, [r3, #0]
 800431c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800432c:	b29a      	uxth	r2, r3
 800432e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004332:	801a      	strh	r2, [r3, #0]
 8004334:	e32c      	b.n	8004990 <USB_EPStartXfer+0x11d8>
 8004336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800433a:	2b3e      	cmp	r3, #62	; 0x3e
 800433c:	d818      	bhi.n	8004370 <USB_EPStartXfer+0xbb8>
 800433e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004342:	085b      	lsrs	r3, r3, #1
 8004344:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <USB_EPStartXfer+0xba6>
 8004354:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004358:	3301      	adds	r3, #1
 800435a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800435e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004362:	b29b      	uxth	r3, r3
 8004364:	029b      	lsls	r3, r3, #10
 8004366:	b29a      	uxth	r2, r3
 8004368:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800436c:	801a      	strh	r2, [r3, #0]
 800436e:	e30f      	b.n	8004990 <USB_EPStartXfer+0x11d8>
 8004370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800437a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	2b00      	cmp	r3, #0
 8004384:	d104      	bne.n	8004390 <USB_EPStartXfer+0xbd8>
 8004386:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800438a:	3b01      	subs	r3, #1
 800438c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004390:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004394:	b29b      	uxth	r3, r3
 8004396:	029b      	lsls	r3, r3, #10
 8004398:	b29b      	uxth	r3, r3
 800439a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043a8:	801a      	strh	r2, [r3, #0]
 80043aa:	e2f1      	b.n	8004990 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80043ac:	463b      	mov	r3, r7
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	78db      	ldrb	r3, [r3, #3]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	f040 818f 	bne.w	80046d6 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80043b8:	463b      	mov	r3, r7
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d175      	bne.n	80044ae <USB_EPStartXfer+0xcf6>
 80043c2:	1d3b      	adds	r3, r7, #4
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043ca:	1d3b      	adds	r3, r7, #4
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043da:	4413      	add	r3, r2
 80043dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043e0:	463b      	mov	r3, r7
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	011a      	lsls	r2, r3, #4
 80043e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043ec:	4413      	add	r3, r2
 80043ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043f6:	463b      	mov	r3, r7
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d116      	bne.n	800442e <USB_EPStartXfer+0xc76>
 8004400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29b      	uxth	r3, r3
 8004408:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800440c:	b29a      	uxth	r2, r3
 800440e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004412:	801a      	strh	r2, [r3, #0]
 8004414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004424:	b29a      	uxth	r2, r3
 8004426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800442a:	801a      	strh	r2, [r3, #0]
 800442c:	e065      	b.n	80044fa <USB_EPStartXfer+0xd42>
 800442e:	463b      	mov	r3, r7
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b3e      	cmp	r3, #62	; 0x3e
 8004436:	d81a      	bhi.n	800446e <USB_EPStartXfer+0xcb6>
 8004438:	463b      	mov	r3, r7
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004444:	463b      	mov	r3, r7
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <USB_EPStartXfer+0xca4>
 8004452:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004456:	3301      	adds	r3, #1
 8004458:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800445c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004460:	b29b      	uxth	r3, r3
 8004462:	029b      	lsls	r3, r3, #10
 8004464:	b29a      	uxth	r2, r3
 8004466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800446a:	801a      	strh	r2, [r3, #0]
 800446c:	e045      	b.n	80044fa <USB_EPStartXfer+0xd42>
 800446e:	463b      	mov	r3, r7
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800447a:	463b      	mov	r3, r7
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	2b00      	cmp	r3, #0
 8004486:	d104      	bne.n	8004492 <USB_EPStartXfer+0xcda>
 8004488:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800448c:	3b01      	subs	r3, #1
 800448e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004492:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004496:	b29b      	uxth	r3, r3
 8004498:	029b      	lsls	r3, r3, #10
 800449a:	b29b      	uxth	r3, r3
 800449c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044aa:	801a      	strh	r2, [r3, #0]
 80044ac:	e025      	b.n	80044fa <USB_EPStartXfer+0xd42>
 80044ae:	463b      	mov	r3, r7
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	785b      	ldrb	r3, [r3, #1]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d120      	bne.n	80044fa <USB_EPStartXfer+0xd42>
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044c0:	1d3b      	adds	r3, r7, #4
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044d0:	4413      	add	r3, r2
 80044d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044d6:	463b      	mov	r3, r7
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	011a      	lsls	r2, r3, #4
 80044de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044e2:	4413      	add	r3, r2
 80044e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044ec:	463b      	mov	r3, r7
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044f8:	801a      	strh	r2, [r3, #0]
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004502:	463b      	mov	r3, r7
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d175      	bne.n	80045f8 <USB_EPStartXfer+0xe40>
 800450c:	1d3b      	adds	r3, r7, #4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004514:	1d3b      	adds	r3, r7, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451c:	b29b      	uxth	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004524:	4413      	add	r3, r2
 8004526:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800452a:	463b      	mov	r3, r7
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	011a      	lsls	r2, r3, #4
 8004532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004536:	4413      	add	r3, r2
 8004538:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800453c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004540:	463b      	mov	r3, r7
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d116      	bne.n	8004578 <USB_EPStartXfer+0xdc0>
 800454a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b29b      	uxth	r3, r3
 8004552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004556:	b29a      	uxth	r2, r3
 8004558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800455c:	801a      	strh	r2, [r3, #0]
 800455e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800456a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800456e:	b29a      	uxth	r2, r3
 8004570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	e061      	b.n	800463c <USB_EPStartXfer+0xe84>
 8004578:	463b      	mov	r3, r7
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b3e      	cmp	r3, #62	; 0x3e
 8004580:	d81a      	bhi.n	80045b8 <USB_EPStartXfer+0xe00>
 8004582:	463b      	mov	r3, r7
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800458e:	463b      	mov	r3, r7
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d004      	beq.n	80045a6 <USB_EPStartXfer+0xdee>
 800459c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a0:	3301      	adds	r3, #1
 80045a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	029b      	lsls	r3, r3, #10
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045b4:	801a      	strh	r2, [r3, #0]
 80045b6:	e041      	b.n	800463c <USB_EPStartXfer+0xe84>
 80045b8:	463b      	mov	r3, r7
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045c4:	463b      	mov	r3, r7
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d104      	bne.n	80045dc <USB_EPStartXfer+0xe24>
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d6:	3b01      	subs	r3, #1
 80045d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	029b      	lsls	r3, r3, #10
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	e021      	b.n	800463c <USB_EPStartXfer+0xe84>
 80045f8:	463b      	mov	r3, r7
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d11c      	bne.n	800463c <USB_EPStartXfer+0xe84>
 8004602:	1d3b      	adds	r3, r7, #4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800460a:	b29b      	uxth	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004612:	4413      	add	r3, r2
 8004614:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004618:	463b      	mov	r3, r7
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	011a      	lsls	r2, r3, #4
 8004620:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004624:	4413      	add	r3, r2
 8004626:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800462a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800462e:	463b      	mov	r3, r7
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	b29a      	uxth	r2, r3
 8004636:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800463a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800463c:	463b      	mov	r3, r7
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 81a4 	beq.w	8004990 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	463b      	mov	r3, r7
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800465c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <USB_EPStartXfer+0xebc>
 8004668:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800466c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10d      	bne.n	8004690 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004674:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800467c:	2b00      	cmp	r3, #0
 800467e:	f040 8187 	bne.w	8004990 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004682:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	f040 8180 	bne.w	8004990 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	463b      	mov	r3, r7
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80046ae:	1d3b      	adds	r3, r7, #4
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	463b      	mov	r3, r7
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	441a      	add	r2, r3
 80046bc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80046c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	8013      	strh	r3, [r2, #0]
 80046d4:	e15c      	b.n	8004990 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80046d6:	463b      	mov	r3, r7
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	78db      	ldrb	r3, [r3, #3]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	f040 8155 	bne.w	800498c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80046e2:	463b      	mov	r3, r7
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	463b      	mov	r3, r7
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d90e      	bls.n	8004710 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80046f2:	463b      	mov	r3, r7
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80046fc:	463b      	mov	r3, r7
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	463b      	mov	r3, r7
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	619a      	str	r2, [r3, #24]
 800470e:	e008      	b.n	8004722 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004710:	463b      	mov	r3, r7
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800471a:	463b      	mov	r3, r7
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2200      	movs	r2, #0
 8004720:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004722:	463b      	mov	r3, r7
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d16f      	bne.n	800480c <USB_EPStartXfer+0x1054>
 800472c:	1d3b      	adds	r3, r7, #4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004734:	1d3b      	adds	r3, r7, #4
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800473c:	b29b      	uxth	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004744:	4413      	add	r3, r2
 8004746:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800474a:	463b      	mov	r3, r7
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	011a      	lsls	r2, r3, #4
 8004752:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004756:	4413      	add	r3, r2
 8004758:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800475c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d116      	bne.n	8004796 <USB_EPStartXfer+0xfde>
 8004768:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004774:	b29a      	uxth	r2, r3
 8004776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800477a:	801a      	strh	r2, [r3, #0]
 800477c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800478c:	b29a      	uxth	r2, r3
 800478e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004792:	801a      	strh	r2, [r3, #0]
 8004794:	e05f      	b.n	8004856 <USB_EPStartXfer+0x109e>
 8004796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800479a:	2b3e      	cmp	r3, #62	; 0x3e
 800479c:	d818      	bhi.n	80047d0 <USB_EPStartXfer+0x1018>
 800479e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <USB_EPStartXfer+0x1006>
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b8:	3301      	adds	r3, #1
 80047ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	029b      	lsls	r3, r3, #10
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047cc:	801a      	strh	r2, [r3, #0]
 80047ce:	e042      	b.n	8004856 <USB_EPStartXfer+0x109e>
 80047d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d104      	bne.n	80047f0 <USB_EPStartXfer+0x1038>
 80047e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ea:	3b01      	subs	r3, #1
 80047ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	029b      	lsls	r3, r3, #10
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004802:	b29a      	uxth	r2, r3
 8004804:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004808:	801a      	strh	r2, [r3, #0]
 800480a:	e024      	b.n	8004856 <USB_EPStartXfer+0x109e>
 800480c:	463b      	mov	r3, r7
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	785b      	ldrb	r3, [r3, #1]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d11f      	bne.n	8004856 <USB_EPStartXfer+0x109e>
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800481e:	1d3b      	adds	r3, r7, #4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004826:	b29b      	uxth	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800482e:	4413      	add	r3, r2
 8004830:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004834:	463b      	mov	r3, r7
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	011a      	lsls	r2, r3, #4
 800483c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004840:	4413      	add	r3, r2
 8004842:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800484a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484e:	b29a      	uxth	r2, r3
 8004850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004854:	801a      	strh	r2, [r3, #0]
 8004856:	1d3b      	adds	r3, r7, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800485e:	463b      	mov	r3, r7
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	785b      	ldrb	r3, [r3, #1]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d16f      	bne.n	8004948 <USB_EPStartXfer+0x1190>
 8004868:	1d3b      	adds	r3, r7, #4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004870:	1d3b      	adds	r3, r7, #4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004878:	b29b      	uxth	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004880:	4413      	add	r3, r2
 8004882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004886:	463b      	mov	r3, r7
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	011a      	lsls	r2, r3, #4
 800488e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004892:	4413      	add	r3, r2
 8004894:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004898:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800489c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d116      	bne.n	80048d2 <USB_EPStartXfer+0x111a>
 80048a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048b6:	801a      	strh	r2, [r3, #0]
 80048b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048ce:	801a      	strh	r2, [r3, #0]
 80048d0:	e05e      	b.n	8004990 <USB_EPStartXfer+0x11d8>
 80048d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048d6:	2b3e      	cmp	r3, #62	; 0x3e
 80048d8:	d818      	bhi.n	800490c <USB_EPStartXfer+0x1154>
 80048da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <USB_EPStartXfer+0x1142>
 80048f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048f4:	3301      	adds	r3, #1
 80048f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048fe:	b29b      	uxth	r3, r3
 8004900:	029b      	lsls	r3, r3, #10
 8004902:	b29a      	uxth	r2, r3
 8004904:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004908:	801a      	strh	r2, [r3, #0]
 800490a:	e041      	b.n	8004990 <USB_EPStartXfer+0x11d8>
 800490c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	2b00      	cmp	r3, #0
 8004920:	d104      	bne.n	800492c <USB_EPStartXfer+0x1174>
 8004922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004926:	3b01      	subs	r3, #1
 8004928:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800492c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004930:	b29b      	uxth	r3, r3
 8004932:	029b      	lsls	r3, r3, #10
 8004934:	b29b      	uxth	r3, r3
 8004936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493e:	b29a      	uxth	r2, r3
 8004940:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004944:	801a      	strh	r2, [r3, #0]
 8004946:	e023      	b.n	8004990 <USB_EPStartXfer+0x11d8>
 8004948:	463b      	mov	r3, r7
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	785b      	ldrb	r3, [r3, #1]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d11e      	bne.n	8004990 <USB_EPStartXfer+0x11d8>
 8004952:	1d3b      	adds	r3, r7, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800495a:	b29b      	uxth	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004962:	4413      	add	r3, r2
 8004964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004968:	463b      	mov	r3, r7
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	011a      	lsls	r2, r3, #4
 8004970:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004974:	4413      	add	r3, r2
 8004976:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800497a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800497e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004982:	b29a      	uxth	r2, r3
 8004984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004988:	801a      	strh	r2, [r3, #0]
 800498a:	e001      	b.n	8004990 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e02e      	b.n	80049ee <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004990:	1d3b      	adds	r3, r7, #4
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	463b      	mov	r3, r7
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049aa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80049ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049b6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80049ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049c2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80049c6:	1d3b      	adds	r3, r7, #4
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	463b      	mov	r3, r7
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	441a      	add	r2, r3
 80049d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	785b      	ldrb	r3, [r3, #1]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d020      	beq.n	8004a4c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a20:	81bb      	strh	r3, [r7, #12]
 8004a22:	89bb      	ldrh	r3, [r7, #12]
 8004a24:	f083 0310 	eor.w	r3, r3, #16
 8004a28:	81bb      	strh	r3, [r7, #12]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	441a      	add	r2, r3
 8004a34:	89bb      	ldrh	r3, [r7, #12]
 8004a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	8013      	strh	r3, [r2, #0]
 8004a4a:	e01f      	b.n	8004a8c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	81fb      	strh	r3, [r7, #14]
 8004a64:	89fb      	ldrh	r3, [r7, #14]
 8004a66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a6a:	81fb      	strh	r3, [r7, #14]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	441a      	add	r2, r3
 8004a76:	89fb      	ldrh	r3, [r7, #14]
 8004a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	7b1b      	ldrb	r3, [r3, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f040 809d 	bne.w	8004be6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d04c      	beq.n	8004b4e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	823b      	strh	r3, [r7, #16]
 8004ac2:	8a3b      	ldrh	r3, [r7, #16]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01b      	beq.n	8004b04 <USB_EPClearStall+0x6c>
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	81fb      	strh	r3, [r7, #14]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	89fb      	ldrh	r3, [r7, #14]
 8004af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	78db      	ldrb	r3, [r3, #3]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d06c      	beq.n	8004be6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b22:	81bb      	strh	r3, [r7, #12]
 8004b24:	89bb      	ldrh	r3, [r7, #12]
 8004b26:	f083 0320 	eor.w	r3, r3, #32
 8004b2a:	81bb      	strh	r3, [r7, #12]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	441a      	add	r2, r3
 8004b36:	89bb      	ldrh	r3, [r7, #12]
 8004b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	8013      	strh	r3, [r2, #0]
 8004b4c:	e04b      	b.n	8004be6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	82fb      	strh	r3, [r7, #22]
 8004b5c:	8afb      	ldrh	r3, [r7, #22]
 8004b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01b      	beq.n	8004b9e <USB_EPClearStall+0x106>
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7c:	82bb      	strh	r3, [r7, #20]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	441a      	add	r2, r3
 8004b88:	8abb      	ldrh	r3, [r7, #20]
 8004b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb4:	827b      	strh	r3, [r7, #18]
 8004bb6:	8a7b      	ldrh	r3, [r7, #18]
 8004bb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bbc:	827b      	strh	r3, [r7, #18]
 8004bbe:	8a7b      	ldrh	r3, [r7, #18]
 8004bc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bc4:	827b      	strh	r3, [r7, #18]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	441a      	add	r2, r3
 8004bd0:	8a7b      	ldrh	r3, [r7, #18]
 8004bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr

08004bf2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d103      	bne.n	8004c0c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2280      	movs	r2, #128	; 0x80
 8004c08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr

08004c2c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr

08004c40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004c52:	68fb      	ldr	r3, [r7, #12]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr

08004c5e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b08d      	sub	sp, #52	; 0x34
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	4611      	mov	r1, r2
 8004c80:	461a      	mov	r2, r3
 8004c82:	460b      	mov	r3, r1
 8004c84:	80fb      	strh	r3, [r7, #6]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004c8a:	88bb      	ldrh	r3, [r7, #4]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	005a      	lsls	r2, r3, #1
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cac:	e01e      	b.n	8004cec <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	021b      	lsls	r3, r3, #8
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	3302      	adds	r3, #2
 8004cde:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1dd      	bne.n	8004cae <USB_WritePMA+0x3a>
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	3734      	adds	r7, #52	; 0x34
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b08b      	sub	sp, #44	; 0x2c
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	4611      	mov	r1, r2
 8004d08:	461a      	mov	r2, r3
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	80fb      	strh	r3, [r7, #6]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004d12:	88bb      	ldrh	r3, [r7, #4]
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d22:	88fb      	ldrh	r3, [r7, #6]
 8004d24:	005a      	lsls	r2, r3, #1
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d2e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
 8004d34:	e01b      	b.n	8004d6e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	3302      	adds	r3, #2
 8004d42:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	0a1b      	lsrs	r3, r3, #8
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	3302      	adds	r3, #2
 8004d66:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e0      	bne.n	8004d36 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004d74:	88bb      	ldrh	r3, [r7, #4]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	701a      	strb	r2, [r3, #0]
  }
}
 8004d90:	bf00      	nop
 8004d92:	372c      	adds	r7, #44	; 0x2c
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	460b      	mov	r3, r1
 8004da4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	7c1b      	ldrb	r3, [r3, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d115      	bne.n	8004dde <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004db6:	2202      	movs	r2, #2
 8004db8:	2181      	movs	r1, #129	; 0x81
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f004 fb7f 	bl	80094be <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dca:	2202      	movs	r2, #2
 8004dcc:	2101      	movs	r1, #1
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f004 fb75 	bl	80094be <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004ddc:	e012      	b.n	8004e04 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004dde:	2340      	movs	r3, #64	; 0x40
 8004de0:	2202      	movs	r2, #2
 8004de2:	2181      	movs	r1, #129	; 0x81
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f004 fb6a 	bl	80094be <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004df0:	2340      	movs	r3, #64	; 0x40
 8004df2:	2202      	movs	r2, #2
 8004df4:	2101      	movs	r1, #1
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f004 fb61 	bl	80094be <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e04:	2308      	movs	r3, #8
 8004e06:	2203      	movs	r2, #3
 8004e08:	2182      	movs	r1, #130	; 0x82
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f004 fb57 	bl	80094be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e16:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e1a:	f004 fc77 	bl	800970c <USBD_static_malloc>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e026      	b.n	8004e84 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e3c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	7c1b      	ldrb	r3, [r3, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f004 fc17 	bl	80096a0 <USBD_LL_PrepareReceive>
 8004e72:	e007      	b.n	8004e84 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e7a:	2340      	movs	r3, #64	; 0x40
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f004 fc0e 	bl	80096a0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	460b      	mov	r3, r1
 8004e98:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004e9e:	2181      	movs	r1, #129	; 0x81
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f004 fb32 	bl	800950a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004eac:	2101      	movs	r1, #1
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f004 fb2b 	bl	800950a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004ebc:	2182      	movs	r1, #130	; 0x82
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f004 fb23 	bl	800950a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00e      	beq.n	8004ef2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f004 fc1d 	bl	8009724 <USBD_static_free>
    pdev->pClassData = NULL;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f0c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d039      	beq.n	8004f9a <USBD_CDC_Setup+0x9e>
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	d17c      	bne.n	8005024 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	88db      	ldrh	r3, [r3, #6]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d029      	beq.n	8004f86 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	b25b      	sxtb	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	da11      	bge.n	8004f60 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004f48:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	88d2      	ldrh	r2, [r2, #6]
 8004f4e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f50:	6939      	ldr	r1, [r7, #16]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	88db      	ldrh	r3, [r3, #6]
 8004f56:	461a      	mov	r2, r3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f001 f9f9 	bl	8006350 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004f5e:	e068      	b.n	8005032 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	785a      	ldrb	r2, [r3, #1]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	88db      	ldrh	r3, [r3, #6]
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f76:	6939      	ldr	r1, [r7, #16]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	88db      	ldrh	r3, [r3, #6]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f001 fa14 	bl	80063ac <USBD_CtlPrepareRx>
      break;
 8004f84:	e055      	b.n	8005032 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	7850      	ldrb	r0, [r2, #1]
 8004f92:	2200      	movs	r2, #0
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	4798      	blx	r3
      break;
 8004f98:	e04b      	b.n	8005032 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2b0a      	cmp	r3, #10
 8004fa0:	d017      	beq.n	8004fd2 <USBD_CDC_Setup+0xd6>
 8004fa2:	2b0b      	cmp	r3, #11
 8004fa4:	d029      	beq.n	8004ffa <USBD_CDC_Setup+0xfe>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d133      	bne.n	8005012 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d107      	bne.n	8004fc4 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004fb4:	f107 030c 	add.w	r3, r7, #12
 8004fb8:	2202      	movs	r2, #2
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f001 f9c7 	bl	8006350 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fc2:	e02e      	b.n	8005022 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f001 f958 	bl	800627c <USBD_CtlError>
            ret = USBD_FAIL;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd0:	e027      	b.n	8005022 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d107      	bne.n	8004fec <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004fdc:	f107 030f 	add.w	r3, r7, #15
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f001 f9b3 	bl	8006350 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fea:	e01a      	b.n	8005022 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f001 f944 	bl	800627c <USBD_CtlError>
            ret = USBD_FAIL;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	75fb      	strb	r3, [r7, #23]
          break;
 8004ff8:	e013      	b.n	8005022 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005000:	2b03      	cmp	r3, #3
 8005002:	d00d      	beq.n	8005020 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f001 f938 	bl	800627c <USBD_CtlError>
            ret = USBD_FAIL;
 800500c:	2302      	movs	r3, #2
 800500e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005010:	e006      	b.n	8005020 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 f931 	bl	800627c <USBD_CtlError>
          ret = USBD_FAIL;
 800501a:	2302      	movs	r3, #2
 800501c:	75fb      	strb	r3, [r7, #23]
          break;
 800501e:	e000      	b.n	8005022 <USBD_CDC_Setup+0x126>
          break;
 8005020:	bf00      	nop
      }
      break;
 8005022:	e006      	b.n	8005032 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 f928 	bl	800627c <USBD_CtlError>
      ret = USBD_FAIL;
 800502c:	2302      	movs	r3, #2
 800502e:	75fb      	strb	r3, [r7, #23]
      break;
 8005030:	bf00      	nop
  }

  return ret;
 8005032:	7dfb      	ldrb	r3, [r7, #23]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800504e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005056:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d03a      	beq.n	80050d8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005062:	78fa      	ldrb	r2, [r7, #3]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	331c      	adds	r3, #28
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d029      	beq.n	80050cc <USBD_CDC_DataIn+0x90>
 8005078:	78fa      	ldrb	r2, [r7, #3]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	331c      	adds	r3, #28
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	78f9      	ldrb	r1, [r7, #3]
 800508c:	68b8      	ldr	r0, [r7, #8]
 800508e:	460b      	mov	r3, r1
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4403      	add	r3, r0
 8005098:	3338      	adds	r3, #56	; 0x38
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	fbb2 f1f3 	udiv	r1, r2, r3
 80050a0:	fb03 f301 	mul.w	r3, r3, r1
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d110      	bne.n	80050cc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	331c      	adds	r3, #28
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050be:	78f9      	ldrb	r1, [r7, #3]
 80050c0:	2300      	movs	r3, #0
 80050c2:	2200      	movs	r2, #0
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f004 fac8 	bl	800965a <USBD_LL_Transmit>
 80050ca:	e003      	b.n	80050d4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	e000      	b.n	80050da <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80050d8:	2302      	movs	r3, #2
  }
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	460b      	mov	r3, r1
 80050ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80050f6:	78fb      	ldrb	r3, [r7, #3]
 80050f8:	4619      	mov	r1, r3
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f004 faf3 	bl	80096e6 <USBD_LL_GetRxDataSize>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00d      	beq.n	800512e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005126:	4611      	mov	r1, r2
 8005128:	4798      	blx	r3

    return USBD_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	e000      	b.n	8005130 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800512e:	2302      	movs	r3, #2
  }
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005146:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800514e:	2b00      	cmp	r3, #0
 8005150:	d015      	beq.n	800517e <USBD_CDC_EP0_RxReady+0x46>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005158:	2bff      	cmp	r3, #255	; 0xff
 800515a:	d010      	beq.n	800517e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800516a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005172:	b292      	uxth	r2, r2
 8005174:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	22ff      	movs	r2, #255	; 0xff
 800517a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2243      	movs	r2, #67	; 0x43
 8005194:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005196:	4b03      	ldr	r3, [pc, #12]	; (80051a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005198:	4618      	mov	r0, r3
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000098 	.word	0x20000098

080051a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2243      	movs	r2, #67	; 0x43
 80051b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80051b6:	4b03      	ldr	r3, [pc, #12]	; (80051c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20000054 	.word	0x20000054

080051c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2243      	movs	r2, #67	; 0x43
 80051d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80051d6:	4b03      	ldr	r3, [pc, #12]	; (80051e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	200000dc 	.word	0x200000dc

080051e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	220a      	movs	r2, #10
 80051f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80051f6:	4b03      	ldr	r3, [pc, #12]	; (8005204 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	20000010 	.word	0x20000010

08005208 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005212:	2302      	movs	r3, #2
 8005214:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	4613      	mov	r3, r2
 8005240:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005248:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005276:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	bc80      	pop	{r7}
 800528a:	4770      	bx	lr

0800528c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800529a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01c      	beq.n	80052e0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d115      	bne.n	80052dc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2181      	movs	r1, #129	; 0x81
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f004 f9c1 	bl	800965a <USBD_LL_Transmit>

      return USBD_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e002      	b.n	80052e2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80052e0:	2302      	movs	r3, #2
  }
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d017      	beq.n	8005334 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	7c1b      	ldrb	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d109      	bne.n	8005320 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005316:	2101      	movs	r1, #1
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f004 f9c1 	bl	80096a0 <USBD_LL_PrepareReceive>
 800531e:	e007      	b.n	8005330 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005326:	2340      	movs	r3, #64	; 0x40
 8005328:	2101      	movs	r1, #1
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f004 f9b8 	bl	80096a0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	e000      	b.n	8005336 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005334:	2302      	movs	r3, #2
  }
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	4613      	mov	r3, r2
 800534a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005352:	2302      	movs	r3, #2
 8005354:	e01a      	b.n	800538c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	79fa      	ldrb	r2, [r7, #7]
 8005382:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f004 f825 	bl	80093d4 <USBD_LL_Init>

  return USBD_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d006      	beq.n	80053b6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	73fb      	strb	r3, [r7, #15]
 80053b4:	e001      	b.n	80053ba <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80053b6:	2302      	movs	r3, #2
 80053b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr

080053c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f004 f85a 	bl	8009488 <USBD_LL_Start>

  return USBD_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bc80      	pop	{r7}
 80053f0:	4770      	bx	lr

080053f2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	460b      	mov	r3, r1
 80053fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80053fe:	2302      	movs	r3, #2
 8005400:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00c      	beq.n	8005426 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	78fa      	ldrb	r2, [r7, #3]
 8005416:	4611      	mov	r1, r2
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	4798      	blx	r3
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005426:	7bfb      	ldrb	r3, [r7, #15]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	78fa      	ldrb	r2, [r7, #3]
 8005446:	4611      	mov	r1, r2
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3

  return USBD_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005466:	6839      	ldr	r1, [r7, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fecb 	bl	8006204 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800547c:	461a      	mov	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	2b01      	cmp	r3, #1
 8005490:	d00c      	beq.n	80054ac <USBD_LL_SetupStage+0x56>
 8005492:	2b01      	cmp	r3, #1
 8005494:	d302      	bcc.n	800549c <USBD_LL_SetupStage+0x46>
 8005496:	2b02      	cmp	r3, #2
 8005498:	d010      	beq.n	80054bc <USBD_LL_SetupStage+0x66>
 800549a:	e017      	b.n	80054cc <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f9cb 	bl	8005840 <USBD_StdDevReq>
      break;
 80054aa:	e01a      	b.n	80054e2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fa2d 	bl	8005914 <USBD_StdItfReq>
      break;
 80054ba:	e012      	b.n	80054e2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054c2:	4619      	mov	r1, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fa6b 	bl	80059a0 <USBD_StdEPReq>
      break;
 80054ca:	e00a      	b.n	80054e2 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f004 f834 	bl	8009548 <USBD_LL_StallEP>
      break;
 80054e0:	bf00      	nop
  }

  return USBD_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	460b      	mov	r3, r1
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80054fa:	7afb      	ldrb	r3, [r7, #11]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d14b      	bne.n	8005598 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005506:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800550e:	2b03      	cmp	r3, #3
 8005510:	d134      	bne.n	800557c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	429a      	cmp	r2, r3
 800551c:	d919      	bls.n	8005552 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	1ad2      	subs	r2, r2, r3
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005534:	429a      	cmp	r2, r3
 8005536:	d203      	bcs.n	8005540 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800553c:	b29b      	uxth	r3, r3
 800553e:	e002      	b.n	8005546 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005544:	b29b      	uxth	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 ff4c 	bl	80063e8 <USBD_CtlContinueRx>
 8005550:	e038      	b.n	80055c4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005564:	2b03      	cmp	r3, #3
 8005566:	d105      	bne.n	8005574 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 ff49 	bl	800640c <USBD_CtlSendStatus>
 800557a:	e023      	b.n	80055c4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005582:	2b05      	cmp	r3, #5
 8005584:	d11e      	bne.n	80055c4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800558e:	2100      	movs	r1, #0
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f003 ffd9 	bl	8009548 <USBD_LL_StallEP>
 8005596:	e015      	b.n	80055c4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00d      	beq.n	80055c0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d108      	bne.n	80055c0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	7afa      	ldrb	r2, [r7, #11]
 80055b8:	4611      	mov	r1, r2
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	4798      	blx	r3
 80055be:	e001      	b.n	80055c4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80055c0:	2302      	movs	r3, #2
 80055c2:	e000      	b.n	80055c6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b086      	sub	sp, #24
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	460b      	mov	r3, r1
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80055dc:	7afb      	ldrb	r3, [r7, #11]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d17f      	bne.n	80056e2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3314      	adds	r3, #20
 80055e6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d15c      	bne.n	80056ac <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d915      	bls.n	800562a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	1ad2      	subs	r2, r2, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	b29b      	uxth	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 feb6 	bl	8006388 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800561c:	2300      	movs	r3, #0
 800561e:	2200      	movs	r2, #0
 8005620:	2100      	movs	r1, #0
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f004 f83c 	bl	80096a0 <USBD_LL_PrepareReceive>
 8005628:	e04e      	b.n	80056c8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	6912      	ldr	r2, [r2, #16]
 8005632:	fbb3 f1f2 	udiv	r1, r3, r2
 8005636:	fb02 f201 	mul.w	r2, r2, r1
 800563a:	1a9b      	subs	r3, r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d11c      	bne.n	800567a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005648:	429a      	cmp	r2, r3
 800564a:	d316      	bcc.n	800567a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005656:	429a      	cmp	r2, r3
 8005658:	d20f      	bcs.n	800567a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800565a:	2200      	movs	r2, #0
 800565c:	2100      	movs	r1, #0
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fe92 	bl	8006388 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800566c:	2300      	movs	r3, #0
 800566e:	2200      	movs	r2, #0
 8005670:	2100      	movs	r1, #0
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f004 f814 	bl	80096a0 <USBD_LL_PrepareReceive>
 8005678:	e026      	b.n	80056c8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800568c:	2b03      	cmp	r3, #3
 800568e:	d105      	bne.n	800569c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800569c:	2180      	movs	r1, #128	; 0x80
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f003 ff52 	bl	8009548 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fec4 	bl	8006432 <USBD_CtlReceiveStatus>
 80056aa:	e00d      	b.n	80056c8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d004      	beq.n	80056c0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d103      	bne.n	80056c8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f003 ff40 	bl	8009548 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d11d      	bne.n	800570e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff fe83 	bl	80053de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80056e0:	e015      	b.n	800570e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00d      	beq.n	800570a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d108      	bne.n	800570a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	7afa      	ldrb	r2, [r7, #11]
 8005702:	4611      	mov	r1, r2
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	4798      	blx	r3
 8005708:	e001      	b.n	800570e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800570a:	2302      	movs	r3, #2
 800570c:	e000      	b.n	8005710 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005720:	2340      	movs	r3, #64	; 0x40
 8005722:	2200      	movs	r2, #0
 8005724:	2100      	movs	r1, #0
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f003 fec9 	bl	80094be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2240      	movs	r2, #64	; 0x40
 8005738:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800573c:	2340      	movs	r3, #64	; 0x40
 800573e:	2200      	movs	r2, #0
 8005740:	2180      	movs	r1, #128	; 0x80
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f003 febb 	bl	80094be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2240      	movs	r2, #64	; 0x40
 8005752:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d009      	beq.n	8005790 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6852      	ldr	r2, [r2, #4]
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	4611      	mov	r1, r2
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	4798      	blx	r3
  }

  return USBD_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	460b      	mov	r3, r1
 80057a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	78fa      	ldrb	r2, [r7, #3]
 80057aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr

080057b8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2204      	movs	r2, #4
 80057d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr

080057e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d105      	bne.n	80057fe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005818:	2b03      	cmp	r3, #3
 800581a:	d10b      	bne.n	8005834 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005856:	2b20      	cmp	r3, #32
 8005858:	d004      	beq.n	8005864 <USBD_StdDevReq+0x24>
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	d002      	beq.n	8005864 <USBD_StdDevReq+0x24>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <USBD_StdDevReq+0x34>
 8005862:	e04c      	b.n	80058fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	6839      	ldr	r1, [r7, #0]
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
      break;
 8005872:	e049      	b.n	8005908 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	2b09      	cmp	r3, #9
 800587a:	d83a      	bhi.n	80058f2 <USBD_StdDevReq+0xb2>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <USBD_StdDevReq+0x44>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	080058d5 	.word	0x080058d5
 8005888:	080058e9 	.word	0x080058e9
 800588c:	080058f3 	.word	0x080058f3
 8005890:	080058df 	.word	0x080058df
 8005894:	080058f3 	.word	0x080058f3
 8005898:	080058b7 	.word	0x080058b7
 800589c:	080058ad 	.word	0x080058ad
 80058a0:	080058f3 	.word	0x080058f3
 80058a4:	080058cb 	.word	0x080058cb
 80058a8:	080058c1 	.word	0x080058c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f9d4 	bl	8005c5c <USBD_GetDescriptor>
          break;
 80058b4:	e022      	b.n	80058fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fb37 	bl	8005f2c <USBD_SetAddress>
          break;
 80058be:	e01d      	b.n	80058fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fb74 	bl	8005fb0 <USBD_SetConfig>
          break;
 80058c8:	e018      	b.n	80058fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fbfd 	bl	80060cc <USBD_GetConfig>
          break;
 80058d2:	e013      	b.n	80058fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fc2c 	bl	8006134 <USBD_GetStatus>
          break;
 80058dc:	e00e      	b.n	80058fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fc5a 	bl	800619a <USBD_SetFeature>
          break;
 80058e6:	e009      	b.n	80058fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fc69 	bl	80061c2 <USBD_ClrFeature>
          break;
 80058f0:	e004      	b.n	80058fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80058f2:	6839      	ldr	r1, [r7, #0]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fcc1 	bl	800627c <USBD_CtlError>
          break;
 80058fa:	bf00      	nop
      }
      break;
 80058fc:	e004      	b.n	8005908 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fcbb 	bl	800627c <USBD_CtlError>
      break;
 8005906:	bf00      	nop
  }

  return ret;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop

08005914 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800592a:	2b20      	cmp	r3, #32
 800592c:	d003      	beq.n	8005936 <USBD_StdItfReq+0x22>
 800592e:	2b40      	cmp	r3, #64	; 0x40
 8005930:	d001      	beq.n	8005936 <USBD_StdItfReq+0x22>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d12a      	bne.n	800598c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800593c:	3b01      	subs	r3, #1
 800593e:	2b02      	cmp	r3, #2
 8005940:	d81d      	bhi.n	800597e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	889b      	ldrh	r3, [r3, #4]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	d813      	bhi.n	8005974 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	4798      	blx	r3
 800595a:	4603      	mov	r3, r0
 800595c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	88db      	ldrh	r3, [r3, #6]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d110      	bne.n	8005988 <USBD_StdItfReq+0x74>
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10d      	bne.n	8005988 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fd4d 	bl	800640c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005972:	e009      	b.n	8005988 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fc80 	bl	800627c <USBD_CtlError>
          break;
 800597c:	e004      	b.n	8005988 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fc7b 	bl	800627c <USBD_CtlError>
          break;
 8005986:	e000      	b.n	800598a <USBD_StdItfReq+0x76>
          break;
 8005988:	bf00      	nop
      }
      break;
 800598a:	e004      	b.n	8005996 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fc74 	bl	800627c <USBD_CtlError>
      break;
 8005994:	bf00      	nop
  }

  return USBD_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	889b      	ldrh	r3, [r3, #4]
 80059b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d004      	beq.n	80059ca <USBD_StdEPReq+0x2a>
 80059c0:	2b40      	cmp	r3, #64	; 0x40
 80059c2:	d002      	beq.n	80059ca <USBD_StdEPReq+0x2a>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d008      	beq.n	80059da <USBD_StdEPReq+0x3a>
 80059c8:	e13d      	b.n	8005c46 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	4798      	blx	r3
      break;
 80059d8:	e13a      	b.n	8005c50 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d10a      	bne.n	80059fc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	4798      	blx	r3
 80059f4:	4603      	mov	r3, r0
 80059f6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	e12a      	b.n	8005c52 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	785b      	ldrb	r3, [r3, #1]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d03e      	beq.n	8005a82 <USBD_StdEPReq+0xe2>
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d002      	beq.n	8005a0e <USBD_StdEPReq+0x6e>
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d070      	beq.n	8005aee <USBD_StdEPReq+0x14e>
 8005a0c:	e115      	b.n	8005c3a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d002      	beq.n	8005a1e <USBD_StdEPReq+0x7e>
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d015      	beq.n	8005a48 <USBD_StdEPReq+0xa8>
 8005a1c:	e02b      	b.n	8005a76 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a1e:	7bbb      	ldrb	r3, [r7, #14]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00c      	beq.n	8005a3e <USBD_StdEPReq+0x9e>
 8005a24:	7bbb      	ldrb	r3, [r7, #14]
 8005a26:	2b80      	cmp	r3, #128	; 0x80
 8005a28:	d009      	beq.n	8005a3e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a2a:	7bbb      	ldrb	r3, [r7, #14]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f003 fd8a 	bl	8009548 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a34:	2180      	movs	r1, #128	; 0x80
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f003 fd86 	bl	8009548 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a3c:	e020      	b.n	8005a80 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fc1b 	bl	800627c <USBD_CtlError>
              break;
 8005a46:	e01b      	b.n	8005a80 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	885b      	ldrh	r3, [r3, #2]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10e      	bne.n	8005a6e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005a50:	7bbb      	ldrb	r3, [r7, #14]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00b      	beq.n	8005a6e <USBD_StdEPReq+0xce>
 8005a56:	7bbb      	ldrb	r3, [r7, #14]
 8005a58:	2b80      	cmp	r3, #128	; 0x80
 8005a5a:	d008      	beq.n	8005a6e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	88db      	ldrh	r3, [r3, #6]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f003 fd6d 	bl	8009548 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fccc 	bl	800640c <USBD_CtlSendStatus>

              break;
 8005a74:	e004      	b.n	8005a80 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fbff 	bl	800627c <USBD_CtlError>
              break;
 8005a7e:	bf00      	nop
          }
          break;
 8005a80:	e0e0      	b.n	8005c44 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d002      	beq.n	8005a92 <USBD_StdEPReq+0xf2>
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d015      	beq.n	8005abc <USBD_StdEPReq+0x11c>
 8005a90:	e026      	b.n	8005ae0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a92:	7bbb      	ldrb	r3, [r7, #14]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00c      	beq.n	8005ab2 <USBD_StdEPReq+0x112>
 8005a98:	7bbb      	ldrb	r3, [r7, #14]
 8005a9a:	2b80      	cmp	r3, #128	; 0x80
 8005a9c:	d009      	beq.n	8005ab2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a9e:	7bbb      	ldrb	r3, [r7, #14]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f003 fd50 	bl	8009548 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005aa8:	2180      	movs	r1, #128	; 0x80
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f003 fd4c 	bl	8009548 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ab0:	e01c      	b.n	8005aec <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005ab2:	6839      	ldr	r1, [r7, #0]
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fbe1 	bl	800627c <USBD_CtlError>
              break;
 8005aba:	e017      	b.n	8005aec <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	885b      	ldrh	r3, [r3, #2]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d112      	bne.n	8005aea <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ac4:	7bbb      	ldrb	r3, [r7, #14]
 8005ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d004      	beq.n	8005ad8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ace:	7bbb      	ldrb	r3, [r7, #14]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f003 fd57 	bl	8009586 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fc97 	bl	800640c <USBD_CtlSendStatus>
              }
              break;
 8005ade:	e004      	b.n	8005aea <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005ae0:	6839      	ldr	r1, [r7, #0]
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fbca 	bl	800627c <USBD_CtlError>
              break;
 8005ae8:	e000      	b.n	8005aec <USBD_StdEPReq+0x14c>
              break;
 8005aea:	bf00      	nop
          }
          break;
 8005aec:	e0aa      	b.n	8005c44 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d002      	beq.n	8005afe <USBD_StdEPReq+0x15e>
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d032      	beq.n	8005b62 <USBD_StdEPReq+0x1c2>
 8005afc:	e097      	b.n	8005c2e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d007      	beq.n	8005b14 <USBD_StdEPReq+0x174>
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	2b80      	cmp	r3, #128	; 0x80
 8005b08:	d004      	beq.n	8005b14 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fbb5 	bl	800627c <USBD_CtlError>
                break;
 8005b12:	e091      	b.n	8005c38 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	da0b      	bge.n	8005b34 <USBD_StdEPReq+0x194>
 8005b1c:	7bbb      	ldrb	r3, [r7, #14]
 8005b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	3310      	adds	r3, #16
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	4413      	add	r3, r2
 8005b30:	3304      	adds	r3, #4
 8005b32:	e00b      	b.n	8005b4c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	4413      	add	r3, r2
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2202      	movs	r2, #2
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fbf8 	bl	8006350 <USBD_CtlSendData>
              break;
 8005b60:	e06a      	b.n	8005c38 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	da11      	bge.n	8005b8e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	f003 020f 	and.w	r2, r3, #15
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	3318      	adds	r3, #24
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d117      	bne.n	8005bb4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fb78 	bl	800627c <USBD_CtlError>
                  break;
 8005b8c:	e054      	b.n	8005c38 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b8e:	7bbb      	ldrb	r3, [r7, #14]
 8005b90:	f003 020f 	and.w	r2, r3, #15
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fb65 	bl	800627c <USBD_CtlError>
                  break;
 8005bb2:	e041      	b.n	8005c38 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	da0b      	bge.n	8005bd4 <USBD_StdEPReq+0x234>
 8005bbc:	7bbb      	ldrb	r3, [r7, #14]
 8005bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	3310      	adds	r3, #16
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	e00b      	b.n	8005bec <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	4413      	add	r3, r2
 8005bea:	3304      	adds	r3, #4
 8005bec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bee:	7bbb      	ldrb	r3, [r7, #14]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <USBD_StdEPReq+0x25a>
 8005bf4:	7bbb      	ldrb	r3, [r7, #14]
 8005bf6:	2b80      	cmp	r3, #128	; 0x80
 8005bf8:	d103      	bne.n	8005c02 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	e00e      	b.n	8005c20 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005c02:	7bbb      	ldrb	r3, [r7, #14]
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f003 fcdc 	bl	80095c4 <USBD_LL_IsStallEP>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	e002      	b.n	8005c20 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2202      	movs	r2, #2
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fb92 	bl	8006350 <USBD_CtlSendData>
              break;
 8005c2c:	e004      	b.n	8005c38 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fb23 	bl	800627c <USBD_CtlError>
              break;
 8005c36:	bf00      	nop
          }
          break;
 8005c38:	e004      	b.n	8005c44 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fb1d 	bl	800627c <USBD_CtlError>
          break;
 8005c42:	bf00      	nop
      }
      break;
 8005c44:	e004      	b.n	8005c50 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fb17 	bl	800627c <USBD_CtlError>
      break;
 8005c4e:	bf00      	nop
  }

  return ret;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	885b      	ldrh	r3, [r3, #2]
 8005c76:	0a1b      	lsrs	r3, r3, #8
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	2b06      	cmp	r3, #6
 8005c7e:	f200 8128 	bhi.w	8005ed2 <USBD_GetDescriptor+0x276>
 8005c82:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <USBD_GetDescriptor+0x2c>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005ca5 	.word	0x08005ca5
 8005c8c:	08005cbd 	.word	0x08005cbd
 8005c90:	08005cfd 	.word	0x08005cfd
 8005c94:	08005ed3 	.word	0x08005ed3
 8005c98:	08005ed3 	.word	0x08005ed3
 8005c9c:	08005e73 	.word	0x08005e73
 8005ca0:	08005e9f 	.word	0x08005e9f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	7c12      	ldrb	r2, [r2, #16]
 8005cb0:	f107 0108 	add.w	r1, r7, #8
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4798      	blx	r3
 8005cb8:	60f8      	str	r0, [r7, #12]
      break;
 8005cba:	e112      	b.n	8005ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	7c1b      	ldrb	r3, [r3, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10d      	bne.n	8005ce0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ccc:	f107 0208 	add.w	r2, r7, #8
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4798      	blx	r3
 8005cd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	2202      	movs	r2, #2
 8005cdc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005cde:	e100      	b.n	8005ee2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	f107 0208 	add.w	r2, r7, #8
 8005cec:	4610      	mov	r0, r2
 8005cee:	4798      	blx	r3
 8005cf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	701a      	strb	r2, [r3, #0]
      break;
 8005cfa:	e0f2      	b.n	8005ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	885b      	ldrh	r3, [r3, #2]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b05      	cmp	r3, #5
 8005d04:	f200 80ac 	bhi.w	8005e60 <USBD_GetDescriptor+0x204>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <USBD_GetDescriptor+0xb4>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d29 	.word	0x08005d29
 8005d14:	08005d5d 	.word	0x08005d5d
 8005d18:	08005d91 	.word	0x08005d91
 8005d1c:	08005dc5 	.word	0x08005dc5
 8005d20:	08005df9 	.word	0x08005df9
 8005d24:	08005e2d 	.word	0x08005e2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	7c12      	ldrb	r2, [r2, #16]
 8005d40:	f107 0108 	add.w	r1, r7, #8
 8005d44:	4610      	mov	r0, r2
 8005d46:	4798      	blx	r3
 8005d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d4a:	e091      	b.n	8005e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa94 	bl	800627c <USBD_CtlError>
            err++;
 8005d54:	7afb      	ldrb	r3, [r7, #11]
 8005d56:	3301      	adds	r3, #1
 8005d58:	72fb      	strb	r3, [r7, #11]
          break;
 8005d5a:	e089      	b.n	8005e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	7c12      	ldrb	r2, [r2, #16]
 8005d74:	f107 0108 	add.w	r1, r7, #8
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4798      	blx	r3
 8005d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d7e:	e077      	b.n	8005e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fa7a 	bl	800627c <USBD_CtlError>
            err++;
 8005d88:	7afb      	ldrb	r3, [r7, #11]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d8e:	e06f      	b.n	8005e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	7c12      	ldrb	r2, [r2, #16]
 8005da8:	f107 0108 	add.w	r1, r7, #8
 8005dac:	4610      	mov	r0, r2
 8005dae:	4798      	blx	r3
 8005db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005db2:	e05d      	b.n	8005e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005db4:	6839      	ldr	r1, [r7, #0]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa60 	bl	800627c <USBD_CtlError>
            err++;
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8005dc2:	e055      	b.n	8005e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00b      	beq.n	8005de8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	7c12      	ldrb	r2, [r2, #16]
 8005ddc:	f107 0108 	add.w	r1, r7, #8
 8005de0:	4610      	mov	r0, r2
 8005de2:	4798      	blx	r3
 8005de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005de6:	e043      	b.n	8005e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa46 	bl	800627c <USBD_CtlError>
            err++;
 8005df0:	7afb      	ldrb	r3, [r7, #11]
 8005df2:	3301      	adds	r3, #1
 8005df4:	72fb      	strb	r3, [r7, #11]
          break;
 8005df6:	e03b      	b.n	8005e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	7c12      	ldrb	r2, [r2, #16]
 8005e10:	f107 0108 	add.w	r1, r7, #8
 8005e14:	4610      	mov	r0, r2
 8005e16:	4798      	blx	r3
 8005e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e1a:	e029      	b.n	8005e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fa2c 	bl	800627c <USBD_CtlError>
            err++;
 8005e24:	7afb      	ldrb	r3, [r7, #11]
 8005e26:	3301      	adds	r3, #1
 8005e28:	72fb      	strb	r3, [r7, #11]
          break;
 8005e2a:	e021      	b.n	8005e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	7c12      	ldrb	r2, [r2, #16]
 8005e44:	f107 0108 	add.w	r1, r7, #8
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4798      	blx	r3
 8005e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e4e:	e00f      	b.n	8005e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fa12 	bl	800627c <USBD_CtlError>
            err++;
 8005e58:	7afb      	ldrb	r3, [r7, #11]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e5e:	e007      	b.n	8005e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fa0a 	bl	800627c <USBD_CtlError>
          err++;
 8005e68:	7afb      	ldrb	r3, [r7, #11]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005e6e:	e038      	b.n	8005ee2 <USBD_GetDescriptor+0x286>
 8005e70:	e037      	b.n	8005ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7c1b      	ldrb	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	f107 0208 	add.w	r2, r7, #8
 8005e86:	4610      	mov	r0, r2
 8005e88:	4798      	blx	r3
 8005e8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e8c:	e029      	b.n	8005ee2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f9f3 	bl	800627c <USBD_CtlError>
        err++;
 8005e96:	7afb      	ldrb	r3, [r7, #11]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	72fb      	strb	r3, [r7, #11]
      break;
 8005e9c:	e021      	b.n	8005ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	7c1b      	ldrb	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10d      	bne.n	8005ec2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eae:	f107 0208 	add.w	r2, r7, #8
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4798      	blx	r3
 8005eb6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	2207      	movs	r2, #7
 8005ebe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ec0:	e00f      	b.n	8005ee2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f9d9 	bl	800627c <USBD_CtlError>
        err++;
 8005eca:	7afb      	ldrb	r3, [r7, #11]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	72fb      	strb	r3, [r7, #11]
      break;
 8005ed0:	e007      	b.n	8005ee2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f9d1 	bl	800627c <USBD_CtlError>
      err++;
 8005eda:	7afb      	ldrb	r3, [r7, #11]
 8005edc:	3301      	adds	r3, #1
 8005ede:	72fb      	strb	r3, [r7, #11]
      break;
 8005ee0:	bf00      	nop
  }

  if (err != 0U)
 8005ee2:	7afb      	ldrb	r3, [r7, #11]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d11c      	bne.n	8005f22 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005ee8:	893b      	ldrh	r3, [r7, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d011      	beq.n	8005f12 <USBD_GetDescriptor+0x2b6>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	88db      	ldrh	r3, [r3, #6]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00d      	beq.n	8005f12 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	88da      	ldrh	r2, [r3, #6]
 8005efa:	893b      	ldrh	r3, [r7, #8]
 8005efc:	4293      	cmp	r3, r2
 8005efe:	bf28      	it	cs
 8005f00:	4613      	movcs	r3, r2
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f06:	893b      	ldrh	r3, [r7, #8]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	68f9      	ldr	r1, [r7, #12]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fa1f 	bl	8006350 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	88db      	ldrh	r3, [r3, #6]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fa76 	bl	800640c <USBD_CtlSendStatus>
 8005f20:	e000      	b.n	8005f24 <USBD_GetDescriptor+0x2c8>
    return;
 8005f22:	bf00      	nop
    }
  }
}
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop

08005f2c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	889b      	ldrh	r3, [r3, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d130      	bne.n	8005fa0 <USBD_SetAddress+0x74>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	88db      	ldrh	r3, [r3, #6]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d12c      	bne.n	8005fa0 <USBD_SetAddress+0x74>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	885b      	ldrh	r3, [r3, #2]
 8005f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4c:	d828      	bhi.n	8005fa0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	885b      	ldrh	r3, [r3, #2]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d104      	bne.n	8005f6e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f988 	bl	800627c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6c:	e01c      	b.n	8005fa8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	7bfa      	ldrb	r2, [r7, #15]
 8005f72:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f003 fb4e 	bl	800961c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fa43 	bl	800640c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d004      	beq.n	8005f96 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f94:	e008      	b.n	8005fa8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f9e:	e003      	b.n	8005fa8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f96a 	bl	800627c <USBD_CtlError>
  }
}
 8005fa8:	bf00      	nop
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	885b      	ldrh	r3, [r3, #2]
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	4b41      	ldr	r3, [pc, #260]	; (80060c8 <USBD_SetConfig+0x118>)
 8005fc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fc4:	4b40      	ldr	r3, [pc, #256]	; (80060c8 <USBD_SetConfig+0x118>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d904      	bls.n	8005fd6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f954 	bl	800627c <USBD_CtlError>
 8005fd4:	e075      	b.n	80060c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d002      	beq.n	8005fe6 <USBD_SetConfig+0x36>
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d023      	beq.n	800602c <USBD_SetConfig+0x7c>
 8005fe4:	e062      	b.n	80060ac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005fe6:	4b38      	ldr	r3, [pc, #224]	; (80060c8 <USBD_SetConfig+0x118>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01a      	beq.n	8006024 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005fee:	4b36      	ldr	r3, [pc, #216]	; (80060c8 <USBD_SetConfig+0x118>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2203      	movs	r2, #3
 8005ffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006000:	4b31      	ldr	r3, [pc, #196]	; (80060c8 <USBD_SetConfig+0x118>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff f9f3 	bl	80053f2 <USBD_SetClassConfig>
 800600c:	4603      	mov	r3, r0
 800600e:	2b02      	cmp	r3, #2
 8006010:	d104      	bne.n	800601c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f931 	bl	800627c <USBD_CtlError>
            return;
 800601a:	e052      	b.n	80060c2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f9f5 	bl	800640c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006022:	e04e      	b.n	80060c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f9f1 	bl	800640c <USBD_CtlSendStatus>
        break;
 800602a:	e04a      	b.n	80060c2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800602c:	4b26      	ldr	r3, [pc, #152]	; (80060c8 <USBD_SetConfig+0x118>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d112      	bne.n	800605a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800603c:	4b22      	ldr	r3, [pc, #136]	; (80060c8 <USBD_SetConfig+0x118>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006046:	4b20      	ldr	r3, [pc, #128]	; (80060c8 <USBD_SetConfig+0x118>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff f9ef 	bl	8005430 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f9da 	bl	800640c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006058:	e033      	b.n	80060c2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800605a:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <USBD_SetConfig+0x118>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d01d      	beq.n	80060a4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff f9dd 	bl	8005430 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <USBD_SetConfig+0x118>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006080:	4b11      	ldr	r3, [pc, #68]	; (80060c8 <USBD_SetConfig+0x118>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff f9b3 	bl	80053f2 <USBD_SetClassConfig>
 800608c:	4603      	mov	r3, r0
 800608e:	2b02      	cmp	r3, #2
 8006090:	d104      	bne.n	800609c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f8f1 	bl	800627c <USBD_CtlError>
            return;
 800609a:	e012      	b.n	80060c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f9b5 	bl	800640c <USBD_CtlSendStatus>
        break;
 80060a2:	e00e      	b.n	80060c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f9b1 	bl	800640c <USBD_CtlSendStatus>
        break;
 80060aa:	e00a      	b.n	80060c2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f8e4 	bl	800627c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80060b4:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <USBD_SetConfig+0x118>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff f9b8 	bl	8005430 <USBD_ClrClassConfig>
        break;
 80060c0:	bf00      	nop
    }
  }
}
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	200001a0 	.word	0x200001a0

080060cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	88db      	ldrh	r3, [r3, #6]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d004      	beq.n	80060e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f8cb 	bl	800627c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80060e6:	e021      	b.n	800612c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	db17      	blt.n	8006122 <USBD_GetConfig+0x56>
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	dd02      	ble.n	80060fc <USBD_GetConfig+0x30>
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d00b      	beq.n	8006112 <USBD_GetConfig+0x46>
 80060fa:	e012      	b.n	8006122 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3308      	adds	r3, #8
 8006106:	2201      	movs	r2, #1
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f920 	bl	8006350 <USBD_CtlSendData>
        break;
 8006110:	e00c      	b.n	800612c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3304      	adds	r3, #4
 8006116:	2201      	movs	r2, #1
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f918 	bl	8006350 <USBD_CtlSendData>
        break;
 8006120:	e004      	b.n	800612c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f8a9 	bl	800627c <USBD_CtlError>
        break;
 800612a:	bf00      	nop
}
 800612c:	bf00      	nop
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006144:	3b01      	subs	r3, #1
 8006146:	2b02      	cmp	r3, #2
 8006148:	d81e      	bhi.n	8006188 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	88db      	ldrh	r3, [r3, #6]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d004      	beq.n	800615c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f891 	bl	800627c <USBD_CtlError>
        break;
 800615a:	e01a      	b.n	8006192 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f043 0202 	orr.w	r2, r3, #2
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	330c      	adds	r3, #12
 800617c:	2202      	movs	r2, #2
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f8e5 	bl	8006350 <USBD_CtlSendData>
      break;
 8006186:	e004      	b.n	8006192 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f876 	bl	800627c <USBD_CtlError>
      break;
 8006190:	bf00      	nop
  }
}
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	885b      	ldrh	r3, [r3, #2]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d106      	bne.n	80061ba <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f929 	bl	800640c <USBD_CtlSendStatus>
  }
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d2:	3b01      	subs	r3, #1
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d80b      	bhi.n	80061f0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	885b      	ldrh	r3, [r3, #2]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d10c      	bne.n	80061fa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f90f 	bl	800640c <USBD_CtlSendStatus>
      }
      break;
 80061ee:	e004      	b.n	80061fa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f842 	bl	800627c <USBD_CtlError>
      break;
 80061f8:	e000      	b.n	80061fc <USBD_ClrFeature+0x3a>
      break;
 80061fa:	bf00      	nop
  }
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781a      	ldrb	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	785a      	ldrb	r2, [r3, #1]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	3302      	adds	r3, #2
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	b29a      	uxth	r2, r3
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	3303      	adds	r3, #3
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	b29b      	uxth	r3, r3
 8006232:	4413      	add	r3, r2
 8006234:	b29a      	uxth	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	3304      	adds	r3, #4
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	b29a      	uxth	r2, r3
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	3305      	adds	r3, #5
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	b29b      	uxth	r3, r3
 800624e:	4413      	add	r3, r2
 8006250:	b29a      	uxth	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	3306      	adds	r3, #6
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b29a      	uxth	r2, r3
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	3307      	adds	r3, #7
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	021b      	lsls	r3, r3, #8
 8006268:	b29b      	uxth	r3, r3
 800626a:	4413      	add	r3, r2
 800626c:	b29a      	uxth	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	80da      	strh	r2, [r3, #6]

}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr

0800627c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006286:	2180      	movs	r1, #128	; 0x80
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f003 f95d 	bl	8009548 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800628e:	2100      	movs	r1, #0
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f003 f959 	bl	8009548 <USBD_LL_StallEP>
}
 8006296:	bf00      	nop
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b086      	sub	sp, #24
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d032      	beq.n	800631a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f834 	bl	8006322 <USBD_GetLen>
 80062ba:	4603      	mov	r3, r0
 80062bc:	3301      	adds	r3, #1
 80062be:	b29b      	uxth	r3, r3
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	75fa      	strb	r2, [r7, #23]
 80062ce:	461a      	mov	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4413      	add	r3, r2
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	7812      	ldrb	r2, [r2, #0]
 80062d8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80062da:	7dfb      	ldrb	r3, [r7, #23]
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	75fa      	strb	r2, [r7, #23]
 80062e0:	461a      	mov	r2, r3
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4413      	add	r3, r2
 80062e6:	2203      	movs	r2, #3
 80062e8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80062ea:	e012      	b.n	8006312 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	60fa      	str	r2, [r7, #12]
 80062f2:	7dfa      	ldrb	r2, [r7, #23]
 80062f4:	1c51      	adds	r1, r2, #1
 80062f6:	75f9      	strb	r1, [r7, #23]
 80062f8:	4611      	mov	r1, r2
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	440a      	add	r2, r1
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	75fa      	strb	r2, [r7, #23]
 8006308:	461a      	mov	r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4413      	add	r3, r2
 800630e:	2200      	movs	r2, #0
 8006310:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e8      	bne.n	80062ec <USBD_GetString+0x4e>
    }
  }
}
 800631a:	bf00      	nop
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006322:	b480      	push	{r7}
 8006324:	b085      	sub	sp, #20
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800632e:	e005      	b.n	800633c <USBD_GetLen+0x1a>
  {
    len++;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	3301      	adds	r3, #1
 8006334:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3301      	adds	r3, #1
 800633a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1f5      	bne.n	8006330 <USBD_GetLen+0xe>
  }

  return len;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr

08006350 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2202      	movs	r2, #2
 8006362:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006366:	88fa      	ldrh	r2, [r7, #6]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800636c:	88fa      	ldrh	r2, [r7, #6]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006372:	88fb      	ldrh	r3, [r7, #6]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	2100      	movs	r1, #0
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f003 f96e 	bl	800965a <USBD_LL_Transmit>

  return USBD_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	4613      	mov	r3, r2
 8006394:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006396:	88fb      	ldrh	r3, [r7, #6]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	2100      	movs	r1, #0
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f003 f95c 	bl	800965a <USBD_LL_Transmit>

  return USBD_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2203      	movs	r2, #3
 80063be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80063ca:	88fa      	ldrh	r2, [r7, #6]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063d2:	88fb      	ldrh	r3, [r7, #6]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	2100      	movs	r1, #0
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f003 f961 	bl	80096a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	4613      	mov	r3, r2
 80063f4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	2100      	movs	r1, #0
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f003 f94f 	bl	80096a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2204      	movs	r2, #4
 8006418:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800641c:	2300      	movs	r3, #0
 800641e:	2200      	movs	r2, #0
 8006420:	2100      	movs	r1, #0
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f003 f919 	bl	800965a <USBD_LL_Transmit>

  return USBD_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b082      	sub	sp, #8
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2205      	movs	r2, #5
 800643e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006442:	2300      	movs	r3, #0
 8006444:	2200      	movs	r2, #0
 8006446:	2100      	movs	r1, #0
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f003 f929 	bl	80096a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800645e:	f3ef 8305 	mrs	r3, IPSR
 8006462:	60bb      	str	r3, [r7, #8]
  return(result);
 8006464:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10f      	bne.n	800648a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800646a:	f3ef 8310 	mrs	r3, PRIMASK
 800646e:	607b      	str	r3, [r7, #4]
  return(result);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <osKernelInitialize+0x32>
 8006476:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <osKernelInitialize+0x60>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d109      	bne.n	8006492 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800647e:	f3ef 8311 	mrs	r3, BASEPRI
 8006482:	603b      	str	r3, [r7, #0]
  return(result);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800648a:	f06f 0305 	mvn.w	r3, #5
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	e00c      	b.n	80064ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006492:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <osKernelInitialize+0x60>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d105      	bne.n	80064a6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800649a:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <osKernelInitialize+0x60>)
 800649c:	2201      	movs	r2, #1
 800649e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e002      	b.n	80064ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80064a6:	f04f 33ff 	mov.w	r3, #4294967295
 80064aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064ac:	68fb      	ldr	r3, [r7, #12]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr
 80064b8:	200001a4 	.word	0x200001a4

080064bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c2:	f3ef 8305 	mrs	r3, IPSR
 80064c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80064c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10f      	bne.n	80064ee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ce:	f3ef 8310 	mrs	r3, PRIMASK
 80064d2:	607b      	str	r3, [r7, #4]
  return(result);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d109      	bne.n	80064ee <osKernelStart+0x32>
 80064da:	4b11      	ldr	r3, [pc, #68]	; (8006520 <osKernelStart+0x64>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d109      	bne.n	80064f6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064e2:	f3ef 8311 	mrs	r3, BASEPRI
 80064e6:	603b      	str	r3, [r7, #0]
  return(result);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80064ee:	f06f 0305 	mvn.w	r3, #5
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	e00e      	b.n	8006514 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80064f6:	4b0a      	ldr	r3, [pc, #40]	; (8006520 <osKernelStart+0x64>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d107      	bne.n	800650e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80064fe:	4b08      	ldr	r3, [pc, #32]	; (8006520 <osKernelStart+0x64>)
 8006500:	2202      	movs	r2, #2
 8006502:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006504:	f001 f8d6 	bl	80076b4 <vTaskStartScheduler>
      stat = osOK;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	e002      	b.n	8006514 <osKernelStart+0x58>
    } else {
      stat = osError;
 800650e:	f04f 33ff 	mov.w	r3, #4294967295
 8006512:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006514:	68fb      	ldr	r3, [r7, #12]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	200001a4 	.word	0x200001a4

08006524 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b092      	sub	sp, #72	; 0x48
 8006528:	af04      	add	r7, sp, #16
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006534:	f3ef 8305 	mrs	r3, IPSR
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800653c:	2b00      	cmp	r3, #0
 800653e:	f040 8094 	bne.w	800666a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006542:	f3ef 8310 	mrs	r3, PRIMASK
 8006546:	623b      	str	r3, [r7, #32]
  return(result);
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f040 808d 	bne.w	800666a <osThreadNew+0x146>
 8006550:	4b48      	ldr	r3, [pc, #288]	; (8006674 <osThreadNew+0x150>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d106      	bne.n	8006566 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006558:	f3ef 8311 	mrs	r3, BASEPRI
 800655c:	61fb      	str	r3, [r7, #28]
  return(result);
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	2b00      	cmp	r3, #0
 8006562:	f040 8082 	bne.w	800666a <osThreadNew+0x146>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d07e      	beq.n	800666a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800656c:	2380      	movs	r3, #128	; 0x80
 800656e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006570:	2318      	movs	r3, #24
 8006572:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006574:	2300      	movs	r3, #0
 8006576:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006578:	f107 031b 	add.w	r3, r7, #27
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800657e:	f04f 33ff 	mov.w	r3, #4294967295
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d045      	beq.n	8006616 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <osThreadNew+0x74>
        name = attr->name;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <osThreadNew+0x9a>
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	2b38      	cmp	r3, #56	; 0x38
 80065b0:	d805      	bhi.n	80065be <osThreadNew+0x9a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <osThreadNew+0x9e>
        return (NULL);
 80065be:	2300      	movs	r3, #0
 80065c0:	e054      	b.n	800666c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	089b      	lsrs	r3, r3, #2
 80065d0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00e      	beq.n	80065f8 <osThreadNew+0xd4>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	2b5b      	cmp	r3, #91	; 0x5b
 80065e0:	d90a      	bls.n	80065f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d006      	beq.n	80065f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <osThreadNew+0xd4>
        mem = 1;
 80065f2:	2301      	movs	r3, #1
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f6:	e010      	b.n	800661a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10c      	bne.n	800661a <osThreadNew+0xf6>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d108      	bne.n	800661a <osThreadNew+0xf6>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d104      	bne.n	800661a <osThreadNew+0xf6>
          mem = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
 8006614:	e001      	b.n	800661a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	2b01      	cmp	r3, #1
 800661e:	d110      	bne.n	8006642 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006628:	9202      	str	r2, [sp, #8]
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006634:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 fe02 	bl	8007240 <xTaskCreateStatic>
 800663c:	4603      	mov	r3, r0
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	e013      	b.n	800666a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	2b00      	cmp	r3, #0
 8006646:	d110      	bne.n	800666a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	b29a      	uxth	r2, r3
 800664c:	f107 0314 	add.w	r3, r7, #20
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 fe49 	bl	80072f2 <xTaskCreate>
 8006660:	4603      	mov	r3, r0
 8006662:	2b01      	cmp	r3, #1
 8006664:	d001      	beq.n	800666a <osThreadNew+0x146>
          hTask = NULL;
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800666a:	697b      	ldr	r3, [r7, #20]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3738      	adds	r7, #56	; 0x38
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	200001a4 	.word	0x200001a4

08006678 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006680:	f3ef 8305 	mrs	r3, IPSR
 8006684:	613b      	str	r3, [r7, #16]
  return(result);
 8006686:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10f      	bne.n	80066ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800668c:	f3ef 8310 	mrs	r3, PRIMASK
 8006690:	60fb      	str	r3, [r7, #12]
  return(result);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <osDelay+0x34>
 8006698:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <osDelay+0x58>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d109      	bne.n	80066b4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066a0:	f3ef 8311 	mrs	r3, BASEPRI
 80066a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <osDelay+0x3c>
    stat = osErrorISR;
 80066ac:	f06f 0305 	mvn.w	r3, #5
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	e007      	b.n	80066c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 ffc4 	bl	800764c <vTaskDelay>
    }
  }

  return (stat);
 80066c4:	697b      	ldr	r3, [r7, #20]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	200001a4 	.word	0x200001a4

080066d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4a06      	ldr	r2, [pc, #24]	; (80066fc <vApplicationGetIdleTaskMemory+0x28>)
 80066e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	4a05      	ldr	r2, [pc, #20]	; (8006700 <vApplicationGetIdleTaskMemory+0x2c>)
 80066ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2280      	movs	r2, #128	; 0x80
 80066f0:	601a      	str	r2, [r3, #0]
}
 80066f2:	bf00      	nop
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr
 80066fc:	200001a8 	.word	0x200001a8
 8006700:	20000204 	.word	0x20000204

08006704 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4a07      	ldr	r2, [pc, #28]	; (8006730 <vApplicationGetTimerTaskMemory+0x2c>)
 8006714:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4a06      	ldr	r2, [pc, #24]	; (8006734 <vApplicationGetTimerTaskMemory+0x30>)
 800671a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006722:	601a      	str	r2, [r3, #0]
}
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	20000404 	.word	0x20000404
 8006734:	20000460 	.word	0x20000460

08006738 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f103 0208 	add.w	r2, r3, #8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f04f 32ff 	mov.w	r2, #4294967295
 8006750:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f103 0208 	add.w	r2, r3, #8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f103 0208 	add.w	r2, r3, #8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr

08006776 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr

0800678e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800678e:	b480      	push	{r7}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	601a      	str	r2, [r3, #0]
}
 80067ca:	bf00      	nop
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr

080067d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ea:	d103      	bne.n	80067f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	e00c      	b.n	800680e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3308      	adds	r3, #8
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e002      	b.n	8006802 <vListInsert+0x2e>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	429a      	cmp	r2, r3
 800680c:	d2f6      	bcs.n	80067fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	601a      	str	r2, [r3, #0]
}
 800683a:	bf00      	nop
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6892      	ldr	r2, [r2, #8]
 800685a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6852      	ldr	r2, [r2, #4]
 8006864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	429a      	cmp	r2, r3
 800686e:	d103      	bne.n	8006878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	1e5a      	subs	r2, r3, #1
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr
	...

08006898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d109      	bne.n	80068c0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	e7fe      	b.n	80068be <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80068c0:	f002 f80a 	bl	80088d8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068cc:	68f9      	ldr	r1, [r7, #12]
 80068ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068d0:	fb01 f303 	mul.w	r3, r1, r3
 80068d4:	441a      	add	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f0:	3b01      	subs	r3, #1
 80068f2:	68f9      	ldr	r1, [r7, #12]
 80068f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068f6:	fb01 f303 	mul.w	r3, r1, r3
 80068fa:	441a      	add	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	22ff      	movs	r2, #255	; 0xff
 8006904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	22ff      	movs	r2, #255	; 0xff
 800690c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d114      	bne.n	8006940 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01a      	beq.n	8006954 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3310      	adds	r3, #16
 8006922:	4618      	mov	r0, r3
 8006924:	f001 f94a 	bl	8007bbc <xTaskRemoveFromEventList>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d012      	beq.n	8006954 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800692e:	4b0d      	ldr	r3, [pc, #52]	; (8006964 <xQueueGenericReset+0xcc>)
 8006930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	e009      	b.n	8006954 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3310      	adds	r3, #16
 8006944:	4618      	mov	r0, r3
 8006946:	f7ff fef7 	bl	8006738 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3324      	adds	r3, #36	; 0x24
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fef2 	bl	8006738 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006954:	f001 ffee 	bl	8008934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006958:	2301      	movs	r3, #1
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08e      	sub	sp, #56	; 0x38
 800696c:	af02      	add	r7, sp, #8
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d109      	bne.n	8006990 <xQueueGenericCreateStatic+0x28>
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	62bb      	str	r3, [r7, #40]	; 0x28
 800698e:	e7fe      	b.n	800698e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <xQueueGenericCreateStatic+0x42>
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
 80069a8:	e7fe      	b.n	80069a8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <xQueueGenericCreateStatic+0x4e>
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <xQueueGenericCreateStatic+0x52>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e000      	b.n	80069bc <xQueueGenericCreateStatic+0x54>
 80069ba:	2300      	movs	r3, #0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d109      	bne.n	80069d4 <xQueueGenericCreateStatic+0x6c>
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	623b      	str	r3, [r7, #32]
 80069d2:	e7fe      	b.n	80069d2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <xQueueGenericCreateStatic+0x78>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <xQueueGenericCreateStatic+0x7c>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e000      	b.n	80069e6 <xQueueGenericCreateStatic+0x7e>
 80069e4:	2300      	movs	r3, #0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d109      	bne.n	80069fe <xQueueGenericCreateStatic+0x96>
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	61fb      	str	r3, [r7, #28]
 80069fc:	e7fe      	b.n	80069fc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069fe:	2350      	movs	r3, #80	; 0x50
 8006a00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b50      	cmp	r3, #80	; 0x50
 8006a06:	d009      	beq.n	8006a1c <xQueueGenericCreateStatic+0xb4>
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	61bb      	str	r3, [r7, #24]
 8006a1a:	e7fe      	b.n	8006a1a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00d      	beq.n	8006a42 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	4613      	mov	r3, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f805 	bl	8006a4c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3730      	adds	r7, #48	; 0x30
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d103      	bne.n	8006a68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	e002      	b.n	8006a6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	69b8      	ldr	r0, [r7, #24]
 8006a7e:	f7ff ff0b 	bl	8006898 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	78fa      	ldrb	r2, [r7, #3]
 8006a86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a8a:	bf00      	nop
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08e      	sub	sp, #56	; 0x38
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d109      	bne.n	8006ac4 <xQueueGenericSend+0x30>
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac2:	e7fe      	b.n	8006ac2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d103      	bne.n	8006ad2 <xQueueGenericSend+0x3e>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <xQueueGenericSend+0x42>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <xQueueGenericSend+0x44>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d109      	bne.n	8006af0 <xQueueGenericSend+0x5c>
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
 8006aee:	e7fe      	b.n	8006aee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d103      	bne.n	8006afe <xQueueGenericSend+0x6a>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d101      	bne.n	8006b02 <xQueueGenericSend+0x6e>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e000      	b.n	8006b04 <xQueueGenericSend+0x70>
 8006b02:	2300      	movs	r3, #0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d109      	bne.n	8006b1c <xQueueGenericSend+0x88>
 8006b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	623b      	str	r3, [r7, #32]
 8006b1a:	e7fe      	b.n	8006b1a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b1c:	f001 fa08 	bl	8007f30 <xTaskGetSchedulerState>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d102      	bne.n	8006b2c <xQueueGenericSend+0x98>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <xQueueGenericSend+0x9c>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e000      	b.n	8006b32 <xQueueGenericSend+0x9e>
 8006b30:	2300      	movs	r3, #0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d109      	bne.n	8006b4a <xQueueGenericSend+0xb6>
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	61fb      	str	r3, [r7, #28]
 8006b48:	e7fe      	b.n	8006b48 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b4a:	f001 fec5 	bl	80088d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d302      	bcc.n	8006b60 <xQueueGenericSend+0xcc>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d129      	bne.n	8006bb4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b66:	f000 f9ff 	bl	8006f68 <prvCopyDataToQueue>
 8006b6a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d010      	beq.n	8006b96 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	3324      	adds	r3, #36	; 0x24
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f001 f81f 	bl	8007bbc <xTaskRemoveFromEventList>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d013      	beq.n	8006bac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b84:	4b3f      	ldr	r3, [pc, #252]	; (8006c84 <xQueueGenericSend+0x1f0>)
 8006b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	e00a      	b.n	8006bac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d007      	beq.n	8006bac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b9c:	4b39      	ldr	r3, [pc, #228]	; (8006c84 <xQueueGenericSend+0x1f0>)
 8006b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bac:	f001 fec2 	bl	8008934 <vPortExitCritical>
				return pdPASS;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e063      	b.n	8006c7c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d103      	bne.n	8006bc2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bba:	f001 febb 	bl	8008934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e05c      	b.n	8006c7c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d106      	bne.n	8006bd6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bc8:	f107 0314 	add.w	r3, r7, #20
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 f857 	bl	8007c80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bd6:	f001 fead 	bl	8008934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bda:	f000 fdcf 	bl	800777c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bde:	f001 fe7b 	bl	80088d8 <vPortEnterCritical>
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006be8:	b25b      	sxtb	r3, r3
 8006bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bee:	d103      	bne.n	8006bf8 <xQueueGenericSend+0x164>
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bfe:	b25b      	sxtb	r3, r3
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d103      	bne.n	8006c0e <xQueueGenericSend+0x17a>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c0e:	f001 fe91 	bl	8008934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c12:	1d3a      	adds	r2, r7, #4
 8006c14:	f107 0314 	add.w	r3, r7, #20
 8006c18:	4611      	mov	r1, r2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 f846 	bl	8007cac <xTaskCheckForTimeOut>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d124      	bne.n	8006c70 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c28:	f000 fa96 	bl	8007158 <prvIsQueueFull>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d018      	beq.n	8006c64 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	3310      	adds	r3, #16
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	4611      	mov	r1, r2
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 ff70 	bl	8007b20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c42:	f000 fa21 	bl	8007088 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c46:	f000 fda7 	bl	8007798 <xTaskResumeAll>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f47f af7c 	bne.w	8006b4a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006c52:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <xQueueGenericSend+0x1f0>)
 8006c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	e772      	b.n	8006b4a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c66:	f000 fa0f 	bl	8007088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c6a:	f000 fd95 	bl	8007798 <xTaskResumeAll>
 8006c6e:	e76c      	b.n	8006b4a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c72:	f000 fa09 	bl	8007088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c76:	f000 fd8f 	bl	8007798 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c7a:	2300      	movs	r3, #0
		}
	}
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3738      	adds	r7, #56	; 0x38
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	e000ed04 	.word	0xe000ed04

08006c88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b08e      	sub	sp, #56	; 0x38
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d109      	bne.n	8006cb4 <xQueueGenericSendFromISR+0x2c>
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb2:	e7fe      	b.n	8006cb2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d103      	bne.n	8006cc2 <xQueueGenericSendFromISR+0x3a>
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <xQueueGenericSendFromISR+0x3e>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e000      	b.n	8006cc8 <xQueueGenericSendFromISR+0x40>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d109      	bne.n	8006ce0 <xQueueGenericSendFromISR+0x58>
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	623b      	str	r3, [r7, #32]
 8006cde:	e7fe      	b.n	8006cde <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d103      	bne.n	8006cee <xQueueGenericSendFromISR+0x66>
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d101      	bne.n	8006cf2 <xQueueGenericSendFromISR+0x6a>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e000      	b.n	8006cf4 <xQueueGenericSendFromISR+0x6c>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d109      	bne.n	8006d0c <xQueueGenericSendFromISR+0x84>
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	e7fe      	b.n	8006d0a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d0c:	f001 fe9e 	bl	8008a4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d10:	f3ef 8211 	mrs	r2, BASEPRI
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	61ba      	str	r2, [r7, #24]
 8006d26:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d28:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d302      	bcc.n	8006d3e <xQueueGenericSendFromISR+0xb6>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d12c      	bne.n	8006d98 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d4e:	f000 f90b 	bl	8006f68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d52:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5a:	d112      	bne.n	8006d82 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d016      	beq.n	8006d92 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	3324      	adds	r3, #36	; 0x24
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 ff27 	bl	8007bbc <xTaskRemoveFromEventList>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00e      	beq.n	8006d92 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00b      	beq.n	8006d92 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e007      	b.n	8006d92 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d86:	3301      	adds	r3, #1
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	b25a      	sxtb	r2, r3
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d92:	2301      	movs	r3, #1
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006d96:	e001      	b.n	8006d9c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3738      	adds	r7, #56	; 0x38
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08c      	sub	sp, #48	; 0x30
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d109      	bne.n	8006dde <xQueueReceive+0x2e>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	623b      	str	r3, [r7, #32]
 8006ddc:	e7fe      	b.n	8006ddc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d103      	bne.n	8006dec <xQueueReceive+0x3c>
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <xQueueReceive+0x40>
 8006dec:	2301      	movs	r3, #1
 8006dee:	e000      	b.n	8006df2 <xQueueReceive+0x42>
 8006df0:	2300      	movs	r3, #0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d109      	bne.n	8006e0a <xQueueReceive+0x5a>
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	61fb      	str	r3, [r7, #28]
 8006e08:	e7fe      	b.n	8006e08 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e0a:	f001 f891 	bl	8007f30 <xTaskGetSchedulerState>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <xQueueReceive+0x6a>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <xQueueReceive+0x6e>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <xQueueReceive+0x70>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <xQueueReceive+0x88>
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	e7fe      	b.n	8006e36 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e38:	f001 fd4e 	bl	80088d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01f      	beq.n	8006e88 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e4c:	f000 f8f6 	bl	800703c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	1e5a      	subs	r2, r3, #1
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00f      	beq.n	8006e80 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	3310      	adds	r3, #16
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fea9 	bl	8007bbc <xTaskRemoveFromEventList>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d007      	beq.n	8006e80 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e70:	4b3c      	ldr	r3, [pc, #240]	; (8006f64 <xQueueReceive+0x1b4>)
 8006e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e80:	f001 fd58 	bl	8008934 <vPortExitCritical>
				return pdPASS;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e069      	b.n	8006f5c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d103      	bne.n	8006e96 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e8e:	f001 fd51 	bl	8008934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e062      	b.n	8006f5c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d106      	bne.n	8006eaa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e9c:	f107 0310 	add.w	r3, r7, #16
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 feed 	bl	8007c80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006eaa:	f001 fd43 	bl	8008934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eae:	f000 fc65 	bl	800777c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eb2:	f001 fd11 	bl	80088d8 <vPortEnterCritical>
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ebc:	b25b      	sxtb	r3, r3
 8006ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec2:	d103      	bne.n	8006ecc <xQueueReceive+0x11c>
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ed2:	b25b      	sxtb	r3, r3
 8006ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed8:	d103      	bne.n	8006ee2 <xQueueReceive+0x132>
 8006eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ee2:	f001 fd27 	bl	8008934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ee6:	1d3a      	adds	r2, r7, #4
 8006ee8:	f107 0310 	add.w	r3, r7, #16
 8006eec:	4611      	mov	r1, r2
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 fedc 	bl	8007cac <xTaskCheckForTimeOut>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d123      	bne.n	8006f42 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006efc:	f000 f916 	bl	800712c <prvIsQueueEmpty>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d017      	beq.n	8006f36 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	3324      	adds	r3, #36	; 0x24
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fe06 	bl	8007b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f16:	f000 f8b7 	bl	8007088 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f1a:	f000 fc3d 	bl	8007798 <xTaskResumeAll>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d189      	bne.n	8006e38 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006f24:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <xQueueReceive+0x1b4>)
 8006f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	e780      	b.n	8006e38 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f38:	f000 f8a6 	bl	8007088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f3c:	f000 fc2c 	bl	8007798 <xTaskResumeAll>
 8006f40:	e77a      	b.n	8006e38 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f44:	f000 f8a0 	bl	8007088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f48:	f000 fc26 	bl	8007798 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f4e:	f000 f8ed 	bl	800712c <prvIsQueueEmpty>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f43f af6f 	beq.w	8006e38 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3730      	adds	r7, #48	; 0x30
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f74:	2300      	movs	r3, #0
 8006f76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10d      	bne.n	8006fa2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d14d      	bne.n	800702a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 ffea 	bl	8007f6c <xTaskPriorityDisinherit>
 8006f98:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	605a      	str	r2, [r3, #4]
 8006fa0:	e043      	b.n	800702a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d119      	bne.n	8006fdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6898      	ldr	r0, [r3, #8]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	68b9      	ldr	r1, [r7, #8]
 8006fb4:	f002 fc1a 	bl	80097ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	441a      	add	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d32b      	bcc.n	800702a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	609a      	str	r2, [r3, #8]
 8006fda:	e026      	b.n	800702a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	68d8      	ldr	r0, [r3, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	f002 fc00 	bl	80097ec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	68da      	ldr	r2, [r3, #12]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	425b      	negs	r3, r3
 8006ff6:	441a      	add	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d207      	bcs.n	8007018 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007010:	425b      	negs	r3, r3
 8007012:	441a      	add	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d105      	bne.n	800702a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	3b01      	subs	r3, #1
 8007028:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007032:	697b      	ldr	r3, [r7, #20]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	d018      	beq.n	8007080 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	441a      	add	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	429a      	cmp	r2, r3
 8007066:	d303      	bcc.n	8007070 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68d9      	ldr	r1, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	461a      	mov	r2, r3
 800707a:	6838      	ldr	r0, [r7, #0]
 800707c:	f002 fbb6 	bl	80097ec <memcpy>
	}
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007090:	f001 fc22 	bl	80088d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800709a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800709c:	e011      	b.n	80070c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d012      	beq.n	80070cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3324      	adds	r3, #36	; 0x24
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fd86 	bl	8007bbc <xTaskRemoveFromEventList>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070b6:	f000 fe59 	bl	8007d6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	3b01      	subs	r3, #1
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	dce9      	bgt.n	800709e <prvUnlockQueue+0x16>
 80070ca:	e000      	b.n	80070ce <prvUnlockQueue+0x46>
					break;
 80070cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	22ff      	movs	r2, #255	; 0xff
 80070d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80070d6:	f001 fc2d 	bl	8008934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070da:	f001 fbfd 	bl	80088d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070e6:	e011      	b.n	800710c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d012      	beq.n	8007116 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3310      	adds	r3, #16
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 fd61 	bl	8007bbc <xTaskRemoveFromEventList>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007100:	f000 fe34 	bl	8007d6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007104:	7bbb      	ldrb	r3, [r7, #14]
 8007106:	3b01      	subs	r3, #1
 8007108:	b2db      	uxtb	r3, r3
 800710a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800710c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007110:	2b00      	cmp	r3, #0
 8007112:	dce9      	bgt.n	80070e8 <prvUnlockQueue+0x60>
 8007114:	e000      	b.n	8007118 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007116:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	22ff      	movs	r2, #255	; 0xff
 800711c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007120:	f001 fc08 	bl	8008934 <vPortExitCritical>
}
 8007124:	bf00      	nop
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007134:	f001 fbd0 	bl	80088d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	2b00      	cmp	r3, #0
 800713e:	d102      	bne.n	8007146 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007140:	2301      	movs	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e001      	b.n	800714a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800714a:	f001 fbf3 	bl	8008934 <vPortExitCritical>

	return xReturn;
 800714e:	68fb      	ldr	r3, [r7, #12]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007160:	f001 fbba 	bl	80088d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	429a      	cmp	r2, r3
 800716e:	d102      	bne.n	8007176 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007170:	2301      	movs	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	e001      	b.n	800717a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800717a:	f001 fbdb 	bl	8008934 <vPortExitCritical>

	return xReturn;
 800717e:	68fb      	ldr	r3, [r7, #12]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007192:	2300      	movs	r3, #0
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	e014      	b.n	80071c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007198:	4a0e      	ldr	r2, [pc, #56]	; (80071d4 <vQueueAddToRegistry+0x4c>)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10b      	bne.n	80071bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071a4:	490b      	ldr	r1, [pc, #44]	; (80071d4 <vQueueAddToRegistry+0x4c>)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <vQueueAddToRegistry+0x4c>)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	4413      	add	r3, r2
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071ba:	e005      	b.n	80071c8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3301      	adds	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b07      	cmp	r3, #7
 80071c6:	d9e7      	bls.n	8007198 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071c8:	bf00      	nop
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bc80      	pop	{r7}
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	20001cf4 	.word	0x20001cf4

080071d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071e8:	f001 fb76 	bl	80088d8 <vPortEnterCritical>
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071f2:	b25b      	sxtb	r3, r3
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f8:	d103      	bne.n	8007202 <vQueueWaitForMessageRestricted+0x2a>
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007208:	b25b      	sxtb	r3, r3
 800720a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720e:	d103      	bne.n	8007218 <vQueueWaitForMessageRestricted+0x40>
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007218:	f001 fb8c 	bl	8008934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d106      	bne.n	8007232 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	3324      	adds	r3, #36	; 0x24
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	68b9      	ldr	r1, [r7, #8]
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fc9b 	bl	8007b68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007232:	6978      	ldr	r0, [r7, #20]
 8007234:	f7ff ff28 	bl	8007088 <prvUnlockQueue>
	}
 8007238:	bf00      	nop
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08e      	sub	sp, #56	; 0x38
 8007244:	af04      	add	r7, sp, #16
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800724e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007250:	2b00      	cmp	r3, #0
 8007252:	d109      	bne.n	8007268 <xTaskCreateStatic+0x28>
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	623b      	str	r3, [r7, #32]
 8007266:	e7fe      	b.n	8007266 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <xTaskCreateStatic+0x42>
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	61fb      	str	r3, [r7, #28]
 8007280:	e7fe      	b.n	8007280 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007282:	235c      	movs	r3, #92	; 0x5c
 8007284:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2b5c      	cmp	r3, #92	; 0x5c
 800728a:	d009      	beq.n	80072a0 <xTaskCreateStatic+0x60>
 800728c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	e7fe      	b.n	800729e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01e      	beq.n	80072e4 <xTaskCreateStatic+0xa4>
 80072a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d01b      	beq.n	80072e4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	2202      	movs	r2, #2
 80072ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072be:	2300      	movs	r3, #0
 80072c0:	9303      	str	r3, [sp, #12]
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	9302      	str	r3, [sp, #8]
 80072c6:	f107 0314 	add.w	r3, r7, #20
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f850 	bl	800737c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072de:	f000 f8d3 	bl	8007488 <prvAddNewTaskToReadyList>
 80072e2:	e001      	b.n	80072e8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072e8:	697b      	ldr	r3, [r7, #20]
	}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3728      	adds	r7, #40	; 0x28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b08c      	sub	sp, #48	; 0x30
 80072f6:	af04      	add	r7, sp, #16
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	603b      	str	r3, [r7, #0]
 80072fe:	4613      	mov	r3, r2
 8007300:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4618      	mov	r0, r3
 8007308:	f001 fbdc 	bl	8008ac4 <pvPortMalloc>
 800730c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00e      	beq.n	8007332 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007314:	205c      	movs	r0, #92	; 0x5c
 8007316:	f001 fbd5 	bl	8008ac4 <pvPortMalloc>
 800731a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	631a      	str	r2, [r3, #48]	; 0x30
 8007328:	e005      	b.n	8007336 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800732a:	6978      	ldr	r0, [r7, #20]
 800732c:	f001 fc8c 	bl	8008c48 <vPortFree>
 8007330:	e001      	b.n	8007336 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007332:	2300      	movs	r3, #0
 8007334:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d017      	beq.n	800736c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007344:	88fa      	ldrh	r2, [r7, #6]
 8007346:	2300      	movs	r3, #0
 8007348:	9303      	str	r3, [sp, #12]
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	9302      	str	r3, [sp, #8]
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 f80e 	bl	800737c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007360:	69f8      	ldr	r0, [r7, #28]
 8007362:	f000 f891 	bl	8007488 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007366:	2301      	movs	r3, #1
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	e002      	b.n	8007372 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800736c:	f04f 33ff 	mov.w	r3, #4294967295
 8007370:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007372:	69bb      	ldr	r3, [r7, #24]
	}
 8007374:	4618      	mov	r0, r3
 8007376:	3720      	adds	r7, #32
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	461a      	mov	r2, r3
 8007394:	21a5      	movs	r1, #165	; 0xa5
 8007396:	f002 fa34 	bl	8009802 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80073a4:	3b01      	subs	r3, #1
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	f023 0307 	bic.w	r3, r3, #7
 80073b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d009      	beq.n	80073d2 <prvInitialiseNewTask+0x56>
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	e7fe      	b.n	80073d0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073d2:	2300      	movs	r3, #0
 80073d4:	61fb      	str	r3, [r7, #28]
 80073d6:	e012      	b.n	80073fe <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	7819      	ldrb	r1, [r3, #0]
 80073e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	4413      	add	r3, r2
 80073e6:	3334      	adds	r3, #52	; 0x34
 80073e8:	460a      	mov	r2, r1
 80073ea:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	4413      	add	r3, r2
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d006      	beq.n	8007406 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	3301      	adds	r3, #1
 80073fc:	61fb      	str	r3, [r7, #28]
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	2b0f      	cmp	r3, #15
 8007402:	d9e9      	bls.n	80073d8 <prvInitialiseNewTask+0x5c>
 8007404:	e000      	b.n	8007408 <prvInitialiseNewTask+0x8c>
		{
			break;
 8007406:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	2b37      	cmp	r3, #55	; 0x37
 8007414:	d901      	bls.n	800741a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007416:	2337      	movs	r3, #55	; 0x37
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800741e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007424:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	2200      	movs	r2, #0
 800742a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	3304      	adds	r3, #4
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff f9a0 	bl	8006776 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	3318      	adds	r3, #24
 800743a:	4618      	mov	r0, r3
 800743c:	f7ff f99b 	bl	8006776 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007444:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007454:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	2200      	movs	r2, #0
 800745a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	69b8      	ldr	r0, [r7, #24]
 800746a:	f001 f949 	bl	8008700 <pxPortInitialiseStack>
 800746e:	4602      	mov	r2, r0
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800747e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007480:	bf00      	nop
 8007482:	3720      	adds	r7, #32
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007490:	f001 fa22 	bl	80088d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007494:	4b2d      	ldr	r3, [pc, #180]	; (800754c <prvAddNewTaskToReadyList+0xc4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3301      	adds	r3, #1
 800749a:	4a2c      	ldr	r2, [pc, #176]	; (800754c <prvAddNewTaskToReadyList+0xc4>)
 800749c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800749e:	4b2c      	ldr	r3, [pc, #176]	; (8007550 <prvAddNewTaskToReadyList+0xc8>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074a6:	4a2a      	ldr	r2, [pc, #168]	; (8007550 <prvAddNewTaskToReadyList+0xc8>)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074ac:	4b27      	ldr	r3, [pc, #156]	; (800754c <prvAddNewTaskToReadyList+0xc4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d110      	bne.n	80074d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074b4:	f000 fc7e 	bl	8007db4 <prvInitialiseTaskLists>
 80074b8:	e00d      	b.n	80074d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074ba:	4b26      	ldr	r3, [pc, #152]	; (8007554 <prvAddNewTaskToReadyList+0xcc>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d109      	bne.n	80074d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074c2:	4b23      	ldr	r3, [pc, #140]	; (8007550 <prvAddNewTaskToReadyList+0xc8>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d802      	bhi.n	80074d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074d0:	4a1f      	ldr	r2, [pc, #124]	; (8007550 <prvAddNewTaskToReadyList+0xc8>)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074d6:	4b20      	ldr	r3, [pc, #128]	; (8007558 <prvAddNewTaskToReadyList+0xd0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3301      	adds	r3, #1
 80074dc:	4a1e      	ldr	r2, [pc, #120]	; (8007558 <prvAddNewTaskToReadyList+0xd0>)
 80074de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074e0:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <prvAddNewTaskToReadyList+0xd0>)
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ec:	4b1b      	ldr	r3, [pc, #108]	; (800755c <prvAddNewTaskToReadyList+0xd4>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d903      	bls.n	80074fc <prvAddNewTaskToReadyList+0x74>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	4a18      	ldr	r2, [pc, #96]	; (800755c <prvAddNewTaskToReadyList+0xd4>)
 80074fa:	6013      	str	r3, [r2, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4a15      	ldr	r2, [pc, #84]	; (8007560 <prvAddNewTaskToReadyList+0xd8>)
 800750a:	441a      	add	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	3304      	adds	r3, #4
 8007510:	4619      	mov	r1, r3
 8007512:	4610      	mov	r0, r2
 8007514:	f7ff f93b 	bl	800678e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007518:	f001 fa0c 	bl	8008934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800751c:	4b0d      	ldr	r3, [pc, #52]	; (8007554 <prvAddNewTaskToReadyList+0xcc>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00e      	beq.n	8007542 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007524:	4b0a      	ldr	r3, [pc, #40]	; (8007550 <prvAddNewTaskToReadyList+0xc8>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	429a      	cmp	r2, r3
 8007530:	d207      	bcs.n	8007542 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007532:	4b0c      	ldr	r3, [pc, #48]	; (8007564 <prvAddNewTaskToReadyList+0xdc>)
 8007534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007542:	bf00      	nop
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000d34 	.word	0x20000d34
 8007550:	20000860 	.word	0x20000860
 8007554:	20000d40 	.word	0x20000d40
 8007558:	20000d50 	.word	0x20000d50
 800755c:	20000d3c 	.word	0x20000d3c
 8007560:	20000864 	.word	0x20000864
 8007564:	e000ed04 	.word	0xe000ed04

08007568 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007570:	f001 f9b2 	bl	80088d8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <vTaskDelete+0x18>
 800757a:	4b2c      	ldr	r3, [pc, #176]	; (800762c <vTaskDelete+0xc4>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	e000      	b.n	8007582 <vTaskDelete+0x1a>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3304      	adds	r3, #4
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff f95b 	bl	8006844 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007592:	2b00      	cmp	r3, #0
 8007594:	d004      	beq.n	80075a0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3318      	adds	r3, #24
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff f952 	bl	8006844 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80075a0:	4b23      	ldr	r3, [pc, #140]	; (8007630 <vTaskDelete+0xc8>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3301      	adds	r3, #1
 80075a6:	4a22      	ldr	r2, [pc, #136]	; (8007630 <vTaskDelete+0xc8>)
 80075a8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80075aa:	4b20      	ldr	r3, [pc, #128]	; (800762c <vTaskDelete+0xc4>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d10b      	bne.n	80075cc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4619      	mov	r1, r3
 80075ba:	481e      	ldr	r0, [pc, #120]	; (8007634 <vTaskDelete+0xcc>)
 80075bc:	f7ff f8e7 	bl	800678e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80075c0:	4b1d      	ldr	r3, [pc, #116]	; (8007638 <vTaskDelete+0xd0>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3301      	adds	r3, #1
 80075c6:	4a1c      	ldr	r2, [pc, #112]	; (8007638 <vTaskDelete+0xd0>)
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	e009      	b.n	80075e0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80075cc:	4b1b      	ldr	r3, [pc, #108]	; (800763c <vTaskDelete+0xd4>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	4a1a      	ldr	r2, [pc, #104]	; (800763c <vTaskDelete+0xd4>)
 80075d4:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fc58 	bl	8007e8c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80075dc:	f000 fc84 	bl	8007ee8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80075e0:	f001 f9a8 	bl	8008934 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80075e4:	4b16      	ldr	r3, [pc, #88]	; (8007640 <vTaskDelete+0xd8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01a      	beq.n	8007622 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 80075ec:	4b0f      	ldr	r3, [pc, #60]	; (800762c <vTaskDelete+0xc4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d115      	bne.n	8007622 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80075f6:	4b13      	ldr	r3, [pc, #76]	; (8007644 <vTaskDelete+0xdc>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d009      	beq.n	8007612 <vTaskDelete+0xaa>
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	60bb      	str	r3, [r7, #8]
 8007610:	e7fe      	b.n	8007610 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8007612:	4b0d      	ldr	r3, [pc, #52]	; (8007648 <vTaskDelete+0xe0>)
 8007614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007622:	bf00      	nop
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000860 	.word	0x20000860
 8007630:	20000d50 	.word	0x20000d50
 8007634:	20000d08 	.word	0x20000d08
 8007638:	20000d1c 	.word	0x20000d1c
 800763c:	20000d34 	.word	0x20000d34
 8007640:	20000d40 	.word	0x20000d40
 8007644:	20000d5c 	.word	0x20000d5c
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d016      	beq.n	800768c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800765e:	4b13      	ldr	r3, [pc, #76]	; (80076ac <vTaskDelay+0x60>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d009      	beq.n	800767a <vTaskDelay+0x2e>
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	60bb      	str	r3, [r7, #8]
 8007678:	e7fe      	b.n	8007678 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800767a:	f000 f87f 	bl	800777c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800767e:	2100      	movs	r1, #0
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fcdf 	bl	8008044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007686:	f000 f887 	bl	8007798 <xTaskResumeAll>
 800768a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d107      	bne.n	80076a2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007692:	4b07      	ldr	r3, [pc, #28]	; (80076b0 <vTaskDelay+0x64>)
 8007694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076a2:	bf00      	nop
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000d5c 	.word	0x20000d5c
 80076b0:	e000ed04 	.word	0xe000ed04

080076b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08a      	sub	sp, #40	; 0x28
 80076b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076c2:	463a      	mov	r2, r7
 80076c4:	1d39      	adds	r1, r7, #4
 80076c6:	f107 0308 	add.w	r3, r7, #8
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff f802 	bl	80066d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	9202      	str	r2, [sp, #8]
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	2300      	movs	r3, #0
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	2300      	movs	r3, #0
 80076e0:	460a      	mov	r2, r1
 80076e2:	4920      	ldr	r1, [pc, #128]	; (8007764 <vTaskStartScheduler+0xb0>)
 80076e4:	4820      	ldr	r0, [pc, #128]	; (8007768 <vTaskStartScheduler+0xb4>)
 80076e6:	f7ff fdab 	bl	8007240 <xTaskCreateStatic>
 80076ea:	4602      	mov	r2, r0
 80076ec:	4b1f      	ldr	r3, [pc, #124]	; (800776c <vTaskStartScheduler+0xb8>)
 80076ee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076f0:	4b1e      	ldr	r3, [pc, #120]	; (800776c <vTaskStartScheduler+0xb8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076f8:	2301      	movs	r3, #1
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	e001      	b.n	8007702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076fe:	2300      	movs	r3, #0
 8007700:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d102      	bne.n	800770e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007708:	f000 fcf0 	bl	80080ec <xTimerCreateTimerTask>
 800770c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d115      	bne.n	8007740 <vTaskStartScheduler+0x8c>
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007726:	4b12      	ldr	r3, [pc, #72]	; (8007770 <vTaskStartScheduler+0xbc>)
 8007728:	f04f 32ff 	mov.w	r2, #4294967295
 800772c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800772e:	4b11      	ldr	r3, [pc, #68]	; (8007774 <vTaskStartScheduler+0xc0>)
 8007730:	2201      	movs	r2, #1
 8007732:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007734:	4b10      	ldr	r3, [pc, #64]	; (8007778 <vTaskStartScheduler+0xc4>)
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800773a:	f001 f85d 	bl	80087f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800773e:	e00d      	b.n	800775c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007746:	d109      	bne.n	800775c <vTaskStartScheduler+0xa8>
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e7fe      	b.n	800775a <vTaskStartScheduler+0xa6>
}
 800775c:	bf00      	nop
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	080098b8 	.word	0x080098b8
 8007768:	08007d85 	.word	0x08007d85
 800776c:	20000d58 	.word	0x20000d58
 8007770:	20000d54 	.word	0x20000d54
 8007774:	20000d40 	.word	0x20000d40
 8007778:	20000d38 	.word	0x20000d38

0800777c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007780:	4b04      	ldr	r3, [pc, #16]	; (8007794 <vTaskSuspendAll+0x18>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3301      	adds	r3, #1
 8007786:	4a03      	ldr	r2, [pc, #12]	; (8007794 <vTaskSuspendAll+0x18>)
 8007788:	6013      	str	r3, [r2, #0]
}
 800778a:	bf00      	nop
 800778c:	46bd      	mov	sp, r7
 800778e:	bc80      	pop	{r7}
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	20000d5c 	.word	0x20000d5c

08007798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077a6:	4b41      	ldr	r3, [pc, #260]	; (80078ac <xTaskResumeAll+0x114>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d109      	bne.n	80077c2 <xTaskResumeAll+0x2a>
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	e7fe      	b.n	80077c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077c2:	f001 f889 	bl	80088d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077c6:	4b39      	ldr	r3, [pc, #228]	; (80078ac <xTaskResumeAll+0x114>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	4a37      	ldr	r2, [pc, #220]	; (80078ac <xTaskResumeAll+0x114>)
 80077ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d0:	4b36      	ldr	r3, [pc, #216]	; (80078ac <xTaskResumeAll+0x114>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d162      	bne.n	800789e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077d8:	4b35      	ldr	r3, [pc, #212]	; (80078b0 <xTaskResumeAll+0x118>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d05e      	beq.n	800789e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077e0:	e02f      	b.n	8007842 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80077e2:	4b34      	ldr	r3, [pc, #208]	; (80078b4 <xTaskResumeAll+0x11c>)
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3318      	adds	r3, #24
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff f828 	bl	8006844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff f823 	bl	8006844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007802:	4b2d      	ldr	r3, [pc, #180]	; (80078b8 <xTaskResumeAll+0x120>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d903      	bls.n	8007812 <xTaskResumeAll+0x7a>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	4a2a      	ldr	r2, [pc, #168]	; (80078b8 <xTaskResumeAll+0x120>)
 8007810:	6013      	str	r3, [r2, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007816:	4613      	mov	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4a27      	ldr	r2, [pc, #156]	; (80078bc <xTaskResumeAll+0x124>)
 8007820:	441a      	add	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3304      	adds	r3, #4
 8007826:	4619      	mov	r1, r3
 8007828:	4610      	mov	r0, r2
 800782a:	f7fe ffb0 	bl	800678e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007832:	4b23      	ldr	r3, [pc, #140]	; (80078c0 <xTaskResumeAll+0x128>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	429a      	cmp	r2, r3
 800783a:	d302      	bcc.n	8007842 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800783c:	4b21      	ldr	r3, [pc, #132]	; (80078c4 <xTaskResumeAll+0x12c>)
 800783e:	2201      	movs	r2, #1
 8007840:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007842:	4b1c      	ldr	r3, [pc, #112]	; (80078b4 <xTaskResumeAll+0x11c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1cb      	bne.n	80077e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007850:	f000 fb4a 	bl	8007ee8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007854:	4b1c      	ldr	r3, [pc, #112]	; (80078c8 <xTaskResumeAll+0x130>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d010      	beq.n	8007882 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007860:	f000 f844 	bl	80078ec <xTaskIncrementTick>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800786a:	4b16      	ldr	r3, [pc, #88]	; (80078c4 <xTaskResumeAll+0x12c>)
 800786c:	2201      	movs	r2, #1
 800786e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3b01      	subs	r3, #1
 8007874:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f1      	bne.n	8007860 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800787c:	4b12      	ldr	r3, [pc, #72]	; (80078c8 <xTaskResumeAll+0x130>)
 800787e:	2200      	movs	r2, #0
 8007880:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007882:	4b10      	ldr	r3, [pc, #64]	; (80078c4 <xTaskResumeAll+0x12c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800788a:	2301      	movs	r3, #1
 800788c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800788e:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <xTaskResumeAll+0x134>)
 8007890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800789e:	f001 f849 	bl	8008934 <vPortExitCritical>

	return xAlreadyYielded;
 80078a2:	68bb      	ldr	r3, [r7, #8]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	20000d5c 	.word	0x20000d5c
 80078b0:	20000d34 	.word	0x20000d34
 80078b4:	20000cf4 	.word	0x20000cf4
 80078b8:	20000d3c 	.word	0x20000d3c
 80078bc:	20000864 	.word	0x20000864
 80078c0:	20000860 	.word	0x20000860
 80078c4:	20000d48 	.word	0x20000d48
 80078c8:	20000d44 	.word	0x20000d44
 80078cc:	e000ed04 	.word	0xe000ed04

080078d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078d6:	4b04      	ldr	r3, [pc, #16]	; (80078e8 <xTaskGetTickCount+0x18>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078dc:	687b      	ldr	r3, [r7, #4]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bc80      	pop	{r7}
 80078e6:	4770      	bx	lr
 80078e8:	20000d38 	.word	0x20000d38

080078ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078f2:	2300      	movs	r3, #0
 80078f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078f6:	4b51      	ldr	r3, [pc, #324]	; (8007a3c <xTaskIncrementTick+0x150>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f040 808d 	bne.w	8007a1a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007900:	4b4f      	ldr	r3, [pc, #316]	; (8007a40 <xTaskIncrementTick+0x154>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3301      	adds	r3, #1
 8007906:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007908:	4a4d      	ldr	r2, [pc, #308]	; (8007a40 <xTaskIncrementTick+0x154>)
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d11f      	bne.n	8007954 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007914:	4b4b      	ldr	r3, [pc, #300]	; (8007a44 <xTaskIncrementTick+0x158>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d009      	beq.n	8007932 <xTaskIncrementTick+0x46>
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	603b      	str	r3, [r7, #0]
 8007930:	e7fe      	b.n	8007930 <xTaskIncrementTick+0x44>
 8007932:	4b44      	ldr	r3, [pc, #272]	; (8007a44 <xTaskIncrementTick+0x158>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	4b43      	ldr	r3, [pc, #268]	; (8007a48 <xTaskIncrementTick+0x15c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a41      	ldr	r2, [pc, #260]	; (8007a44 <xTaskIncrementTick+0x158>)
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	4a41      	ldr	r2, [pc, #260]	; (8007a48 <xTaskIncrementTick+0x15c>)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	4b41      	ldr	r3, [pc, #260]	; (8007a4c <xTaskIncrementTick+0x160>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3301      	adds	r3, #1
 800794c:	4a3f      	ldr	r2, [pc, #252]	; (8007a4c <xTaskIncrementTick+0x160>)
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	f000 faca 	bl	8007ee8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007954:	4b3e      	ldr	r3, [pc, #248]	; (8007a50 <xTaskIncrementTick+0x164>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	429a      	cmp	r2, r3
 800795c:	d34e      	bcc.n	80079fc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800795e:	4b39      	ldr	r3, [pc, #228]	; (8007a44 <xTaskIncrementTick+0x158>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <xTaskIncrementTick+0x80>
 8007968:	2301      	movs	r3, #1
 800796a:	e000      	b.n	800796e <xTaskIncrementTick+0x82>
 800796c:	2300      	movs	r3, #0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d004      	beq.n	800797c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007972:	4b37      	ldr	r3, [pc, #220]	; (8007a50 <xTaskIncrementTick+0x164>)
 8007974:	f04f 32ff 	mov.w	r2, #4294967295
 8007978:	601a      	str	r2, [r3, #0]
					break;
 800797a:	e03f      	b.n	80079fc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800797c:	4b31      	ldr	r3, [pc, #196]	; (8007a44 <xTaskIncrementTick+0x158>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	429a      	cmp	r2, r3
 8007992:	d203      	bcs.n	800799c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007994:	4a2e      	ldr	r2, [pc, #184]	; (8007a50 <xTaskIncrementTick+0x164>)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6013      	str	r3, [r2, #0]
						break;
 800799a:	e02f      	b.n	80079fc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	3304      	adds	r3, #4
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe ff4f 	bl	8006844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d004      	beq.n	80079b8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	3318      	adds	r3, #24
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe ff46 	bl	8006844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079bc:	4b25      	ldr	r3, [pc, #148]	; (8007a54 <xTaskIncrementTick+0x168>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d903      	bls.n	80079cc <xTaskIncrementTick+0xe0>
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	4a22      	ldr	r2, [pc, #136]	; (8007a54 <xTaskIncrementTick+0x168>)
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4a1f      	ldr	r2, [pc, #124]	; (8007a58 <xTaskIncrementTick+0x16c>)
 80079da:	441a      	add	r2, r3
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	3304      	adds	r3, #4
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f7fe fed3 	bl	800678e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ec:	4b1b      	ldr	r3, [pc, #108]	; (8007a5c <xTaskIncrementTick+0x170>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d3b3      	bcc.n	800795e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80079f6:	2301      	movs	r3, #1
 80079f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079fa:	e7b0      	b.n	800795e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079fc:	4b17      	ldr	r3, [pc, #92]	; (8007a5c <xTaskIncrementTick+0x170>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a02:	4915      	ldr	r1, [pc, #84]	; (8007a58 <xTaskIncrementTick+0x16c>)
 8007a04:	4613      	mov	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	440b      	add	r3, r1
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d907      	bls.n	8007a24 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007a14:	2301      	movs	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e004      	b.n	8007a24 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a1a:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <xTaskIncrementTick+0x174>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	4a0f      	ldr	r2, [pc, #60]	; (8007a60 <xTaskIncrementTick+0x174>)
 8007a22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a24:	4b0f      	ldr	r3, [pc, #60]	; (8007a64 <xTaskIncrementTick+0x178>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a30:	697b      	ldr	r3, [r7, #20]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000d5c 	.word	0x20000d5c
 8007a40:	20000d38 	.word	0x20000d38
 8007a44:	20000cec 	.word	0x20000cec
 8007a48:	20000cf0 	.word	0x20000cf0
 8007a4c:	20000d4c 	.word	0x20000d4c
 8007a50:	20000d54 	.word	0x20000d54
 8007a54:	20000d3c 	.word	0x20000d3c
 8007a58:	20000864 	.word	0x20000864
 8007a5c:	20000860 	.word	0x20000860
 8007a60:	20000d44 	.word	0x20000d44
 8007a64:	20000d48 	.word	0x20000d48

08007a68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a6e:	4b27      	ldr	r3, [pc, #156]	; (8007b0c <vTaskSwitchContext+0xa4>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a76:	4b26      	ldr	r3, [pc, #152]	; (8007b10 <vTaskSwitchContext+0xa8>)
 8007a78:	2201      	movs	r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a7c:	e040      	b.n	8007b00 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007a7e:	4b24      	ldr	r3, [pc, #144]	; (8007b10 <vTaskSwitchContext+0xa8>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007a84:	4b23      	ldr	r3, [pc, #140]	; (8007b14 <vTaskSwitchContext+0xac>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	e00f      	b.n	8007aac <vTaskSwitchContext+0x44>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d109      	bne.n	8007aa6 <vTaskSwitchContext+0x3e>
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	607b      	str	r3, [r7, #4]
 8007aa4:	e7fe      	b.n	8007aa4 <vTaskSwitchContext+0x3c>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	491a      	ldr	r1, [pc, #104]	; (8007b18 <vTaskSwitchContext+0xb0>)
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	440b      	add	r3, r1
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0e5      	beq.n	8007a8c <vTaskSwitchContext+0x24>
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4a13      	ldr	r2, [pc, #76]	; (8007b18 <vTaskSwitchContext+0xb0>)
 8007acc:	4413      	add	r3, r2
 8007ace:	60bb      	str	r3, [r7, #8]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	605a      	str	r2, [r3, #4]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d104      	bne.n	8007af0 <vTaskSwitchContext+0x88>
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	605a      	str	r2, [r3, #4]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	4a09      	ldr	r2, [pc, #36]	; (8007b1c <vTaskSwitchContext+0xb4>)
 8007af8:	6013      	str	r3, [r2, #0]
 8007afa:	4a06      	ldr	r2, [pc, #24]	; (8007b14 <vTaskSwitchContext+0xac>)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6013      	str	r3, [r2, #0]
}
 8007b00:	bf00      	nop
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bc80      	pop	{r7}
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	20000d5c 	.word	0x20000d5c
 8007b10:	20000d48 	.word	0x20000d48
 8007b14:	20000d3c 	.word	0x20000d3c
 8007b18:	20000864 	.word	0x20000864
 8007b1c:	20000860 	.word	0x20000860

08007b20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d109      	bne.n	8007b44 <vTaskPlaceOnEventList+0x24>
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	e7fe      	b.n	8007b42 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b44:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <vTaskPlaceOnEventList+0x44>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3318      	adds	r3, #24
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7fe fe41 	bl	80067d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b52:	2101      	movs	r1, #1
 8007b54:	6838      	ldr	r0, [r7, #0]
 8007b56:	f000 fa75 	bl	8008044 <prvAddCurrentTaskToDelayedList>
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20000860 	.word	0x20000860

08007b68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d109      	bne.n	8007b8e <vTaskPlaceOnEventListRestricted+0x26>
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	e7fe      	b.n	8007b8c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b8e:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <vTaskPlaceOnEventListRestricted+0x50>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3318      	adds	r3, #24
 8007b94:	4619      	mov	r1, r3
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7fe fdf9 	bl	800678e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	68b8      	ldr	r0, [r7, #8]
 8007bac:	f000 fa4a 	bl	8008044 <prvAddCurrentTaskToDelayedList>
	}
 8007bb0:	bf00      	nop
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	20000860 	.word	0x20000860

08007bbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d109      	bne.n	8007be6 <xTaskRemoveFromEventList+0x2a>
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	e7fe      	b.n	8007be4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	3318      	adds	r3, #24
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fe2a 	bl	8006844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bf0:	4b1d      	ldr	r3, [pc, #116]	; (8007c68 <xTaskRemoveFromEventList+0xac>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d11d      	bne.n	8007c34 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fe fe21 	bl	8006844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c06:	4b19      	ldr	r3, [pc, #100]	; (8007c6c <xTaskRemoveFromEventList+0xb0>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d903      	bls.n	8007c16 <xTaskRemoveFromEventList+0x5a>
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c12:	4a16      	ldr	r2, [pc, #88]	; (8007c6c <xTaskRemoveFromEventList+0xb0>)
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4a13      	ldr	r2, [pc, #76]	; (8007c70 <xTaskRemoveFromEventList+0xb4>)
 8007c24:	441a      	add	r2, r3
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	f7fe fdae 	bl	800678e <vListInsertEnd>
 8007c32:	e005      	b.n	8007c40 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	3318      	adds	r3, #24
 8007c38:	4619      	mov	r1, r3
 8007c3a:	480e      	ldr	r0, [pc, #56]	; (8007c74 <xTaskRemoveFromEventList+0xb8>)
 8007c3c:	f7fe fda7 	bl	800678e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c44:	4b0c      	ldr	r3, [pc, #48]	; (8007c78 <xTaskRemoveFromEventList+0xbc>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d905      	bls.n	8007c5a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c52:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <xTaskRemoveFromEventList+0xc0>)
 8007c54:	2201      	movs	r2, #1
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	e001      	b.n	8007c5e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007c5e:	697b      	ldr	r3, [r7, #20]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	20000d5c 	.word	0x20000d5c
 8007c6c:	20000d3c 	.word	0x20000d3c
 8007c70:	20000864 	.word	0x20000864
 8007c74:	20000cf4 	.word	0x20000cf4
 8007c78:	20000860 	.word	0x20000860
 8007c7c:	20000d48 	.word	0x20000d48

08007c80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c88:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <vTaskInternalSetTimeOutState+0x24>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <vTaskInternalSetTimeOutState+0x28>)
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	605a      	str	r2, [r3, #4]
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bc80      	pop	{r7}
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	20000d4c 	.word	0x20000d4c
 8007ca8:	20000d38 	.word	0x20000d38

08007cac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d109      	bne.n	8007cd0 <xTaskCheckForTimeOut+0x24>
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	613b      	str	r3, [r7, #16]
 8007cce:	e7fe      	b.n	8007cce <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d109      	bne.n	8007cea <xTaskCheckForTimeOut+0x3e>
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	e7fe      	b.n	8007ce8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007cea:	f000 fdf5 	bl	80088d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cee:	4b1d      	ldr	r3, [pc, #116]	; (8007d64 <xTaskCheckForTimeOut+0xb8>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d102      	bne.n	8007d0e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	e023      	b.n	8007d56 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <xTaskCheckForTimeOut+0xbc>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d007      	beq.n	8007d2a <xTaskCheckForTimeOut+0x7e>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d302      	bcc.n	8007d2a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d24:	2301      	movs	r3, #1
 8007d26:	61fb      	str	r3, [r7, #28]
 8007d28:	e015      	b.n	8007d56 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d20b      	bcs.n	8007d4c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	1ad2      	subs	r2, r2, r3
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff ff9d 	bl	8007c80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61fb      	str	r3, [r7, #28]
 8007d4a:	e004      	b.n	8007d56 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d52:	2301      	movs	r3, #1
 8007d54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d56:	f000 fded 	bl	8008934 <vPortExitCritical>

	return xReturn;
 8007d5a:	69fb      	ldr	r3, [r7, #28]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3720      	adds	r7, #32
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20000d38 	.word	0x20000d38
 8007d68:	20000d4c 	.word	0x20000d4c

08007d6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d70:	4b03      	ldr	r3, [pc, #12]	; (8007d80 <vTaskMissedYield+0x14>)
 8007d72:	2201      	movs	r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
}
 8007d76:	bf00      	nop
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bc80      	pop	{r7}
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	20000d48 	.word	0x20000d48

08007d84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d8c:	f000 f852 	bl	8007e34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d90:	4b06      	ldr	r3, [pc, #24]	; (8007dac <prvIdleTask+0x28>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d9f9      	bls.n	8007d8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <prvIdleTask+0x2c>)
 8007d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007da8:	e7f0      	b.n	8007d8c <prvIdleTask+0x8>
 8007daa:	bf00      	nop
 8007dac:	20000864 	.word	0x20000864
 8007db0:	e000ed04 	.word	0xe000ed04

08007db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dba:	2300      	movs	r3, #0
 8007dbc:	607b      	str	r3, [r7, #4]
 8007dbe:	e00c      	b.n	8007dda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4a12      	ldr	r2, [pc, #72]	; (8007e14 <prvInitialiseTaskLists+0x60>)
 8007dcc:	4413      	add	r3, r2
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fcb2 	bl	8006738 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	607b      	str	r3, [r7, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b37      	cmp	r3, #55	; 0x37
 8007dde:	d9ef      	bls.n	8007dc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007de0:	480d      	ldr	r0, [pc, #52]	; (8007e18 <prvInitialiseTaskLists+0x64>)
 8007de2:	f7fe fca9 	bl	8006738 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007de6:	480d      	ldr	r0, [pc, #52]	; (8007e1c <prvInitialiseTaskLists+0x68>)
 8007de8:	f7fe fca6 	bl	8006738 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007dec:	480c      	ldr	r0, [pc, #48]	; (8007e20 <prvInitialiseTaskLists+0x6c>)
 8007dee:	f7fe fca3 	bl	8006738 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007df2:	480c      	ldr	r0, [pc, #48]	; (8007e24 <prvInitialiseTaskLists+0x70>)
 8007df4:	f7fe fca0 	bl	8006738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007df8:	480b      	ldr	r0, [pc, #44]	; (8007e28 <prvInitialiseTaskLists+0x74>)
 8007dfa:	f7fe fc9d 	bl	8006738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dfe:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <prvInitialiseTaskLists+0x78>)
 8007e00:	4a05      	ldr	r2, [pc, #20]	; (8007e18 <prvInitialiseTaskLists+0x64>)
 8007e02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e04:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <prvInitialiseTaskLists+0x7c>)
 8007e06:	4a05      	ldr	r2, [pc, #20]	; (8007e1c <prvInitialiseTaskLists+0x68>)
 8007e08:	601a      	str	r2, [r3, #0]
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000864 	.word	0x20000864
 8007e18:	20000cc4 	.word	0x20000cc4
 8007e1c:	20000cd8 	.word	0x20000cd8
 8007e20:	20000cf4 	.word	0x20000cf4
 8007e24:	20000d08 	.word	0x20000d08
 8007e28:	20000d20 	.word	0x20000d20
 8007e2c:	20000cec 	.word	0x20000cec
 8007e30:	20000cf0 	.word	0x20000cf0

08007e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e3a:	e019      	b.n	8007e70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e3c:	f000 fd4c 	bl	80088d8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e40:	4b0f      	ldr	r3, [pc, #60]	; (8007e80 <prvCheckTasksWaitingTermination+0x4c>)
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe fcf9 	bl	8006844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e52:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <prvCheckTasksWaitingTermination+0x50>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	4a0a      	ldr	r2, [pc, #40]	; (8007e84 <prvCheckTasksWaitingTermination+0x50>)
 8007e5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e5c:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <prvCheckTasksWaitingTermination+0x54>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	4a09      	ldr	r2, [pc, #36]	; (8007e88 <prvCheckTasksWaitingTermination+0x54>)
 8007e64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e66:	f000 fd65 	bl	8008934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f80e 	bl	8007e8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <prvCheckTasksWaitingTermination+0x54>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e1      	bne.n	8007e3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e78:	bf00      	nop
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20000d08 	.word	0x20000d08
 8007e84:	20000d34 	.word	0x20000d34
 8007e88:	20000d1c 	.word	0x20000d1c

08007e8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d108      	bne.n	8007eb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fed0 	bl	8008c48 <vPortFree>
				vPortFree( pxTCB );
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fecd 	bl	8008c48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007eae:	e017      	b.n	8007ee0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d103      	bne.n	8007ec2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fec4 	bl	8008c48 <vPortFree>
	}
 8007ec0:	e00e      	b.n	8007ee0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d009      	beq.n	8007ee0 <prvDeleteTCB+0x54>
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	e7fe      	b.n	8007ede <prvDeleteTCB+0x52>
	}
 8007ee0:	bf00      	nop
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eee:	4b0e      	ldr	r3, [pc, #56]	; (8007f28 <prvResetNextTaskUnblockTime+0x40>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <prvResetNextTaskUnblockTime+0x14>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e000      	b.n	8007efe <prvResetNextTaskUnblockTime+0x16>
 8007efc:	2300      	movs	r3, #0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d004      	beq.n	8007f0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f02:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <prvResetNextTaskUnblockTime+0x44>)
 8007f04:	f04f 32ff 	mov.w	r2, #4294967295
 8007f08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f0a:	e008      	b.n	8007f1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <prvResetNextTaskUnblockTime+0x40>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	4a04      	ldr	r2, [pc, #16]	; (8007f2c <prvResetNextTaskUnblockTime+0x44>)
 8007f1c:	6013      	str	r3, [r2, #0]
}
 8007f1e:	bf00      	nop
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bc80      	pop	{r7}
 8007f26:	4770      	bx	lr
 8007f28:	20000cec 	.word	0x20000cec
 8007f2c:	20000d54 	.word	0x20000d54

08007f30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f36:	4b0b      	ldr	r3, [pc, #44]	; (8007f64 <xTaskGetSchedulerState+0x34>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d102      	bne.n	8007f44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	607b      	str	r3, [r7, #4]
 8007f42:	e008      	b.n	8007f56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f44:	4b08      	ldr	r3, [pc, #32]	; (8007f68 <xTaskGetSchedulerState+0x38>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d102      	bne.n	8007f52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	607b      	str	r3, [r7, #4]
 8007f50:	e001      	b.n	8007f56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f52:	2300      	movs	r3, #0
 8007f54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f56:	687b      	ldr	r3, [r7, #4]
	}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bc80      	pop	{r7}
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000d40 	.word	0x20000d40
 8007f68:	20000d5c 	.word	0x20000d5c

08007f6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d054      	beq.n	800802c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f82:	4b2d      	ldr	r3, [pc, #180]	; (8008038 <xTaskPriorityDisinherit+0xcc>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d009      	beq.n	8007fa0 <xTaskPriorityDisinherit+0x34>
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	60fb      	str	r3, [r7, #12]
 8007f9e:	e7fe      	b.n	8007f9e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d109      	bne.n	8007fbc <xTaskPriorityDisinherit+0x50>
 8007fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fac:	f383 8811 	msr	BASEPRI, r3
 8007fb0:	f3bf 8f6f 	isb	sy
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	60bb      	str	r3, [r7, #8]
 8007fba:	e7fe      	b.n	8007fba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc0:	1e5a      	subs	r2, r3, #1
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d02c      	beq.n	800802c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d128      	bne.n	800802c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fc30 	bl	8006844 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffc:	4b0f      	ldr	r3, [pc, #60]	; (800803c <xTaskPriorityDisinherit+0xd0>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d903      	bls.n	800800c <xTaskPriorityDisinherit+0xa0>
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	4a0c      	ldr	r2, [pc, #48]	; (800803c <xTaskPriorityDisinherit+0xd0>)
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4a09      	ldr	r2, [pc, #36]	; (8008040 <xTaskPriorityDisinherit+0xd4>)
 800801a:	441a      	add	r2, r3
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	3304      	adds	r3, #4
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f7fe fbb3 	bl	800678e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008028:	2301      	movs	r3, #1
 800802a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800802c:	697b      	ldr	r3, [r7, #20]
	}
 800802e:	4618      	mov	r0, r3
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20000860 	.word	0x20000860
 800803c:	20000d3c 	.word	0x20000d3c
 8008040:	20000864 	.word	0x20000864

08008044 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800804e:	4b21      	ldr	r3, [pc, #132]	; (80080d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008054:	4b20      	ldr	r3, [pc, #128]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3304      	adds	r3, #4
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe fbf2 	bl	8006844 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008066:	d10a      	bne.n	800807e <prvAddCurrentTaskToDelayedList+0x3a>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d007      	beq.n	800807e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800806e:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3304      	adds	r3, #4
 8008074:	4619      	mov	r1, r3
 8008076:	4819      	ldr	r0, [pc, #100]	; (80080dc <prvAddCurrentTaskToDelayedList+0x98>)
 8008078:	f7fe fb89 	bl	800678e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800807c:	e026      	b.n	80080cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008086:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	429a      	cmp	r2, r3
 8008094:	d209      	bcs.n	80080aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008096:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	4b0f      	ldr	r3, [pc, #60]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3304      	adds	r3, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7fe fb96 	bl	80067d4 <vListInsert>
}
 80080a8:	e010      	b.n	80080cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080aa:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f7fe fb8c 	bl	80067d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d202      	bcs.n	80080cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80080c6:	4a08      	ldr	r2, [pc, #32]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	6013      	str	r3, [r2, #0]
}
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	20000d38 	.word	0x20000d38
 80080d8:	20000860 	.word	0x20000860
 80080dc:	20000d20 	.word	0x20000d20
 80080e0:	20000cf0 	.word	0x20000cf0
 80080e4:	20000cec 	.word	0x20000cec
 80080e8:	20000d54 	.word	0x20000d54

080080ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	; 0x28
 80080f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80080f6:	f000 fac3 	bl	8008680 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080fa:	4b1c      	ldr	r3, [pc, #112]	; (800816c <xTimerCreateTimerTask+0x80>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d021      	beq.n	8008146 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008106:	2300      	movs	r3, #0
 8008108:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800810a:	1d3a      	adds	r2, r7, #4
 800810c:	f107 0108 	add.w	r1, r7, #8
 8008110:	f107 030c 	add.w	r3, r7, #12
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe faf5 	bl	8006704 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	9202      	str	r2, [sp, #8]
 8008122:	9301      	str	r3, [sp, #4]
 8008124:	2302      	movs	r3, #2
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	2300      	movs	r3, #0
 800812a:	460a      	mov	r2, r1
 800812c:	4910      	ldr	r1, [pc, #64]	; (8008170 <xTimerCreateTimerTask+0x84>)
 800812e:	4811      	ldr	r0, [pc, #68]	; (8008174 <xTimerCreateTimerTask+0x88>)
 8008130:	f7ff f886 	bl	8007240 <xTaskCreateStatic>
 8008134:	4602      	mov	r2, r0
 8008136:	4b10      	ldr	r3, [pc, #64]	; (8008178 <xTimerCreateTimerTask+0x8c>)
 8008138:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800813a:	4b0f      	ldr	r3, [pc, #60]	; (8008178 <xTimerCreateTimerTask+0x8c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008142:	2301      	movs	r3, #1
 8008144:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d109      	bne.n	8008160 <xTimerCreateTimerTask+0x74>
 800814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	e7fe      	b.n	800815e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008160:	697b      	ldr	r3, [r7, #20]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000d90 	.word	0x20000d90
 8008170:	080098c0 	.word	0x080098c0
 8008174:	08008295 	.word	0x08008295
 8008178:	20000d94 	.word	0x20000d94

0800817c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08a      	sub	sp, #40	; 0x28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800818a:	2300      	movs	r3, #0
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d109      	bne.n	80081a8 <xTimerGenericCommand+0x2c>
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	623b      	str	r3, [r7, #32]
 80081a6:	e7fe      	b.n	80081a6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081a8:	4b19      	ldr	r3, [pc, #100]	; (8008210 <xTimerGenericCommand+0x94>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d02a      	beq.n	8008206 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b05      	cmp	r3, #5
 80081c0:	dc18      	bgt.n	80081f4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081c2:	f7ff feb5 	bl	8007f30 <xTaskGetSchedulerState>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d109      	bne.n	80081e0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80081cc:	4b10      	ldr	r3, [pc, #64]	; (8008210 <xTimerGenericCommand+0x94>)
 80081ce:	6818      	ldr	r0, [r3, #0]
 80081d0:	f107 0110 	add.w	r1, r7, #16
 80081d4:	2300      	movs	r3, #0
 80081d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d8:	f7fe fc5c 	bl	8006a94 <xQueueGenericSend>
 80081dc:	6278      	str	r0, [r7, #36]	; 0x24
 80081de:	e012      	b.n	8008206 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <xTimerGenericCommand+0x94>)
 80081e2:	6818      	ldr	r0, [r3, #0]
 80081e4:	f107 0110 	add.w	r1, r7, #16
 80081e8:	2300      	movs	r3, #0
 80081ea:	2200      	movs	r2, #0
 80081ec:	f7fe fc52 	bl	8006a94 <xQueueGenericSend>
 80081f0:	6278      	str	r0, [r7, #36]	; 0x24
 80081f2:	e008      	b.n	8008206 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80081f4:	4b06      	ldr	r3, [pc, #24]	; (8008210 <xTimerGenericCommand+0x94>)
 80081f6:	6818      	ldr	r0, [r3, #0]
 80081f8:	f107 0110 	add.w	r1, r7, #16
 80081fc:	2300      	movs	r3, #0
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	f7fe fd42 	bl	8006c88 <xQueueGenericSendFromISR>
 8008204:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008208:	4618      	mov	r0, r3
 800820a:	3728      	adds	r7, #40	; 0x28
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	20000d90 	.word	0x20000d90

08008214 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af02      	add	r7, sp, #8
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800821e:	4b1c      	ldr	r3, [pc, #112]	; (8008290 <prvProcessExpiredTimer+0x7c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	3304      	adds	r3, #4
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe fb09 	bl	8006844 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d121      	bne.n	800827e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	699a      	ldr	r2, [r3, #24]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	18d1      	adds	r1, r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	6978      	ldr	r0, [r7, #20]
 8008248:	f000 f8c8 	bl	80083dc <prvInsertTimerInActiveList>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d015      	beq.n	800827e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008252:	2300      	movs	r3, #0
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	2300      	movs	r3, #0
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	2100      	movs	r1, #0
 800825c:	6978      	ldr	r0, [r7, #20]
 800825e:	f7ff ff8d 	bl	800817c <xTimerGenericCommand>
 8008262:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <prvProcessExpiredTimer+0x6a>
 800826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	e7fe      	b.n	800827c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	6978      	ldr	r0, [r7, #20]
 8008284:	4798      	blx	r3
}
 8008286:	bf00      	nop
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20000d88 	.word	0x20000d88

08008294 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800829c:	f107 0308 	add.w	r3, r7, #8
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 f857 	bl	8008354 <prvGetNextExpireTime>
 80082a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	4619      	mov	r1, r3
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 f803 	bl	80082b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082b2:	f000 f8d5 	bl	8008460 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082b6:	e7f1      	b.n	800829c <prvTimerTask+0x8>

080082b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082c2:	f7ff fa5b 	bl	800777c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082c6:	f107 0308 	add.w	r3, r7, #8
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 f866 	bl	800839c <prvSampleTimeNow>
 80082d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d130      	bne.n	800833a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10a      	bne.n	80082f4 <prvProcessTimerOrBlockTask+0x3c>
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d806      	bhi.n	80082f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80082e6:	f7ff fa57 	bl	8007798 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80082ea:	68f9      	ldr	r1, [r7, #12]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff ff91 	bl	8008214 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80082f2:	e024      	b.n	800833e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d008      	beq.n	800830c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80082fa:	4b13      	ldr	r3, [pc, #76]	; (8008348 <prvProcessTimerOrBlockTask+0x90>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	bf0c      	ite	eq
 8008304:	2301      	moveq	r3, #1
 8008306:	2300      	movne	r3, #0
 8008308:	b2db      	uxtb	r3, r3
 800830a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800830c:	4b0f      	ldr	r3, [pc, #60]	; (800834c <prvProcessTimerOrBlockTask+0x94>)
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	4619      	mov	r1, r3
 800831a:	f7fe ff5d 	bl	80071d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800831e:	f7ff fa3b 	bl	8007798 <xTaskResumeAll>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10a      	bne.n	800833e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008328:	4b09      	ldr	r3, [pc, #36]	; (8008350 <prvProcessTimerOrBlockTask+0x98>)
 800832a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	f3bf 8f6f 	isb	sy
}
 8008338:	e001      	b.n	800833e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800833a:	f7ff fa2d 	bl	8007798 <xTaskResumeAll>
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000d8c 	.word	0x20000d8c
 800834c:	20000d90 	.word	0x20000d90
 8008350:	e000ed04 	.word	0xe000ed04

08008354 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800835c:	4b0e      	ldr	r3, [pc, #56]	; (8008398 <prvGetNextExpireTime+0x44>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	bf0c      	ite	eq
 8008366:	2301      	moveq	r3, #1
 8008368:	2300      	movne	r3, #0
 800836a:	b2db      	uxtb	r3, r3
 800836c:	461a      	mov	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d105      	bne.n	8008386 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800837a:	4b07      	ldr	r3, [pc, #28]	; (8008398 <prvGetNextExpireTime+0x44>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	e001      	b.n	800838a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800838a:	68fb      	ldr	r3, [r7, #12]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	20000d88 	.word	0x20000d88

0800839c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083a4:	f7ff fa94 	bl	80078d0 <xTaskGetTickCount>
 80083a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083aa:	4b0b      	ldr	r3, [pc, #44]	; (80083d8 <prvSampleTimeNow+0x3c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d205      	bcs.n	80083c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083b4:	f000 f904 	bl	80085c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	e002      	b.n	80083c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083c6:	4a04      	ldr	r2, [pc, #16]	; (80083d8 <prvSampleTimeNow+0x3c>)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80083cc:	68fb      	ldr	r3, [r7, #12]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20000d98 	.word	0x20000d98

080083dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d812      	bhi.n	8008428 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	1ad2      	subs	r2, r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	429a      	cmp	r2, r3
 800840e:	d302      	bcc.n	8008416 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008410:	2301      	movs	r3, #1
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	e01b      	b.n	800844e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008416:	4b10      	ldr	r3, [pc, #64]	; (8008458 <prvInsertTimerInActiveList+0x7c>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3304      	adds	r3, #4
 800841e:	4619      	mov	r1, r3
 8008420:	4610      	mov	r0, r2
 8008422:	f7fe f9d7 	bl	80067d4 <vListInsert>
 8008426:	e012      	b.n	800844e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	429a      	cmp	r2, r3
 800842e:	d206      	bcs.n	800843e <prvInsertTimerInActiveList+0x62>
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d302      	bcc.n	800843e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008438:	2301      	movs	r3, #1
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	e007      	b.n	800844e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800843e:	4b07      	ldr	r3, [pc, #28]	; (800845c <prvInsertTimerInActiveList+0x80>)
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3304      	adds	r3, #4
 8008446:	4619      	mov	r1, r3
 8008448:	4610      	mov	r0, r2
 800844a:	f7fe f9c3 	bl	80067d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800844e:	697b      	ldr	r3, [r7, #20]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	20000d8c 	.word	0x20000d8c
 800845c:	20000d88 	.word	0x20000d88

08008460 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08e      	sub	sp, #56	; 0x38
 8008464:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008466:	e099      	b.n	800859c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	da17      	bge.n	800849e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800846e:	1d3b      	adds	r3, r7, #4
 8008470:	3304      	adds	r3, #4
 8008472:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	2b00      	cmp	r3, #0
 8008478:	d109      	bne.n	800848e <prvProcessReceivedCommands+0x2e>
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	61fb      	str	r3, [r7, #28]
 800848c:	e7fe      	b.n	800848c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800848e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008494:	6850      	ldr	r0, [r2, #4]
 8008496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008498:	6892      	ldr	r2, [r2, #8]
 800849a:	4611      	mov	r1, r2
 800849c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	db7a      	blt.n	800859a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d004      	beq.n	80084ba <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	3304      	adds	r3, #4
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fe f9c5 	bl	8006844 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084ba:	463b      	mov	r3, r7
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff ff6d 	bl	800839c <prvSampleTimeNow>
 80084c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b09      	cmp	r3, #9
 80084c8:	d868      	bhi.n	800859c <prvProcessReceivedCommands+0x13c>
 80084ca:	a201      	add	r2, pc, #4	; (adr r2, 80084d0 <prvProcessReceivedCommands+0x70>)
 80084cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d0:	080084f9 	.word	0x080084f9
 80084d4:	080084f9 	.word	0x080084f9
 80084d8:	080084f9 	.word	0x080084f9
 80084dc:	0800859d 	.word	0x0800859d
 80084e0:	08008553 	.word	0x08008553
 80084e4:	08008589 	.word	0x08008589
 80084e8:	080084f9 	.word	0x080084f9
 80084ec:	080084f9 	.word	0x080084f9
 80084f0:	0800859d 	.word	0x0800859d
 80084f4:	08008553 	.word	0x08008553
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	18d1      	adds	r1, r2, r3
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008506:	f7ff ff69 	bl	80083dc <prvInsertTimerInActiveList>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d045      	beq.n	800859c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008516:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d13d      	bne.n	800859c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	441a      	add	r2, r3
 8008528:	2300      	movs	r3, #0
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	2300      	movs	r3, #0
 800852e:	2100      	movs	r1, #0
 8008530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008532:	f7ff fe23 	bl	800817c <xTimerGenericCommand>
 8008536:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d12e      	bne.n	800859c <prvProcessReceivedCommands+0x13c>
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	61bb      	str	r3, [r7, #24]
 8008550:	e7fe      	b.n	8008550 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d109      	bne.n	8008574 <prvProcessReceivedCommands+0x114>
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	617b      	str	r3, [r7, #20]
 8008572:	e7fe      	b.n	8008572 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	699a      	ldr	r2, [r3, #24]
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	18d1      	adds	r1, r2, r3
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008582:	f7ff ff2b 	bl	80083dc <prvInsertTimerInActiveList>
					break;
 8008586:	e009      	b.n	800859c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d104      	bne.n	800859c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008594:	f000 fb58 	bl	8008c48 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008598:	e000      	b.n	800859c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800859a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800859c:	4b07      	ldr	r3, [pc, #28]	; (80085bc <prvProcessReceivedCommands+0x15c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	1d39      	adds	r1, r7, #4
 80085a2:	2200      	movs	r2, #0
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe fc03 	bl	8006db0 <xQueueReceive>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f47f af5b 	bne.w	8008468 <prvProcessReceivedCommands+0x8>
	}
}
 80085b2:	bf00      	nop
 80085b4:	3730      	adds	r7, #48	; 0x30
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000d90 	.word	0x20000d90

080085c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085c6:	e044      	b.n	8008652 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085c8:	4b2b      	ldr	r3, [pc, #172]	; (8008678 <prvSwitchTimerLists+0xb8>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085d2:	4b29      	ldr	r3, [pc, #164]	; (8008678 <prvSwitchTimerLists+0xb8>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3304      	adds	r3, #4
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe f92f 	bl	8006844 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	69db      	ldr	r3, [r3, #28]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d12d      	bne.n	8008652 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4413      	add	r3, r2
 80085fe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	429a      	cmp	r2, r3
 8008606:	d90e      	bls.n	8008626 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008614:	4b18      	ldr	r3, [pc, #96]	; (8008678 <prvSwitchTimerLists+0xb8>)
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7fe f8d8 	bl	80067d4 <vListInsert>
 8008624:	e015      	b.n	8008652 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008626:	2300      	movs	r3, #0
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	2300      	movs	r3, #0
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	2100      	movs	r1, #0
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7ff fda3 	bl	800817c <xTimerGenericCommand>
 8008636:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d109      	bne.n	8008652 <prvSwitchTimerLists+0x92>
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	603b      	str	r3, [r7, #0]
 8008650:	e7fe      	b.n	8008650 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008652:	4b09      	ldr	r3, [pc, #36]	; (8008678 <prvSwitchTimerLists+0xb8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1b5      	bne.n	80085c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800865c:	4b06      	ldr	r3, [pc, #24]	; (8008678 <prvSwitchTimerLists+0xb8>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008662:	4b06      	ldr	r3, [pc, #24]	; (800867c <prvSwitchTimerLists+0xbc>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a04      	ldr	r2, [pc, #16]	; (8008678 <prvSwitchTimerLists+0xb8>)
 8008668:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800866a:	4a04      	ldr	r2, [pc, #16]	; (800867c <prvSwitchTimerLists+0xbc>)
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	6013      	str	r3, [r2, #0]
}
 8008670:	bf00      	nop
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	20000d88 	.word	0x20000d88
 800867c:	20000d8c 	.word	0x20000d8c

08008680 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008686:	f000 f927 	bl	80088d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800868a:	4b15      	ldr	r3, [pc, #84]	; (80086e0 <prvCheckForValidListAndQueue+0x60>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d120      	bne.n	80086d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008692:	4814      	ldr	r0, [pc, #80]	; (80086e4 <prvCheckForValidListAndQueue+0x64>)
 8008694:	f7fe f850 	bl	8006738 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008698:	4813      	ldr	r0, [pc, #76]	; (80086e8 <prvCheckForValidListAndQueue+0x68>)
 800869a:	f7fe f84d 	bl	8006738 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800869e:	4b13      	ldr	r3, [pc, #76]	; (80086ec <prvCheckForValidListAndQueue+0x6c>)
 80086a0:	4a10      	ldr	r2, [pc, #64]	; (80086e4 <prvCheckForValidListAndQueue+0x64>)
 80086a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80086a4:	4b12      	ldr	r3, [pc, #72]	; (80086f0 <prvCheckForValidListAndQueue+0x70>)
 80086a6:	4a10      	ldr	r2, [pc, #64]	; (80086e8 <prvCheckForValidListAndQueue+0x68>)
 80086a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80086aa:	2300      	movs	r3, #0
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	4b11      	ldr	r3, [pc, #68]	; (80086f4 <prvCheckForValidListAndQueue+0x74>)
 80086b0:	4a11      	ldr	r2, [pc, #68]	; (80086f8 <prvCheckForValidListAndQueue+0x78>)
 80086b2:	2110      	movs	r1, #16
 80086b4:	200a      	movs	r0, #10
 80086b6:	f7fe f957 	bl	8006968 <xQueueGenericCreateStatic>
 80086ba:	4602      	mov	r2, r0
 80086bc:	4b08      	ldr	r3, [pc, #32]	; (80086e0 <prvCheckForValidListAndQueue+0x60>)
 80086be:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80086c0:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <prvCheckForValidListAndQueue+0x60>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d005      	beq.n	80086d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80086c8:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <prvCheckForValidListAndQueue+0x60>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	490b      	ldr	r1, [pc, #44]	; (80086fc <prvCheckForValidListAndQueue+0x7c>)
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe fd5a 	bl	8007188 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086d4:	f000 f92e 	bl	8008934 <vPortExitCritical>
}
 80086d8:	bf00      	nop
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20000d90 	.word	0x20000d90
 80086e4:	20000d60 	.word	0x20000d60
 80086e8:	20000d74 	.word	0x20000d74
 80086ec:	20000d88 	.word	0x20000d88
 80086f0:	20000d8c 	.word	0x20000d8c
 80086f4:	20000e3c 	.word	0x20000e3c
 80086f8:	20000d9c 	.word	0x20000d9c
 80086fc:	080098c8 	.word	0x080098c8

08008700 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	3b04      	subs	r3, #4
 8008710:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	3b04      	subs	r3, #4
 800871e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f023 0201 	bic.w	r2, r3, #1
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3b04      	subs	r3, #4
 800872e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008730:	4a08      	ldr	r2, [pc, #32]	; (8008754 <pxPortInitialiseStack+0x54>)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3b14      	subs	r3, #20
 800873a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3b20      	subs	r3, #32
 8008746:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008748:	68fb      	ldr	r3, [r7, #12]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	bc80      	pop	{r7}
 8008752:	4770      	bx	lr
 8008754:	08008759 	.word	0x08008759

08008758 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800875e:	2300      	movs	r3, #0
 8008760:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008762:	4b10      	ldr	r3, [pc, #64]	; (80087a4 <prvTaskExitError+0x4c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876a:	d009      	beq.n	8008780 <prvTaskExitError+0x28>
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	e7fe      	b.n	800877e <prvTaskExitError+0x26>
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008792:	bf00      	nop
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0fc      	beq.n	8008794 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800879a:	bf00      	nop
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr
 80087a4:	20000120 	.word	0x20000120
	...

080087b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087b0:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <pxCurrentTCBConst2>)
 80087b2:	6819      	ldr	r1, [r3, #0]
 80087b4:	6808      	ldr	r0, [r1, #0]
 80087b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087ba:	f380 8809 	msr	PSP, r0
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f04f 0000 	mov.w	r0, #0
 80087c6:	f380 8811 	msr	BASEPRI, r0
 80087ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80087ce:	4770      	bx	lr

080087d0 <pxCurrentTCBConst2>:
 80087d0:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop

080087d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80087d8:	4806      	ldr	r0, [pc, #24]	; (80087f4 <prvPortStartFirstTask+0x1c>)
 80087da:	6800      	ldr	r0, [r0, #0]
 80087dc:	6800      	ldr	r0, [r0, #0]
 80087de:	f380 8808 	msr	MSP, r0
 80087e2:	b662      	cpsie	i
 80087e4:	b661      	cpsie	f
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	df00      	svc	0
 80087f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087f2:	bf00      	nop
 80087f4:	e000ed08 	.word	0xe000ed08

080087f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087fe:	4b31      	ldr	r3, [pc, #196]	; (80088c4 <xPortStartScheduler+0xcc>)
 8008800:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	22ff      	movs	r2, #255	; 0xff
 800880e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	b2db      	uxtb	r3, r3
 8008816:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008818:	78fb      	ldrb	r3, [r7, #3]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008820:	b2da      	uxtb	r2, r3
 8008822:	4b29      	ldr	r3, [pc, #164]	; (80088c8 <xPortStartScheduler+0xd0>)
 8008824:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008826:	4b29      	ldr	r3, [pc, #164]	; (80088cc <xPortStartScheduler+0xd4>)
 8008828:	2207      	movs	r2, #7
 800882a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800882c:	e009      	b.n	8008842 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800882e:	4b27      	ldr	r3, [pc, #156]	; (80088cc <xPortStartScheduler+0xd4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3b01      	subs	r3, #1
 8008834:	4a25      	ldr	r2, [pc, #148]	; (80088cc <xPortStartScheduler+0xd4>)
 8008836:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	b2db      	uxtb	r3, r3
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	b2db      	uxtb	r3, r3
 8008840:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	b2db      	uxtb	r3, r3
 8008846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884a:	2b80      	cmp	r3, #128	; 0x80
 800884c:	d0ef      	beq.n	800882e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800884e:	4b1f      	ldr	r3, [pc, #124]	; (80088cc <xPortStartScheduler+0xd4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f1c3 0307 	rsb	r3, r3, #7
 8008856:	2b04      	cmp	r3, #4
 8008858:	d009      	beq.n	800886e <xPortStartScheduler+0x76>
 800885a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	60bb      	str	r3, [r7, #8]
 800886c:	e7fe      	b.n	800886c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800886e:	4b17      	ldr	r3, [pc, #92]	; (80088cc <xPortStartScheduler+0xd4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	021b      	lsls	r3, r3, #8
 8008874:	4a15      	ldr	r2, [pc, #84]	; (80088cc <xPortStartScheduler+0xd4>)
 8008876:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008878:	4b14      	ldr	r3, [pc, #80]	; (80088cc <xPortStartScheduler+0xd4>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008880:	4a12      	ldr	r2, [pc, #72]	; (80088cc <xPortStartScheduler+0xd4>)
 8008882:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	b2da      	uxtb	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800888c:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <xPortStartScheduler+0xd8>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a0f      	ldr	r2, [pc, #60]	; (80088d0 <xPortStartScheduler+0xd8>)
 8008892:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008896:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008898:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <xPortStartScheduler+0xd8>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a0c      	ldr	r2, [pc, #48]	; (80088d0 <xPortStartScheduler+0xd8>)
 800889e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80088a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088a4:	f000 f8b0 	bl	8008a08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088a8:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <xPortStartScheduler+0xdc>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088ae:	f7ff ff93 	bl	80087d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088b2:	f7ff f8d9 	bl	8007a68 <vTaskSwitchContext>
	prvTaskExitError();
 80088b6:	f7ff ff4f 	bl	8008758 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	e000e400 	.word	0xe000e400
 80088c8:	20000e8c 	.word	0x20000e8c
 80088cc:	20000e90 	.word	0x20000e90
 80088d0:	e000ed20 	.word	0xe000ed20
 80088d4:	20000120 	.word	0x20000120

080088d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088f0:	4b0e      	ldr	r3, [pc, #56]	; (800892c <vPortEnterCritical+0x54>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3301      	adds	r3, #1
 80088f6:	4a0d      	ldr	r2, [pc, #52]	; (800892c <vPortEnterCritical+0x54>)
 80088f8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088fa:	4b0c      	ldr	r3, [pc, #48]	; (800892c <vPortEnterCritical+0x54>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d10e      	bne.n	8008920 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008902:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <vPortEnterCritical+0x58>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b00      	cmp	r3, #0
 800890a:	d009      	beq.n	8008920 <vPortEnterCritical+0x48>
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	603b      	str	r3, [r7, #0]
 800891e:	e7fe      	b.n	800891e <vPortEnterCritical+0x46>
	}
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	bc80      	pop	{r7}
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	20000120 	.word	0x20000120
 8008930:	e000ed04 	.word	0xe000ed04

08008934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800893a:	4b10      	ldr	r3, [pc, #64]	; (800897c <vPortExitCritical+0x48>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d109      	bne.n	8008956 <vPortExitCritical+0x22>
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	607b      	str	r3, [r7, #4]
 8008954:	e7fe      	b.n	8008954 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008956:	4b09      	ldr	r3, [pc, #36]	; (800897c <vPortExitCritical+0x48>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3b01      	subs	r3, #1
 800895c:	4a07      	ldr	r2, [pc, #28]	; (800897c <vPortExitCritical+0x48>)
 800895e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008960:	4b06      	ldr	r3, [pc, #24]	; (800897c <vPortExitCritical+0x48>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d104      	bne.n	8008972 <vPortExitCritical+0x3e>
 8008968:	2300      	movs	r3, #0
 800896a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008972:	bf00      	nop
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	bc80      	pop	{r7}
 800897a:	4770      	bx	lr
 800897c:	20000120 	.word	0x20000120

08008980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008980:	f3ef 8009 	mrs	r0, PSP
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	4b0d      	ldr	r3, [pc, #52]	; (80089c0 <pxCurrentTCBConst>)
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008990:	6010      	str	r0, [r2, #0]
 8008992:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008996:	f04f 0050 	mov.w	r0, #80	; 0x50
 800899a:	f380 8811 	msr	BASEPRI, r0
 800899e:	f7ff f863 	bl	8007a68 <vTaskSwitchContext>
 80089a2:	f04f 0000 	mov.w	r0, #0
 80089a6:	f380 8811 	msr	BASEPRI, r0
 80089aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80089ae:	6819      	ldr	r1, [r3, #0]
 80089b0:	6808      	ldr	r0, [r1, #0]
 80089b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80089b6:	f380 8809 	msr	PSP, r0
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	4770      	bx	lr

080089c0 <pxCurrentTCBConst>:
 80089c0:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop

080089c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089e0:	f7fe ff84 	bl	80078ec <xTaskIncrementTick>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089ea:	4b06      	ldr	r3, [pc, #24]	; (8008a04 <xPortSysTickHandler+0x3c>)
 80089ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	2300      	movs	r3, #0
 80089f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80089fc:	bf00      	nop
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	e000ed04 	.word	0xe000ed04

08008a08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a08:	b480      	push	{r7}
 8008a0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a0c:	4b0a      	ldr	r3, [pc, #40]	; (8008a38 <vPortSetupTimerInterrupt+0x30>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a12:	4b0a      	ldr	r3, [pc, #40]	; (8008a3c <vPortSetupTimerInterrupt+0x34>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a18:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <vPortSetupTimerInterrupt+0x38>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a09      	ldr	r2, [pc, #36]	; (8008a44 <vPortSetupTimerInterrupt+0x3c>)
 8008a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a22:	099b      	lsrs	r3, r3, #6
 8008a24:	4a08      	ldr	r2, [pc, #32]	; (8008a48 <vPortSetupTimerInterrupt+0x40>)
 8008a26:	3b01      	subs	r3, #1
 8008a28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a2a:	4b03      	ldr	r3, [pc, #12]	; (8008a38 <vPortSetupTimerInterrupt+0x30>)
 8008a2c:	2207      	movs	r2, #7
 8008a2e:	601a      	str	r2, [r3, #0]
}
 8008a30:	bf00      	nop
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bc80      	pop	{r7}
 8008a36:	4770      	bx	lr
 8008a38:	e000e010 	.word	0xe000e010
 8008a3c:	e000e018 	.word	0xe000e018
 8008a40:	20000004 	.word	0x20000004
 8008a44:	10624dd3 	.word	0x10624dd3
 8008a48:	e000e014 	.word	0xe000e014

08008a4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a52:	f3ef 8305 	mrs	r3, IPSR
 8008a56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b0f      	cmp	r3, #15
 8008a5c:	d913      	bls.n	8008a86 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a5e:	4a15      	ldr	r2, [pc, #84]	; (8008ab4 <vPortValidateInterruptPriority+0x68>)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4413      	add	r3, r2
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a68:	4b13      	ldr	r3, [pc, #76]	; (8008ab8 <vPortValidateInterruptPriority+0x6c>)
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	7afa      	ldrb	r2, [r7, #11]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d209      	bcs.n	8008a86 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	607b      	str	r3, [r7, #4]
 8008a84:	e7fe      	b.n	8008a84 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a86:	4b0d      	ldr	r3, [pc, #52]	; (8008abc <vPortValidateInterruptPriority+0x70>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a8e:	4b0c      	ldr	r3, [pc, #48]	; (8008ac0 <vPortValidateInterruptPriority+0x74>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d909      	bls.n	8008aaa <vPortValidateInterruptPriority+0x5e>
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	603b      	str	r3, [r7, #0]
 8008aa8:	e7fe      	b.n	8008aa8 <vPortValidateInterruptPriority+0x5c>
	}
 8008aaa:	bf00      	nop
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bc80      	pop	{r7}
 8008ab2:	4770      	bx	lr
 8008ab4:	e000e3f0 	.word	0xe000e3f0
 8008ab8:	20000e8c 	.word	0x20000e8c
 8008abc:	e000ed0c 	.word	0xe000ed0c
 8008ac0:	20000e90 	.word	0x20000e90

08008ac4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08a      	sub	sp, #40	; 0x28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008acc:	2300      	movs	r3, #0
 8008ace:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ad0:	f7fe fe54 	bl	800777c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ad4:	4b57      	ldr	r3, [pc, #348]	; (8008c34 <pvPortMalloc+0x170>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008adc:	f000 f90c 	bl	8008cf8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ae0:	4b55      	ldr	r3, [pc, #340]	; (8008c38 <pvPortMalloc+0x174>)
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f040 808c 	bne.w	8008c06 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01c      	beq.n	8008b2e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008af4:	2208      	movs	r2, #8
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4413      	add	r3, r2
 8008afa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d013      	beq.n	8008b2e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f023 0307 	bic.w	r3, r3, #7
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d009      	beq.n	8008b2e <pvPortMalloc+0x6a>
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	e7fe      	b.n	8008b2c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d068      	beq.n	8008c06 <pvPortMalloc+0x142>
 8008b34:	4b41      	ldr	r3, [pc, #260]	; (8008c3c <pvPortMalloc+0x178>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d863      	bhi.n	8008c06 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b3e:	4b40      	ldr	r3, [pc, #256]	; (8008c40 <pvPortMalloc+0x17c>)
 8008b40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b42:	4b3f      	ldr	r3, [pc, #252]	; (8008c40 <pvPortMalloc+0x17c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b48:	e004      	b.n	8008b54 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d903      	bls.n	8008b66 <pvPortMalloc+0xa2>
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1f1      	bne.n	8008b4a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b66:	4b33      	ldr	r3, [pc, #204]	; (8008c34 <pvPortMalloc+0x170>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d04a      	beq.n	8008c06 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2208      	movs	r2, #8
 8008b76:	4413      	add	r3, r2
 8008b78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	1ad2      	subs	r2, r2, r3
 8008b8a:	2308      	movs	r3, #8
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d91e      	bls.n	8008bd0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4413      	add	r3, r2
 8008b98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	f003 0307 	and.w	r3, r3, #7
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d009      	beq.n	8008bb8 <pvPortMalloc+0xf4>
 8008ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	613b      	str	r3, [r7, #16]
 8008bb6:	e7fe      	b.n	8008bb6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	1ad2      	subs	r2, r2, r3
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bca:	69b8      	ldr	r0, [r7, #24]
 8008bcc:	f000 f8f6 	bl	8008dbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bd0:	4b1a      	ldr	r3, [pc, #104]	; (8008c3c <pvPortMalloc+0x178>)
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	4a18      	ldr	r2, [pc, #96]	; (8008c3c <pvPortMalloc+0x178>)
 8008bdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bde:	4b17      	ldr	r3, [pc, #92]	; (8008c3c <pvPortMalloc+0x178>)
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	4b18      	ldr	r3, [pc, #96]	; (8008c44 <pvPortMalloc+0x180>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d203      	bcs.n	8008bf2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bea:	4b14      	ldr	r3, [pc, #80]	; (8008c3c <pvPortMalloc+0x178>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a15      	ldr	r2, [pc, #84]	; (8008c44 <pvPortMalloc+0x180>)
 8008bf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	4b10      	ldr	r3, [pc, #64]	; (8008c38 <pvPortMalloc+0x174>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c06:	f7fe fdc7 	bl	8007798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	f003 0307 	and.w	r3, r3, #7
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d009      	beq.n	8008c28 <pvPortMalloc+0x164>
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	60fb      	str	r3, [r7, #12]
 8008c26:	e7fe      	b.n	8008c26 <pvPortMalloc+0x162>
	return pvReturn;
 8008c28:	69fb      	ldr	r3, [r7, #28]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3728      	adds	r7, #40	; 0x28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20001a9c 	.word	0x20001a9c
 8008c38:	20001aa8 	.word	0x20001aa8
 8008c3c:	20001aa0 	.word	0x20001aa0
 8008c40:	20001a94 	.word	0x20001a94
 8008c44:	20001aa4 	.word	0x20001aa4

08008c48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d046      	beq.n	8008ce8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c5a:	2308      	movs	r3, #8
 8008c5c:	425b      	negs	r3, r3
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	4413      	add	r3, r2
 8008c62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	4b20      	ldr	r3, [pc, #128]	; (8008cf0 <vPortFree+0xa8>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4013      	ands	r3, r2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d109      	bne.n	8008c8a <vPortFree+0x42>
 8008c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	e7fe      	b.n	8008c88 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d009      	beq.n	8008ca6 <vPortFree+0x5e>
 8008c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	60bb      	str	r3, [r7, #8]
 8008ca4:	e7fe      	b.n	8008ca4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	4b11      	ldr	r3, [pc, #68]	; (8008cf0 <vPortFree+0xa8>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d019      	beq.n	8008ce8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d115      	bne.n	8008ce8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	4b0b      	ldr	r3, [pc, #44]	; (8008cf0 <vPortFree+0xa8>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	43db      	mvns	r3, r3
 8008cc6:	401a      	ands	r2, r3
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ccc:	f7fe fd56 	bl	800777c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	4b07      	ldr	r3, [pc, #28]	; (8008cf4 <vPortFree+0xac>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4413      	add	r3, r2
 8008cda:	4a06      	ldr	r2, [pc, #24]	; (8008cf4 <vPortFree+0xac>)
 8008cdc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cde:	6938      	ldr	r0, [r7, #16]
 8008ce0:	f000 f86c 	bl	8008dbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ce4:	f7fe fd58 	bl	8007798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ce8:	bf00      	nop
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20001aa8 	.word	0x20001aa8
 8008cf4:	20001aa0 	.word	0x20001aa0

08008cf8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cfe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008d02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d04:	4b27      	ldr	r3, [pc, #156]	; (8008da4 <prvHeapInit+0xac>)
 8008d06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00c      	beq.n	8008d2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3307      	adds	r3, #7
 8008d16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f023 0307 	bic.w	r3, r3, #7
 8008d1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	4a1f      	ldr	r2, [pc, #124]	; (8008da4 <prvHeapInit+0xac>)
 8008d28:	4413      	add	r3, r2
 8008d2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d30:	4a1d      	ldr	r2, [pc, #116]	; (8008da8 <prvHeapInit+0xb0>)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d36:	4b1c      	ldr	r3, [pc, #112]	; (8008da8 <prvHeapInit+0xb0>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	4413      	add	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d44:	2208      	movs	r2, #8
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	1a9b      	subs	r3, r3, r2
 8008d4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f023 0307 	bic.w	r3, r3, #7
 8008d52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4a15      	ldr	r2, [pc, #84]	; (8008dac <prvHeapInit+0xb4>)
 8008d58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d5a:	4b14      	ldr	r3, [pc, #80]	; (8008dac <prvHeapInit+0xb4>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d62:	4b12      	ldr	r3, [pc, #72]	; (8008dac <prvHeapInit+0xb4>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	1ad2      	subs	r2, r2, r3
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d78:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <prvHeapInit+0xb4>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	4a0a      	ldr	r2, [pc, #40]	; (8008db0 <prvHeapInit+0xb8>)
 8008d86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	4a09      	ldr	r2, [pc, #36]	; (8008db4 <prvHeapInit+0xbc>)
 8008d8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d90:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <prvHeapInit+0xc0>)
 8008d92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d96:	601a      	str	r2, [r3, #0]
}
 8008d98:	bf00      	nop
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bc80      	pop	{r7}
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	20000e94 	.word	0x20000e94
 8008da8:	20001a94 	.word	0x20001a94
 8008dac:	20001a9c 	.word	0x20001a9c
 8008db0:	20001aa4 	.word	0x20001aa4
 8008db4:	20001aa0 	.word	0x20001aa0
 8008db8:	20001aa8 	.word	0x20001aa8

08008dbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008dc4:	4b27      	ldr	r3, [pc, #156]	; (8008e64 <prvInsertBlockIntoFreeList+0xa8>)
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	e002      	b.n	8008dd0 <prvInsertBlockIntoFreeList+0x14>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d8f7      	bhi.n	8008dca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	4413      	add	r3, r2
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d108      	bne.n	8008dfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	441a      	add	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	441a      	add	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d118      	bne.n	8008e44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	4b14      	ldr	r3, [pc, #80]	; (8008e68 <prvInsertBlockIntoFreeList+0xac>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d00d      	beq.n	8008e3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	441a      	add	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	e008      	b.n	8008e4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e3a:	4b0b      	ldr	r3, [pc, #44]	; (8008e68 <prvInsertBlockIntoFreeList+0xac>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	e003      	b.n	8008e4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d002      	beq.n	8008e5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e5a:	bf00      	nop
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bc80      	pop	{r7}
 8008e62:	4770      	bx	lr
 8008e64:	20001a94 	.word	0x20001a94
 8008e68:	20001a9c 	.word	0x20001a9c

08008e6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e70:	2200      	movs	r2, #0
 8008e72:	4912      	ldr	r1, [pc, #72]	; (8008ebc <MX_USB_DEVICE_Init+0x50>)
 8008e74:	4812      	ldr	r0, [pc, #72]	; (8008ec0 <MX_USB_DEVICE_Init+0x54>)
 8008e76:	f7fc fa62 	bl	800533e <USBD_Init>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e80:	f7f7 fb26 	bl	80004d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e84:	490f      	ldr	r1, [pc, #60]	; (8008ec4 <MX_USB_DEVICE_Init+0x58>)
 8008e86:	480e      	ldr	r0, [pc, #56]	; (8008ec0 <MX_USB_DEVICE_Init+0x54>)
 8008e88:	f7fc fa84 	bl	8005394 <USBD_RegisterClass>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e92:	f7f7 fb1d 	bl	80004d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e96:	490c      	ldr	r1, [pc, #48]	; (8008ec8 <MX_USB_DEVICE_Init+0x5c>)
 8008e98:	4809      	ldr	r0, [pc, #36]	; (8008ec0 <MX_USB_DEVICE_Init+0x54>)
 8008e9a:	f7fc f9b5 	bl	8005208 <USBD_CDC_RegisterInterface>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ea4:	f7f7 fb14 	bl	80004d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ea8:	4805      	ldr	r0, [pc, #20]	; (8008ec0 <MX_USB_DEVICE_Init+0x54>)
 8008eaa:	f7fc fa8c 	bl	80053c6 <USBD_Start>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008eb4:	f7f7 fb0c 	bl	80004d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008eb8:	bf00      	nop
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20000134 	.word	0x20000134
 8008ec0:	20001d34 	.word	0x20001d34
 8008ec4:	2000001c 	.word	0x2000001c
 8008ec8:	20000124 	.word	0x20000124

08008ecc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4905      	ldr	r1, [pc, #20]	; (8008ee8 <CDC_Init_FS+0x1c>)
 8008ed4:	4805      	ldr	r0, [pc, #20]	; (8008eec <CDC_Init_FS+0x20>)
 8008ed6:	f7fc f9ad 	bl	8005234 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008eda:	4905      	ldr	r1, [pc, #20]	; (8008ef0 <CDC_Init_FS+0x24>)
 8008edc:	4803      	ldr	r0, [pc, #12]	; (8008eec <CDC_Init_FS+0x20>)
 8008ede:	f7fc f9c2 	bl	8005266 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ee2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	20002038 	.word	0x20002038
 8008eec:	20001d34 	.word	0x20001d34
 8008ef0:	20001ff8 	.word	0x20001ff8

08008ef4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ef8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bc80      	pop	{r7}
 8008f00:	4770      	bx	lr
	...

08008f04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	6039      	str	r1, [r7, #0]
 8008f0e:	71fb      	strb	r3, [r7, #7]
 8008f10:	4613      	mov	r3, r2
 8008f12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	2b23      	cmp	r3, #35	; 0x23
 8008f18:	d84a      	bhi.n	8008fb0 <CDC_Control_FS+0xac>
 8008f1a:	a201      	add	r2, pc, #4	; (adr r2, 8008f20 <CDC_Control_FS+0x1c>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008fb1 	.word	0x08008fb1
 8008f24:	08008fb1 	.word	0x08008fb1
 8008f28:	08008fb1 	.word	0x08008fb1
 8008f2c:	08008fb1 	.word	0x08008fb1
 8008f30:	08008fb1 	.word	0x08008fb1
 8008f34:	08008fb1 	.word	0x08008fb1
 8008f38:	08008fb1 	.word	0x08008fb1
 8008f3c:	08008fb1 	.word	0x08008fb1
 8008f40:	08008fb1 	.word	0x08008fb1
 8008f44:	08008fb1 	.word	0x08008fb1
 8008f48:	08008fb1 	.word	0x08008fb1
 8008f4c:	08008fb1 	.word	0x08008fb1
 8008f50:	08008fb1 	.word	0x08008fb1
 8008f54:	08008fb1 	.word	0x08008fb1
 8008f58:	08008fb1 	.word	0x08008fb1
 8008f5c:	08008fb1 	.word	0x08008fb1
 8008f60:	08008fb1 	.word	0x08008fb1
 8008f64:	08008fb1 	.word	0x08008fb1
 8008f68:	08008fb1 	.word	0x08008fb1
 8008f6c:	08008fb1 	.word	0x08008fb1
 8008f70:	08008fb1 	.word	0x08008fb1
 8008f74:	08008fb1 	.word	0x08008fb1
 8008f78:	08008fb1 	.word	0x08008fb1
 8008f7c:	08008fb1 	.word	0x08008fb1
 8008f80:	08008fb1 	.word	0x08008fb1
 8008f84:	08008fb1 	.word	0x08008fb1
 8008f88:	08008fb1 	.word	0x08008fb1
 8008f8c:	08008fb1 	.word	0x08008fb1
 8008f90:	08008fb1 	.word	0x08008fb1
 8008f94:	08008fb1 	.word	0x08008fb1
 8008f98:	08008fb1 	.word	0x08008fb1
 8008f9c:	08008fb1 	.word	0x08008fb1
 8008fa0:	08008fb1 	.word	0x08008fb1
 8008fa4:	08008fb1 	.word	0x08008fb1
 8008fa8:	08008fb1 	.word	0x08008fb1
 8008fac:	08008fb1 	.word	0x08008fb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008fb0:	bf00      	nop
  }

  return (USBD_OK);
 8008fb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bc80      	pop	{r7}
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop

08008fc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	4805      	ldr	r0, [pc, #20]	; (8008fe4 <CDC_Receive_FS+0x24>)
 8008fce:	f7fc f94a 	bl	8005266 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008fd2:	4804      	ldr	r0, [pc, #16]	; (8008fe4 <CDC_Receive_FS+0x24>)
 8008fd4:	f7fc f989 	bl	80052ea <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008fd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20001d34 	.word	0x20001d34

08008fe8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ff8:	4b0d      	ldr	r3, [pc, #52]	; (8009030 <CDC_Transmit_FS+0x48>)
 8008ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800900a:	2301      	movs	r3, #1
 800900c:	e00b      	b.n	8009026 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800900e:	887b      	ldrh	r3, [r7, #2]
 8009010:	461a      	mov	r2, r3
 8009012:	6879      	ldr	r1, [r7, #4]
 8009014:	4806      	ldr	r0, [pc, #24]	; (8009030 <CDC_Transmit_FS+0x48>)
 8009016:	f7fc f90d 	bl	8005234 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800901a:	4805      	ldr	r0, [pc, #20]	; (8009030 <CDC_Transmit_FS+0x48>)
 800901c:	f7fc f936 	bl	800528c <USBD_CDC_TransmitPacket>
 8009020:	4603      	mov	r3, r0
 8009022:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009024:	7bfb      	ldrb	r3, [r7, #15]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20001d34 	.word	0x20001d34

08009034 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	4603      	mov	r3, r0
 800903c:	6039      	str	r1, [r7, #0]
 800903e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2212      	movs	r2, #18
 8009044:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009046:	4b03      	ldr	r3, [pc, #12]	; (8009054 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	bc80      	pop	{r7}
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	20000150 	.word	0x20000150

08009058 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	6039      	str	r1, [r7, #0]
 8009062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2204      	movs	r2, #4
 8009068:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800906a:	4b03      	ldr	r3, [pc, #12]	; (8009078 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800906c:	4618      	mov	r0, r3
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	bc80      	pop	{r7}
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	20000164 	.word	0x20000164

0800907c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d105      	bne.n	800909a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	4907      	ldr	r1, [pc, #28]	; (80090b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009092:	4808      	ldr	r0, [pc, #32]	; (80090b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009094:	f7fd f903 	bl	800629e <USBD_GetString>
 8009098:	e004      	b.n	80090a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	4904      	ldr	r1, [pc, #16]	; (80090b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800909e:	4805      	ldr	r0, [pc, #20]	; (80090b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090a0:	f7fd f8fd 	bl	800629e <USBD_GetString>
  }
  return USBD_StrDesc;
 80090a4:	4b02      	ldr	r3, [pc, #8]	; (80090b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20002078 	.word	0x20002078
 80090b4:	080098d0 	.word	0x080098d0

080090b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	4904      	ldr	r1, [pc, #16]	; (80090d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090c8:	4804      	ldr	r0, [pc, #16]	; (80090dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090ca:	f7fd f8e8 	bl	800629e <USBD_GetString>
  return USBD_StrDesc;
 80090ce:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20002078 	.word	0x20002078
 80090dc:	080098e8 	.word	0x080098e8

080090e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	4603      	mov	r3, r0
 80090e8:	6039      	str	r1, [r7, #0]
 80090ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	221a      	movs	r2, #26
 80090f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090f2:	f000 f843 	bl	800917c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090f6:	4b02      	ldr	r3, [pc, #8]	; (8009100 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20000168 	.word	0x20000168

08009104 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	6039      	str	r1, [r7, #0]
 800910e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d105      	bne.n	8009122 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	4907      	ldr	r1, [pc, #28]	; (8009138 <USBD_FS_ConfigStrDescriptor+0x34>)
 800911a:	4808      	ldr	r0, [pc, #32]	; (800913c <USBD_FS_ConfigStrDescriptor+0x38>)
 800911c:	f7fd f8bf 	bl	800629e <USBD_GetString>
 8009120:	e004      	b.n	800912c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	4904      	ldr	r1, [pc, #16]	; (8009138 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009126:	4805      	ldr	r0, [pc, #20]	; (800913c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009128:	f7fd f8b9 	bl	800629e <USBD_GetString>
  }
  return USBD_StrDesc;
 800912c:	4b02      	ldr	r3, [pc, #8]	; (8009138 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20002078 	.word	0x20002078
 800913c:	080098fc 	.word	0x080098fc

08009140 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	6039      	str	r1, [r7, #0]
 800914a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800914c:	79fb      	ldrb	r3, [r7, #7]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d105      	bne.n	800915e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	4907      	ldr	r1, [pc, #28]	; (8009174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009156:	4808      	ldr	r0, [pc, #32]	; (8009178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009158:	f7fd f8a1 	bl	800629e <USBD_GetString>
 800915c:	e004      	b.n	8009168 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	4904      	ldr	r1, [pc, #16]	; (8009174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009162:	4805      	ldr	r0, [pc, #20]	; (8009178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009164:	f7fd f89b 	bl	800629e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009168:	4b02      	ldr	r3, [pc, #8]	; (8009174 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20002078 	.word	0x20002078
 8009178:	08009908 	.word	0x08009908

0800917c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009182:	4b0f      	ldr	r3, [pc, #60]	; (80091c0 <Get_SerialNum+0x44>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009188:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <Get_SerialNum+0x48>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800918e:	4b0e      	ldr	r3, [pc, #56]	; (80091c8 <Get_SerialNum+0x4c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4413      	add	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d009      	beq.n	80091b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091a2:	2208      	movs	r2, #8
 80091a4:	4909      	ldr	r1, [pc, #36]	; (80091cc <Get_SerialNum+0x50>)
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 f814 	bl	80091d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091ac:	2204      	movs	r2, #4
 80091ae:	4908      	ldr	r1, [pc, #32]	; (80091d0 <Get_SerialNum+0x54>)
 80091b0:	68b8      	ldr	r0, [r7, #8]
 80091b2:	f000 f80f 	bl	80091d4 <IntToUnicode>
  }
}
 80091b6:	bf00      	nop
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	1ffff7e8 	.word	0x1ffff7e8
 80091c4:	1ffff7ec 	.word	0x1ffff7ec
 80091c8:	1ffff7f0 	.word	0x1ffff7f0
 80091cc:	2000016a 	.word	0x2000016a
 80091d0:	2000017a 	.word	0x2000017a

080091d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	4613      	mov	r3, r2
 80091e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091e6:	2300      	movs	r3, #0
 80091e8:	75fb      	strb	r3, [r7, #23]
 80091ea:	e027      	b.n	800923c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	0f1b      	lsrs	r3, r3, #28
 80091f0:	2b09      	cmp	r3, #9
 80091f2:	d80b      	bhi.n	800920c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	0f1b      	lsrs	r3, r3, #28
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	4619      	mov	r1, r3
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	440b      	add	r3, r1
 8009204:	3230      	adds	r2, #48	; 0x30
 8009206:	b2d2      	uxtb	r2, r2
 8009208:	701a      	strb	r2, [r3, #0]
 800920a:	e00a      	b.n	8009222 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	0f1b      	lsrs	r3, r3, #28
 8009210:	b2da      	uxtb	r2, r3
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	4619      	mov	r1, r3
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	440b      	add	r3, r1
 800921c:	3237      	adds	r2, #55	; 0x37
 800921e:	b2d2      	uxtb	r2, r2
 8009220:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	011b      	lsls	r3, r3, #4
 8009226:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	3301      	adds	r3, #1
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	4413      	add	r3, r2
 8009232:	2200      	movs	r2, #0
 8009234:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	3301      	adds	r3, #1
 800923a:	75fb      	strb	r3, [r7, #23]
 800923c:	7dfa      	ldrb	r2, [r7, #23]
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	429a      	cmp	r2, r3
 8009242:	d3d3      	bcc.n	80091ec <IntToUnicode+0x18>
  }
}
 8009244:	bf00      	nop
 8009246:	371c      	adds	r7, #28
 8009248:	46bd      	mov	sp, r7
 800924a:	bc80      	pop	{r7}
 800924c:	4770      	bx	lr
	...

08009250 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a0d      	ldr	r2, [pc, #52]	; (8009294 <HAL_PCD_MspInit+0x44>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d113      	bne.n	800928a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009262:	4b0d      	ldr	r3, [pc, #52]	; (8009298 <HAL_PCD_MspInit+0x48>)
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	4a0c      	ldr	r2, [pc, #48]	; (8009298 <HAL_PCD_MspInit+0x48>)
 8009268:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800926c:	61d3      	str	r3, [r2, #28]
 800926e:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <HAL_PCD_MspInit+0x48>)
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800927a:	2200      	movs	r2, #0
 800927c:	2105      	movs	r1, #5
 800927e:	2014      	movs	r0, #20
 8009280:	f7f7 faf3 	bl	800086a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009284:	2014      	movs	r0, #20
 8009286:	f7f7 fb0c 	bl	80008a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800928a:	bf00      	nop
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	40005c00 	.word	0x40005c00
 8009298:	40021000 	.word	0x40021000

0800929c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80092b0:	4619      	mov	r1, r3
 80092b2:	4610      	mov	r0, r2
 80092b4:	f7fc f8cf 	bl	8005456 <USBD_LL_SetupStage>
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80092d2:	78fa      	ldrb	r2, [r7, #3]
 80092d4:	6879      	ldr	r1, [r7, #4]
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	00db      	lsls	r3, r3, #3
 80092de:	440b      	add	r3, r1
 80092e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	78fb      	ldrb	r3, [r7, #3]
 80092e8:	4619      	mov	r1, r3
 80092ea:	f7fc f8ff 	bl	80054ec <USBD_LL_DataOutStage>
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	460b      	mov	r3, r1
 8009300:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009308:	78fa      	ldrb	r2, [r7, #3]
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	00db      	lsls	r3, r3, #3
 8009314:	440b      	add	r3, r1
 8009316:	333c      	adds	r3, #60	; 0x3c
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	4619      	mov	r1, r3
 800931e:	f7fc f956 	bl	80055ce <USBD_LL_DataInStage>
}
 8009322:	bf00      	nop
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b082      	sub	sp, #8
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009338:	4618      	mov	r0, r3
 800933a:	f7fc fa66 	bl	800580a <USBD_LL_SOF>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800934e:	2301      	movs	r3, #1
 8009350:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	2b02      	cmp	r3, #2
 8009358:	d001      	beq.n	800935e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800935a:	f7f7 f8b9 	bl	80004d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009364:	7bfa      	ldrb	r2, [r7, #15]
 8009366:	4611      	mov	r1, r2
 8009368:	4618      	mov	r0, r3
 800936a:	f7fc fa16 	bl	800579a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009374:	4618      	mov	r0, r3
 8009376:	f7fc f9cf 	bl	8005718 <USBD_LL_Reset>
}
 800937a:	bf00      	nop
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
	...

08009384 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009392:	4618      	mov	r0, r3
 8009394:	f7fc fa10 	bl	80057b8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093a0:	4b04      	ldr	r3, [pc, #16]	; (80093b4 <HAL_PCD_SuspendCallback+0x30>)
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	4a03      	ldr	r2, [pc, #12]	; (80093b4 <HAL_PCD_SuspendCallback+0x30>)
 80093a6:	f043 0306 	orr.w	r3, r3, #6
 80093aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	e000ed00 	.word	0xe000ed00

080093b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fc fa0a 	bl	80057e0 <USBD_LL_Resume>
}
 80093cc:	bf00      	nop
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80093dc:	4a28      	ldr	r2, [pc, #160]	; (8009480 <USBD_LL_Init+0xac>)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a26      	ldr	r2, [pc, #152]	; (8009480 <USBD_LL_Init+0xac>)
 80093e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80093ec:	4b24      	ldr	r3, [pc, #144]	; (8009480 <USBD_LL_Init+0xac>)
 80093ee:	4a25      	ldr	r2, [pc, #148]	; (8009484 <USBD_LL_Init+0xb0>)
 80093f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80093f2:	4b23      	ldr	r3, [pc, #140]	; (8009480 <USBD_LL_Init+0xac>)
 80093f4:	2208      	movs	r2, #8
 80093f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80093f8:	4b21      	ldr	r3, [pc, #132]	; (8009480 <USBD_LL_Init+0xac>)
 80093fa:	2202      	movs	r2, #2
 80093fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80093fe:	4b20      	ldr	r3, [pc, #128]	; (8009480 <USBD_LL_Init+0xac>)
 8009400:	2200      	movs	r2, #0
 8009402:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009404:	4b1e      	ldr	r3, [pc, #120]	; (8009480 <USBD_LL_Init+0xac>)
 8009406:	2200      	movs	r2, #0
 8009408:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800940a:	4b1d      	ldr	r3, [pc, #116]	; (8009480 <USBD_LL_Init+0xac>)
 800940c:	2200      	movs	r2, #0
 800940e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009410:	481b      	ldr	r0, [pc, #108]	; (8009480 <USBD_LL_Init+0xac>)
 8009412:	f7f7 fbec 	bl	8000bee <HAL_PCD_Init>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800941c:	f7f7 f858 	bl	80004d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009426:	2318      	movs	r3, #24
 8009428:	2200      	movs	r2, #0
 800942a:	2100      	movs	r1, #0
 800942c:	f7f8 ff20 	bl	8002270 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009436:	2358      	movs	r3, #88	; 0x58
 8009438:	2200      	movs	r2, #0
 800943a:	2180      	movs	r1, #128	; 0x80
 800943c:	f7f8 ff18 	bl	8002270 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009446:	23c0      	movs	r3, #192	; 0xc0
 8009448:	2200      	movs	r2, #0
 800944a:	2181      	movs	r1, #129	; 0x81
 800944c:	f7f8 ff10 	bl	8002270 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009456:	f44f 7388 	mov.w	r3, #272	; 0x110
 800945a:	2200      	movs	r2, #0
 800945c:	2101      	movs	r1, #1
 800945e:	f7f8 ff07 	bl	8002270 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800946c:	2200      	movs	r2, #0
 800946e:	2182      	movs	r1, #130	; 0x82
 8009470:	f7f8 fefe 	bl	8002270 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20002278 	.word	0x20002278
 8009484:	40005c00 	.word	0x40005c00

08009488 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800949e:	4618      	mov	r0, r3
 80094a0:	f7f7 fcb0 	bl	8000e04 <HAL_PCD_Start>
 80094a4:	4603      	mov	r3, r0
 80094a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 f94e 	bl	800974c <USBD_Get_USB_Status>
 80094b0:	4603      	mov	r3, r0
 80094b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	4608      	mov	r0, r1
 80094c8:	4611      	mov	r1, r2
 80094ca:	461a      	mov	r2, r3
 80094cc:	4603      	mov	r3, r0
 80094ce:	70fb      	strb	r3, [r7, #3]
 80094d0:	460b      	mov	r3, r1
 80094d2:	70bb      	strb	r3, [r7, #2]
 80094d4:	4613      	mov	r3, r2
 80094d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094e6:	78bb      	ldrb	r3, [r7, #2]
 80094e8:	883a      	ldrh	r2, [r7, #0]
 80094ea:	78f9      	ldrb	r1, [r7, #3]
 80094ec:	f7f7 fe2a 	bl	8001144 <HAL_PCD_EP_Open>
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 f928 	bl	800974c <USBD_Get_USB_Status>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009500:	7bbb      	ldrb	r3, [r7, #14]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009524:	78fa      	ldrb	r2, [r7, #3]
 8009526:	4611      	mov	r1, r2
 8009528:	4618      	mov	r0, r3
 800952a:	f7f7 fe71 	bl	8001210 <HAL_PCD_EP_Close>
 800952e:	4603      	mov	r3, r0
 8009530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	4618      	mov	r0, r3
 8009536:	f000 f909 	bl	800974c <USBD_Get_USB_Status>
 800953a:	4603      	mov	r3, r0
 800953c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800953e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	4611      	mov	r1, r2
 8009566:	4618      	mov	r0, r3
 8009568:	f7f7 ff31 	bl	80013ce <HAL_PCD_EP_SetStall>
 800956c:	4603      	mov	r3, r0
 800956e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	4618      	mov	r0, r3
 8009574:	f000 f8ea 	bl	800974c <USBD_Get_USB_Status>
 8009578:	4603      	mov	r3, r0
 800957a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800957c:	7bbb      	ldrb	r3, [r7, #14]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	460b      	mov	r3, r1
 8009590:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095a0:	78fa      	ldrb	r2, [r7, #3]
 80095a2:	4611      	mov	r1, r2
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7f7 ff72 	bl	800148e <HAL_PCD_EP_ClrStall>
 80095aa:	4603      	mov	r3, r0
 80095ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 f8cb 	bl	800974c <USBD_Get_USB_Status>
 80095b6:	4603      	mov	r3, r0
 80095b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	da0c      	bge.n	80095fa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095e6:	68f9      	ldr	r1, [r7, #12]
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	4613      	mov	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	00db      	lsls	r3, r3, #3
 80095f2:	440b      	add	r3, r1
 80095f4:	3302      	adds	r3, #2
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	e00b      	b.n	8009612 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095fa:	78fb      	ldrb	r3, [r7, #3]
 80095fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009600:	68f9      	ldr	r1, [r7, #12]
 8009602:	4613      	mov	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	440b      	add	r3, r1
 800960c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009610:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr

0800961c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009636:	78fa      	ldrb	r2, [r7, #3]
 8009638:	4611      	mov	r1, r2
 800963a:	4618      	mov	r0, r3
 800963c:	f7f7 fd5d 	bl	80010fa <HAL_PCD_SetAddress>
 8009640:	4603      	mov	r3, r0
 8009642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	4618      	mov	r0, r3
 8009648:	f000 f880 	bl	800974c <USBD_Get_USB_Status>
 800964c:	4603      	mov	r3, r0
 800964e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009650:	7bbb      	ldrb	r3, [r7, #14]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b086      	sub	sp, #24
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	607a      	str	r2, [r7, #4]
 8009664:	461a      	mov	r2, r3
 8009666:	460b      	mov	r3, r1
 8009668:	72fb      	strb	r3, [r7, #11]
 800966a:	4613      	mov	r3, r2
 800966c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800967c:	893b      	ldrh	r3, [r7, #8]
 800967e:	7af9      	ldrb	r1, [r7, #11]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	f7f7 fe61 	bl	8001348 <HAL_PCD_EP_Transmit>
 8009686:	4603      	mov	r3, r0
 8009688:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800968a:	7dfb      	ldrb	r3, [r7, #23]
 800968c:	4618      	mov	r0, r3
 800968e:	f000 f85d 	bl	800974c <USBD_Get_USB_Status>
 8009692:	4603      	mov	r3, r0
 8009694:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009696:	7dbb      	ldrb	r3, [r7, #22]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	461a      	mov	r2, r3
 80096ac:	460b      	mov	r3, r1
 80096ae:	72fb      	strb	r3, [r7, #11]
 80096b0:	4613      	mov	r3, r2
 80096b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096c2:	893b      	ldrh	r3, [r7, #8]
 80096c4:	7af9      	ldrb	r1, [r7, #11]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	f7f7 fdea 	bl	80012a0 <HAL_PCD_EP_Receive>
 80096cc:	4603      	mov	r3, r0
 80096ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 f83a 	bl	800974c <USBD_Get_USB_Status>
 80096d8:	4603      	mov	r3, r0
 80096da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096f8:	78fa      	ldrb	r2, [r7, #3]
 80096fa:	4611      	mov	r1, r2
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7f7 fe0c 	bl	800131a <HAL_PCD_EP_GetRxCount>
 8009702:	4603      	mov	r3, r0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009714:	4b02      	ldr	r3, [pc, #8]	; (8009720 <USBD_static_malloc+0x14>)
}
 8009716:	4618      	mov	r0, r3
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	bc80      	pop	{r7}
 800971e:	4770      	bx	lr
 8009720:	20001aac 	.word	0x20001aac

08009724 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]

}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	bc80      	pop	{r7}
 8009734:	4770      	bx	lr

08009736 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009736:	b480      	push	{r7}
 8009738:	b083      	sub	sp, #12
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	460b      	mov	r3, r1
 8009740:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009742:	bf00      	nop
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	bc80      	pop	{r7}
 800974a:	4770      	bx	lr

0800974c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800975a:	79fb      	ldrb	r3, [r7, #7]
 800975c:	2b03      	cmp	r3, #3
 800975e:	d817      	bhi.n	8009790 <USBD_Get_USB_Status+0x44>
 8009760:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <USBD_Get_USB_Status+0x1c>)
 8009762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009766:	bf00      	nop
 8009768:	08009779 	.word	0x08009779
 800976c:	0800977f 	.word	0x0800977f
 8009770:	08009785 	.word	0x08009785
 8009774:	0800978b 	.word	0x0800978b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	73fb      	strb	r3, [r7, #15]
    break;
 800977c:	e00b      	b.n	8009796 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800977e:	2302      	movs	r3, #2
 8009780:	73fb      	strb	r3, [r7, #15]
    break;
 8009782:	e008      	b.n	8009796 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009784:	2301      	movs	r3, #1
 8009786:	73fb      	strb	r3, [r7, #15]
    break;
 8009788:	e005      	b.n	8009796 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800978a:	2302      	movs	r3, #2
 800978c:	73fb      	strb	r3, [r7, #15]
    break;
 800978e:	e002      	b.n	8009796 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009790:	2302      	movs	r3, #2
 8009792:	73fb      	strb	r3, [r7, #15]
    break;
 8009794:	bf00      	nop
  }
  return usb_status;
 8009796:	7bfb      	ldrb	r3, [r7, #15]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	bc80      	pop	{r7}
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop

080097a4 <__libc_init_array>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	2500      	movs	r5, #0
 80097a8:	4e0c      	ldr	r6, [pc, #48]	; (80097dc <__libc_init_array+0x38>)
 80097aa:	4c0d      	ldr	r4, [pc, #52]	; (80097e0 <__libc_init_array+0x3c>)
 80097ac:	1ba4      	subs	r4, r4, r6
 80097ae:	10a4      	asrs	r4, r4, #2
 80097b0:	42a5      	cmp	r5, r4
 80097b2:	d109      	bne.n	80097c8 <__libc_init_array+0x24>
 80097b4:	f000 f82e 	bl	8009814 <_init>
 80097b8:	2500      	movs	r5, #0
 80097ba:	4e0a      	ldr	r6, [pc, #40]	; (80097e4 <__libc_init_array+0x40>)
 80097bc:	4c0a      	ldr	r4, [pc, #40]	; (80097e8 <__libc_init_array+0x44>)
 80097be:	1ba4      	subs	r4, r4, r6
 80097c0:	10a4      	asrs	r4, r4, #2
 80097c2:	42a5      	cmp	r5, r4
 80097c4:	d105      	bne.n	80097d2 <__libc_init_array+0x2e>
 80097c6:	bd70      	pop	{r4, r5, r6, pc}
 80097c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097cc:	4798      	blx	r3
 80097ce:	3501      	adds	r5, #1
 80097d0:	e7ee      	b.n	80097b0 <__libc_init_array+0xc>
 80097d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097d6:	4798      	blx	r3
 80097d8:	3501      	adds	r5, #1
 80097da:	e7f2      	b.n	80097c2 <__libc_init_array+0x1e>
 80097dc:	0800994c 	.word	0x0800994c
 80097e0:	0800994c 	.word	0x0800994c
 80097e4:	0800994c 	.word	0x0800994c
 80097e8:	08009950 	.word	0x08009950

080097ec <memcpy>:
 80097ec:	b510      	push	{r4, lr}
 80097ee:	1e43      	subs	r3, r0, #1
 80097f0:	440a      	add	r2, r1
 80097f2:	4291      	cmp	r1, r2
 80097f4:	d100      	bne.n	80097f8 <memcpy+0xc>
 80097f6:	bd10      	pop	{r4, pc}
 80097f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009800:	e7f7      	b.n	80097f2 <memcpy+0x6>

08009802 <memset>:
 8009802:	4603      	mov	r3, r0
 8009804:	4402      	add	r2, r0
 8009806:	4293      	cmp	r3, r2
 8009808:	d100      	bne.n	800980c <memset+0xa>
 800980a:	4770      	bx	lr
 800980c:	f803 1b01 	strb.w	r1, [r3], #1
 8009810:	e7f9      	b.n	8009806 <memset+0x4>
	...

08009814 <_init>:
 8009814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009816:	bf00      	nop
 8009818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981a:	bc08      	pop	{r3}
 800981c:	469e      	mov	lr, r3
 800981e:	4770      	bx	lr

08009820 <_fini>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	bf00      	nop
 8009824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009826:	bc08      	pop	{r3}
 8009828:	469e      	mov	lr, r3
 800982a:	4770      	bx	lr
